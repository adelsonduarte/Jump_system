
JMP_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b51c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  0800b628  0800b628  0001b628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be3c  0800be3c  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800be3c  0800be3c  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be3c  0800be3c  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be3c  0800be3c  0001be3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be40  0800be40  0001be40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  0800be44  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200001a8  0800bfec  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  0800bfec  00020694  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156c2  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f8e  00000000  00000000  00035893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00039828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003af50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d2c7  00000000  00000000  0003c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8d9  00000000  00000000  0005971f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f11  00000000  00000000  00074ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105f09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a84  00000000  00000000  00105f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b610 	.word	0x0800b610

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	0800b610 	.word	0x0800b610

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2uiz>:
 8000a48:	004a      	lsls	r2, r1, #1
 8000a4a:	d211      	bcs.n	8000a70 <__aeabi_d2uiz+0x28>
 8000a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a50:	d211      	bcs.n	8000a76 <__aeabi_d2uiz+0x2e>
 8000a52:	d50d      	bpl.n	8000a70 <__aeabi_d2uiz+0x28>
 8000a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a5c:	d40e      	bmi.n	8000a7c <__aeabi_d2uiz+0x34>
 8000a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7a:	d102      	bne.n	8000a82 <__aeabi_d2uiz+0x3a>
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	4770      	bx	lr
 8000a82:	f04f 0000 	mov.w	r0, #0
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <eraseStateMachine>:
        unsigned char menuState;
        struct dataInsert menuInsert;
    };

unsigned char eraseStateMachine(struct Menu* subMenu)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuErase = subMenu;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	613b      	str	r3, [r7, #16]
    unsigned char key = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	75fb      	strb	r3, [r7, #23]
    unsigned char index = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	72fb      	strb	r3, [r7, #11]
    unsigned char displayUpdateStatus = IDDLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	72bb      	strb	r3, [r7, #10]
    unsigned char* ptr_eraseString;
    while(key != MENU)
 8000cbc:	e07c      	b.n	8000db8 <eraseStateMachine+0x114>
    {
        switch(subMenuErase->menuState)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	78db      	ldrb	r3, [r3, #3]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d066      	beq.n	8000d94 <eraseStateMachine+0xf0>
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	dc76      	bgt.n	8000db8 <eraseStateMachine+0x114>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <eraseStateMachine+0x30>
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d008      	beq.n	8000ce4 <eraseStateMachine+0x40>
 8000cd2:	e071      	b.n	8000db8 <eraseStateMachine+0x114>
        {
            case IDDLE:
                subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f003 faab 	bl	8004230 <getNextSub>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	70da      	strb	r2, [r3, #3]
            break;
 8000ce2:	e069      	b.n	8000db8 <eraseStateMachine+0x114>

            case VERFICA_APAGAR:
                updateUserMsg(3,2,eraseselectUserMsg,&displayUpdateStatus);
 8000ce4:	4b39      	ldr	r3, [pc, #228]	; (8000dcc <eraseStateMachine+0x128>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	f107 030a 	add.w	r3, r7, #10
 8000cec:	2102      	movs	r1, #2
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f001 febc 	bl	8002a6c <updateUserMsg>
                ptr_eraseString = getEraseTestString();
 8000cf4:	f001 fba6 	bl	8002444 <getEraseTestString>
 8000cf8:	60f8      	str	r0, [r7, #12]
                printDataDisplay(0,0,ptr_eraseString);
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f002 fdea 	bl	80038d8 <printDataDisplay>
                key = getKeyPressed();
 8000d04:	f004 f834 	bl	8004d70 <getKeyPressed>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	75fb      	strb	r3, [r7, #23]

                if(key == INSERIR)
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	2b49      	cmp	r3, #73	; 0x49
 8000d10:	d10e      	bne.n	8000d30 <eraseStateMachine+0x8c>
                {
                	resetKeyPressed();
 8000d12:	f004 f839 	bl	8004d88 <resetKeyPressed>
                    setUserErase(&index);
 8000d16:	f107 030b 	add.w	r3, r7, #11
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fc0a 	bl	8002534 <setUserErase>
                    subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f003 fa85 	bl	8004230 <getNextSub>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	70da      	strb	r2, [r3, #3]
 8000d2e:	e043      	b.n	8000db8 <eraseStateMachine+0x114>
                }
                else if(key == CONFIRMAR)
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
 8000d32:	2b43      	cmp	r3, #67	; 0x43
 8000d34:	d140      	bne.n	8000db8 <eraseStateMachine+0x114>
                {
                	resetKeyPressed();
 8000d36:	f004 f827 	bl	8004d88 <resetKeyPressed>
                    if(*ptr_eraseString == '5')
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b35      	cmp	r3, #53	; 0x35
 8000d40:	d11a      	bne.n	8000d78 <eraseStateMachine+0xd4>
                    {
                        updateUserMsg(3,2,erasingUserMsg,&displayUpdateStatus);
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <eraseStateMachine+0x12c>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	f107 030a 	add.w	r3, r7, #10
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f001 fe8d 	bl	8002a6c <updateUserMsg>
                        resetMyResults();
 8000d52:	f001 f91d 	bl	8001f90 <resetMyResults>
                        subMenuErase->menuSelect = setSelectSub(&subMenuErase->menuState);
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	3303      	adds	r3, #3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fa7a 	bl	8004254 <setSelectSub>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	705a      	strb	r2, [r3, #1]
                        subMenuErase->menuState = getNextSub(CONFIRMA_APAGAR);
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f003 fa61 	bl	8004230 <getNextSub>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	70da      	strb	r2, [r3, #3]
 8000d76:	e01f      	b.n	8000db8 <eraseStateMachine+0x114>
                    }
                    else if(*ptr_eraseString == '2')
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b32      	cmp	r3, #50	; 0x32
 8000d7e:	d11b      	bne.n	8000db8 <eraseStateMachine+0x114>
                    {
                     subMenuErase->menuState = getNextSub(IDDLE);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f003 fa55 	bl	8004230 <getNextSub>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	70da      	strb	r2, [r3, #3]
                      key = MENU;
 8000d8e:	234d      	movs	r3, #77	; 0x4d
 8000d90:	75fb      	strb	r3, [r7, #23]
                    }
                }

            break;
 8000d92:	e011      	b.n	8000db8 <eraseStateMachine+0x114>

            case CONFIRMA_APAGAR:
                updateUserMsg(3,2,erasedUserMsg,&displayUpdateStatus);
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <eraseStateMachine+0x130>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	f107 030a 	add.w	r3, r7, #10
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f001 fe64 	bl	8002a6c <updateUserMsg>
                subMenuErase->menuState = getNextSub(IDDLE);
 8000da4:	2000      	movs	r0, #0
 8000da6:	f003 fa43 	bl	8004230 <getNextSub>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	70da      	strb	r2, [r3, #3]
                key = MENU;
 8000db2:	234d      	movs	r3, #77	; 0x4d
 8000db4:	75fb      	strb	r3, [r7, #23]
                break;
 8000db6:	bf00      	nop
    while(key != MENU)
 8000db8:	7dfb      	ldrb	r3, [r7, #23]
 8000dba:	2b4d      	cmp	r3, #77	; 0x4d
 8000dbc:	f47f af7f 	bne.w	8000cbe <eraseStateMachine+0x1a>
        }
    }
}
 8000dc0:	bf00      	nop
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000ac 	.word	0x200000ac
 8000dd0:	200000b0 	.word	0x200000b0
 8000dd4:	200000b4 	.word	0x200000b4

08000dd8 <configStateMachine>:
//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
//verificar se vou usar o codigo abaixo


unsigned char configStateMachine(struct Menu* subMenu)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ac      	sub	sp, #176	; 0xb0
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    unsigned char* ptr_numSeriesString;
    unsigned char* ptr_intervalSeriesString;

    unsigned char userIntervalSaltosTimeString[9];
    struct tm myTime;
	struct tm* configIntervalTimeStruct = &myTime;
 8000de0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    struct Menu* subMenuTesteConfigurar = subMenu;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    unsigned char cursorPosition[2] = {0,0};
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    //verificar se vou usar
    struct dataInsert measurementSensor1;
    struct dataInsert measurementSensor2;
    //
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 8000df4:	f000 ff58 	bl	8001ca8 <getUserConfigStruct>
 8000df8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    resetConfigStruct(ptr_userConfiguration);
 8000dfc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8000e00:	f001 f88c 	bl	8001f1c <resetConfigStruct>

    //
    unsigned char key = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    unsigned char displayUpdateStatus = IDDLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
    short index = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	81bb      	strh	r3, [r7, #12]
    unsigned int altMin = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    unsigned int altMax = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    unsigned int tmin = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    unsigned int tmax = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    while(key != MENU)
 8000e2a:	bf00      	nop
 8000e2c:	f000 bcc9 	b.w	80017c2 <configStateMachine+0x9ea>
    {
        switch(subMenuTesteConfigurar->menuState)
 8000e30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e34:	78db      	ldrb	r3, [r3, #3]
 8000e36:	2b0d      	cmp	r3, #13
 8000e38:	f200 84c3 	bhi.w	80017c2 <configStateMachine+0x9ea>
 8000e3c:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <configStateMachine+0x6c>)
 8000e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e42:	bf00      	nop
 8000e44:	08000e7d 	.word	0x08000e7d
 8000e48:	08000e91 	.word	0x08000e91
 8000e4c:	08000f2b 	.word	0x08000f2b
 8000e50:	08000fc3 	.word	0x08000fc3
 8000e54:	080010c1 	.word	0x080010c1
 8000e58:	08001183 	.word	0x08001183
 8000e5c:	0800125b 	.word	0x0800125b
 8000e60:	08001335 	.word	0x08001335
 8000e64:	08001417 	.word	0x08001417
 8000e68:	080014c3 	.word	0x080014c3
 8000e6c:	08001589 	.word	0x08001589
 8000e70:	08001669 	.word	0x08001669
 8000e74:	080016ff 	.word	0x080016ff
 8000e78:	08001793 	.word	0x08001793
        {
        case IDDLE:
            subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f003 f9d7 	bl	8004230 <getNextSub>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e8a:	70da      	strb	r2, [r3, #3]

            break;
 8000e8c:	f000 bc99 	b.w	80017c2 <configStateMachine+0x9ea>
            case CONFIG_SENSOR_1:
                updateUserMsg(0,0,sensor1UserMsg,&displayUpdateStatus);
 8000e90:	4bda      	ldr	r3, [pc, #872]	; (80011fc <configStateMachine+0x424>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	f107 030f 	add.w	r3, r7, #15
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f001 fde6 	bl	8002a6c <updateUserMsg>
                key = getKeyPressed();
 8000ea0:	f003 ff66 	bl	8004d70 <getKeyPressed>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                if(key == AVANCAR)
 8000eaa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000eae:	2b41      	cmp	r3, #65	; 0x41
 8000eb0:	d113      	bne.n	8000eda <configStateMachine+0x102>
                {
                	resetKeyPressed();
 8000eb2:	f003 ff69 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000eb6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000eba:	f107 030f 	add.w	r3, r7, #15
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fdf1 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_2);
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f003 f9b2 	bl	8004230 <getNextSub>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ed4:	70da      	strb	r2, [r3, #3]
 8000ed6:	f000 bc74 	b.w	80017c2 <configStateMachine+0x9ea>
                }
                else if(key == CONFIRMAR)
 8000eda:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000ede:	2b43      	cmp	r3, #67	; 0x43
 8000ee0:	f040 846f 	bne.w	80017c2 <configStateMachine+0x9ea>
                {
                	resetKeyPressed();
 8000ee4:	f003 ff50 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000ee8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000eec:	f107 030f 	add.w	r3, r7, #15
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fdd8 	bl	8002aa8 <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 1;
 8000ef8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000efc:	2201      	movs	r2, #1
 8000efe:	755a      	strb	r2, [r3, #21]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000f00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f04:	3303      	adds	r3, #3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 f9a4 	bl	8004254 <setSelectSub>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f14:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8000f16:	2003      	movs	r0, #3
 8000f18:	f003 f98a 	bl	8004230 <getNextSub>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f24:	70da      	strb	r2, [r3, #3]
                }

                break;
 8000f26:	f000 bc4c 	b.w	80017c2 <configStateMachine+0x9ea>

            case CONFIG_SENSOR_2:
                updateUserMsg(0,0,sensor2UserMsg,&displayUpdateStatus);
 8000f2a:	4bb5      	ldr	r3, [pc, #724]	; (8001200 <configStateMachine+0x428>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	f107 030f 	add.w	r3, r7, #15
 8000f32:	2100      	movs	r1, #0
 8000f34:	2000      	movs	r0, #0
 8000f36:	f001 fd99 	bl	8002a6c <updateUserMsg>
                key = getKeyPressed();
 8000f3a:	f003 ff19 	bl	8004d70 <getKeyPressed>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                if(key == AVANCAR)
 8000f44:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000f48:	2b41      	cmp	r3, #65	; 0x41
 8000f4a:	d113      	bne.n	8000f74 <configStateMachine+0x19c>
                {
                	resetKeyPressed();
 8000f4c:	f003 ff1c 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000f50:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f54:	f107 030f 	add.w	r3, r7, #15
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fda4 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f003 f965 	bl	8004230 <getNextSub>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f6e:	70da      	strb	r2, [r3, #3]
 8000f70:	f000 bc27 	b.w	80017c2 <configStateMachine+0x9ea>
                }
                else if(key == CONFIRMAR)
 8000f74:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000f78:	2b43      	cmp	r3, #67	; 0x43
 8000f7a:	f040 8422 	bne.w	80017c2 <configStateMachine+0x9ea>
                {
                	resetKeyPressed();
 8000f7e:	f003 ff03 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000f82:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f86:	f107 030f 	add.w	r3, r7, #15
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fd8b 	bl	8002aa8 <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 2;
 8000f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f96:	2202      	movs	r2, #2
 8000f98:	755a      	strb	r2, [r3, #21]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000f9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f9e:	3303      	adds	r3, #3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 f957 	bl	8004254 <setSelectSub>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fae:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f003 f93d 	bl	8004230 <getNextSub>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fbe:	70da      	strb	r2, [r3, #3]
                }
                break;
 8000fc0:	e3ff      	b.n	80017c2 <configStateMachine+0x9ea>

            case SENSOR_ALTMIN:
                updateUserMsg(0,0,altminUserMsg,&displayUpdateStatus);
 8000fc2:	4b90      	ldr	r3, [pc, #576]	; (8001204 <configStateMachine+0x42c>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f107 030f 	add.w	r3, r7, #15
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f001 fd4d 	bl	8002a6c <updateUserMsg>
                ptr_altMinString = getAltMinString();
 8000fd2:	f001 f8fb 	bl	80021cc <getAltMinString>
 8000fd6:	6778      	str	r0, [r7, #116]	; 0x74
                printDataDisplay(0,1,ptr_altMinString);
 8000fd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f002 fc7b 	bl	80038d8 <printDataDisplay>
                updateDataDisplay(index,1);
 8000fe2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 fc8f 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 8000fee:	f003 febf 	bl	8004d70 <getKeyPressed>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                if(key == INSERIR)
 8000ff8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000ffc:	2b49      	cmp	r3, #73	; 0x49
 8000ffe:	d10f      	bne.n	8001020 <configStateMachine+0x248>
                {
                	resetKeyPressed();
 8001000:	f003 fec2 	bl	8004d88 <resetKeyPressed>
                    setUserAltMin(&index);
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fa6f 	bl	80024ec <setUserAltMin>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 800100e:	2003      	movs	r0, #3
 8001010:	f003 f90e 	bl	8004230 <getNextSub>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800101c:	70da      	strb	r2, [r3, #3]
 800101e:	e3d0      	b.n	80017c2 <configStateMachine+0x9ea>
                }
                else if(key == AVANCAR)
 8001020:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001024:	2b41      	cmp	r3, #65	; 0x41
 8001026:	d108      	bne.n	800103a <configStateMachine+0x262>
                {
                	resetKeyPressed();
 8001028:	f003 feae 	bl	8004d88 <resetKeyPressed>
                    indexChange(&index,2);
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2102      	movs	r1, #2
 8001032:	4618      	mov	r0, r3
 8001034:	f001 f8ab 	bl	800218e <indexChange>
 8001038:	e3c3      	b.n	80017c2 <configStateMachine+0x9ea>
                }
                else if(key == CONFIRMAR)
 800103a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800103e:	2b43      	cmp	r3, #67	; 0x43
 8001040:	f040 83bf 	bne.w	80017c2 <configStateMachine+0x9ea>
                {
                	resetKeyPressed();
 8001044:	f003 fea0 	bl	8004d88 <resetKeyPressed>
                    index = 2;
 8001048:	2302      	movs	r3, #2
 800104a:	81bb      	strh	r3, [r7, #12]

                    altMin = stringToInt(getAltMinString());
 800104c:	f001 f8be 	bl	80021cc <getAltMinString>
 8001050:	4603      	mov	r3, r0
 8001052:	4618      	mov	r0, r3
 8001054:	f001 f860 	bl	8002118 <stringToInt>
 8001058:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                    altMax = stringToInt(getAltMaxString());
 800105c:	f001 f8d6 	bl	800220c <getAltMaxString>
 8001060:	4603      	mov	r3, r0
 8001062:	4618      	mov	r0, r3
 8001064:	f001 f858 	bl	8002118 <stringToInt>
 8001068:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    tmin = alturaToTempo(altMin);
 800106c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001070:	f001 fcca 	bl	8002a08 <alturaToTempo>
 8001074:	4603      	mov	r3, r0
 8001076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					tmax = alturaToTempo(altMax);
 800107a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800107e:	f001 fcc3 	bl	8002a08 <alturaToTempo>
 8001082:	4603      	mov	r3, r0
 8001084:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001088:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800108c:	f107 030f 	add.w	r3, r7, #15
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fd08 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 8001098:	2004      	movs	r0, #4
 800109a:	f003 f8c9 	bl	8004230 <getNextSub>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010a6:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80010a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010ac:	3303      	adds	r3, #3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 f8d0 	bl	8004254 <setSelectSub>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010bc:	705a      	strb	r2, [r3, #1]
                }
                break;
 80010be:	e380      	b.n	80017c2 <configStateMachine+0x9ea>

            case SENSOR_ALTMAX:
                updateUserMsg(0,0,altmaxUserMsg,&displayUpdateStatus);
 80010c0:	4b51      	ldr	r3, [pc, #324]	; (8001208 <configStateMachine+0x430>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f107 030f 	add.w	r3, r7, #15
 80010c8:	2100      	movs	r1, #0
 80010ca:	2000      	movs	r0, #0
 80010cc:	f001 fcce 	bl	8002a6c <updateUserMsg>
                ptr_altMaxString = getAltMaxString();
 80010d0:	f001 f89c 	bl	800220c <getAltMaxString>
 80010d4:	67b8      	str	r0, [r7, #120]	; 0x78
                printDataDisplay(0,1,ptr_altMaxString);
 80010d6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80010d8:	2101      	movs	r1, #1
 80010da:	2000      	movs	r0, #0
 80010dc:	f002 fbfc 	bl	80038d8 <printDataDisplay>
                updateDataDisplay(index,1);
 80010e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010e4:	2101      	movs	r1, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fc10 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 80010ec:	f003 fe40 	bl	8004d70 <getKeyPressed>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                if(key == INSERIR)
 80010f6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80010fa:	2b49      	cmp	r3, #73	; 0x49
 80010fc:	d10f      	bne.n	800111e <configStateMachine+0x346>
                {
                	resetKeyPressed();
 80010fe:	f003 fe43 	bl	8004d88 <resetKeyPressed>
                    setUserAltMax(&index);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	4618      	mov	r0, r3
 8001108:	f001 fa39 	bl	800257e <setUserAltMax>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 800110c:	2004      	movs	r0, #4
 800110e:	f003 f88f 	bl	8004230 <getNextSub>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800111a:	70da      	strb	r2, [r3, #3]
 800111c:	e351      	b.n	80017c2 <configStateMachine+0x9ea>
                }
                else if(key == AVANCAR)
 800111e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001122:	2b41      	cmp	r3, #65	; 0x41
 8001124:	d108      	bne.n	8001138 <configStateMachine+0x360>
                {
                	resetKeyPressed();
 8001126:	f003 fe2f 	bl	8004d88 <resetKeyPressed>
                    indexChange(&index,2);
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2102      	movs	r1, #2
 8001130:	4618      	mov	r0, r3
 8001132:	f001 f82c 	bl	800218e <indexChange>
 8001136:	e344      	b.n	80017c2 <configStateMachine+0x9ea>
                }
                else if(key == CONFIRMAR)
 8001138:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800113c:	2b43      	cmp	r3, #67	; 0x43
 800113e:	f040 8340 	bne.w	80017c2 <configStateMachine+0x9ea>
                {
                	resetKeyPressed();
 8001142:	f003 fe21 	bl	8004d88 <resetKeyPressed>
                    index = 2;
 8001146:	2302      	movs	r3, #2
 8001148:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800114a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800114e:	f107 030f 	add.w	r3, r7, #15
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fca7 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 800115a:	2005      	movs	r0, #5
 800115c:	f003 f868 	bl	8004230 <getNextSub>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001168:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 800116a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800116e:	3303      	adds	r3, #3
 8001170:	4618      	mov	r0, r3
 8001172:	f003 f86f 	bl	8004254 <setSelectSub>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800117e:	705a      	strb	r2, [r3, #1]
                }

                break;
 8001180:	e31f      	b.n	80017c2 <configStateMachine+0x9ea>

            case SENSOR_SALTOS:
                updateUserMsg(0,0,numsaltosUserMsg,&displayUpdateStatus);
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <configStateMachine+0x434>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	f107 030f 	add.w	r3, r7, #15
 800118a:	2100      	movs	r1, #0
 800118c:	2000      	movs	r0, #0
 800118e:	f001 fc6d 	bl	8002a6c <updateUserMsg>
                ptr_numSaltosString = getNumSaltosString();
 8001192:	f001 f85b 	bl	800224c <getNumSaltosString>
 8001196:	67f8      	str	r0, [r7, #124]	; 0x7c
                printDataDisplay(0,1,ptr_numSaltosString);
 8001198:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800119a:	2101      	movs	r1, #1
 800119c:	2000      	movs	r0, #0
 800119e:	f002 fb9b 	bl	80038d8 <printDataDisplay>
                updateDataDisplay(index,1);
 80011a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011a6:	2101      	movs	r1, #1
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fbaf 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 80011ae:	f003 fddf 	bl	8004d70 <getKeyPressed>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                if(key == INSERIR)
 80011b8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80011bc:	2b49      	cmp	r3, #73	; 0x49
 80011be:	d10f      	bne.n	80011e0 <configStateMachine+0x408>
                {
                	resetKeyPressed();
 80011c0:	f003 fde2 	bl	8004d88 <resetKeyPressed>
                    setUserNumSaltos(&index);
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 f9fc 	bl	80025c6 <setUserNumSaltos>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 80011ce:	2005      	movs	r0, #5
 80011d0:	f003 f82e 	bl	8004230 <getNextSub>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011dc:	70da      	strb	r2, [r3, #3]
 80011de:	e2f0      	b.n	80017c2 <configStateMachine+0x9ea>
                }
                else if(key == AVANCAR)
 80011e0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80011e4:	2b41      	cmp	r3, #65	; 0x41
 80011e6:	d113      	bne.n	8001210 <configStateMachine+0x438>
                {
                	resetKeyPressed();
 80011e8:	f003 fdce 	bl	8004d88 <resetKeyPressed>
                    indexChange(&index,2);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	2102      	movs	r1, #2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 ffcb 	bl	800218e <indexChange>
 80011f8:	e2e3      	b.n	80017c2 <configStateMachine+0x9ea>
 80011fa:	bf00      	nop
 80011fc:	2000006c 	.word	0x2000006c
 8001200:	20000070 	.word	0x20000070
 8001204:	20000074 	.word	0x20000074
 8001208:	20000078 	.word	0x20000078
 800120c:	2000007c 	.word	0x2000007c
                }
                else if(key == CONFIRMAR)
 8001210:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001214:	2b43      	cmp	r3, #67	; 0x43
 8001216:	f040 82d4 	bne.w	80017c2 <configStateMachine+0x9ea>
                {
                	resetKeyPressed();
 800121a:	f003 fdb5 	bl	8004d88 <resetKeyPressed>
                    index = 4;
 800121e:	2304      	movs	r3, #4
 8001220:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001222:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001226:	f107 030f 	add.w	r3, r7, #15
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fc3b 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 8001232:	2006      	movs	r0, #6
 8001234:	f002 fffc 	bl	8004230 <getNextSub>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001240:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001242:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001246:	3303      	adds	r3, #3
 8001248:	4618      	mov	r0, r3
 800124a:	f003 f803 	bl	8004254 <setSelectSub>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001256:	705a      	strb	r2, [r3, #1]
                }
                break;
 8001258:	e2b3      	b.n	80017c2 <configStateMachine+0x9ea>

            case SENSOR_INT_SALTOS:
                updateUserMsg(0,0,intersaltosUserMsg,&displayUpdateStatus);
 800125a:	4be4      	ldr	r3, [pc, #912]	; (80015ec <configStateMachine+0x814>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	f107 030f 	add.w	r3, r7, #15
 8001262:	2100      	movs	r1, #0
 8001264:	2000      	movs	r0, #0
 8001266:	f001 fc01 	bl	8002a6c <updateUserMsg>
                configIntervalTimeStruct = getIntervalTimeStruct();
 800126a:	f000 fca5 	bl	8001bb8 <getIntervalTimeStruct>
 800126e:	4603      	mov	r3, r0
 8001270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                strftime(userIntervalSaltosTimeString, sizeof(userIntervalSaltosTimeString), "%M:%S", configIntervalTimeStruct);
 8001274:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800127c:	4adc      	ldr	r2, [pc, #880]	; (80015f0 <configStateMachine+0x818>)
 800127e:	2109      	movs	r1, #9
 8001280:	f008 fdcc 	bl	8009e1c <strftime>
                printDataDisplay(0,1,userIntervalSaltosTimeString);
 8001284:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001288:	461a      	mov	r2, r3
 800128a:	2101      	movs	r1, #1
 800128c:	2000      	movs	r0, #0
 800128e:	f002 fb23 	bl	80038d8 <printDataDisplay>
                updateDataDisplay(index,1);
 8001292:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001296:	2101      	movs	r1, #1
 8001298:	4618      	mov	r0, r3
 800129a:	f002 fb37 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 800129e:	f003 fd67 	bl	8004d70 <getKeyPressed>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                if(key == INSERIR)
 80012a8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80012ac:	2b49      	cmp	r3, #73	; 0x49
 80012ae:	d10f      	bne.n	80012d0 <configStateMachine+0x4f8>
                {
                	resetKeyPressed();
 80012b0:	f003 fd6a 	bl	8004d88 <resetKeyPressed>
                	setIntervalSaltosTime(&index);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 faa5 	bl	8002808 <setIntervalSaltosTime>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 80012be:	2006      	movs	r0, #6
 80012c0:	f002 ffb6 	bl	8004230 <getNextSub>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012cc:	70da      	strb	r2, [r3, #3]
 80012ce:	e278      	b.n	80017c2 <configStateMachine+0x9ea>
                }
                else if(key == AVANCAR)
 80012d0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80012d4:	2b41      	cmp	r3, #65	; 0x41
 80012d6:	d108      	bne.n	80012ea <configStateMachine+0x512>
				{
					resetKeyPressed();
 80012d8:	f003 fd56 	bl	8004d88 <resetKeyPressed>
					indexColumn(&index,4);
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	2104      	movs	r1, #4
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 feb2 	bl	800204c <indexColumn>
 80012e8:	e26b      	b.n	80017c2 <configStateMachine+0x9ea>
				}
                else if(key == CONFIRMAR)
 80012ea:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80012ee:	2b43      	cmp	r3, #67	; 0x43
 80012f0:	f040 8267 	bne.w	80017c2 <configStateMachine+0x9ea>
                {
                	resetKeyPressed();
 80012f4:	f003 fd48 	bl	8004d88 <resetKeyPressed>
                    index = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80012fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001300:	f107 030f 	add.w	r3, r7, #15
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f001 fbce 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 800130c:	2007      	movs	r0, #7
 800130e:	f002 ff8f 	bl	8004230 <getNextSub>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800131a:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 800131c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001320:	3303      	adds	r3, #3
 8001322:	4618      	mov	r0, r3
 8001324:	f002 ff96 	bl	8004254 <setSelectSub>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001330:	705a      	strb	r2, [r3, #1]
                }

                break;
 8001332:	e246      	b.n	80017c2 <configStateMachine+0x9ea>

            case SENSOR_JMP_SELECT:
                updateUserMsg(0,0,tiposaltoUserMsg,&displayUpdateStatus);
 8001334:	4baf      	ldr	r3, [pc, #700]	; (80015f4 <configStateMachine+0x81c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	f107 030f 	add.w	r3, r7, #15
 800133c:	2100      	movs	r1, #0
 800133e:	2000      	movs	r0, #0
 8001340:	f001 fb94 	bl	8002a6c <updateUserMsg>
                ptr_jumpSelectString = getTypeJumpString();
 8001344:	f000 ffa2 	bl	800228c <getTypeJumpString>
 8001348:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                printDataDisplay(0,1,ptr_jumpSelectString);
 800134c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001350:	2101      	movs	r1, #1
 8001352:	2000      	movs	r0, #0
 8001354:	f002 fac0 	bl	80038d8 <printDataDisplay>
                updateDataDisplay(index,1);
 8001358:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800135c:	2101      	movs	r1, #1
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fad4 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 8001364:	f003 fd04 	bl	8004d70 <getKeyPressed>
 8001368:	4603      	mov	r3, r0
 800136a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                if(key == INSERIR)
 800136e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001372:	2b49      	cmp	r3, #73	; 0x49
 8001374:	d10f      	bne.n	8001396 <configStateMachine+0x5be>
                {
                	resetKeyPressed();
 8001376:	f003 fd07 	bl	8004d88 <resetKeyPressed>
                    setUserTypeJump(&index);
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	4618      	mov	r0, r3
 8001380:	f001 f945 	bl	800260e <setUserTypeJump>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 8001384:	2007      	movs	r0, #7
 8001386:	f002 ff53 	bl	8004230 <getNextSub>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001392:	70da      	strb	r2, [r3, #3]
 8001394:	e215      	b.n	80017c2 <configStateMachine+0x9ea>

                }
                else if(key == CONFIRMAR)
 8001396:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800139a:	2b43      	cmp	r3, #67	; 0x43
 800139c:	f040 8211 	bne.w	80017c2 <configStateMachine+0x9ea>
                {
                	resetKeyPressed();
 80013a0:	f003 fcf2 	bl	8004d88 <resetKeyPressed>
                    if(*ptr_jumpSelectString == '3')
 80013a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b33      	cmp	r3, #51	; 0x33
 80013ac:	d115      	bne.n	80013da <configStateMachine+0x602>
                    {
                    	index = 1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 80013b2:	2008      	movs	r0, #8
 80013b4:	f002 ff3c 	bl	8004230 <getNextSub>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013c0:	70da      	strb	r2, [r3, #3]
                        subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80013c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013c6:	3303      	adds	r3, #3
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 ff43 	bl	8004254 <setSelectSub>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013d6:	705a      	strb	r2, [r3, #1]
 80013d8:	e014      	b.n	8001404 <configStateMachine+0x62c>
                    }
                    else
                    {
                    	index = 2;
 80013da:	2302      	movs	r3, #2
 80013dc:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 80013de:	2009      	movs	r0, #9
 80013e0:	f002 ff26 	bl	8004230 <getNextSub>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013ec:	70da      	strb	r2, [r3, #3]
                        subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80013ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013f2:	3303      	adds	r3, #3
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 ff2d 	bl	8004254 <setSelectSub>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001402:	705a      	strb	r2, [r3, #1]
                    }
                    //TESTE trocar a variavel por uma local e o resultado enviar para ptr_userConfiguration->userCMJ.
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001404:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001408:	f107 030f 	add.w	r3, r7, #15
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fb4a 	bl	8002aa8 <readyUserInterface>

                }

                break;
 8001414:	e1d5      	b.n	80017c2 <configStateMachine+0x9ea>

            case SENSOR_ALTDJ:
                updateUserMsg(0,0,altdjUserMsg,&displayUpdateStatus);
 8001416:	4b78      	ldr	r3, [pc, #480]	; (80015f8 <configStateMachine+0x820>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	2100      	movs	r1, #0
 8001420:	2000      	movs	r0, #0
 8001422:	f001 fb23 	bl	8002a6c <updateUserMsg>
                ptr_altDJString = getAltDJString();
 8001426:	f000 ff47 	bl	80022b8 <getAltDJString>
 800142a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                printDataDisplay(0,1,ptr_altDJString);
 800142e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001432:	2101      	movs	r1, #1
 8001434:	2000      	movs	r0, #0
 8001436:	f002 fa4f 	bl	80038d8 <printDataDisplay>
                updateDataDisplay(index,1);
 800143a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800143e:	2101      	movs	r1, #1
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fa63 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 8001446:	f003 fc93 	bl	8004d70 <getKeyPressed>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                if(key == INSERIR)
 8001450:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001454:	2b49      	cmp	r3, #73	; 0x49
 8001456:	d10f      	bne.n	8001478 <configStateMachine+0x6a0>
                {
                	resetKeyPressed();
 8001458:	f003 fc96 	bl	8004d88 <resetKeyPressed>
                    setUserAltDJ(&index);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4618      	mov	r0, r3
 8001462:	f001 f8f8 	bl	8002656 <setUserAltDJ>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 8001466:	2008      	movs	r0, #8
 8001468:	f002 fee2 	bl	8004230 <getNextSub>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001474:	70da      	strb	r2, [r3, #3]
 8001476:	e1a4      	b.n	80017c2 <configStateMachine+0x9ea>
                }
                else if(key == CONFIRMAR)
 8001478:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800147c:	2b43      	cmp	r3, #67	; 0x43
 800147e:	f040 81a0 	bne.w	80017c2 <configStateMachine+0x9ea>
                {
                	resetKeyPressed();
 8001482:	f003 fc81 	bl	8004d88 <resetKeyPressed>
                    index = 2;
 8001486:	2302      	movs	r3, #2
 8001488:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800148a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800148e:	f107 030f 	add.w	r3, r7, #15
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f001 fb07 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 800149a:	2009      	movs	r0, #9
 800149c:	f002 fec8 	bl	8004230 <getNextSub>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014a8:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80014aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014ae:	3303      	adds	r3, #3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fecf 	bl	8004254 <setSelectSub>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014be:	705a      	strb	r2, [r3, #1]
                }

                break;
 80014c0:	e17f      	b.n	80017c2 <configStateMachine+0x9ea>

            case SENSOR_SERIES:
                updateUserMsg(0,0,numserieUserMsg,&displayUpdateStatus);
 80014c2:	4b4e      	ldr	r3, [pc, #312]	; (80015fc <configStateMachine+0x824>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	f107 030f 	add.w	r3, r7, #15
 80014ca:	2100      	movs	r1, #0
 80014cc:	2000      	movs	r0, #0
 80014ce:	f001 facd 	bl	8002a6c <updateUserMsg>
                ptr_numSeriesString = getNumSeriesString();
 80014d2:	f000 ff0b 	bl	80022ec <getNumSeriesString>
 80014d6:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                printDataDisplay(0,1,ptr_numSeriesString);
 80014da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80014de:	2101      	movs	r1, #1
 80014e0:	2000      	movs	r0, #0
 80014e2:	f002 f9f9 	bl	80038d8 <printDataDisplay>
                updateDataDisplay(index,1);
 80014e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014ea:	2101      	movs	r1, #1
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fa0d 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 80014f2:	f003 fc3d 	bl	8004d70 <getKeyPressed>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                if(key == INSERIR)
 80014fc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001500:	2b49      	cmp	r3, #73	; 0x49
 8001502:	d10f      	bne.n	8001524 <configStateMachine+0x74c>
                {
                	resetKeyPressed();
 8001504:	f003 fc40 	bl	8004d88 <resetKeyPressed>
                    setUserNumSeries(&index);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4618      	mov	r0, r3
 800150e:	f001 f8c6 	bl	800269e <setUserNumSeries>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8001512:	2009      	movs	r0, #9
 8001514:	f002 fe8c 	bl	8004230 <getNextSub>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001520:	70da      	strb	r2, [r3, #3]
 8001522:	e14e      	b.n	80017c2 <configStateMachine+0x9ea>
                }
                else if(key == AVANCAR)
 8001524:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001528:	2b41      	cmp	r3, #65	; 0x41
 800152a:	d108      	bne.n	800153e <configStateMachine+0x766>
				{
					resetKeyPressed();
 800152c:	f003 fc2c 	bl	8004d88 <resetKeyPressed>
					indexColumn(&index,2);
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	2102      	movs	r1, #2
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fd88 	bl	800204c <indexColumn>
 800153c:	e141      	b.n	80017c2 <configStateMachine+0x9ea>
				}
                else if(key == CONFIRMAR)
 800153e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001542:	2b43      	cmp	r3, #67	; 0x43
 8001544:	f040 813d 	bne.w	80017c2 <configStateMachine+0x9ea>
                {
                	resetKeyPressed();
 8001548:	f003 fc1e 	bl	8004d88 <resetKeyPressed>
                    index = 2;
 800154c:	2302      	movs	r3, #2
 800154e:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001550:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001554:	f107 030f 	add.w	r3, r7, #15
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f001 faa4 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 8001560:	200a      	movs	r0, #10
 8001562:	f002 fe65 	bl	8004230 <getNextSub>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800156e:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001570:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001574:	3303      	adds	r3, #3
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fe6c 	bl	8004254 <setSelectSub>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001584:	705a      	strb	r2, [r3, #1]
                }

                break;
 8001586:	e11c      	b.n	80017c2 <configStateMachine+0x9ea>

            case SENSOR_INT_SERIES:
                updateUserMsg(0,0,interseriesUserMsg,&displayUpdateStatus);
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <configStateMachine+0x828>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f107 030f 	add.w	r3, r7, #15
 8001590:	2100      	movs	r1, #0
 8001592:	2000      	movs	r0, #0
 8001594:	f001 fa6a 	bl	8002a6c <updateUserMsg>
                ptr_intervalSeriesString = getIntervalSeriesString();
 8001598:	f000 fec8 	bl	800232c <getIntervalSeriesString>
 800159c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                printDataDisplay(0,1,ptr_intervalSeriesString);
 80015a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80015a4:	2101      	movs	r1, #1
 80015a6:	2000      	movs	r0, #0
 80015a8:	f002 f996 	bl	80038d8 <printDataDisplay>
                updateDataDisplay(index,1);
 80015ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 f9aa 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 80015b8:	f003 fbda 	bl	8004d70 <getKeyPressed>
 80015bc:	4603      	mov	r3, r0
 80015be:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                if(key == INSERIR)
 80015c2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80015c6:	2b49      	cmp	r3, #73	; 0x49
 80015c8:	d11c      	bne.n	8001604 <configStateMachine+0x82c>
                {
                	resetKeyPressed();
 80015ca:	f003 fbdd 	bl	8004d88 <resetKeyPressed>
                    setUserIntervalSeries(&index);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4618      	mov	r0, r3
 80015d4:	f001 f887 	bl	80026e6 <setUserIntervalSeries>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 80015d8:	200a      	movs	r0, #10
 80015da:	f002 fe29 	bl	8004230 <getNextSub>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015e6:	70da      	strb	r2, [r3, #3]
 80015e8:	e0eb      	b.n	80017c2 <configStateMachine+0x9ea>
 80015ea:	bf00      	nop
 80015ec:	20000080 	.word	0x20000080
 80015f0:	0800b628 	.word	0x0800b628
 80015f4:	20000084 	.word	0x20000084
 80015f8:	20000088 	.word	0x20000088
 80015fc:	2000008c 	.word	0x2000008c
 8001600:	20000090 	.word	0x20000090
                }
                else if(key == AVANCAR)
 8001604:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001608:	2b41      	cmp	r3, #65	; 0x41
 800160a:	d108      	bne.n	800161e <configStateMachine+0x846>
				{
					resetKeyPressed();
 800160c:	f003 fbbc 	bl	8004d88 <resetKeyPressed>
					indexColumn(&index,2);
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2102      	movs	r1, #2
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fd18 	bl	800204c <indexColumn>
 800161c:	e0d1      	b.n	80017c2 <configStateMachine+0x9ea>
				}
                else if(key == CONFIRMAR)
 800161e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001622:	2b43      	cmp	r3, #67	; 0x43
 8001624:	f040 80cd 	bne.w	80017c2 <configStateMachine+0x9ea>
                {
                	resetKeyPressed();
 8001628:	f003 fbae 	bl	8004d88 <resetKeyPressed>
                    index = 2;
 800162c:	2302      	movs	r3, #2
 800162e:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001630:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001634:	f107 030f 	add.w	r3, r7, #15
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fa34 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8001640:	200b      	movs	r0, #11
 8001642:	f002 fdf5 	bl	8004230 <getNextSub>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800164e:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001650:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001654:	3303      	adds	r3, #3
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fdfc 	bl	8004254 <setSelectSub>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001664:	705a      	strb	r2, [r3, #1]
                }

            break;
 8001666:	e0ac      	b.n	80017c2 <configStateMachine+0x9ea>

            case TAPETE_ON:
                updateUserMsg(0,0,intapeteUserMsg,&displayUpdateStatus);
 8001668:	4b5b      	ldr	r3, [pc, #364]	; (80017d8 <configStateMachine+0xa00>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f107 030f 	add.w	r3, r7, #15
 8001670:	2100      	movs	r1, #0
 8001672:	2000      	movs	r0, #0
 8001674:	f001 f9fa 	bl	8002a6c <updateUserMsg>
                key = getKeyPressed();
 8001678:	f003 fb7a 	bl	8004d70 <getKeyPressed>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                if(key == AVANCAR)
 8001682:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001686:	2b41      	cmp	r3, #65	; 0x41
 8001688:	d112      	bne.n	80016b0 <configStateMachine+0x8d8>
                {
                	resetKeyPressed();
 800168a:	f003 fb7d 	bl	8004d88 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 800168e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001692:	f107 030f 	add.w	r3, r7, #15
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fa05 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_OFF);
 800169e:	200c      	movs	r0, #12
 80016a0:	f002 fdc6 	bl	8004230 <getNextSub>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016ac:	70da      	strb	r2, [r3, #3]
 80016ae:	e088      	b.n	80017c2 <configStateMachine+0x9ea>
                }
                else if(key == CONFIRMAR)
 80016b0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80016b4:	2b43      	cmp	r3, #67	; 0x43
 80016b6:	f040 8084 	bne.w	80017c2 <configStateMachine+0x9ea>
                {
                	resetKeyPressed();
 80016ba:	f003 fb65 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80016be:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80016c2:	f107 030f 	add.w	r3, r7, #15
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 f9ed 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80016ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016d2:	3303      	adds	r3, #3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fdbd 	bl	8004254 <setSelectSub>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016e2:	705a      	strb	r2, [r3, #1]
                    ptr_userConfiguration->userSelectTapete = TRUE;
 80016e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016e8:	2201      	movs	r2, #1
 80016ea:	751a      	strb	r2, [r3, #20]
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 80016ec:	200d      	movs	r0, #13
 80016ee:	f002 fd9f 	bl	8004230 <getNextSub>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016fa:	70da      	strb	r2, [r3, #3]
                }
                break;
 80016fc:	e061      	b.n	80017c2 <configStateMachine+0x9ea>

            case TAPETE_OFF:
                updateUserMsg(0,0,outtapeteUserMsg,&displayUpdateStatus);
 80016fe:	4b37      	ldr	r3, [pc, #220]	; (80017dc <configStateMachine+0xa04>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	f107 030f 	add.w	r3, r7, #15
 8001706:	2100      	movs	r1, #0
 8001708:	2000      	movs	r0, #0
 800170a:	f001 f9af 	bl	8002a6c <updateUserMsg>
                key = getKeyPressed();
 800170e:	f003 fb2f 	bl	8004d70 <getKeyPressed>
 8001712:	4603      	mov	r3, r0
 8001714:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                if(key == AVANCAR)
 8001718:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800171c:	2b41      	cmp	r3, #65	; 0x41
 800171e:	d112      	bne.n	8001746 <configStateMachine+0x96e>
                {
                	resetKeyPressed();
 8001720:	f003 fb32 	bl	8004d88 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001724:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001728:	f107 030f 	add.w	r3, r7, #15
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f001 f9ba 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8001734:	200b      	movs	r0, #11
 8001736:	f002 fd7b 	bl	8004230 <getNextSub>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001742:	70da      	strb	r2, [r3, #3]
 8001744:	e03d      	b.n	80017c2 <configStateMachine+0x9ea>
                }
                else if(key == CONFIRMAR)
 8001746:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800174a:	2b43      	cmp	r3, #67	; 0x43
 800174c:	d139      	bne.n	80017c2 <configStateMachine+0x9ea>
                {
                	resetKeyPressed();
 800174e:	f003 fb1b 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001752:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001756:	f107 030f 	add.w	r3, r7, #15
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f001 f9a3 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001766:	3303      	adds	r3, #3
 8001768:	4618      	mov	r0, r3
 800176a:	f002 fd73 	bl	8004254 <setSelectSub>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001776:	705a      	strb	r2, [r3, #1]
                    ptr_userConfiguration->userSelectTapete = FALSE;
 8001778:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800177c:	2200      	movs	r2, #0
 800177e:	751a      	strb	r2, [r3, #20]
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 8001780:	200d      	movs	r0, #13
 8001782:	f002 fd55 	bl	8004230 <getNextSub>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800178e:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001790:	e017      	b.n	80017c2 <configStateMachine+0x9ea>

            case SAVE_CONFIGS:
                subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8001792:	2001      	movs	r0, #1
 8001794:	f002 fd4c 	bl	8004230 <getNextSub>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017a0:	70da      	strb	r2, [r3, #3]
                setInsertData(ptr_userConfiguration);
 80017a2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80017a6:	f002 fd69 	bl	800427c <setInsertData>
                readyUserInterface(&displayUpdateStatus,cursorPosition);
 80017aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80017ae:	f107 030f 	add.w	r3, r7, #15
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f001 f977 	bl	8002aa8 <readyUserInterface>
                key = MENU;
 80017ba:	234d      	movs	r3, #77	; 0x4d
 80017bc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
                break;
 80017c0:	bf00      	nop
    while(key != MENU)
 80017c2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80017c6:	2b4d      	cmp	r3, #77	; 0x4d
 80017c8:	f47f ab32 	bne.w	8000e30 <configStateMachine+0x58>
        }
    }
}
 80017cc:	bf00      	nop
 80017ce:	4618      	mov	r0, r3
 80017d0:	37b0      	adds	r7, #176	; 0xb0
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000094 	.word	0x20000094
 80017dc:	20000098 	.word	0x20000098

080017e0 <consultStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char consultStateMachine(struct Menu* subMenu)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuTesteConsultar = subMenu;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char* ptr_consultTestString;
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    struct results* ptr_structConsultResult;
    unsigned char selectedUserTest = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char testSamples=0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    unsigned char cursorPosition[2] = {0,0};
 80017f8:	2300      	movs	r3, #0
 80017fa:	81bb      	strh	r3, [r7, #12]
    short index = 2; //(000 MENU)
 80017fc:	2302      	movs	r3, #2
 80017fe:	817b      	strh	r3, [r7, #10]
    unsigned char key = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    static unsigned char results = 0;
    unsigned char displayUpdateStatus = IDDLE;
 8001806:	2300      	movs	r3, #0
 8001808:	727b      	strb	r3, [r7, #9]

    while(key != MENU)
 800180a:	bf00      	nop
 800180c:	e19e      	b.n	8001b4c <consultStateMachine+0x36c>
    {
        switch(subMenuTesteConsultar->menuState)
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	78db      	ldrb	r3, [r3, #3]
 8001812:	2b03      	cmp	r3, #3
 8001814:	f200 819a 	bhi.w	8001b4c <consultStateMachine+0x36c>
 8001818:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <consultStateMachine+0x40>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001831 	.word	0x08001831
 8001824:	08001841 	.word	0x08001841
 8001828:	080018f7 	.word	0x080018f7
 800182c:	08001aad 	.word	0x08001aad
        {
            case IDDLE:
                subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001830:	2001      	movs	r0, #1
 8001832:	f002 fcfd 	bl	8004230 <getNextSub>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	70da      	strb	r2, [r3, #3]
            break;
 800183e:	e185      	b.n	8001b4c <consultStateMachine+0x36c>

            case CONSULTA_TESTE:
                updateUserMsg(0,0,consultTestUserMsg,&displayUpdateStatus);
 8001840:	4bc7      	ldr	r3, [pc, #796]	; (8001b60 <consultStateMachine+0x380>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f107 0309 	add.w	r3, r7, #9
 8001848:	2100      	movs	r1, #0
 800184a:	2000      	movs	r0, #0
 800184c:	f001 f90e 	bl	8002a6c <updateUserMsg>
                ptr_consultTestString = getNumTestString();
 8001850:	f000 fdd8 	bl	8002404 <getNumTestString>
 8001854:	62f8      	str	r0, [r7, #44]	; 0x2c
                printDataDisplay(0,1,ptr_consultTestString);
 8001856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001858:	2101      	movs	r1, #1
 800185a:	2000      	movs	r0, #0
 800185c:	f002 f83c 	bl	80038d8 <printDataDisplay>
                updateDataDisplay(index,1);
 8001860:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001864:	2101      	movs	r1, #1
 8001866:	4618      	mov	r0, r3
 8001868:	f002 f850 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 800186c:	f003 fa80 	bl	8004d70 <getKeyPressed>
 8001870:	4603      	mov	r3, r0
 8001872:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if(key == INSERIR)
 8001876:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800187a:	2b49      	cmp	r3, #73	; 0x49
 800187c:	d10e      	bne.n	800189c <consultStateMachine+0xbc>
                {
                	resetKeyPressed();
 800187e:	f003 fa83 	bl	8004d88 <resetKeyPressed>
                    setUserNumTest(&index);
 8001882:	f107 030a 	add.w	r3, r7, #10
 8001886:	4618      	mov	r0, r3
 8001888:	f000 ff99 	bl	80027be <setUserNumTest>
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 800188c:	2001      	movs	r0, #1
 800188e:	f002 fccf 	bl	8004230 <getNextSub>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	70da      	strb	r2, [r3, #3]
 800189a:	e157      	b.n	8001b4c <consultStateMachine+0x36c>
                }
                else if(key == AVANCAR)
 800189c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80018a0:	2b41      	cmp	r3, #65	; 0x41
 80018a2:	d108      	bne.n	80018b6 <consultStateMachine+0xd6>
                {
                	resetKeyPressed();
 80018a4:	f003 fa70 	bl	8004d88 <resetKeyPressed>
                    indexChange(&index,2);
 80018a8:	f107 030a 	add.w	r3, r7, #10
 80018ac:	2102      	movs	r1, #2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fc6d 	bl	800218e <indexChange>
 80018b4:	e14a      	b.n	8001b4c <consultStateMachine+0x36c>
                }
                else if(key == CONFIRMAR)
 80018b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80018ba:	2b43      	cmp	r3, #67	; 0x43
 80018bc:	f040 8146 	bne.w	8001b4c <consultStateMachine+0x36c>
                {
                	resetKeyPressed();
 80018c0:	f003 fa62 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80018c4:	f107 020c 	add.w	r2, r7, #12
 80018c8:	f107 0309 	add.w	r3, r7, #9
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 f8ea 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 80018d4:	2002      	movs	r0, #2
 80018d6:	f002 fcab 	bl	8004230 <getNextSub>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	3303      	adds	r3, #3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 fcb4 	bl	8004254 <setSelectSub>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	705a      	strb	r2, [r3, #1]
                }
            break;
 80018f4:	e12a      	b.n	8001b4c <consultStateMachine+0x36c>

            case RESULT_TESTE:
            	updateUserMsg(0,0,consultTestUserMsg,&displayUpdateStatus);
 80018f6:	4b9a      	ldr	r3, [pc, #616]	; (8001b60 <consultStateMachine+0x380>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	f107 0309 	add.w	r3, r7, #9
 80018fe:	2100      	movs	r1, #0
 8001900:	2000      	movs	r0, #0
 8001902:	f001 f8b3 	bl	8002a6c <updateUserMsg>
                selectedUserTest = stringToInt(ptr_consultTestString);
 8001906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001908:	f000 fc06 	bl	8002118 <stringToInt>
 800190c:	4603      	mov	r3, r0
 800190e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//                ptr_structConsultResult = load_data(selectedUserTest); //APENAS PARA APLICAÇÃO COM SD
                ptr_structConsultResult = getUserResultData(selectedUserTest);
 8001912:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fa28 	bl	8001d6c <getUserResultData>
 800191c:	61f8      	str	r0, [r7, #28]
//                    updateUserMsg(0,1,ptr_alturaString,&displayUpdateStatus);
//                    readyUserInterface(&displayUpdateStatus,cursorPosition);
//                }
//                else  printDataDisplay(0,0,"VAZIO");

                key = getKeyPressed();
 800191e:	f003 fa27 	bl	8004d70 <getKeyPressed>
 8001922:	4603      	mov	r3, r0
 8001924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == AVANCAR)
 8001928:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800192c:	2b41      	cmp	r3, #65	; 0x41
 800192e:	f040 80a7 	bne.w	8001a80 <consultStateMachine+0x2a0>
                {
                	resetKeyPressed();
 8001932:	f003 fa29 	bl	8004d88 <resetKeyPressed>
                    if(testSamples<(ptr_structConsultResult->resultTestAcquiredSamples))
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	785b      	ldrb	r3, [r3, #1]
 800193a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800193e:	429a      	cmp	r2, r3
 8001940:	f080 8083 	bcs.w	8001a4a <consultStateMachine+0x26a>
                    {
                        updateUserMsg(0,0,"Amostra",&displayUpdateStatus);
 8001944:	f107 0309 	add.w	r3, r7, #9
 8001948:	4a86      	ldr	r2, [pc, #536]	; (8001b64 <consultStateMachine+0x384>)
 800194a:	2100      	movs	r1, #0
 800194c:	2000      	movs	r0, #0
 800194e:	f001 f88d 	bl	8002a6c <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001952:	f107 020c 	add.w	r2, r7, #12
 8001956:	f107 0309 	add.w	r3, r7, #9
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f001 f8a3 	bl	8002aa8 <readyUserInterface>
                        ptr_sampleString = param_1_toString(&ptr_structConsultResult->Measurement[testSamples].sampleNum);
 8001962:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	4413      	add	r3, r2
 8001972:	3304      	adds	r3, #4
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fd7d 	bl	8002474 <param_1_toString>
 800197a:	61b8      	str	r0, [r7, #24]
                        updateUserMsg(9,0,ptr_sampleString,&displayUpdateStatus);
 800197c:	f107 0309 	add.w	r3, r7, #9
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	2100      	movs	r1, #0
 8001984:	2009      	movs	r0, #9
 8001986:	f001 f871 	bl	8002a6c <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 800198a:	f107 020c 	add.w	r2, r7, #12
 800198e:	f107 0309 	add.w	r3, r7, #9
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f001 f887 	bl	8002aa8 <readyUserInterface>

                        updateUserMsg(0,1,"Tempo de Voo",&displayUpdateStatus);
 800199a:	f107 0309 	add.w	r3, r7, #9
 800199e:	4a72      	ldr	r2, [pc, #456]	; (8001b68 <consultStateMachine+0x388>)
 80019a0:	2101      	movs	r1, #1
 80019a2:	2000      	movs	r0, #0
 80019a4:	f001 f862 	bl	8002a6c <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 80019a8:	f107 020c 	add.w	r2, r7, #12
 80019ac:	f107 0309 	add.w	r3, r7, #9
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 f878 	bl	8002aa8 <readyUserInterface>
                        ptr_vooTimeString = param_2_toString(&ptr_structConsultResult->Measurement[testSamples].uiVooTime);
 80019b8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	4413      	add	r3, r2
 80019c8:	3308      	adds	r3, #8
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fd66 	bl	800249c <param_2_toString>
 80019d0:	6178      	str	r0, [r7, #20]
                        updateUserMsg(9,1,ptr_vooTimeString,&displayUpdateStatus);
 80019d2:	f107 0309 	add.w	r3, r7, #9
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	2101      	movs	r1, #1
 80019da:	2009      	movs	r0, #9
 80019dc:	f001 f846 	bl	8002a6c <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 80019e0:	f107 020c 	add.w	r2, r7, #12
 80019e4:	f107 0309 	add.w	r3, r7, #9
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 f85c 	bl	8002aa8 <readyUserInterface>

                        updateUserMsg(0,2,"Altura do salto",&displayUpdateStatus);
 80019f0:	f107 0309 	add.w	r3, r7, #9
 80019f4:	4a5d      	ldr	r2, [pc, #372]	; (8001b6c <consultStateMachine+0x38c>)
 80019f6:	2102      	movs	r1, #2
 80019f8:	2000      	movs	r0, #0
 80019fa:	f001 f837 	bl	8002a6c <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 80019fe:	f107 020c 	add.w	r2, r7, #12
 8001a02:	f107 0309 	add.w	r3, r7, #9
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f001 f84d 	bl	8002aa8 <readyUserInterface>
                        ptr_alturaString = param_3_toString(&ptr_structConsultResult->Measurement[testSamples].uiSoloTime);
 8001a0e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	4413      	add	r3, r2
 8001a20:	3304      	adds	r3, #4
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fd4e 	bl	80024c4 <param_3_toString>
 8001a28:	6138      	str	r0, [r7, #16]
                        updateUserMsg(9,2,ptr_alturaString,&displayUpdateStatus);
 8001a2a:	f107 0309 	add.w	r3, r7, #9
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	2102      	movs	r1, #2
 8001a32:	2009      	movs	r0, #9
 8001a34:	f001 f81a 	bl	8002a6c <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001a38:	f107 020c 	add.w	r2, r7, #12
 8001a3c:	f107 0309 	add.w	r3, r7, #9
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 f830 	bl	8002aa8 <readyUserInterface>
 8001a48:	e004      	b.n	8001a54 <consultStateMachine+0x274>
                    }
                    else  printDataDisplay(0,0,"VAZIO");
 8001a4a:	4a49      	ldr	r2, [pc, #292]	; (8001b70 <consultStateMachine+0x390>)
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f001 ff42 	bl	80038d8 <printDataDisplay>
                    testSamples++;
 8001a54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if(testSamples == ptr_structConsultResult->resultTestAcquiredSamples) testSamples = 0;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	785b      	ldrb	r3, [r3, #1]
 8001a62:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d102      	bne.n	8001a70 <consultStateMachine+0x290>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8001a70:	2002      	movs	r0, #2
 8001a72:	f002 fbdd 	bl	8004230 <getNextSub>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	70da      	strb	r2, [r3, #3]
 8001a7e:	e065      	b.n	8001b4c <consultStateMachine+0x36c>
                }
                else if(key == PARAR)
 8001a80:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a84:	2b50      	cmp	r3, #80	; 0x50
 8001a86:	d161      	bne.n	8001b4c <consultStateMachine+0x36c>
                {
                	resetKeyPressed();
 8001a88:	f003 f97e 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001a8c:	f107 020c 	add.w	r2, r7, #12
 8001a90:	f107 0309 	add.w	r3, r7, #9
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 f806 	bl	8002aa8 <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(EXPORTAR);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f002 fbc7 	bl	8004230 <getNextSub>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001aaa:	e04f      	b.n	8001b4c <consultStateMachine+0x36c>

            case EXPORTAR:
                updateUserMsg(0,0,consultExportUserMsg,&displayUpdateStatus);
 8001aac:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <consultStateMachine+0x394>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	f107 0309 	add.w	r3, r7, #9
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f000 ffd8 	bl	8002a6c <updateUserMsg>
                key = getKeyPressed();
 8001abc:	f003 f958 	bl	8004d70 <getKeyPressed>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == PARAR)
 8001ac6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001aca:	2b50      	cmp	r3, #80	; 0x50
 8001acc:	d114      	bne.n	8001af8 <consultStateMachine+0x318>
                {
                	resetKeyPressed();
 8001ace:	f003 f95b 	bl	8004d88 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001ad2:	f107 020c 	add.w	r2, r7, #12
 8001ad6:	f107 0309 	add.w	r3, r7, #9
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 ffe3 	bl	8002aa8 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8001ae2:	234d      	movs	r3, #77	; 0x4d
 8001ae4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f002 fba1 	bl	8004230 <getNextSub>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	70da      	strb	r2, [r3, #3]
 8001af6:	e028      	b.n	8001b4a <consultStateMachine+0x36a>
                }
                else if(key == CONFIRMAR)
 8001af8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001afc:	2b43      	cmp	r3, #67	; 0x43
 8001afe:	d124      	bne.n	8001b4a <consultStateMachine+0x36a>
                {
                    //display
                	resetKeyPressed();
 8001b00:	f003 f942 	bl	8004d88 <resetKeyPressed>
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <consultStateMachine+0x398>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	f107 0309 	add.w	r3, r7, #9
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f000 ffac 	bl	8002a6c <updateUserMsg>
                    subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	3303      	adds	r3, #3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 fb9b 	bl	8004254 <setSelectSub>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f002 fb82 	bl	8004230 <getNextSub>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	70da      	strb	r2, [r3, #3]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001b34:	f107 020c 	add.w	r2, r7, #12
 8001b38:	f107 0309 	add.w	r3, r7, #9
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 ffb2 	bl	8002aa8 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8001b44:	234d      	movs	r3, #77	; 0x4d
 8001b46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                }
                break;
 8001b4a:	bf00      	nop
    while(key != MENU)
 8001b4c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b50:	2b4d      	cmp	r3, #77	; 0x4d
 8001b52:	f47f ae5c 	bne.w	800180e <consultStateMachine+0x2e>
        }
    }
}
 8001b56:	bf00      	nop
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3730      	adds	r7, #48	; 0x30
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2000005c 	.word	0x2000005c
 8001b64:	0800b630 	.word	0x0800b630
 8001b68:	0800b638 	.word	0x0800b638
 8001b6c:	0800b648 	.word	0x0800b648
 8001b70:	0800b658 	.word	0x0800b658
 8001b74:	20000060 	.word	0x20000060
 8001b78:	20000064 	.word	0x20000064

08001b7c <getUserTime>:
unsigned long int getUserTest() //apagar
{
   return myData.userTest;
}
unsigned long int getUserTime()
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
    return myData.userTime;
 8001b80:	4b02      	ldr	r3, [pc, #8]	; (8001b8c <getUserTime+0x10>)
 8001b82:	685b      	ldr	r3, [r3, #4]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	200001c4 	.word	0x200001c4

08001b90 <getUserSelectTapete>:
{
    return myData.userSelectSensorChannel;
}

unsigned char getUserSelectTapete()
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
    return myData.userSelectTapete;
 8001b94:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <getUserSelectTapete+0x10>)
 8001b96:	7d1b      	ldrb	r3, [r3, #20]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	200001c4 	.word	0x200001c4

08001ba4 <getTimeStruct>:

unsigned char* getTimeStruct()
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
    return insertTime;
 8001ba8:	4b02      	ldr	r3, [pc, #8]	; (8001bb4 <getTimeStruct+0x10>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	20000000 	.word	0x20000000

08001bb8 <getIntervalTimeStruct>:

unsigned char* getIntervalTimeStruct()
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
    return intervalTime;
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <getIntervalTimeStruct+0x10>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	20000004 	.word	0x20000004

08001bcc <getMassArray>:

unsigned char* getMassArray()
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
    return massArray;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <getMassArray+0x10>)
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000364 	.word	0x20000364

08001be0 <getOverMassArray>:

unsigned char* getOverMassArray()
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
    return overMassArray;
 8001be4:	4b02      	ldr	r3, [pc, #8]	; (8001bf0 <getOverMassArray+0x10>)
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000036c 	.word	0x2000036c

08001bf4 <getAltMinArray>:

unsigned char* getAltMinArray()
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
    return altMinArray;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <getAltMinArray+0x10>)
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008

08001c08 <getAltMaxArray>:

unsigned char* getAltMaxArray()
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
    return altMaxArray;
 8001c0c:	4b02      	ldr	r3, [pc, #8]	; (8001c18 <getAltMaxArray+0x10>)
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	2000000c 	.word	0x2000000c

08001c1c <getNumSaltosArray>:

unsigned char* getNumSaltosArray()
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
    return numSaltosArray;
 8001c20:	4b02      	ldr	r3, [pc, #8]	; (8001c2c <getNumSaltosArray+0x10>)
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000374 	.word	0x20000374

08001c30 <getTypeJumpArray>:
//{
//    return intervalSaltosArray;
//}

unsigned char* getTypeJumpArray()
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
    return JumpTypeArray;
 8001c34:	4b02      	ldr	r3, [pc, #8]	; (8001c40 <getTypeJumpArray+0x10>)
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000037c 	.word	0x2000037c

08001c44 <getAltDJArray>:

unsigned char* getAltDJArray()
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
    return altDJArray;
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <getAltDJArray+0x10>)
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000378 	.word	0x20000378

08001c58 <getNumSeriesArray>:

unsigned char* getNumSeriesArray()
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
    return numSeriesArray;
 8001c5c:	4b02      	ldr	r3, [pc, #8]	; (8001c68 <getNumSeriesArray+0x10>)
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000380 	.word	0x20000380

08001c6c <getIntervalSeriesArray>:

unsigned char* getIntervalSeriesArray()
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
    return intervalSeriesArray;
 8001c70:	4b02      	ldr	r3, [pc, #8]	; (8001c7c <getIntervalSeriesArray+0x10>)
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000384 	.word	0x20000384

08001c80 <getNumTestArray>:

unsigned char* getNumTestArray()
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
    return numTestArray;
 8001c84:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <getNumTestArray+0x10>)
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000010 	.word	0x20000010

08001c94 <getEraseTestArray>:

unsigned char* getEraseTestArray()
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
    return selectEraseArray;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <getEraseTestArray+0x10>)
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000388 	.word	0x20000388

08001ca8 <getUserConfigStruct>:

unsigned char* getUserConfigStruct() //VERIFICAR SE VOU USAR
{
 8001ca8:	b4b0      	push	{r4, r5, r7}
 8001caa:	af00      	add	r7, sp, #0
    static struct dataInsert configStruct;
    configStruct = myData;
 8001cac:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <getUserConfigStruct+0x24>)
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <getUserConfigStruct+0x28>)
 8001cb0:	4614      	mov	r4, r2
 8001cb2:	461d      	mov	r5, r3
 8001cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cbc:	e884 0003 	stmia.w	r4, {r0, r1}
    return &configStruct;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <getUserConfigStruct+0x24>)
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bcb0      	pop	{r4, r5, r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000038c 	.word	0x2000038c
 8001cd0:	200001c4 	.word	0x200001c4

08001cd4 <setUserInputConfigData>:

unsigned char setUserInputConfigData(struct dataInsert* dataToInsert)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    myData.userTest = dataToInsert->userTest;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <setUserInputConfigData+0x94>)
 8001ce2:	701a      	strb	r2, [r3, #0]
    myData.userTime = dataToInsert->userTime;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <setUserInputConfigData+0x94>)
 8001cea:	6053      	str	r3, [r2, #4]
    myData.userMass = dataToInsert->userMass;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7a1a      	ldrb	r2, [r3, #8]
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <setUserInputConfigData+0x94>)
 8001cf2:	721a      	strb	r2, [r3, #8]
    myData.userOverMass = dataToInsert->userOverMass;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7a5a      	ldrb	r2, [r3, #9]
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <setUserInputConfigData+0x94>)
 8001cfa:	725a      	strb	r2, [r3, #9]
    myData.userConsultTest = dataToInsert->userConsultTest;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7a9a      	ldrb	r2, [r3, #10]
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <setUserInputConfigData+0x94>)
 8001d02:	729a      	strb	r2, [r3, #10]
    myData.userAlturaMin = dataToInsert->userAlturaMin;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7ada      	ldrb	r2, [r3, #11]
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <setUserInputConfigData+0x94>)
 8001d0a:	72da      	strb	r2, [r3, #11]
    myData.userAlturaMax = dataToInsert->userAlturaMax;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7b1a      	ldrb	r2, [r3, #12]
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <setUserInputConfigData+0x94>)
 8001d12:	731a      	strb	r2, [r3, #12]
    myData.userNumSaltos = dataToInsert->userNumSaltos;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7b5a      	ldrb	r2, [r3, #13]
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <setUserInputConfigData+0x94>)
 8001d1a:	735a      	strb	r2, [r3, #13]
    myData.userIntervalSaltos = dataToInsert->userIntervalSaltos;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	7b9a      	ldrb	r2, [r3, #14]
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <setUserInputConfigData+0x94>)
 8001d22:	739a      	strb	r2, [r3, #14]
    myData.userCMJ = dataToInsert->userCMJ;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7bda      	ldrb	r2, [r3, #15]
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <setUserInputConfigData+0x94>)
 8001d2a:	73da      	strb	r2, [r3, #15]
    myData.userAlturaDJ = dataToInsert->userAlturaDJ;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	7c1a      	ldrb	r2, [r3, #16]
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <setUserInputConfigData+0x94>)
 8001d32:	741a      	strb	r2, [r3, #16]
    myData.userNumSeries = dataToInsert->userNumSeries;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7c5a      	ldrb	r2, [r3, #17]
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <setUserInputConfigData+0x94>)
 8001d3a:	745a      	strb	r2, [r3, #17]
    myData.userIntervalSeries = dataToInsert->userIntervalSeries;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7c9a      	ldrb	r2, [r3, #18]
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <setUserInputConfigData+0x94>)
 8001d42:	749a      	strb	r2, [r3, #18]
    myData.userCommConfig = dataToInsert->userCommConfig;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7cda      	ldrb	r2, [r3, #19]
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <setUserInputConfigData+0x94>)
 8001d4a:	74da      	strb	r2, [r3, #19]
    myData.userSelectTapete = dataToInsert->userSelectTapete;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7d1a      	ldrb	r2, [r3, #20]
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <setUserInputConfigData+0x94>)
 8001d52:	751a      	strb	r2, [r3, #20]
    myData.userSelectSensorChannel = dataToInsert->userSelectSensorChannel;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7d5a      	ldrb	r2, [r3, #21]
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <setUserInputConfigData+0x94>)
 8001d5a:	755a      	strb	r2, [r3, #21]
}
 8001d5c:	bf00      	nop
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	200001c4 	.word	0x200001c4

08001d6c <getUserResultData>:

unsigned char* getUserResultData(unsigned char numTest)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
    return &myResults[numTest-1];
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	019b      	lsls	r3, r3, #6
 8001d7c:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <getUserResultData+0x20>)
 8001d7e:	4413      	add	r3, r2
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	200001dc 	.word	0x200001dc

08001d90 <getResultTestNumber>:

unsigned char getResultTestNumber()
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
    return numberTest;
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <getResultTestNumber+0x10>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	20000389 	.word	0x20000389

08001da4 <setResultTestNumber>:
{
     myResults[numTest].thereAreData = TRUE;
}

unsigned char setResultTestNumber()
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
     numberTest++;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <setResultTestNumber+0x1c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <setResultTestNumber+0x1c>)
 8001db2:	701a      	strb	r2, [r3, #0]
}
 8001db4:	bf00      	nop
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000389 	.word	0x20000389

08001dc4 <setUserResultData>:

unsigned char setUserResultData(struct results* structDataResult, unsigned char numTest)
{
 8001dc4:	b490      	push	{r4, r7}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
	unsigned char numSample = structDataResult->resultTestAcquiredSamples;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	785b      	ldrb	r3, [r3, #1]
 8001dd4:	73bb      	strb	r3, [r7, #14]
    myResults[numTest].resultTestNum = numTest+1;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	3201      	adds	r2, #1
 8001ddc:	b2d1      	uxtb	r1, r2
 8001dde:	4a31      	ldr	r2, [pc, #196]	; (8001ea4 <setUserResultData+0xe0>)
 8001de0:	019b      	lsls	r3, r3, #6
 8001de2:	4413      	add	r3, r2
 8001de4:	460a      	mov	r2, r1
 8001de6:	701a      	strb	r2, [r3, #0]
    myResults[numTest].resultTestAcquiredSamples = numSample;
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	4a2e      	ldr	r2, [pc, #184]	; (8001ea4 <setUserResultData+0xe0>)
 8001dec:	019b      	lsls	r3, r3, #6
 8001dee:	4413      	add	r3, r2
 8001df0:	3301      	adds	r3, #1
 8001df2:	7bba      	ldrb	r2, [r7, #14]
 8001df4:	701a      	strb	r2, [r3, #0]
    myResults[numTest].thereAreData = TRUE;
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <setUserResultData+0xe0>)
 8001dfa:	019b      	lsls	r3, r3, #6
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	e042      	b.n	8001e90 <setUserResultData+0xcc>
    {
        myResults[numTest].Measurement[i].sampleNum = structDataResult->Measurement[i].sampleNum;
 8001e0a:	7bf9      	ldrb	r1, [r7, #15]
 8001e0c:	78f8      	ldrb	r0, [r7, #3]
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	687c      	ldr	r4, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	440b      	add	r3, r1
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4423      	add	r3, r4
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	781c      	ldrb	r4, [r3, #0]
 8001e20:	4920      	ldr	r1, [pc, #128]	; (8001ea4 <setUserResultData+0xe0>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	0182      	lsls	r2, r0, #6
 8001e2c:	4413      	add	r3, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	3304      	adds	r3, #4
 8001e32:	4622      	mov	r2, r4
 8001e34:	701a      	strb	r2, [r3, #0]
        myResults[numTest].Measurement[i].uiVooTime = structDataResult->Measurement[i].uiVooTime;
 8001e36:	7bf9      	ldrb	r1, [r7, #15]
 8001e38:	78f8      	ldrb	r0, [r7, #3]
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	687c      	ldr	r4, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	440b      	add	r3, r1
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4423      	add	r3, r4
 8001e48:	3308      	adds	r3, #8
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	4c15      	ldr	r4, [pc, #84]	; (8001ea4 <setUserResultData+0xe0>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	0182      	lsls	r2, r0, #6
 8001e58:	4413      	add	r3, r2
 8001e5a:	4423      	add	r3, r4
 8001e5c:	3308      	adds	r3, #8
 8001e5e:	6019      	str	r1, [r3, #0]
        myResults[numTest].Measurement[i].uiSoloTime = structDataResult->Measurement[i].uiSoloTime;
 8001e60:	7bf9      	ldrb	r1, [r7, #15]
 8001e62:	78f8      	ldrb	r0, [r7, #3]
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	687c      	ldr	r4, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	440b      	add	r3, r1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4423      	add	r3, r4
 8001e72:	330c      	adds	r3, #12
 8001e74:	6819      	ldr	r1, [r3, #0]
 8001e76:	4c0b      	ldr	r4, [pc, #44]	; (8001ea4 <setUserResultData+0xe0>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	0182      	lsls	r2, r0, #6
 8001e82:	4413      	add	r3, r2
 8001e84:	4423      	add	r3, r4
 8001e86:	330c      	adds	r3, #12
 8001e88:	6019      	str	r1, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	7bbb      	ldrb	r3, [r7, #14]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d3b8      	bcc.n	8001e0a <setUserResultData+0x46>
    }
}
 8001e98:	bf00      	nop
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc90      	pop	{r4, r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	200001dc 	.word	0x200001dc

08001ea8 <resetResultStruct>:

unsigned char resetResultStruct(struct results* structToReset) //verificar se vai precisar
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
    structToReset->resultTestNum = 0;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
    structToReset->resultTestAcquiredSamples = 0;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	705a      	strb	r2, [r3, #1]
    structToReset->thereAreData = FALSE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	709a      	strb	r2, [r3, #2]
    for(unsigned char i = 0;i<MEASUREMENT_SIZE;i++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
 8001ec6:	e020      	b.n	8001f0a <resetResultStruct+0x62>
    {
        structToReset->Measurement[i].sampleNum = 0;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
        structToReset->Measurement[i].uiVooTime = 0;
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	3308      	adds	r3, #8
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
        structToReset->Measurement[i].uiSoloTime = 0;
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	330c      	adds	r3, #12
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
    for(unsigned char i = 0;i<MEASUREMENT_SIZE;i++)
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	3301      	adds	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d9db      	bls.n	8001ec8 <resetResultStruct+0x20>
    }

}
 8001f10:	bf00      	nop
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <resetConfigStruct>:

unsigned char resetConfigStruct(struct dataInsert* structToReset)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
    structToReset->userTest = 0;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
    structToReset->userAlturaDJ = 0;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	741a      	strb	r2, [r3, #16]
    structToReset->userAlturaMax = 0;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	731a      	strb	r2, [r3, #12]
    structToReset->userAlturaMin = 0;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	72da      	strb	r2, [r3, #11]
    structToReset->userCMJ = 0;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	73da      	strb	r2, [r3, #15]
    structToReset->userCommConfig = 0;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	74da      	strb	r2, [r3, #19]
    structToReset->userConsultTest = 0;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	729a      	strb	r2, [r3, #10]
    structToReset->userIntervalSaltos = 0;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	739a      	strb	r2, [r3, #14]
    structToReset->userIntervalSeries = 0;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	749a      	strb	r2, [r3, #18]
    structToReset->userMass = 0;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	721a      	strb	r2, [r3, #8]
    structToReset->userNumSaltos = 0;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	735a      	strb	r2, [r3, #13]
    structToReset->userNumSeries = 0;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	745a      	strb	r2, [r3, #17]
    structToReset->userOverMass = 0;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	725a      	strb	r2, [r3, #9]
    structToReset->userSelectSensorChannel = 0;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	755a      	strb	r2, [r3, #21]
    structToReset->userSelectTapete = 0;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	751a      	strb	r2, [r3, #20]
    structToReset->userTime = 0;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	605a      	str	r2, [r3, #4]

}
 8001f84:	bf00      	nop
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <resetMyResults>:

void resetMyResults()
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
    numberTest = 0;
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <resetMyResults+0xb4>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
    for(unsigned char test=0;test<TEST_SIZE;test++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	e046      	b.n	8002030 <resetMyResults+0xa0>
    {
        myResults[test].resultTestNum = 0;
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	4a28      	ldr	r2, [pc, #160]	; (8002048 <resetMyResults+0xb8>)
 8001fa6:	019b      	lsls	r3, r3, #6
 8001fa8:	4413      	add	r3, r2
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
        myResults[test].resultTestAcquiredSamples = 0;
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <resetMyResults+0xb8>)
 8001fb2:	019b      	lsls	r3, r3, #6
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
        myResults[test].thereAreData = FALSE;
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	4a22      	ldr	r2, [pc, #136]	; (8002048 <resetMyResults+0xb8>)
 8001fc0:	019b      	lsls	r3, r3, #6
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	603b      	str	r3, [r7, #0]
 8001fce:	e029      	b.n	8002024 <resetMyResults+0x94>
        {
            myResults[test].Measurement[sample].sampleNum = 0;
 8001fd0:	79f9      	ldrb	r1, [r7, #7]
 8001fd2:	481d      	ldr	r0, [pc, #116]	; (8002048 <resetMyResults+0xb8>)
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	018a      	lsls	r2, r1, #6
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4403      	add	r3, r0
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
            myResults[test].Measurement[sample].uiVooTime = 0;
 8001fea:	79f9      	ldrb	r1, [r7, #7]
 8001fec:	4816      	ldr	r0, [pc, #88]	; (8002048 <resetMyResults+0xb8>)
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	018a      	lsls	r2, r1, #6
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4403      	add	r3, r0
 8001ffe:	3308      	adds	r3, #8
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
            myResults[test].Measurement[sample].uiSoloTime = 0;
 8002004:	79f9      	ldrb	r1, [r7, #7]
 8002006:	4810      	ldr	r0, [pc, #64]	; (8002048 <resetMyResults+0xb8>)
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	018a      	lsls	r2, r1, #6
 8002014:	4413      	add	r3, r2
 8002016:	4403      	add	r3, r0
 8002018:	330c      	adds	r3, #12
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2b04      	cmp	r3, #4
 8002028:	d9d2      	bls.n	8001fd0 <resetMyResults+0x40>
    for(unsigned char test=0;test<TEST_SIZE;test++)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	3301      	adds	r3, #1
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	2b04      	cmp	r3, #4
 8002034:	d9b5      	bls.n	8001fa2 <resetMyResults+0x12>
        }

    }
}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000389 	.word	0x20000389
 8002048:	200001dc 	.word	0x200001dc

0800204c <indexColumn>:
        *index = 0;
    }
}

unsigned char indexColumn(short* currentColumn, unsigned char size)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	70fb      	strb	r3, [r7, #3]
    *currentColumn = *currentColumn -1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29b      	uxth	r3, r3
 8002064:	b21a      	sxth	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	801a      	strh	r2, [r3, #0]
    if(*currentColumn == 5) *currentColumn = *currentColumn -1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002070:	2b05      	cmp	r3, #5
 8002072:	d109      	bne.n	8002088 <indexColumn+0x3c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29b      	uxth	r3, r3
 8002080:	b21a      	sxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	e00d      	b.n	80020a4 <indexColumn+0x58>
    else if(*currentColumn == 2) *currentColumn = *currentColumn -1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d108      	bne.n	80020a4 <indexColumn+0x58>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29b      	uxth	r3, r3
 800209e:	b21a      	sxth	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	801a      	strh	r2, [r3, #0]
    if(*currentColumn <0)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da03      	bge.n	80020b6 <indexColumn+0x6a>
    {
        *currentColumn = size;
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	b21a      	sxth	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	801a      	strh	r2, [r3, #0]
    }
}
 80020b6:	bf00      	nop
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <milisecondsTime>:

unsigned long milisecondsTime(unsigned char* ptr_inputTime)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b085      	sub	sp, #20
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
	struct tm* time = ptr_inputTime;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	60fb      	str	r3, [r7, #12]
	unsigned long int msTime = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]

	msTime = time->tm_hour*3600;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	60bb      	str	r3, [r7, #8]
	msTime += time->tm_min*60;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	461a      	mov	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4413      	add	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
	msTime += time->tm_sec;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4413      	add	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
	msTime = msTime*1000;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	60bb      	str	r3, [r7, #8]

	return msTime;
 800210c:	68bb      	ldr	r3, [r7, #8]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <stringToInt>:
    //fazer a convers�o de hhmmss para ms
    return intTime;
}

unsigned int stringToInt(unsigned char* string)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
    char *ptr;
    unsigned int x = strtol(string,&ptr,10);
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	220a      	movs	r2, #10
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f007 fef7 	bl	8009f1c <strtol>
 800212e:	4603      	mov	r3, r0
 8002130:	60fb      	str	r3, [r7, #12]
    return x;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <indexMass>:
    float x = strtof(string,NULL);
    return x;
}

unsigned char indexMass(short* index)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    *index = *index -1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29b      	uxth	r3, r3
 8002150:	b21a      	sxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	801a      	strh	r2, [r3, #0]
    if(*index == 3) *index = *index -1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d108      	bne.n	8002172 <indexMass+0x36>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b29b      	uxth	r3, r3
 800216c:	b21a      	sxth	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002178:	2b00      	cmp	r3, #0
 800217a:	da02      	bge.n	8002182 <indexMass+0x46>
    {
        *index = 4;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2204      	movs	r2, #4
 8002180:	801a      	strh	r2, [r3, #0]
    }
}
 8002182:	bf00      	nop
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <indexChange>:

unsigned char indexChange(short* index, unsigned char size)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	70fb      	strb	r3, [r7, #3]
    *index = *index - 1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	da03      	bge.n	80021be <indexChange+0x30>
    {
        *index = size;
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	801a      	strh	r2, [r3, #0]
    }
}
 80021be:	bf00      	nop
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
	...

080021cc <getAltMinString>:

unsigned char* getAltMinString()
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af02      	add	r7, sp, #8
    unsigned char* altMinArray = getAltMinArray();
 80021d2:	f7ff fd0f 	bl	8001bf4 <getAltMinArray>
 80021d6:	6078      	str	r0, [r7, #4]
    sprintf(altMinString,"%d%d%d",altMinArray[0],altMinArray[1],altMinArray[2]);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3301      	adds	r3, #1
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3302      	adds	r3, #2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	460b      	mov	r3, r1
 80021f0:	4904      	ldr	r1, [pc, #16]	; (8002204 <getAltMinString+0x38>)
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <getAltMinString+0x3c>)
 80021f4:	f007 f8bc 	bl	8009370 <siprintf>
    return altMinString;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <getAltMinString+0x3c>)
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	0800b660 	.word	0x0800b660
 8002208:	200003bc 	.word	0x200003bc

0800220c <getAltMaxString>:

unsigned char* getAltMaxString()
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af02      	add	r7, sp, #8
    unsigned char* altMaxArray = getAltMaxArray();
 8002212:	f7ff fcf9 	bl	8001c08 <getAltMaxArray>
 8002216:	6078      	str	r0, [r7, #4]
    sprintf(altMaxString,"%d%d%d",altMaxArray[0],altMaxArray[1],altMaxArray[2]);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3301      	adds	r3, #1
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3302      	adds	r3, #2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	460b      	mov	r3, r1
 8002230:	4904      	ldr	r1, [pc, #16]	; (8002244 <getAltMaxString+0x38>)
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <getAltMaxString+0x3c>)
 8002234:	f007 f89c 	bl	8009370 <siprintf>
    return altMaxString;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <getAltMaxString+0x3c>)
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	0800b660 	.word	0x0800b660
 8002248:	200003c8 	.word	0x200003c8

0800224c <getNumSaltosString>:

unsigned char* getNumSaltosString()
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af02      	add	r7, sp, #8
    unsigned char* numSaltosArray = getNumSaltosArray();
 8002252:	f7ff fce3 	bl	8001c1c <getNumSaltosArray>
 8002256:	6078      	str	r0, [r7, #4]
    sprintf(numSaltosString,"%d%d%d",numSaltosArray[0],numSaltosArray[1],numSaltosArray[2]);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3301      	adds	r3, #1
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3302      	adds	r3, #2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	460b      	mov	r3, r1
 8002270:	4904      	ldr	r1, [pc, #16]	; (8002284 <getNumSaltosString+0x38>)
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <getNumSaltosString+0x3c>)
 8002274:	f007 f87c 	bl	8009370 <siprintf>
    return numSaltosString;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <getNumSaltosString+0x3c>)
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	0800b660 	.word	0x0800b660
 8002288:	200003d4 	.word	0x200003d4

0800228c <getTypeJumpString>:

unsigned char* getTypeJumpString()
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
    unsigned char* typeJumpArray = getTypeJumpArray();
 8002292:	f7ff fccd 	bl	8001c30 <getTypeJumpArray>
 8002296:	6078      	str	r0, [r7, #4]
    sprintf(tipoSaltoString,"%d",typeJumpArray[0]);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	4904      	ldr	r1, [pc, #16]	; (80022b0 <getTypeJumpString+0x24>)
 80022a0:	4804      	ldr	r0, [pc, #16]	; (80022b4 <getTypeJumpString+0x28>)
 80022a2:	f007 f865 	bl	8009370 <siprintf>
    return tipoSaltoString;
 80022a6:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <getTypeJumpString+0x28>)
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	0800b668 	.word	0x0800b668
 80022b4:	200003e0 	.word	0x200003e0

080022b8 <getAltDJString>:

unsigned char* getAltDJString()
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
    unsigned char* altDJArray = getAltDJArray();
 80022be:	f7ff fcc1 	bl	8001c44 <getAltDJArray>
 80022c2:	6078      	str	r0, [r7, #4]
    sprintf(altDJString,"%d%d%",altDJArray[0],altDJArray[1]);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3301      	adds	r3, #1
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4904      	ldr	r1, [pc, #16]	; (80022e4 <getAltDJString+0x2c>)
 80022d2:	4805      	ldr	r0, [pc, #20]	; (80022e8 <getAltDJString+0x30>)
 80022d4:	f007 f84c 	bl	8009370 <siprintf>
    return altDJString;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <getAltDJString+0x30>)
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	0800b66c 	.word	0x0800b66c
 80022e8:	200003ec 	.word	0x200003ec

080022ec <getNumSeriesString>:

unsigned char* getNumSeriesString()
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af02      	add	r7, sp, #8
    unsigned char* numSeriesArray = getNumSeriesArray();
 80022f2:	f7ff fcb1 	bl	8001c58 <getNumSeriesArray>
 80022f6:	6078      	str	r0, [r7, #4]
    sprintf(numSeriesString,"%d%d%d",numSeriesArray[0],numSeriesArray[1],numSeriesArray[2]);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3301      	adds	r3, #1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3302      	adds	r3, #2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	460b      	mov	r3, r1
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <getNumSeriesString+0x38>)
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <getNumSeriesString+0x3c>)
 8002314:	f007 f82c 	bl	8009370 <siprintf>
    return numSeriesString;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <getNumSeriesString+0x3c>)
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	0800b660 	.word	0x0800b660
 8002328:	200003f8 	.word	0x200003f8

0800232c <getIntervalSeriesString>:

unsigned char* getIntervalSeriesString()
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af02      	add	r7, sp, #8
    unsigned char* intervalSeriesArray = getIntervalSeriesArray();
 8002332:	f7ff fc9b 	bl	8001c6c <getIntervalSeriesArray>
 8002336:	6078      	str	r0, [r7, #4]
    sprintf(interSeriesString,"%d%d%d",intervalSeriesArray[0],intervalSeriesArray[1],intervalSeriesArray[2]);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3301      	adds	r3, #1
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3302      	adds	r3, #2
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	460b      	mov	r3, r1
 8002350:	4904      	ldr	r1, [pc, #16]	; (8002364 <getIntervalSeriesString+0x38>)
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <getIntervalSeriesString+0x3c>)
 8002354:	f007 f80c 	bl	8009370 <siprintf>
    return interSeriesString;
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <getIntervalSeriesString+0x3c>)
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	0800b660 	.word	0x0800b660
 8002368:	20000404 	.word	0x20000404

0800236c <getMassString>:

unsigned char* getMassString()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af02      	add	r7, sp, #8
    unsigned char* massArray = getMassArray();
 8002372:	f7ff fc2b 	bl	8001bcc <getMassArray>
 8002376:	6078      	str	r0, [r7, #4]
    sprintf(massString,"%d%d%d.%d",massArray[0],massArray[1],massArray[2],massArray[4]);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4619      	mov	r1, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3301      	adds	r3, #1
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3302      	adds	r3, #2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	9200      	str	r2, [sp, #0]
 8002398:	4603      	mov	r3, r0
 800239a:	460a      	mov	r2, r1
 800239c:	4904      	ldr	r1, [pc, #16]	; (80023b0 <getMassString+0x44>)
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <getMassString+0x48>)
 80023a0:	f006 ffe6 	bl	8009370 <siprintf>
    //massArray[3] ficou representando o "." no display
    return massString;
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <getMassString+0x48>)
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	0800b674 	.word	0x0800b674
 80023b4:	200003a4 	.word	0x200003a4

080023b8 <getOverMassString>:

unsigned char* getOverMassString()
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af02      	add	r7, sp, #8
    unsigned char* overMassArray = getOverMassArray();
 80023be:	f7ff fc0f 	bl	8001be0 <getOverMassArray>
 80023c2:	6078      	str	r0, [r7, #4]
    sprintf(overMassString,"%d%d%d.%d",overMassArray[0],overMassArray[1],overMassArray[2],overMassArray[4]);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4619      	mov	r1, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3301      	adds	r3, #1
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3302      	adds	r3, #2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3304      	adds	r3, #4
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	9200      	str	r2, [sp, #0]
 80023e4:	4603      	mov	r3, r0
 80023e6:	460a      	mov	r2, r1
 80023e8:	4904      	ldr	r1, [pc, #16]	; (80023fc <getOverMassString+0x44>)
 80023ea:	4805      	ldr	r0, [pc, #20]	; (8002400 <getOverMassString+0x48>)
 80023ec:	f006 ffc0 	bl	8009370 <siprintf>
    return overMassString;
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <getOverMassString+0x48>)
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	0800b674 	.word	0x0800b674
 8002400:	200003b0 	.word	0x200003b0

08002404 <getNumTestString>:

unsigned char* getNumTestString()
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af02      	add	r7, sp, #8
    unsigned char* numTestArray = getNumTestArray();
 800240a:	f7ff fc39 	bl	8001c80 <getNumTestArray>
 800240e:	6078      	str	r0, [r7, #4]
    sprintf(numTestString,"%d%d%d",numTestArray[0],numTestArray[1],numTestArray[2]);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3301      	adds	r3, #1
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3302      	adds	r3, #2
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	460b      	mov	r3, r1
 8002428:	4904      	ldr	r1, [pc, #16]	; (800243c <getNumTestString+0x38>)
 800242a:	4805      	ldr	r0, [pc, #20]	; (8002440 <getNumTestString+0x3c>)
 800242c:	f006 ffa0 	bl	8009370 <siprintf>
    return numTestString;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <getNumTestString+0x3c>)
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	0800b660 	.word	0x0800b660
 8002440:	20000410 	.word	0x20000410

08002444 <getEraseTestString>:

unsigned char* getEraseTestString()
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
    unsigned char* eraseTestArray = getEraseTestArray();
 800244a:	f7ff fc23 	bl	8001c94 <getEraseTestArray>
 800244e:	4603      	mov	r3, r0
 8002450:	607b      	str	r3, [r7, #4]
    sprintf(eraseTestString,"%d",eraseTestArray[0]);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	4904      	ldr	r1, [pc, #16]	; (800246c <getEraseTestString+0x28>)
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <getEraseTestString+0x2c>)
 800245c:	f006 ff88 	bl	8009370 <siprintf>
    return eraseTestString;
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <getEraseTestString+0x2c>)
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	0800b668 	.word	0x0800b668
 8002470:	2000041c 	.word	0x2000041c

08002474 <param_1_toString>:
	static unsigned char saveResultString[50];
	return saveResultString;
}

unsigned int* param_1_toString(unsigned char* string)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
    static unsigned char result[TEST_SIZE];
    sprintf(result,"%d",*string);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4904      	ldr	r1, [pc, #16]	; (8002494 <param_1_toString+0x20>)
 8002484:	4804      	ldr	r0, [pc, #16]	; (8002498 <param_1_toString+0x24>)
 8002486:	f006 ff73 	bl	8009370 <siprintf>
    return result;
 800248a:	4b03      	ldr	r3, [pc, #12]	; (8002498 <param_1_toString+0x24>)
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	0800b668 	.word	0x0800b668
 8002498:	20000428 	.word	0x20000428

0800249c <param_2_toString>:

unsigned int* param_2_toString(unsigned char* string)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
    static unsigned char result[TEST_SIZE];
    sprintf(result,"%d",*string);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4904      	ldr	r1, [pc, #16]	; (80024bc <param_2_toString+0x20>)
 80024ac:	4804      	ldr	r0, [pc, #16]	; (80024c0 <param_2_toString+0x24>)
 80024ae:	f006 ff5f 	bl	8009370 <siprintf>
    return result;
 80024b2:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <param_2_toString+0x24>)
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	0800b668 	.word	0x0800b668
 80024c0:	20000430 	.word	0x20000430

080024c4 <param_3_toString>:

unsigned int* param_3_toString(unsigned char* string)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
    static unsigned char result[TEST_SIZE];
    sprintf(result,"%d",*string);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4904      	ldr	r1, [pc, #16]	; (80024e4 <param_3_toString+0x20>)
 80024d4:	4804      	ldr	r0, [pc, #16]	; (80024e8 <param_3_toString+0x24>)
 80024d6:	f006 ff4b 	bl	8009370 <siprintf>
    return result;
 80024da:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <param_3_toString+0x24>)
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	0800b668 	.word	0x0800b668
 80024e8:	20000438 	.word	0x20000438

080024ec <setUserAltMin>:

unsigned char setUserAltMin(unsigned char* idx)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
    unsigned char* altMinArray = getAltMinArray();
 80024f4:	f7ff fb7e 	bl	8001bf4 <getAltMinArray>
 80024f8:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	72fb      	strb	r3, [r7, #11]
    altMinArray[index] = altMinArray[index]+1;
 8002500:	7afb      	ldrb	r3, [r7, #11]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4413      	add	r3, r2
 8002506:	781a      	ldrb	r2, [r3, #0]
 8002508:	7afb      	ldrb	r3, [r7, #11]
 800250a:	68f9      	ldr	r1, [r7, #12]
 800250c:	440b      	add	r3, r1
 800250e:	3201      	adds	r2, #1
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]
    if(altMinArray[index]>9) altMinArray[index]= 0;
 8002514:	7afb      	ldrb	r3, [r7, #11]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b09      	cmp	r3, #9
 800251e:	d904      	bls.n	800252a <setUserAltMin+0x3e>
 8002520:	7afb      	ldrb	r3, [r7, #11]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4413      	add	r3, r2
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
}
 800252a:	bf00      	nop
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <setUserErase>:

unsigned char setUserErase(unsigned char* idx)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    unsigned char* eraseArray = getEraseTestArray();
 800253c:	f7ff fbaa 	bl	8001c94 <getEraseTestArray>
 8002540:	4603      	mov	r3, r0
 8002542:	60fb      	str	r3, [r7, #12]
    unsigned char index = *idx;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	72fb      	strb	r3, [r7, #11]
    eraseArray[index] = eraseArray[index]+1;
 800254a:	7afb      	ldrb	r3, [r7, #11]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	7afb      	ldrb	r3, [r7, #11]
 8002554:	68f9      	ldr	r1, [r7, #12]
 8002556:	440b      	add	r3, r1
 8002558:	3201      	adds	r2, #1
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]
    if(eraseArray[index]>9) eraseArray[index]= 0;
 800255e:	7afb      	ldrb	r3, [r7, #11]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4413      	add	r3, r2
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b09      	cmp	r3, #9
 8002568:	d904      	bls.n	8002574 <setUserErase+0x40>
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
}
 8002574:	bf00      	nop
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <setUserAltMax>:

unsigned char setUserAltMax(unsigned char* idx)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
    unsigned char* altMaxArray = getAltMaxArray();
 8002586:	f7ff fb3f 	bl	8001c08 <getAltMaxArray>
 800258a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	72fb      	strb	r3, [r7, #11]
    altMaxArray[index] = altMaxArray[index]+1;
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	7afb      	ldrb	r3, [r7, #11]
 800259c:	68f9      	ldr	r1, [r7, #12]
 800259e:	440b      	add	r3, r1
 80025a0:	3201      	adds	r2, #1
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
    if(altMaxArray[index]>9) altMaxArray[index]= 0;
 80025a6:	7afb      	ldrb	r3, [r7, #11]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d904      	bls.n	80025bc <setUserAltMax+0x3e>
 80025b2:	7afb      	ldrb	r3, [r7, #11]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
}
 80025bc:	bf00      	nop
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <setUserNumSaltos>:

unsigned char setUserNumSaltos(unsigned char* idx)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
    unsigned char* numSaltosArray = getNumSaltosArray();
 80025ce:	f7ff fb25 	bl	8001c1c <getNumSaltosArray>
 80025d2:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	72fb      	strb	r3, [r7, #11]
    numSaltosArray[index] = numSaltosArray[index]+1;
 80025da:	7afb      	ldrb	r3, [r7, #11]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	7afb      	ldrb	r3, [r7, #11]
 80025e4:	68f9      	ldr	r1, [r7, #12]
 80025e6:	440b      	add	r3, r1
 80025e8:	3201      	adds	r2, #1
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]
    if(numSaltosArray[index]>9) numSaltosArray[index]= 0;
 80025ee:	7afb      	ldrb	r3, [r7, #11]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b09      	cmp	r3, #9
 80025f8:	d904      	bls.n	8002604 <setUserNumSaltos+0x3e>
 80025fa:	7afb      	ldrb	r3, [r7, #11]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4413      	add	r3, r2
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
}
 8002604:	bf00      	nop
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <setUserTypeJump>:

unsigned char setUserTypeJump(unsigned char* idx)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
    unsigned char* typeJumpArray = getTypeJumpArray();
 8002616:	f7ff fb0b 	bl	8001c30 <getTypeJumpArray>
 800261a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	72fb      	strb	r3, [r7, #11]
    typeJumpArray[index] = typeJumpArray[index]+1;
 8002622:	7afb      	ldrb	r3, [r7, #11]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	7afb      	ldrb	r3, [r7, #11]
 800262c:	68f9      	ldr	r1, [r7, #12]
 800262e:	440b      	add	r3, r1
 8002630:	3201      	adds	r2, #1
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
    if(typeJumpArray[index]>3) typeJumpArray[index]= 0;
 8002636:	7afb      	ldrb	r3, [r7, #11]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d904      	bls.n	800264c <setUserTypeJump+0x3e>
 8002642:	7afb      	ldrb	r3, [r7, #11]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
}
 800264c:	bf00      	nop
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <setUserAltDJ>:

unsigned char setUserAltDJ(unsigned char* idx)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
    unsigned char* AltDJArray = getAltDJArray();
 800265e:	f7ff faf1 	bl	8001c44 <getAltDJArray>
 8002662:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	72fb      	strb	r3, [r7, #11]
    AltDJArray[index] = AltDJArray[index]+1;
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4413      	add	r3, r2
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	7afb      	ldrb	r3, [r7, #11]
 8002674:	68f9      	ldr	r1, [r7, #12]
 8002676:	440b      	add	r3, r1
 8002678:	3201      	adds	r2, #1
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]
    if(AltDJArray[index]>9) AltDJArray[index]= 0;
 800267e:	7afb      	ldrb	r3, [r7, #11]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b09      	cmp	r3, #9
 8002688:	d904      	bls.n	8002694 <setUserAltDJ+0x3e>
 800268a:	7afb      	ldrb	r3, [r7, #11]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4413      	add	r3, r2
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
}
 8002694:	bf00      	nop
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <setUserNumSeries>:

unsigned char setUserNumSeries(unsigned char* idx)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
    unsigned char* numSeriesArray = getNumSeriesArray();
 80026a6:	f7ff fad7 	bl	8001c58 <getNumSeriesArray>
 80026aa:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	72fb      	strb	r3, [r7, #11]
    numSeriesArray[index] = numSeriesArray[index]+1;
 80026b2:	7afb      	ldrb	r3, [r7, #11]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	7afb      	ldrb	r3, [r7, #11]
 80026bc:	68f9      	ldr	r1, [r7, #12]
 80026be:	440b      	add	r3, r1
 80026c0:	3201      	adds	r2, #1
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]
    if(numSeriesArray[index]>9) numSeriesArray[index]= 0;
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b09      	cmp	r3, #9
 80026d0:	d904      	bls.n	80026dc <setUserNumSeries+0x3e>
 80026d2:	7afb      	ldrb	r3, [r7, #11]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
}
 80026dc:	bf00      	nop
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <setUserIntervalSeries>:

unsigned char setUserIntervalSeries(unsigned char* idx)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
    unsigned char* IntervalSeriesArray = getIntervalSeriesArray();
 80026ee:	f7ff fabd 	bl	8001c6c <getIntervalSeriesArray>
 80026f2:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	72fb      	strb	r3, [r7, #11]
    IntervalSeriesArray[index] = IntervalSeriesArray[index]+1;
 80026fa:	7afb      	ldrb	r3, [r7, #11]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	7afb      	ldrb	r3, [r7, #11]
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	440b      	add	r3, r1
 8002708:	3201      	adds	r2, #1
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
    if(IntervalSeriesArray[index]>9) IntervalSeriesArray[index]= 0;
 800270e:	7afb      	ldrb	r3, [r7, #11]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4413      	add	r3, r2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b09      	cmp	r3, #9
 8002718:	d904      	bls.n	8002724 <setUserIntervalSeries+0x3e>
 800271a:	7afb      	ldrb	r3, [r7, #11]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
}
 8002724:	bf00      	nop
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <setUserMass>:

unsigned char setUserMass(unsigned char* idx)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
    unsigned char* massArray = getMassArray();
 8002736:	f7ff fa49 	bl	8001bcc <getMassArray>
 800273a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	72fb      	strb	r3, [r7, #11]
    massArray[index] = massArray[index]+1;
 8002742:	7afb      	ldrb	r3, [r7, #11]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	7afb      	ldrb	r3, [r7, #11]
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	440b      	add	r3, r1
 8002750:	3201      	adds	r2, #1
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
    if(massArray[index]>9) massArray[index]= 0;
 8002756:	7afb      	ldrb	r3, [r7, #11]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b09      	cmp	r3, #9
 8002760:	d904      	bls.n	800276c <setUserMass+0x3e>
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
}
 800276c:	bf00      	nop
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <setUserOverMass>:

unsigned char setUserOverMass(unsigned char* idx)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
    unsigned char* overMassArray = getOverMassArray();
 800277e:	f7ff fa2f 	bl	8001be0 <getOverMassArray>
 8002782:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	72fb      	strb	r3, [r7, #11]
    overMassArray[index] = overMassArray[index]+1;
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	7afb      	ldrb	r3, [r7, #11]
 8002794:	68f9      	ldr	r1, [r7, #12]
 8002796:	440b      	add	r3, r1
 8002798:	3201      	adds	r2, #1
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]
    if(overMassArray[index]>9) overMassArray[index]= 0;
 800279e:	7afb      	ldrb	r3, [r7, #11]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b09      	cmp	r3, #9
 80027a8:	d904      	bls.n	80027b4 <setUserOverMass+0x3e>
 80027aa:	7afb      	ldrb	r3, [r7, #11]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
}
 80027b4:	bf00      	nop
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <setUserNumTest>:

unsigned char setUserNumTest(unsigned char* idx)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
    unsigned char* numTestArray = getNumTestArray();
 80027c6:	f7ff fa5b 	bl	8001c80 <getNumTestArray>
 80027ca:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	72fb      	strb	r3, [r7, #11]
    numTestArray[index] = numTestArray[index]+1;
 80027d2:	7afb      	ldrb	r3, [r7, #11]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	7afb      	ldrb	r3, [r7, #11]
 80027dc:	68f9      	ldr	r1, [r7, #12]
 80027de:	440b      	add	r3, r1
 80027e0:	3201      	adds	r2, #1
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
    if(numTestArray[index]>9) numTestArray[index]= 0;
 80027e6:	7afb      	ldrb	r3, [r7, #11]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b09      	cmp	r3, #9
 80027f0:	d904      	bls.n	80027fc <setUserNumTest+0x3e>
 80027f2:	7afb      	ldrb	r3, [r7, #11]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
}
 80027fc:	bf00      	nop
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <setIntervalSaltosTime>:

unsigned char* setIntervalSaltosTime(unsigned char* configInputTimer)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	unsigned char index = *configInputTimer + 3;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3303      	adds	r3, #3
 8002816:	73fb      	strb	r3, [r7, #15]
	struct tm* insertTime = getIntervalTimeStruct();
 8002818:	f7ff f9ce 	bl	8001bb8 <getIntervalTimeStruct>
 800281c:	4603      	mov	r3, r0
 800281e:	60bb      	str	r3, [r7, #8]

	switch(index)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	3b03      	subs	r3, #3
 8002824:	2b04      	cmp	r3, #4
 8002826:	d84a      	bhi.n	80028be <setIntervalSaltosTime+0xb6>
 8002828:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <setIntervalSaltosTime+0x28>)
 800282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282e:	bf00      	nop
 8002830:	08002845 	.word	0x08002845
 8002834:	08002861 	.word	0x08002861
 8002838:	080028bf 	.word	0x080028bf
 800283c:	0800287b 	.word	0x0800287b
 8002840:	08002897 	.word	0x08002897
	{
		case DEZENA_M:
			insertTime->tm_min = insertTime->tm_min+10;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f103 020a 	add.w	r2, r3, #10
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b3c      	cmp	r3, #60	; 0x3c
 8002856:	dd2b      	ble.n	80028b0 <setIntervalSaltosTime+0xa8>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2200      	movs	r2, #0
 800285c:	605a      	str	r2, [r3, #4]
		break;
 800285e:	e027      	b.n	80028b0 <setIntervalSaltosTime+0xa8>

		case UNIDADE_M:
			insertTime->tm_min = insertTime->tm_min+1;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b3c      	cmp	r3, #60	; 0x3c
 8002870:	dd20      	ble.n	80028b4 <setIntervalSaltosTime+0xac>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2200      	movs	r2, #0
 8002876:	605a      	str	r2, [r3, #4]
		break;
 8002878:	e01c      	b.n	80028b4 <setIntervalSaltosTime+0xac>

		case DEZENA_S:
			insertTime->tm_sec =insertTime->tm_sec+10 ;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f103 020a 	add.w	r2, r3, #10
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b3c      	cmp	r3, #60	; 0x3c
 800288c:	dd14      	ble.n	80028b8 <setIntervalSaltosTime+0xb0>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

		break;
 8002894:	e010      	b.n	80028b8 <setIntervalSaltosTime+0xb0>

		case UNIDADE_S:
			insertTime->tm_sec =insertTime->tm_sec+1 ;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b3c      	cmp	r3, #60	; 0x3c
 80028a6:	dd09      	ble.n	80028bc <setIntervalSaltosTime+0xb4>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
		break;
 80028ae:	e005      	b.n	80028bc <setIntervalSaltosTime+0xb4>
		break;
 80028b0:	bf00      	nop
 80028b2:	e004      	b.n	80028be <setIntervalSaltosTime+0xb6>
		break;
 80028b4:	bf00      	nop
 80028b6:	e002      	b.n	80028be <setIntervalSaltosTime+0xb6>
		break;
 80028b8:	bf00      	nop
 80028ba:	e000      	b.n	80028be <setIntervalSaltosTime+0xb6>
		break;
 80028bc:	bf00      	nop
	}

}
 80028be:	bf00      	nop
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <setUserTime>:

unsigned char* setUserTime(unsigned char* inputUserTimer)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    unsigned char index = *inputUserTimer;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	73fb      	strb	r3, [r7, #15]
    struct tm* insertTime = getTimeStruct();
 80028d6:	f7ff f965 	bl	8001ba4 <getTimeStruct>
 80028da:	60b8      	str	r0, [r7, #8]
    static unsigned char timeString[9];

    switch(index)
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b07      	cmp	r3, #7
 80028e0:	f200 8089 	bhi.w	80029f6 <setUserTime+0x12e>
 80028e4:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <setUserTime+0x24>)
 80028e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ea:	bf00      	nop
 80028ec:	0800290d 	.word	0x0800290d
 80028f0:	08002935 	.word	0x08002935
 80028f4:	080029f7 	.word	0x080029f7
 80028f8:	0800295b 	.word	0x0800295b
 80028fc:	08002983 	.word	0x08002983
 8002900:	080029f7 	.word	0x080029f7
 8002904:	080029a9 	.word	0x080029a9
 8002908:	080029d1 	.word	0x080029d1
    {
        case DEZENA_H:
            insertTime->tm_hour = insertTime->tm_hour+10;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f103 020a 	add.w	r2, r3, #10
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b17      	cmp	r3, #23
 800291e:	dd02      	ble.n	8002926 <setUserTime+0x5e>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4a35      	ldr	r2, [pc, #212]	; (8002a00 <setUserTime+0x138>)
 800292a:	2109      	movs	r1, #9
 800292c:	4835      	ldr	r0, [pc, #212]	; (8002a04 <setUserTime+0x13c>)
 800292e:	f007 fa75 	bl	8009e1c <strftime>
        break;
 8002932:	e060      	b.n	80029f6 <setUserTime+0x12e>

        case UNIDADE_H:
            insertTime->tm_hour = insertTime->tm_hour+1;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b17      	cmp	r3, #23
 8002944:	dd02      	ble.n	800294c <setUserTime+0x84>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <setUserTime+0x138>)
 8002950:	2109      	movs	r1, #9
 8002952:	482c      	ldr	r0, [pc, #176]	; (8002a04 <setUserTime+0x13c>)
 8002954:	f007 fa62 	bl	8009e1c <strftime>
        break;
 8002958:	e04d      	b.n	80029f6 <setUserTime+0x12e>

        case DEZENA_M:
            insertTime->tm_min = insertTime->tm_min+10;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f103 020a 	add.w	r2, r3, #10
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b3c      	cmp	r3, #60	; 0x3c
 800296c:	dd02      	ble.n	8002974 <setUserTime+0xac>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2200      	movs	r2, #0
 8002972:	605a      	str	r2, [r3, #4]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <setUserTime+0x138>)
 8002978:	2109      	movs	r1, #9
 800297a:	4822      	ldr	r0, [pc, #136]	; (8002a04 <setUserTime+0x13c>)
 800297c:	f007 fa4e 	bl	8009e1c <strftime>
        break;
 8002980:	e039      	b.n	80029f6 <setUserTime+0x12e>

        case UNIDADE_M:
        	insertTime->tm_min = insertTime->tm_min+1;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b3c      	cmp	r3, #60	; 0x3c
 8002992:	dd02      	ble.n	800299a <setUserTime+0xd2>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2200      	movs	r2, #0
 8002998:	605a      	str	r2, [r3, #4]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <setUserTime+0x138>)
 800299e:	2109      	movs	r1, #9
 80029a0:	4818      	ldr	r0, [pc, #96]	; (8002a04 <setUserTime+0x13c>)
 80029a2:	f007 fa3b 	bl	8009e1c <strftime>
        break;
 80029a6:	e026      	b.n	80029f6 <setUserTime+0x12e>

        case DEZENA_S:
            insertTime->tm_sec =insertTime->tm_sec+10 ;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f103 020a 	add.w	r2, r3, #10
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b3c      	cmp	r3, #60	; 0x3c
 80029ba:	dd02      	ble.n	80029c2 <setUserTime+0xfa>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <setUserTime+0x138>)
 80029c6:	2109      	movs	r1, #9
 80029c8:	480e      	ldr	r0, [pc, #56]	; (8002a04 <setUserTime+0x13c>)
 80029ca:	f007 fa27 	bl	8009e1c <strftime>
        break;
 80029ce:	e012      	b.n	80029f6 <setUserTime+0x12e>

        case UNIDADE_S:
            insertTime->tm_sec =insertTime->tm_sec+1 ;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b3c      	cmp	r3, #60	; 0x3c
 80029e0:	dd02      	ble.n	80029e8 <setUserTime+0x120>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <setUserTime+0x138>)
 80029ec:	2109      	movs	r1, #9
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <setUserTime+0x13c>)
 80029f0:	f007 fa14 	bl	8009e1c <strftime>
        break;
 80029f4:	bf00      	nop
    }
}
 80029f6:	bf00      	nop
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	0800b680 	.word	0x0800b680
 8002a04:	20000440 	.word	0x20000440

08002a08 <alturaToTempo>:

unsigned char alturaToTempo(unsigned int altura)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	unsigned int tempo = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
	unsigned int nominator = 8 * altura;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	613b      	str	r3, [r7, #16]
	unsigned int  g = 981; // cm/s^2
 8002a1a:	f240 33d5 	movw	r3, #981	; 0x3d5
 8002a1e:	60fb      	str	r3, [r7, #12]
	float relation =  nominator/g;
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe f8e3 	bl	8000bf4 <__aeabi_ui2f>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	60bb      	str	r3, [r7, #8]
	tempo = sqrt(relation);
 8002a32:	68b8      	ldr	r0, [r7, #8]
 8002a34:	f7fd fd00 	bl	8000438 <__aeabi_f2d>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f008 fd12 	bl	800b468 <sqrt>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7fd fffc 	bl	8000a48 <__aeabi_d2uiz>
 8002a50:	4603      	mov	r3, r0
 8002a52:	617b      	str	r3, [r7, #20]
	tempo = tempo*1000;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	617b      	str	r3, [r7, #20]
	return tempo;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	b2db      	uxtb	r3, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <updateUserMsg>:
#include "time.h"
#include "stdlib.h"


unsigned char updateUserMsg(unsigned char col, unsigned char linha, unsigned char *userMessage, unsigned char* status)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60ba      	str	r2, [r7, #8]
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	4603      	mov	r3, r0
 8002a78:	73fb      	strb	r3, [r7, #15]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	73bb      	strb	r3, [r7, #14]
	if(*status == IDDLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10b      	bne.n	8002a9e <updateUserMsg+0x32>
	{
	    printDataDisplay(col,linha,userMessage);
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	7bb9      	ldrb	r1, [r7, #14]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 ff23 	bl	80038d8 <printDataDisplay>
		*status = PRINTED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
		HAL_Delay(250);
 8002a98:	20fa      	movs	r0, #250	; 0xfa
 8002a9a:	f003 f907 	bl	8005cac <HAL_Delay>
	}
}
 8002a9e:	bf00      	nop
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <readyUserInterface>:

unsigned char readyUserInterface(unsigned char* displayStatus,unsigned char* cursorPosition)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
	statusUserInterface(displayStatus);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f80c 	bl	8002ad0 <statusUserInterface>
	resetKeyPressed();
 8002ab8:	f002 f966 	bl	8004d88 <resetKeyPressed>
	resetCursorInterface(cursorPosition);
 8002abc:	6838      	ldr	r0, [r7, #0]
 8002abe:	f000 f814 	bl	8002aea <resetCursorInterface>
	eraseDataDisplay();
 8002ac2:	f000 ff1c 	bl	80038fe <eraseDataDisplay>
}
 8002ac6:	bf00      	nop
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <statusUserInterface>:

unsigned char statusUserInterface(unsigned char* displayStatus)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	*displayStatus = IDDLE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <resetCursorInterface>:
	HW_UPDATE_DATA(actualposition,linha);
	return actualposition;
}

unsigned char resetCursorInterface(unsigned char* cursorPosition)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
	cursorPosition[0] = 0;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
	cursorPosition[1] = 0;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3301      	adds	r3, #1
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
}
 8002b00:	bf00      	nop
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <exportStateMachine>:
        struct dataInsert menuInsert;
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
unsigned char exportStateMachine(struct Menu* subMenu)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08c      	sub	sp, #48	; 0x30
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuExport = subMenu;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	623b      	str	r3, [r7, #32]
    unsigned char key = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    short index = 2;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	81fb      	strh	r3, [r7, #14]
    unsigned char indexTest = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	77fb      	strb	r3, [r7, #31]
    unsigned char testSamples = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    unsigned char selectedUserTest=0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	77bb      	strb	r3, [r7, #30]
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    struct results* ptr_structExportResult;
    unsigned char dataVerify;
    unsigned char cursorPosition[2] = {0,0};
 8002b30:	2300      	movs	r3, #0
 8002b32:	81bb      	strh	r3, [r7, #12]
    unsigned char displayUpdateStatus = IDDLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	72fb      	strb	r3, [r7, #11]
    while(key != MENU)
 8002b38:	bf00      	nop
 8002b3a:	e200      	b.n	8002f3e <exportStateMachine+0x432>
    {
        switch(subMenuExport->menuState)
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	78db      	ldrb	r3, [r3, #3]
 8002b40:	2b06      	cmp	r3, #6
 8002b42:	f200 81fc 	bhi.w	8002f3e <exportStateMachine+0x432>
 8002b46:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <exportStateMachine+0x40>)
 8002b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4c:	08002b69 	.word	0x08002b69
 8002b50:	08002b79 	.word	0x08002b79
 8002b54:	08002bad 	.word	0x08002bad
 8002b58:	08002cb9 	.word	0x08002cb9
 8002b5c:	08002d6f 	.word	0x08002d6f
 8002b60:	08002c33 	.word	0x08002c33
 8002b64:	08002f09 	.word	0x08002f09
        {
            case IDDLE:
                subMenuExport->menuState = getNextSub(VERIFICA_COMM);
 8002b68:	2001      	movs	r0, #1
 8002b6a:	f001 fb61 	bl	8004230 <getNextSub>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	70da      	strb	r2, [r3, #3]
            break;
 8002b76:	e1e2      	b.n	8002f3e <exportStateMachine+0x432>

            case VERIFICA_COMM:
                //funcao para habilitar comunicacao
            	startCOMM(); //verificar se nao preciso deixar uma flag de comm no data.c para acessar o valor dela
 8002b78:	f000 feeb 	bl	8003952 <startCOMM>
            	// e comparar para verificar se a comm já está ligada antes de liga-la novamente.
                updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 8002b7c:	4bda      	ldr	r3, [pc, #872]	; (8002ee8 <exportStateMachine+0x3dc>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	f107 030b 	add.w	r3, r7, #11
 8002b84:	2100      	movs	r1, #0
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7ff ff70 	bl	8002a6c <updateUserMsg>
                subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8002b8c:	2002      	movs	r0, #2
 8002b8e:	f001 fb4f 	bl	8004230 <getNextSub>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	70da      	strb	r2, [r3, #3]
                readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002b9a:	f107 020c 	add.w	r2, r7, #12
 8002b9e:	f107 030b 	add.w	r3, r7, #11
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff7f 	bl	8002aa8 <readyUserInterface>
            break;
 8002baa:	e1c8      	b.n	8002f3e <exportStateMachine+0x432>

            case EXPORTAR_UNITARIO:
                updateUserMsg(0,0,exportunitUserMsg,&displayUpdateStatus);
 8002bac:	4bcf      	ldr	r3, [pc, #828]	; (8002eec <exportStateMachine+0x3e0>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	f107 030b 	add.w	r3, r7, #11
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7ff ff58 	bl	8002a6c <updateUserMsg>
                key = getKeyPressed();
 8002bbc:	f002 f8d8 	bl	8004d70 <getKeyPressed>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if(key == AVANCAR)
 8002bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bca:	2b41      	cmp	r3, #65	; 0x41
 8002bcc:	d111      	bne.n	8002bf2 <exportStateMachine+0xe6>
                {
                	resetKeyPressed();
 8002bce:	f002 f8db 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002bd2:	f107 020c 	add.w	r2, r7, #12
 8002bd6:	f107 030b 	add.w	r3, r7, #11
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff63 	bl	8002aa8 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_TODOS);
 8002be2:	2005      	movs	r0, #5
 8002be4:	f001 fb24 	bl	8004230 <getNextSub>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	70da      	strb	r2, [r3, #3]
 8002bf0:	e1a5      	b.n	8002f3e <exportStateMachine+0x432>
                }

                else if(key == CONFIRMAR)
 8002bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bf6:	2b43      	cmp	r3, #67	; 0x43
 8002bf8:	f040 81a1 	bne.w	8002f3e <exportStateMachine+0x432>
                {
                	resetKeyPressed();
 8002bfc:	f002 f8c4 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002c00:	f107 020c 	add.w	r2, r7, #12
 8002c04:	f107 030b 	add.w	r3, r7, #11
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff4c 	bl	8002aa8 <readyUserInterface>
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	3303      	adds	r3, #3
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 fb1d 	bl	8004254 <setSelectSub>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	705a      	strb	r2, [r3, #1]
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 8002c22:	2003      	movs	r0, #3
 8002c24:	f001 fb04 	bl	8004230 <getNextSub>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	70da      	strb	r2, [r3, #3]
                }
                break;
 8002c30:	e185      	b.n	8002f3e <exportStateMachine+0x432>

            case EXPORTAR_TODOS:
                updateUserMsg(0,0,exportallUserMsg,&displayUpdateStatus);
 8002c32:	4baf      	ldr	r3, [pc, #700]	; (8002ef0 <exportStateMachine+0x3e4>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	f107 030b 	add.w	r3, r7, #11
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7ff ff15 	bl	8002a6c <updateUserMsg>
                key = getKeyPressed();
 8002c42:	f002 f895 	bl	8004d70 <getKeyPressed>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if(key == AVANCAR)
 8002c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c50:	2b41      	cmp	r3, #65	; 0x41
 8002c52:	d111      	bne.n	8002c78 <exportStateMachine+0x16c>
                {
                	resetKeyPressed();
 8002c54:	f002 f898 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002c58:	f107 020c 	add.w	r2, r7, #12
 8002c5c:	f107 030b 	add.w	r3, r7, #11
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff ff20 	bl	8002aa8 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8002c68:	2002      	movs	r0, #2
 8002c6a:	f001 fae1 	bl	8004230 <getNextSub>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	461a      	mov	r2, r3
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	70da      	strb	r2, [r3, #3]
 8002c76:	e162      	b.n	8002f3e <exportStateMachine+0x432>
                }

                else if(key == CONFIRMAR)
 8002c78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c7c:	2b43      	cmp	r3, #67	; 0x43
 8002c7e:	f040 815e 	bne.w	8002f3e <exportStateMachine+0x432>
                {
                	resetKeyPressed();
 8002c82:	f002 f881 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002c86:	f107 020c 	add.w	r2, r7, #12
 8002c8a:	f107 030b 	add.w	r3, r7, #11
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff09 	bl	8002aa8 <readyUserInterface>
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	3303      	adds	r3, #3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 fada 	bl	8004254 <setSelectSub>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	705a      	strb	r2, [r3, #1]
                    subMenuExport->menuState = getNextSub(PROCESS_TODOS);
 8002ca8:	2006      	movs	r0, #6
 8002caa:	f001 fac1 	bl	8004230 <getNextSub>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	70da      	strb	r2, [r3, #3]
                }
                break;
 8002cb6:	e142      	b.n	8002f3e <exportStateMachine+0x432>


            case NUM_TESTE_EXPORT:
                updateUserMsg(0,0,consultTestUserMsg,&displayUpdateStatus);
 8002cb8:	4b8e      	ldr	r3, [pc, #568]	; (8002ef4 <exportStateMachine+0x3e8>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	f107 030b 	add.w	r3, r7, #11
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7ff fed2 	bl	8002a6c <updateUserMsg>
                ptr_exportTestString = getNumTestString();
 8002cc8:	f7ff fb9c 	bl	8002404 <getNumTestString>
 8002ccc:	62b8      	str	r0, [r7, #40]	; 0x28
                printDataDisplay(0,1,ptr_exportTestString);
 8002cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f000 fe00 	bl	80038d8 <printDataDisplay>
                updateDataDisplay(index,1);
 8002cd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cdc:	2101      	movs	r1, #1
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fe14 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 8002ce4:	f002 f844 	bl	8004d70 <getKeyPressed>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if(key == INSERIR)
 8002cee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cf2:	2b49      	cmp	r3, #73	; 0x49
 8002cf4:	d10e      	bne.n	8002d14 <exportStateMachine+0x208>
                {
                	resetKeyPressed();
 8002cf6:	f002 f847 	bl	8004d88 <resetKeyPressed>
                    setUserNumTest(&index);
 8002cfa:	f107 030e 	add.w	r3, r7, #14
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fd5d 	bl	80027be <setUserNumTest>
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 8002d04:	2003      	movs	r0, #3
 8002d06:	f001 fa93 	bl	8004230 <getNextSub>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	70da      	strb	r2, [r3, #3]
 8002d12:	e114      	b.n	8002f3e <exportStateMachine+0x432>
                }
                else if(key == AVANCAR)
 8002d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d18:	2b41      	cmp	r3, #65	; 0x41
 8002d1a:	d108      	bne.n	8002d2e <exportStateMachine+0x222>
                {
                	resetKeyPressed();
 8002d1c:	f002 f834 	bl	8004d88 <resetKeyPressed>
                    indexChange(&index,2);
 8002d20:	f107 030e 	add.w	r3, r7, #14
 8002d24:	2102      	movs	r1, #2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fa31 	bl	800218e <indexChange>
 8002d2c:	e107      	b.n	8002f3e <exportStateMachine+0x432>
                }
                else if(key == CONFIRMAR)
 8002d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d32:	2b43      	cmp	r3, #67	; 0x43
 8002d34:	f040 8103 	bne.w	8002f3e <exportStateMachine+0x432>
                {
                	resetKeyPressed();
 8002d38:	f002 f826 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002d3c:	f107 020c 	add.w	r2, r7, #12
 8002d40:	f107 030b 	add.w	r3, r7, #11
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff feae 	bl	8002aa8 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(PROCESS_UNITARIO);
 8002d4c:	2004      	movs	r0, #4
 8002d4e:	f001 fa6f 	bl	8004230 <getNextSub>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	70da      	strb	r2, [r3, #3]
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	3303      	adds	r3, #3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fa78 	bl	8004254 <setSelectSub>
 8002d64:	4603      	mov	r3, r0
 8002d66:	461a      	mov	r2, r3
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	705a      	strb	r2, [r3, #1]
                }

                break;
 8002d6c:	e0e7      	b.n	8002f3e <exportStateMachine+0x432>

                case PROCESS_UNITARIO:
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8002d6e:	4b62      	ldr	r3, [pc, #392]	; (8002ef8 <exportStateMachine+0x3ec>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	f107 030b 	add.w	r3, r7, #11
 8002d76:	2100      	movs	r1, #0
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7ff fe77 	bl	8002a6c <updateUserMsg>
                    selectedUserTest = stringToInt(ptr_exportTestString);
 8002d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d80:	f7ff f9ca 	bl	8002118 <stringToInt>
 8002d84:	4603      	mov	r3, r0
 8002d86:	77bb      	strb	r3, [r7, #30]
                    ptr_structExportResult = getUserResultData(selectedUserTest);
 8002d88:	7fbb      	ldrb	r3, [r7, #30]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe ffee 	bl	8001d6c <getUserResultData>
 8002d90:	6278      	str	r0, [r7, #36]	; 0x24

                   //ESSE FOR � S� PARA TESTE NO CONSOLE, AO INVES DESSE MONTE DE "PRINT", COLOCAREI FU��O PARA ENVIAR BT

                    for(testSamples=0;testSamples<(ptr_structExportResult->resultTestAcquiredSamples);testSamples++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002d98:	e093      	b.n	8002ec2 <exportStateMachine+0x3b6>
                    {
                        ptr_structExportResult = getUserResultData(selectedUserTest);
 8002d9a:	7fbb      	ldrb	r3, [r7, #30]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe ffe5 	bl	8001d6c <getUserResultData>
 8002da2:	6278      	str	r0, [r7, #36]	; 0x24
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002da4:	f107 020c 	add.w	r2, r7, #12
 8002da8:	f107 030b 	add.w	r3, r7, #11
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fe7a 	bl	8002aa8 <readyUserInterface>
                        updateUserMsg(0,0,"Amostra",&displayUpdateStatus);
 8002db4:	f107 030b 	add.w	r3, r7, #11
 8002db8:	4a50      	ldr	r2, [pc, #320]	; (8002efc <exportStateMachine+0x3f0>)
 8002dba:	2100      	movs	r1, #0
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7ff fe55 	bl	8002a6c <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002dc2:	f107 020c 	add.w	r2, r7, #12
 8002dc6:	f107 030b 	add.w	r3, r7, #11
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fe6b 	bl	8002aa8 <readyUserInterface>
                        ptr_sampleString = param_1_toString(&ptr_structExportResult->Measurement[testSamples].sampleNum);
 8002dd2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de0:	4413      	add	r3, r2
 8002de2:	3304      	adds	r3, #4
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fb45 	bl	8002474 <param_1_toString>
 8002dea:	61b8      	str	r0, [r7, #24]
                        updateUserMsg(0,0,ptr_sampleString,&displayUpdateStatus);
 8002dec:	f107 030b 	add.w	r3, r7, #11
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	2100      	movs	r1, #0
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7ff fe39 	bl	8002a6c <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002dfa:	f107 020c 	add.w	r2, r7, #12
 8002dfe:	f107 030b 	add.w	r3, r7, #11
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fe4f 	bl	8002aa8 <readyUserInterface>

                        updateUserMsg(0,0,"Tempo de Voo",&displayUpdateStatus);
 8002e0a:	f107 030b 	add.w	r3, r7, #11
 8002e0e:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <exportStateMachine+0x3f4>)
 8002e10:	2100      	movs	r1, #0
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7ff fe2a 	bl	8002a6c <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002e18:	f107 020c 	add.w	r2, r7, #12
 8002e1c:	f107 030b 	add.w	r3, r7, #11
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fe40 	bl	8002aa8 <readyUserInterface>
                        ptr_vooTimeString = param_2_toString(&ptr_structExportResult->Measurement[testSamples].uiVooTime);
 8002e28:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e36:	4413      	add	r3, r2
 8002e38:	3308      	adds	r3, #8
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fb2e 	bl	800249c <param_2_toString>
 8002e40:	6178      	str	r0, [r7, #20]
                        updateUserMsg(0,0,ptr_vooTimeString,&displayUpdateStatus);
 8002e42:	f107 030b 	add.w	r3, r7, #11
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	2100      	movs	r1, #0
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7ff fe0e 	bl	8002a6c <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002e50:	f107 020c 	add.w	r2, r7, #12
 8002e54:	f107 030b 	add.w	r3, r7, #11
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fe24 	bl	8002aa8 <readyUserInterface>

                        updateUserMsg(0,0,"Altura do salto",&displayUpdateStatus);
 8002e60:	f107 030b 	add.w	r3, r7, #11
 8002e64:	4a27      	ldr	r2, [pc, #156]	; (8002f04 <exportStateMachine+0x3f8>)
 8002e66:	2100      	movs	r1, #0
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7ff fdff 	bl	8002a6c <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002e6e:	f107 020c 	add.w	r2, r7, #12
 8002e72:	f107 030b 	add.w	r3, r7, #11
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fe15 	bl	8002aa8 <readyUserInterface>
                        ptr_alturaString = param_3_toString(&ptr_structExportResult->Measurement[testSamples].uiSoloTime);
 8002e7e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8e:	4413      	add	r3, r2
 8002e90:	3304      	adds	r3, #4
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fb16 	bl	80024c4 <param_3_toString>
 8002e98:	6138      	str	r0, [r7, #16]
                        updateUserMsg(0,0,ptr_alturaString,&displayUpdateStatus);
 8002e9a:	f107 030b 	add.w	r3, r7, #11
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7ff fde2 	bl	8002a6c <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002ea8:	f107 020c 	add.w	r2, r7, #12
 8002eac:	f107 030b 	add.w	r3, r7, #11
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fdf8 	bl	8002aa8 <readyUserInterface>
                    for(testSamples=0;testSamples<(ptr_structExportResult->resultTestAcquiredSamples);testSamples++)
 8002eb8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	785b      	ldrb	r3, [r3, #1]
 8002ec6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	f4ff af65 	bcc.w	8002d9a <exportStateMachine+0x28e>
                    }
//                    transmissionCOMM();
                    //Acessa os dados referente ao Teste e envia apenas o selecionado por BT
                subMenuExport->menuState = getNextSub(IDDLE);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f001 f9ad 	bl	8004230 <getNextSub>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	70da      	strb	r2, [r3, #3]
                key = MENU;
 8002ede:	234d      	movs	r3, #77	; 0x4d
 8002ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 8002ee4:	e02b      	b.n	8002f3e <exportStateMachine+0x432>
 8002ee6:	bf00      	nop
 8002ee8:	2000002c 	.word	0x2000002c
 8002eec:	200000a0 	.word	0x200000a0
 8002ef0:	200000a4 	.word	0x200000a4
 8002ef4:	2000005c 	.word	0x2000005c
 8002ef8:	20000064 	.word	0x20000064
 8002efc:	0800b8f4 	.word	0x0800b8f4
 8002f00:	0800b8fc 	.word	0x0800b8fc
 8002f04:	0800b90c 	.word	0x0800b90c

                case PROCESS_TODOS: //
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <exportStateMachine+0x448>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	f107 030b 	add.w	r3, r7, #11
 8002f10:	2100      	movs	r1, #0
 8002f12:	2000      	movs	r0, #0
 8002f14:	f7ff fdaa 	bl	8002a6c <updateUserMsg>
//                            printf("Teste %d existe\n",i);
//                       }
//                       else printf("Teste %d nao existe\n",i);
//
//                    }
                    subMenuExport->menuState = getNextSub(IDDLE);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f001 f989 	bl	8004230 <getNextSub>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	461a      	mov	r2, r3
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	70da      	strb	r2, [r3, #3]
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002f26:	f107 020c 	add.w	r2, r7, #12
 8002f2a:	f107 030b 	add.w	r3, r7, #11
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fdb9 	bl	8002aa8 <readyUserInterface>
                    key = MENU;
 8002f36:	234d      	movs	r3, #77	; 0x4d
 8002f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    break;
 8002f3c:	bf00      	nop
    while(key != MENU)
 8002f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f42:	2b4d      	cmp	r3, #77	; 0x4d
 8002f44:	f47f adfa 	bne.w	8002b3c <exportStateMachine+0x30>
        }
    }
}
 8002f48:	bf00      	nop
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3730      	adds	r7, #48	; 0x30
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000064 	.word	0x20000064

08002f58 <initStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char initStateMachine(struct Menu* subMenu)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b0ea      	sub	sp, #424	; 0x1a8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f62:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002f66:	6018      	str	r0, [r3, #0]
    struct Menu* subMenuIniciar = subMenu;
 8002f68:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f6c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 8002f76:	f7fe fe97 	bl	8001ca8 <getUserConfigStruct>
 8002f7a:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
    unsigned char key = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
    short insertColumn = 7;
 8002f84:	2307      	movs	r3, #7
 8002f86:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a

    struct tm myTime;
    struct tm* userTimeStruct = &myTime;
 8002f8a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002f8e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    unsigned char userTimeString[9];
    unsigned char procTimeString[9];
    unsigned char* ptr_massString;
    unsigned char* ptr_overMassString;

    unsigned char displayUpdateStatus = IDDLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
    unsigned char cursorPosition[2] = {0,0};
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
    unsigned char* ptr_Sample;
    unsigned char* ptr_ulReadingTime;
    unsigned char* ptr_uiVooTime;
    unsigned char* ptr_ucAltDistance;
    struct results result[TEST_SIZE]; //verificar se vou usar o endere�o de data.c assim como fiz com a estrutura de configuracao
    unsigned char i = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
    unsigned char sampleCount=0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
    unsigned char indexTest;
    unsigned char readingStatus = IDDLE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5

    //
    resetResultStruct(&result[0]);
 8002fb0:	f107 0308 	add.w	r3, r7, #8
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fe ff77 	bl	8001ea8 <resetResultStruct>
    resetResultStruct(&result[1]);
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	3340      	adds	r3, #64	; 0x40
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe ff71 	bl	8001ea8 <resetResultStruct>
    resetResultStruct(&result[2]);
 8002fc6:	f107 0308 	add.w	r3, r7, #8
 8002fca:	3380      	adds	r3, #128	; 0x80
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe ff6b 	bl	8001ea8 <resetResultStruct>
    resetResultStruct(&result[3]);
 8002fd2:	f107 0308 	add.w	r3, r7, #8
 8002fd6:	33c0      	adds	r3, #192	; 0xc0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe ff65 	bl	8001ea8 <resetResultStruct>
    resetResultStruct(&result[4]);
 8002fde:	f107 0308 	add.w	r3, r7, #8
 8002fe2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe ff5e 	bl	8001ea8 <resetResultStruct>


    unsigned char startTapete,readingState;


    while(key != MENU)
 8002fec:	bf00      	nop
 8002fee:	f000 bc41 	b.w	8003874 <initStateMachine+0x91c>
    {
        switch(subMenuIniciar->menuState)
 8002ff2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ff6:	78db      	ldrb	r3, [r3, #3]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	f200 843b 	bhi.w	8003874 <initStateMachine+0x91c>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <initStateMachine+0xac>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003039 	.word	0x08003039
 8003008:	0800304d 	.word	0x0800304d
 800300c:	080030e7 	.word	0x080030e7
 8003010:	080031a1 	.word	0x080031a1
 8003014:	0800329f 	.word	0x0800329f
 8003018:	0800337b 	.word	0x0800337b
 800301c:	08003477 	.word	0x08003477
 8003020:	08003517 	.word	0x08003517
 8003024:	08003595 	.word	0x08003595
 8003028:	08003601 	.word	0x08003601
 800302c:	0800368f 	.word	0x0800368f
 8003030:	080036bf 	.word	0x080036bf
 8003034:	0800378f 	.word	0x0800378f
        {
            case IDDLE:
                subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8003038:	2001      	movs	r0, #1
 800303a:	f001 f8f9 	bl	8004230 <getNextSub>
 800303e:	4603      	mov	r3, r0
 8003040:	461a      	mov	r2, r3
 8003042:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003046:	70da      	strb	r2, [r3, #3]
                //RESET
            break;
 8003048:	f000 bc14 	b.w	8003874 <initStateMachine+0x91c>

            case COMM_OFF:
                updateUserMsg(0,0,noTransmissionMsg,&displayUpdateStatus);
 800304c:	4be4      	ldr	r3, [pc, #912]	; (80033e0 <initStateMachine+0x488>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003054:	2100      	movs	r1, #0
 8003056:	2000      	movs	r0, #0
 8003058:	f7ff fd08 	bl	8002a6c <updateUserMsg>
                key = getKeyPressed();
 800305c:	f001 fe88 	bl	8004d70 <getKeyPressed>
 8003060:	4603      	mov	r3, r0
 8003062:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                if(key == AVANCAR)
 8003066:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800306a:	2b41      	cmp	r3, #65	; 0x41
 800306c:	d112      	bne.n	8003094 <initStateMachine+0x13c>
                {
                	resetKeyPressed();
 800306e:	f001 fe8b 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003072:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003076:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fd13 	bl	8002aa8 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(COMM_ON);
 8003082:	2002      	movs	r0, #2
 8003084:	f001 f8d4 	bl	8004230 <getNextSub>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003090:	70da      	strb	r2, [r3, #3]
 8003092:	e3ef      	b.n	8003874 <initStateMachine+0x91c>
                }
                else if(key == CONFIRMAR)
 8003094:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003098:	2b43      	cmp	r3, #67	; 0x43
 800309a:	f040 83eb 	bne.w	8003874 <initStateMachine+0x91c>
                {
                	resetKeyPressed();
 800309e:	f001 fe73 	bl	8004d88 <resetKeyPressed>
                    stopCOMM();
 80030a2:	f000 fc65 	bl	8003970 <stopCOMM>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80030a6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80030aa:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fcf9 	bl	8002aa8 <readyUserInterface>
                    ptr_userConfiguration->userCommConfig = COMM_OFF;
 80030b6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80030ba:	2201      	movs	r2, #1
 80030bc:	74da      	strb	r2, [r3, #19]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80030be:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80030c2:	3303      	adds	r3, #3
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 f8c5 	bl	8004254 <setSelectSub>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80030d2:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 80030d4:	2003      	movs	r0, #3
 80030d6:	f001 f8ab 	bl	8004230 <getNextSub>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80030e2:	70da      	strb	r2, [r3, #3]
                }
            break;
 80030e4:	e3c6      	b.n	8003874 <initStateMachine+0x91c>

            case COMM_ON:
				updateUserMsg(0,0,yesTransmissionMsg,&displayUpdateStatus);
 80030e6:	4bbf      	ldr	r3, [pc, #764]	; (80033e4 <initStateMachine+0x48c>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80030ee:	2100      	movs	r1, #0
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7ff fcbb 	bl	8002a6c <updateUserMsg>
				key = getKeyPressed();
 80030f6:	f001 fe3b 	bl	8004d70 <getKeyPressed>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                if(key == AVANCAR)
 8003100:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003104:	2b41      	cmp	r3, #65	; 0x41
 8003106:	d112      	bne.n	800312e <initStateMachine+0x1d6>
				{
                	resetKeyPressed();
 8003108:	f001 fe3e 	bl	8004d88 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 800310c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003110:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fcc6 	bl	8002aa8 <readyUserInterface>
					subMenuIniciar->menuState = getNextSub(COMM_OFF);
 800311c:	2001      	movs	r0, #1
 800311e:	f001 f887 	bl	8004230 <getNextSub>
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800312a:	70da      	strb	r2, [r3, #3]
 800312c:	e3a2      	b.n	8003874 <initStateMachine+0x91c>
				}
                else if(key == CONFIRMAR)
 800312e:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003132:	2b43      	cmp	r3, #67	; 0x43
 8003134:	f040 839e 	bne.w	8003874 <initStateMachine+0x91c>
                {
                	resetKeyPressed();
 8003138:	f001 fe26 	bl	8004d88 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 800313c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003140:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fcae 	bl	8002aa8 <readyUserInterface>
                    startCOMM();
 800314c:	f000 fc01 	bl	8003952 <startCOMM>
                	updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 8003150:	4ba5      	ldr	r3, [pc, #660]	; (80033e8 <initStateMachine+0x490>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003158:	2100      	movs	r1, #0
 800315a:	2000      	movs	r0, #0
 800315c:	f7ff fc86 	bl	8002a6c <updateUserMsg>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003160:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003164:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fc9c 	bl	8002aa8 <readyUserInterface>
                     ptr_userConfiguration->userCommConfig = COMM_ON;
 8003170:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003174:	2202      	movs	r2, #2
 8003176:	74da      	strb	r2, [r3, #19]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003178:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800317c:	3303      	adds	r3, #3
 800317e:	4618      	mov	r0, r3
 8003180:	f001 f868 	bl	8004254 <setSelectSub>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800318c:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 800318e:	2003      	movs	r0, #3
 8003190:	f001 f84e 	bl	8004230 <getNextSub>
 8003194:	4603      	mov	r3, r0
 8003196:	461a      	mov	r2, r3
 8003198:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800319c:	70da      	strb	r2, [r3, #3]
                }
                break;
 800319e:	e369      	b.n	8003874 <initStateMachine+0x91c>

            case TEMPO_READ:
                updateUserMsg(0,0,timeUserMsg,&displayUpdateStatus);
 80031a0:	4b92      	ldr	r3, [pc, #584]	; (80033ec <initStateMachine+0x494>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80031a8:	2100      	movs	r1, #0
 80031aa:	2000      	movs	r0, #0
 80031ac:	f7ff fc5e 	bl	8002a6c <updateUserMsg>
                userTimeStruct = getTimeStruct();
 80031b0:	f7fe fcf8 	bl	8001ba4 <getTimeStruct>
 80031b4:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
                strftime(userTimeString, sizeof(userTimeString), "%H:%M:%S", userTimeStruct);
 80031b8:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80031bc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80031c0:	4a8b      	ldr	r2, [pc, #556]	; (80033f0 <initStateMachine+0x498>)
 80031c2:	2109      	movs	r1, #9
 80031c4:	f006 fe2a 	bl	8009e1c <strftime>
                printDataDisplay(0,1,userTimeString);
 80031c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80031cc:	461a      	mov	r2, r3
 80031ce:	2101      	movs	r1, #1
 80031d0:	2000      	movs	r0, #0
 80031d2:	f000 fb81 	bl	80038d8 <printDataDisplay>
                updateDataDisplay(insertColumn,1);
 80031d6:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	; 0x18a
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2101      	movs	r1, #1
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fb94 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 80031e4:	f001 fdc4 	bl	8004d70 <getKeyPressed>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == INSERIR)
 80031ee:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80031f2:	2b49      	cmp	r3, #73	; 0x49
 80031f4:	d10f      	bne.n	8003216 <initStateMachine+0x2be>
                {
                	resetKeyPressed();
 80031f6:	f001 fdc7 	bl	8004d88 <resetKeyPressed>
                    setUserTime(&insertColumn);
 80031fa:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fb62 	bl	80028c8 <setUserTime>
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 8003204:	2003      	movs	r0, #3
 8003206:	f001 f813 	bl	8004230 <getNextSub>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003212:	70da      	strb	r2, [r3, #3]
 8003214:	e32e      	b.n	8003874 <initStateMachine+0x91c>
                }
                else if (key == AVANCAR)
 8003216:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800321a:	2b41      	cmp	r3, #65	; 0x41
 800321c:	d108      	bne.n	8003230 <initStateMachine+0x2d8>
                {
                	resetKeyPressed();
 800321e:	f001 fdb3 	bl	8004d88 <resetKeyPressed>
                    indexColumn(&insertColumn,7);
 8003222:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 8003226:	2107      	movs	r1, #7
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe ff0f 	bl	800204c <indexColumn>
 800322e:	e321      	b.n	8003874 <initStateMachine+0x91c>
                }
                else if(key == CONFIRMAR)
 8003230:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003234:	2b43      	cmp	r3, #67	; 0x43
 8003236:	f040 831d 	bne.w	8003874 <initStateMachine+0x91c>
                {
                	resetKeyPressed();
 800323a:	f001 fda5 	bl	8004d88 <resetKeyPressed>
                	insertColumn = 4; //colocar um define talvez -> definicao de caracteres no display massa e overmass
 800323e:	2304      	movs	r3, #4
 8003240:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003244:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003248:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fc2a 	bl	8002aa8 <readyUserInterface>
                    //COLOCAR UMA FUNCAO PARA TRANSFORMAR O TEMPO CAPTURADO EM ms
                    strftime(procTimeString, sizeof(procTimeString), "%H%M%S", userTimeStruct);
 8003254:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8003258:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800325c:	4a65      	ldr	r2, [pc, #404]	; (80033f4 <initStateMachine+0x49c>)
 800325e:	2109      	movs	r1, #9
 8003260:	f006 fddc 	bl	8009e1c <strftime>
					ptr_userConfiguration->userTime = milisecondsTime(userTimeStruct);
 8003264:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8003268:	f7fe ff2b 	bl	80020c2 <milisecondsTime>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003274:	605a      	str	r2, [r3, #4]
//                    ptr_userConfiguration->userTime = stringToLong(procTimeString);
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 8003276:	2004      	movs	r0, #4
 8003278:	f000 ffda 	bl	8004230 <getNextSub>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003284:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003286:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800328a:	3303      	adds	r3, #3
 800328c:	4618      	mov	r0, r3
 800328e:	f000 ffe1 	bl	8004254 <setSelectSub>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800329a:	705a      	strb	r2, [r3, #1]
                }
                break;
 800329c:	e2ea      	b.n	8003874 <initStateMachine+0x91c>

            case MASSA_READ:
                 updateUserMsg(0,0,massUserMsg,&displayUpdateStatus);
 800329e:	4b56      	ldr	r3, [pc, #344]	; (80033f8 <initStateMachine+0x4a0>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80032a6:	2100      	movs	r1, #0
 80032a8:	2000      	movs	r0, #0
 80032aa:	f7ff fbdf 	bl	8002a6c <updateUserMsg>
                 ptr_massString = getMassString();
 80032ae:	f7ff f85d 	bl	800236c <getMassString>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
                 printDataDisplay(0,1,ptr_massString);
 80032b8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80032bc:	2101      	movs	r1, #1
 80032be:	2000      	movs	r0, #0
 80032c0:	f000 fb0a 	bl	80038d8 <printDataDisplay>
                 updateDataDisplay(insertColumn,1);
 80032c4:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	; 0x18a
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2101      	movs	r1, #1
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fb1d 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 80032d2:	f001 fd4d 	bl	8004d70 <getKeyPressed>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                if(key == INSERIR)
 80032dc:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80032e0:	2b49      	cmp	r3, #73	; 0x49
 80032e2:	d10f      	bne.n	8003304 <initStateMachine+0x3ac>
                {
                	resetKeyPressed();
 80032e4:	f001 fd50 	bl	8004d88 <resetKeyPressed>
                    setUserMass(&insertColumn); //criar variavel adicional para separar insertcolumn
 80032e8:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fa1e 	bl	800272e <setUserMass>
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 80032f2:	2004      	movs	r0, #4
 80032f4:	f000 ff9c 	bl	8004230 <getNextSub>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003300:	70da      	strb	r2, [r3, #3]
 8003302:	e2b7      	b.n	8003874 <initStateMachine+0x91c>
                }
                else if(key == AVANCAR)
 8003304:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003308:	2b41      	cmp	r3, #65	; 0x41
 800330a:	d107      	bne.n	800331c <initStateMachine+0x3c4>
                {
                	resetKeyPressed();
 800330c:	f001 fd3c 	bl	8004d88 <resetKeyPressed>
                    indexMass(&insertColumn);
 8003310:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe ff11 	bl	800213c <indexMass>
 800331a:	e2ab      	b.n	8003874 <initStateMachine+0x91c>
                }
                else if(key == CONFIRMAR)
 800331c:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003320:	2b43      	cmp	r3, #67	; 0x43
 8003322:	f040 82a7 	bne.w	8003874 <initStateMachine+0x91c>
                {
                	resetKeyPressed();
 8003326:	f001 fd2f 	bl	8004d88 <resetKeyPressed>
                	insertColumn = 4;
 800332a:	2304      	movs	r3, #4
 800332c:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003330:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003334:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fbb4 	bl	8002aa8 <readyUserInterface>
                    ptr_userConfiguration->userMass= stringToInt(ptr_massString);
 8003340:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8003344:	f7fe fee8 	bl	8002118 <stringToInt>
 8003348:	4603      	mov	r3, r0
 800334a:	b2da      	uxtb	r2, r3
 800334c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003350:	721a      	strb	r2, [r3, #8]
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 8003352:	2005      	movs	r0, #5
 8003354:	f000 ff6c 	bl	8004230 <getNextSub>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003360:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003362:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003366:	3303      	adds	r3, #3
 8003368:	4618      	mov	r0, r3
 800336a:	f000 ff73 	bl	8004254 <setSelectSub>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003376:	705a      	strb	r2, [r3, #1]
                }
                break;
 8003378:	e27c      	b.n	8003874 <initStateMachine+0x91c>

            case SOBREC_READ:
                updateUserMsg(0,0,overmassUserMsg,&displayUpdateStatus);
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <initStateMachine+0x4a4>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003382:	2100      	movs	r1, #0
 8003384:	2000      	movs	r0, #0
 8003386:	f7ff fb71 	bl	8002a6c <updateUserMsg>
                ptr_overMassString = getOverMassString();
 800338a:	f7ff f815 	bl	80023b8 <getOverMassString>
 800338e:	4603      	mov	r3, r0
 8003390:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
                printDataDisplay(0,1,ptr_overMassString);
 8003394:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8003398:	2101      	movs	r1, #1
 800339a:	2000      	movs	r0, #0
 800339c:	f000 fa9c 	bl	80038d8 <printDataDisplay>
                updateDataDisplay(insertColumn,1);
 80033a0:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	; 0x18a
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 faaf 	bl	800390c <updateDataDisplay>
                key = getKeyPressed();
 80033ae:	f001 fcdf 	bl	8004d70 <getKeyPressed>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == INSERIR)
 80033b8:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80033bc:	2b49      	cmp	r3, #73	; 0x49
 80033be:	d11f      	bne.n	8003400 <initStateMachine+0x4a8>
                {
                	resetKeyPressed();
 80033c0:	f001 fce2 	bl	8004d88 <resetKeyPressed>
                    setUserOverMass(&insertColumn);
 80033c4:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff f9d4 	bl	8002776 <setUserOverMass>
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 80033ce:	2005      	movs	r0, #5
 80033d0:	f000 ff2e 	bl	8004230 <getNextSub>
 80033d4:	4603      	mov	r3, r0
 80033d6:	461a      	mov	r2, r3
 80033d8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80033dc:	70da      	strb	r2, [r3, #3]
 80033de:	e249      	b.n	8003874 <initStateMachine+0x91c>
 80033e0:	20000024 	.word	0x20000024
 80033e4:	20000028 	.word	0x20000028
 80033e8:	2000002c 	.word	0x2000002c
 80033ec:	20000030 	.word	0x20000030
 80033f0:	0800b91c 	.word	0x0800b91c
 80033f4:	0800b928 	.word	0x0800b928
 80033f8:	20000034 	.word	0x20000034
 80033fc:	20000038 	.word	0x20000038
                }
                else if(key == AVANCAR)
 8003400:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003404:	2b41      	cmp	r3, #65	; 0x41
 8003406:	d107      	bne.n	8003418 <initStateMachine+0x4c0>
                {
                	resetKeyPressed();
 8003408:	f001 fcbe 	bl	8004d88 <resetKeyPressed>
                    indexMass(&insertColumn);
 800340c:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe fe93 	bl	800213c <indexMass>
 8003416:	e22d      	b.n	8003874 <initStateMachine+0x91c>
                }
                else if(key == CONFIRMAR)
 8003418:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800341c:	2b43      	cmp	r3, #67	; 0x43
 800341e:	f040 8229 	bne.w	8003874 <initStateMachine+0x91c>
                {
                	resetKeyPressed();
 8003422:	f001 fcb1 	bl	8004d88 <resetKeyPressed>
                	insertColumn = 7; //definicao de caracteres para TIME
 8003426:	2307      	movs	r3, #7
 8003428:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800342c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003430:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fb36 	bl	8002aa8 <readyUserInterface>
                    ptr_userConfiguration->userOverMass= stringToInt(ptr_overMassString);
 800343c:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8003440:	f7fe fe6a 	bl	8002118 <stringToInt>
 8003444:	4603      	mov	r3, r0
 8003446:	b2da      	uxtb	r2, r3
 8003448:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800344c:	725a      	strb	r2, [r3, #9]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 800344e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003452:	3303      	adds	r3, #3
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fefd 	bl	8004254 <setSelectSub>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003462:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(START);
 8003464:	2006      	movs	r0, #6
 8003466:	f000 fee3 	bl	8004230 <getNextSub>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003472:	70da      	strb	r2, [r3, #3]
                }
                break;
 8003474:	e1fe      	b.n	8003874 <initStateMachine+0x91c>

            case START:
                setInsertData(ptr_userConfiguration);
 8003476:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800347a:	f000 feff 	bl	800427c <setInsertData>
                updateUserMsg(0,0,startreadUserMsg,&displayUpdateStatus);
 800347e:	4bd6      	ldr	r3, [pc, #856]	; (80037d8 <initStateMachine+0x880>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003486:	2100      	movs	r1, #0
 8003488:	2000      	movs	r0, #0
 800348a:	f7ff faef 	bl	8002a6c <updateUserMsg>
                printDataDisplay(0,1,userTimeString);
 800348e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003492:	461a      	mov	r2, r3
 8003494:	2101      	movs	r1, #1
 8003496:	2000      	movs	r0, #0
 8003498:	f000 fa1e 	bl	80038d8 <printDataDisplay>
                key = getKeyPressed();
 800349c:	f001 fc68 	bl	8004d70 <getKeyPressed>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == CONFIRMAR)
 80034a6:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80034aa:	2b43      	cmp	r3, #67	; 0x43
 80034ac:	f040 81e2 	bne.w	8003874 <initStateMachine+0x91c>
                {
                	resetKeyPressed();
 80034b0:	f001 fc6a 	bl	8004d88 <resetKeyPressed>
                	startTapete = getUserSelectTapete();
 80034b4:	f7fe fb6c 	bl	8001b90 <getUserSelectTapete>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
                	if(startTapete == TRUE) readingState = DENTRO;
 80034be:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d103      	bne.n	80034ce <initStateMachine+0x576>
 80034c6:	2331      	movs	r3, #49	; 0x31
 80034c8:	f887 31a4 	strb.w	r3, [r7, #420]	; 0x1a4
 80034cc:	e002      	b.n	80034d4 <initStateMachine+0x57c>
                	else readingState = FORA;
 80034ce:	2330      	movs	r3, #48	; 0x30
 80034d0:	f887 31a4 	strb.w	r3, [r7, #420]	; 0x1a4

                    indexTest = getResultTestNumber();
 80034d4:	f7fe fc5c 	bl	8001d90 <getResultTestNumber>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80034de:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80034e2:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fadd 	bl	8002aa8 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(READING);
 80034ee:	2007      	movs	r0, #7
 80034f0:	f000 fe9e 	bl	8004230 <getNextSub>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80034fc:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80034fe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003502:	3303      	adds	r3, #3
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fea5 	bl	8004254 <setSelectSub>
 800350a:	4603      	mov	r3, r0
 800350c:	461a      	mov	r2, r3
 800350e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003512:	705a      	strb	r2, [r3, #1]
                }
            break;
 8003514:	e1ae      	b.n	8003874 <initStateMachine+0x91c>

            case READING:
            	 updateUserMsg(0,0,"READING...",&displayUpdateStatus);
 8003516:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800351a:	4ab0      	ldr	r2, [pc, #704]	; (80037dc <initStateMachine+0x884>)
 800351c:	2100      	movs	r1, #0
 800351e:	2000      	movs	r0, #0
 8003520:	f7ff faa4 	bl	8002a6c <updateUserMsg>
            	 startTM2();
 8003524:	f000 f9bc 	bl	80038a0 <startTM2>
				 startTM3();
 8003528:	f000 f9c8 	bl	80038bc <startTM3>

				 switch(readingState)
 800352c:	f897 31a4 	ldrb.w	r3, [r7, #420]	; 0x1a4
 8003530:	2b30      	cmp	r3, #48	; 0x30
 8003532:	d002      	beq.n	800353a <initStateMachine+0x5e2>
 8003534:	2b31      	cmp	r3, #49	; 0x31
 8003536:	d006      	beq.n	8003546 <initStateMachine+0x5ee>
 8003538:	e00b      	b.n	8003552 <initStateMachine+0x5fa>
				 {
					 case FORA:
						 readingStatus = startReadingOutsideSensor();
 800353a:	f000 fd6d 	bl	8004018 <startReadingOutsideSensor>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5
					 break;
 8003544:	e005      	b.n	8003552 <initStateMachine+0x5fa>
					 case DENTRO:
						 readingStatus = startReadingInsideSensor();
 8003546:	f000 fe6b 	bl	8004220 <startReadingInsideSensor>
 800354a:	4603      	mov	r3, r0
 800354c:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5
					 break;
 8003550:	bf00      	nop
				 }

				 key = getKeyPressed();
 8003552:	f001 fc0d 	bl	8004d70 <getKeyPressed>
 8003556:	4603      	mov	r3, r0
 8003558:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				 3 - PRESSIONAR O BOTAO PARAR

				 */


				if(key == PARAR || readingStatus == TIMEOUT)
 800355c:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003560:	2b50      	cmp	r3, #80	; 0x50
 8003562:	d004      	beq.n	800356e <initStateMachine+0x616>
 8003564:	f897 31a5 	ldrb.w	r3, [r7, #421]	; 0x1a5
 8003568:	2b35      	cmp	r3, #53	; 0x35
 800356a:	f040 8183 	bne.w	8003874 <initStateMachine+0x91c>
				{
					resetKeyPressed();
 800356e:	f001 fc0b 	bl	8004d88 <resetKeyPressed>
					readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003572:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003576:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fa93 	bl	8002aa8 <readyUserInterface>
					subMenuIniciar->menuState = getNextSub(STOP);
 8003582:	2008      	movs	r0, #8
 8003584:	f000 fe54 	bl	8004230 <getNextSub>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003590:	70da      	strb	r2, [r3, #3]
				}
            break;
 8003592:	e16f      	b.n	8003874 <initStateMachine+0x91c>

            case STOP:
                updateUserMsg(0,0,stopreadUserMsg,&displayUpdateStatus);
 8003594:	4b92      	ldr	r3, [pc, #584]	; (80037e0 <initStateMachine+0x888>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800359c:	2100      	movs	r1, #0
 800359e:	2000      	movs	r0, #0
 80035a0:	f7ff fa64 	bl	8002a6c <updateUserMsg>
                key = getKeyPressed();
 80035a4:	f001 fbe4 	bl	8004d70 <getKeyPressed>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == CONFIRMAR)
 80035ae:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80035b2:	2b43      	cmp	r3, #67	; 0x43
 80035b4:	f040 815e 	bne.w	8003874 <initStateMachine+0x91c>
                {
//                	transmissionCOMM(&timer3Data);
//                	transmissionCOMM();
                	resetKeyPressed();
 80035b8:	f001 fbe6 	bl	8004d88 <resetKeyPressed>
                    stopTM2();
 80035bc:	f000 f977 	bl	80038ae <stopTM2>
                    stopTM3();
 80035c0:	f000 f983 	bl	80038ca <stopTM3>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80035c4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80035c8:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fa6a 	bl	8002aa8 <readyUserInterface>
                    //PARA LEITURA, DESLIGA TIMER, ENCODER, O QUE FOR I0_INTERFACE
//                    setUserResultData(&result[indexTest],indexTest,sampleCount);
                    setResultTestNumber();
 80035d4:	f7fe fbe6 	bl	8001da4 <setResultTestNumber>
                    subMenuIniciar->menuState = getNextSub(DISP_RESULTS);
 80035d8:	2009      	movs	r0, #9
 80035da:	f000 fe29 	bl	8004230 <getNextSub>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80035e6:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80035e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80035ec:	3303      	adds	r3, #3
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fe30 	bl	8004254 <setSelectSub>
 80035f4:	4603      	mov	r3, r0
 80035f6:	461a      	mov	r2, r3
 80035f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80035fc:	705a      	strb	r2, [r3, #1]

                }
                break;
 80035fe:	e139      	b.n	8003874 <initStateMachine+0x91c>

            case DISP_RESULTS:
                updateUserMsg(0,0,resultsUserMsg,&displayUpdateStatus);
 8003600:	4b78      	ldr	r3, [pc, #480]	; (80037e4 <initStateMachine+0x88c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003608:	2100      	movs	r1, #0
 800360a:	2000      	movs	r0, #0
 800360c:	f7ff fa2e 	bl	8002a6c <updateUserMsg>
                key = getKeyPressed();
 8003610:	f001 fbae 	bl	8004d70 <getKeyPressed>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == PARAR)
 800361a:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800361e:	2b50      	cmp	r3, #80	; 0x50
 8003620:	d112      	bne.n	8003648 <initStateMachine+0x6f0>
                {
                	resetKeyPressed();
 8003622:	f001 fbb1 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003626:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800362a:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fa39 	bl	8002aa8 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8003636:	200b      	movs	r0, #11
 8003638:	f000 fdfa 	bl	8004230 <getNextSub>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003644:	70da      	strb	r2, [r3, #3]
 8003646:	e115      	b.n	8003874 <initStateMachine+0x91c>
                }
                else if(key == CONFIRMAR)
 8003648:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800364c:	2b43      	cmp	r3, #67	; 0x43
 800364e:	f040 8111 	bne.w	8003874 <initStateMachine+0x91c>
                {
                	resetKeyPressed();
 8003652:	f001 fb99 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003656:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800365a:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fa21 	bl	8002aa8 <readyUserInterface>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003666:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800366a:	3303      	adds	r3, #3
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fdf1 	bl	8004254 <setSelectSub>
 8003672:	4603      	mov	r3, r0
 8003674:	461a      	mov	r2, r3
 8003676:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800367a:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(RESULTS);
 800367c:	200a      	movs	r0, #10
 800367e:	f000 fdd7 	bl	8004230 <getNextSub>
 8003682:	4603      	mov	r3, r0
 8003684:	461a      	mov	r2, r3
 8003686:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800368a:	70da      	strb	r2, [r3, #3]
                }
            break;
 800368c:	e0f2      	b.n	8003874 <initStateMachine+0x91c>
//                        i=0;
//                    }
//                    //
//                    subMenuIniciar->menuState = getNextSub(RESULTS);
//                }
                if(key == PARAR)
 800368e:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003692:	2b50      	cmp	r3, #80	; 0x50
 8003694:	f040 80ee 	bne.w	8003874 <initStateMachine+0x91c>
                {
                	resetKeyPressed();
 8003698:	f001 fb76 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800369c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80036a0:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80036a4:	4611      	mov	r1, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff f9fe 	bl	8002aa8 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 80036ac:	200b      	movs	r0, #11
 80036ae:	f000 fdbf 	bl	8004230 <getNextSub>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80036ba:	70da      	strb	r2, [r3, #3]
                }

            break;
 80036bc:	e0da      	b.n	8003874 <initStateMachine+0x91c>

            case SAVE_DATA:
                updateUserMsg(0,0,saveUserMsg,&displayUpdateStatus);
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <initStateMachine+0x890>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80036c6:	2100      	movs	r1, #0
 80036c8:	2000      	movs	r0, #0
 80036ca:	f7ff f9cf 	bl	8002a6c <updateUserMsg>
                key = getKeyPressed();
 80036ce:	f001 fb4f 	bl	8004d70 <getKeyPressed>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == AVANCAR)
 80036d8:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80036dc:	2b41      	cmp	r3, #65	; 0x41
 80036de:	d11a      	bne.n	8003716 <initStateMachine+0x7be>
                {
                	resetKeyPressed();
 80036e0:	f001 fb52 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80036e4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80036e8:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff f9da 	bl	8002aa8 <readyUserInterface>
                    updateUserMsg(0,0,cancelUserMsg,&displayUpdateStatus);
 80036f4:	4b3d      	ldr	r3, [pc, #244]	; (80037ec <initStateMachine+0x894>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80036fc:	2100      	movs	r1, #0
 80036fe:	2000      	movs	r0, #0
 8003700:	f7ff f9b4 	bl	8002a6c <updateUserMsg>
                    subMenuIniciar->menuState = getNextSub(CANCEL_SAVE);
 8003704:	200c      	movs	r0, #12
 8003706:	f000 fd93 	bl	8004230 <getNextSub>
 800370a:	4603      	mov	r3, r0
 800370c:	461a      	mov	r2, r3
 800370e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003712:	70da      	strb	r2, [r3, #3]
 8003714:	e0ae      	b.n	8003874 <initStateMachine+0x91c>
                }
                else if(key == CONFIRMAR)
 8003716:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800371a:	2b43      	cmp	r3, #67	; 0x43
 800371c:	f040 80aa 	bne.w	8003874 <initStateMachine+0x91c>
                {
                	resetKeyPressed();
 8003720:	f001 fb32 	bl	8004d88 <resetKeyPressed>
//                    save_data(indexTest);
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003724:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003728:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff f9ba 	bl	8002aa8 <readyUserInterface>
                    updateUserMsg(0,0,savedUserMsg,&displayUpdateStatus);
 8003734:	4b2e      	ldr	r3, [pc, #184]	; (80037f0 <initStateMachine+0x898>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800373c:	2100      	movs	r1, #0
 800373e:	2000      	movs	r0, #0
 8003740:	f7ff f994 	bl	8002a6c <updateUserMsg>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003744:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003748:	3303      	adds	r3, #3
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fd82 	bl	8004254 <setSelectSub>
 8003750:	4603      	mov	r3, r0
 8003752:	461a      	mov	r2, r3
 8003754:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003758:	705a      	strb	r2, [r3, #1]
                    //display
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 800375a:	2001      	movs	r0, #1
 800375c:	f000 fd68 	bl	8004230 <getNextSub>
 8003760:	4603      	mov	r3, r0
 8003762:	461a      	mov	r2, r3
 8003764:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003768:	70da      	strb	r2, [r3, #3]
                    sampleCount = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
                    i=0;
 8003770:	2300      	movs	r3, #0
 8003772:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003776:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800377a:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff f991 	bl	8002aa8 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8003786:	234d      	movs	r3, #77	; 0x4d
 8003788:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                }
            break;
 800378c:	e072      	b.n	8003874 <initStateMachine+0x91c>

            case CANCEL_SAVE:
                updateUserMsg(0,0,cancelUserMsg,&displayUpdateStatus);
 800378e:	4b17      	ldr	r3, [pc, #92]	; (80037ec <initStateMachine+0x894>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003796:	2100      	movs	r1, #0
 8003798:	2000      	movs	r0, #0
 800379a:	f7ff f967 	bl	8002a6c <updateUserMsg>
                key = getKeyPressed();
 800379e:	f001 fae7 	bl	8004d70 <getKeyPressed>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == AVANCAR)
 80037a8:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80037ac:	2b41      	cmp	r3, #65	; 0x41
 80037ae:	d121      	bne.n	80037f4 <initStateMachine+0x89c>
                {
                	resetKeyPressed();
 80037b0:	f001 faea 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80037b4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80037b8:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff f972 	bl	8002aa8 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 80037c4:	200b      	movs	r0, #11
 80037c6:	f000 fd33 	bl	8004230 <getNextSub>
 80037ca:	4603      	mov	r3, r0
 80037cc:	461a      	mov	r2, r3
 80037ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80037d2:	70da      	strb	r2, [r3, #3]
 80037d4:	e04d      	b.n	8003872 <initStateMachine+0x91a>
 80037d6:	bf00      	nop
 80037d8:	2000003c 	.word	0x2000003c
 80037dc:	0800b930 	.word	0x0800b930
 80037e0:	20000040 	.word	0x20000040
 80037e4:	20000044 	.word	0x20000044
 80037e8:	20000048 	.word	0x20000048
 80037ec:	20000050 	.word	0x20000050
 80037f0:	2000004c 	.word	0x2000004c
                }
                else if(key == CONFIRMAR)
 80037f4:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80037f8:	2b43      	cmp	r3, #67	; 0x43
 80037fa:	d13a      	bne.n	8003872 <initStateMachine+0x91a>
                {
                	resetKeyPressed();
 80037fc:	f001 fac4 	bl	8004d88 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003800:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003804:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff f94c 	bl	8002aa8 <readyUserInterface>
                    updateUserMsg(0,0,canceledUserMsg,&displayUpdateStatus);
 8003810:	4b22      	ldr	r3, [pc, #136]	; (800389c <initStateMachine+0x944>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003818:	2100      	movs	r1, #0
 800381a:	2000      	movs	r0, #0
 800381c:	f7ff f926 	bl	8002a6c <updateUserMsg>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003820:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003824:	3303      	adds	r3, #3
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fd14 	bl	8004254 <setSelectSub>
 800382c:	4603      	mov	r3, r0
 800382e:	461a      	mov	r2, r3
 8003830:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003834:	705a      	strb	r2, [r3, #1]
                    sampleCount = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
                    i=0;
 800383c:	2300      	movs	r3, #0
 800383e:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
                    indexTest++;
 8003842:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8003846:	3301      	adds	r3, #1
 8003848:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
                    //
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 800384c:	2001      	movs	r0, #1
 800384e:	f000 fcef 	bl	8004230 <getNextSub>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800385a:	70da      	strb	r2, [r3, #3]
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800385c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003860:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003864:	4611      	mov	r1, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff f91e 	bl	8002aa8 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 800386c:	234d      	movs	r3, #77	; 0x4d
 800386e:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                }
            break;
 8003872:	bf00      	nop
    while(key != MENU)
 8003874:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003878:	2b4d      	cmp	r3, #77	; 0x4d
 800387a:	f47f abba 	bne.w	8002ff2 <initStateMachine+0x9a>
        }
    }
    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800387e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003882:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f90d 	bl	8002aa8 <readyUserInterface>
}
 800388e:	bf00      	nop
 8003890:	4618      	mov	r0, r3
 8003892:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000054 	.word	0x20000054

080038a0 <startTM2>:
    unsigned char timeout;
    struct samples Measurement[MEASUREMENT_SIZE];
};

unsigned char startTM2(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
        SET_HW_TIMER2();
 80038a4:	f000 fcf8 	bl	8004298 <SET_HW_TIMER2>
}
 80038a8:	bf00      	nop
 80038aa:	4618      	mov	r0, r3
 80038ac:	bd80      	pop	{r7, pc}

080038ae <stopTM2>:

unsigned char stopTM2(void)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	af00      	add	r7, sp, #0
    RESET_HW_TIMER2();
 80038b2:	f000 fd13 	bl	80042dc <RESET_HW_TIMER2>
}
 80038b6:	bf00      	nop
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}

080038bc <startTM3>:

unsigned char startTM3(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
        SET_HW_TIMER3();
 80038c0:	f000 fd2a 	bl	8004318 <SET_HW_TIMER3>
//        resetTimer3Variable();
}
 80038c4:	bf00      	nop
 80038c6:	4618      	mov	r0, r3
 80038c8:	bd80      	pop	{r7, pc}

080038ca <stopTM3>:

unsigned char stopTM3(void)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	af00      	add	r7, sp, #0
    RESET_HW_TIMER3();
 80038ce:	f000 fd45 	bl	800435c <RESET_HW_TIMER3>
}
 80038d2:	bf00      	nop
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <printDataDisplay>:
{
//    RESET_HARDWARE();
}

unsigned char printDataDisplay(unsigned char col, unsigned char linha,unsigned char* userData)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	603a      	str	r2, [r7, #0]
 80038e2:	71fb      	strb	r3, [r7, #7]
 80038e4:	460b      	mov	r3, r1
 80038e6:	71bb      	strb	r3, [r7, #6]
    HW_PRINT_DATA(col, linha,userData);
 80038e8:	79b9      	ldrb	r1, [r7, #6]
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f84e 	bl	8003990 <HW_PRINT_DATA>
}
 80038f4:	bf00      	nop
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <eraseDataDisplay>:
	HW_INSERT_DATA(col, linha,userData);
}


unsigned char eraseDataDisplay()
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	af00      	add	r7, sp, #0
    HW_ERASE_DATA();
 8003902:	f000 f861 	bl	80039c8 <HW_ERASE_DATA>
}
 8003906:	bf00      	nop
 8003908:	4618      	mov	r0, r3
 800390a:	bd80      	pop	{r7, pc}

0800390c <updateDataDisplay>:

unsigned char updateDataDisplay(unsigned char col, unsigned char linha)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	460a      	mov	r2, r1
 8003916:	71fb      	strb	r3, [r7, #7]
 8003918:	4613      	mov	r3, r2
 800391a:	71bb      	strb	r3, [r7, #6]
	HW_UPDATE_DATA(col,linha);
 800391c:	79ba      	ldrb	r2, [r7, #6]
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f85a 	bl	80039dc <HW_UPDATE_DATA>
}
 8003928:	bf00      	nop
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <homeDataDisplay>:

unsigned char homeDataDisplay(unsigned char* appName,unsigned char* companyName,unsigned char* appVersion)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
//    printf("%s\n",appName);
//    printf("%s\n",companyName);
//    printf("%s\n",appVersion);
    HW_HOME_DISP(appName,companyName,appVersion);
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f86a 	bl	8003a1c <HW_HOME_DISP>

}
 8003948:	bf00      	nop
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <startCOMM>:


}

unsigned char startCOMM()
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
//    printf("SET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8003958:	f001 fa24 	bl	8004da4 <getUARTInstance>
 800395c:	4603      	mov	r3, r0
 800395e:	607b      	str	r3, [r7, #4]
	SET_HW_UART(uartInstance);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fd17 	bl	8004394 <SET_HW_UART>
}
 8003966:	bf00      	nop
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <stopCOMM>:

unsigned char stopCOMM()
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
//    printf("RESET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8003976:	f001 fa15 	bl	8004da4 <getUARTInstance>
 800397a:	4603      	mov	r3, r0
 800397c:	607b      	str	r3, [r7, #4]
	RESET_HW_UART(uartInstance);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fd1c 	bl	80043bc <RESET_HW_UART>
}
 8003984:	bf00      	nop
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HW_PRINT_DATA>:
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	603a      	str	r2, [r7, #0]
 800399a:	71fb      	strb	r3, [r7, #7]
 800399c:	460b      	mov	r3, r1
 800399e:	71bb      	strb	r3, [r7, #6]
 80039a0:	79ba      	ldrb	r2, [r7, #6]
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	4619      	mov	r1, r3
 80039a6:	4807      	ldr	r0, [pc, #28]	; (80039c4 <HW_PRINT_DATA+0x34>)
 80039a8:	f000 fb06 	bl	8003fb8 <setCursor>
 80039ac:	20fa      	movs	r0, #250	; 0xfa
 80039ae:	f002 f97d 	bl	8005cac <HAL_Delay>
 80039b2:	6839      	ldr	r1, [r7, #0]
 80039b4:	4803      	ldr	r0, [pc, #12]	; (80039c4 <HW_PRINT_DATA+0x34>)
 80039b6:	f000 f95b 	bl	8003c70 <print>
 80039ba:	bf00      	nop
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	2000044c 	.word	0x2000044c

080039c8 <HW_ERASE_DATA>:
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <HW_ERASE_DATA+0x10>)
 80039ce:	f000 f971 	bl	8003cb4 <clear>
 80039d2:	bf00      	nop
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	2000044c 	.word	0x2000044c

080039dc <HW_UPDATE_DATA>:
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	460a      	mov	r2, r1
 80039e6:	71fb      	strb	r3, [r7, #7]
 80039e8:	4613      	mov	r3, r2
 80039ea:	71bb      	strb	r3, [r7, #6]
 80039ec:	79ba      	ldrb	r2, [r7, #6]
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	4619      	mov	r1, r3
 80039f2:	4809      	ldr	r0, [pc, #36]	; (8003a18 <HW_UPDATE_DATA+0x3c>)
 80039f4:	f000 fae0 	bl	8003fb8 <setCursor>
 80039f8:	4807      	ldr	r0, [pc, #28]	; (8003a18 <HW_UPDATE_DATA+0x3c>)
 80039fa:	f000 f99a 	bl	8003d32 <cursor>
 80039fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a02:	f002 f953 	bl	8005cac <HAL_Delay>
 8003a06:	4804      	ldr	r0, [pc, #16]	; (8003a18 <HW_UPDATE_DATA+0x3c>)
 8003a08:	f000 f97b 	bl	8003d02 <noCursor>
 8003a0c:	bf00      	nop
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	2000044c 	.word	0x2000044c

08003a1c <HW_HOME_DISP>:
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	2304      	movs	r3, #4
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	2110      	movs	r1, #16
 8003a2e:	4812      	ldr	r0, [pc, #72]	; (8003a78 <HW_HOME_DISP+0x5c>)
 8003a30:	f000 f824 	bl	8003a7c <begin>
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	480f      	ldr	r0, [pc, #60]	; (8003a78 <HW_HOME_DISP+0x5c>)
 8003a3a:	f000 fabd 	bl	8003fb8 <setCursor>
 8003a3e:	68f9      	ldr	r1, [r7, #12]
 8003a40:	480d      	ldr	r0, [pc, #52]	; (8003a78 <HW_HOME_DISP+0x5c>)
 8003a42:	f000 f915 	bl	8003c70 <print>
 8003a46:	2201      	movs	r2, #1
 8003a48:	2100      	movs	r1, #0
 8003a4a:	480b      	ldr	r0, [pc, #44]	; (8003a78 <HW_HOME_DISP+0x5c>)
 8003a4c:	f000 fab4 	bl	8003fb8 <setCursor>
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	4809      	ldr	r0, [pc, #36]	; (8003a78 <HW_HOME_DISP+0x5c>)
 8003a54:	f000 f90c 	bl	8003c70 <print>
 8003a58:	2203      	movs	r2, #3
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4806      	ldr	r0, [pc, #24]	; (8003a78 <HW_HOME_DISP+0x5c>)
 8003a5e:	f000 faab 	bl	8003fb8 <setCursor>
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4804      	ldr	r0, [pc, #16]	; (8003a78 <HW_HOME_DISP+0x5c>)
 8003a66:	f000 f903 	bl	8003c70 <print>
 8003a6a:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <HW_HOME_DISP+0x5c>)
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	2000044c 	.word	0x2000044c

08003a7c <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	70fb      	strb	r3, [r7, #3]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	70bb      	strb	r3, [r7, #2]
 8003a92:	4613      	mov	r3, r2
 8003a94:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 8003a96:	f107 0308 	add.w	r3, r7, #8
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f107 0308 	add.w	r3, r7, #8
 8003aa8:	cb03      	ldmia	r3!, {r0, r1}
 8003aaa:	6010      	str	r0, [r2, #0]
 8003aac:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ab4:	486c      	ldr	r0, [pc, #432]	; (8003c68 <begin+0x1ec>)
 8003ab6:	f002 fe4d 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8003aba:	2200      	movs	r2, #0
 8003abc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ac0:	4869      	ldr	r0, [pc, #420]	; (8003c68 <begin+0x1ec>)
 8003ac2:	f002 fe47 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003acc:	4866      	ldr	r0, [pc, #408]	; (8003c68 <begin+0x1ec>)
 8003ace:	f002 fe41 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ad8:	4863      	ldr	r0, [pc, #396]	; (8003c68 <begin+0x1ec>)
 8003ada:	f002 fe3b 	bl	8006754 <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2108      	movs	r1, #8
 8003ae2:	4861      	ldr	r0, [pc, #388]	; (8003c68 <begin+0x1ec>)
 8003ae4:	f002 fe36 	bl	8006754 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aee:	485f      	ldr	r0, [pc, #380]	; (8003c6c <begin+0x1f0>)
 8003af0:	f002 fe30 	bl	8006754 <HAL_GPIO_WritePin>

	#if defined(LCD_8BITMODE)
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,GPIO_PIN_RESET);
 8003af4:	2200      	movs	r2, #0
 8003af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003afa:	485c      	ldr	r0, [pc, #368]	; (8003c6c <begin+0x1f0>)
 8003afc:	f002 fe2a 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,GPIO_PIN_RESET);
 8003b00:	2200      	movs	r2, #0
 8003b02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b06:	4859      	ldr	r0, [pc, #356]	; (8003c6c <begin+0x1f0>)
 8003b08:	f002 fe24 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,GPIO_PIN_RESET);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b12:	4856      	ldr	r0, [pc, #344]	; (8003c6c <begin+0x1f0>)
 8003b14:	f002 fe1e 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,GPIO_PIN_RESET);
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b1e:	4853      	ldr	r0, [pc, #332]	; (8003c6c <begin+0x1f0>)
 8003b20:	f002 fe18 	bl	8006754 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8003b24:	2200      	movs	r2, #0
 8003b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b2a:	4850      	ldr	r0, [pc, #320]	; (8003c6c <begin+0x1f0>)
 8003b2c:	f002 fe12 	bl	8006754 <HAL_GPIO_WritePin>
	#endif

	if (lines > 1) {
 8003b30:	78bb      	ldrb	r3, [r7, #2]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d906      	bls.n	8003b44 <begin+0xc8>
		lcd->_displayfunction |= LCD_2LINE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	f043 0308 	orr.w	r3, r3, #8
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	78ba      	ldrb	r2, [r7, #2]
 8003b48:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	3340      	adds	r3, #64	; 0x40
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	4613      	mov	r3, r2
 8003b54:	2240      	movs	r2, #64	; 0x40
 8003b56:	2100      	movs	r1, #0
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fa11 	bl	8003f80 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8003b5e:	787b      	ldrb	r3, [r7, #1]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <begin+0xfc>
 8003b64:	78bb      	ldrb	r3, [r7, #2]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d106      	bne.n	8003b78 <begin+0xfc>
		lcd->_displayfunction |= LCD_5x10DOTS;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	f043 0304 	orr.w	r3, r3, #4
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 8003b78:	2032      	movs	r0, #50	; 0x32
 8003b7a:	f002 f897 	bl	8005cac <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2108      	movs	r1, #8
 8003b82:	4839      	ldr	r0, [pc, #228]	; (8003c68 <begin+0x1ec>)
 8003b84:	f002 fde6 	bl	8006754 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b8e:	4837      	ldr	r0, [pc, #220]	; (8003c6c <begin+0x1f0>)
 8003b90:	f002 fde0 	bl	8006754 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8003b94:	2200      	movs	r2, #0
 8003b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b9a:	4834      	ldr	r0, [pc, #208]	; (8003c6c <begin+0x1f0>)
 8003b9c:	f002 fdda 	bl	8006754 <HAL_GPIO_WritePin>
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d015      	beq.n	8003bd4 <begin+0x158>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 8003ba8:	2003      	movs	r0, #3
 8003baa:	f000 f933 	bl	8003e14 <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 8003bae:	2005      	movs	r0, #5
 8003bb0:	f002 f87c 	bl	8005cac <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 8003bb4:	2003      	movs	r0, #3
 8003bb6:	f000 f92d 	bl	8003e14 <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 8003bba:	2005      	movs	r0, #5
 8003bbc:	f002 f876 	bl	8005cac <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	f000 f927 	bl	8003e14 <write4bits>
		HAL_Delay(5);
 8003bc6:	2005      	movs	r0, #5
 8003bc8:	f002 f870 	bl	8005cac <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 8003bcc:	2002      	movs	r0, #2
 8003bce:	f000 f921 	bl	8003e14 <write4bits>
 8003bd2:	e023      	b.n	8003c1c <begin+0x1a0>

		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 23, pg 45 

		// Envia sequência de comando
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	f043 0320 	orr.w	r3, r3, #32
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	4619      	mov	r1, r3
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f9bd 	bl	8003f60 <command>
		HAL_Delay(6);  // wait more than 4.1 ms
 8003be6:	2006      	movs	r0, #6
 8003be8:	f002 f860 	bl	8005cac <HAL_Delay>

		// Segundo envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	f043 0320 	orr.w	r3, r3, #32
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f9b1 	bl	8003f60 <command>
		HAL_Delay(1);
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f002 f854 	bl	8005cac <HAL_Delay>

		// Terceiro envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	f043 0320 	orr.w	r3, r3, #32
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f9a5 	bl	8003f60 <command>
		HAL_Delay(1);
 8003c16:	2001      	movs	r0, #1
 8003c18:	f002 f848 	bl	8005cac <HAL_Delay>
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	f043 0320 	orr.w	r3, r3, #32
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	4619      	mov	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f999 	bl	8003f60 <command>
    HAL_Delay(1);
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f002 f83c 	bl	8005cac <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2204      	movs	r2, #4
 8003c38:	705a      	strb	r2, [r3, #1]
    display(lcd);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f849 	bl	8003cd2 <display>

    // Limpa display
    clear(lcd);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f837 	bl	8003cb4 <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	789b      	ldrb	r3, [r3, #2]
 8003c50:	f043 0304 	orr.w	r3, r3, #4
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f981 	bl	8003f60 <command>
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40010c00 	.word	0x40010c00
 8003c6c:	40010800 	.word	0x40010800

08003c70 <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 8003c7a:	6838      	ldr	r0, [r7, #0]
 8003c7c:	f7fc fa66 	bl	800014c <strlen>
 8003c80:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
 8003c86:	e00c      	b.n	8003ca2 <print+0x32>
		write(lcd ,*(value+i));
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f863 	bl	8003d62 <write>
	for (uint8_t i = 0; i < Lengh; i++){
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d8ee      	bhi.n	8003c88 <print+0x18>
	}
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f94e 	bl	8003f60 <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 8003cc4:	2002      	movs	r0, #2
 8003cc6:	f001 fff1 	bl	8005cac <HAL_Delay>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	f043 0304 	orr.w	r3, r3, #4
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	f043 0308 	orr.w	r3, r3, #8
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f933 	bl	8003f60 <command>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <noCursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void noCursor(LiquidCrystal *lcd){
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol &= ~LCD_CURSORON;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	f023 0302 	bic.w	r3, r3, #2
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	785b      	ldrb	r3, [r3, #1]
 8003d1c:	f043 0308 	orr.w	r3, r3, #8
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	4619      	mov	r1, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f91b 	bl	8003f60 <command>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <cursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void cursor(LiquidCrystal *lcd){
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol |= LCD_CURSORON;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	785b      	ldrb	r3, [r3, #1]
 8003d3e:	f043 0302 	orr.w	r3, r3, #2
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	785b      	ldrb	r3, [r3, #1]
 8003d4c:	f043 0308 	orr.w	r3, r3, #8
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f903 	bl	8003f60 <command>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	2201      	movs	r2, #1
 8003d72:	4619      	mov	r1, r3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f805 	bl	8003d84 <send>
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	70fb      	strb	r3, [r7, #3]
 8003d90:	4613      	mov	r3, r2
 8003d92:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 8003d94:	78bb      	ldrb	r3, [r7, #2]
 8003d96:	461a      	mov	r2, r3
 8003d98:	2108      	movs	r1, #8
 8003d9a:	4811      	ldr	r0, [pc, #68]	; (8003de0 <send+0x5c>)
 8003d9c:	f002 fcda 	bl	8006754 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8003da0:	2200      	movs	r2, #0
 8003da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003da6:	480f      	ldr	r0, [pc, #60]	; (8003de4 <send+0x60>)
 8003da8:	f002 fcd4 	bl	8006754 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <send+0x3e>
	    write8bits(value);
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f866 	bl	8003e8c <write8bits>
	    write4bits(value);
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 8003dc0:	e009      	b.n	8003dd6 <send+0x52>
	    write4bits(value>>4);
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f823 	bl	8003e14 <write4bits>
	    write4bits(value);
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f81f 	bl	8003e14 <write4bits>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40010c00 	.word	0x40010c00
 8003de4:	40010800 	.word	0x40010800

08003de8 <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8003dec:	2201      	movs	r2, #1
 8003dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003df2:	4807      	ldr	r0, [pc, #28]	; (8003e10 <pulseEnable+0x28>)
 8003df4:	f002 fcae 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f001 ff57 	bl	8005cac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e04:	4802      	ldr	r0, [pc, #8]	; (8003e10 <pulseEnable+0x28>)
 8003e06:	f002 fca5 	bl	8006754 <HAL_GPIO_WritePin>
}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40010800 	.word	0x40010800

08003e14 <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e2c:	4816      	ldr	r0, [pc, #88]	; (8003e88 <write4bits+0x74>)
 8003e2e:	f002 fc91 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e44:	4810      	ldr	r0, [pc, #64]	; (8003e88 <write4bits+0x74>)
 8003e46:	f002 fc85 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e5c:	480a      	ldr	r0, [pc, #40]	; (8003e88 <write4bits+0x74>)
 8003e5e:	f002 fc79 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	08db      	lsrs	r3, r3, #3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e74:	4804      	ldr	r0, [pc, #16]	; (8003e88 <write4bits+0x74>)
 8003e76:	f002 fc6d 	bl	8006754 <HAL_GPIO_WritePin>

	pulseEnable();
 8003e7a:	f7ff ffb5 	bl	8003de8 <pulseEnable>
}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40010c00 	.word	0x40010c00

08003e8c <write8bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write8bits(uint8_t value){
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,(value >> 0) & 0x01);
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ea4:	482c      	ldr	r0, [pc, #176]	; (8003f58 <write8bits+0xcc>)
 8003ea6:	f002 fc55 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,(value >> 1) & 0x01);
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ebc:	4826      	ldr	r0, [pc, #152]	; (8003f58 <write8bits+0xcc>)
 8003ebe:	f002 fc49 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,(value >> 2) & 0x01);
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ed4:	4820      	ldr	r0, [pc, #128]	; (8003f58 <write8bits+0xcc>)
 8003ed6:	f002 fc3d 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,(value >> 3) & 0x01);
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eec:	481a      	ldr	r0, [pc, #104]	; (8003f58 <write8bits+0xcc>)
 8003eee:	f002 fc31 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 4) & 0x01);
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f04:	4815      	ldr	r0, [pc, #84]	; (8003f5c <write8bits+0xd0>)
 8003f06:	f002 fc25 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 5) & 0x01);
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f1c:	480f      	ldr	r0, [pc, #60]	; (8003f5c <write8bits+0xd0>)
 8003f1e:	f002 fc19 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 6) & 0x01);
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	099b      	lsrs	r3, r3, #6
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f34:	4809      	ldr	r0, [pc, #36]	; (8003f5c <write8bits+0xd0>)
 8003f36:	f002 fc0d 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 7) & 0x01);
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	09db      	lsrs	r3, r3, #7
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f46:	4805      	ldr	r0, [pc, #20]	; (8003f5c <write8bits+0xd0>)
 8003f48:	f002 fc04 	bl	8006754 <HAL_GPIO_WritePin>

	pulseEnable();
 8003f4c:	f7ff ff4c 	bl	8003de8 <pulseEnable>

}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40010800 	.word	0x40010800
 8003f5c:	40010c00 	.word	0x40010c00

08003f60 <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	4619      	mov	r1, r3
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ff06 	bl	8003d84 <send>
}
 8003f78:	bf00      	nop
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	71da      	strb	r2, [r3, #7]
}
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr

08003fb8 <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 8003fc8:	2304      	movs	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 8003fcc:	78bb      	ldrb	r3, [r7, #2]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d803      	bhi.n	8003fdc <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	78db      	ldrb	r3, [r3, #3]
 8003fe0:	78ba      	ldrb	r2, [r7, #2]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d303      	bcc.n	8003fee <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	78db      	ldrb	r3, [r3, #3]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 8003fee:	78bb      	ldrb	r3, [r7, #2]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	791a      	ldrb	r2, [r3, #4]
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	b25b      	sxtb	r3, r3
 8003ffe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004002:	b25b      	sxtb	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff ffa9 	bl	8003f60 <command>
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <startReadingOutsideSensor>:
};

static struct results measuredData;

unsigned char startReadingOutsideSensor()
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b092      	sub	sp, #72	; 0x48
 800401c:	af00      	add	r7, sp, #0
	unsigned char userState = REPOUSO;
 800401e:	2332      	movs	r3, #50	; 0x32
 8004020:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	unsigned char sensorFlag;
	unsigned int referenceTime,currentTime,totalTime = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned int contatoTime[5] = {0,0,0,0,0};
 8004028:	f107 0314 	add.w	r3, r7, #20
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	611a      	str	r2, [r3, #16]
	unsigned int vooTime[5]= {0,0,0,0,0};
 8004038:	463b      	mov	r3, r7
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	609a      	str	r2, [r3, #8]
 8004042:	60da      	str	r2, [r3, #12]
 8004044:	611a      	str	r2, [r3, #16]
	unsigned char key = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	unsigned char samples = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a


	unsigned char indexTest = getResultTestNumber();
 8004052:	f7fd fe9d 	bl	8001d90 <getResultTestNumber>
 8004056:	4603      	mov	r3, r0
 8004058:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	unsigned long int userTime = getUserTime();
 800405c:	f7fd fd8e 	bl	8001b7c <getUserTime>
 8004060:	6378      	str	r0, [r7, #52]	; 0x34
	userTime = userTime/100;
 8004062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004064:	4a6c      	ldr	r2, [pc, #432]	; (8004218 <startReadingOutsideSensor+0x200>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	637b      	str	r3, [r7, #52]	; 0x34
	key = getKeyPressed();
 800406e:	f000 fe7f 	bl	8004d70 <getKeyPressed>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
//	unsigned int altMin = stringToInt(getAltMinString());
//	unsigned int altMax = stringToInt(getAltMaxString());

	while(key != PARAR && totalTime != userTime) //&& totalTime != COLOCAR O VALOR DE TEMPO DE ENTRADA
 8004078:	e06f      	b.n	800415a <startReadingOutsideSensor+0x142>
	{ //parei aqui, pensar em alguma flag para avisar que o totaltime == usertime e forçar a parada da leitura
		totalTime = getTimer3Variable();
 800407a:	f000 febd 	bl	8004df8 <getTimer3Variable>
 800407e:	4603      	mov	r3, r0
 8004080:	63fb      	str	r3, [r7, #60]	; 0x3c
		key = getKeyPressed();
 8004082:	f000 fe75 	bl	8004d70 <getKeyPressed>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		switch(userState)
 800408c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004090:	2b34      	cmp	r3, #52	; 0x34
 8004092:	d03c      	beq.n	800410e <startReadingOutsideSensor+0xf6>
 8004094:	2b34      	cmp	r3, #52	; 0x34
 8004096:	dc60      	bgt.n	800415a <startReadingOutsideSensor+0x142>
 8004098:	2b32      	cmp	r3, #50	; 0x32
 800409a:	d002      	beq.n	80040a2 <startReadingOutsideSensor+0x8a>
 800409c:	2b33      	cmp	r3, #51	; 0x33
 800409e:	d015      	beq.n	80040cc <startReadingOutsideSensor+0xb4>
 80040a0:	e05b      	b.n	800415a <startReadingOutsideSensor+0x142>
		{
			case REPOUSO:
				sensorFlag = getTimer2Variable();
 80040a2:	f000 fe9d 	bl	8004de0 <getTimer2Variable>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(sensorFlag == 0)
 80040ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d107      	bne.n	80040c4 <startReadingOutsideSensor+0xac>
				{
					userState = CONTATO;
 80040b4:	2333      	movs	r3, #51	; 0x33
 80040b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					referenceTime = getTimer3Variable();
 80040ba:	f000 fe9d 	bl	8004df8 <getTimer3Variable>
 80040be:	4603      	mov	r3, r0
 80040c0:	643b      	str	r3, [r7, #64]	; 0x40
 80040c2:	e04a      	b.n	800415a <startReadingOutsideSensor+0x142>
				}

				else userState = REPOUSO;
 80040c4:	2332      	movs	r3, #50	; 0x32
 80040c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


			break;
 80040ca:	e046      	b.n	800415a <startReadingOutsideSensor+0x142>

			case CONTATO:
				sensorFlag = getTimer2Variable();
 80040cc:	f000 fe88 	bl	8004de0 <getTimer2Variable>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(sensorFlag == 1)
 80040d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d113      	bne.n	8004106 <startReadingOutsideSensor+0xee>
				{
					userState = VOO;
 80040de:	2334      	movs	r3, #52	; 0x34
 80040e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					currentTime = getTimer3Variable();
 80040e4:	f000 fe88 	bl	8004df8 <getTimer3Variable>
 80040e8:	4603      	mov	r3, r0
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					contatoTime[samples] = currentTime-referenceTime;
 80040ec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80040f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040f4:	1a8a      	subs	r2, r1, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	3348      	adds	r3, #72	; 0x48
 80040fa:	443b      	add	r3, r7
 80040fc:	f843 2c34 	str.w	r2, [r3, #-52]
					referenceTime = currentTime;
 8004100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004102:	643b      	str	r3, [r7, #64]	; 0x40
 8004104:	e029      	b.n	800415a <startReadingOutsideSensor+0x142>
				}
				else
				{
//					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
					userState = CONTATO;
 8004106:	2333      	movs	r3, #51	; 0x33
 8004108:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}

			break;
 800410c:	e025      	b.n	800415a <startReadingOutsideSensor+0x142>

			case VOO:
				sensorFlag = getTimer2Variable();
 800410e:	f000 fe67 	bl	8004de0 <getTimer2Variable>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

				if(sensorFlag == 0)
 8004118:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800411c:	2b00      	cmp	r3, #0
 800411e:	d118      	bne.n	8004152 <startReadingOutsideSensor+0x13a>
				{
					userState = CONTATO;
 8004120:	2333      	movs	r3, #51	; 0x33
 8004122:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					currentTime = getTimer3Variable();
 8004126:	f000 fe67 	bl	8004df8 <getTimer3Variable>
 800412a:	4603      	mov	r3, r0
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
					vooTime[samples] = currentTime - referenceTime;
 800412e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004136:	1a8a      	subs	r2, r1, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	3348      	adds	r3, #72	; 0x48
 800413c:	443b      	add	r3, r7
 800413e:	f843 2c48 	str.w	r2, [r3, #-72]
					referenceTime = currentTime;
 8004142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004144:	643b      	str	r3, [r7, #64]	; 0x40
					samples++;
 8004146:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800414a:	3301      	adds	r3, #1
 800414c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8004150:	e002      	b.n	8004158 <startReadingOutsideSensor+0x140>
				}
				else
				{
//					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
					userState = VOO;
 8004152:	2334      	movs	r3, #52	; 0x34
 8004154:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			break;
 8004158:	bf00      	nop
	while(key != PARAR && totalTime != userTime) //&& totalTime != COLOCAR O VALOR DE TEMPO DE ENTRADA
 800415a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800415e:	2b50      	cmp	r3, #80	; 0x50
 8004160:	d003      	beq.n	800416a <startReadingOutsideSensor+0x152>
 8004162:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004166:	429a      	cmp	r2, r3
 8004168:	d187      	bne.n	800407a <startReadingOutsideSensor+0x62>

		}
	}
	if(totalTime == userTime)
 800416a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800416c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416e:	429a      	cmp	r2, r3
 8004170:	d104      	bne.n	800417c <startReadingOutsideSensor+0x164>
	{
		measuredData.timeout = TRUE;
 8004172:	4b2a      	ldr	r3, [pc, #168]	; (800421c <startReadingOutsideSensor+0x204>)
 8004174:	2201      	movs	r2, #1
 8004176:	70da      	strb	r2, [r3, #3]
		return TIMEOUT;
 8004178:	2335      	movs	r3, #53	; 0x35
 800417a:	e048      	b.n	800420e <startReadingOutsideSensor+0x1f6>
	}

	else
	{
		measuredData.timeout = FALSE;
 800417c:	4b27      	ldr	r3, [pc, #156]	; (800421c <startReadingOutsideSensor+0x204>)
 800417e:	2200      	movs	r2, #0
 8004180:	70da      	strb	r2, [r3, #3]
		measuredData.resultTestAcquiredSamples = samples;
 8004182:	4a26      	ldr	r2, [pc, #152]	; (800421c <startReadingOutsideSensor+0x204>)
 8004184:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004188:	7053      	strb	r3, [r2, #1]
		for(unsigned i=0;i<samples;i++)
 800418a:	2300      	movs	r3, #0
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
 800418e:	bf00      	nop
 8004190:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004196:	429a      	cmp	r2, r3
 8004198:	d239      	bcs.n	800420e <startReadingOutsideSensor+0x1f6>
		{
			measuredData.Measurement[i].sampleNum = i+1;
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	b2db      	uxtb	r3, r3
 800419e:	3301      	adds	r3, #1
 80041a0:	b2d8      	uxtb	r0, r3
 80041a2:	491e      	ldr	r1, [pc, #120]	; (800421c <startReadingOutsideSensor+0x204>)
 80041a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a6:	4613      	mov	r3, r2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	3304      	adds	r3, #4
 80041b2:	4602      	mov	r2, r0
 80041b4:	701a      	strb	r2, [r3, #0]
			measuredData.Measurement[i].uiVooTime = vooTime[i]*100;
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	3348      	adds	r3, #72	; 0x48
 80041bc:	443b      	add	r3, r7
 80041be:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80041c2:	2264      	movs	r2, #100	; 0x64
 80041c4:	fb02 f103 	mul.w	r1, r2, r3
 80041c8:	4814      	ldr	r0, [pc, #80]	; (800421c <startReadingOutsideSensor+0x204>)
 80041ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041cc:	4613      	mov	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4403      	add	r3, r0
 80041d6:	3308      	adds	r3, #8
 80041d8:	6019      	str	r1, [r3, #0]
			measuredData.Measurement[i].uiSoloTime = contatoTime[i]*100;
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	3348      	adds	r3, #72	; 0x48
 80041e0:	443b      	add	r3, r7
 80041e2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80041e6:	2264      	movs	r2, #100	; 0x64
 80041e8:	fb02 f103 	mul.w	r1, r2, r3
 80041ec:	480b      	ldr	r0, [pc, #44]	; (800421c <startReadingOutsideSensor+0x204>)
 80041ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f0:	4613      	mov	r3, r2
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4403      	add	r3, r0
 80041fa:	330c      	adds	r3, #12
 80041fc:	6019      	str	r1, [r3, #0]
			setUserResultData(&measuredData,indexTest);
 80041fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004202:	4619      	mov	r1, r3
 8004204:	4805      	ldr	r0, [pc, #20]	; (800421c <startReadingOutsideSensor+0x204>)
 8004206:	f7fd fddd 	bl	8001dc4 <setUserResultData>
			return PARAR;
 800420a:	2350      	movs	r3, #80	; 0x50
 800420c:	e7ff      	b.n	800420e <startReadingOutsideSensor+0x1f6>
		}
	}
}
 800420e:	4618      	mov	r0, r3
 8004210:	3748      	adds	r7, #72	; 0x48
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	51eb851f 	.word	0x51eb851f
 800421c:	20000454 	.word	0x20000454

08004220 <startReadingInsideSensor>:

unsigned char startReadingInsideSensor()
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
//
//			start_dentro_state = CONTATO;
//		break;
//	}

}
 8004224:	bf00      	nop
 8004226:	4618      	mov	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
	...

08004230 <getNextSub>:

struct Menu menuSub ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextSub(unsigned char nextState)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	71fb      	strb	r3, [r7, #7]
    menuSub.menuNext = nextState;
 800423a:	4a05      	ldr	r2, [pc, #20]	; (8004250 <getNextSub+0x20>)
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	7013      	strb	r3, [r2, #0]
    return menuSub.menuNext;
 8004240:	4b03      	ldr	r3, [pc, #12]	; (8004250 <getNextSub+0x20>)
 8004242:	781b      	ldrb	r3, [r3, #0]
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20000494 	.word	0x20000494

08004254 <setSelectSub>:

unsigned char setSelectSub(unsigned char *selectedState)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
    unsigned char state = *selectedState;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	73fb      	strb	r3, [r7, #15]
    menuSub.menuSelect = state;
 8004262:	4a05      	ldr	r2, [pc, #20]	; (8004278 <setSelectSub+0x24>)
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	7053      	strb	r3, [r2, #1]
    return menuSub.menuSelect;
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <setSelectSub+0x24>)
 800426a:	785b      	ldrb	r3, [r3, #1]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000494 	.word	0x20000494

0800427c <setInsertData>:

unsigned char setInsertData(struct dataInsert* dataToInsert)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
    struct dataInsert* userDataInput = dataToInsert;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60fb      	str	r3, [r7, #12]
    setUserInputConfigData(userDataInput);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7fd fd23 	bl	8001cd4 <setUserInputConfigData>
}
 800428e:	bf00      	nop
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <SET_HW_TIMER2>:

static unsigned char encoderStatus;
static unsigned char timerStatus;

unsigned char SET_HW_TIMER2(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
	encoderStatus = 0;
 800429e:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <SET_HW_TIMER2+0x40>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
//	TIM_HandleTypeDef* htim2 =  getTimer2Instance();
	unsigned char* htim2 =  getTimer2Instance();
 80042a4:	f000 fd88 	bl	8004db8 <getTimer2Instance>
 80042a8:	4603      	mov	r3, r0
 80042aa:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Start_IT(htim2, TIM_CHANNEL_ALL);
 80042ac:	213c      	movs	r1, #60	; 0x3c
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f003 fc2e 	bl	8007b10 <HAL_TIM_Encoder_Start_IT>
 80042b4:	4603      	mov	r3, r0
 80042b6:	461a      	mov	r2, r3
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <SET_HW_TIMER2+0x40>)
 80042ba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 80042bc:	2064      	movs	r0, #100	; 0x64
 80042be:	f001 fcf5 	bl	8005cac <HAL_Delay>
	return !encoderStatus;
 80042c2:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <SET_HW_TIMER2+0x40>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bf0c      	ite	eq
 80042ca:	2301      	moveq	r3, #1
 80042cc:	2300      	movne	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	200004b0 	.word	0x200004b0

080042dc <RESET_HW_TIMER2>:

unsigned char RESET_HW_TIMER2(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
    encoderStatus = 1;
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <RESET_HW_TIMER2+0x38>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
//    TIM_HandleTypeDef* htim2 =  getTimer2Instance();
    unsigned char* htim2 =  getTimer2Instance();
 80042e8:	f000 fd66 	bl	8004db8 <getTimer2Instance>
 80042ec:	4603      	mov	r3, r0
 80042ee:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Stop_IT(htim2, TIM_CHANNEL_ALL);
 80042f0:	213c      	movs	r1, #60	; 0x3c
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f003 fcba 	bl	8007c6c <HAL_TIM_Encoder_Stop_IT>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <RESET_HW_TIMER2+0x38>)
 80042fe:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004300:	2064      	movs	r0, #100	; 0x64
 8004302:	f001 fcd3 	bl	8005cac <HAL_Delay>
	return encoderStatus;
 8004306:	4b03      	ldr	r3, [pc, #12]	; (8004314 <RESET_HW_TIMER2+0x38>)
 8004308:	781b      	ldrb	r3, [r3, #0]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200004b0 	.word	0x200004b0

08004318 <SET_HW_TIMER3>:

unsigned char SET_HW_TIMER3(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
    timerStatus = 0;
 800431e:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <SET_HW_TIMER3+0x40>)
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8004324:	f000 fd52 	bl	8004dcc <getTimer3Instance>
 8004328:	4603      	mov	r3, r0
 800432a:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Start_IT(htim3);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f003 facd 	bl	80078cc <HAL_TIM_Base_Start_IT>
 8004332:	4603      	mov	r3, r0
 8004334:	461a      	mov	r2, r3
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <SET_HW_TIMER3+0x40>)
 8004338:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 800433a:	2064      	movs	r0, #100	; 0x64
 800433c:	f001 fcb6 	bl	8005cac <HAL_Delay>
    return !timerStatus;
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <SET_HW_TIMER3+0x40>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	200004b1 	.word	0x200004b1

0800435c <RESET_HW_TIMER3>:

unsigned char RESET_HW_TIMER3(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
    timerStatus = 1;
 8004362:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <RESET_HW_TIMER3+0x34>)
 8004364:	2201      	movs	r2, #1
 8004366:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8004368:	f000 fd30 	bl	8004dcc <getTimer3Instance>
 800436c:	4603      	mov	r3, r0
 800436e:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Stop_IT(htim3);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f003 fafd 	bl	8007970 <HAL_TIM_Base_Stop_IT>
 8004376:	4603      	mov	r3, r0
 8004378:	461a      	mov	r2, r3
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <RESET_HW_TIMER3+0x34>)
 800437c:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 800437e:	2064      	movs	r0, #100	; 0x64
 8004380:	f001 fc94 	bl	8005cac <HAL_Delay>
    return timerStatus;
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <RESET_HW_TIMER3+0x34>)
 8004386:	781b      	ldrb	r3, [r3, #0]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200004b1 	.word	0x200004b1

08004394 <SET_HW_UART>:
#include "UARTHW.h"
#include "main.h"


unsigned char SET_HW_UART(unsigned char* addr)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	60fb      	str	r3, [r7, #12]
    __HAL_UART_ENABLE(instance);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043ae:	60da      	str	r2, [r3, #12]
}
 80043b0:	bf00      	nop
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <RESET_HW_UART>:

unsigned char RESET_HW_UART(unsigned char* addr)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	60fb      	str	r3, [r7, #12]
    __HAL_UART_DISABLE(instance);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d6:	60da      	str	r2, [r3, #12]
}
 80043d8:	bf00      	nop
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80043e8:	2200      	movs	r2, #0
 80043ea:	2110      	movs	r1, #16
 80043ec:	4803      	ldr	r0, [pc, #12]	; (80043fc <SELECT+0x18>)
 80043ee:	f002 f9b1 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80043f2:	2001      	movs	r0, #1
 80043f4:	f001 fc5a 	bl	8005cac <HAL_Delay>
}
 80043f8:	bf00      	nop
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40010800 	.word	0x40010800

08004400 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004404:	2201      	movs	r2, #1
 8004406:	2110      	movs	r1, #16
 8004408:	4803      	ldr	r0, [pc, #12]	; (8004418 <DESELECT+0x18>)
 800440a:	f002 f9a3 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800440e:	2001      	movs	r0, #1
 8004410:	f001 fc4c 	bl	8005cac <HAL_Delay>
}
 8004414:	bf00      	nop
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40010800 	.word	0x40010800

0800441c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004426:	bf00      	nop
 8004428:	4b08      	ldr	r3, [pc, #32]	; (800444c <SPI_TxByte+0x30>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d1f8      	bne.n	8004428 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8004436:	1df9      	adds	r1, r7, #7
 8004438:	2364      	movs	r3, #100	; 0x64
 800443a:	2201      	movs	r2, #1
 800443c:	4803      	ldr	r0, [pc, #12]	; (800444c <SPI_TxByte+0x30>)
 800443e:	f002 fe71 	bl	8007124 <HAL_SPI_Transmit>
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200004b4 	.word	0x200004b4

08004450 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800445c:	bf00      	nop
 800445e:	4b08      	ldr	r3, [pc, #32]	; (8004480 <SPI_TxBuffer+0x30>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b02      	cmp	r3, #2
 800446a:	d1f8      	bne.n	800445e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800446c:	887a      	ldrh	r2, [r7, #2]
 800446e:	2364      	movs	r3, #100	; 0x64
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4803      	ldr	r0, [pc, #12]	; (8004480 <SPI_TxBuffer+0x30>)
 8004474:	f002 fe56 	bl	8007124 <HAL_SPI_Transmit>
}
 8004478:	bf00      	nop
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	200004b4 	.word	0x200004b4

08004484 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800448a:	23ff      	movs	r3, #255	; 0xff
 800448c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800448e:	bf00      	nop
 8004490:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <SPI_RxByte+0x34>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b02      	cmp	r3, #2
 800449c:	d1f8      	bne.n	8004490 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800449e:	1dba      	adds	r2, r7, #6
 80044a0:	1df9      	adds	r1, r7, #7
 80044a2:	2364      	movs	r3, #100	; 0x64
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	2301      	movs	r3, #1
 80044a8:	4803      	ldr	r0, [pc, #12]	; (80044b8 <SPI_RxByte+0x34>)
 80044aa:	f002 ff77 	bl	800739c <HAL_SPI_TransmitReceive>

	return data;
 80044ae:	79bb      	ldrb	r3, [r7, #6]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	200004b4 	.word	0x200004b4

080044bc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80044c4:	f7ff ffde 	bl	8004484 <SPI_RxByte>
 80044c8:	4603      	mov	r3, r0
 80044ca:	461a      	mov	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	701a      	strb	r2, [r3, #0]
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80044de:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <SD_ReadyWait+0x30>)
 80044e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044e4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80044e6:	f7ff ffcd 	bl	8004484 <SPI_RxByte>
 80044ea:	4603      	mov	r3, r0
 80044ec:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	2bff      	cmp	r3, #255	; 0xff
 80044f2:	d003      	beq.n	80044fc <SD_ReadyWait+0x24>
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <SD_ReadyWait+0x30>)
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f4      	bne.n	80044e6 <SD_ReadyWait+0xe>

	return res;
 80044fc:	79fb      	ldrb	r3, [r7, #7]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	2000063e 	.word	0x2000063e

0800450c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8004512:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004516:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8004518:	f7ff ff72 	bl	8004400 <DESELECT>
	for(int i = 0; i < 10; i++)
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	e005      	b.n	800452e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8004522:	20ff      	movs	r0, #255	; 0xff
 8004524:	f7ff ff7a 	bl	800441c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	3301      	adds	r3, #1
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b09      	cmp	r3, #9
 8004532:	ddf6      	ble.n	8004522 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8004534:	f7ff ff56 	bl	80043e4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8004538:	2340      	movs	r3, #64	; 0x40
 800453a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800454c:	2395      	movs	r3, #149	; 0x95
 800454e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8004550:	463b      	mov	r3, r7
 8004552:	2106      	movs	r1, #6
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff ff7b 	bl	8004450 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800455a:	e002      	b.n	8004562 <SD_PowerOn+0x56>
	{
		cnt--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3b01      	subs	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8004562:	f7ff ff8f 	bl	8004484 <SPI_RxByte>
 8004566:	4603      	mov	r3, r0
 8004568:	2b01      	cmp	r3, #1
 800456a:	d002      	beq.n	8004572 <SD_PowerOn+0x66>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f4      	bne.n	800455c <SD_PowerOn+0x50>
	}

	DESELECT();
 8004572:	f7ff ff45 	bl	8004400 <DESELECT>
	SPI_TxByte(0XFF);
 8004576:	20ff      	movs	r0, #255	; 0xff
 8004578:	f7ff ff50 	bl	800441c <SPI_TxByte>

	PowerFlag = 1;
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <SD_PowerOn+0x80>)
 800457e:	2201      	movs	r2, #1
 8004580:	701a      	strb	r2, [r3, #0]
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	200004b3 	.word	0x200004b3

08004590 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004594:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <SD_PowerOff+0x14>)
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]
}
 800459a:	bf00      	nop
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	200004b3 	.word	0x200004b3

080045a8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
	return PowerFlag;
 80045ac:	4b02      	ldr	r3, [pc, #8]	; (80045b8 <SD_CheckPower+0x10>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr
 80045b8:	200004b3 	.word	0x200004b3

080045bc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <SD_RxDataBlock+0x58>)
 80045c8:	22c8      	movs	r2, #200	; 0xc8
 80045ca:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80045cc:	f7ff ff5a 	bl	8004484 <SPI_RxByte>
 80045d0:	4603      	mov	r3, r0
 80045d2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2bff      	cmp	r3, #255	; 0xff
 80045d8:	d103      	bne.n	80045e2 <SD_RxDataBlock+0x26>
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <SD_RxDataBlock+0x58>)
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f4      	bne.n	80045cc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2bfe      	cmp	r3, #254	; 0xfe
 80045e6:	d001      	beq.n	80045ec <SD_RxDataBlock+0x30>
 80045e8:	2300      	movs	r3, #0
 80045ea:	e00f      	b.n	800460c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff ff62 	bl	80044bc <SPI_RxBytePtr>
	} while(len--);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	1e5a      	subs	r2, r3, #1
 80045fc:	603a      	str	r2, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f4      	bne.n	80045ec <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8004602:	f7ff ff3f 	bl	8004484 <SPI_RxByte>
	SPI_RxByte();
 8004606:	f7ff ff3d 	bl	8004484 <SPI_RxByte>

	return TRUE;
 800460a:	2301      	movs	r3, #1
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	2000063d 	.word	0x2000063d

08004618 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004628:	f7ff ff56 	bl	80044d8 <SD_ReadyWait>
 800462c:	4603      	mov	r3, r0
 800462e:	2bff      	cmp	r3, #255	; 0xff
 8004630:	d001      	beq.n	8004636 <SD_TxDataBlock+0x1e>
 8004632:	2300      	movs	r3, #0
 8004634:	e02f      	b.n	8004696 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8004636:	78fb      	ldrb	r3, [r7, #3]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff feef 	bl	800441c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	2bfd      	cmp	r3, #253	; 0xfd
 8004642:	d020      	beq.n	8004686 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff ff01 	bl	8004450 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800464e:	f7ff ff19 	bl	8004484 <SPI_RxByte>
		SPI_RxByte();
 8004652:	f7ff ff17 	bl	8004484 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8004656:	e00b      	b.n	8004670 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004658:	f7ff ff14 	bl	8004484 <SPI_RxByte>
 800465c:	4603      	mov	r3, r0
 800465e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	f003 031f 	and.w	r3, r3, #31
 8004666:	2b05      	cmp	r3, #5
 8004668:	d006      	beq.n	8004678 <SD_TxDataBlock+0x60>
			i++;
 800466a:	7bbb      	ldrb	r3, [r7, #14]
 800466c:	3301      	adds	r3, #1
 800466e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8004670:	7bbb      	ldrb	r3, [r7, #14]
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d9f0      	bls.n	8004658 <SD_TxDataBlock+0x40>
 8004676:	e000      	b.n	800467a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004678:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800467a:	bf00      	nop
 800467c:	f7ff ff02 	bl	8004484 <SPI_RxByte>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0fa      	beq.n	800467c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	2b05      	cmp	r3, #5
 800468e:	d101      	bne.n	8004694 <SD_TxDataBlock+0x7c>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <SD_TxDataBlock+0x7e>

	return FALSE;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	4603      	mov	r3, r0
 80046a6:	6039      	str	r1, [r7, #0]
 80046a8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80046aa:	f7ff ff15 	bl	80044d8 <SD_ReadyWait>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2bff      	cmp	r3, #255	; 0xff
 80046b2:	d001      	beq.n	80046b8 <SD_SendCmd+0x1a>
 80046b4:	23ff      	movs	r3, #255	; 0xff
 80046b6:	e042      	b.n	800473e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff feae 	bl	800441c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	0e1b      	lsrs	r3, r3, #24
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fea8 	bl	800441c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	0c1b      	lsrs	r3, r3, #16
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fea2 	bl	800441c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fe9c 	bl	800441c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fe97 	bl	800441c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d102      	bne.n	80046fa <SD_SendCmd+0x5c>
 80046f4:	2395      	movs	r3, #149	; 0x95
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	e007      	b.n	800470a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	2b48      	cmp	r3, #72	; 0x48
 80046fe:	d102      	bne.n	8004706 <SD_SendCmd+0x68>
 8004700:	2387      	movs	r3, #135	; 0x87
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	e001      	b.n	800470a <SD_SendCmd+0x6c>
	else crc = 1;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fe85 	bl	800441c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	2b4c      	cmp	r3, #76	; 0x4c
 8004716:	d101      	bne.n	800471c <SD_SendCmd+0x7e>
 8004718:	f7ff feb4 	bl	8004484 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800471c:	230a      	movs	r3, #10
 800471e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8004720:	f7ff feb0 	bl	8004484 <SPI_RxByte>
 8004724:	4603      	mov	r3, r0
 8004726:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004728:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800472c:	2b00      	cmp	r3, #0
 800472e:	da05      	bge.n	800473c <SD_SendCmd+0x9e>
 8004730:	7bbb      	ldrb	r3, [r7, #14]
 8004732:	3b01      	subs	r3, #1
 8004734:	73bb      	strb	r3, [r7, #14]
 8004736:	7bbb      	ldrb	r3, [r7, #14]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f1      	bne.n	8004720 <SD_SendCmd+0x82>

	return res;
 800473c:	7b7b      	ldrb	r3, [r7, #13]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <SD_disk_initialize+0x14>
 8004758:	2301      	movs	r3, #1
 800475a:	e0d1      	b.n	8004900 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800475c:	4b6a      	ldr	r3, [pc, #424]	; (8004908 <SD_disk_initialize+0x1c0>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <SD_disk_initialize+0x2a>
 800476a:	4b67      	ldr	r3, [pc, #412]	; (8004908 <SD_disk_initialize+0x1c0>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	e0c6      	b.n	8004900 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8004772:	f7ff fecb 	bl	800450c <SD_PowerOn>

	/* slave select */
	SELECT();
 8004776:	f7ff fe35 	bl	80043e4 <SELECT>

	/* check disk type */
	type = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800477e:	2100      	movs	r1, #0
 8004780:	2040      	movs	r0, #64	; 0x40
 8004782:	f7ff ff8c 	bl	800469e <SD_SendCmd>
 8004786:	4603      	mov	r3, r0
 8004788:	2b01      	cmp	r3, #1
 800478a:	f040 80a1 	bne.w	80048d0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800478e:	4b5f      	ldr	r3, [pc, #380]	; (800490c <SD_disk_initialize+0x1c4>)
 8004790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004794:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004796:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800479a:	2048      	movs	r0, #72	; 0x48
 800479c:	f7ff ff7f 	bl	800469e <SD_SendCmd>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d155      	bne.n	8004852 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
 80047aa:	e00c      	b.n	80047c6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80047ac:	7bfc      	ldrb	r4, [r7, #15]
 80047ae:	f7ff fe69 	bl	8004484 <SPI_RxByte>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	f104 0310 	add.w	r3, r4, #16
 80047ba:	443b      	add	r3, r7
 80047bc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	3301      	adds	r3, #1
 80047c4:	73fb      	strb	r3, [r7, #15]
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d9ef      	bls.n	80047ac <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80047cc:	7abb      	ldrb	r3, [r7, #10]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d17e      	bne.n	80048d0 <SD_disk_initialize+0x188>
 80047d2:	7afb      	ldrb	r3, [r7, #11]
 80047d4:	2baa      	cmp	r3, #170	; 0xaa
 80047d6:	d17b      	bne.n	80048d0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80047d8:	2100      	movs	r1, #0
 80047da:	2077      	movs	r0, #119	; 0x77
 80047dc:	f7ff ff5f 	bl	800469e <SD_SendCmd>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d807      	bhi.n	80047f6 <SD_disk_initialize+0xae>
 80047e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80047ea:	2069      	movs	r0, #105	; 0x69
 80047ec:	f7ff ff57 	bl	800469e <SD_SendCmd>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d004      	beq.n	8004800 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80047f6:	4b45      	ldr	r3, [pc, #276]	; (800490c <SD_disk_initialize+0x1c4>)
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1ec      	bne.n	80047d8 <SD_disk_initialize+0x90>
 80047fe:	e000      	b.n	8004802 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004800:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004802:	4b42      	ldr	r3, [pc, #264]	; (800490c <SD_disk_initialize+0x1c4>)
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d062      	beq.n	80048d0 <SD_disk_initialize+0x188>
 800480a:	2100      	movs	r1, #0
 800480c:	207a      	movs	r0, #122	; 0x7a
 800480e:	f7ff ff46 	bl	800469e <SD_SendCmd>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d15b      	bne.n	80048d0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8004818:	2300      	movs	r3, #0
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	e00c      	b.n	8004838 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800481e:	7bfc      	ldrb	r4, [r7, #15]
 8004820:	f7ff fe30 	bl	8004484 <SPI_RxByte>
 8004824:	4603      	mov	r3, r0
 8004826:	461a      	mov	r2, r3
 8004828:	f104 0310 	add.w	r3, r4, #16
 800482c:	443b      	add	r3, r7
 800482e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	3301      	adds	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	2b03      	cmp	r3, #3
 800483c:	d9ef      	bls.n	800481e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800483e:	7a3b      	ldrb	r3, [r7, #8]
 8004840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <SD_disk_initialize+0x104>
 8004848:	230c      	movs	r3, #12
 800484a:	e000      	b.n	800484e <SD_disk_initialize+0x106>
 800484c:	2304      	movs	r3, #4
 800484e:	73bb      	strb	r3, [r7, #14]
 8004850:	e03e      	b.n	80048d0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004852:	2100      	movs	r1, #0
 8004854:	2077      	movs	r0, #119	; 0x77
 8004856:	f7ff ff22 	bl	800469e <SD_SendCmd>
 800485a:	4603      	mov	r3, r0
 800485c:	2b01      	cmp	r3, #1
 800485e:	d808      	bhi.n	8004872 <SD_disk_initialize+0x12a>
 8004860:	2100      	movs	r1, #0
 8004862:	2069      	movs	r0, #105	; 0x69
 8004864:	f7ff ff1b 	bl	800469e <SD_SendCmd>
 8004868:	4603      	mov	r3, r0
 800486a:	2b01      	cmp	r3, #1
 800486c:	d801      	bhi.n	8004872 <SD_disk_initialize+0x12a>
 800486e:	2302      	movs	r3, #2
 8004870:	e000      	b.n	8004874 <SD_disk_initialize+0x12c>
 8004872:	2301      	movs	r3, #1
 8004874:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004876:	7bbb      	ldrb	r3, [r7, #14]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d10e      	bne.n	800489a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800487c:	2100      	movs	r1, #0
 800487e:	2077      	movs	r0, #119	; 0x77
 8004880:	f7ff ff0d 	bl	800469e <SD_SendCmd>
 8004884:	4603      	mov	r3, r0
 8004886:	2b01      	cmp	r3, #1
 8004888:	d80e      	bhi.n	80048a8 <SD_disk_initialize+0x160>
 800488a:	2100      	movs	r1, #0
 800488c:	2069      	movs	r0, #105	; 0x69
 800488e:	f7ff ff06 	bl	800469e <SD_SendCmd>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <SD_disk_initialize+0x160>
 8004898:	e00c      	b.n	80048b4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800489a:	2100      	movs	r1, #0
 800489c:	2041      	movs	r0, #65	; 0x41
 800489e:	f7ff fefe 	bl	800469e <SD_SendCmd>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d004      	beq.n	80048b2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80048a8:	4b18      	ldr	r3, [pc, #96]	; (800490c <SD_disk_initialize+0x1c4>)
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e2      	bne.n	8004876 <SD_disk_initialize+0x12e>
 80048b0:	e000      	b.n	80048b4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80048b2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80048b4:	4b15      	ldr	r3, [pc, #84]	; (800490c <SD_disk_initialize+0x1c4>)
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <SD_disk_initialize+0x184>
 80048bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048c0:	2050      	movs	r0, #80	; 0x50
 80048c2:	f7ff feec 	bl	800469e <SD_SendCmd>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <SD_disk_initialize+0x188>
 80048cc:	2300      	movs	r3, #0
 80048ce:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80048d0:	4a0f      	ldr	r2, [pc, #60]	; (8004910 <SD_disk_initialize+0x1c8>)
 80048d2:	7bbb      	ldrb	r3, [r7, #14]
 80048d4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80048d6:	f7ff fd93 	bl	8004400 <DESELECT>
	SPI_RxByte();
 80048da:	f7ff fdd3 	bl	8004484 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80048de:	7bbb      	ldrb	r3, [r7, #14]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <SD_disk_initialize+0x1c0>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <SD_disk_initialize+0x1c0>)
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	e001      	b.n	80048fa <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80048f6:	f7ff fe4b 	bl	8004590 <SD_PowerOff>
	}

	return Stat;
 80048fa:	4b03      	ldr	r3, [pc, #12]	; (8004908 <SD_disk_initialize+0x1c0>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	b2db      	uxtb	r3, r3
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	bd90      	pop	{r4, r7, pc}
 8004908:	200000b8 	.word	0x200000b8
 800490c:	2000063d 	.word	0x2000063d
 8004910:	200004b2 	.word	0x200004b2

08004914 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <SD_disk_status+0x14>
 8004924:	2301      	movs	r3, #1
 8004926:	e002      	b.n	800492e <SD_disk_status+0x1a>
	return Stat;
 8004928:	4b03      	ldr	r3, [pc, #12]	; (8004938 <SD_disk_status+0x24>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	b2db      	uxtb	r3, r3
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	200000b8 	.word	0x200000b8

0800493c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	4603      	mov	r3, r0
 800494a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <SD_disk_read+0x1c>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <SD_disk_read+0x20>
 8004958:	2304      	movs	r3, #4
 800495a:	e051      	b.n	8004a00 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800495c:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <SD_disk_read+0xcc>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <SD_disk_read+0x32>
 800496a:	2303      	movs	r3, #3
 800496c:	e048      	b.n	8004a00 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800496e:	4b27      	ldr	r3, [pc, #156]	; (8004a0c <SD_disk_read+0xd0>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d102      	bne.n	8004980 <SD_disk_read+0x44>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	025b      	lsls	r3, r3, #9
 800497e:	607b      	str	r3, [r7, #4]

	SELECT();
 8004980:	f7ff fd30 	bl	80043e4 <SELECT>

	if (count == 1)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d111      	bne.n	80049ae <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	2051      	movs	r0, #81	; 0x51
 800498e:	f7ff fe86 	bl	800469e <SD_SendCmd>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d129      	bne.n	80049ec <SD_disk_read+0xb0>
 8004998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800499c:	68b8      	ldr	r0, [r7, #8]
 800499e:	f7ff fe0d 	bl	80045bc <SD_RxDataBlock>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d021      	beq.n	80049ec <SD_disk_read+0xb0>
 80049a8:	2300      	movs	r3, #0
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	e01e      	b.n	80049ec <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	2052      	movs	r0, #82	; 0x52
 80049b2:	f7ff fe74 	bl	800469e <SD_SendCmd>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d117      	bne.n	80049ec <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80049bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049c0:	68b8      	ldr	r0, [r7, #8]
 80049c2:	f7ff fdfb 	bl	80045bc <SD_RxDataBlock>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <SD_disk_read+0xa6>
				buff += 512;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80049d2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ed      	bne.n	80049bc <SD_disk_read+0x80>
 80049e0:	e000      	b.n	80049e4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80049e2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80049e4:	2100      	movs	r1, #0
 80049e6:	204c      	movs	r0, #76	; 0x4c
 80049e8:	f7ff fe59 	bl	800469e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80049ec:	f7ff fd08 	bl	8004400 <DESELECT>
	SPI_RxByte();
 80049f0:	f7ff fd48 	bl	8004484 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	bf14      	ite	ne
 80049fa:	2301      	movne	r3, #1
 80049fc:	2300      	moveq	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	200000b8 	.word	0x200000b8
 8004a0c:	200004b2 	.word	0x200004b2

08004a10 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <SD_disk_write+0x1c>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <SD_disk_write+0x20>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	e06b      	b.n	8004b08 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a30:	4b37      	ldr	r3, [pc, #220]	; (8004b10 <SD_disk_write+0x100>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <SD_disk_write+0x32>
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e062      	b.n	8004b08 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004a42:	4b33      	ldr	r3, [pc, #204]	; (8004b10 <SD_disk_write+0x100>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <SD_disk_write+0x44>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e059      	b.n	8004b08 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004a54:	4b2f      	ldr	r3, [pc, #188]	; (8004b14 <SD_disk_write+0x104>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d102      	bne.n	8004a66 <SD_disk_write+0x56>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	025b      	lsls	r3, r3, #9
 8004a64:	607b      	str	r3, [r7, #4]

	SELECT();
 8004a66:	f7ff fcbd 	bl	80043e4 <SELECT>

	if (count == 1)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d110      	bne.n	8004a92 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	2058      	movs	r0, #88	; 0x58
 8004a74:	f7ff fe13 	bl	800469e <SD_SendCmd>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d13a      	bne.n	8004af4 <SD_disk_write+0xe4>
 8004a7e:	21fe      	movs	r1, #254	; 0xfe
 8004a80:	68b8      	ldr	r0, [r7, #8]
 8004a82:	f7ff fdc9 	bl	8004618 <SD_TxDataBlock>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d033      	beq.n	8004af4 <SD_disk_write+0xe4>
			count = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	e030      	b.n	8004af4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <SD_disk_write+0x104>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	2077      	movs	r0, #119	; 0x77
 8004aa2:	f7ff fdfc 	bl	800469e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8004aa6:	6839      	ldr	r1, [r7, #0]
 8004aa8:	2057      	movs	r0, #87	; 0x57
 8004aaa:	f7ff fdf8 	bl	800469e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	2059      	movs	r0, #89	; 0x59
 8004ab2:	f7ff fdf4 	bl	800469e <SD_SendCmd>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d11b      	bne.n	8004af4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004abc:	21fc      	movs	r1, #252	; 0xfc
 8004abe:	68b8      	ldr	r0, [r7, #8]
 8004ac0:	f7ff fdaa 	bl	8004618 <SD_TxDataBlock>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <SD_disk_write+0xd0>
				buff += 512;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004ad0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1ee      	bne.n	8004abc <SD_disk_write+0xac>
 8004ade:	e000      	b.n	8004ae2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004ae0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8004ae2:	21fd      	movs	r1, #253	; 0xfd
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	f7ff fd97 	bl	8004618 <SD_TxDataBlock>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <SD_disk_write+0xe4>
			{
				count = 1;
 8004af0:	2301      	movs	r3, #1
 8004af2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004af4:	f7ff fc84 	bl	8004400 <DESELECT>
	SPI_RxByte();
 8004af8:	f7ff fcc4 	bl	8004484 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bf14      	ite	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	2300      	moveq	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	200000b8 	.word	0x200000b8
 8004b14:	200004b2 	.word	0x200004b2

08004b18 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b08b      	sub	sp, #44	; 0x2c
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	603a      	str	r2, [r7, #0]
 8004b22:	71fb      	strb	r3, [r7, #7]
 8004b24:	460b      	mov	r3, r1
 8004b26:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <SD_disk_ioctl+0x1e>
 8004b32:	2304      	movs	r3, #4
 8004b34:	e115      	b.n	8004d62 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8004b3c:	79bb      	ldrb	r3, [r7, #6]
 8004b3e:	2b05      	cmp	r3, #5
 8004b40:	d124      	bne.n	8004b8c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d012      	beq.n	8004b70 <SD_disk_ioctl+0x58>
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	dc1a      	bgt.n	8004b84 <SD_disk_ioctl+0x6c>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <SD_disk_ioctl+0x40>
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d006      	beq.n	8004b64 <SD_disk_ioctl+0x4c>
 8004b56:	e015      	b.n	8004b84 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004b58:	f7ff fd1a 	bl	8004590 <SD_PowerOff>
			res = RES_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004b62:	e0fc      	b.n	8004d5e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8004b64:	f7ff fcd2 	bl	800450c <SD_PowerOn>
			res = RES_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004b6e:	e0f6      	b.n	8004d5e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	1c5c      	adds	r4, r3, #1
 8004b74:	f7ff fd18 	bl	80045a8 <SD_CheckPower>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004b82:	e0ec      	b.n	8004d5e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8004b84:	2304      	movs	r3, #4
 8004b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b8a:	e0e8      	b.n	8004d5e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004b8c:	4b77      	ldr	r3, [pc, #476]	; (8004d6c <SD_disk_ioctl+0x254>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <SD_disk_ioctl+0x86>
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e0e1      	b.n	8004d62 <SD_disk_ioctl+0x24a>

		SELECT();
 8004b9e:	f7ff fc21 	bl	80043e4 <SELECT>

		switch (ctrl)
 8004ba2:	79bb      	ldrb	r3, [r7, #6]
 8004ba4:	2b0d      	cmp	r3, #13
 8004ba6:	f200 80cb 	bhi.w	8004d40 <SD_disk_ioctl+0x228>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <SD_disk_ioctl+0x98>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004cab 	.word	0x08004cab
 8004bb4:	08004be9 	.word	0x08004be9
 8004bb8:	08004c9b 	.word	0x08004c9b
 8004bbc:	08004d41 	.word	0x08004d41
 8004bc0:	08004d41 	.word	0x08004d41
 8004bc4:	08004d41 	.word	0x08004d41
 8004bc8:	08004d41 	.word	0x08004d41
 8004bcc:	08004d41 	.word	0x08004d41
 8004bd0:	08004d41 	.word	0x08004d41
 8004bd4:	08004d41 	.word	0x08004d41
 8004bd8:	08004d41 	.word	0x08004d41
 8004bdc:	08004cbd 	.word	0x08004cbd
 8004be0:	08004ce1 	.word	0x08004ce1
 8004be4:	08004d05 	.word	0x08004d05
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004be8:	2100      	movs	r1, #0
 8004bea:	2049      	movs	r0, #73	; 0x49
 8004bec:	f7ff fd57 	bl	800469e <SD_SendCmd>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 80a8 	bne.w	8004d48 <SD_disk_ioctl+0x230>
 8004bf8:	f107 030c 	add.w	r3, r7, #12
 8004bfc:	2110      	movs	r1, #16
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff fcdc 	bl	80045bc <SD_RxDataBlock>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 809e 	beq.w	8004d48 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8004c0c:	7b3b      	ldrb	r3, [r7, #12]
 8004c0e:	099b      	lsrs	r3, r3, #6
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d10e      	bne.n	8004c34 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004c16:	7d7b      	ldrb	r3, [r7, #21]
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	7d3b      	ldrb	r3, [r7, #20]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	4413      	add	r3, r2
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3301      	adds	r3, #1
 8004c28:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004c2a:	8bfb      	ldrh	r3, [r7, #30]
 8004c2c:	029a      	lsls	r2, r3, #10
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e02e      	b.n	8004c92 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004c34:	7c7b      	ldrb	r3, [r7, #17]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	7dbb      	ldrb	r3, [r7, #22]
 8004c3e:	09db      	lsrs	r3, r3, #7
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	4413      	add	r3, r2
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	7d7b      	ldrb	r3, [r7, #21]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f003 0306 	and.w	r3, r3, #6
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	4413      	add	r3, r2
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	3302      	adds	r3, #2
 8004c58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004c5c:	7d3b      	ldrb	r3, [r7, #20]
 8004c5e:	099b      	lsrs	r3, r3, #6
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	7cbb      	ldrb	r3, [r7, #18]
 8004c72:	029b      	lsls	r3, r3, #10
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3301      	adds	r3, #1
 8004c82:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004c84:	8bfa      	ldrh	r2, [r7, #30]
 8004c86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c8a:	3b09      	subs	r3, #9
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8004c98:	e056      	b.n	8004d48 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ca0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004ca8:	e055      	b.n	8004d56 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004caa:	f7ff fc15 	bl	80044d8 <SD_ReadyWait>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2bff      	cmp	r3, #255	; 0xff
 8004cb2:	d14b      	bne.n	8004d4c <SD_disk_ioctl+0x234>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004cba:	e047      	b.n	8004d4c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	2049      	movs	r0, #73	; 0x49
 8004cc0:	f7ff fced 	bl	800469e <SD_SendCmd>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d142      	bne.n	8004d50 <SD_disk_ioctl+0x238>
 8004cca:	2110      	movs	r1, #16
 8004ccc:	6a38      	ldr	r0, [r7, #32]
 8004cce:	f7ff fc75 	bl	80045bc <SD_RxDataBlock>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d03b      	beq.n	8004d50 <SD_disk_ioctl+0x238>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004cde:	e037      	b.n	8004d50 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	204a      	movs	r0, #74	; 0x4a
 8004ce4:	f7ff fcdb 	bl	800469e <SD_SendCmd>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d132      	bne.n	8004d54 <SD_disk_ioctl+0x23c>
 8004cee:	2110      	movs	r1, #16
 8004cf0:	6a38      	ldr	r0, [r7, #32]
 8004cf2:	f7ff fc63 	bl	80045bc <SD_RxDataBlock>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02b      	beq.n	8004d54 <SD_disk_ioctl+0x23c>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004d02:	e027      	b.n	8004d54 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004d04:	2100      	movs	r1, #0
 8004d06:	207a      	movs	r0, #122	; 0x7a
 8004d08:	f7ff fcc9 	bl	800469e <SD_SendCmd>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d116      	bne.n	8004d40 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8004d12:	2300      	movs	r3, #0
 8004d14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d18:	e00b      	b.n	8004d32 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8004d1a:	6a3c      	ldr	r4, [r7, #32]
 8004d1c:	1c63      	adds	r3, r4, #1
 8004d1e:	623b      	str	r3, [r7, #32]
 8004d20:	f7ff fbb0 	bl	8004484 <SPI_RxByte>
 8004d24:	4603      	mov	r3, r0
 8004d26:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004d28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d9ef      	bls.n	8004d1a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8004d40:	2304      	movs	r3, #4
 8004d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d46:	e006      	b.n	8004d56 <SD_disk_ioctl+0x23e>
			break;
 8004d48:	bf00      	nop
 8004d4a:	e004      	b.n	8004d56 <SD_disk_ioctl+0x23e>
			break;
 8004d4c:	bf00      	nop
 8004d4e:	e002      	b.n	8004d56 <SD_disk_ioctl+0x23e>
			break;
 8004d50:	bf00      	nop
 8004d52:	e000      	b.n	8004d56 <SD_disk_ioctl+0x23e>
			break;
 8004d54:	bf00      	nop
		}

		DESELECT();
 8004d56:	f7ff fb53 	bl	8004400 <DESELECT>
		SPI_RxByte();
 8004d5a:	f7ff fb93 	bl	8004484 <SPI_RxByte>
	}

	return res;
 8004d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	372c      	adds	r7, #44	; 0x2c
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd90      	pop	{r4, r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	200000b8 	.word	0x200000b8

08004d70 <getKeyPressed>:
	timer3Data = 0;
}


unsigned char getKeyPressed()
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
	return key;
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <getKeyPressed+0x14>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	b2db      	uxtb	r3, r3
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000624 	.word	0x20000624

08004d88 <resetKeyPressed>:

unsigned char resetKeyPressed()
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
	key = IDDLE;
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <resetKeyPressed+0x18>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	701a      	strb	r2, [r3, #0]
	HAL_Delay(250);
 8004d92:	20fa      	movs	r0, #250	; 0xfa
 8004d94:	f000 ff8a 	bl	8005cac <HAL_Delay>
}
 8004d98:	bf00      	nop
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000624 	.word	0x20000624

08004da4 <getUARTInstance>:

unsigned char* getUARTInstance()
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
	return &huart2;
 8004da8:	4b02      	ldr	r3, [pc, #8]	; (8004db4 <getUARTInstance+0x10>)
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	2000059c 	.word	0x2000059c

08004db8 <getTimer2Instance>:

unsigned char* getTimer2Instance()
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
	return &htim2;
 8004dbc:	4b02      	ldr	r3, [pc, #8]	; (8004dc8 <getTimer2Instance+0x10>)
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	2000050c 	.word	0x2000050c

08004dcc <getTimer3Instance>:

unsigned char* getTimer3Instance()
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
	return &htim3;
 8004dd0:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <getTimer3Instance+0x10>)
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20000554 	.word	0x20000554

08004de0 <getTimer2Variable>:

unsigned char getTimer2Variable()
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
	return sensorFlag;
 8004de4:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <getTimer2Variable+0x14>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	b2db      	uxtb	r3, r3
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	200000b9 	.word	0x200000b9

08004df8 <getTimer3Variable>:

unsigned char getTimer3Variable()
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
	return timer3Data;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <getTimer3Variable+0x14>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	b2db      	uxtb	r3, r3
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000628 	.word	0x20000628

08004e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e16:	f000 fee7 	bl	8005be8 <HAL_Init>
	  unsigned char menuSelect;
	  unsigned char menuDisplay;
	  unsigned char menuState;
  };

  struct Menu menuTesteMain = {IDDLE,IDDLE,IDDLE,IDDLE};
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
  struct Menu menuTesteSub = {IDDLE,IDDLE,IDDLE,IDDLE};
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60bb      	str	r3, [r7, #8]
  unsigned char displayUpdateStatus = IDDLE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	71fb      	strb	r3, [r7, #7]
  unsigned char cursorPosition[2] = {0,0};
 8004e26:	2300      	movs	r3, #0
 8004e28:	80bb      	strh	r3, [r7, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e2a:	f000 f9ad 	bl	8005188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e2e:	f000 fb11 	bl	8005454 <MX_GPIO_Init>
  MX_DMA_Init();
 8004e32:	f000 faf1 	bl	8005418 <MX_DMA_Init>
  MX_TIM2_Init();
 8004e36:	f000 fa23 	bl	8005280 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004e3a:	f000 fa75 	bl	8005328 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8004e3e:	f000 fac1 	bl	80053c4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004e42:	f004 f8ad 	bl	8008fa0 <MX_FATFS_Init>
  MX_SPI1_Init();
 8004e46:	f000 f9e5 	bl	8005214 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, 1);
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	49c1      	ldr	r1, [pc, #772]	; (8005154 <main+0x344>)
 8004e4e:	48c2      	ldr	r0, [pc, #776]	; (8005158 <main+0x348>)
 8004e50:	f003 fb81 	bl	8008556 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8004e54:	4bc1      	ldr	r3, [pc, #772]	; (800515c <main+0x34c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4bc0      	ldr	r3, [pc, #768]	; (800515c <main+0x34c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8004e64:	2201      	movs	r2, #1
 8004e66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e6a:	48bd      	ldr	r0, [pc, #756]	; (8005160 <main+0x350>)
 8004e6c:	f001 fc72 	bl	8006754 <HAL_GPIO_WritePin>
  homeDataDisplay(appNameMsg,companyNameMsg,appVersionMsg);
 8004e70:	4bbc      	ldr	r3, [pc, #752]	; (8005164 <main+0x354>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4abc      	ldr	r2, [pc, #752]	; (8005168 <main+0x358>)
 8004e76:	6811      	ldr	r1, [r2, #0]
 8004e78:	4abc      	ldr	r2, [pc, #752]	; (800516c <main+0x35c>)
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe fd58 	bl	8003932 <homeDataDisplay>
  while(1)
  {
	  switch(menuTesteMain.menuState)
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	2b05      	cmp	r3, #5
 8004e86:	d8fc      	bhi.n	8004e82 <main+0x72>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <main+0x80>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ea9 	.word	0x08004ea9
 8004e94:	08004ed1 	.word	0x08004ed1
 8004e98:	08004f49 	.word	0x08004f49
 8004e9c:	08004fc7 	.word	0x08004fc7
 8004ea0:	08005045 	.word	0x08005045
 8004ea4:	080050c1 	.word	0x080050c1
	  {
		  case IDDLE:
			  if(key == AVANCAR)
 8004ea8:	4bb1      	ldr	r3, [pc, #708]	; (8005170 <main+0x360>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b41      	cmp	r3, #65	; 0x41
 8004eb0:	f040 8144 	bne.w	800513c <main+0x32c>
			  {
				  resetKeyPressed();
 8004eb4:	f7ff ff68 	bl	8004d88 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004eb8:	1d3a      	adds	r2, r7, #4
 8004eba:	1dfb      	adds	r3, r7, #7
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fd fdf2 	bl	8002aa8 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	f000 fc05 	bl	80056d4 <getNextMain>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	73fb      	strb	r3, [r7, #15]
			  }
		  break;
 8004ece:	e135      	b.n	800513c <main+0x32c>

		  case START_TEST:
			  updateUserMsg(0,0,startUserMsg,&displayUpdateStatus);
 8004ed0:	4ba8      	ldr	r3, [pc, #672]	; (8005174 <main+0x364>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	1dfb      	adds	r3, r7, #7
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	2000      	movs	r0, #0
 8004eda:	f7fd fdc7 	bl	8002a6c <updateUserMsg>
			  if(key == AVANCAR)
 8004ede:	4ba4      	ldr	r3, [pc, #656]	; (8005170 <main+0x360>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b41      	cmp	r3, #65	; 0x41
 8004ee6:	d10d      	bne.n	8004f04 <main+0xf4>
			  {
				  resetKeyPressed();
 8004ee8:	f7ff ff4e 	bl	8004d88 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004eec:	1d3a      	adds	r2, r7, #4
 8004eee:	1dfb      	adds	r3, r7, #7
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fd fdd8 	bl	8002aa8 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(CONSULT_DATA);
 8004ef8:	2002      	movs	r0, #2
 8004efa:	f000 fbeb 	bl	80056d4 <getNextMain>
 8004efe:	4603      	mov	r3, r0
 8004f00:	73fb      	strb	r3, [r7, #15]
				  menuTesteMain.menuSelect = menuTesteMain.menuState;
				  initStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
			  }
		  break;
 8004f02:	e11d      	b.n	8005140 <main+0x330>
			  else if(key == CONFIRMAR)
 8004f04:	4b9a      	ldr	r3, [pc, #616]	; (8005170 <main+0x360>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b43      	cmp	r3, #67	; 0x43
 8004f0c:	f040 8118 	bne.w	8005140 <main+0x330>
				  resetKeyPressed();
 8004f10:	f7ff ff3a 	bl	8004d88 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004f14:	1d3a      	adds	r2, r7, #4
 8004f16:	1dfb      	adds	r3, r7, #7
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fd fdc4 	bl	8002aa8 <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 8004f20:	f107 030c 	add.w	r3, r7, #12
 8004f24:	3303      	adds	r3, #3
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fbe6 	bl	80056f8 <setSelectMain>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	73fb      	strb	r3, [r7, #15]
				  menuTesteMain.menuSelect = menuTesteMain.menuState;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	737b      	strb	r3, [r7, #13]
				  initStateMachine(&menuTesteSub);
 8004f34:	f107 0308 	add.w	r3, r7, #8
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe f80d 	bl	8002f58 <initStateMachine>
				  menuTesteSub.menuState = IDDLE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 8004f42:	2300      	movs	r3, #0
 8004f44:	727b      	strb	r3, [r7, #9]
		  break;
 8004f46:	e0fb      	b.n	8005140 <main+0x330>

		  case CONSULT_DATA:
			  updateUserMsg(0,0,consultUserMsg,&displayUpdateStatus);
 8004f48:	4b8b      	ldr	r3, [pc, #556]	; (8005178 <main+0x368>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	1dfb      	adds	r3, r7, #7
 8004f4e:	2100      	movs	r1, #0
 8004f50:	2000      	movs	r0, #0
 8004f52:	f7fd fd8b 	bl	8002a6c <updateUserMsg>
			  if(key == AVANCAR)
 8004f56:	4b86      	ldr	r3, [pc, #536]	; (8005170 <main+0x360>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b41      	cmp	r3, #65	; 0x41
 8004f5e:	d10d      	bne.n	8004f7c <main+0x16c>
			  {
				  resetKeyPressed();
 8004f60:	f7ff ff12 	bl	8004d88 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004f64:	1d3a      	adds	r2, r7, #4
 8004f66:	1dfb      	adds	r3, r7, #7
 8004f68:	4611      	mov	r1, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fd fd9c 	bl	8002aa8 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(CONFIG_SENSOR);
 8004f70:	2003      	movs	r0, #3
 8004f72:	f000 fbaf 	bl	80056d4 <getNextMain>
 8004f76:	4603      	mov	r3, r0
 8004f78:	73fb      	strb	r3, [r7, #15]
				 consultStateMachine(&menuTesteSub);
				 menuTesteMain.menuState = getNextMain(START_TEST);
				 menuTesteSub.menuState = IDDLE;
				 menuTesteSub.menuSelect = IDDLE;
			  }
		  break;
 8004f7a:	e0e3      	b.n	8005144 <main+0x334>
			  else if(key == CONFIRMAR)
 8004f7c:	4b7c      	ldr	r3, [pc, #496]	; (8005170 <main+0x360>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b43      	cmp	r3, #67	; 0x43
 8004f84:	f040 80de 	bne.w	8005144 <main+0x334>
				  resetKeyPressed();
 8004f88:	f7ff fefe 	bl	8004d88 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004f8c:	1d3a      	adds	r2, r7, #4
 8004f8e:	1dfb      	adds	r3, r7, #7
 8004f90:	4611      	mov	r1, r2
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fd fd88 	bl	8002aa8 <readyUserInterface>
				 menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 8004f98:	f107 030c 	add.w	r3, r7, #12
 8004f9c:	3303      	adds	r3, #3
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fbaa 	bl	80056f8 <setSelectMain>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73fb      	strb	r3, [r7, #15]
				 consultStateMachine(&menuTesteSub);
 8004fa8:	f107 0308 	add.w	r3, r7, #8
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fc fc17 	bl	80017e0 <consultStateMachine>
				 menuTesteMain.menuState = getNextMain(START_TEST);
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	f000 fb8e 	bl	80056d4 <getNextMain>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	73fb      	strb	r3, [r7, #15]
				 menuTesteSub.menuState = IDDLE;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	72fb      	strb	r3, [r7, #11]
				 menuTesteSub.menuSelect = IDDLE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	727b      	strb	r3, [r7, #9]
		  break;
 8004fc4:	e0be      	b.n	8005144 <main+0x334>

		  case CONFIG_SENSOR:
			  updateUserMsg(0,0,configUserMsg,&displayUpdateStatus);
 8004fc6:	4b6d      	ldr	r3, [pc, #436]	; (800517c <main+0x36c>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	1dfb      	adds	r3, r7, #7
 8004fcc:	2100      	movs	r1, #0
 8004fce:	2000      	movs	r0, #0
 8004fd0:	f7fd fd4c 	bl	8002a6c <updateUserMsg>
			  if(key == AVANCAR)
 8004fd4:	4b66      	ldr	r3, [pc, #408]	; (8005170 <main+0x360>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b41      	cmp	r3, #65	; 0x41
 8004fdc:	d10d      	bne.n	8004ffa <main+0x1ea>
			  {
				  resetKeyPressed();
 8004fde:	f7ff fed3 	bl	8004d88 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004fe2:	1d3a      	adds	r2, r7, #4
 8004fe4:	1dfb      	adds	r3, r7, #7
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fd fd5d 	bl	8002aa8 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(EXPORT_DATA);
 8004fee:	2004      	movs	r0, #4
 8004ff0:	f000 fb70 	bl	80056d4 <getNextMain>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]
				  configStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 8004ff8:	e0a6      	b.n	8005148 <main+0x338>
			  else if(key == CONFIRMAR)
 8004ffa:	4b5d      	ldr	r3, [pc, #372]	; (8005170 <main+0x360>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b43      	cmp	r3, #67	; 0x43
 8005002:	f040 80a1 	bne.w	8005148 <main+0x338>
				  resetKeyPressed();
 8005006:	f7ff febf 	bl	8004d88 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800500a:	1d3a      	adds	r2, r7, #4
 800500c:	1dfb      	adds	r3, r7, #7
 800500e:	4611      	mov	r1, r2
 8005010:	4618      	mov	r0, r3
 8005012:	f7fd fd49 	bl	8002aa8 <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 8005016:	f107 030c 	add.w	r3, r7, #12
 800501a:	3303      	adds	r3, #3
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fb6b 	bl	80056f8 <setSelectMain>
 8005022:	4603      	mov	r3, r0
 8005024:	73fb      	strb	r3, [r7, #15]
				  configStateMachine(&menuTesteSub);
 8005026:	f107 0308 	add.w	r3, r7, #8
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb fed4 	bl	8000dd8 <configStateMachine>
				  menuTesteSub.menuState = IDDLE;
 8005030:	2300      	movs	r3, #0
 8005032:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 8005034:	2300      	movs	r3, #0
 8005036:	727b      	strb	r3, [r7, #9]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005038:	2001      	movs	r0, #1
 800503a:	f000 fb4b 	bl	80056d4 <getNextMain>
 800503e:	4603      	mov	r3, r0
 8005040:	73fb      	strb	r3, [r7, #15]
		  break;
 8005042:	e081      	b.n	8005148 <main+0x338>

		  case EXPORT_DATA:
			  updateUserMsg(0,0,exportUserMsg,&displayUpdateStatus);
 8005044:	4b4e      	ldr	r3, [pc, #312]	; (8005180 <main+0x370>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	1dfb      	adds	r3, r7, #7
 800504a:	2100      	movs	r1, #0
 800504c:	2000      	movs	r0, #0
 800504e:	f7fd fd0d 	bl	8002a6c <updateUserMsg>
			  if(key == AVANCAR)
 8005052:	4b47      	ldr	r3, [pc, #284]	; (8005170 <main+0x360>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b41      	cmp	r3, #65	; 0x41
 800505a:	d10d      	bne.n	8005078 <main+0x268>
			  {
				  resetKeyPressed();
 800505c:	f7ff fe94 	bl	8004d88 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8005060:	1d3a      	adds	r2, r7, #4
 8005062:	1dfb      	adds	r3, r7, #7
 8005064:	4611      	mov	r1, r2
 8005066:	4618      	mov	r0, r3
 8005068:	f7fd fd1e 	bl	8002aa8 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(ERASE_DATA);
 800506c:	2005      	movs	r0, #5
 800506e:	f000 fb31 	bl	80056d4 <getNextMain>
 8005072:	4603      	mov	r3, r0
 8005074:	73fb      	strb	r3, [r7, #15]
				  exportStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 8005076:	e069      	b.n	800514c <main+0x33c>
			  else if(key == CONFIRMAR)
 8005078:	4b3d      	ldr	r3, [pc, #244]	; (8005170 <main+0x360>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b43      	cmp	r3, #67	; 0x43
 8005080:	d164      	bne.n	800514c <main+0x33c>
				  resetKeyPressed();
 8005082:	f7ff fe81 	bl	8004d88 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8005086:	1d3a      	adds	r2, r7, #4
 8005088:	1dfb      	adds	r3, r7, #7
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f7fd fd0b 	bl	8002aa8 <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 8005092:	f107 030c 	add.w	r3, r7, #12
 8005096:	3303      	adds	r3, #3
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fb2d 	bl	80056f8 <setSelectMain>
 800509e:	4603      	mov	r3, r0
 80050a0:	73fb      	strb	r3, [r7, #15]
				  exportStateMachine(&menuTesteSub);
 80050a2:	f107 0308 	add.w	r3, r7, #8
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fd fd30 	bl	8002b0c <exportStateMachine>
				  menuTesteSub.menuState = IDDLE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	727b      	strb	r3, [r7, #9]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 80050b4:	2001      	movs	r0, #1
 80050b6:	f000 fb0d 	bl	80056d4 <getNextMain>
 80050ba:	4603      	mov	r3, r0
 80050bc:	73fb      	strb	r3, [r7, #15]
		  break;
 80050be:	e045      	b.n	800514c <main+0x33c>

		  case ERASE_DATA:
			  updateUserMsg(0,0,eraseUserMsg,&displayUpdateStatus);
 80050c0:	4b30      	ldr	r3, [pc, #192]	; (8005184 <main+0x374>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	1dfb      	adds	r3, r7, #7
 80050c6:	2100      	movs	r1, #0
 80050c8:	2000      	movs	r0, #0
 80050ca:	f7fd fccf 	bl	8002a6c <updateUserMsg>
			  if(key == AVANCAR)
 80050ce:	4b28      	ldr	r3, [pc, #160]	; (8005170 <main+0x360>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b41      	cmp	r3, #65	; 0x41
 80050d6:	d10d      	bne.n	80050f4 <main+0x2e4>
			  {
				  resetKeyPressed();
 80050d8:	f7ff fe56 	bl	8004d88 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80050dc:	1d3a      	adds	r2, r7, #4
 80050de:	1dfb      	adds	r3, r7, #7
 80050e0:	4611      	mov	r1, r2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fd fce0 	bl	8002aa8 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(START_TEST);
 80050e8:	2001      	movs	r0, #1
 80050ea:	f000 faf3 	bl	80056d4 <getNextMain>
 80050ee:	4603      	mov	r3, r0
 80050f0:	73fb      	strb	r3, [r7, #15]
				  eraseStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 80050f2:	e02d      	b.n	8005150 <main+0x340>
			  else if(key == CONFIRMAR)
 80050f4:	4b1e      	ldr	r3, [pc, #120]	; (8005170 <main+0x360>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b43      	cmp	r3, #67	; 0x43
 80050fc:	d128      	bne.n	8005150 <main+0x340>
				  resetKeyPressed();
 80050fe:	f7ff fe43 	bl	8004d88 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8005102:	1d3a      	adds	r2, r7, #4
 8005104:	1dfb      	adds	r3, r7, #7
 8005106:	4611      	mov	r1, r2
 8005108:	4618      	mov	r0, r3
 800510a:	f7fd fccd 	bl	8002aa8 <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 800510e:	f107 030c 	add.w	r3, r7, #12
 8005112:	3303      	adds	r3, #3
 8005114:	4618      	mov	r0, r3
 8005116:	f000 faef 	bl	80056f8 <setSelectMain>
 800511a:	4603      	mov	r3, r0
 800511c:	73fb      	strb	r3, [r7, #15]
				  eraseStateMachine(&menuTesteSub);
 800511e:	f107 0308 	add.w	r3, r7, #8
 8005122:	4618      	mov	r0, r3
 8005124:	f7fb fdbe 	bl	8000ca4 <eraseStateMachine>
				  menuTesteSub.menuState = IDDLE;
 8005128:	2300      	movs	r3, #0
 800512a:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 800512c:	2300      	movs	r3, #0
 800512e:	727b      	strb	r3, [r7, #9]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005130:	2001      	movs	r0, #1
 8005132:	f000 facf 	bl	80056d4 <getNextMain>
 8005136:	4603      	mov	r3, r0
 8005138:	73fb      	strb	r3, [r7, #15]
		  break;
 800513a:	e009      	b.n	8005150 <main+0x340>
		  break;
 800513c:	bf00      	nop
 800513e:	e6a0      	b.n	8004e82 <main+0x72>
		  break;
 8005140:	bf00      	nop
 8005142:	e69e      	b.n	8004e82 <main+0x72>
		  break;
 8005144:	bf00      	nop
 8005146:	e69c      	b.n	8004e82 <main+0x72>
		  break;
 8005148:	bf00      	nop
 800514a:	e69a      	b.n	8004e82 <main+0x72>
		  break;
 800514c:	bf00      	nop
 800514e:	e698      	b.n	8004e82 <main+0x72>
		  break;
 8005150:	bf00      	nop
	  switch(menuTesteMain.menuState)
 8005152:	e696      	b.n	8004e82 <main+0x72>
 8005154:	20000630 	.word	0x20000630
 8005158:	2000059c 	.word	0x2000059c
 800515c:	200005e0 	.word	0x200005e0
 8005160:	40011000 	.word	0x40011000
 8005164:	20000014 	.word	0x20000014
 8005168:	20000018 	.word	0x20000018
 800516c:	2000001c 	.word	0x2000001c
 8005170:	20000624 	.word	0x20000624
 8005174:	20000020 	.word	0x20000020
 8005178:	20000058 	.word	0x20000058
 800517c:	20000068 	.word	0x20000068
 8005180:	2000009c 	.word	0x2000009c
 8005184:	200000a8 	.word	0x200000a8

08005188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b090      	sub	sp, #64	; 0x40
 800518c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800518e:	f107 0318 	add.w	r3, r7, #24
 8005192:	2228      	movs	r2, #40	; 0x28
 8005194:	2100      	movs	r1, #0
 8005196:	4618      	mov	r0, r3
 8005198:	f003 fff6 	bl	8009188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800519c:	1d3b      	adds	r3, r7, #4
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	605a      	str	r2, [r3, #4]
 80051a4:	609a      	str	r2, [r3, #8]
 80051a6:	60da      	str	r2, [r3, #12]
 80051a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80051aa:	2301      	movs	r3, #1
 80051ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80051b4:	2300      	movs	r3, #0
 80051b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051b8:	2301      	movs	r3, #1
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051bc:	2302      	movs	r3, #2
 80051be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80051c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051cc:	f107 0318 	add.w	r3, r7, #24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f001 fb09 	bl	80067e8 <HAL_RCC_OscConfig>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80051dc:	f000 fa74 	bl	80056c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051e0:	230f      	movs	r3, #15
 80051e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051e4:	2302      	movs	r3, #2
 80051e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80051f6:	1d3b      	adds	r3, r7, #4
 80051f8:	2102      	movs	r1, #2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 fd76 	bl	8006cec <HAL_RCC_ClockConfig>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005206:	f000 fa5f 	bl	80056c8 <Error_Handler>
  }
}
 800520a:	bf00      	nop
 800520c:	3740      	adds	r7, #64	; 0x40
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005218:	4b17      	ldr	r3, [pc, #92]	; (8005278 <MX_SPI1_Init+0x64>)
 800521a:	4a18      	ldr	r2, [pc, #96]	; (800527c <MX_SPI1_Init+0x68>)
 800521c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800521e:	4b16      	ldr	r3, [pc, #88]	; (8005278 <MX_SPI1_Init+0x64>)
 8005220:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005224:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005226:	4b14      	ldr	r3, [pc, #80]	; (8005278 <MX_SPI1_Init+0x64>)
 8005228:	2200      	movs	r2, #0
 800522a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800522c:	4b12      	ldr	r3, [pc, #72]	; (8005278 <MX_SPI1_Init+0x64>)
 800522e:	2200      	movs	r2, #0
 8005230:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005232:	4b11      	ldr	r3, [pc, #68]	; (8005278 <MX_SPI1_Init+0x64>)
 8005234:	2200      	movs	r2, #0
 8005236:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <MX_SPI1_Init+0x64>)
 800523a:	2200      	movs	r2, #0
 800523c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800523e:	4b0e      	ldr	r3, [pc, #56]	; (8005278 <MX_SPI1_Init+0x64>)
 8005240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005244:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <MX_SPI1_Init+0x64>)
 8005248:	2208      	movs	r2, #8
 800524a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <MX_SPI1_Init+0x64>)
 800524e:	2200      	movs	r2, #0
 8005250:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005252:	4b09      	ldr	r3, [pc, #36]	; (8005278 <MX_SPI1_Init+0x64>)
 8005254:	2200      	movs	r2, #0
 8005256:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005258:	4b07      	ldr	r3, [pc, #28]	; (8005278 <MX_SPI1_Init+0x64>)
 800525a:	2200      	movs	r2, #0
 800525c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800525e:	4b06      	ldr	r3, [pc, #24]	; (8005278 <MX_SPI1_Init+0x64>)
 8005260:	220a      	movs	r2, #10
 8005262:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005264:	4804      	ldr	r0, [pc, #16]	; (8005278 <MX_SPI1_Init+0x64>)
 8005266:	f001 fed9 	bl	800701c <HAL_SPI_Init>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005270:	f000 fa2a 	bl	80056c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005274:	bf00      	nop
 8005276:	bd80      	pop	{r7, pc}
 8005278:	200004b4 	.word	0x200004b4
 800527c:	40013000 	.word	0x40013000

08005280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08c      	sub	sp, #48	; 0x30
 8005284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005286:	f107 030c 	add.w	r3, r7, #12
 800528a:	2224      	movs	r2, #36	; 0x24
 800528c:	2100      	movs	r1, #0
 800528e:	4618      	mov	r0, r3
 8005290:	f003 ff7a 	bl	8009188 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005294:	1d3b      	adds	r3, r7, #4
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800529c:	4b21      	ldr	r3, [pc, #132]	; (8005324 <MX_TIM2_Init+0xa4>)
 800529e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80052a4:	4b1f      	ldr	r3, [pc, #124]	; (8005324 <MX_TIM2_Init+0xa4>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052aa:	4b1e      	ldr	r3, [pc, #120]	; (8005324 <MX_TIM2_Init+0xa4>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80052b0:	4b1c      	ldr	r3, [pc, #112]	; (8005324 <MX_TIM2_Init+0xa4>)
 80052b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052b8:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <MX_TIM2_Init+0xa4>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052be:	4b19      	ldr	r3, [pc, #100]	; (8005324 <MX_TIM2_Init+0xa4>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80052c4:	2303      	movs	r3, #3
 80052c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80052c8:	2302      	movs	r3, #2
 80052ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80052cc:	2301      	movs	r3, #1
 80052ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80052d4:	230f      	movs	r3, #15
 80052d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80052d8:	2300      	movs	r3, #0
 80052da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80052dc:	2301      	movs	r3, #1
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80052e0:	2300      	movs	r3, #0
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80052e4:	230f      	movs	r3, #15
 80052e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80052e8:	f107 030c 	add.w	r3, r7, #12
 80052ec:	4619      	mov	r1, r3
 80052ee:	480d      	ldr	r0, [pc, #52]	; (8005324 <MX_TIM2_Init+0xa4>)
 80052f0:	f002 fb6c 	bl	80079cc <HAL_TIM_Encoder_Init>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80052fa:	f000 f9e5 	bl	80056c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052fe:	2300      	movs	r3, #0
 8005300:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005306:	1d3b      	adds	r3, r7, #4
 8005308:	4619      	mov	r1, r3
 800530a:	4806      	ldr	r0, [pc, #24]	; (8005324 <MX_TIM2_Init+0xa4>)
 800530c:	f003 f866 	bl	80083dc <HAL_TIMEx_MasterConfigSynchronization>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005316:	f000 f9d7 	bl	80056c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800531a:	bf00      	nop
 800531c:	3730      	adds	r7, #48	; 0x30
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	2000050c 	.word	0x2000050c

08005328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800532e:	f107 0308 	add.w	r3, r7, #8
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	605a      	str	r2, [r3, #4]
 8005338:	609a      	str	r2, [r3, #8]
 800533a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800533c:	463b      	mov	r3, r7
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005344:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <MX_TIM3_Init+0x94>)
 8005346:	4a1e      	ldr	r2, [pc, #120]	; (80053c0 <MX_TIM3_Init+0x98>)
 8005348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800534a:	4b1c      	ldr	r3, [pc, #112]	; (80053bc <MX_TIM3_Init+0x94>)
 800534c:	2247      	movs	r2, #71	; 0x47
 800534e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005350:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <MX_TIM3_Init+0x94>)
 8005352:	2200      	movs	r2, #0
 8005354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8005356:	4b19      	ldr	r3, [pc, #100]	; (80053bc <MX_TIM3_Init+0x94>)
 8005358:	f240 32e7 	movw	r2, #999	; 0x3e7
 800535c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800535e:	4b17      	ldr	r3, [pc, #92]	; (80053bc <MX_TIM3_Init+0x94>)
 8005360:	2200      	movs	r2, #0
 8005362:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005364:	4b15      	ldr	r3, [pc, #84]	; (80053bc <MX_TIM3_Init+0x94>)
 8005366:	2200      	movs	r2, #0
 8005368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800536a:	4814      	ldr	r0, [pc, #80]	; (80053bc <MX_TIM3_Init+0x94>)
 800536c:	f002 fa5e 	bl	800782c <HAL_TIM_Base_Init>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8005376:	f000 f9a7 	bl	80056c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800537a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800537e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005380:	f107 0308 	add.w	r3, r7, #8
 8005384:	4619      	mov	r1, r3
 8005386:	480d      	ldr	r0, [pc, #52]	; (80053bc <MX_TIM3_Init+0x94>)
 8005388:	f002 fe2d 	bl	8007fe6 <HAL_TIM_ConfigClockSource>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8005392:	f000 f999 	bl	80056c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005396:	2300      	movs	r3, #0
 8005398:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800539a:	2300      	movs	r3, #0
 800539c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800539e:	463b      	mov	r3, r7
 80053a0:	4619      	mov	r1, r3
 80053a2:	4806      	ldr	r0, [pc, #24]	; (80053bc <MX_TIM3_Init+0x94>)
 80053a4:	f003 f81a 	bl	80083dc <HAL_TIMEx_MasterConfigSynchronization>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80053ae:	f000 f98b 	bl	80056c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80053b2:	bf00      	nop
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20000554 	.word	0x20000554
 80053c0:	40000400 	.word	0x40000400

080053c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80053c8:	4b11      	ldr	r3, [pc, #68]	; (8005410 <MX_USART2_UART_Init+0x4c>)
 80053ca:	4a12      	ldr	r2, [pc, #72]	; (8005414 <MX_USART2_UART_Init+0x50>)
 80053cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80053ce:	4b10      	ldr	r3, [pc, #64]	; (8005410 <MX_USART2_UART_Init+0x4c>)
 80053d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80053d6:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <MX_USART2_UART_Init+0x4c>)
 80053d8:	2200      	movs	r2, #0
 80053da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <MX_USART2_UART_Init+0x4c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80053e2:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <MX_USART2_UART_Init+0x4c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053e8:	4b09      	ldr	r3, [pc, #36]	; (8005410 <MX_USART2_UART_Init+0x4c>)
 80053ea:	220c      	movs	r2, #12
 80053ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053ee:	4b08      	ldr	r3, [pc, #32]	; (8005410 <MX_USART2_UART_Init+0x4c>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <MX_USART2_UART_Init+0x4c>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053fa:	4805      	ldr	r0, [pc, #20]	; (8005410 <MX_USART2_UART_Init+0x4c>)
 80053fc:	f003 f85e 	bl	80084bc <HAL_UART_Init>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005406:	f000 f95f 	bl	80056c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	2000059c 	.word	0x2000059c
 8005414:	40004400 	.word	0x40004400

08005418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800541e:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <MX_DMA_Init+0x38>)
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <MX_DMA_Init+0x38>)
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	6153      	str	r3, [r2, #20]
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <MX_DMA_Init+0x38>)
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005436:	2200      	movs	r2, #0
 8005438:	2100      	movs	r1, #0
 800543a:	2010      	movs	r0, #16
 800543c:	f000 fd31 	bl	8005ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005440:	2010      	movs	r0, #16
 8005442:	f000 fd4a 	bl	8005eda <HAL_NVIC_EnableIRQ>

}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40021000 	.word	0x40021000

08005454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800545a:	f107 0310 	add.w	r3, r7, #16
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	609a      	str	r2, [r3, #8]
 8005466:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005468:	4b47      	ldr	r3, [pc, #284]	; (8005588 <MX_GPIO_Init+0x134>)
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	4a46      	ldr	r2, [pc, #280]	; (8005588 <MX_GPIO_Init+0x134>)
 800546e:	f043 0310 	orr.w	r3, r3, #16
 8005472:	6193      	str	r3, [r2, #24]
 8005474:	4b44      	ldr	r3, [pc, #272]	; (8005588 <MX_GPIO_Init+0x134>)
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005480:	4b41      	ldr	r3, [pc, #260]	; (8005588 <MX_GPIO_Init+0x134>)
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	4a40      	ldr	r2, [pc, #256]	; (8005588 <MX_GPIO_Init+0x134>)
 8005486:	f043 0320 	orr.w	r3, r3, #32
 800548a:	6193      	str	r3, [r2, #24]
 800548c:	4b3e      	ldr	r3, [pc, #248]	; (8005588 <MX_GPIO_Init+0x134>)
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005498:	4b3b      	ldr	r3, [pc, #236]	; (8005588 <MX_GPIO_Init+0x134>)
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	4a3a      	ldr	r2, [pc, #232]	; (8005588 <MX_GPIO_Init+0x134>)
 800549e:	f043 0304 	orr.w	r3, r3, #4
 80054a2:	6193      	str	r3, [r2, #24]
 80054a4:	4b38      	ldr	r3, [pc, #224]	; (8005588 <MX_GPIO_Init+0x134>)
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054b0:	4b35      	ldr	r3, [pc, #212]	; (8005588 <MX_GPIO_Init+0x134>)
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	4a34      	ldr	r2, [pc, #208]	; (8005588 <MX_GPIO_Init+0x134>)
 80054b6:	f043 0308 	orr.w	r3, r3, #8
 80054ba:	6193      	str	r3, [r2, #24]
 80054bc:	4b32      	ldr	r3, [pc, #200]	; (8005588 <MX_GPIO_Init+0x134>)
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	603b      	str	r3, [r7, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80054c8:	2200      	movs	r2, #0
 80054ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054ce:	482f      	ldr	r0, [pc, #188]	; (800558c <MX_GPIO_Init+0x138>)
 80054d0:	f001 f940 	bl	8006754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 80054d4:	2200      	movs	r2, #0
 80054d6:	f649 7110 	movw	r1, #40720	; 0x9f10
 80054da:	482d      	ldr	r0, [pc, #180]	; (8005590 <MX_GPIO_Init+0x13c>)
 80054dc:	f001 f93a 	bl	8006754 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 80054e0:	2200      	movs	r2, #0
 80054e2:	f24f 2108 	movw	r1, #61960	; 0xf208
 80054e6:	482b      	ldr	r0, [pc, #172]	; (8005594 <MX_GPIO_Init+0x140>)
 80054e8:	f001 f934 	bl	8006754 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80054ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054f2:	2301      	movs	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fa:	2302      	movs	r3, #2
 80054fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80054fe:	f107 0310 	add.w	r3, r7, #16
 8005502:	4619      	mov	r1, r3
 8005504:	4821      	ldr	r0, [pc, #132]	; (800558c <MX_GPIO_Init+0x138>)
 8005506:	f000 ffa1 	bl	800644c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LCD_D3_Pin LCD_D2_Pin LCD_D1_Pin
                           LCD_D0_Pin LCD_EN_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 800550a:	f649 7310 	movw	r3, #40720	; 0x9f10
 800550e:	613b      	str	r3, [r7, #16]
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005510:	2301      	movs	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005514:	2300      	movs	r3, #0
 8005516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005518:	2302      	movs	r3, #2
 800551a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800551c:	f107 0310 	add.w	r3, r7, #16
 8005520:	4619      	mov	r1, r3
 8005522:	481b      	ldr	r0, [pc, #108]	; (8005590 <MX_GPIO_Init+0x13c>)
 8005524:	f000 ff92 	bl	800644c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_RS_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8005528:	f24f 2308 	movw	r3, #61960	; 0xf208
 800552c:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800552e:	2301      	movs	r3, #1
 8005530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005532:	2300      	movs	r3, #0
 8005534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005536:	2302      	movs	r3, #2
 8005538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800553a:	f107 0310 	add.w	r3, r7, #16
 800553e:	4619      	mov	r1, r3
 8005540:	4814      	ldr	r0, [pc, #80]	; (8005594 <MX_GPIO_Init+0x140>)
 8005542:	f000 ff83 	bl	800644c <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_MENU_Pin BT_AVANCA_Pin BT_SELECT_Pin BT_STOP_Pin
                           BT_INSERT_Pin */
  GPIO_InitStruct.Pin = BT_MENU_Pin|BT_AVANCA_Pin|BT_SELECT_Pin|BT_STOP_Pin
 8005546:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800554a:	613b      	str	r3, [r7, #16]
                          |BT_INSERT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800554c:	4b12      	ldr	r3, [pc, #72]	; (8005598 <MX_GPIO_Init+0x144>)
 800554e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005550:	2301      	movs	r3, #1
 8005552:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005554:	f107 0310 	add.w	r3, r7, #16
 8005558:	4619      	mov	r1, r3
 800555a:	480e      	ldr	r0, [pc, #56]	; (8005594 <MX_GPIO_Init+0x140>)
 800555c:	f000 ff76 	bl	800644c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005560:	2200      	movs	r2, #0
 8005562:	2100      	movs	r1, #0
 8005564:	200a      	movs	r0, #10
 8005566:	f000 fc9c 	bl	8005ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800556a:	200a      	movs	r0, #10
 800556c:	f000 fcb5 	bl	8005eda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005570:	2200      	movs	r2, #0
 8005572:	2100      	movs	r1, #0
 8005574:	2017      	movs	r0, #23
 8005576:	f000 fc94 	bl	8005ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800557a:	2017      	movs	r0, #23
 800557c:	f000 fcad 	bl	8005eda <HAL_NVIC_EnableIRQ>

}
 8005580:	bf00      	nop
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40021000 	.word	0x40021000
 800558c:	40011000 	.word	0x40011000
 8005590:	40010800 	.word	0x40010800
 8005594:	40010c00 	.word	0x40010c00
 8005598:	10210000 	.word	0x10210000

0800559c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	timer3Count+=1;  //1ms
 80055a4:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3301      	adds	r3, #1
 80055aa:	4a0b      	ldr	r2, [pc, #44]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80055ac:	6013      	str	r3, [r2, #0]
	if(timer3Count == 100) //100ms
 80055ae:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b64      	cmp	r3, #100	; 0x64
 80055b4:	d10c      	bne.n	80055d0 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		timer3Data += 1; //cada unidade aqui deve ser multiplicada por 100 para ter o valor real em ms.
 80055b6:	4b09      	ldr	r3, [pc, #36]	; (80055dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3301      	adds	r3, #1
 80055bc:	4a07      	ldr	r2, [pc, #28]	; (80055dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80055be:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80055c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055c4:	4806      	ldr	r0, [pc, #24]	; (80055e0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80055c6:	f001 f8dd 	bl	8006784 <HAL_GPIO_TogglePin>
		timer3Count = 0;
 80055ca:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
	}

}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	2000062c 	.word	0x2000062c
 80055dc:	20000628 	.word	0x20000628
 80055e0:	40011000 	.word	0x40011000

080055e4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	807b      	strh	r3, [r7, #2]

	uartBuffer[0]+=1;
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_UARTEx_RxEventCallback+0x3c>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	3301      	adds	r3, #1
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	4b09      	ldr	r3, [pc, #36]	; (8005620 <HAL_UARTEx_RxEventCallback+0x3c>)
 80055fc:	701a      	strb	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 80055fe:	2205      	movs	r2, #5
 8005600:	4907      	ldr	r1, [pc, #28]	; (8005620 <HAL_UARTEx_RxEventCallback+0x3c>)
 8005602:	4808      	ldr	r0, [pc, #32]	; (8005624 <HAL_UARTEx_RxEventCallback+0x40>)
 8005604:	f002 ffa7 	bl	8008556 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8005608:	4b07      	ldr	r3, [pc, #28]	; (8005628 <HAL_UARTEx_RxEventCallback+0x44>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <HAL_UARTEx_RxEventCallback+0x44>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0204 	bic.w	r2, r2, #4
 8005616:	601a      	str	r2, [r3, #0]

}
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20000630 	.word	0x20000630
 8005624:	2000059c 	.word	0x2000059c
 8005628:	200005e0 	.word	0x200005e0

0800562c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	if(htim->Channel == 2) sensorFlag = 1;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	7f1b      	ldrb	r3, [r3, #28]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d103      	bne.n	8005644 <HAL_TIM_IC_CaptureCallback+0x18>
 800563c:	4b07      	ldr	r3, [pc, #28]	; (800565c <HAL_TIM_IC_CaptureCallback+0x30>)
 800563e:	2201      	movs	r2, #1
 8005640:	701a      	strb	r2, [r3, #0]
//	arraySample[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].sampleNum;
//	arrayAltDistance[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].ucAltDistance;
//	arrayVooTime[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].uiVooTime;
//	arrayReadingTime[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].ulReadingTime;
//	sampleCount++;
}
 8005642:	e006      	b.n	8005652 <HAL_TIM_IC_CaptureCallback+0x26>
	else if(htim->Channel == 1) sensorFlag = 0;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	7f1b      	ldrb	r3, [r3, #28]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d102      	bne.n	8005652 <HAL_TIM_IC_CaptureCallback+0x26>
 800564c:	4b03      	ldr	r3, [pc, #12]	; (800565c <HAL_TIM_IC_CaptureCallback+0x30>)
 800564e:	2200      	movs	r2, #0
 8005650:	701a      	strb	r2, [r3, #0]
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr
 800565c:	200000b9 	.word	0x200000b9

08005660 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005670:	d012      	beq.n	8005698 <HAL_GPIO_EXTI_Callback+0x38>
 8005672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005676:	dc1f      	bgt.n	80056b8 <HAL_GPIO_EXTI_Callback+0x58>
 8005678:	2b80      	cmp	r3, #128	; 0x80
 800567a:	d019      	beq.n	80056b0 <HAL_GPIO_EXTI_Callback+0x50>
 800567c:	2b80      	cmp	r3, #128	; 0x80
 800567e:	dc1b      	bgt.n	80056b8 <HAL_GPIO_EXTI_Callback+0x58>
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d011      	beq.n	80056a8 <HAL_GPIO_EXTI_Callback+0x48>
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	dc17      	bgt.n	80056b8 <HAL_GPIO_EXTI_Callback+0x58>
 8005688:	2b10      	cmp	r3, #16
 800568a:	d009      	beq.n	80056a0 <HAL_GPIO_EXTI_Callback+0x40>
 800568c:	2b20      	cmp	r3, #32
 800568e:	d113      	bne.n	80056b8 <HAL_GPIO_EXTI_Callback+0x58>
	{
		case BT_AVANCA_Pin:
			key = AVANCAR;
 8005690:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <HAL_GPIO_EXTI_Callback+0x64>)
 8005692:	2241      	movs	r2, #65	; 0x41
 8005694:	701a      	strb	r2, [r3, #0]
		break;
 8005696:	e00f      	b.n	80056b8 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_INSERT_Pin:
			key = INSERIR;
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <HAL_GPIO_EXTI_Callback+0x64>)
 800569a:	2249      	movs	r2, #73	; 0x49
 800569c:	701a      	strb	r2, [r3, #0]
		break;
 800569e:	e00b      	b.n	80056b8 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_MENU_Pin:
			key = MENU;
 80056a0:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <HAL_GPIO_EXTI_Callback+0x64>)
 80056a2:	224d      	movs	r2, #77	; 0x4d
 80056a4:	701a      	strb	r2, [r3, #0]
		break;
 80056a6:	e007      	b.n	80056b8 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_SELECT_Pin:
			key = CONFIRMAR;
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <HAL_GPIO_EXTI_Callback+0x64>)
 80056aa:	2243      	movs	r2, #67	; 0x43
 80056ac:	701a      	strb	r2, [r3, #0]
		break;
 80056ae:	e003      	b.n	80056b8 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_STOP_Pin:
			key = PARAR;
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <HAL_GPIO_EXTI_Callback+0x64>)
 80056b2:	2250      	movs	r2, #80	; 0x50
 80056b4:	701a      	strb	r2, [r3, #0]
		break;
 80056b6:	bf00      	nop
	}

}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000624 	.word	0x20000624

080056c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056cc:	b672      	cpsid	i
}
 80056ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80056d0:	e7fe      	b.n	80056d0 <Error_Handler+0x8>
	...

080056d4 <getNextMain>:

struct Menu menuMain ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextMain(unsigned char nextState)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]

    menuMain.menuNext = nextState;
 80056de:	4a05      	ldr	r2, [pc, #20]	; (80056f4 <getNextMain+0x20>)
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	7013      	strb	r3, [r2, #0]
    return menuMain.menuNext;
 80056e4:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <getNextMain+0x20>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	20000638 	.word	0x20000638

080056f8 <setSelectMain>:

unsigned char setSelectMain(unsigned char *selectedState)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
    unsigned char state = *selectedState;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	73fb      	strb	r3, [r7, #15]
    menuMain.menuSelect = state;
 8005706:	4a05      	ldr	r2, [pc, #20]	; (800571c <setSelectMain+0x24>)
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	7053      	strb	r3, [r2, #1]
    return menuMain.menuSelect;
 800570c:	4b03      	ldr	r3, [pc, #12]	; (800571c <setSelectMain+0x24>)
 800570e:	785b      	ldrb	r3, [r3, #1]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000638 	.word	0x20000638

08005720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005726:	4b15      	ldr	r3, [pc, #84]	; (800577c <HAL_MspInit+0x5c>)
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	4a14      	ldr	r2, [pc, #80]	; (800577c <HAL_MspInit+0x5c>)
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	6193      	str	r3, [r2, #24]
 8005732:	4b12      	ldr	r3, [pc, #72]	; (800577c <HAL_MspInit+0x5c>)
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <HAL_MspInit+0x5c>)
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	4a0e      	ldr	r2, [pc, #56]	; (800577c <HAL_MspInit+0x5c>)
 8005744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005748:	61d3      	str	r3, [r2, #28]
 800574a:	4b0c      	ldr	r3, [pc, #48]	; (800577c <HAL_MspInit+0x5c>)
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005756:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <HAL_MspInit+0x60>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	4a04      	ldr	r2, [pc, #16]	; (8005780 <HAL_MspInit+0x60>)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr
 800577c:	40021000 	.word	0x40021000
 8005780:	40010000 	.word	0x40010000

08005784 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800578c:	f107 0310 	add.w	r3, r7, #16
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	609a      	str	r2, [r3, #8]
 8005798:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1b      	ldr	r2, [pc, #108]	; (800580c <HAL_SPI_MspInit+0x88>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d12f      	bne.n	8005804 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80057a4:	4b1a      	ldr	r3, [pc, #104]	; (8005810 <HAL_SPI_MspInit+0x8c>)
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	4a19      	ldr	r2, [pc, #100]	; (8005810 <HAL_SPI_MspInit+0x8c>)
 80057aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057ae:	6193      	str	r3, [r2, #24]
 80057b0:	4b17      	ldr	r3, [pc, #92]	; (8005810 <HAL_SPI_MspInit+0x8c>)
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057bc:	4b14      	ldr	r3, [pc, #80]	; (8005810 <HAL_SPI_MspInit+0x8c>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	4a13      	ldr	r2, [pc, #76]	; (8005810 <HAL_SPI_MspInit+0x8c>)
 80057c2:	f043 0304 	orr.w	r3, r3, #4
 80057c6:	6193      	str	r3, [r2, #24]
 80057c8:	4b11      	ldr	r3, [pc, #68]	; (8005810 <HAL_SPI_MspInit+0x8c>)
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80057d4:	23a0      	movs	r3, #160	; 0xa0
 80057d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d8:	2302      	movs	r3, #2
 80057da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80057dc:	2303      	movs	r3, #3
 80057de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e0:	f107 0310 	add.w	r3, r7, #16
 80057e4:	4619      	mov	r1, r3
 80057e6:	480b      	ldr	r0, [pc, #44]	; (8005814 <HAL_SPI_MspInit+0x90>)
 80057e8:	f000 fe30 	bl	800644c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80057ec:	2340      	movs	r3, #64	; 0x40
 80057ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057f8:	f107 0310 	add.w	r3, r7, #16
 80057fc:	4619      	mov	r1, r3
 80057fe:	4805      	ldr	r0, [pc, #20]	; (8005814 <HAL_SPI_MspInit+0x90>)
 8005800:	f000 fe24 	bl	800644c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005804:	bf00      	nop
 8005806:	3720      	adds	r7, #32
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40013000 	.word	0x40013000
 8005810:	40021000 	.word	0x40021000
 8005814:	40010800 	.word	0x40010800

08005818 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005820:	f107 0310 	add.w	r3, r7, #16
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	605a      	str	r2, [r3, #4]
 800582a:	609a      	str	r2, [r3, #8]
 800582c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d12b      	bne.n	8005890 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <HAL_TIM_Encoder_MspInit+0x80>)
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	4a16      	ldr	r2, [pc, #88]	; (8005898 <HAL_TIM_Encoder_MspInit+0x80>)
 800583e:	f043 0301 	orr.w	r3, r3, #1
 8005842:	61d3      	str	r3, [r2, #28]
 8005844:	4b14      	ldr	r3, [pc, #80]	; (8005898 <HAL_TIM_Encoder_MspInit+0x80>)
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005850:	4b11      	ldr	r3, [pc, #68]	; (8005898 <HAL_TIM_Encoder_MspInit+0x80>)
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	4a10      	ldr	r2, [pc, #64]	; (8005898 <HAL_TIM_Encoder_MspInit+0x80>)
 8005856:	f043 0304 	orr.w	r3, r3, #4
 800585a:	6193      	str	r3, [r2, #24]
 800585c:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <HAL_TIM_Encoder_MspInit+0x80>)
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005868:	2303      	movs	r3, #3
 800586a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005870:	2300      	movs	r3, #0
 8005872:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005874:	f107 0310 	add.w	r3, r7, #16
 8005878:	4619      	mov	r1, r3
 800587a:	4808      	ldr	r0, [pc, #32]	; (800589c <HAL_TIM_Encoder_MspInit+0x84>)
 800587c:	f000 fde6 	bl	800644c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005880:	2200      	movs	r2, #0
 8005882:	2100      	movs	r1, #0
 8005884:	201c      	movs	r0, #28
 8005886:	f000 fb0c 	bl	8005ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800588a:	201c      	movs	r0, #28
 800588c:	f000 fb25 	bl	8005eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005890:	bf00      	nop
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40021000 	.word	0x40021000
 800589c:	40010800 	.word	0x40010800

080058a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a0d      	ldr	r2, [pc, #52]	; (80058e4 <HAL_TIM_Base_MspInit+0x44>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d113      	bne.n	80058da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80058b2:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <HAL_TIM_Base_MspInit+0x48>)
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4a0c      	ldr	r2, [pc, #48]	; (80058e8 <HAL_TIM_Base_MspInit+0x48>)
 80058b8:	f043 0302 	orr.w	r3, r3, #2
 80058bc:	61d3      	str	r3, [r2, #28]
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <HAL_TIM_Base_MspInit+0x48>)
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80058ca:	2200      	movs	r2, #0
 80058cc:	2100      	movs	r1, #0
 80058ce:	201d      	movs	r0, #29
 80058d0:	f000 fae7 	bl	8005ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80058d4:	201d      	movs	r0, #29
 80058d6:	f000 fb00 	bl	8005eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40021000 	.word	0x40021000

080058ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058f4:	f107 0310 	add.w	r3, r7, #16
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	605a      	str	r2, [r3, #4]
 80058fe:	609a      	str	r2, [r3, #8]
 8005900:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a32      	ldr	r2, [pc, #200]	; (80059d0 <HAL_UART_MspInit+0xe4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d15d      	bne.n	80059c8 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800590c:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <HAL_UART_MspInit+0xe8>)
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	4a30      	ldr	r2, [pc, #192]	; (80059d4 <HAL_UART_MspInit+0xe8>)
 8005912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005916:	61d3      	str	r3, [r2, #28]
 8005918:	4b2e      	ldr	r3, [pc, #184]	; (80059d4 <HAL_UART_MspInit+0xe8>)
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005924:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <HAL_UART_MspInit+0xe8>)
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	4a2a      	ldr	r2, [pc, #168]	; (80059d4 <HAL_UART_MspInit+0xe8>)
 800592a:	f043 0304 	orr.w	r3, r3, #4
 800592e:	6193      	str	r3, [r2, #24]
 8005930:	4b28      	ldr	r3, [pc, #160]	; (80059d4 <HAL_UART_MspInit+0xe8>)
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800593c:	2304      	movs	r3, #4
 800593e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005940:	2302      	movs	r3, #2
 8005942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005944:	2303      	movs	r3, #3
 8005946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005948:	f107 0310 	add.w	r3, r7, #16
 800594c:	4619      	mov	r1, r3
 800594e:	4822      	ldr	r0, [pc, #136]	; (80059d8 <HAL_UART_MspInit+0xec>)
 8005950:	f000 fd7c 	bl	800644c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005954:	2308      	movs	r3, #8
 8005956:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595c:	2300      	movs	r3, #0
 800595e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005960:	f107 0310 	add.w	r3, r7, #16
 8005964:	4619      	mov	r1, r3
 8005966:	481c      	ldr	r0, [pc, #112]	; (80059d8 <HAL_UART_MspInit+0xec>)
 8005968:	f000 fd70 	bl	800644c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <HAL_UART_MspInit+0xf0>)
 800596e:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <HAL_UART_MspInit+0xf4>)
 8005970:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005972:	4b1a      	ldr	r3, [pc, #104]	; (80059dc <HAL_UART_MspInit+0xf0>)
 8005974:	2200      	movs	r2, #0
 8005976:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005978:	4b18      	ldr	r3, [pc, #96]	; (80059dc <HAL_UART_MspInit+0xf0>)
 800597a:	2200      	movs	r2, #0
 800597c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800597e:	4b17      	ldr	r3, [pc, #92]	; (80059dc <HAL_UART_MspInit+0xf0>)
 8005980:	2280      	movs	r2, #128	; 0x80
 8005982:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <HAL_UART_MspInit+0xf0>)
 8005986:	2200      	movs	r2, #0
 8005988:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800598a:	4b14      	ldr	r3, [pc, #80]	; (80059dc <HAL_UART_MspInit+0xf0>)
 800598c:	2200      	movs	r2, #0
 800598e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005990:	4b12      	ldr	r3, [pc, #72]	; (80059dc <HAL_UART_MspInit+0xf0>)
 8005992:	2200      	movs	r2, #0
 8005994:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005996:	4b11      	ldr	r3, [pc, #68]	; (80059dc <HAL_UART_MspInit+0xf0>)
 8005998:	2200      	movs	r2, #0
 800599a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800599c:	480f      	ldr	r0, [pc, #60]	; (80059dc <HAL_UART_MspInit+0xf0>)
 800599e:	f000 fab7 	bl	8005f10 <HAL_DMA_Init>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80059a8:	f7ff fe8e 	bl	80056c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a0b      	ldr	r2, [pc, #44]	; (80059dc <HAL_UART_MspInit+0xf0>)
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
 80059b2:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <HAL_UART_MspInit+0xf0>)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80059b8:	2200      	movs	r2, #0
 80059ba:	2100      	movs	r1, #0
 80059bc:	2026      	movs	r0, #38	; 0x26
 80059be:	f000 fa70 	bl	8005ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80059c2:	2026      	movs	r0, #38	; 0x26
 80059c4:	f000 fa89 	bl	8005eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80059c8:	bf00      	nop
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40004400 	.word	0x40004400
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40010800 	.word	0x40010800
 80059dc:	200005e0 	.word	0x200005e0
 80059e0:	4002006c 	.word	0x4002006c

080059e4 <SDTimerHandler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1,Timer2;

void SDTimerHandler(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
	if(Timer1>0)
 80059e8:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <SDTimerHandler+0x3c>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d006      	beq.n	8005a00 <SDTimerHandler+0x1c>
		Timer1--;
 80059f2:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <SDTimerHandler+0x3c>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <SDTimerHandler+0x3c>)
 80059fe:	701a      	strb	r2, [r3, #0]

	if(Timer2>0)
 8005a00:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <SDTimerHandler+0x40>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d006      	beq.n	8005a18 <SDTimerHandler+0x34>
		Timer2--;
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <SDTimerHandler+0x40>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <SDTimerHandler+0x40>)
 8005a16:	701a      	strb	r2, [r3, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr
 8005a20:	2000063d 	.word	0x2000063d
 8005a24:	2000063e 	.word	0x2000063e

08005a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a2c:	e7fe      	b.n	8005a2c <NMI_Handler+0x4>

08005a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a32:	e7fe      	b.n	8005a32 <HardFault_Handler+0x4>

08005a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a38:	e7fe      	b.n	8005a38 <MemManage_Handler+0x4>

08005a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a3e:	e7fe      	b.n	8005a3e <BusFault_Handler+0x4>

08005a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a44:	e7fe      	b.n	8005a44 <UsageFault_Handler+0x4>

08005a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a46:	b480      	push	{r7}
 8005a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a4a:	bf00      	nop
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr

08005a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a52:	b480      	push	{r7}
 8005a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a56:	bf00      	nop
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr

08005a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a62:	bf00      	nop
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr
	...

08005a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <SysTick_Handler+0x30>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	3301      	adds	r3, #1
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	4b08      	ldr	r3, [pc, #32]	; (8005a9c <SysTick_Handler+0x30>)
 8005a7c:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt >=10)
 8005a7e:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <SysTick_Handler+0x30>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b09      	cmp	r3, #9
 8005a86:	d904      	bls.n	8005a92 <SysTick_Handler+0x26>
		{
			FatFsCnt = 0;
 8005a88:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <SysTick_Handler+0x30>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	701a      	strb	r2, [r3, #0]
			SDTimerHandler();
 8005a8e:	f7ff ffa9 	bl	80059e4 <SDTimerHandler>
		}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a92:	f000 f8ef 	bl	8005c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a96:	bf00      	nop
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000063c 	.word	0x2000063c

08005aa0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_MENU_Pin);
 8005aa4:	2010      	movs	r0, #16
 8005aa6:	f000 fe87 	bl	80067b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005aaa:	bf00      	nop
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005ab4:	4802      	ldr	r0, [pc, #8]	; (8005ac0 <DMA1_Channel6_IRQHandler+0x10>)
 8005ab6:	f000 fb95 	bl	80061e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005aba:	bf00      	nop
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	200005e0 	.word	0x200005e0

08005ac4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_AVANCA_Pin);
 8005ac8:	2020      	movs	r0, #32
 8005aca:	f000 fe75 	bl	80067b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_SELECT_Pin);
 8005ace:	2040      	movs	r0, #64	; 0x40
 8005ad0:	f000 fe72 	bl	80067b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_STOP_Pin);
 8005ad4:	2080      	movs	r0, #128	; 0x80
 8005ad6:	f000 fe6f 	bl	80067b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_INSERT_Pin);
 8005ada:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ade:	f000 fe6b 	bl	80067b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005ae2:	bf00      	nop
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005aec:	4802      	ldr	r0, [pc, #8]	; (8005af8 <TIM2_IRQHandler+0x10>)
 8005aee:	f002 f972 	bl	8007dd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005af2:	bf00      	nop
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	2000050c 	.word	0x2000050c

08005afc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005b00:	4802      	ldr	r0, [pc, #8]	; (8005b0c <TIM3_IRQHandler+0x10>)
 8005b02:	f002 f968 	bl	8007dd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005b06:	bf00      	nop
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000554 	.word	0x20000554

08005b10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005b14:	4802      	ldr	r0, [pc, #8]	; (8005b20 <USART2_IRQHandler+0x10>)
 8005b16:	f002 fd6d 	bl	80085f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005b1a:	bf00      	nop
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	2000059c 	.word	0x2000059c

08005b24 <_sbrk>:
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	4a14      	ldr	r2, [pc, #80]	; (8005b80 <_sbrk+0x5c>)
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <_sbrk+0x60>)
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	4b13      	ldr	r3, [pc, #76]	; (8005b88 <_sbrk+0x64>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d102      	bne.n	8005b46 <_sbrk+0x22>
 8005b40:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <_sbrk+0x64>)
 8005b42:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <_sbrk+0x68>)
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <_sbrk+0x64>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d207      	bcs.n	8005b64 <_sbrk+0x40>
 8005b54:	f003 faea 	bl	800912c <__errno>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	220c      	movs	r2, #12
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b62:	e009      	b.n	8005b78 <_sbrk+0x54>
 8005b64:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <_sbrk+0x64>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <_sbrk+0x64>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4413      	add	r3, r2
 8005b72:	4a05      	ldr	r2, [pc, #20]	; (8005b88 <_sbrk+0x64>)
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20005000 	.word	0x20005000
 8005b84:	00000400 	.word	0x00000400
 8005b88:	20000644 	.word	0x20000644
 8005b8c:	20000698 	.word	0x20000698

08005b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <Reset_Handler>:
 8005b9c:	480c      	ldr	r0, [pc, #48]	; (8005bd0 <LoopFillZerobss+0x12>)
 8005b9e:	490d      	ldr	r1, [pc, #52]	; (8005bd4 <LoopFillZerobss+0x16>)
 8005ba0:	4a0d      	ldr	r2, [pc, #52]	; (8005bd8 <LoopFillZerobss+0x1a>)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e002      	b.n	8005bac <LoopCopyDataInit>

08005ba6 <CopyDataInit>:
 8005ba6:	58d4      	ldr	r4, [r2, r3]
 8005ba8:	50c4      	str	r4, [r0, r3]
 8005baa:	3304      	adds	r3, #4

08005bac <LoopCopyDataInit>:
 8005bac:	18c4      	adds	r4, r0, r3
 8005bae:	428c      	cmp	r4, r1
 8005bb0:	d3f9      	bcc.n	8005ba6 <CopyDataInit>
 8005bb2:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <LoopFillZerobss+0x1e>)
 8005bb4:	4c0a      	ldr	r4, [pc, #40]	; (8005be0 <LoopFillZerobss+0x22>)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e001      	b.n	8005bbe <LoopFillZerobss>

08005bba <FillZerobss>:
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	3204      	adds	r2, #4

08005bbe <LoopFillZerobss>:
 8005bbe:	42a2      	cmp	r2, r4
 8005bc0:	d3fb      	bcc.n	8005bba <FillZerobss>
 8005bc2:	f7ff ffe5 	bl	8005b90 <SystemInit>
 8005bc6:	f003 fab7 	bl	8009138 <__libc_init_array>
 8005bca:	f7ff f921 	bl	8004e10 <main>
 8005bce:	4770      	bx	lr
 8005bd0:	20000000 	.word	0x20000000
 8005bd4:	200001a8 	.word	0x200001a8
 8005bd8:	0800be44 	.word	0x0800be44
 8005bdc:	200001a8 	.word	0x200001a8
 8005be0:	20000694 	.word	0x20000694

08005be4 <ADC1_2_IRQHandler>:
 8005be4:	e7fe      	b.n	8005be4 <ADC1_2_IRQHandler>
	...

08005be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005bec:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <HAL_Init+0x28>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a07      	ldr	r2, [pc, #28]	; (8005c10 <HAL_Init+0x28>)
 8005bf2:	f043 0310 	orr.w	r3, r3, #16
 8005bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bf8:	2003      	movs	r0, #3
 8005bfa:	f000 f947 	bl	8005e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bfe:	200f      	movs	r0, #15
 8005c00:	f000 f808 	bl	8005c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005c04:	f7ff fd8c 	bl	8005720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40022000 	.word	0x40022000

08005c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005c1c:	4b12      	ldr	r3, [pc, #72]	; (8005c68 <HAL_InitTick+0x54>)
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <HAL_InitTick+0x58>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	4619      	mov	r1, r3
 8005c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 f95f 	bl	8005ef6 <HAL_SYSTICK_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e00e      	b.n	8005c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b0f      	cmp	r3, #15
 8005c46:	d80a      	bhi.n	8005c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c48:	2200      	movs	r2, #0
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	f000 f927 	bl	8005ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c54:	4a06      	ldr	r2, [pc, #24]	; (8005c70 <HAL_InitTick+0x5c>)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e000      	b.n	8005c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	200000c0 	.word	0x200000c0
 8005c6c:	200000c8 	.word	0x200000c8
 8005c70:	200000c4 	.word	0x200000c4

08005c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <HAL_IncTick+0x1c>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_IncTick+0x20>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4413      	add	r3, r2
 8005c84:	4a03      	ldr	r2, [pc, #12]	; (8005c94 <HAL_IncTick+0x20>)
 8005c86:	6013      	str	r3, [r2, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr
 8005c90:	200000c8 	.word	0x200000c8
 8005c94:	20000648 	.word	0x20000648

08005c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c9c:	4b02      	ldr	r3, [pc, #8]	; (8005ca8 <HAL_GetTick+0x10>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr
 8005ca8:	20000648 	.word	0x20000648

08005cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005cb4:	f7ff fff0 	bl	8005c98 <HAL_GetTick>
 8005cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d005      	beq.n	8005cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005cc6:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <HAL_Delay+0x44>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005cd2:	bf00      	nop
 8005cd4:	f7ff ffe0 	bl	8005c98 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d8f7      	bhi.n	8005cd4 <HAL_Delay+0x28>
  {
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	200000c8 	.word	0x200000c8

08005cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d04:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <__NVIC_SetPriorityGrouping+0x44>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d10:	4013      	ands	r3, r2
 8005d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d26:	4a04      	ldr	r2, [pc, #16]	; (8005d38 <__NVIC_SetPriorityGrouping+0x44>)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	60d3      	str	r3, [r2, #12]
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	e000ed00 	.word	0xe000ed00

08005d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d40:	4b04      	ldr	r3, [pc, #16]	; (8005d54 <__NVIC_GetPriorityGrouping+0x18>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	0a1b      	lsrs	r3, r3, #8
 8005d46:	f003 0307 	and.w	r3, r3, #7
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	e000ed00 	.word	0xe000ed00

08005d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	db0b      	blt.n	8005d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	f003 021f 	and.w	r2, r3, #31
 8005d70:	4906      	ldr	r1, [pc, #24]	; (8005d8c <__NVIC_EnableIRQ+0x34>)
 8005d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	2001      	movs	r0, #1
 8005d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr
 8005d8c:	e000e100 	.word	0xe000e100

08005d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	4603      	mov	r3, r0
 8005d98:	6039      	str	r1, [r7, #0]
 8005d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	db0a      	blt.n	8005dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	490c      	ldr	r1, [pc, #48]	; (8005ddc <__NVIC_SetPriority+0x4c>)
 8005daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dae:	0112      	lsls	r2, r2, #4
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	440b      	add	r3, r1
 8005db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005db8:	e00a      	b.n	8005dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	4908      	ldr	r1, [pc, #32]	; (8005de0 <__NVIC_SetPriority+0x50>)
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	3b04      	subs	r3, #4
 8005dc8:	0112      	lsls	r2, r2, #4
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	440b      	add	r3, r1
 8005dce:	761a      	strb	r2, [r3, #24]
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bc80      	pop	{r7}
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	e000e100 	.word	0xe000e100
 8005de0:	e000ed00 	.word	0xe000ed00

08005de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b089      	sub	sp, #36	; 0x24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	f1c3 0307 	rsb	r3, r3, #7
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	bf28      	it	cs
 8005e02:	2304      	movcs	r3, #4
 8005e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	2b06      	cmp	r3, #6
 8005e0c:	d902      	bls.n	8005e14 <NVIC_EncodePriority+0x30>
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3b03      	subs	r3, #3
 8005e12:	e000      	b.n	8005e16 <NVIC_EncodePriority+0x32>
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e18:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	43da      	mvns	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	401a      	ands	r2, r3
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	fa01 f303 	lsl.w	r3, r1, r3
 8005e36:	43d9      	mvns	r1, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e3c:	4313      	orrs	r3, r2
         );
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3724      	adds	r7, #36	; 0x24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e58:	d301      	bcc.n	8005e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e00f      	b.n	8005e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <SysTick_Config+0x40>)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e66:	210f      	movs	r1, #15
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	f7ff ff90 	bl	8005d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <SysTick_Config+0x40>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e76:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <SysTick_Config+0x40>)
 8005e78:	2207      	movs	r2, #7
 8005e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	e000e010 	.word	0xe000e010

08005e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff ff2d 	bl	8005cf4 <__NVIC_SetPriorityGrouping>
}
 8005e9a:	bf00      	nop
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
 8005eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005eb4:	f7ff ff42 	bl	8005d3c <__NVIC_GetPriorityGrouping>
 8005eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	6978      	ldr	r0, [r7, #20]
 8005ec0:	f7ff ff90 	bl	8005de4 <NVIC_EncodePriority>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff ff5f 	bl	8005d90 <__NVIC_SetPriority>
}
 8005ed2:	bf00      	nop
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b082      	sub	sp, #8
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff ff35 	bl	8005d58 <__NVIC_EnableIRQ>
}
 8005eee:	bf00      	nop
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b082      	sub	sp, #8
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff ffa2 	bl	8005e48 <SysTick_Config>
 8005f04:	4603      	mov	r3, r0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e043      	b.n	8005fae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4b22      	ldr	r3, [pc, #136]	; (8005fb8 <HAL_DMA_Init+0xa8>)
 8005f2e:	4413      	add	r3, r2
 8005f30:	4a22      	ldr	r2, [pc, #136]	; (8005fbc <HAL_DMA_Init+0xac>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	091b      	lsrs	r3, r3, #4
 8005f38:	009a      	lsls	r2, r3, #2
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a1f      	ldr	r2, [pc, #124]	; (8005fc0 <HAL_DMA_Init+0xb0>)
 8005f42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005f5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005f5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bc80      	pop	{r7}
 8005fb6:	4770      	bx	lr
 8005fb8:	bffdfff8 	.word	0xbffdfff8
 8005fbc:	cccccccd 	.word	0xcccccccd
 8005fc0:	40020000 	.word	0x40020000

08005fc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_DMA_Start_IT+0x20>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e04a      	b.n	800607a <HAL_DMA_Start_IT+0xb6>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d13a      	bne.n	800606c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0201 	bic.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 f9e8 	bl	80063f0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 020e 	orr.w	r2, r2, #14
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e00f      	b.n	800605a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0204 	bic.w	r2, r2, #4
 8006048:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 020a 	orr.w	r2, r2, #10
 8006058:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0201 	orr.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	e005      	b.n	8006078 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006074:	2302      	movs	r3, #2
 8006076:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006094:	2b02      	cmp	r3, #2
 8006096:	d008      	beq.n	80060aa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2204      	movs	r2, #4
 800609c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e020      	b.n	80060ec <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 020e 	bic.w	r2, r2, #14
 80060b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	2101      	movs	r1, #1
 80060d4:	fa01 f202 	lsl.w	r2, r1, r2
 80060d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr
	...

080060f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800610a:	2b02      	cmp	r3, #2
 800610c:	d005      	beq.n	800611a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2204      	movs	r2, #4
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
 8006118:	e051      	b.n	80061be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 020e 	bic.w	r2, r2, #14
 8006128:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0201 	bic.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a22      	ldr	r2, [pc, #136]	; (80061c8 <HAL_DMA_Abort_IT+0xd0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d029      	beq.n	8006198 <HAL_DMA_Abort_IT+0xa0>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a20      	ldr	r2, [pc, #128]	; (80061cc <HAL_DMA_Abort_IT+0xd4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d022      	beq.n	8006194 <HAL_DMA_Abort_IT+0x9c>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1f      	ldr	r2, [pc, #124]	; (80061d0 <HAL_DMA_Abort_IT+0xd8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d01a      	beq.n	800618e <HAL_DMA_Abort_IT+0x96>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <HAL_DMA_Abort_IT+0xdc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d012      	beq.n	8006188 <HAL_DMA_Abort_IT+0x90>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <HAL_DMA_Abort_IT+0xe0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00a      	beq.n	8006182 <HAL_DMA_Abort_IT+0x8a>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1a      	ldr	r2, [pc, #104]	; (80061dc <HAL_DMA_Abort_IT+0xe4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d102      	bne.n	800617c <HAL_DMA_Abort_IT+0x84>
 8006176:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800617a:	e00e      	b.n	800619a <HAL_DMA_Abort_IT+0xa2>
 800617c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006180:	e00b      	b.n	800619a <HAL_DMA_Abort_IT+0xa2>
 8006182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006186:	e008      	b.n	800619a <HAL_DMA_Abort_IT+0xa2>
 8006188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800618c:	e005      	b.n	800619a <HAL_DMA_Abort_IT+0xa2>
 800618e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006192:	e002      	b.n	800619a <HAL_DMA_Abort_IT+0xa2>
 8006194:	2310      	movs	r3, #16
 8006196:	e000      	b.n	800619a <HAL_DMA_Abort_IT+0xa2>
 8006198:	2301      	movs	r3, #1
 800619a:	4a11      	ldr	r2, [pc, #68]	; (80061e0 <HAL_DMA_Abort_IT+0xe8>)
 800619c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	4798      	blx	r3
    } 
  }
  return status;
 80061be:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40020008 	.word	0x40020008
 80061cc:	4002001c 	.word	0x4002001c
 80061d0:	40020030 	.word	0x40020030
 80061d4:	40020044 	.word	0x40020044
 80061d8:	40020058 	.word	0x40020058
 80061dc:	4002006c 	.word	0x4002006c
 80061e0:	40020000 	.word	0x40020000

080061e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	2204      	movs	r2, #4
 8006202:	409a      	lsls	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4013      	ands	r3, r2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d04f      	beq.n	80062ac <HAL_DMA_IRQHandler+0xc8>
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d04a      	beq.n	80062ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d107      	bne.n	8006234 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0204 	bic.w	r2, r2, #4
 8006232:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a66      	ldr	r2, [pc, #408]	; (80063d4 <HAL_DMA_IRQHandler+0x1f0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d029      	beq.n	8006292 <HAL_DMA_IRQHandler+0xae>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a65      	ldr	r2, [pc, #404]	; (80063d8 <HAL_DMA_IRQHandler+0x1f4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d022      	beq.n	800628e <HAL_DMA_IRQHandler+0xaa>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a63      	ldr	r2, [pc, #396]	; (80063dc <HAL_DMA_IRQHandler+0x1f8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d01a      	beq.n	8006288 <HAL_DMA_IRQHandler+0xa4>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a62      	ldr	r2, [pc, #392]	; (80063e0 <HAL_DMA_IRQHandler+0x1fc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d012      	beq.n	8006282 <HAL_DMA_IRQHandler+0x9e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a60      	ldr	r2, [pc, #384]	; (80063e4 <HAL_DMA_IRQHandler+0x200>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00a      	beq.n	800627c <HAL_DMA_IRQHandler+0x98>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a5f      	ldr	r2, [pc, #380]	; (80063e8 <HAL_DMA_IRQHandler+0x204>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d102      	bne.n	8006276 <HAL_DMA_IRQHandler+0x92>
 8006270:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006274:	e00e      	b.n	8006294 <HAL_DMA_IRQHandler+0xb0>
 8006276:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800627a:	e00b      	b.n	8006294 <HAL_DMA_IRQHandler+0xb0>
 800627c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006280:	e008      	b.n	8006294 <HAL_DMA_IRQHandler+0xb0>
 8006282:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006286:	e005      	b.n	8006294 <HAL_DMA_IRQHandler+0xb0>
 8006288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800628c:	e002      	b.n	8006294 <HAL_DMA_IRQHandler+0xb0>
 800628e:	2340      	movs	r3, #64	; 0x40
 8006290:	e000      	b.n	8006294 <HAL_DMA_IRQHandler+0xb0>
 8006292:	2304      	movs	r3, #4
 8006294:	4a55      	ldr	r2, [pc, #340]	; (80063ec <HAL_DMA_IRQHandler+0x208>)
 8006296:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8094 	beq.w	80063ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80062aa:	e08e      	b.n	80063ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	2202      	movs	r2, #2
 80062b2:	409a      	lsls	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d056      	beq.n	800636a <HAL_DMA_IRQHandler+0x186>
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d051      	beq.n	800636a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10b      	bne.n	80062ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 020a 	bic.w	r2, r2, #10
 80062e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a38      	ldr	r2, [pc, #224]	; (80063d4 <HAL_DMA_IRQHandler+0x1f0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d029      	beq.n	800634a <HAL_DMA_IRQHandler+0x166>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a37      	ldr	r2, [pc, #220]	; (80063d8 <HAL_DMA_IRQHandler+0x1f4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d022      	beq.n	8006346 <HAL_DMA_IRQHandler+0x162>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a35      	ldr	r2, [pc, #212]	; (80063dc <HAL_DMA_IRQHandler+0x1f8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d01a      	beq.n	8006340 <HAL_DMA_IRQHandler+0x15c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a34      	ldr	r2, [pc, #208]	; (80063e0 <HAL_DMA_IRQHandler+0x1fc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d012      	beq.n	800633a <HAL_DMA_IRQHandler+0x156>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a32      	ldr	r2, [pc, #200]	; (80063e4 <HAL_DMA_IRQHandler+0x200>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00a      	beq.n	8006334 <HAL_DMA_IRQHandler+0x150>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a31      	ldr	r2, [pc, #196]	; (80063e8 <HAL_DMA_IRQHandler+0x204>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d102      	bne.n	800632e <HAL_DMA_IRQHandler+0x14a>
 8006328:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800632c:	e00e      	b.n	800634c <HAL_DMA_IRQHandler+0x168>
 800632e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006332:	e00b      	b.n	800634c <HAL_DMA_IRQHandler+0x168>
 8006334:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006338:	e008      	b.n	800634c <HAL_DMA_IRQHandler+0x168>
 800633a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800633e:	e005      	b.n	800634c <HAL_DMA_IRQHandler+0x168>
 8006340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006344:	e002      	b.n	800634c <HAL_DMA_IRQHandler+0x168>
 8006346:	2320      	movs	r3, #32
 8006348:	e000      	b.n	800634c <HAL_DMA_IRQHandler+0x168>
 800634a:	2302      	movs	r3, #2
 800634c:	4a27      	ldr	r2, [pc, #156]	; (80063ec <HAL_DMA_IRQHandler+0x208>)
 800634e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	2b00      	cmp	r3, #0
 800635e:	d034      	beq.n	80063ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006368:	e02f      	b.n	80063ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	2208      	movs	r2, #8
 8006370:	409a      	lsls	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4013      	ands	r3, r2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d028      	beq.n	80063cc <HAL_DMA_IRQHandler+0x1e8>
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	d023      	beq.n	80063cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 020e 	bic.w	r2, r2, #14
 8006392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639c:	2101      	movs	r1, #1
 800639e:	fa01 f202 	lsl.w	r2, r1, r2
 80063a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	4798      	blx	r3
    }
  }
  return;
 80063ca:	bf00      	nop
 80063cc:	bf00      	nop
}
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40020008 	.word	0x40020008
 80063d8:	4002001c 	.word	0x4002001c
 80063dc:	40020030 	.word	0x40020030
 80063e0:	40020044 	.word	0x40020044
 80063e4:	40020058 	.word	0x40020058
 80063e8:	4002006c 	.word	0x4002006c
 80063ec:	40020000 	.word	0x40020000

080063f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006406:	2101      	movs	r1, #1
 8006408:	fa01 f202 	lsl.w	r2, r1, r2
 800640c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b10      	cmp	r3, #16
 800641c:	d108      	bne.n	8006430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800642e:	e007      	b.n	8006440 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	60da      	str	r2, [r3, #12]
}
 8006440:	bf00      	nop
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr
	...

0800644c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800644c:	b480      	push	{r7}
 800644e:	b08b      	sub	sp, #44	; 0x2c
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006456:	2300      	movs	r3, #0
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800645a:	2300      	movs	r3, #0
 800645c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800645e:	e169      	b.n	8006734 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006460:	2201      	movs	r2, #1
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	4013      	ands	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	429a      	cmp	r2, r3
 800647a:	f040 8158 	bne.w	800672e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	4a9a      	ldr	r2, [pc, #616]	; (80066ec <HAL_GPIO_Init+0x2a0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d05e      	beq.n	8006546 <HAL_GPIO_Init+0xfa>
 8006488:	4a98      	ldr	r2, [pc, #608]	; (80066ec <HAL_GPIO_Init+0x2a0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d875      	bhi.n	800657a <HAL_GPIO_Init+0x12e>
 800648e:	4a98      	ldr	r2, [pc, #608]	; (80066f0 <HAL_GPIO_Init+0x2a4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d058      	beq.n	8006546 <HAL_GPIO_Init+0xfa>
 8006494:	4a96      	ldr	r2, [pc, #600]	; (80066f0 <HAL_GPIO_Init+0x2a4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d86f      	bhi.n	800657a <HAL_GPIO_Init+0x12e>
 800649a:	4a96      	ldr	r2, [pc, #600]	; (80066f4 <HAL_GPIO_Init+0x2a8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d052      	beq.n	8006546 <HAL_GPIO_Init+0xfa>
 80064a0:	4a94      	ldr	r2, [pc, #592]	; (80066f4 <HAL_GPIO_Init+0x2a8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d869      	bhi.n	800657a <HAL_GPIO_Init+0x12e>
 80064a6:	4a94      	ldr	r2, [pc, #592]	; (80066f8 <HAL_GPIO_Init+0x2ac>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d04c      	beq.n	8006546 <HAL_GPIO_Init+0xfa>
 80064ac:	4a92      	ldr	r2, [pc, #584]	; (80066f8 <HAL_GPIO_Init+0x2ac>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d863      	bhi.n	800657a <HAL_GPIO_Init+0x12e>
 80064b2:	4a92      	ldr	r2, [pc, #584]	; (80066fc <HAL_GPIO_Init+0x2b0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d046      	beq.n	8006546 <HAL_GPIO_Init+0xfa>
 80064b8:	4a90      	ldr	r2, [pc, #576]	; (80066fc <HAL_GPIO_Init+0x2b0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d85d      	bhi.n	800657a <HAL_GPIO_Init+0x12e>
 80064be:	2b12      	cmp	r3, #18
 80064c0:	d82a      	bhi.n	8006518 <HAL_GPIO_Init+0xcc>
 80064c2:	2b12      	cmp	r3, #18
 80064c4:	d859      	bhi.n	800657a <HAL_GPIO_Init+0x12e>
 80064c6:	a201      	add	r2, pc, #4	; (adr r2, 80064cc <HAL_GPIO_Init+0x80>)
 80064c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064cc:	08006547 	.word	0x08006547
 80064d0:	08006521 	.word	0x08006521
 80064d4:	08006533 	.word	0x08006533
 80064d8:	08006575 	.word	0x08006575
 80064dc:	0800657b 	.word	0x0800657b
 80064e0:	0800657b 	.word	0x0800657b
 80064e4:	0800657b 	.word	0x0800657b
 80064e8:	0800657b 	.word	0x0800657b
 80064ec:	0800657b 	.word	0x0800657b
 80064f0:	0800657b 	.word	0x0800657b
 80064f4:	0800657b 	.word	0x0800657b
 80064f8:	0800657b 	.word	0x0800657b
 80064fc:	0800657b 	.word	0x0800657b
 8006500:	0800657b 	.word	0x0800657b
 8006504:	0800657b 	.word	0x0800657b
 8006508:	0800657b 	.word	0x0800657b
 800650c:	0800657b 	.word	0x0800657b
 8006510:	08006529 	.word	0x08006529
 8006514:	0800653d 	.word	0x0800653d
 8006518:	4a79      	ldr	r2, [pc, #484]	; (8006700 <HAL_GPIO_Init+0x2b4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800651e:	e02c      	b.n	800657a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	623b      	str	r3, [r7, #32]
          break;
 8006526:	e029      	b.n	800657c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	3304      	adds	r3, #4
 800652e:	623b      	str	r3, [r7, #32]
          break;
 8006530:	e024      	b.n	800657c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	3308      	adds	r3, #8
 8006538:	623b      	str	r3, [r7, #32]
          break;
 800653a:	e01f      	b.n	800657c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	330c      	adds	r3, #12
 8006542:	623b      	str	r3, [r7, #32]
          break;
 8006544:	e01a      	b.n	800657c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800654e:	2304      	movs	r3, #4
 8006550:	623b      	str	r3, [r7, #32]
          break;
 8006552:	e013      	b.n	800657c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d105      	bne.n	8006568 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800655c:	2308      	movs	r3, #8
 800655e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	69fa      	ldr	r2, [r7, #28]
 8006564:	611a      	str	r2, [r3, #16]
          break;
 8006566:	e009      	b.n	800657c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006568:	2308      	movs	r3, #8
 800656a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	615a      	str	r2, [r3, #20]
          break;
 8006572:	e003      	b.n	800657c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006574:	2300      	movs	r3, #0
 8006576:	623b      	str	r3, [r7, #32]
          break;
 8006578:	e000      	b.n	800657c <HAL_GPIO_Init+0x130>
          break;
 800657a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	2bff      	cmp	r3, #255	; 0xff
 8006580:	d801      	bhi.n	8006586 <HAL_GPIO_Init+0x13a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	e001      	b.n	800658a <HAL_GPIO_Init+0x13e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3304      	adds	r3, #4
 800658a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2bff      	cmp	r3, #255	; 0xff
 8006590:	d802      	bhi.n	8006598 <HAL_GPIO_Init+0x14c>
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	e002      	b.n	800659e <HAL_GPIO_Init+0x152>
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	3b08      	subs	r3, #8
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	210f      	movs	r1, #15
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ac:	43db      	mvns	r3, r3
 80065ae:	401a      	ands	r2, r3
 80065b0:	6a39      	ldr	r1, [r7, #32]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	fa01 f303 	lsl.w	r3, r1, r3
 80065b8:	431a      	orrs	r2, r3
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 80b1 	beq.w	800672e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80065cc:	4b4d      	ldr	r3, [pc, #308]	; (8006704 <HAL_GPIO_Init+0x2b8>)
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	4a4c      	ldr	r2, [pc, #304]	; (8006704 <HAL_GPIO_Init+0x2b8>)
 80065d2:	f043 0301 	orr.w	r3, r3, #1
 80065d6:	6193      	str	r3, [r2, #24]
 80065d8:	4b4a      	ldr	r3, [pc, #296]	; (8006704 <HAL_GPIO_Init+0x2b8>)
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80065e4:	4a48      	ldr	r2, [pc, #288]	; (8006708 <HAL_GPIO_Init+0x2bc>)
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	089b      	lsrs	r3, r3, #2
 80065ea:	3302      	adds	r3, #2
 80065ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	220f      	movs	r2, #15
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	43db      	mvns	r3, r3
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4013      	ands	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a40      	ldr	r2, [pc, #256]	; (800670c <HAL_GPIO_Init+0x2c0>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d013      	beq.n	8006638 <HAL_GPIO_Init+0x1ec>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a3f      	ldr	r2, [pc, #252]	; (8006710 <HAL_GPIO_Init+0x2c4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00d      	beq.n	8006634 <HAL_GPIO_Init+0x1e8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a3e      	ldr	r2, [pc, #248]	; (8006714 <HAL_GPIO_Init+0x2c8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d007      	beq.n	8006630 <HAL_GPIO_Init+0x1e4>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a3d      	ldr	r2, [pc, #244]	; (8006718 <HAL_GPIO_Init+0x2cc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d101      	bne.n	800662c <HAL_GPIO_Init+0x1e0>
 8006628:	2303      	movs	r3, #3
 800662a:	e006      	b.n	800663a <HAL_GPIO_Init+0x1ee>
 800662c:	2304      	movs	r3, #4
 800662e:	e004      	b.n	800663a <HAL_GPIO_Init+0x1ee>
 8006630:	2302      	movs	r3, #2
 8006632:	e002      	b.n	800663a <HAL_GPIO_Init+0x1ee>
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <HAL_GPIO_Init+0x1ee>
 8006638:	2300      	movs	r3, #0
 800663a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663c:	f002 0203 	and.w	r2, r2, #3
 8006640:	0092      	lsls	r2, r2, #2
 8006642:	4093      	lsls	r3, r2
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800664a:	492f      	ldr	r1, [pc, #188]	; (8006708 <HAL_GPIO_Init+0x2bc>)
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	089b      	lsrs	r3, r3, #2
 8006650:	3302      	adds	r3, #2
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d006      	beq.n	8006672 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006664:	4b2d      	ldr	r3, [pc, #180]	; (800671c <HAL_GPIO_Init+0x2d0>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	492c      	ldr	r1, [pc, #176]	; (800671c <HAL_GPIO_Init+0x2d0>)
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	4313      	orrs	r3, r2
 800666e:	600b      	str	r3, [r1, #0]
 8006670:	e006      	b.n	8006680 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006672:	4b2a      	ldr	r3, [pc, #168]	; (800671c <HAL_GPIO_Init+0x2d0>)
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	43db      	mvns	r3, r3
 800667a:	4928      	ldr	r1, [pc, #160]	; (800671c <HAL_GPIO_Init+0x2d0>)
 800667c:	4013      	ands	r3, r2
 800667e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d006      	beq.n	800669a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800668c:	4b23      	ldr	r3, [pc, #140]	; (800671c <HAL_GPIO_Init+0x2d0>)
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	4922      	ldr	r1, [pc, #136]	; (800671c <HAL_GPIO_Init+0x2d0>)
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	4313      	orrs	r3, r2
 8006696:	604b      	str	r3, [r1, #4]
 8006698:	e006      	b.n	80066a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800669a:	4b20      	ldr	r3, [pc, #128]	; (800671c <HAL_GPIO_Init+0x2d0>)
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	43db      	mvns	r3, r3
 80066a2:	491e      	ldr	r1, [pc, #120]	; (800671c <HAL_GPIO_Init+0x2d0>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d006      	beq.n	80066c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80066b4:	4b19      	ldr	r3, [pc, #100]	; (800671c <HAL_GPIO_Init+0x2d0>)
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	4918      	ldr	r1, [pc, #96]	; (800671c <HAL_GPIO_Init+0x2d0>)
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	4313      	orrs	r3, r2
 80066be:	608b      	str	r3, [r1, #8]
 80066c0:	e006      	b.n	80066d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80066c2:	4b16      	ldr	r3, [pc, #88]	; (800671c <HAL_GPIO_Init+0x2d0>)
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	43db      	mvns	r3, r3
 80066ca:	4914      	ldr	r1, [pc, #80]	; (800671c <HAL_GPIO_Init+0x2d0>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d021      	beq.n	8006720 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80066dc:	4b0f      	ldr	r3, [pc, #60]	; (800671c <HAL_GPIO_Init+0x2d0>)
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	490e      	ldr	r1, [pc, #56]	; (800671c <HAL_GPIO_Init+0x2d0>)
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60cb      	str	r3, [r1, #12]
 80066e8:	e021      	b.n	800672e <HAL_GPIO_Init+0x2e2>
 80066ea:	bf00      	nop
 80066ec:	10320000 	.word	0x10320000
 80066f0:	10310000 	.word	0x10310000
 80066f4:	10220000 	.word	0x10220000
 80066f8:	10210000 	.word	0x10210000
 80066fc:	10120000 	.word	0x10120000
 8006700:	10110000 	.word	0x10110000
 8006704:	40021000 	.word	0x40021000
 8006708:	40010000 	.word	0x40010000
 800670c:	40010800 	.word	0x40010800
 8006710:	40010c00 	.word	0x40010c00
 8006714:	40011000 	.word	0x40011000
 8006718:	40011400 	.word	0x40011400
 800671c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <HAL_GPIO_Init+0x304>)
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	43db      	mvns	r3, r3
 8006728:	4909      	ldr	r1, [pc, #36]	; (8006750 <HAL_GPIO_Init+0x304>)
 800672a:	4013      	ands	r3, r2
 800672c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	3301      	adds	r3, #1
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	fa22 f303 	lsr.w	r3, r2, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	f47f ae8e 	bne.w	8006460 <HAL_GPIO_Init+0x14>
  }
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	372c      	adds	r7, #44	; 0x2c
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr
 8006750:	40010400 	.word	0x40010400

08006754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	807b      	strh	r3, [r7, #2]
 8006760:	4613      	mov	r3, r2
 8006762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006764:	787b      	ldrb	r3, [r7, #1]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800676a:	887a      	ldrh	r2, [r7, #2]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006770:	e003      	b.n	800677a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006772:	887b      	ldrh	r3, [r7, #2]
 8006774:	041a      	lsls	r2, r3, #16
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	611a      	str	r2, [r3, #16]
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr

08006784 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006796:	887a      	ldrh	r2, [r7, #2]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4013      	ands	r3, r2
 800679c:	041a      	lsls	r2, r3, #16
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	43d9      	mvns	r1, r3
 80067a2:	887b      	ldrh	r3, [r7, #2]
 80067a4:	400b      	ands	r3, r1
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	611a      	str	r2, [r3, #16]
}
 80067ac:	bf00      	nop
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr
	...

080067b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80067c2:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067c4:	695a      	ldr	r2, [r3, #20]
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d006      	beq.n	80067dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067ce:	4a05      	ldr	r2, [pc, #20]	; (80067e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067d4:	88fb      	ldrh	r3, [r7, #6]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe ff42 	bl	8005660 <HAL_GPIO_EXTI_Callback>
  }
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40010400 	.word	0x40010400

080067e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e272      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 8087 	beq.w	8006916 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006808:	4b92      	ldr	r3, [pc, #584]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f003 030c 	and.w	r3, r3, #12
 8006810:	2b04      	cmp	r3, #4
 8006812:	d00c      	beq.n	800682e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006814:	4b8f      	ldr	r3, [pc, #572]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f003 030c 	and.w	r3, r3, #12
 800681c:	2b08      	cmp	r3, #8
 800681e:	d112      	bne.n	8006846 <HAL_RCC_OscConfig+0x5e>
 8006820:	4b8c      	ldr	r3, [pc, #560]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682c:	d10b      	bne.n	8006846 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800682e:	4b89      	ldr	r3, [pc, #548]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d06c      	beq.n	8006914 <HAL_RCC_OscConfig+0x12c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d168      	bne.n	8006914 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e24c      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800684e:	d106      	bne.n	800685e <HAL_RCC_OscConfig+0x76>
 8006850:	4b80      	ldr	r3, [pc, #512]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a7f      	ldr	r2, [pc, #508]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	e02e      	b.n	80068bc <HAL_RCC_OscConfig+0xd4>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10c      	bne.n	8006880 <HAL_RCC_OscConfig+0x98>
 8006866:	4b7b      	ldr	r3, [pc, #492]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a7a      	ldr	r2, [pc, #488]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 800686c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	4b78      	ldr	r3, [pc, #480]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a77      	ldr	r2, [pc, #476]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	e01d      	b.n	80068bc <HAL_RCC_OscConfig+0xd4>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006888:	d10c      	bne.n	80068a4 <HAL_RCC_OscConfig+0xbc>
 800688a:	4b72      	ldr	r3, [pc, #456]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a71      	ldr	r2, [pc, #452]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	4b6f      	ldr	r3, [pc, #444]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a6e      	ldr	r2, [pc, #440]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 800689c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	e00b      	b.n	80068bc <HAL_RCC_OscConfig+0xd4>
 80068a4:	4b6b      	ldr	r3, [pc, #428]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a6a      	ldr	r2, [pc, #424]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 80068aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	4b68      	ldr	r3, [pc, #416]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a67      	ldr	r2, [pc, #412]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 80068b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d013      	beq.n	80068ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c4:	f7ff f9e8 	bl	8005c98 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068cc:	f7ff f9e4 	bl	8005c98 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b64      	cmp	r3, #100	; 0x64
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e200      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068de:	4b5d      	ldr	r3, [pc, #372]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0f0      	beq.n	80068cc <HAL_RCC_OscConfig+0xe4>
 80068ea:	e014      	b.n	8006916 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ec:	f7ff f9d4 	bl	8005c98 <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068f4:	f7ff f9d0 	bl	8005c98 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b64      	cmp	r3, #100	; 0x64
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e1ec      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006906:	4b53      	ldr	r3, [pc, #332]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1f0      	bne.n	80068f4 <HAL_RCC_OscConfig+0x10c>
 8006912:	e000      	b.n	8006916 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d063      	beq.n	80069ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006922:	4b4c      	ldr	r3, [pc, #304]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00b      	beq.n	8006946 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800692e:	4b49      	ldr	r3, [pc, #292]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f003 030c 	and.w	r3, r3, #12
 8006936:	2b08      	cmp	r3, #8
 8006938:	d11c      	bne.n	8006974 <HAL_RCC_OscConfig+0x18c>
 800693a:	4b46      	ldr	r3, [pc, #280]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d116      	bne.n	8006974 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006946:	4b43      	ldr	r3, [pc, #268]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d005      	beq.n	800695e <HAL_RCC_OscConfig+0x176>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d001      	beq.n	800695e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e1c0      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695e:	4b3d      	ldr	r3, [pc, #244]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	4939      	ldr	r1, [pc, #228]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 800696e:	4313      	orrs	r3, r2
 8006970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006972:	e03a      	b.n	80069ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d020      	beq.n	80069be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800697c:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <HAL_RCC_OscConfig+0x270>)
 800697e:	2201      	movs	r2, #1
 8006980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006982:	f7ff f989 	bl	8005c98 <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006988:	e008      	b.n	800699c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800698a:	f7ff f985 	bl	8005c98 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e1a1      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800699c:	4b2d      	ldr	r3, [pc, #180]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0f0      	beq.n	800698a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a8:	4b2a      	ldr	r3, [pc, #168]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	4927      	ldr	r1, [pc, #156]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	600b      	str	r3, [r1, #0]
 80069bc:	e015      	b.n	80069ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069be:	4b26      	ldr	r3, [pc, #152]	; (8006a58 <HAL_RCC_OscConfig+0x270>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c4:	f7ff f968 	bl	8005c98 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069cc:	f7ff f964 	bl	8005c98 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e180      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069de:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f0      	bne.n	80069cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d03a      	beq.n	8006a6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d019      	beq.n	8006a32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069fe:	4b17      	ldr	r3, [pc, #92]	; (8006a5c <HAL_RCC_OscConfig+0x274>)
 8006a00:	2201      	movs	r2, #1
 8006a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a04:	f7ff f948 	bl	8005c98 <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a0c:	f7ff f944 	bl	8005c98 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e160      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <HAL_RCC_OscConfig+0x26c>)
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0f0      	beq.n	8006a0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	f000 fad8 	bl	8006fe0 <RCC_Delay>
 8006a30:	e01c      	b.n	8006a6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a32:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <HAL_RCC_OscConfig+0x274>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a38:	f7ff f92e 	bl	8005c98 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a3e:	e00f      	b.n	8006a60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a40:	f7ff f92a 	bl	8005c98 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d908      	bls.n	8006a60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e146      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
 8006a52:	bf00      	nop
 8006a54:	40021000 	.word	0x40021000
 8006a58:	42420000 	.word	0x42420000
 8006a5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a60:	4b92      	ldr	r3, [pc, #584]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e9      	bne.n	8006a40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 80a6 	beq.w	8006bc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a7e:	4b8b      	ldr	r3, [pc, #556]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10d      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a8a:	4b88      	ldr	r3, [pc, #544]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	4a87      	ldr	r2, [pc, #540]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a94:	61d3      	str	r3, [r2, #28]
 8006a96:	4b85      	ldr	r3, [pc, #532]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	60bb      	str	r3, [r7, #8]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa6:	4b82      	ldr	r3, [pc, #520]	; (8006cb0 <HAL_RCC_OscConfig+0x4c8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d118      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ab2:	4b7f      	ldr	r3, [pc, #508]	; (8006cb0 <HAL_RCC_OscConfig+0x4c8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a7e      	ldr	r2, [pc, #504]	; (8006cb0 <HAL_RCC_OscConfig+0x4c8>)
 8006ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006abe:	f7ff f8eb 	bl	8005c98 <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac6:	f7ff f8e7 	bl	8005c98 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b64      	cmp	r3, #100	; 0x64
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e103      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad8:	4b75      	ldr	r3, [pc, #468]	; (8006cb0 <HAL_RCC_OscConfig+0x4c8>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0f0      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d106      	bne.n	8006afa <HAL_RCC_OscConfig+0x312>
 8006aec:	4b6f      	ldr	r3, [pc, #444]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	4a6e      	ldr	r2, [pc, #440]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	6213      	str	r3, [r2, #32]
 8006af8:	e02d      	b.n	8006b56 <HAL_RCC_OscConfig+0x36e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10c      	bne.n	8006b1c <HAL_RCC_OscConfig+0x334>
 8006b02:	4b6a      	ldr	r3, [pc, #424]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	4a69      	ldr	r2, [pc, #420]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b08:	f023 0301 	bic.w	r3, r3, #1
 8006b0c:	6213      	str	r3, [r2, #32]
 8006b0e:	4b67      	ldr	r3, [pc, #412]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	4a66      	ldr	r2, [pc, #408]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b14:	f023 0304 	bic.w	r3, r3, #4
 8006b18:	6213      	str	r3, [r2, #32]
 8006b1a:	e01c      	b.n	8006b56 <HAL_RCC_OscConfig+0x36e>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2b05      	cmp	r3, #5
 8006b22:	d10c      	bne.n	8006b3e <HAL_RCC_OscConfig+0x356>
 8006b24:	4b61      	ldr	r3, [pc, #388]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	4a60      	ldr	r2, [pc, #384]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b2a:	f043 0304 	orr.w	r3, r3, #4
 8006b2e:	6213      	str	r3, [r2, #32]
 8006b30:	4b5e      	ldr	r3, [pc, #376]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	4a5d      	ldr	r2, [pc, #372]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b36:	f043 0301 	orr.w	r3, r3, #1
 8006b3a:	6213      	str	r3, [r2, #32]
 8006b3c:	e00b      	b.n	8006b56 <HAL_RCC_OscConfig+0x36e>
 8006b3e:	4b5b      	ldr	r3, [pc, #364]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	4a5a      	ldr	r2, [pc, #360]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b44:	f023 0301 	bic.w	r3, r3, #1
 8006b48:	6213      	str	r3, [r2, #32]
 8006b4a:	4b58      	ldr	r3, [pc, #352]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	4a57      	ldr	r2, [pc, #348]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b50:	f023 0304 	bic.w	r3, r3, #4
 8006b54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d015      	beq.n	8006b8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b5e:	f7ff f89b 	bl	8005c98 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b64:	e00a      	b.n	8006b7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b66:	f7ff f897 	bl	8005c98 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e0b1      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b7c:	4b4b      	ldr	r3, [pc, #300]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d0ee      	beq.n	8006b66 <HAL_RCC_OscConfig+0x37e>
 8006b88:	e014      	b.n	8006bb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b8a:	f7ff f885 	bl	8005c98 <HAL_GetTick>
 8006b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b90:	e00a      	b.n	8006ba8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b92:	f7ff f881 	bl	8005c98 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e09b      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ba8:	4b40      	ldr	r3, [pc, #256]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1ee      	bne.n	8006b92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d105      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bba:	4b3c      	ldr	r3, [pc, #240]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	4a3b      	ldr	r2, [pc, #236]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 8087 	beq.w	8006cde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bd0:	4b36      	ldr	r3, [pc, #216]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f003 030c 	and.w	r3, r3, #12
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d061      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d146      	bne.n	8006c72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be4:	4b33      	ldr	r3, [pc, #204]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bea:	f7ff f855 	bl	8005c98 <HAL_GetTick>
 8006bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bf0:	e008      	b.n	8006c04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf2:	f7ff f851 	bl	8005c98 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e06d      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c04:	4b29      	ldr	r3, [pc, #164]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1f0      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c18:	d108      	bne.n	8006c2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c1a:	4b24      	ldr	r3, [pc, #144]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	4921      	ldr	r1, [pc, #132]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c2c:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a19      	ldr	r1, [r3, #32]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	491b      	ldr	r1, [pc, #108]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c44:	4b1b      	ldr	r3, [pc, #108]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006c46:	2201      	movs	r2, #1
 8006c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4a:	f7ff f825 	bl	8005c98 <HAL_GetTick>
 8006c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c50:	e008      	b.n	8006c64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c52:	f7ff f821 	bl	8005c98 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e03d      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c64:	4b11      	ldr	r3, [pc, #68]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0f0      	beq.n	8006c52 <HAL_RCC_OscConfig+0x46a>
 8006c70:	e035      	b.n	8006cde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c72:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c78:	f7ff f80e 	bl	8005c98 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c80:	f7ff f80a 	bl	8005c98 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e026      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <HAL_RCC_OscConfig+0x4c4>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1f0      	bne.n	8006c80 <HAL_RCC_OscConfig+0x498>
 8006c9e:	e01e      	b.n	8006cde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d107      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e019      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	40007000 	.word	0x40007000
 8006cb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <HAL_RCC_OscConfig+0x500>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d106      	bne.n	8006cda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d001      	beq.n	8006cde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e000      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40021000 	.word	0x40021000

08006cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e0d0      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d00:	4b6a      	ldr	r3, [pc, #424]	; (8006eac <HAL_RCC_ClockConfig+0x1c0>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d910      	bls.n	8006d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d0e:	4b67      	ldr	r3, [pc, #412]	; (8006eac <HAL_RCC_ClockConfig+0x1c0>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f023 0207 	bic.w	r2, r3, #7
 8006d16:	4965      	ldr	r1, [pc, #404]	; (8006eac <HAL_RCC_ClockConfig+0x1c0>)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1e:	4b63      	ldr	r3, [pc, #396]	; (8006eac <HAL_RCC_ClockConfig+0x1c0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d001      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e0b8      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d020      	beq.n	8006d7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d48:	4b59      	ldr	r3, [pc, #356]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	4a58      	ldr	r2, [pc, #352]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0308 	and.w	r3, r3, #8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d60:	4b53      	ldr	r3, [pc, #332]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	4a52      	ldr	r2, [pc, #328]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006d6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d6c:	4b50      	ldr	r3, [pc, #320]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	494d      	ldr	r1, [pc, #308]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d040      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d107      	bne.n	8006da2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d92:	4b47      	ldr	r3, [pc, #284]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d115      	bne.n	8006dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e07f      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d107      	bne.n	8006dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006daa:	4b41      	ldr	r3, [pc, #260]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e073      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dba:	4b3d      	ldr	r3, [pc, #244]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e06b      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dca:	4b39      	ldr	r3, [pc, #228]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f023 0203 	bic.w	r2, r3, #3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	4936      	ldr	r1, [pc, #216]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ddc:	f7fe ff5c 	bl	8005c98 <HAL_GetTick>
 8006de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de2:	e00a      	b.n	8006dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de4:	f7fe ff58 	bl	8005c98 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e053      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dfa:	4b2d      	ldr	r3, [pc, #180]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f003 020c 	and.w	r2, r3, #12
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d1eb      	bne.n	8006de4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e0c:	4b27      	ldr	r3, [pc, #156]	; (8006eac <HAL_RCC_ClockConfig+0x1c0>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0307 	and.w	r3, r3, #7
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d210      	bcs.n	8006e3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e1a:	4b24      	ldr	r3, [pc, #144]	; (8006eac <HAL_RCC_ClockConfig+0x1c0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f023 0207 	bic.w	r2, r3, #7
 8006e22:	4922      	ldr	r1, [pc, #136]	; (8006eac <HAL_RCC_ClockConfig+0x1c0>)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e2a:	4b20      	ldr	r3, [pc, #128]	; (8006eac <HAL_RCC_ClockConfig+0x1c0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0307 	and.w	r3, r3, #7
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d001      	beq.n	8006e3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e032      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d008      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e48:	4b19      	ldr	r3, [pc, #100]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	4916      	ldr	r1, [pc, #88]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d009      	beq.n	8006e7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e66:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	490e      	ldr	r1, [pc, #56]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e7a:	f000 f821 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	091b      	lsrs	r3, r3, #4
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	490a      	ldr	r1, [pc, #40]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8006e8c:	5ccb      	ldrb	r3, [r1, r3]
 8006e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e92:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8006e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e96:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <HAL_RCC_ClockConfig+0x1d0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe feba 	bl	8005c14 <HAL_InitTick>

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40022000 	.word	0x40022000
 8006eb0:	40021000 	.word	0x40021000
 8006eb4:	0800b958 	.word	0x0800b958
 8006eb8:	200000c0 	.word	0x200000c0
 8006ebc:	200000c4 	.word	0x200000c4

08006ec0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec0:	b490      	push	{r4, r7}
 8006ec2:	b08a      	sub	sp, #40	; 0x28
 8006ec4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006ec6:	4b29      	ldr	r3, [pc, #164]	; (8006f6c <HAL_RCC_GetSysClockFreq+0xac>)
 8006ec8:	1d3c      	adds	r4, r7, #4
 8006eca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006ed0:	f240 2301 	movw	r3, #513	; 0x201
 8006ed4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61fb      	str	r3, [r7, #28]
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006eea:	4b21      	ldr	r3, [pc, #132]	; (8006f70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f003 030c 	and.w	r3, r3, #12
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d002      	beq.n	8006f00 <HAL_RCC_GetSysClockFreq+0x40>
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	d003      	beq.n	8006f06 <HAL_RCC_GetSysClockFreq+0x46>
 8006efe:	e02b      	b.n	8006f58 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f00:	4b1c      	ldr	r3, [pc, #112]	; (8006f74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f02:	623b      	str	r3, [r7, #32]
      break;
 8006f04:	e02b      	b.n	8006f5e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	0c9b      	lsrs	r3, r3, #18
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	3328      	adds	r3, #40	; 0x28
 8006f10:	443b      	add	r3, r7
 8006f12:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006f16:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d012      	beq.n	8006f48 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f22:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	0c5b      	lsrs	r3, r3, #17
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	3328      	adds	r3, #40	; 0x28
 8006f2e:	443b      	add	r3, r7
 8006f30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006f34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	4a0e      	ldr	r2, [pc, #56]	; (8006f74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f3a:	fb03 f202 	mul.w	r2, r3, r2
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
 8006f46:	e004      	b.n	8006f52 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	4a0b      	ldr	r2, [pc, #44]	; (8006f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f4c:	fb02 f303 	mul.w	r3, r2, r3
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	623b      	str	r3, [r7, #32]
      break;
 8006f56:	e002      	b.n	8006f5e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f58:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f5a:	623b      	str	r3, [r7, #32]
      break;
 8006f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3728      	adds	r7, #40	; 0x28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bc90      	pop	{r4, r7}
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	0800b93c 	.word	0x0800b93c
 8006f70:	40021000 	.word	0x40021000
 8006f74:	007a1200 	.word	0x007a1200
 8006f78:	003d0900 	.word	0x003d0900

08006f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f80:	4b02      	ldr	r3, [pc, #8]	; (8006f8c <HAL_RCC_GetHCLKFreq+0x10>)
 8006f82:	681b      	ldr	r3, [r3, #0]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr
 8006f8c:	200000c0 	.word	0x200000c0

08006f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f94:	f7ff fff2 	bl	8006f7c <HAL_RCC_GetHCLKFreq>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	0a1b      	lsrs	r3, r3, #8
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	4903      	ldr	r1, [pc, #12]	; (8006fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fa6:	5ccb      	ldrb	r3, [r1, r3]
 8006fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	0800b968 	.word	0x0800b968

08006fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fbc:	f7ff ffde 	bl	8006f7c <HAL_RCC_GetHCLKFreq>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	0adb      	lsrs	r3, r3, #11
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	4903      	ldr	r1, [pc, #12]	; (8006fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fce:	5ccb      	ldrb	r3, [r1, r3]
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	0800b968 	.word	0x0800b968

08006fe0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <RCC_Delay+0x34>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a0a      	ldr	r2, [pc, #40]	; (8007018 <RCC_Delay+0x38>)
 8006fee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff2:	0a5b      	lsrs	r3, r3, #9
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	fb02 f303 	mul.w	r3, r2, r3
 8006ffa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006ffc:	bf00      	nop
  }
  while (Delay --);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	1e5a      	subs	r2, r3, #1
 8007002:	60fa      	str	r2, [r7, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1f9      	bne.n	8006ffc <RCC_Delay+0x1c>
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	bc80      	pop	{r7}
 8007012:	4770      	bx	lr
 8007014:	200000c0 	.word	0x200000c0
 8007018:	10624dd3 	.word	0x10624dd3

0800701c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e076      	b.n	800711c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	2b00      	cmp	r3, #0
 8007034:	d108      	bne.n	8007048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800703e:	d009      	beq.n	8007054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	61da      	str	r2, [r3, #28]
 8007046:	e005      	b.n	8007054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fe fb88 	bl	8005784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800708a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d8:	ea42 0103 	orr.w	r1, r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	0c1a      	lsrs	r2, r3, #16
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f002 0204 	and.w	r2, r2, #4
 80070fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69da      	ldr	r2, [r3, #28]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800710a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	4613      	mov	r3, r2
 8007132:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800713e:	2b01      	cmp	r3, #1
 8007140:	d101      	bne.n	8007146 <HAL_SPI_Transmit+0x22>
 8007142:	2302      	movs	r3, #2
 8007144:	e126      	b.n	8007394 <HAL_SPI_Transmit+0x270>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800714e:	f7fe fda3 	bl	8005c98 <HAL_GetTick>
 8007152:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007154:	88fb      	ldrh	r3, [r7, #6]
 8007156:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b01      	cmp	r3, #1
 8007162:	d002      	beq.n	800716a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007164:	2302      	movs	r3, #2
 8007166:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007168:	e10b      	b.n	8007382 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <HAL_SPI_Transmit+0x52>
 8007170:	88fb      	ldrh	r3, [r7, #6]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d102      	bne.n	800717c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	77fb      	strb	r3, [r7, #31]
    goto error;
 800717a:	e102      	b.n	8007382 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2203      	movs	r2, #3
 8007180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	88fa      	ldrh	r2, [r7, #6]
 8007194:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	88fa      	ldrh	r2, [r7, #6]
 800719a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c2:	d10f      	bne.n	80071e4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ee:	2b40      	cmp	r3, #64	; 0x40
 80071f0:	d007      	beq.n	8007202 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007200:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720a:	d14b      	bne.n	80072a4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <HAL_SPI_Transmit+0xf6>
 8007214:	8afb      	ldrh	r3, [r7, #22]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d13e      	bne.n	8007298 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721e:	881a      	ldrh	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	1c9a      	adds	r2, r3, #2
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800723e:	e02b      	b.n	8007298 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b02      	cmp	r3, #2
 800724c:	d112      	bne.n	8007274 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007252:	881a      	ldrh	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	1c9a      	adds	r2, r3, #2
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	86da      	strh	r2, [r3, #54]	; 0x36
 8007272:	e011      	b.n	8007298 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007274:	f7fe fd10 	bl	8005c98 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d803      	bhi.n	800728c <HAL_SPI_Transmit+0x168>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728a:	d102      	bne.n	8007292 <HAL_SPI_Transmit+0x16e>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d102      	bne.n	8007298 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007296:	e074      	b.n	8007382 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800729c:	b29b      	uxth	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1ce      	bne.n	8007240 <HAL_SPI_Transmit+0x11c>
 80072a2:	e04c      	b.n	800733e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <HAL_SPI_Transmit+0x18e>
 80072ac:	8afb      	ldrh	r3, [r7, #22]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d140      	bne.n	8007334 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	7812      	ldrb	r2, [r2, #0]
 80072be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	3b01      	subs	r3, #1
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072d8:	e02c      	b.n	8007334 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d113      	bne.n	8007310 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	330c      	adds	r3, #12
 80072f2:	7812      	ldrb	r2, [r2, #0]
 80072f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	86da      	strh	r2, [r3, #54]	; 0x36
 800730e:	e011      	b.n	8007334 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007310:	f7fe fcc2 	bl	8005c98 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	429a      	cmp	r2, r3
 800731e:	d803      	bhi.n	8007328 <HAL_SPI_Transmit+0x204>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d102      	bne.n	800732e <HAL_SPI_Transmit+0x20a>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d102      	bne.n	8007334 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007332:	e026      	b.n	8007382 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1cd      	bne.n	80072da <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 fa54 	bl	80077f0 <SPI_EndRxTxTransaction>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2220      	movs	r2, #32
 8007352:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800735c:	2300      	movs	r3, #0
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	613b      	str	r3, [r7, #16]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	77fb      	strb	r3, [r7, #31]
 800737e:	e000      	b.n	8007382 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007380:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007392:	7ffb      	ldrb	r3, [r7, #31]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3720      	adds	r7, #32
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08c      	sub	sp, #48	; 0x30
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80073aa:	2301      	movs	r3, #1
 80073ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_SPI_TransmitReceive+0x26>
 80073be:	2302      	movs	r3, #2
 80073c0:	e18a      	b.n	80076d8 <HAL_SPI_TransmitReceive+0x33c>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073ca:	f7fe fc65 	bl	8005c98 <HAL_GetTick>
 80073ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80073e0:	887b      	ldrh	r3, [r7, #2]
 80073e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d00f      	beq.n	800740c <HAL_SPI_TransmitReceive+0x70>
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f2:	d107      	bne.n	8007404 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d103      	bne.n	8007404 <HAL_SPI_TransmitReceive+0x68>
 80073fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007400:	2b04      	cmp	r3, #4
 8007402:	d003      	beq.n	800740c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007404:	2302      	movs	r3, #2
 8007406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800740a:	e15b      	b.n	80076c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d005      	beq.n	800741e <HAL_SPI_TransmitReceive+0x82>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <HAL_SPI_TransmitReceive+0x82>
 8007418:	887b      	ldrh	r3, [r7, #2]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d103      	bne.n	8007426 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007424:	e14e      	b.n	80076c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b04      	cmp	r3, #4
 8007430:	d003      	beq.n	800743a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2205      	movs	r2, #5
 8007436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	887a      	ldrh	r2, [r7, #2]
 800744a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	887a      	ldrh	r2, [r7, #2]
 8007450:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	887a      	ldrh	r2, [r7, #2]
 800745c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	887a      	ldrh	r2, [r7, #2]
 8007462:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747a:	2b40      	cmp	r3, #64	; 0x40
 800747c:	d007      	beq.n	800748e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800748c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007496:	d178      	bne.n	800758a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <HAL_SPI_TransmitReceive+0x10a>
 80074a0:	8b7b      	ldrh	r3, [r7, #26]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d166      	bne.n	8007574 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	881a      	ldrh	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	1c9a      	adds	r2, r3, #2
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074ca:	e053      	b.n	8007574 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d11b      	bne.n	8007512 <HAL_SPI_TransmitReceive+0x176>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074de:	b29b      	uxth	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d016      	beq.n	8007512 <HAL_SPI_TransmitReceive+0x176>
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d113      	bne.n	8007512 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ee:	881a      	ldrh	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	1c9a      	adds	r2, r3, #2
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b01      	cmp	r3, #1
 800751e:	d119      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x1b8>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d014      	beq.n	8007554 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	b292      	uxth	r2, r2
 8007536:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	1c9a      	adds	r2, r3, #2
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007550:	2301      	movs	r3, #1
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007554:	f7fe fba0 	bl	8005c98 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007560:	429a      	cmp	r2, r3
 8007562:	d807      	bhi.n	8007574 <HAL_SPI_TransmitReceive+0x1d8>
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756a:	d003      	beq.n	8007574 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007572:	e0a7      	b.n	80076c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1a6      	bne.n	80074cc <HAL_SPI_TransmitReceive+0x130>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1a1      	bne.n	80074cc <HAL_SPI_TransmitReceive+0x130>
 8007588:	e07c      	b.n	8007684 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <HAL_SPI_TransmitReceive+0x1fc>
 8007592:	8b7b      	ldrh	r3, [r7, #26]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d16b      	bne.n	8007670 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	330c      	adds	r3, #12
 80075a2:	7812      	ldrb	r2, [r2, #0]
 80075a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	3b01      	subs	r3, #1
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075be:	e057      	b.n	8007670 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d11c      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x26c>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d017      	beq.n	8007608 <HAL_SPI_TransmitReceive+0x26c>
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d114      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	330c      	adds	r3, #12
 80075e8:	7812      	ldrb	r2, [r2, #0]
 80075ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b01      	cmp	r3, #1
 8007614:	d119      	bne.n	800764a <HAL_SPI_TransmitReceive+0x2ae>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800761a:	b29b      	uxth	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d014      	beq.n	800764a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007646:	2301      	movs	r3, #1
 8007648:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800764a:	f7fe fb25 	bl	8005c98 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007656:	429a      	cmp	r2, r3
 8007658:	d803      	bhi.n	8007662 <HAL_SPI_TransmitReceive+0x2c6>
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007660:	d102      	bne.n	8007668 <HAL_SPI_TransmitReceive+0x2cc>
 8007662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007664:	2b00      	cmp	r3, #0
 8007666:	d103      	bne.n	8007670 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800766e:	e029      	b.n	80076c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1a2      	bne.n	80075c0 <HAL_SPI_TransmitReceive+0x224>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800767e:	b29b      	uxth	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d19d      	bne.n	80075c0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007686:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 f8b1 	bl	80077f0 <SPI_EndRxTxTransaction>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d006      	beq.n	80076a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2220      	movs	r2, #32
 800769e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80076a0:	e010      	b.n	80076c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10b      	bne.n	80076c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	e000      	b.n	80076c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80076c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3730      	adds	r7, #48	; 0x30
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	4613      	mov	r3, r2
 80076ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076f0:	f7fe fad2 	bl	8005c98 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	1a9b      	subs	r3, r3, r2
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	4413      	add	r3, r2
 80076fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007700:	f7fe faca 	bl	8005c98 <HAL_GetTick>
 8007704:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007706:	4b39      	ldr	r3, [pc, #228]	; (80077ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	015b      	lsls	r3, r3, #5
 800770c:	0d1b      	lsrs	r3, r3, #20
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	fb02 f303 	mul.w	r3, r2, r3
 8007714:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007716:	e054      	b.n	80077c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	d050      	beq.n	80077c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007720:	f7fe faba 	bl	8005c98 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	429a      	cmp	r2, r3
 800772e:	d902      	bls.n	8007736 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d13d      	bne.n	80077b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007744:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800774e:	d111      	bne.n	8007774 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007758:	d004      	beq.n	8007764 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007762:	d107      	bne.n	8007774 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007772:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800777c:	d10f      	bne.n	800779e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800779c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e017      	b.n	80077e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	3b01      	subs	r3, #1
 80077c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	4013      	ands	r3, r2
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	bf0c      	ite	eq
 80077d2:	2301      	moveq	r3, #1
 80077d4:	2300      	movne	r3, #0
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	79fb      	ldrb	r3, [r7, #7]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d19b      	bne.n	8007718 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3720      	adds	r7, #32
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	200000c0 	.word	0x200000c0

080077f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2200      	movs	r2, #0
 8007804:	2180      	movs	r1, #128	; 0x80
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f7ff ff6a 	bl	80076e0 <SPI_WaitFlagStateUntilTimeout>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007816:	f043 0220 	orr.w	r2, r3, #32
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e000      	b.n	8007824 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e041      	b.n	80078c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fe f824 	bl	80058a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3304      	adds	r3, #4
 8007868:	4619      	mov	r1, r3
 800786a:	4610      	mov	r0, r2
 800786c:	f000 fc9a 	bl	80081a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d001      	beq.n	80078e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e03a      	b.n	800795a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0201 	orr.w	r2, r2, #1
 80078fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a18      	ldr	r2, [pc, #96]	; (8007964 <HAL_TIM_Base_Start_IT+0x98>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00e      	beq.n	8007924 <HAL_TIM_Base_Start_IT+0x58>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800790e:	d009      	beq.n	8007924 <HAL_TIM_Base_Start_IT+0x58>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a14      	ldr	r2, [pc, #80]	; (8007968 <HAL_TIM_Base_Start_IT+0x9c>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d004      	beq.n	8007924 <HAL_TIM_Base_Start_IT+0x58>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a13      	ldr	r2, [pc, #76]	; (800796c <HAL_TIM_Base_Start_IT+0xa0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d111      	bne.n	8007948 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0307 	and.w	r3, r3, #7
 800792e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b06      	cmp	r3, #6
 8007934:	d010      	beq.n	8007958 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f042 0201 	orr.w	r2, r2, #1
 8007944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007946:	e007      	b.n	8007958 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0201 	orr.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	bc80      	pop	{r7}
 8007962:	4770      	bx	lr
 8007964:	40012c00 	.word	0x40012c00
 8007968:	40000400 	.word	0x40000400
 800796c:	40000800 	.word	0x40000800

08007970 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0201 	bic.w	r2, r2, #1
 8007986:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6a1a      	ldr	r2, [r3, #32]
 800798e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007992:	4013      	ands	r3, r2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10f      	bne.n	80079b8 <HAL_TIM_Base_Stop_IT+0x48>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6a1a      	ldr	r2, [r3, #32]
 800799e:	f240 4344 	movw	r3, #1092	; 0x444
 80079a2:	4013      	ands	r3, r2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d107      	bne.n	80079b8 <HAL_TIM_Base_Stop_IT+0x48>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0201 	bic.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bc80      	pop	{r7}
 80079ca:	4770      	bx	lr

080079cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e093      	b.n	8007b08 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d106      	bne.n	80079fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7fd ff0f 	bl	8005818 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6812      	ldr	r2, [r2, #0]
 8007a0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a10:	f023 0307 	bic.w	r3, r3, #7
 8007a14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f000 fbbf 	bl	80081a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a4e:	f023 0303 	bic.w	r3, r3, #3
 8007a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	021b      	lsls	r3, r3, #8
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007a6c:	f023 030c 	bic.w	r3, r3, #12
 8007a70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	021b      	lsls	r3, r3, #8
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	011a      	lsls	r2, r3, #4
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	031b      	lsls	r3, r3, #12
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007aaa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d110      	bne.n	8007b62 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d102      	bne.n	8007b4c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b46:	7b7b      	ldrb	r3, [r7, #13]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d001      	beq.n	8007b50 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e089      	b.n	8007c64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b60:	e031      	b.n	8007bc6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d110      	bne.n	8007b8a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d102      	bne.n	8007b74 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b6e:	7b3b      	ldrb	r3, [r7, #12]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d001      	beq.n	8007b78 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e075      	b.n	8007c64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b88:	e01d      	b.n	8007bc6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d108      	bne.n	8007ba2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d105      	bne.n	8007ba2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b96:	7b7b      	ldrb	r3, [r7, #13]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d102      	bne.n	8007ba2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b9c:	7b3b      	ldrb	r3, [r7, #12]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d001      	beq.n	8007ba6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e05e      	b.n	8007c64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2202      	movs	r2, #2
 8007bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d010      	beq.n	8007bf4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007bd2:	e01f      	b.n	8007c14 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	2100      	movs	r1, #0
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fbd9 	bl	8008394 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f042 0202 	orr.w	r2, r2, #2
 8007bf0:	60da      	str	r2, [r3, #12]
      break;
 8007bf2:	e02e      	b.n	8007c52 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	2104      	movs	r1, #4
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 fbc9 	bl	8008394 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0204 	orr.w	r2, r2, #4
 8007c10:	60da      	str	r2, [r3, #12]
      break;
 8007c12:	e01e      	b.n	8007c52 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fbb9 	bl	8008394 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2201      	movs	r2, #1
 8007c28:	2104      	movs	r1, #4
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fbb2 	bl	8008394 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f042 0202 	orr.w	r2, r2, #2
 8007c3e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f042 0204 	orr.w	r2, r2, #4
 8007c4e:	60da      	str	r2, [r3, #12]
      break;
 8007c50:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f042 0201 	orr.w	r2, r2, #1
 8007c60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10f      	bne.n	8007c9c <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2200      	movs	r2, #0
 8007c82:	2100      	movs	r1, #0
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 fb85 	bl	8008394 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0202 	bic.w	r2, r2, #2
 8007c98:	60da      	str	r2, [r3, #12]
 8007c9a:	e030      	b.n	8007cfe <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d10f      	bne.n	8007cc2 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2104      	movs	r1, #4
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 fb72 	bl	8008394 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0204 	bic.w	r2, r2, #4
 8007cbe:	60da      	str	r2, [r3, #12]
 8007cc0:	e01d      	b.n	8007cfe <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2100      	movs	r1, #0
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 fb62 	bl	8008394 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2104      	movs	r1, #4
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 fb5b 	bl	8008394 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0202 	bic.w	r2, r2, #2
 8007cec:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0204 	bic.w	r2, r2, #4
 8007cfc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6a1a      	ldr	r2, [r3, #32]
 8007d04:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d08:	4013      	ands	r3, r2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10f      	bne.n	8007d2e <HAL_TIM_Encoder_Stop_IT+0xc2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6a1a      	ldr	r2, [r3, #32]
 8007d14:	f240 4344 	movw	r3, #1092	; 0x444
 8007d18:	4013      	ands	r3, r2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d107      	bne.n	8007d2e <HAL_TIM_Encoder_Stop_IT+0xc2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 0201 	bic.w	r2, r2, #1
 8007d2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <HAL_TIM_Encoder_Stop_IT+0xce>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d138      	bne.n	8007dac <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d104      	bne.n	8007d4a <HAL_TIM_Encoder_Stop_IT+0xde>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d48:	e013      	b.n	8007d72 <HAL_TIM_Encoder_Stop_IT+0x106>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d104      	bne.n	8007d5a <HAL_TIM_Encoder_Stop_IT+0xee>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d58:	e00b      	b.n	8007d72 <HAL_TIM_Encoder_Stop_IT+0x106>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d104      	bne.n	8007d6a <HAL_TIM_Encoder_Stop_IT+0xfe>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d68:	e003      	b.n	8007d72 <HAL_TIM_Encoder_Stop_IT+0x106>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d104      	bne.n	8007d82 <HAL_TIM_Encoder_Stop_IT+0x116>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d80:	e024      	b.n	8007dcc <HAL_TIM_Encoder_Stop_IT+0x160>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	d104      	bne.n	8007d92 <HAL_TIM_Encoder_Stop_IT+0x126>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d90:	e01c      	b.n	8007dcc <HAL_TIM_Encoder_Stop_IT+0x160>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d104      	bne.n	8007da2 <HAL_TIM_Encoder_Stop_IT+0x136>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007da0:	e014      	b.n	8007dcc <HAL_TIM_Encoder_Stop_IT+0x160>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007daa:	e00f      	b.n	8007dcc <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d122      	bne.n	8007e32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d11b      	bne.n	8007e32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f06f 0202 	mvn.w	r2, #2
 8007e02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7fd fc07 	bl	800562c <HAL_TIM_IC_CaptureCallback>
 8007e1e:	e005      	b.n	8007e2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f9a4 	bl	800816e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9aa 	bl	8008180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d122      	bne.n	8007e86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d11b      	bne.n	8007e86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f06f 0204 	mvn.w	r2, #4
 8007e56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7fd fbdd 	bl	800562c <HAL_TIM_IC_CaptureCallback>
 8007e72:	e005      	b.n	8007e80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f97a 	bl	800816e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f980 	bl	8008180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	f003 0308 	and.w	r3, r3, #8
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d122      	bne.n	8007eda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b08      	cmp	r3, #8
 8007ea0:	d11b      	bne.n	8007eda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f06f 0208 	mvn.w	r2, #8
 8007eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2204      	movs	r2, #4
 8007eb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	f003 0303 	and.w	r3, r3, #3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7fd fbb3 	bl	800562c <HAL_TIM_IC_CaptureCallback>
 8007ec6:	e005      	b.n	8007ed4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f950 	bl	800816e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f956 	bl	8008180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	f003 0310 	and.w	r3, r3, #16
 8007ee4:	2b10      	cmp	r3, #16
 8007ee6:	d122      	bne.n	8007f2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f003 0310 	and.w	r3, r3, #16
 8007ef2:	2b10      	cmp	r3, #16
 8007ef4:	d11b      	bne.n	8007f2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f06f 0210 	mvn.w	r2, #16
 8007efe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2208      	movs	r2, #8
 8007f04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7fd fb89 	bl	800562c <HAL_TIM_IC_CaptureCallback>
 8007f1a:	e005      	b.n	8007f28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f926 	bl	800816e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f92c 	bl	8008180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d10e      	bne.n	8007f5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d107      	bne.n	8007f5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f06f 0201 	mvn.w	r2, #1
 8007f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7fd fb21 	bl	800559c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f64:	2b80      	cmp	r3, #128	; 0x80
 8007f66:	d10e      	bne.n	8007f86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f72:	2b80      	cmp	r3, #128	; 0x80
 8007f74:	d107      	bne.n	8007f86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fa92 	bl	80084aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f90:	2b40      	cmp	r3, #64	; 0x40
 8007f92:	d10e      	bne.n	8007fb2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9e:	2b40      	cmp	r3, #64	; 0x40
 8007fa0:	d107      	bne.n	8007fb2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f8f0 	bl	8008192 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	f003 0320 	and.w	r3, r3, #32
 8007fbc:	2b20      	cmp	r3, #32
 8007fbe:	d10e      	bne.n	8007fde <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f003 0320 	and.w	r3, r3, #32
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	d107      	bne.n	8007fde <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f06f 0220 	mvn.w	r2, #32
 8007fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fa5d 	bl	8008498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d101      	bne.n	8007ffe <HAL_TIM_ConfigClockSource+0x18>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e0b3      	b.n	8008166 <HAL_TIM_ConfigClockSource+0x180>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2202      	movs	r2, #2
 800800a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800801c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008024:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008036:	d03e      	beq.n	80080b6 <HAL_TIM_ConfigClockSource+0xd0>
 8008038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800803c:	f200 8087 	bhi.w	800814e <HAL_TIM_ConfigClockSource+0x168>
 8008040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008044:	f000 8085 	beq.w	8008152 <HAL_TIM_ConfigClockSource+0x16c>
 8008048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800804c:	d87f      	bhi.n	800814e <HAL_TIM_ConfigClockSource+0x168>
 800804e:	2b70      	cmp	r3, #112	; 0x70
 8008050:	d01a      	beq.n	8008088 <HAL_TIM_ConfigClockSource+0xa2>
 8008052:	2b70      	cmp	r3, #112	; 0x70
 8008054:	d87b      	bhi.n	800814e <HAL_TIM_ConfigClockSource+0x168>
 8008056:	2b60      	cmp	r3, #96	; 0x60
 8008058:	d050      	beq.n	80080fc <HAL_TIM_ConfigClockSource+0x116>
 800805a:	2b60      	cmp	r3, #96	; 0x60
 800805c:	d877      	bhi.n	800814e <HAL_TIM_ConfigClockSource+0x168>
 800805e:	2b50      	cmp	r3, #80	; 0x50
 8008060:	d03c      	beq.n	80080dc <HAL_TIM_ConfigClockSource+0xf6>
 8008062:	2b50      	cmp	r3, #80	; 0x50
 8008064:	d873      	bhi.n	800814e <HAL_TIM_ConfigClockSource+0x168>
 8008066:	2b40      	cmp	r3, #64	; 0x40
 8008068:	d058      	beq.n	800811c <HAL_TIM_ConfigClockSource+0x136>
 800806a:	2b40      	cmp	r3, #64	; 0x40
 800806c:	d86f      	bhi.n	800814e <HAL_TIM_ConfigClockSource+0x168>
 800806e:	2b30      	cmp	r3, #48	; 0x30
 8008070:	d064      	beq.n	800813c <HAL_TIM_ConfigClockSource+0x156>
 8008072:	2b30      	cmp	r3, #48	; 0x30
 8008074:	d86b      	bhi.n	800814e <HAL_TIM_ConfigClockSource+0x168>
 8008076:	2b20      	cmp	r3, #32
 8008078:	d060      	beq.n	800813c <HAL_TIM_ConfigClockSource+0x156>
 800807a:	2b20      	cmp	r3, #32
 800807c:	d867      	bhi.n	800814e <HAL_TIM_ConfigClockSource+0x168>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d05c      	beq.n	800813c <HAL_TIM_ConfigClockSource+0x156>
 8008082:	2b10      	cmp	r3, #16
 8008084:	d05a      	beq.n	800813c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008086:	e062      	b.n	800814e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6818      	ldr	r0, [r3, #0]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	6899      	ldr	r1, [r3, #8]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f000 f95d 	bl	8008356 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	609a      	str	r2, [r3, #8]
      break;
 80080b4:	e04e      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6818      	ldr	r0, [r3, #0]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	6899      	ldr	r1, [r3, #8]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f000 f946 	bl	8008356 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080d8:	609a      	str	r2, [r3, #8]
      break;
 80080da:	e03b      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	6859      	ldr	r1, [r3, #4]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	461a      	mov	r2, r3
 80080ea:	f000 f8bd 	bl	8008268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2150      	movs	r1, #80	; 0x50
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 f914 	bl	8008322 <TIM_ITRx_SetConfig>
      break;
 80080fa:	e02b      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6818      	ldr	r0, [r3, #0]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	6859      	ldr	r1, [r3, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	461a      	mov	r2, r3
 800810a:	f000 f8db 	bl	80082c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2160      	movs	r1, #96	; 0x60
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f904 	bl	8008322 <TIM_ITRx_SetConfig>
      break;
 800811a:	e01b      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	6859      	ldr	r1, [r3, #4]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	461a      	mov	r2, r3
 800812a:	f000 f89d 	bl	8008268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2140      	movs	r1, #64	; 0x40
 8008134:	4618      	mov	r0, r3
 8008136:	f000 f8f4 	bl	8008322 <TIM_ITRx_SetConfig>
      break;
 800813a:	e00b      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4619      	mov	r1, r3
 8008146:	4610      	mov	r0, r2
 8008148:	f000 f8eb 	bl	8008322 <TIM_ITRx_SetConfig>
        break;
 800814c:	e002      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800814e:	bf00      	nop
 8008150:	e000      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	bc80      	pop	{r7}
 800817e:	4770      	bx	lr

08008180 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr

08008192 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	bc80      	pop	{r7}
 80081a2:	4770      	bx	lr

080081a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a29      	ldr	r2, [pc, #164]	; (800825c <TIM_Base_SetConfig+0xb8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00b      	beq.n	80081d4 <TIM_Base_SetConfig+0x30>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c2:	d007      	beq.n	80081d4 <TIM_Base_SetConfig+0x30>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a26      	ldr	r2, [pc, #152]	; (8008260 <TIM_Base_SetConfig+0xbc>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d003      	beq.n	80081d4 <TIM_Base_SetConfig+0x30>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a25      	ldr	r2, [pc, #148]	; (8008264 <TIM_Base_SetConfig+0xc0>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d108      	bne.n	80081e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a1c      	ldr	r2, [pc, #112]	; (800825c <TIM_Base_SetConfig+0xb8>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00b      	beq.n	8008206 <TIM_Base_SetConfig+0x62>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f4:	d007      	beq.n	8008206 <TIM_Base_SetConfig+0x62>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a19      	ldr	r2, [pc, #100]	; (8008260 <TIM_Base_SetConfig+0xbc>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d003      	beq.n	8008206 <TIM_Base_SetConfig+0x62>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a18      	ldr	r2, [pc, #96]	; (8008264 <TIM_Base_SetConfig+0xc0>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d108      	bne.n	8008218 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800820c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	4313      	orrs	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a07      	ldr	r2, [pc, #28]	; (800825c <TIM_Base_SetConfig+0xb8>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d103      	bne.n	800824c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	691a      	ldr	r2, [r3, #16]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	615a      	str	r2, [r3, #20]
}
 8008252:	bf00      	nop
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr
 800825c:	40012c00 	.word	0x40012c00
 8008260:	40000400 	.word	0x40000400
 8008264:	40000800 	.word	0x40000800

08008268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	f023 0201 	bic.w	r2, r3, #1
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	011b      	lsls	r3, r3, #4
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f023 030a 	bic.w	r3, r3, #10
 80082a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	621a      	str	r2, [r3, #32]
}
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc80      	pop	{r7}
 80082c2:	4770      	bx	lr

080082c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a1b      	ldr	r3, [r3, #32]
 80082d4:	f023 0210 	bic.w	r2, r3, #16
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	031b      	lsls	r3, r3, #12
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008300:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	011b      	lsls	r3, r3, #4
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	4313      	orrs	r3, r2
 800830a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	621a      	str	r2, [r3, #32]
}
 8008318:	bf00      	nop
 800831a:	371c      	adds	r7, #28
 800831c:	46bd      	mov	sp, r7
 800831e:	bc80      	pop	{r7}
 8008320:	4770      	bx	lr

08008322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008322:	b480      	push	{r7}
 8008324:	b085      	sub	sp, #20
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4313      	orrs	r3, r2
 8008340:	f043 0307 	orr.w	r3, r3, #7
 8008344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	609a      	str	r2, [r3, #8]
}
 800834c:	bf00      	nop
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	bc80      	pop	{r7}
 8008354:	4770      	bx	lr

08008356 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008356:	b480      	push	{r7}
 8008358:	b087      	sub	sp, #28
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	607a      	str	r2, [r7, #4]
 8008362:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008370:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	021a      	lsls	r2, r3, #8
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	431a      	orrs	r2, r3
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	4313      	orrs	r3, r2
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	4313      	orrs	r3, r2
 8008382:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	609a      	str	r2, [r3, #8]
}
 800838a:	bf00      	nop
 800838c:	371c      	adds	r7, #28
 800838e:	46bd      	mov	sp, r7
 8008390:	bc80      	pop	{r7}
 8008392:	4770      	bx	lr

08008394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f003 031f 	and.w	r3, r3, #31
 80083a6:	2201      	movs	r2, #1
 80083a8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a1a      	ldr	r2, [r3, #32]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	43db      	mvns	r3, r3
 80083b6:	401a      	ands	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a1a      	ldr	r2, [r3, #32]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f003 031f 	and.w	r3, r3, #31
 80083c6:	6879      	ldr	r1, [r7, #4]
 80083c8:	fa01 f303 	lsl.w	r3, r1, r3
 80083cc:	431a      	orrs	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	621a      	str	r2, [r3, #32]
}
 80083d2:	bf00      	nop
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bc80      	pop	{r7}
 80083da:	4770      	bx	lr

080083dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d101      	bne.n	80083f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083f0:	2302      	movs	r3, #2
 80083f2:	e046      	b.n	8008482 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a16      	ldr	r2, [pc, #88]	; (800848c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00e      	beq.n	8008456 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008440:	d009      	beq.n	8008456 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a12      	ldr	r2, [pc, #72]	; (8008490 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d004      	beq.n	8008456 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a10      	ldr	r2, [pc, #64]	; (8008494 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d10c      	bne.n	8008470 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800845c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	4313      	orrs	r3, r2
 8008466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	bc80      	pop	{r7}
 800848a:	4770      	bx	lr
 800848c:	40012c00 	.word	0x40012c00
 8008490:	40000400 	.word	0x40000400
 8008494:	40000800 	.word	0x40000800

08008498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bc80      	pop	{r7}
 80084a8:	4770      	bx	lr

080084aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084b2:	bf00      	nop
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr

080084bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e03f      	b.n	800854e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d106      	bne.n	80084e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7fd fa02 	bl	80058ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2224      	movs	r2, #36	; 0x24
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fcbf 	bl	8008e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	691a      	ldr	r2, [r3, #16]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	695a      	ldr	r2, [r3, #20]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68da      	ldr	r2, [r3, #12]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2220      	movs	r2, #32
 8008548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b086      	sub	sp, #24
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	4613      	mov	r3, r2
 8008562:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b20      	cmp	r3, #32
 800856e:	d13c      	bne.n	80085ea <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e035      	b.n	80085ec <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008586:	2b01      	cmp	r3, #1
 8008588:	d101      	bne.n	800858e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800858a:	2302      	movs	r3, #2
 800858c:	e02e      	b.n	80085ec <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800859c:	88fb      	ldrh	r3, [r7, #6]
 800859e:	461a      	mov	r2, r3
 80085a0:	68b9      	ldr	r1, [r7, #8]
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 faa4 	bl	8008af0 <UART_Start_Receive_DMA>
 80085a8:	4603      	mov	r3, r0
 80085aa:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d119      	bne.n	80085e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d113      	bne.n	80085e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085ba:	2300      	movs	r3, #0
 80085bc:	613b      	str	r3, [r7, #16]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	613b      	str	r3, [r7, #16]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0210 	orr.w	r2, r2, #16
 80085de:	60da      	str	r2, [r3, #12]
 80085e0:	e001      	b.n	80085e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	e000      	b.n	80085ec <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80085ea:	2302      	movs	r3, #2
  }
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08a      	sub	sp, #40	; 0x28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008614:	2300      	movs	r3, #0
 8008616:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008618:	2300      	movs	r3, #0
 800861a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10d      	bne.n	8008646 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	f003 0320 	and.w	r3, r3, #32
 8008630:	2b00      	cmp	r3, #0
 8008632:	d008      	beq.n	8008646 <HAL_UART_IRQHandler+0x52>
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fb76 	bl	8008d30 <UART_Receive_IT>
      return;
 8008644:	e17b      	b.n	800893e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 80b1 	beq.w	80087b0 <HAL_UART_IRQHandler+0x1bc>
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	f003 0301 	and.w	r3, r3, #1
 8008654:	2b00      	cmp	r3, #0
 8008656:	d105      	bne.n	8008664 <HAL_UART_IRQHandler+0x70>
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 80a6 	beq.w	80087b0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00a      	beq.n	8008684 <HAL_UART_IRQHandler+0x90>
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867c:	f043 0201 	orr.w	r2, r3, #1
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	f003 0304 	and.w	r3, r3, #4
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <HAL_UART_IRQHandler+0xb0>
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	f043 0202 	orr.w	r2, r3, #2
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <HAL_UART_IRQHandler+0xd0>
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	f043 0204 	orr.w	r2, r3, #4
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	f003 0308 	and.w	r3, r3, #8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00f      	beq.n	80086ee <HAL_UART_IRQHandler+0xfa>
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d104      	bne.n	80086e2 <HAL_UART_IRQHandler+0xee>
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	f043 0208 	orr.w	r2, r3, #8
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 811e 	beq.w	8008934 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	f003 0320 	and.w	r3, r3, #32
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d007      	beq.n	8008712 <HAL_UART_IRQHandler+0x11e>
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	f003 0320 	and.w	r3, r3, #32
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fb0f 	bl	8008d30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	bf14      	ite	ne
 8008720:	2301      	movne	r3, #1
 8008722:	2300      	moveq	r3, #0
 8008724:	b2db      	uxtb	r3, r3
 8008726:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872c:	f003 0308 	and.w	r3, r3, #8
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <HAL_UART_IRQHandler+0x146>
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d031      	beq.n	800879e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fa51 	bl	8008be2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	d023      	beq.n	8008796 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	695a      	ldr	r2, [r3, #20]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800875c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008762:	2b00      	cmp	r3, #0
 8008764:	d013      	beq.n	800878e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876a:	4a76      	ldr	r2, [pc, #472]	; (8008944 <HAL_UART_IRQHandler+0x350>)
 800876c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	4618      	mov	r0, r3
 8008774:	f7fd fcc0 	bl	80060f8 <HAL_DMA_Abort_IT>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d016      	beq.n	80087ac <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008788:	4610      	mov	r0, r2
 800878a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800878c:	e00e      	b.n	80087ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f8f5 	bl	800897e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008794:	e00a      	b.n	80087ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f8f1 	bl	800897e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800879c:	e006      	b.n	80087ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f8ed 	bl	800897e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80087aa:	e0c3      	b.n	8008934 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ac:	bf00      	nop
    return;
 80087ae:	e0c1      	b.n	8008934 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	f040 80a1 	bne.w	80088fc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	f003 0310 	and.w	r3, r3, #16
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 809b 	beq.w	80088fc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	f003 0310 	and.w	r3, r3, #16
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 8095 	beq.w	80088fc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60fb      	str	r3, [r7, #12]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d04e      	beq.n	8008894 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008800:	8a3b      	ldrh	r3, [r7, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 8098 	beq.w	8008938 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800880c:	8a3a      	ldrh	r2, [r7, #16]
 800880e:	429a      	cmp	r2, r3
 8008810:	f080 8092 	bcs.w	8008938 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	8a3a      	ldrh	r2, [r7, #16]
 8008818:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	2b20      	cmp	r3, #32
 8008822:	d02b      	beq.n	800887c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008832:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	695a      	ldr	r2, [r3, #20]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 0201 	bic.w	r2, r2, #1
 8008842:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	695a      	ldr	r2, [r3, #20]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008852:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68da      	ldr	r2, [r3, #12]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0210 	bic.w	r2, r2, #16
 8008870:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008876:	4618      	mov	r0, r3
 8008878:	f7fd fc03 	bl	8006082 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008884:	b29b      	uxth	r3, r3
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	b29b      	uxth	r3, r3
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7fc fea9 	bl	80055e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008892:	e051      	b.n	8008938 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800889c:	b29b      	uxth	r3, r3
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d047      	beq.n	800893c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80088ac:	8a7b      	ldrh	r3, [r7, #18]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d044      	beq.n	800893c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68da      	ldr	r2, [r3, #12]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088c0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	695a      	ldr	r2, [r3, #20]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0201 	bic.w	r2, r2, #1
 80088d0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0210 	bic.w	r2, r2, #16
 80088ee:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088f0:	8a7b      	ldrh	r3, [r7, #18]
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7fc fe75 	bl	80055e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80088fa:	e01f      	b.n	800893c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008902:	2b00      	cmp	r3, #0
 8008904:	d008      	beq.n	8008918 <HAL_UART_IRQHandler+0x324>
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f9a6 	bl	8008c62 <UART_Transmit_IT>
    return;
 8008916:	e012      	b.n	800893e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00d      	beq.n	800893e <HAL_UART_IRQHandler+0x34a>
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008928:	2b00      	cmp	r3, #0
 800892a:	d008      	beq.n	800893e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f9e7 	bl	8008d00 <UART_EndTransmit_IT>
    return;
 8008932:	e004      	b.n	800893e <HAL_UART_IRQHandler+0x34a>
    return;
 8008934:	bf00      	nop
 8008936:	e002      	b.n	800893e <HAL_UART_IRQHandler+0x34a>
      return;
 8008938:	bf00      	nop
 800893a:	e000      	b.n	800893e <HAL_UART_IRQHandler+0x34a>
      return;
 800893c:	bf00      	nop
  }
}
 800893e:	3728      	adds	r7, #40	; 0x28
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	08008c3b 	.word	0x08008c3b

08008948 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	bc80      	pop	{r7}
 8008958:	4770      	bx	lr

0800895a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800895a:	b480      	push	{r7}
 800895c:	b083      	sub	sp, #12
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008962:	bf00      	nop
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	bc80      	pop	{r7}
 800896a:	4770      	bx	lr

0800896c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	bc80      	pop	{r7}
 800897c:	4770      	bx	lr

0800897e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr

08008990 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0320 	and.w	r3, r3, #32
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d12a      	bne.n	8008a02 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089c0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	695a      	ldr	r2, [r3, #20]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 0201 	bic.w	r2, r2, #1
 80089d0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	695a      	ldr	r2, [r3, #20]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089e0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d107      	bne.n	8008a02 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68da      	ldr	r2, [r3, #12]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0210 	bic.w	r2, r2, #16
 8008a00:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d106      	bne.n	8008a18 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a0e:	4619      	mov	r1, r3
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f7fc fde7 	bl	80055e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a16:	e002      	b.n	8008a1e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7ff ff9e 	bl	800895a <HAL_UART_RxCpltCallback>
}
 8008a1e:	bf00      	nop
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d108      	bne.n	8008a4e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a40:	085b      	lsrs	r3, r3, #1
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4619      	mov	r1, r3
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f7fc fdcc 	bl	80055e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a4c:	e002      	b.n	8008a54 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7ff ff8c 	bl	800896c <HAL_UART_RxHalfCpltCallback>
}
 8008a54:	bf00      	nop
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	bf14      	ite	ne
 8008a7c:	2301      	movne	r3, #1
 8008a7e:	2300      	moveq	r3, #0
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b21      	cmp	r3, #33	; 0x21
 8008a8e:	d108      	bne.n	8008aa2 <UART_DMAError+0x46>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d005      	beq.n	8008aa2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008a9c:	68b8      	ldr	r0, [r7, #8]
 8008a9e:	f000 f88b 	bl	8008bb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	bf14      	ite	ne
 8008ab0:	2301      	movne	r3, #1
 8008ab2:	2300      	moveq	r3, #0
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b22      	cmp	r3, #34	; 0x22
 8008ac2:	d108      	bne.n	8008ad6 <UART_DMAError+0x7a>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d005      	beq.n	8008ad6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2200      	movs	r2, #0
 8008ace:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008ad0:	68b8      	ldr	r0, [r7, #8]
 8008ad2:	f000 f886 	bl	8008be2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ada:	f043 0210 	orr.w	r2, r3, #16
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ae2:	68b8      	ldr	r0, [r7, #8]
 8008ae4:	f7ff ff4b 	bl	800897e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ae8:	bf00      	nop
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	4613      	mov	r3, r2
 8008afc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	88fa      	ldrh	r2, [r7, #6]
 8008b08:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2222      	movs	r2, #34	; 0x22
 8008b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	4a23      	ldr	r2, [pc, #140]	; (8008bac <UART_Start_Receive_DMA+0xbc>)
 8008b1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	4a22      	ldr	r2, [pc, #136]	; (8008bb0 <UART_Start_Receive_DMA+0xc0>)
 8008b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2c:	4a21      	ldr	r2, [pc, #132]	; (8008bb4 <UART_Start_Receive_DMA+0xc4>)
 8008b2e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b34:	2200      	movs	r2, #0
 8008b36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008b38:	f107 0308 	add.w	r3, r7, #8
 8008b3c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3304      	adds	r3, #4
 8008b48:	4619      	mov	r1, r3
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	88fb      	ldrh	r3, [r7, #6]
 8008b50:	f7fd fa38 	bl	8005fc4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008b54:	2300      	movs	r3, #0
 8008b56:	613b      	str	r3, [r7, #16]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	613b      	str	r3, [r7, #16]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	613b      	str	r3, [r7, #16]
 8008b68:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68da      	ldr	r2, [r3, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b80:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	695a      	ldr	r2, [r3, #20]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f042 0201 	orr.w	r2, r2, #1
 8008b90:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	695a      	ldr	r2, [r3, #20]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ba0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	08008991 	.word	0x08008991
 8008bb0:	08008a27 	.word	0x08008a27
 8008bb4:	08008a5d 	.word	0x08008a5d

08008bb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008bce:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bc80      	pop	{r7}
 8008be0:	4770      	bx	lr

08008be2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bf8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	695a      	ldr	r2, [r3, #20]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 0201 	bic.w	r2, r2, #1
 8008c08:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d107      	bne.n	8008c22 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0210 	bic.w	r2, r2, #16
 8008c20:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bc80      	pop	{r7}
 8008c38:	4770      	bx	lr

08008c3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f7ff fe92 	bl	800897e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c5a:	bf00      	nop
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b085      	sub	sp, #20
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b21      	cmp	r3, #33	; 0x21
 8008c74:	d13e      	bne.n	8008cf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7e:	d114      	bne.n	8008caa <UART_Transmit_IT+0x48>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d110      	bne.n	8008caa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	1c9a      	adds	r2, r3, #2
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	621a      	str	r2, [r3, #32]
 8008ca8:	e008      	b.n	8008cbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	1c59      	adds	r1, r3, #1
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	6211      	str	r1, [r2, #32]
 8008cb4:	781a      	ldrb	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10f      	bne.n	8008cf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68da      	ldr	r2, [r3, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68da      	ldr	r2, [r3, #12]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	e000      	b.n	8008cf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008cf4:	2302      	movs	r3, #2
  }
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bc80      	pop	{r7}
 8008cfe:	4770      	bx	lr

08008d00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff fe11 	bl	8008948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b22      	cmp	r3, #34	; 0x22
 8008d42:	f040 8099 	bne.w	8008e78 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d4e:	d117      	bne.n	8008d80 <UART_Receive_IT+0x50>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d113      	bne.n	8008d80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	1c9a      	adds	r2, r3, #2
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	629a      	str	r2, [r3, #40]	; 0x28
 8008d7e:	e026      	b.n	8008dce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d84:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d92:	d007      	beq.n	8008da4 <UART_Receive_IT+0x74>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10a      	bne.n	8008db2 <UART_Receive_IT+0x82>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d106      	bne.n	8008db2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	701a      	strb	r2, [r3, #0]
 8008db0:	e008      	b.n	8008dc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc8:	1c5a      	adds	r2, r3, #1
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d148      	bne.n	8008e74 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 0220 	bic.w	r2, r2, #32
 8008df0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68da      	ldr	r2, [r3, #12]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	695a      	ldr	r2, [r3, #20]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f022 0201 	bic.w	r2, r2, #1
 8008e10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d123      	bne.n	8008e6a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 0210 	bic.w	r2, r2, #16
 8008e36:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0310 	and.w	r3, r3, #16
 8008e42:	2b10      	cmp	r3, #16
 8008e44:	d10a      	bne.n	8008e5c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	60fb      	str	r3, [r7, #12]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7fc fbbe 	bl	80055e4 <HAL_UARTEx_RxEventCallback>
 8008e68:	e002      	b.n	8008e70 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff fd75 	bl	800895a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	e002      	b.n	8008e7a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	e000      	b.n	8008e7a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008e78:	2302      	movs	r3, #2
  }
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68da      	ldr	r2, [r3, #12]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	689a      	ldr	r2, [r3, #8]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008ebe:	f023 030c 	bic.w	r3, r3, #12
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	6812      	ldr	r2, [r2, #0]
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	430b      	orrs	r3, r1
 8008eca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699a      	ldr	r2, [r3, #24]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a2c      	ldr	r2, [pc, #176]	; (8008f98 <UART_SetConfig+0x114>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d103      	bne.n	8008ef4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008eec:	f7fe f864 	bl	8006fb8 <HAL_RCC_GetPCLK2Freq>
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	e002      	b.n	8008efa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008ef4:	f7fe f84c 	bl	8006f90 <HAL_RCC_GetPCLK1Freq>
 8008ef8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	4613      	mov	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4413      	add	r3, r2
 8008f02:	009a      	lsls	r2, r3, #2
 8008f04:	441a      	add	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f10:	4a22      	ldr	r2, [pc, #136]	; (8008f9c <UART_SetConfig+0x118>)
 8008f12:	fba2 2303 	umull	r2, r3, r2, r3
 8008f16:	095b      	lsrs	r3, r3, #5
 8008f18:	0119      	lsls	r1, r3, #4
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	009a      	lsls	r2, r3, #2
 8008f24:	441a      	add	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f30:	4b1a      	ldr	r3, [pc, #104]	; (8008f9c <UART_SetConfig+0x118>)
 8008f32:	fba3 0302 	umull	r0, r3, r3, r2
 8008f36:	095b      	lsrs	r3, r3, #5
 8008f38:	2064      	movs	r0, #100	; 0x64
 8008f3a:	fb00 f303 	mul.w	r3, r0, r3
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	3332      	adds	r3, #50	; 0x32
 8008f44:	4a15      	ldr	r2, [pc, #84]	; (8008f9c <UART_SetConfig+0x118>)
 8008f46:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4a:	095b      	lsrs	r3, r3, #5
 8008f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f50:	4419      	add	r1, r3
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009a      	lsls	r2, r3, #2
 8008f5c:	441a      	add	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f68:	4b0c      	ldr	r3, [pc, #48]	; (8008f9c <UART_SetConfig+0x118>)
 8008f6a:	fba3 0302 	umull	r0, r3, r3, r2
 8008f6e:	095b      	lsrs	r3, r3, #5
 8008f70:	2064      	movs	r0, #100	; 0x64
 8008f72:	fb00 f303 	mul.w	r3, r0, r3
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	011b      	lsls	r3, r3, #4
 8008f7a:	3332      	adds	r3, #50	; 0x32
 8008f7c:	4a07      	ldr	r2, [pc, #28]	; (8008f9c <UART_SetConfig+0x118>)
 8008f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f82:	095b      	lsrs	r3, r3, #5
 8008f84:	f003 020f 	and.w	r2, r3, #15
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	440a      	add	r2, r1
 8008f8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	40013800 	.word	0x40013800
 8008f9c:	51eb851f 	.word	0x51eb851f

08008fa0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008fa4:	4904      	ldr	r1, [pc, #16]	; (8008fb8 <MX_FATFS_Init+0x18>)
 8008fa6:	4805      	ldr	r0, [pc, #20]	; (8008fbc <MX_FATFS_Init+0x1c>)
 8008fa8:	f000 f8b0 	bl	800910c <FATFS_LinkDriver>
 8008fac:	4603      	mov	r3, r0
 8008fae:	461a      	mov	r2, r3
 8008fb0:	4b03      	ldr	r3, [pc, #12]	; (8008fc0 <MX_FATFS_Init+0x20>)
 8008fb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008fb4:	bf00      	nop
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20000650 	.word	0x20000650
 8008fbc:	200000cc 	.word	0x200000cc
 8008fc0:	2000064c 	.word	0x2000064c

08008fc4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_initialize(pdrv);
 8008fce:	79fb      	ldrb	r3, [r7, #7]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fb fbb9 	bl	8004748 <SD_disk_initialize>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	4603      	mov	r3, r0
 8008fea:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fb fc90 	bl	8004914 <SD_disk_status>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	607a      	str	r2, [r7, #4]
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8009010:	7bf8      	ldrb	r0, [r7, #15]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	f7fb fc90 	bl	800493c <SD_disk_read>
 800901c:	4603      	mov	r3, r0
 800901e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	607a      	str	r2, [r7, #4]
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	4603      	mov	r3, r0
 8009036:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8009038:	7bf8      	ldrb	r0, [r7, #15]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	f7fb fce6 	bl	8004a10 <SD_disk_write>
 8009044:	4603      	mov	r3, r0
 8009046:	b2db      	uxtb	r3, r3
//    return RES_OK;
  /* USER CODE END WRITE */
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	603a      	str	r2, [r7, #0]
 800905a:	71fb      	strb	r3, [r7, #7]
 800905c:	460b      	mov	r3, r1
 800905e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	79b9      	ldrb	r1, [r7, #6]
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	4618      	mov	r0, r3
 8009068:	f7fb fd56 	bl	8004b18 <SD_disk_ioctl>
 800906c:	4603      	mov	r3, r0
 800906e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009070:	4618      	mov	r0, r3
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009078:	b480      	push	{r7}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	4613      	mov	r3, r2
 8009084:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009086:	2301      	movs	r3, #1
 8009088:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800908a:	2300      	movs	r3, #0
 800908c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800908e:	4b1e      	ldr	r3, [pc, #120]	; (8009108 <FATFS_LinkDriverEx+0x90>)
 8009090:	7a5b      	ldrb	r3, [r3, #9]
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b01      	cmp	r3, #1
 8009096:	d831      	bhi.n	80090fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009098:	4b1b      	ldr	r3, [pc, #108]	; (8009108 <FATFS_LinkDriverEx+0x90>)
 800909a:	7a5b      	ldrb	r3, [r3, #9]
 800909c:	b2db      	uxtb	r3, r3
 800909e:	461a      	mov	r2, r3
 80090a0:	4b19      	ldr	r3, [pc, #100]	; (8009108 <FATFS_LinkDriverEx+0x90>)
 80090a2:	2100      	movs	r1, #0
 80090a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80090a6:	4b18      	ldr	r3, [pc, #96]	; (8009108 <FATFS_LinkDriverEx+0x90>)
 80090a8:	7a5b      	ldrb	r3, [r3, #9]
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	4a16      	ldr	r2, [pc, #88]	; (8009108 <FATFS_LinkDriverEx+0x90>)
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80090b6:	4b14      	ldr	r3, [pc, #80]	; (8009108 <FATFS_LinkDriverEx+0x90>)
 80090b8:	7a5b      	ldrb	r3, [r3, #9]
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	461a      	mov	r2, r3
 80090be:	4b12      	ldr	r3, [pc, #72]	; (8009108 <FATFS_LinkDriverEx+0x90>)
 80090c0:	4413      	add	r3, r2
 80090c2:	79fa      	ldrb	r2, [r7, #7]
 80090c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80090c6:	4b10      	ldr	r3, [pc, #64]	; (8009108 <FATFS_LinkDriverEx+0x90>)
 80090c8:	7a5b      	ldrb	r3, [r3, #9]
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	b2d1      	uxtb	r1, r2
 80090d0:	4a0d      	ldr	r2, [pc, #52]	; (8009108 <FATFS_LinkDriverEx+0x90>)
 80090d2:	7251      	strb	r1, [r2, #9]
 80090d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80090d6:	7dbb      	ldrb	r3, [r7, #22]
 80090d8:	3330      	adds	r3, #48	; 0x30
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	3301      	adds	r3, #1
 80090e4:	223a      	movs	r2, #58	; 0x3a
 80090e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	3302      	adds	r3, #2
 80090ec:	222f      	movs	r2, #47	; 0x2f
 80090ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	3303      	adds	r3, #3
 80090f4:	2200      	movs	r2, #0
 80090f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	bc80      	pop	{r7}
 8009106:	4770      	bx	lr
 8009108:	20000654 	.word	0x20000654

0800910c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009116:	2200      	movs	r2, #0
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff ffac 	bl	8009078 <FATFS_LinkDriverEx>
 8009120:	4603      	mov	r3, r0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
	...

0800912c <__errno>:
 800912c:	4b01      	ldr	r3, [pc, #4]	; (8009134 <__errno+0x8>)
 800912e:	6818      	ldr	r0, [r3, #0]
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	200000e0 	.word	0x200000e0

08009138 <__libc_init_array>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	2600      	movs	r6, #0
 800913c:	4d0c      	ldr	r5, [pc, #48]	; (8009170 <__libc_init_array+0x38>)
 800913e:	4c0d      	ldr	r4, [pc, #52]	; (8009174 <__libc_init_array+0x3c>)
 8009140:	1b64      	subs	r4, r4, r5
 8009142:	10a4      	asrs	r4, r4, #2
 8009144:	42a6      	cmp	r6, r4
 8009146:	d109      	bne.n	800915c <__libc_init_array+0x24>
 8009148:	f002 fa62 	bl	800b610 <_init>
 800914c:	2600      	movs	r6, #0
 800914e:	4d0a      	ldr	r5, [pc, #40]	; (8009178 <__libc_init_array+0x40>)
 8009150:	4c0a      	ldr	r4, [pc, #40]	; (800917c <__libc_init_array+0x44>)
 8009152:	1b64      	subs	r4, r4, r5
 8009154:	10a4      	asrs	r4, r4, #2
 8009156:	42a6      	cmp	r6, r4
 8009158:	d105      	bne.n	8009166 <__libc_init_array+0x2e>
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009160:	4798      	blx	r3
 8009162:	3601      	adds	r6, #1
 8009164:	e7ee      	b.n	8009144 <__libc_init_array+0xc>
 8009166:	f855 3b04 	ldr.w	r3, [r5], #4
 800916a:	4798      	blx	r3
 800916c:	3601      	adds	r6, #1
 800916e:	e7f2      	b.n	8009156 <__libc_init_array+0x1e>
 8009170:	0800be3c 	.word	0x0800be3c
 8009174:	0800be3c 	.word	0x0800be3c
 8009178:	0800be3c 	.word	0x0800be3c
 800917c:	0800be40 	.word	0x0800be40

08009180 <__retarget_lock_acquire>:
 8009180:	4770      	bx	lr

08009182 <__retarget_lock_acquire_recursive>:
 8009182:	4770      	bx	lr

08009184 <__retarget_lock_release>:
 8009184:	4770      	bx	lr

08009186 <__retarget_lock_release_recursive>:
 8009186:	4770      	bx	lr

08009188 <memset>:
 8009188:	4603      	mov	r3, r0
 800918a:	4402      	add	r2, r0
 800918c:	4293      	cmp	r3, r2
 800918e:	d100      	bne.n	8009192 <memset+0xa>
 8009190:	4770      	bx	lr
 8009192:	f803 1b01 	strb.w	r1, [r3], #1
 8009196:	e7f9      	b.n	800918c <memset+0x4>

08009198 <_free_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4605      	mov	r5, r0
 800919c:	2900      	cmp	r1, #0
 800919e:	d040      	beq.n	8009222 <_free_r+0x8a>
 80091a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a4:	1f0c      	subs	r4, r1, #4
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bfb8      	it	lt
 80091aa:	18e4      	addlt	r4, r4, r3
 80091ac:	f001 f938 	bl	800a420 <__malloc_lock>
 80091b0:	4a1c      	ldr	r2, [pc, #112]	; (8009224 <_free_r+0x8c>)
 80091b2:	6813      	ldr	r3, [r2, #0]
 80091b4:	b933      	cbnz	r3, 80091c4 <_free_r+0x2c>
 80091b6:	6063      	str	r3, [r4, #4]
 80091b8:	6014      	str	r4, [r2, #0]
 80091ba:	4628      	mov	r0, r5
 80091bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091c0:	f001 b934 	b.w	800a42c <__malloc_unlock>
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	d908      	bls.n	80091da <_free_r+0x42>
 80091c8:	6820      	ldr	r0, [r4, #0]
 80091ca:	1821      	adds	r1, r4, r0
 80091cc:	428b      	cmp	r3, r1
 80091ce:	bf01      	itttt	eq
 80091d0:	6819      	ldreq	r1, [r3, #0]
 80091d2:	685b      	ldreq	r3, [r3, #4]
 80091d4:	1809      	addeq	r1, r1, r0
 80091d6:	6021      	streq	r1, [r4, #0]
 80091d8:	e7ed      	b.n	80091b6 <_free_r+0x1e>
 80091da:	461a      	mov	r2, r3
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	b10b      	cbz	r3, 80091e4 <_free_r+0x4c>
 80091e0:	42a3      	cmp	r3, r4
 80091e2:	d9fa      	bls.n	80091da <_free_r+0x42>
 80091e4:	6811      	ldr	r1, [r2, #0]
 80091e6:	1850      	adds	r0, r2, r1
 80091e8:	42a0      	cmp	r0, r4
 80091ea:	d10b      	bne.n	8009204 <_free_r+0x6c>
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	4401      	add	r1, r0
 80091f0:	1850      	adds	r0, r2, r1
 80091f2:	4283      	cmp	r3, r0
 80091f4:	6011      	str	r1, [r2, #0]
 80091f6:	d1e0      	bne.n	80091ba <_free_r+0x22>
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	4401      	add	r1, r0
 80091fe:	6011      	str	r1, [r2, #0]
 8009200:	6053      	str	r3, [r2, #4]
 8009202:	e7da      	b.n	80091ba <_free_r+0x22>
 8009204:	d902      	bls.n	800920c <_free_r+0x74>
 8009206:	230c      	movs	r3, #12
 8009208:	602b      	str	r3, [r5, #0]
 800920a:	e7d6      	b.n	80091ba <_free_r+0x22>
 800920c:	6820      	ldr	r0, [r4, #0]
 800920e:	1821      	adds	r1, r4, r0
 8009210:	428b      	cmp	r3, r1
 8009212:	bf01      	itttt	eq
 8009214:	6819      	ldreq	r1, [r3, #0]
 8009216:	685b      	ldreq	r3, [r3, #4]
 8009218:	1809      	addeq	r1, r1, r0
 800921a:	6021      	streq	r1, [r4, #0]
 800921c:	6063      	str	r3, [r4, #4]
 800921e:	6054      	str	r4, [r2, #4]
 8009220:	e7cb      	b.n	80091ba <_free_r+0x22>
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	20000664 	.word	0x20000664

08009228 <sbrk_aligned>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	4e0e      	ldr	r6, [pc, #56]	; (8009264 <sbrk_aligned+0x3c>)
 800922c:	460c      	mov	r4, r1
 800922e:	6831      	ldr	r1, [r6, #0]
 8009230:	4605      	mov	r5, r0
 8009232:	b911      	cbnz	r1, 800923a <sbrk_aligned+0x12>
 8009234:	f000 f88c 	bl	8009350 <_sbrk_r>
 8009238:	6030      	str	r0, [r6, #0]
 800923a:	4621      	mov	r1, r4
 800923c:	4628      	mov	r0, r5
 800923e:	f000 f887 	bl	8009350 <_sbrk_r>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	d00a      	beq.n	800925c <sbrk_aligned+0x34>
 8009246:	1cc4      	adds	r4, r0, #3
 8009248:	f024 0403 	bic.w	r4, r4, #3
 800924c:	42a0      	cmp	r0, r4
 800924e:	d007      	beq.n	8009260 <sbrk_aligned+0x38>
 8009250:	1a21      	subs	r1, r4, r0
 8009252:	4628      	mov	r0, r5
 8009254:	f000 f87c 	bl	8009350 <_sbrk_r>
 8009258:	3001      	adds	r0, #1
 800925a:	d101      	bne.n	8009260 <sbrk_aligned+0x38>
 800925c:	f04f 34ff 	mov.w	r4, #4294967295
 8009260:	4620      	mov	r0, r4
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	20000668 	.word	0x20000668

08009268 <_malloc_r>:
 8009268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926c:	1ccd      	adds	r5, r1, #3
 800926e:	f025 0503 	bic.w	r5, r5, #3
 8009272:	3508      	adds	r5, #8
 8009274:	2d0c      	cmp	r5, #12
 8009276:	bf38      	it	cc
 8009278:	250c      	movcc	r5, #12
 800927a:	2d00      	cmp	r5, #0
 800927c:	4607      	mov	r7, r0
 800927e:	db01      	blt.n	8009284 <_malloc_r+0x1c>
 8009280:	42a9      	cmp	r1, r5
 8009282:	d905      	bls.n	8009290 <_malloc_r+0x28>
 8009284:	230c      	movs	r3, #12
 8009286:	2600      	movs	r6, #0
 8009288:	603b      	str	r3, [r7, #0]
 800928a:	4630      	mov	r0, r6
 800928c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009290:	4e2e      	ldr	r6, [pc, #184]	; (800934c <_malloc_r+0xe4>)
 8009292:	f001 f8c5 	bl	800a420 <__malloc_lock>
 8009296:	6833      	ldr	r3, [r6, #0]
 8009298:	461c      	mov	r4, r3
 800929a:	bb34      	cbnz	r4, 80092ea <_malloc_r+0x82>
 800929c:	4629      	mov	r1, r5
 800929e:	4638      	mov	r0, r7
 80092a0:	f7ff ffc2 	bl	8009228 <sbrk_aligned>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	4604      	mov	r4, r0
 80092a8:	d14d      	bne.n	8009346 <_malloc_r+0xde>
 80092aa:	6834      	ldr	r4, [r6, #0]
 80092ac:	4626      	mov	r6, r4
 80092ae:	2e00      	cmp	r6, #0
 80092b0:	d140      	bne.n	8009334 <_malloc_r+0xcc>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	4631      	mov	r1, r6
 80092b6:	4638      	mov	r0, r7
 80092b8:	eb04 0803 	add.w	r8, r4, r3
 80092bc:	f000 f848 	bl	8009350 <_sbrk_r>
 80092c0:	4580      	cmp	r8, r0
 80092c2:	d13a      	bne.n	800933a <_malloc_r+0xd2>
 80092c4:	6821      	ldr	r1, [r4, #0]
 80092c6:	3503      	adds	r5, #3
 80092c8:	1a6d      	subs	r5, r5, r1
 80092ca:	f025 0503 	bic.w	r5, r5, #3
 80092ce:	3508      	adds	r5, #8
 80092d0:	2d0c      	cmp	r5, #12
 80092d2:	bf38      	it	cc
 80092d4:	250c      	movcc	r5, #12
 80092d6:	4638      	mov	r0, r7
 80092d8:	4629      	mov	r1, r5
 80092da:	f7ff ffa5 	bl	8009228 <sbrk_aligned>
 80092de:	3001      	adds	r0, #1
 80092e0:	d02b      	beq.n	800933a <_malloc_r+0xd2>
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	442b      	add	r3, r5
 80092e6:	6023      	str	r3, [r4, #0]
 80092e8:	e00e      	b.n	8009308 <_malloc_r+0xa0>
 80092ea:	6822      	ldr	r2, [r4, #0]
 80092ec:	1b52      	subs	r2, r2, r5
 80092ee:	d41e      	bmi.n	800932e <_malloc_r+0xc6>
 80092f0:	2a0b      	cmp	r2, #11
 80092f2:	d916      	bls.n	8009322 <_malloc_r+0xba>
 80092f4:	1961      	adds	r1, r4, r5
 80092f6:	42a3      	cmp	r3, r4
 80092f8:	6025      	str	r5, [r4, #0]
 80092fa:	bf18      	it	ne
 80092fc:	6059      	strne	r1, [r3, #4]
 80092fe:	6863      	ldr	r3, [r4, #4]
 8009300:	bf08      	it	eq
 8009302:	6031      	streq	r1, [r6, #0]
 8009304:	5162      	str	r2, [r4, r5]
 8009306:	604b      	str	r3, [r1, #4]
 8009308:	4638      	mov	r0, r7
 800930a:	f104 060b 	add.w	r6, r4, #11
 800930e:	f001 f88d 	bl	800a42c <__malloc_unlock>
 8009312:	f026 0607 	bic.w	r6, r6, #7
 8009316:	1d23      	adds	r3, r4, #4
 8009318:	1af2      	subs	r2, r6, r3
 800931a:	d0b6      	beq.n	800928a <_malloc_r+0x22>
 800931c:	1b9b      	subs	r3, r3, r6
 800931e:	50a3      	str	r3, [r4, r2]
 8009320:	e7b3      	b.n	800928a <_malloc_r+0x22>
 8009322:	6862      	ldr	r2, [r4, #4]
 8009324:	42a3      	cmp	r3, r4
 8009326:	bf0c      	ite	eq
 8009328:	6032      	streq	r2, [r6, #0]
 800932a:	605a      	strne	r2, [r3, #4]
 800932c:	e7ec      	b.n	8009308 <_malloc_r+0xa0>
 800932e:	4623      	mov	r3, r4
 8009330:	6864      	ldr	r4, [r4, #4]
 8009332:	e7b2      	b.n	800929a <_malloc_r+0x32>
 8009334:	4634      	mov	r4, r6
 8009336:	6876      	ldr	r6, [r6, #4]
 8009338:	e7b9      	b.n	80092ae <_malloc_r+0x46>
 800933a:	230c      	movs	r3, #12
 800933c:	4638      	mov	r0, r7
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	f001 f874 	bl	800a42c <__malloc_unlock>
 8009344:	e7a1      	b.n	800928a <_malloc_r+0x22>
 8009346:	6025      	str	r5, [r4, #0]
 8009348:	e7de      	b.n	8009308 <_malloc_r+0xa0>
 800934a:	bf00      	nop
 800934c:	20000664 	.word	0x20000664

08009350 <_sbrk_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	2300      	movs	r3, #0
 8009354:	4d05      	ldr	r5, [pc, #20]	; (800936c <_sbrk_r+0x1c>)
 8009356:	4604      	mov	r4, r0
 8009358:	4608      	mov	r0, r1
 800935a:	602b      	str	r3, [r5, #0]
 800935c:	f7fc fbe2 	bl	8005b24 <_sbrk>
 8009360:	1c43      	adds	r3, r0, #1
 8009362:	d102      	bne.n	800936a <_sbrk_r+0x1a>
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	b103      	cbz	r3, 800936a <_sbrk_r+0x1a>
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	2000066c 	.word	0x2000066c

08009370 <siprintf>:
 8009370:	b40e      	push	{r1, r2, r3}
 8009372:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009376:	b500      	push	{lr}
 8009378:	b09c      	sub	sp, #112	; 0x70
 800937a:	ab1d      	add	r3, sp, #116	; 0x74
 800937c:	9002      	str	r0, [sp, #8]
 800937e:	9006      	str	r0, [sp, #24]
 8009380:	9107      	str	r1, [sp, #28]
 8009382:	9104      	str	r1, [sp, #16]
 8009384:	4808      	ldr	r0, [pc, #32]	; (80093a8 <siprintf+0x38>)
 8009386:	4909      	ldr	r1, [pc, #36]	; (80093ac <siprintf+0x3c>)
 8009388:	f853 2b04 	ldr.w	r2, [r3], #4
 800938c:	9105      	str	r1, [sp, #20]
 800938e:	6800      	ldr	r0, [r0, #0]
 8009390:	a902      	add	r1, sp, #8
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	f001 f8ac 	bl	800a4f0 <_svfiprintf_r>
 8009398:	2200      	movs	r2, #0
 800939a:	9b02      	ldr	r3, [sp, #8]
 800939c:	701a      	strb	r2, [r3, #0]
 800939e:	b01c      	add	sp, #112	; 0x70
 80093a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80093a4:	b003      	add	sp, #12
 80093a6:	4770      	bx	lr
 80093a8:	200000e0 	.word	0x200000e0
 80093ac:	ffff0208 	.word	0xffff0208

080093b0 <__seofread>:
 80093b0:	2000      	movs	r0, #0
 80093b2:	4770      	bx	lr

080093b4 <iso_year_adjust>:
 80093b4:	6942      	ldr	r2, [r0, #20]
 80093b6:	f240 736c 	movw	r3, #1900	; 0x76c
 80093ba:	2a00      	cmp	r2, #0
 80093bc:	bfa8      	it	ge
 80093be:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80093c2:	4413      	add	r3, r2
 80093c4:	0792      	lsls	r2, r2, #30
 80093c6:	d105      	bne.n	80093d4 <iso_year_adjust+0x20>
 80093c8:	2164      	movs	r1, #100	; 0x64
 80093ca:	fb93 f2f1 	sdiv	r2, r3, r1
 80093ce:	fb01 3212 	mls	r2, r1, r2, r3
 80093d2:	b9da      	cbnz	r2, 800940c <iso_year_adjust+0x58>
 80093d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80093d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80093dc:	fb02 3311 	mls	r3, r2, r1, r3
 80093e0:	fab3 f383 	clz	r3, r3
 80093e4:	095b      	lsrs	r3, r3, #5
 80093e6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80093ea:	0040      	lsls	r0, r0, #1
 80093ec:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80093f0:	4418      	add	r0, r3
 80093f2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80093f6:	4298      	cmp	r0, r3
 80093f8:	d03a      	beq.n	8009470 <iso_year_adjust+0xbc>
 80093fa:	dc21      	bgt.n	8009440 <iso_year_adjust+0x8c>
 80093fc:	2801      	cmp	r0, #1
 80093fe:	dc1a      	bgt.n	8009436 <iso_year_adjust+0x82>
 8009400:	2800      	cmp	r0, #0
 8009402:	bfb4      	ite	lt
 8009404:	2000      	movlt	r0, #0
 8009406:	f04f 30ff 	movge.w	r0, #4294967295
 800940a:	4770      	bx	lr
 800940c:	2301      	movs	r3, #1
 800940e:	e7ea      	b.n	80093e6 <iso_year_adjust+0x32>
 8009410:	2817      	cmp	r0, #23
 8009412:	d813      	bhi.n	800943c <iso_year_adjust+0x88>
 8009414:	e8df f000 	tbb	[pc, r0]
 8009418:	0c0c0c0c 	.word	0x0c0c0c0c
 800941c:	0c0c1212 	.word	0x0c0c1212
 8009420:	12121212 	.word	0x12121212
 8009424:	12121212 	.word	0x12121212
 8009428:	0c0c1212 	.word	0x0c0c1212
 800942c:	0c0c1212 	.word	0x0c0c1212
 8009430:	f04f 30ff 	mov.w	r0, #4294967295
 8009434:	4770      	bx	lr
 8009436:	380a      	subs	r0, #10
 8009438:	2817      	cmp	r0, #23
 800943a:	d9e9      	bls.n	8009410 <iso_year_adjust+0x5c>
 800943c:	2000      	movs	r0, #0
 800943e:	4770      	bx	lr
 8009440:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8009444:	4298      	cmp	r0, r3
 8009446:	dc06      	bgt.n	8009456 <iso_year_adjust+0xa2>
 8009448:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800944c:	4298      	cmp	r0, r3
 800944e:	bfd4      	ite	le
 8009450:	2000      	movle	r0, #0
 8009452:	2001      	movgt	r0, #1
 8009454:	4770      	bx	lr
 8009456:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800945a:	3802      	subs	r0, #2
 800945c:	2815      	cmp	r0, #21
 800945e:	d8ed      	bhi.n	800943c <iso_year_adjust+0x88>
 8009460:	2301      	movs	r3, #1
 8009462:	4083      	lsls	r3, r0
 8009464:	4803      	ldr	r0, [pc, #12]	; (8009474 <iso_year_adjust+0xc0>)
 8009466:	4018      	ands	r0, r3
 8009468:	3800      	subs	r0, #0
 800946a:	bf18      	it	ne
 800946c:	2001      	movne	r0, #1
 800946e:	4770      	bx	lr
 8009470:	2001      	movs	r0, #1
 8009472:	4770      	bx	lr
 8009474:	002a001f 	.word	0x002a001f

08009478 <__strftime.isra.0>:
 8009478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947c:	461e      	mov	r6, r3
 800947e:	2300      	movs	r3, #0
 8009480:	4607      	mov	r7, r0
 8009482:	460d      	mov	r5, r1
 8009484:	461c      	mov	r4, r3
 8009486:	b08f      	sub	sp, #60	; 0x3c
 8009488:	9302      	str	r3, [sp, #8]
 800948a:	7813      	ldrb	r3, [r2, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 84b5 	beq.w	8009dfc <__strftime.isra.0+0x984>
 8009492:	2b25      	cmp	r3, #37	; 0x25
 8009494:	d11f      	bne.n	80094d6 <__strftime.isra.0+0x5e>
 8009496:	f892 b001 	ldrb.w	fp, [r2, #1]
 800949a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800949e:	d024      	beq.n	80094ea <__strftime.isra.0+0x72>
 80094a0:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80094a4:	d021      	beq.n	80094ea <__strftime.isra.0+0x72>
 80094a6:	f04f 0b00 	mov.w	fp, #0
 80094aa:	f102 0801 	add.w	r8, r2, #1
 80094ae:	f898 2000 	ldrb.w	r2, [r8]
 80094b2:	3a31      	subs	r2, #49	; 0x31
 80094b4:	2a08      	cmp	r2, #8
 80094b6:	d81b      	bhi.n	80094f0 <__strftime.isra.0+0x78>
 80094b8:	4640      	mov	r0, r8
 80094ba:	220a      	movs	r2, #10
 80094bc:	a906      	add	r1, sp, #24
 80094be:	f000 fdab 	bl	800a018 <strtoul>
 80094c2:	4681      	mov	r9, r0
 80094c4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80094c8:	f898 2000 	ldrb.w	r2, [r8]
 80094cc:	2a45      	cmp	r2, #69	; 0x45
 80094ce:	d112      	bne.n	80094f6 <__strftime.isra.0+0x7e>
 80094d0:	f108 0801 	add.w	r8, r8, #1
 80094d4:	e011      	b.n	80094fa <__strftime.isra.0+0x82>
 80094d6:	1e69      	subs	r1, r5, #1
 80094d8:	42a1      	cmp	r1, r4
 80094da:	d802      	bhi.n	80094e2 <__strftime.isra.0+0x6a>
 80094dc:	2400      	movs	r4, #0
 80094de:	f000 bc90 	b.w	8009e02 <__strftime.isra.0+0x98a>
 80094e2:	553b      	strb	r3, [r7, r4]
 80094e4:	3201      	adds	r2, #1
 80094e6:	3401      	adds	r4, #1
 80094e8:	e7cf      	b.n	800948a <__strftime.isra.0+0x12>
 80094ea:	f102 0802 	add.w	r8, r2, #2
 80094ee:	e7de      	b.n	80094ae <__strftime.isra.0+0x36>
 80094f0:	f04f 0900 	mov.w	r9, #0
 80094f4:	e7e8      	b.n	80094c8 <__strftime.isra.0+0x50>
 80094f6:	2a4f      	cmp	r2, #79	; 0x4f
 80094f8:	d0ea      	beq.n	80094d0 <__strftime.isra.0+0x58>
 80094fa:	f898 0000 	ldrb.w	r0, [r8]
 80094fe:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8009502:	2a55      	cmp	r2, #85	; 0x55
 8009504:	d8ea      	bhi.n	80094dc <__strftime.isra.0+0x64>
 8009506:	a301      	add	r3, pc, #4	; (adr r3, 800950c <__strftime.isra.0+0x94>)
 8009508:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800950c:	08009df1 	.word	0x08009df1
 8009510:	080094dd 	.word	0x080094dd
 8009514:	080094dd 	.word	0x080094dd
 8009518:	080094dd 	.word	0x080094dd
 800951c:	080094dd 	.word	0x080094dd
 8009520:	080094dd 	.word	0x080094dd
 8009524:	080094dd 	.word	0x080094dd
 8009528:	080094dd 	.word	0x080094dd
 800952c:	080094dd 	.word	0x080094dd
 8009530:	080094dd 	.word	0x080094dd
 8009534:	080094dd 	.word	0x080094dd
 8009538:	080094dd 	.word	0x080094dd
 800953c:	080094dd 	.word	0x080094dd
 8009540:	080094dd 	.word	0x080094dd
 8009544:	080094dd 	.word	0x080094dd
 8009548:	080094dd 	.word	0x080094dd
 800954c:	080094dd 	.word	0x080094dd
 8009550:	080094dd 	.word	0x080094dd
 8009554:	080094dd 	.word	0x080094dd
 8009558:	080094dd 	.word	0x080094dd
 800955c:	080094dd 	.word	0x080094dd
 8009560:	080094dd 	.word	0x080094dd
 8009564:	080094dd 	.word	0x080094dd
 8009568:	080094dd 	.word	0x080094dd
 800956c:	080094dd 	.word	0x080094dd
 8009570:	080094dd 	.word	0x080094dd
 8009574:	080094dd 	.word	0x080094dd
 8009578:	080094dd 	.word	0x080094dd
 800957c:	080096a1 	.word	0x080096a1
 8009580:	080096f9 	.word	0x080096f9
 8009584:	08009767 	.word	0x08009767
 8009588:	08009805 	.word	0x08009805
 800958c:	080094dd 	.word	0x080094dd
 8009590:	0800984f 	.word	0x0800984f
 8009594:	0800993d 	.word	0x0800993d
 8009598:	08009a13 	.word	0x08009a13
 800959c:	08009a21 	.word	0x08009a21
 80095a0:	080094dd 	.word	0x080094dd
 80095a4:	080094dd 	.word	0x080094dd
 80095a8:	080094dd 	.word	0x080094dd
 80095ac:	08009a51 	.word	0x08009a51
 80095b0:	080094dd 	.word	0x080094dd
 80095b4:	080094dd 	.word	0x080094dd
 80095b8:	08009a65 	.word	0x08009a65
 80095bc:	080094dd 	.word	0x080094dd
 80095c0:	08009ab7 	.word	0x08009ab7
 80095c4:	08009bc9 	.word	0x08009bc9
 80095c8:	08009bd9 	.word	0x08009bd9
 80095cc:	08009c01 	.word	0x08009c01
 80095d0:	08009c11 	.word	0x08009c11
 80095d4:	08009cab 	.word	0x08009cab
 80095d8:	0800975f 	.word	0x0800975f
 80095dc:	08009cd7 	.word	0x08009cd7
 80095e0:	08009d9f 	.word	0x08009d9f
 80095e4:	080094dd 	.word	0x080094dd
 80095e8:	080094dd 	.word	0x080094dd
 80095ec:	080094dd 	.word	0x080094dd
 80095f0:	080094dd 	.word	0x080094dd
 80095f4:	080094dd 	.word	0x080094dd
 80095f8:	080094dd 	.word	0x080094dd
 80095fc:	08009665 	.word	0x08009665
 8009600:	080096cf 	.word	0x080096cf
 8009604:	08009725 	.word	0x08009725
 8009608:	080097e1 	.word	0x080097e1
 800960c:	080097e1 	.word	0x080097e1
 8009610:	080094dd 	.word	0x080094dd
 8009614:	080098a1 	.word	0x080098a1
 8009618:	080096cf 	.word	0x080096cf
 800961c:	080094dd 	.word	0x080094dd
 8009620:	08009a43 	.word	0x08009a43
 8009624:	08009a13 	.word	0x08009a13
 8009628:	08009a21 	.word	0x08009a21
 800962c:	08009a4b 	.word	0x08009a4b
 8009630:	08009a55 	.word	0x08009a55
 8009634:	080094dd 	.word	0x080094dd
 8009638:	08009a65 	.word	0x08009a65
 800963c:	080094dd 	.word	0x080094dd
 8009640:	0800974f 	.word	0x0800974f
 8009644:	08009ac9 	.word	0x08009ac9
 8009648:	08009bcd 	.word	0x08009bcd
 800964c:	08009be7 	.word	0x08009be7
 8009650:	080094dd 	.word	0x080094dd
 8009654:	08009c9d 	.word	0x08009c9d
 8009658:	08009757 	.word	0x08009757
 800965c:	08009cbb 	.word	0x08009cbb
 8009660:	08009d29 	.word	0x08009d29
 8009664:	69b3      	ldr	r3, [r6, #24]
 8009666:	4aa9      	ldr	r2, [pc, #676]	; (800990c <__strftime.isra.0+0x494>)
 8009668:	3318      	adds	r3, #24
 800966a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800966e:	4648      	mov	r0, r9
 8009670:	f7f6 fd6c 	bl	800014c <strlen>
 8009674:	f109 39ff 	add.w	r9, r9, #4294967295
 8009678:	4420      	add	r0, r4
 800967a:	1e6b      	subs	r3, r5, #1
 800967c:	42a0      	cmp	r0, r4
 800967e:	d107      	bne.n	8009690 <__strftime.isra.0+0x218>
 8009680:	f898 3000 	ldrb.w	r3, [r8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 83b9 	beq.w	8009dfc <__strftime.isra.0+0x984>
 800968a:	f108 0201 	add.w	r2, r8, #1
 800968e:	e6fc      	b.n	800948a <__strftime.isra.0+0x12>
 8009690:	42a3      	cmp	r3, r4
 8009692:	f67f af23 	bls.w	80094dc <__strftime.isra.0+0x64>
 8009696:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800969a:	553a      	strb	r2, [r7, r4]
 800969c:	3401      	adds	r4, #1
 800969e:	e7ed      	b.n	800967c <__strftime.isra.0+0x204>
 80096a0:	69b2      	ldr	r2, [r6, #24]
 80096a2:	4b9a      	ldr	r3, [pc, #616]	; (800990c <__strftime.isra.0+0x494>)
 80096a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80096a8:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 80096ac:	4648      	mov	r0, r9
 80096ae:	f7f6 fd4d 	bl	800014c <strlen>
 80096b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80096b6:	4420      	add	r0, r4
 80096b8:	1e6b      	subs	r3, r5, #1
 80096ba:	42a0      	cmp	r0, r4
 80096bc:	d0e0      	beq.n	8009680 <__strftime.isra.0+0x208>
 80096be:	42a3      	cmp	r3, r4
 80096c0:	f67f af0c 	bls.w	80094dc <__strftime.isra.0+0x64>
 80096c4:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80096c8:	553a      	strb	r2, [r7, r4]
 80096ca:	3401      	adds	r4, #1
 80096cc:	e7f5      	b.n	80096ba <__strftime.isra.0+0x242>
 80096ce:	4b8f      	ldr	r3, [pc, #572]	; (800990c <__strftime.isra.0+0x494>)
 80096d0:	6932      	ldr	r2, [r6, #16]
 80096d2:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 80096d6:	4648      	mov	r0, r9
 80096d8:	f7f6 fd38 	bl	800014c <strlen>
 80096dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80096e0:	4420      	add	r0, r4
 80096e2:	1e6b      	subs	r3, r5, #1
 80096e4:	42a0      	cmp	r0, r4
 80096e6:	d0cb      	beq.n	8009680 <__strftime.isra.0+0x208>
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	f67f aef7 	bls.w	80094dc <__strftime.isra.0+0x64>
 80096ee:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80096f2:	553a      	strb	r2, [r7, r4]
 80096f4:	3401      	adds	r4, #1
 80096f6:	e7f5      	b.n	80096e4 <__strftime.isra.0+0x26c>
 80096f8:	6933      	ldr	r3, [r6, #16]
 80096fa:	4a84      	ldr	r2, [pc, #528]	; (800990c <__strftime.isra.0+0x494>)
 80096fc:	330c      	adds	r3, #12
 80096fe:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8009702:	4648      	mov	r0, r9
 8009704:	f7f6 fd22 	bl	800014c <strlen>
 8009708:	f109 39ff 	add.w	r9, r9, #4294967295
 800970c:	4420      	add	r0, r4
 800970e:	1e6b      	subs	r3, r5, #1
 8009710:	42a0      	cmp	r0, r4
 8009712:	d0b5      	beq.n	8009680 <__strftime.isra.0+0x208>
 8009714:	42a3      	cmp	r3, r4
 8009716:	f67f aee1 	bls.w	80094dc <__strftime.isra.0+0x64>
 800971a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800971e:	553a      	strb	r2, [r7, r4]
 8009720:	3401      	adds	r4, #1
 8009722:	e7f5      	b.n	8009710 <__strftime.isra.0+0x298>
 8009724:	4b79      	ldr	r3, [pc, #484]	; (800990c <__strftime.isra.0+0x494>)
 8009726:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800972a:	4648      	mov	r0, r9
 800972c:	f7f6 fd0e 	bl	800014c <strlen>
 8009730:	f899 3000 	ldrb.w	r3, [r9]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0a3      	beq.n	8009680 <__strftime.isra.0+0x208>
 8009738:	4633      	mov	r3, r6
 800973a:	464a      	mov	r2, r9
 800973c:	1b29      	subs	r1, r5, r4
 800973e:	1938      	adds	r0, r7, r4
 8009740:	f7ff fe9a 	bl	8009478 <__strftime.isra.0>
 8009744:	2800      	cmp	r0, #0
 8009746:	f77f aec9 	ble.w	80094dc <__strftime.isra.0+0x64>
 800974a:	4404      	add	r4, r0
 800974c:	e798      	b.n	8009680 <__strftime.isra.0+0x208>
 800974e:	4b6f      	ldr	r3, [pc, #444]	; (800990c <__strftime.isra.0+0x494>)
 8009750:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8009754:	e7e9      	b.n	800972a <__strftime.isra.0+0x2b2>
 8009756:	4b6d      	ldr	r3, [pc, #436]	; (800990c <__strftime.isra.0+0x494>)
 8009758:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800975c:	e7e5      	b.n	800972a <__strftime.isra.0+0x2b2>
 800975e:	4b6b      	ldr	r3, [pc, #428]	; (800990c <__strftime.isra.0+0x494>)
 8009760:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8009764:	e7e1      	b.n	800972a <__strftime.isra.0+0x2b2>
 8009766:	496a      	ldr	r1, [pc, #424]	; (8009910 <__strftime.isra.0+0x498>)
 8009768:	f8d6 a014 	ldr.w	sl, [r6, #20]
 800976c:	458a      	cmp	sl, r1
 800976e:	bfac      	ite	ge
 8009770:	2100      	movge	r1, #0
 8009772:	2101      	movlt	r1, #1
 8009774:	f1ba 0f00 	cmp.w	sl, #0
 8009778:	db11      	blt.n	800979e <__strftime.isra.0+0x326>
 800977a:	2064      	movs	r0, #100	; 0x64
 800977c:	fb9a f0f0 	sdiv	r0, sl, r0
 8009780:	3013      	adds	r0, #19
 8009782:	f1bb 0f00 	cmp.w	fp, #0
 8009786:	d014      	beq.n	80097b2 <__strftime.isra.0+0x33a>
 8009788:	2863      	cmp	r0, #99	; 0x63
 800978a:	dd27      	ble.n	80097dc <__strftime.isra.0+0x364>
 800978c:	4b61      	ldr	r3, [pc, #388]	; (8009914 <__strftime.isra.0+0x49c>)
 800978e:	4a62      	ldr	r2, [pc, #392]	; (8009918 <__strftime.isra.0+0x4a0>)
 8009790:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8009794:	bf18      	it	ne
 8009796:	461a      	movne	r2, r3
 8009798:	f8df c180 	ldr.w	ip, [pc, #384]	; 800991c <__strftime.isra.0+0x4a4>
 800979c:	e00c      	b.n	80097b8 <__strftime.isra.0+0x340>
 800979e:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 80097a2:	9103      	str	r1, [sp, #12]
 80097a4:	f000 fdd6 	bl	800a354 <abs>
 80097a8:	2264      	movs	r2, #100	; 0x64
 80097aa:	9903      	ldr	r1, [sp, #12]
 80097ac:	fb90 f0f2 	sdiv	r0, r0, r2
 80097b0:	e7e7      	b.n	8009782 <__strftime.isra.0+0x30a>
 80097b2:	4a58      	ldr	r2, [pc, #352]	; (8009914 <__strftime.isra.0+0x49c>)
 80097b4:	f8df c168 	ldr.w	ip, [pc, #360]	; 8009920 <__strftime.isra.0+0x4a8>
 80097b8:	f1b9 0f02 	cmp.w	r9, #2
 80097bc:	bf2c      	ite	cs
 80097be:	ebc1 0109 	rsbcs	r1, r1, r9
 80097c2:	f1c1 0102 	rsbcc	r1, r1, #2
 80097c6:	4b57      	ldr	r3, [pc, #348]	; (8009924 <__strftime.isra.0+0x4ac>)
 80097c8:	9100      	str	r1, [sp, #0]
 80097ca:	4951      	ldr	r1, [pc, #324]	; (8009910 <__strftime.isra.0+0x498>)
 80097cc:	9001      	str	r0, [sp, #4]
 80097ce:	458a      	cmp	sl, r1
 80097d0:	bfa8      	it	ge
 80097d2:	4613      	movge	r3, r2
 80097d4:	4662      	mov	r2, ip
 80097d6:	1b29      	subs	r1, r5, r4
 80097d8:	1938      	adds	r0, r7, r4
 80097da:	e029      	b.n	8009830 <__strftime.isra.0+0x3b8>
 80097dc:	4a4d      	ldr	r2, [pc, #308]	; (8009914 <__strftime.isra.0+0x49c>)
 80097de:	e7db      	b.n	8009798 <__strftime.isra.0+0x320>
 80097e0:	4951      	ldr	r1, [pc, #324]	; (8009928 <__strftime.isra.0+0x4b0>)
 80097e2:	4a52      	ldr	r2, [pc, #328]	; (800992c <__strftime.isra.0+0x4b4>)
 80097e4:	68f3      	ldr	r3, [r6, #12]
 80097e6:	2864      	cmp	r0, #100	; 0x64
 80097e8:	bf08      	it	eq
 80097ea:	460a      	moveq	r2, r1
 80097ec:	1b29      	subs	r1, r5, r4
 80097ee:	1938      	adds	r0, r7, r4
 80097f0:	f001 f914 	bl	800aa1c <sniprintf>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f6ff ae71 	blt.w	80094dc <__strftime.isra.0+0x64>
 80097fa:	4404      	add	r4, r0
 80097fc:	42a5      	cmp	r5, r4
 80097fe:	f63f af3f 	bhi.w	8009680 <__strftime.isra.0+0x208>
 8009802:	e66b      	b.n	80094dc <__strftime.isra.0+0x64>
 8009804:	6970      	ldr	r0, [r6, #20]
 8009806:	6933      	ldr	r3, [r6, #16]
 8009808:	2800      	cmp	r0, #0
 800980a:	68f2      	ldr	r2, [r6, #12]
 800980c:	eb07 0904 	add.w	r9, r7, r4
 8009810:	eba5 0a04 	sub.w	sl, r5, r4
 8009814:	f103 0b01 	add.w	fp, r3, #1
 8009818:	db0d      	blt.n	8009836 <__strftime.isra.0+0x3be>
 800981a:	2164      	movs	r1, #100	; 0x64
 800981c:	fb90 fcf1 	sdiv	ip, r0, r1
 8009820:	fb01 001c 	mls	r0, r1, ip, r0
 8009824:	e9cd 2000 	strd	r2, r0, [sp]
 8009828:	465b      	mov	r3, fp
 800982a:	4651      	mov	r1, sl
 800982c:	4648      	mov	r0, r9
 800982e:	4a40      	ldr	r2, [pc, #256]	; (8009930 <__strftime.isra.0+0x4b8>)
 8009830:	f001 f8f4 	bl	800aa1c <sniprintf>
 8009834:	e7de      	b.n	80097f4 <__strftime.isra.0+0x37c>
 8009836:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800983a:	9203      	str	r2, [sp, #12]
 800983c:	f000 fd8a 	bl	800a354 <abs>
 8009840:	2164      	movs	r1, #100	; 0x64
 8009842:	fb90 fcf1 	sdiv	ip, r0, r1
 8009846:	9a03      	ldr	r2, [sp, #12]
 8009848:	fb0c 0011 	mls	r0, ip, r1, r0
 800984c:	e7ea      	b.n	8009824 <__strftime.isra.0+0x3ac>
 800984e:	2225      	movs	r2, #37	; 0x25
 8009850:	f88d 2018 	strb.w	r2, [sp, #24]
 8009854:	f1bb 0f00 	cmp.w	fp, #0
 8009858:	d011      	beq.n	800987e <__strftime.isra.0+0x406>
 800985a:	f1b9 0f06 	cmp.w	r9, #6
 800985e:	bf38      	it	cc
 8009860:	f04f 0906 	movcc.w	r9, #6
 8009864:	f1b9 0306 	subs.w	r3, r9, #6
 8009868:	f88d b019 	strb.w	fp, [sp, #25]
 800986c:	d10c      	bne.n	8009888 <__strftime.isra.0+0x410>
 800986e:	f10d 001a 	add.w	r0, sp, #26
 8009872:	4930      	ldr	r1, [pc, #192]	; (8009934 <__strftime.isra.0+0x4bc>)
 8009874:	f001 f930 	bl	800aad8 <strcpy>
 8009878:	4633      	mov	r3, r6
 800987a:	aa06      	add	r2, sp, #24
 800987c:	e75e      	b.n	800973c <__strftime.isra.0+0x2c4>
 800987e:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8009882:	f04f 090a 	mov.w	r9, #10
 8009886:	e7ed      	b.n	8009864 <__strftime.isra.0+0x3ec>
 8009888:	211e      	movs	r1, #30
 800988a:	4a2b      	ldr	r2, [pc, #172]	; (8009938 <__strftime.isra.0+0x4c0>)
 800988c:	f10d 001a 	add.w	r0, sp, #26
 8009890:	f001 f8c4 	bl	800aa1c <sniprintf>
 8009894:	2800      	cmp	r0, #0
 8009896:	ddea      	ble.n	800986e <__strftime.isra.0+0x3f6>
 8009898:	f10d 031a 	add.w	r3, sp, #26
 800989c:	4418      	add	r0, r3
 800989e:	e7e8      	b.n	8009872 <__strftime.isra.0+0x3fa>
 80098a0:	4630      	mov	r0, r6
 80098a2:	f7ff fd87 	bl	80093b4 <iso_year_adjust>
 80098a6:	4681      	mov	r9, r0
 80098a8:	6970      	ldr	r0, [r6, #20]
 80098aa:	2800      	cmp	r0, #0
 80098ac:	db11      	blt.n	80098d2 <__strftime.isra.0+0x45a>
 80098ae:	2364      	movs	r3, #100	; 0x64
 80098b0:	fb90 f2f3 	sdiv	r2, r0, r3
 80098b4:	fb03 0012 	mls	r0, r3, r2, r0
 80098b8:	2264      	movs	r2, #100	; 0x64
 80098ba:	4481      	add	r9, r0
 80098bc:	fb99 f3f2 	sdiv	r3, r9, r2
 80098c0:	fb02 9913 	mls	r9, r2, r3, r9
 80098c4:	4491      	add	r9, r2
 80098c6:	fbb9 f3f2 	udiv	r3, r9, r2
 80098ca:	fb02 9313 	mls	r3, r2, r3, r9
 80098ce:	4a16      	ldr	r2, [pc, #88]	; (8009928 <__strftime.isra.0+0x4b0>)
 80098d0:	e78c      	b.n	80097ec <__strftime.isra.0+0x374>
 80098d2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80098d6:	f000 fd3d 	bl	800a354 <abs>
 80098da:	2364      	movs	r3, #100	; 0x64
 80098dc:	fb90 f2f3 	sdiv	r2, r0, r3
 80098e0:	f1b9 0f00 	cmp.w	r9, #0
 80098e4:	fb02 0013 	mls	r0, r2, r3, r0
 80098e8:	da07      	bge.n	80098fa <__strftime.isra.0+0x482>
 80098ea:	6972      	ldr	r2, [r6, #20]
 80098ec:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 80098f0:	429a      	cmp	r2, r3
 80098f2:	bfb8      	it	lt
 80098f4:	f04f 0901 	movlt.w	r9, #1
 80098f8:	e7de      	b.n	80098b8 <__strftime.isra.0+0x440>
 80098fa:	d0dd      	beq.n	80098b8 <__strftime.isra.0+0x440>
 80098fc:	6972      	ldr	r2, [r6, #20]
 80098fe:	4b04      	ldr	r3, [pc, #16]	; (8009910 <__strftime.isra.0+0x498>)
 8009900:	429a      	cmp	r2, r3
 8009902:	bfb8      	it	lt
 8009904:	f04f 39ff 	movlt.w	r9, #4294967295
 8009908:	e7d6      	b.n	80098b8 <__strftime.isra.0+0x440>
 800990a:	bf00      	nop
 800990c:	0800bb54 	.word	0x0800bb54
 8009910:	fffff894 	.word	0xfffff894
 8009914:	0800bd92 	.word	0x0800bd92
 8009918:	0800b9df 	.word	0x0800b9df
 800991c:	0800b9d7 	.word	0x0800b9d7
 8009920:	0800b9d0 	.word	0x0800b9d0
 8009924:	0800be21 	.word	0x0800be21
 8009928:	0800b9ef 	.word	0x0800b9ef
 800992c:	0800b9e1 	.word	0x0800b9e1
 8009930:	0800b9e5 	.word	0x0800b9e5
 8009934:	0800b9f8 	.word	0x0800b9f8
 8009938:	0800b9f4 	.word	0x0800b9f4
 800993c:	6971      	ldr	r1, [r6, #20]
 800993e:	4aba      	ldr	r2, [pc, #744]	; (8009c28 <__strftime.isra.0+0x7b0>)
 8009940:	4630      	mov	r0, r6
 8009942:	4291      	cmp	r1, r2
 8009944:	bfac      	ite	ge
 8009946:	2300      	movge	r3, #0
 8009948:	2301      	movlt	r3, #1
 800994a:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800994e:	f7ff fd31 	bl	80093b4 <iso_year_adjust>
 8009952:	9904      	ldr	r1, [sp, #16]
 8009954:	4682      	mov	sl, r0
 8009956:	2900      	cmp	r1, #0
 8009958:	db2c      	blt.n	80099b4 <__strftime.isra.0+0x53c>
 800995a:	2264      	movs	r2, #100	; 0x64
 800995c:	fb91 f2f2 	sdiv	r2, r1, r2
 8009960:	3213      	adds	r2, #19
 8009962:	6970      	ldr	r0, [r6, #20]
 8009964:	2800      	cmp	r0, #0
 8009966:	db2f      	blt.n	80099c8 <__strftime.isra.0+0x550>
 8009968:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800996c:	fb90 fefc 	sdiv	lr, r0, ip
 8009970:	fb0c 001e 	mls	r0, ip, lr, r0
 8009974:	f1ba 0f00 	cmp.w	sl, #0
 8009978:	da35      	bge.n	80099e6 <__strftime.isra.0+0x56e>
 800997a:	6971      	ldr	r1, [r6, #20]
 800997c:	4bab      	ldr	r3, [pc, #684]	; (8009c2c <__strftime.isra.0+0x7b4>)
 800997e:	4299      	cmp	r1, r3
 8009980:	db3b      	blt.n	80099fa <__strftime.isra.0+0x582>
 8009982:	4482      	add	sl, r0
 8009984:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009988:	d13c      	bne.n	8009a04 <__strftime.isra.0+0x58c>
 800998a:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800998e:	3a01      	subs	r2, #1
 8009990:	2064      	movs	r0, #100	; 0x64
 8009992:	9b03      	ldr	r3, [sp, #12]
 8009994:	fb00 aa02 	mla	sl, r0, r2, sl
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 81a8 	beq.w	8009cee <__strftime.isra.0+0x876>
 800999e:	222d      	movs	r2, #45	; 0x2d
 80099a0:	f88d 2018 	strb.w	r2, [sp, #24]
 80099a4:	f1b9 0f00 	cmp.w	r9, #0
 80099a8:	d001      	beq.n	80099ae <__strftime.isra.0+0x536>
 80099aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80099ae:	f10d 0219 	add.w	r2, sp, #25
 80099b2:	e1a7      	b.n	8009d04 <__strftime.isra.0+0x88c>
 80099b4:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80099b8:	9104      	str	r1, [sp, #16]
 80099ba:	f000 fccb 	bl	800a354 <abs>
 80099be:	2264      	movs	r2, #100	; 0x64
 80099c0:	9904      	ldr	r1, [sp, #16]
 80099c2:	fb90 f2f2 	sdiv	r2, r0, r2
 80099c6:	e7cc      	b.n	8009962 <__strftime.isra.0+0x4ea>
 80099c8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80099cc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80099d0:	f000 fcc0 	bl	800a354 <abs>
 80099d4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80099d8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80099dc:	fb90 fefc 	sdiv	lr, r0, ip
 80099e0:	fb0e 001c 	mls	r0, lr, ip, r0
 80099e4:	e7c6      	b.n	8009974 <__strftime.isra.0+0x4fc>
 80099e6:	d0cc      	beq.n	8009982 <__strftime.isra.0+0x50a>
 80099e8:	4b8f      	ldr	r3, [pc, #572]	; (8009c28 <__strftime.isra.0+0x7b0>)
 80099ea:	4299      	cmp	r1, r3
 80099ec:	bfb6      	itet	lt
 80099ee:	2301      	movlt	r3, #1
 80099f0:	2300      	movge	r3, #0
 80099f2:	f04f 3aff 	movlt.w	sl, #4294967295
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	e7c3      	b.n	8009982 <__strftime.isra.0+0x50a>
 80099fa:	f04f 0a01 	mov.w	sl, #1
 80099fe:	f8cd a00c 	str.w	sl, [sp, #12]
 8009a02:	e7be      	b.n	8009982 <__strftime.isra.0+0x50a>
 8009a04:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8009a08:	bf04      	itt	eq
 8009a0a:	f04f 0a00 	moveq.w	sl, #0
 8009a0e:	3201      	addeq	r2, #1
 8009a10:	e7be      	b.n	8009990 <__strftime.isra.0+0x518>
 8009a12:	4987      	ldr	r1, [pc, #540]	; (8009c30 <__strftime.isra.0+0x7b8>)
 8009a14:	4a87      	ldr	r2, [pc, #540]	; (8009c34 <__strftime.isra.0+0x7bc>)
 8009a16:	68b3      	ldr	r3, [r6, #8]
 8009a18:	286b      	cmp	r0, #107	; 0x6b
 8009a1a:	bf08      	it	eq
 8009a1c:	460a      	moveq	r2, r1
 8009a1e:	e6e5      	b.n	80097ec <__strftime.isra.0+0x374>
 8009a20:	68b3      	ldr	r3, [r6, #8]
 8009a22:	b163      	cbz	r3, 8009a3e <__strftime.isra.0+0x5c6>
 8009a24:	2b0c      	cmp	r3, #12
 8009a26:	d004      	beq.n	8009a32 <__strftime.isra.0+0x5ba>
 8009a28:	210c      	movs	r1, #12
 8009a2a:	fb93 f2f1 	sdiv	r2, r3, r1
 8009a2e:	fb01 3312 	mls	r3, r1, r2, r3
 8009a32:	4980      	ldr	r1, [pc, #512]	; (8009c34 <__strftime.isra.0+0x7bc>)
 8009a34:	4a7e      	ldr	r2, [pc, #504]	; (8009c30 <__strftime.isra.0+0x7b8>)
 8009a36:	2849      	cmp	r0, #73	; 0x49
 8009a38:	bf08      	it	eq
 8009a3a:	460a      	moveq	r2, r1
 8009a3c:	e6d6      	b.n	80097ec <__strftime.isra.0+0x374>
 8009a3e:	230c      	movs	r3, #12
 8009a40:	e7f7      	b.n	8009a32 <__strftime.isra.0+0x5ba>
 8009a42:	69f3      	ldr	r3, [r6, #28]
 8009a44:	4a7c      	ldr	r2, [pc, #496]	; (8009c38 <__strftime.isra.0+0x7c0>)
 8009a46:	3301      	adds	r3, #1
 8009a48:	e6d0      	b.n	80097ec <__strftime.isra.0+0x374>
 8009a4a:	6933      	ldr	r3, [r6, #16]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	e73e      	b.n	80098ce <__strftime.isra.0+0x456>
 8009a50:	6873      	ldr	r3, [r6, #4]
 8009a52:	e73c      	b.n	80098ce <__strftime.isra.0+0x456>
 8009a54:	1e6b      	subs	r3, r5, #1
 8009a56:	429c      	cmp	r4, r3
 8009a58:	f4bf ad40 	bcs.w	80094dc <__strftime.isra.0+0x64>
 8009a5c:	230a      	movs	r3, #10
 8009a5e:	553b      	strb	r3, [r7, r4]
 8009a60:	3401      	adds	r4, #1
 8009a62:	e60d      	b.n	8009680 <__strftime.isra.0+0x208>
 8009a64:	68b3      	ldr	r3, [r6, #8]
 8009a66:	2b0b      	cmp	r3, #11
 8009a68:	bfd4      	ite	le
 8009a6a:	2200      	movle	r2, #0
 8009a6c:	2201      	movgt	r2, #1
 8009a6e:	4b73      	ldr	r3, [pc, #460]	; (8009c3c <__strftime.isra.0+0x7c4>)
 8009a70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009a74:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8009a78:	4648      	mov	r0, r9
 8009a7a:	f7f6 fb67 	bl	800014c <strlen>
 8009a7e:	f109 32ff 	add.w	r2, r9, #4294967295
 8009a82:	4420      	add	r0, r4
 8009a84:	f105 3cff 	add.w	ip, r5, #4294967295
 8009a88:	42a0      	cmp	r0, r4
 8009a8a:	f43f adf9 	beq.w	8009680 <__strftime.isra.0+0x208>
 8009a8e:	45a4      	cmp	ip, r4
 8009a90:	f67f ad24 	bls.w	80094dc <__strftime.isra.0+0x64>
 8009a94:	f898 1000 	ldrb.w	r1, [r8]
 8009a98:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009a9c:	2950      	cmp	r1, #80	; 0x50
 8009a9e:	d107      	bne.n	8009ab0 <__strftime.isra.0+0x638>
 8009aa0:	4967      	ldr	r1, [pc, #412]	; (8009c40 <__strftime.isra.0+0x7c8>)
 8009aa2:	5cc9      	ldrb	r1, [r1, r3]
 8009aa4:	f001 0103 	and.w	r1, r1, #3
 8009aa8:	2901      	cmp	r1, #1
 8009aaa:	bf08      	it	eq
 8009aac:	3320      	addeq	r3, #32
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	553b      	strb	r3, [r7, r4]
 8009ab2:	3401      	adds	r4, #1
 8009ab4:	e7e8      	b.n	8009a88 <__strftime.isra.0+0x610>
 8009ab6:	6873      	ldr	r3, [r6, #4]
 8009ab8:	4a62      	ldr	r2, [pc, #392]	; (8009c44 <__strftime.isra.0+0x7cc>)
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	68b3      	ldr	r3, [r6, #8]
 8009abe:	1b29      	subs	r1, r5, r4
 8009ac0:	1938      	adds	r0, r7, r4
 8009ac2:	f000 ffab 	bl	800aa1c <sniprintf>
 8009ac6:	e695      	b.n	80097f4 <__strftime.isra.0+0x37c>
 8009ac8:	6a33      	ldr	r3, [r6, #32]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	db79      	blt.n	8009bc2 <__strftime.isra.0+0x74a>
 8009ace:	f000 faad 	bl	800a02c <__tz_lock>
 8009ad2:	9b02      	ldr	r3, [sp, #8]
 8009ad4:	b90b      	cbnz	r3, 8009ada <__strftime.isra.0+0x662>
 8009ad6:	f000 fab5 	bl	800a044 <_tzset_unlocked>
 8009ada:	f000 fc83 	bl	800a3e4 <__gettzinfo>
 8009ade:	6a33      	ldr	r3, [r6, #32]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	bfd4      	ite	le
 8009ae4:	2200      	movle	r2, #0
 8009ae6:	2201      	movgt	r2, #1
 8009ae8:	2328      	movs	r3, #40	; 0x28
 8009aea:	fb02 3303 	mla	r3, r2, r3, r3
 8009aee:	58c3      	ldr	r3, [r0, r3]
 8009af0:	f1c3 0900 	rsb	r9, r3, #0
 8009af4:	f000 faa0 	bl	800a038 <__tz_unlock>
 8009af8:	2301      	movs	r3, #1
 8009afa:	9302      	str	r3, [sp, #8]
 8009afc:	6972      	ldr	r2, [r6, #20]
 8009afe:	1b29      	subs	r1, r5, r4
 8009b00:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8009b04:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8009b08:	f16c 0c00 	sbc.w	ip, ip, #0
 8009b0c:	f1bc 0f00 	cmp.w	ip, #0
 8009b10:	eb07 0004 	add.w	r0, r7, r4
 8009b14:	da02      	bge.n	8009b1c <__strftime.isra.0+0x6a4>
 8009b16:	3303      	adds	r3, #3
 8009b18:	f14c 0c00 	adc.w	ip, ip, #0
 8009b1c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8009b20:	f102 3aff 	add.w	sl, r2, #4294967295
 8009b24:	fb9a fefe 	sdiv	lr, sl, lr
 8009b28:	089b      	lsrs	r3, r3, #2
 8009b2a:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8009b2e:	ebb3 030e 	subs.w	r3, r3, lr
 8009b32:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8009b36:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8009b3a:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8009b3e:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8009b42:	fb9a fefe 	sdiv	lr, sl, lr
 8009b46:	eb13 030e 	adds.w	r3, r3, lr
 8009b4a:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8009b4e:	f240 1c6d 	movw	ip, #365	; 0x16d
 8009b52:	3a46      	subs	r2, #70	; 0x46
 8009b54:	fb0c f202 	mul.w	r2, ip, r2
 8009b58:	f04f 0c18 	mov.w	ip, #24
 8009b5c:	189b      	adds	r3, r3, r2
 8009b5e:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8009b62:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 8009b66:	eb13 030e 	adds.w	r3, r3, lr
 8009b6a:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8009b6e:	fba3 3e0c 	umull	r3, lr, r3, ip
 8009b72:	fb0c e202 	mla	r2, ip, r2, lr
 8009b76:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8009b7a:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8009b7e:	eb13 030e 	adds.w	r3, r3, lr
 8009b82:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8009b86:	fba3 320c 	umull	r3, r2, r3, ip
 8009b8a:	fb0c 220e 	mla	r2, ip, lr, r2
 8009b8e:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8009b92:	eb13 030e 	adds.w	r3, r3, lr
 8009b96:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8009b9a:	fba3 3e0c 	umull	r3, lr, r3, ip
 8009b9e:	fb0c e202 	mla	r2, ip, r2, lr
 8009ba2:	f8d6 e000 	ldr.w	lr, [r6]
 8009ba6:	eb13 030e 	adds.w	r3, r3, lr
 8009baa:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8009bae:	ebb3 0309 	subs.w	r3, r3, r9
 8009bb2:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8009bb6:	e9cd 3200 	strd	r3, r2, [sp]
 8009bba:	4a23      	ldr	r2, [pc, #140]	; (8009c48 <__strftime.isra.0+0x7d0>)
 8009bbc:	f000 ff2e 	bl	800aa1c <sniprintf>
 8009bc0:	e618      	b.n	80097f4 <__strftime.isra.0+0x37c>
 8009bc2:	f04f 0900 	mov.w	r9, #0
 8009bc6:	e799      	b.n	8009afc <__strftime.isra.0+0x684>
 8009bc8:	6833      	ldr	r3, [r6, #0]
 8009bca:	e680      	b.n	80098ce <__strftime.isra.0+0x456>
 8009bcc:	1e6b      	subs	r3, r5, #1
 8009bce:	429c      	cmp	r4, r3
 8009bd0:	f4bf ac84 	bcs.w	80094dc <__strftime.isra.0+0x64>
 8009bd4:	2309      	movs	r3, #9
 8009bd6:	e742      	b.n	8009a5e <__strftime.isra.0+0x5e6>
 8009bd8:	6833      	ldr	r3, [r6, #0]
 8009bda:	4a1c      	ldr	r2, [pc, #112]	; (8009c4c <__strftime.isra.0+0x7d4>)
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	6873      	ldr	r3, [r6, #4]
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	68b3      	ldr	r3, [r6, #8]
 8009be4:	e5f7      	b.n	80097d6 <__strftime.isra.0+0x35e>
 8009be6:	1e6b      	subs	r3, r5, #1
 8009be8:	429c      	cmp	r4, r3
 8009bea:	f4bf ac77 	bcs.w	80094dc <__strftime.isra.0+0x64>
 8009bee:	69b3      	ldr	r3, [r6, #24]
 8009bf0:	1c62      	adds	r2, r4, #1
 8009bf2:	b91b      	cbnz	r3, 8009bfc <__strftime.isra.0+0x784>
 8009bf4:	2337      	movs	r3, #55	; 0x37
 8009bf6:	553b      	strb	r3, [r7, r4]
 8009bf8:	4614      	mov	r4, r2
 8009bfa:	e541      	b.n	8009680 <__strftime.isra.0+0x208>
 8009bfc:	3330      	adds	r3, #48	; 0x30
 8009bfe:	e7fa      	b.n	8009bf6 <__strftime.isra.0+0x77e>
 8009c00:	69f3      	ldr	r3, [r6, #28]
 8009c02:	69b2      	ldr	r2, [r6, #24]
 8009c04:	3307      	adds	r3, #7
 8009c06:	1a9b      	subs	r3, r3, r2
 8009c08:	2207      	movs	r2, #7
 8009c0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c0e:	e65e      	b.n	80098ce <__strftime.isra.0+0x456>
 8009c10:	4630      	mov	r0, r6
 8009c12:	f7ff fbcf 	bl	80093b4 <iso_year_adjust>
 8009c16:	69b2      	ldr	r2, [r6, #24]
 8009c18:	b1d2      	cbz	r2, 8009c50 <__strftime.isra.0+0x7d8>
 8009c1a:	3a01      	subs	r2, #1
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	dc3b      	bgt.n	8009c98 <__strftime.isra.0+0x820>
 8009c20:	69f3      	ldr	r3, [r6, #28]
 8009c22:	d117      	bne.n	8009c54 <__strftime.isra.0+0x7dc>
 8009c24:	330a      	adds	r3, #10
 8009c26:	e7ee      	b.n	8009c06 <__strftime.isra.0+0x78e>
 8009c28:	fffff894 	.word	0xfffff894
 8009c2c:	fffff895 	.word	0xfffff895
 8009c30:	0800b9e1 	.word	0x0800b9e1
 8009c34:	0800b9ef 	.word	0x0800b9ef
 8009c38:	0800ba04 	.word	0x0800ba04
 8009c3c:	0800bb54 	.word	0x0800bb54
 8009c40:	0800bc8d 	.word	0x0800bc8d
 8009c44:	0800ba13 	.word	0x0800ba13
 8009c48:	0800ba09 	.word	0x0800ba09
 8009c4c:	0800ba0e 	.word	0x0800ba0e
 8009c50:	2206      	movs	r2, #6
 8009c52:	e7e3      	b.n	8009c1c <__strftime.isra.0+0x7a4>
 8009c54:	6971      	ldr	r1, [r6, #20]
 8009c56:	1ad2      	subs	r2, r2, r3
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	f240 736b 	movw	r3, #1899	; 0x76b
 8009c5e:	bfa8      	it	ge
 8009c60:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 8009c64:	440b      	add	r3, r1
 8009c66:	0799      	lsls	r1, r3, #30
 8009c68:	d105      	bne.n	8009c76 <__strftime.isra.0+0x7fe>
 8009c6a:	2064      	movs	r0, #100	; 0x64
 8009c6c:	fb93 f1f0 	sdiv	r1, r3, r0
 8009c70:	fb00 3111 	mls	r1, r0, r1, r3
 8009c74:	b971      	cbnz	r1, 8009c94 <__strftime.isra.0+0x81c>
 8009c76:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009c7a:	fb93 f0f1 	sdiv	r0, r3, r1
 8009c7e:	fb01 3310 	mls	r3, r1, r0, r3
 8009c82:	fab3 f383 	clz	r3, r3
 8009c86:	095b      	lsrs	r3, r3, #5
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	bfb4      	ite	lt
 8009c8e:	2335      	movlt	r3, #53	; 0x35
 8009c90:	2334      	movge	r3, #52	; 0x34
 8009c92:	e61c      	b.n	80098ce <__strftime.isra.0+0x456>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e7f7      	b.n	8009c88 <__strftime.isra.0+0x810>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e618      	b.n	80098ce <__strftime.isra.0+0x456>
 8009c9c:	1e6b      	subs	r3, r5, #1
 8009c9e:	429c      	cmp	r4, r3
 8009ca0:	f4bf ac1c 	bcs.w	80094dc <__strftime.isra.0+0x64>
 8009ca4:	69b3      	ldr	r3, [r6, #24]
 8009ca6:	3330      	adds	r3, #48	; 0x30
 8009ca8:	e6d9      	b.n	8009a5e <__strftime.isra.0+0x5e6>
 8009caa:	69b2      	ldr	r2, [r6, #24]
 8009cac:	b11a      	cbz	r2, 8009cb6 <__strftime.isra.0+0x83e>
 8009cae:	3a01      	subs	r2, #1
 8009cb0:	69f3      	ldr	r3, [r6, #28]
 8009cb2:	3307      	adds	r3, #7
 8009cb4:	e7a7      	b.n	8009c06 <__strftime.isra.0+0x78e>
 8009cb6:	2206      	movs	r2, #6
 8009cb8:	e7fa      	b.n	8009cb0 <__strftime.isra.0+0x838>
 8009cba:	6970      	ldr	r0, [r6, #20]
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	db05      	blt.n	8009ccc <__strftime.isra.0+0x854>
 8009cc0:	2364      	movs	r3, #100	; 0x64
 8009cc2:	fb90 f2f3 	sdiv	r2, r0, r3
 8009cc6:	fb02 0313 	mls	r3, r2, r3, r0
 8009cca:	e600      	b.n	80098ce <__strftime.isra.0+0x456>
 8009ccc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009cd0:	f000 fb40 	bl	800a354 <abs>
 8009cd4:	e7f4      	b.n	8009cc0 <__strftime.isra.0+0x848>
 8009cd6:	6972      	ldr	r2, [r6, #20]
 8009cd8:	494c      	ldr	r1, [pc, #304]	; (8009e0c <__strftime.isra.0+0x994>)
 8009cda:	428a      	cmp	r2, r1
 8009cdc:	da05      	bge.n	8009cea <__strftime.isra.0+0x872>
 8009cde:	202d      	movs	r0, #45	; 0x2d
 8009ce0:	eba1 0a02 	sub.w	sl, r1, r2
 8009ce4:	f88d 0018 	strb.w	r0, [sp, #24]
 8009ce8:	e65c      	b.n	80099a4 <__strftime.isra.0+0x52c>
 8009cea:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8009cee:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8009cf2:	d106      	bne.n	8009d02 <__strftime.isra.0+0x88a>
 8009cf4:	f242 720f 	movw	r2, #9999	; 0x270f
 8009cf8:	4592      	cmp	sl, r2
 8009cfa:	d902      	bls.n	8009d02 <__strftime.isra.0+0x88a>
 8009cfc:	f88d b018 	strb.w	fp, [sp, #24]
 8009d00:	e650      	b.n	80099a4 <__strftime.isra.0+0x52c>
 8009d02:	aa06      	add	r2, sp, #24
 8009d04:	2125      	movs	r1, #37	; 0x25
 8009d06:	7011      	strb	r1, [r2, #0]
 8009d08:	f1bb 0f00 	cmp.w	fp, #0
 8009d0c:	d108      	bne.n	8009d20 <__strftime.isra.0+0x8a8>
 8009d0e:	1c50      	adds	r0, r2, #1
 8009d10:	493f      	ldr	r1, [pc, #252]	; (8009e10 <__strftime.isra.0+0x998>)
 8009d12:	f000 fee1 	bl	800aad8 <strcpy>
 8009d16:	464b      	mov	r3, r9
 8009d18:	f8cd a000 	str.w	sl, [sp]
 8009d1c:	aa06      	add	r2, sp, #24
 8009d1e:	e6ce      	b.n	8009abe <__strftime.isra.0+0x646>
 8009d20:	2330      	movs	r3, #48	; 0x30
 8009d22:	1c90      	adds	r0, r2, #2
 8009d24:	7053      	strb	r3, [r2, #1]
 8009d26:	e7f3      	b.n	8009d10 <__strftime.isra.0+0x898>
 8009d28:	6a33      	ldr	r3, [r6, #32]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f6ff aca8 	blt.w	8009680 <__strftime.isra.0+0x208>
 8009d30:	f000 f97c 	bl	800a02c <__tz_lock>
 8009d34:	9b02      	ldr	r3, [sp, #8]
 8009d36:	b90b      	cbnz	r3, 8009d3c <__strftime.isra.0+0x8c4>
 8009d38:	f000 f984 	bl	800a044 <_tzset_unlocked>
 8009d3c:	f000 fb52 	bl	800a3e4 <__gettzinfo>
 8009d40:	6a33      	ldr	r3, [r6, #32]
 8009d42:	eb07 0a04 	add.w	sl, r7, r4
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	bfd4      	ite	le
 8009d4a:	2200      	movle	r2, #0
 8009d4c:	2201      	movgt	r2, #1
 8009d4e:	2328      	movs	r3, #40	; 0x28
 8009d50:	fb02 3303 	mla	r3, r2, r3, r3
 8009d54:	58c3      	ldr	r3, [r0, r3]
 8009d56:	eba5 0b04 	sub.w	fp, r5, r4
 8009d5a:	f1c3 0900 	rsb	r9, r3, #0
 8009d5e:	f000 f96b 	bl	800a038 <__tz_unlock>
 8009d62:	233c      	movs	r3, #60	; 0x3c
 8009d64:	fb99 f0f3 	sdiv	r0, r9, r3
 8009d68:	f000 fb40 	bl	800a3ec <labs>
 8009d6c:	233c      	movs	r3, #60	; 0x3c
 8009d6e:	fb90 f2f3 	sdiv	r2, r0, r3
 8009d72:	fb02 0013 	mls	r0, r2, r3, r0
 8009d76:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009d7a:	9000      	str	r0, [sp, #0]
 8009d7c:	fb99 f3f3 	sdiv	r3, r9, r3
 8009d80:	4659      	mov	r1, fp
 8009d82:	4650      	mov	r0, sl
 8009d84:	4a23      	ldr	r2, [pc, #140]	; (8009e14 <__strftime.isra.0+0x99c>)
 8009d86:	f000 fe49 	bl	800aa1c <sniprintf>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	f6ff aba6 	blt.w	80094dc <__strftime.isra.0+0x64>
 8009d90:	4404      	add	r4, r0
 8009d92:	42a5      	cmp	r5, r4
 8009d94:	f67f aba2 	bls.w	80094dc <__strftime.isra.0+0x64>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	9302      	str	r3, [sp, #8]
 8009d9c:	e470      	b.n	8009680 <__strftime.isra.0+0x208>
 8009d9e:	6a33      	ldr	r3, [r6, #32]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f6ff ac6d 	blt.w	8009680 <__strftime.isra.0+0x208>
 8009da6:	f000 f941 	bl	800a02c <__tz_lock>
 8009daa:	9b02      	ldr	r3, [sp, #8]
 8009dac:	b90b      	cbnz	r3, 8009db2 <__strftime.isra.0+0x93a>
 8009dae:	f000 f949 	bl	800a044 <_tzset_unlocked>
 8009db2:	6a33      	ldr	r3, [r6, #32]
 8009db4:	4a18      	ldr	r2, [pc, #96]	; (8009e18 <__strftime.isra.0+0x9a0>)
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	bfd4      	ite	le
 8009dba:	2300      	movle	r3, #0
 8009dbc:	2301      	movgt	r3, #1
 8009dbe:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8009dc2:	4648      	mov	r0, r9
 8009dc4:	f7f6 f9c2 	bl	800014c <strlen>
 8009dc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8009dcc:	4420      	add	r0, r4
 8009dce:	1e6b      	subs	r3, r5, #1
 8009dd0:	42a0      	cmp	r0, r4
 8009dd2:	d102      	bne.n	8009dda <__strftime.isra.0+0x962>
 8009dd4:	f000 f930 	bl	800a038 <__tz_unlock>
 8009dd8:	e7de      	b.n	8009d98 <__strftime.isra.0+0x920>
 8009dda:	42a3      	cmp	r3, r4
 8009ddc:	d904      	bls.n	8009de8 <__strftime.isra.0+0x970>
 8009dde:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009de2:	553a      	strb	r2, [r7, r4]
 8009de4:	3401      	adds	r4, #1
 8009de6:	e7f3      	b.n	8009dd0 <__strftime.isra.0+0x958>
 8009de8:	f000 f926 	bl	800a038 <__tz_unlock>
 8009dec:	f7ff bb76 	b.w	80094dc <__strftime.isra.0+0x64>
 8009df0:	1e6b      	subs	r3, r5, #1
 8009df2:	429c      	cmp	r4, r3
 8009df4:	f4bf ab72 	bcs.w	80094dc <__strftime.isra.0+0x64>
 8009df8:	2325      	movs	r3, #37	; 0x25
 8009dfa:	e630      	b.n	8009a5e <__strftime.isra.0+0x5e6>
 8009dfc:	b10d      	cbz	r5, 8009e02 <__strftime.isra.0+0x98a>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	553b      	strb	r3, [r7, r4]
 8009e02:	4620      	mov	r0, r4
 8009e04:	b00f      	add	sp, #60	; 0x3c
 8009e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0a:	bf00      	nop
 8009e0c:	fffff894 	.word	0xfffff894
 8009e10:	0800ba00 	.word	0x0800ba00
 8009e14:	0800ba1d 	.word	0x0800ba1d
 8009e18:	20000144 	.word	0x20000144

08009e1c <strftime>:
 8009e1c:	f7ff bb2c 	b.w	8009478 <__strftime.isra.0>

08009e20 <_strtol_l.constprop.0>:
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e26:	4680      	mov	r8, r0
 8009e28:	d001      	beq.n	8009e2e <_strtol_l.constprop.0+0xe>
 8009e2a:	2b24      	cmp	r3, #36	; 0x24
 8009e2c:	d906      	bls.n	8009e3c <_strtol_l.constprop.0+0x1c>
 8009e2e:	f7ff f97d 	bl	800912c <__errno>
 8009e32:	2316      	movs	r3, #22
 8009e34:	6003      	str	r3, [r0, #0]
 8009e36:	2000      	movs	r0, #0
 8009e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3c:	460d      	mov	r5, r1
 8009e3e:	4f35      	ldr	r7, [pc, #212]	; (8009f14 <_strtol_l.constprop.0+0xf4>)
 8009e40:	4628      	mov	r0, r5
 8009e42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e46:	5de6      	ldrb	r6, [r4, r7]
 8009e48:	f016 0608 	ands.w	r6, r6, #8
 8009e4c:	d1f8      	bne.n	8009e40 <_strtol_l.constprop.0+0x20>
 8009e4e:	2c2d      	cmp	r4, #45	; 0x2d
 8009e50:	d12f      	bne.n	8009eb2 <_strtol_l.constprop.0+0x92>
 8009e52:	2601      	movs	r6, #1
 8009e54:	782c      	ldrb	r4, [r5, #0]
 8009e56:	1c85      	adds	r5, r0, #2
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d057      	beq.n	8009f0c <_strtol_l.constprop.0+0xec>
 8009e5c:	2b10      	cmp	r3, #16
 8009e5e:	d109      	bne.n	8009e74 <_strtol_l.constprop.0+0x54>
 8009e60:	2c30      	cmp	r4, #48	; 0x30
 8009e62:	d107      	bne.n	8009e74 <_strtol_l.constprop.0+0x54>
 8009e64:	7828      	ldrb	r0, [r5, #0]
 8009e66:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009e6a:	2858      	cmp	r0, #88	; 0x58
 8009e6c:	d149      	bne.n	8009f02 <_strtol_l.constprop.0+0xe2>
 8009e6e:	2310      	movs	r3, #16
 8009e70:	786c      	ldrb	r4, [r5, #1]
 8009e72:	3502      	adds	r5, #2
 8009e74:	2700      	movs	r7, #0
 8009e76:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009e7a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009e7e:	fbbe f9f3 	udiv	r9, lr, r3
 8009e82:	4638      	mov	r0, r7
 8009e84:	fb03 ea19 	mls	sl, r3, r9, lr
 8009e88:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009e8c:	f1bc 0f09 	cmp.w	ip, #9
 8009e90:	d814      	bhi.n	8009ebc <_strtol_l.constprop.0+0x9c>
 8009e92:	4664      	mov	r4, ip
 8009e94:	42a3      	cmp	r3, r4
 8009e96:	dd22      	ble.n	8009ede <_strtol_l.constprop.0+0xbe>
 8009e98:	2f00      	cmp	r7, #0
 8009e9a:	db1d      	blt.n	8009ed8 <_strtol_l.constprop.0+0xb8>
 8009e9c:	4581      	cmp	r9, r0
 8009e9e:	d31b      	bcc.n	8009ed8 <_strtol_l.constprop.0+0xb8>
 8009ea0:	d101      	bne.n	8009ea6 <_strtol_l.constprop.0+0x86>
 8009ea2:	45a2      	cmp	sl, r4
 8009ea4:	db18      	blt.n	8009ed8 <_strtol_l.constprop.0+0xb8>
 8009ea6:	2701      	movs	r7, #1
 8009ea8:	fb00 4003 	mla	r0, r0, r3, r4
 8009eac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009eb0:	e7ea      	b.n	8009e88 <_strtol_l.constprop.0+0x68>
 8009eb2:	2c2b      	cmp	r4, #43	; 0x2b
 8009eb4:	bf04      	itt	eq
 8009eb6:	782c      	ldrbeq	r4, [r5, #0]
 8009eb8:	1c85      	addeq	r5, r0, #2
 8009eba:	e7cd      	b.n	8009e58 <_strtol_l.constprop.0+0x38>
 8009ebc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009ec0:	f1bc 0f19 	cmp.w	ip, #25
 8009ec4:	d801      	bhi.n	8009eca <_strtol_l.constprop.0+0xaa>
 8009ec6:	3c37      	subs	r4, #55	; 0x37
 8009ec8:	e7e4      	b.n	8009e94 <_strtol_l.constprop.0+0x74>
 8009eca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009ece:	f1bc 0f19 	cmp.w	ip, #25
 8009ed2:	d804      	bhi.n	8009ede <_strtol_l.constprop.0+0xbe>
 8009ed4:	3c57      	subs	r4, #87	; 0x57
 8009ed6:	e7dd      	b.n	8009e94 <_strtol_l.constprop.0+0x74>
 8009ed8:	f04f 37ff 	mov.w	r7, #4294967295
 8009edc:	e7e6      	b.n	8009eac <_strtol_l.constprop.0+0x8c>
 8009ede:	2f00      	cmp	r7, #0
 8009ee0:	da07      	bge.n	8009ef2 <_strtol_l.constprop.0+0xd2>
 8009ee2:	2322      	movs	r3, #34	; 0x22
 8009ee4:	4670      	mov	r0, lr
 8009ee6:	f8c8 3000 	str.w	r3, [r8]
 8009eea:	2a00      	cmp	r2, #0
 8009eec:	d0a4      	beq.n	8009e38 <_strtol_l.constprop.0+0x18>
 8009eee:	1e69      	subs	r1, r5, #1
 8009ef0:	e005      	b.n	8009efe <_strtol_l.constprop.0+0xde>
 8009ef2:	b106      	cbz	r6, 8009ef6 <_strtol_l.constprop.0+0xd6>
 8009ef4:	4240      	negs	r0, r0
 8009ef6:	2a00      	cmp	r2, #0
 8009ef8:	d09e      	beq.n	8009e38 <_strtol_l.constprop.0+0x18>
 8009efa:	2f00      	cmp	r7, #0
 8009efc:	d1f7      	bne.n	8009eee <_strtol_l.constprop.0+0xce>
 8009efe:	6011      	str	r1, [r2, #0]
 8009f00:	e79a      	b.n	8009e38 <_strtol_l.constprop.0+0x18>
 8009f02:	2430      	movs	r4, #48	; 0x30
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1b5      	bne.n	8009e74 <_strtol_l.constprop.0+0x54>
 8009f08:	2308      	movs	r3, #8
 8009f0a:	e7b3      	b.n	8009e74 <_strtol_l.constprop.0+0x54>
 8009f0c:	2c30      	cmp	r4, #48	; 0x30
 8009f0e:	d0a9      	beq.n	8009e64 <_strtol_l.constprop.0+0x44>
 8009f10:	230a      	movs	r3, #10
 8009f12:	e7af      	b.n	8009e74 <_strtol_l.constprop.0+0x54>
 8009f14:	0800bc8d 	.word	0x0800bc8d

08009f18 <_strtol_r>:
 8009f18:	f7ff bf82 	b.w	8009e20 <_strtol_l.constprop.0>

08009f1c <strtol>:
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	460a      	mov	r2, r1
 8009f20:	4601      	mov	r1, r0
 8009f22:	4802      	ldr	r0, [pc, #8]	; (8009f2c <strtol+0x10>)
 8009f24:	6800      	ldr	r0, [r0, #0]
 8009f26:	f7ff bf7b 	b.w	8009e20 <_strtol_l.constprop.0>
 8009f2a:	bf00      	nop
 8009f2c:	200000e0 	.word	0x200000e0

08009f30 <_strtoul_l.constprop.0>:
 8009f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f34:	4686      	mov	lr, r0
 8009f36:	460d      	mov	r5, r1
 8009f38:	4f35      	ldr	r7, [pc, #212]	; (800a010 <_strtoul_l.constprop.0+0xe0>)
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f40:	5de6      	ldrb	r6, [r4, r7]
 8009f42:	f016 0608 	ands.w	r6, r6, #8
 8009f46:	d1f8      	bne.n	8009f3a <_strtoul_l.constprop.0+0xa>
 8009f48:	2c2d      	cmp	r4, #45	; 0x2d
 8009f4a:	d12f      	bne.n	8009fac <_strtoul_l.constprop.0+0x7c>
 8009f4c:	2601      	movs	r6, #1
 8009f4e:	782c      	ldrb	r4, [r5, #0]
 8009f50:	1c85      	adds	r5, r0, #2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d057      	beq.n	800a006 <_strtoul_l.constprop.0+0xd6>
 8009f56:	2b10      	cmp	r3, #16
 8009f58:	d109      	bne.n	8009f6e <_strtoul_l.constprop.0+0x3e>
 8009f5a:	2c30      	cmp	r4, #48	; 0x30
 8009f5c:	d107      	bne.n	8009f6e <_strtoul_l.constprop.0+0x3e>
 8009f5e:	7828      	ldrb	r0, [r5, #0]
 8009f60:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009f64:	2858      	cmp	r0, #88	; 0x58
 8009f66:	d149      	bne.n	8009ffc <_strtoul_l.constprop.0+0xcc>
 8009f68:	2310      	movs	r3, #16
 8009f6a:	786c      	ldrb	r4, [r5, #1]
 8009f6c:	3502      	adds	r5, #2
 8009f6e:	f04f 38ff 	mov.w	r8, #4294967295
 8009f72:	fbb8 f8f3 	udiv	r8, r8, r3
 8009f76:	2700      	movs	r7, #0
 8009f78:	fb03 f908 	mul.w	r9, r3, r8
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	ea6f 0909 	mvn.w	r9, r9
 8009f82:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009f86:	f1bc 0f09 	cmp.w	ip, #9
 8009f8a:	d814      	bhi.n	8009fb6 <_strtoul_l.constprop.0+0x86>
 8009f8c:	4664      	mov	r4, ip
 8009f8e:	42a3      	cmp	r3, r4
 8009f90:	dd22      	ble.n	8009fd8 <_strtoul_l.constprop.0+0xa8>
 8009f92:	2f00      	cmp	r7, #0
 8009f94:	db1d      	blt.n	8009fd2 <_strtoul_l.constprop.0+0xa2>
 8009f96:	4580      	cmp	r8, r0
 8009f98:	d31b      	bcc.n	8009fd2 <_strtoul_l.constprop.0+0xa2>
 8009f9a:	d101      	bne.n	8009fa0 <_strtoul_l.constprop.0+0x70>
 8009f9c:	45a1      	cmp	r9, r4
 8009f9e:	db18      	blt.n	8009fd2 <_strtoul_l.constprop.0+0xa2>
 8009fa0:	2701      	movs	r7, #1
 8009fa2:	fb00 4003 	mla	r0, r0, r3, r4
 8009fa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009faa:	e7ea      	b.n	8009f82 <_strtoul_l.constprop.0+0x52>
 8009fac:	2c2b      	cmp	r4, #43	; 0x2b
 8009fae:	bf04      	itt	eq
 8009fb0:	782c      	ldrbeq	r4, [r5, #0]
 8009fb2:	1c85      	addeq	r5, r0, #2
 8009fb4:	e7cd      	b.n	8009f52 <_strtoul_l.constprop.0+0x22>
 8009fb6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009fba:	f1bc 0f19 	cmp.w	ip, #25
 8009fbe:	d801      	bhi.n	8009fc4 <_strtoul_l.constprop.0+0x94>
 8009fc0:	3c37      	subs	r4, #55	; 0x37
 8009fc2:	e7e4      	b.n	8009f8e <_strtoul_l.constprop.0+0x5e>
 8009fc4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009fc8:	f1bc 0f19 	cmp.w	ip, #25
 8009fcc:	d804      	bhi.n	8009fd8 <_strtoul_l.constprop.0+0xa8>
 8009fce:	3c57      	subs	r4, #87	; 0x57
 8009fd0:	e7dd      	b.n	8009f8e <_strtoul_l.constprop.0+0x5e>
 8009fd2:	f04f 37ff 	mov.w	r7, #4294967295
 8009fd6:	e7e6      	b.n	8009fa6 <_strtoul_l.constprop.0+0x76>
 8009fd8:	2f00      	cmp	r7, #0
 8009fda:	da07      	bge.n	8009fec <_strtoul_l.constprop.0+0xbc>
 8009fdc:	2322      	movs	r3, #34	; 0x22
 8009fde:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe2:	f8ce 3000 	str.w	r3, [lr]
 8009fe6:	b932      	cbnz	r2, 8009ff6 <_strtoul_l.constprop.0+0xc6>
 8009fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fec:	b106      	cbz	r6, 8009ff0 <_strtoul_l.constprop.0+0xc0>
 8009fee:	4240      	negs	r0, r0
 8009ff0:	2a00      	cmp	r2, #0
 8009ff2:	d0f9      	beq.n	8009fe8 <_strtoul_l.constprop.0+0xb8>
 8009ff4:	b107      	cbz	r7, 8009ff8 <_strtoul_l.constprop.0+0xc8>
 8009ff6:	1e69      	subs	r1, r5, #1
 8009ff8:	6011      	str	r1, [r2, #0]
 8009ffa:	e7f5      	b.n	8009fe8 <_strtoul_l.constprop.0+0xb8>
 8009ffc:	2430      	movs	r4, #48	; 0x30
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1b5      	bne.n	8009f6e <_strtoul_l.constprop.0+0x3e>
 800a002:	2308      	movs	r3, #8
 800a004:	e7b3      	b.n	8009f6e <_strtoul_l.constprop.0+0x3e>
 800a006:	2c30      	cmp	r4, #48	; 0x30
 800a008:	d0a9      	beq.n	8009f5e <_strtoul_l.constprop.0+0x2e>
 800a00a:	230a      	movs	r3, #10
 800a00c:	e7af      	b.n	8009f6e <_strtoul_l.constprop.0+0x3e>
 800a00e:	bf00      	nop
 800a010:	0800bc8d 	.word	0x0800bc8d

0800a014 <_strtoul_r>:
 800a014:	f7ff bf8c 	b.w	8009f30 <_strtoul_l.constprop.0>

0800a018 <strtoul>:
 800a018:	4613      	mov	r3, r2
 800a01a:	460a      	mov	r2, r1
 800a01c:	4601      	mov	r1, r0
 800a01e:	4802      	ldr	r0, [pc, #8]	; (800a028 <strtoul+0x10>)
 800a020:	6800      	ldr	r0, [r0, #0]
 800a022:	f7ff bf85 	b.w	8009f30 <_strtoul_l.constprop.0>
 800a026:	bf00      	nop
 800a028:	200000e0 	.word	0x200000e0

0800a02c <__tz_lock>:
 800a02c:	4801      	ldr	r0, [pc, #4]	; (800a034 <__tz_lock+0x8>)
 800a02e:	f7ff b8a7 	b.w	8009180 <__retarget_lock_acquire>
 800a032:	bf00      	nop
 800a034:	20000662 	.word	0x20000662

0800a038 <__tz_unlock>:
 800a038:	4801      	ldr	r0, [pc, #4]	; (800a040 <__tz_unlock+0x8>)
 800a03a:	f7ff b8a3 	b.w	8009184 <__retarget_lock_release>
 800a03e:	bf00      	nop
 800a040:	20000662 	.word	0x20000662

0800a044 <_tzset_unlocked>:
 800a044:	4b01      	ldr	r3, [pc, #4]	; (800a04c <_tzset_unlocked+0x8>)
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	f000 b802 	b.w	800a050 <_tzset_unlocked_r>
 800a04c:	200000e0 	.word	0x200000e0

0800a050 <_tzset_unlocked_r>:
 800a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a054:	b08d      	sub	sp, #52	; 0x34
 800a056:	4607      	mov	r7, r0
 800a058:	f000 f9c4 	bl	800a3e4 <__gettzinfo>
 800a05c:	49b1      	ldr	r1, [pc, #708]	; (800a324 <_tzset_unlocked_r+0x2d4>)
 800a05e:	4605      	mov	r5, r0
 800a060:	4638      	mov	r0, r7
 800a062:	f000 f9b7 	bl	800a3d4 <_getenv_r>
 800a066:	4eb0      	ldr	r6, [pc, #704]	; (800a328 <_tzset_unlocked_r+0x2d8>)
 800a068:	4604      	mov	r4, r0
 800a06a:	b970      	cbnz	r0, 800a08a <_tzset_unlocked_r+0x3a>
 800a06c:	4baf      	ldr	r3, [pc, #700]	; (800a32c <_tzset_unlocked_r+0x2dc>)
 800a06e:	4ab0      	ldr	r2, [pc, #704]	; (800a330 <_tzset_unlocked_r+0x2e0>)
 800a070:	6018      	str	r0, [r3, #0]
 800a072:	4bb0      	ldr	r3, [pc, #704]	; (800a334 <_tzset_unlocked_r+0x2e4>)
 800a074:	6018      	str	r0, [r3, #0]
 800a076:	4bb0      	ldr	r3, [pc, #704]	; (800a338 <_tzset_unlocked_r+0x2e8>)
 800a078:	6830      	ldr	r0, [r6, #0]
 800a07a:	e9c3 2200 	strd	r2, r2, [r3]
 800a07e:	f000 f9b9 	bl	800a3f4 <free>
 800a082:	6034      	str	r4, [r6, #0]
 800a084:	b00d      	add	sp, #52	; 0x34
 800a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08a:	6831      	ldr	r1, [r6, #0]
 800a08c:	2900      	cmp	r1, #0
 800a08e:	d162      	bne.n	800a156 <_tzset_unlocked_r+0x106>
 800a090:	6830      	ldr	r0, [r6, #0]
 800a092:	f000 f9af 	bl	800a3f4 <free>
 800a096:	4620      	mov	r0, r4
 800a098:	f7f6 f858 	bl	800014c <strlen>
 800a09c:	1c41      	adds	r1, r0, #1
 800a09e:	4638      	mov	r0, r7
 800a0a0:	f7ff f8e2 	bl	8009268 <_malloc_r>
 800a0a4:	6030      	str	r0, [r6, #0]
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d15a      	bne.n	800a160 <_tzset_unlocked_r+0x110>
 800a0aa:	7823      	ldrb	r3, [r4, #0]
 800a0ac:	ae0a      	add	r6, sp, #40	; 0x28
 800a0ae:	2b3a      	cmp	r3, #58	; 0x3a
 800a0b0:	bf08      	it	eq
 800a0b2:	3401      	addeq	r4, #1
 800a0b4:	4633      	mov	r3, r6
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	4aa0      	ldr	r2, [pc, #640]	; (800a33c <_tzset_unlocked_r+0x2ec>)
 800a0ba:	49a1      	ldr	r1, [pc, #644]	; (800a340 <_tzset_unlocked_r+0x2f0>)
 800a0bc:	f000 fce2 	bl	800aa84 <siscanf>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	dddf      	ble.n	800a084 <_tzset_unlocked_r+0x34>
 800a0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0c6:	18e7      	adds	r7, r4, r3
 800a0c8:	5ce3      	ldrb	r3, [r4, r3]
 800a0ca:	2b2d      	cmp	r3, #45	; 0x2d
 800a0cc:	d14c      	bne.n	800a168 <_tzset_unlocked_r+0x118>
 800a0ce:	f04f 38ff 	mov.w	r8, #4294967295
 800a0d2:	3701      	adds	r7, #1
 800a0d4:	2400      	movs	r4, #0
 800a0d6:	f10d 0a20 	add.w	sl, sp, #32
 800a0da:	f10d 0b1e 	add.w	fp, sp, #30
 800a0de:	4633      	mov	r3, r6
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800a0e6:	4997      	ldr	r1, [pc, #604]	; (800a344 <_tzset_unlocked_r+0x2f4>)
 800a0e8:	9603      	str	r6, [sp, #12]
 800a0ea:	f8cd b000 	str.w	fp, [sp]
 800a0ee:	aa07      	add	r2, sp, #28
 800a0f0:	f8ad 401e 	strh.w	r4, [sp, #30]
 800a0f4:	f8ad 4020 	strh.w	r4, [sp, #32]
 800a0f8:	f000 fcc4 	bl	800aa84 <siscanf>
 800a0fc:	42a0      	cmp	r0, r4
 800a0fe:	ddc1      	ble.n	800a084 <_tzset_unlocked_r+0x34>
 800a100:	213c      	movs	r1, #60	; 0x3c
 800a102:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a106:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a10a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800a348 <_tzset_unlocked_r+0x2f8>
 800a10e:	fb01 3302 	mla	r3, r1, r2, r3
 800a112:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a116:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a11a:	fb01 3302 	mla	r3, r1, r2, r3
 800a11e:	fb08 f303 	mul.w	r3, r8, r3
 800a122:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800a338 <_tzset_unlocked_r+0x2e8>
 800a126:	62ab      	str	r3, [r5, #40]	; 0x28
 800a128:	4b84      	ldr	r3, [pc, #528]	; (800a33c <_tzset_unlocked_r+0x2ec>)
 800a12a:	464a      	mov	r2, r9
 800a12c:	f8c8 3000 	str.w	r3, [r8]
 800a130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a132:	4983      	ldr	r1, [pc, #524]	; (800a340 <_tzset_unlocked_r+0x2f0>)
 800a134:	441f      	add	r7, r3
 800a136:	4638      	mov	r0, r7
 800a138:	4633      	mov	r3, r6
 800a13a:	f000 fca3 	bl	800aa84 <siscanf>
 800a13e:	42a0      	cmp	r0, r4
 800a140:	dc18      	bgt.n	800a174 <_tzset_unlocked_r+0x124>
 800a142:	f8d8 3000 	ldr.w	r3, [r8]
 800a146:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a148:	f8c8 3004 	str.w	r3, [r8, #4]
 800a14c:	4b77      	ldr	r3, [pc, #476]	; (800a32c <_tzset_unlocked_r+0x2dc>)
 800a14e:	601a      	str	r2, [r3, #0]
 800a150:	4b78      	ldr	r3, [pc, #480]	; (800a334 <_tzset_unlocked_r+0x2e4>)
 800a152:	601c      	str	r4, [r3, #0]
 800a154:	e796      	b.n	800a084 <_tzset_unlocked_r+0x34>
 800a156:	f7f6 f801 	bl	800015c <strcmp>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d198      	bne.n	800a090 <_tzset_unlocked_r+0x40>
 800a15e:	e791      	b.n	800a084 <_tzset_unlocked_r+0x34>
 800a160:	4621      	mov	r1, r4
 800a162:	f000 fcb9 	bl	800aad8 <strcpy>
 800a166:	e7a0      	b.n	800a0aa <_tzset_unlocked_r+0x5a>
 800a168:	2b2b      	cmp	r3, #43	; 0x2b
 800a16a:	f04f 0801 	mov.w	r8, #1
 800a16e:	bf08      	it	eq
 800a170:	3701      	addeq	r7, #1
 800a172:	e7af      	b.n	800a0d4 <_tzset_unlocked_r+0x84>
 800a174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a176:	f8c8 9004 	str.w	r9, [r8, #4]
 800a17a:	18fc      	adds	r4, r7, r3
 800a17c:	5cfb      	ldrb	r3, [r7, r3]
 800a17e:	2b2d      	cmp	r3, #45	; 0x2d
 800a180:	f040 808c 	bne.w	800a29c <_tzset_unlocked_r+0x24c>
 800a184:	f04f 37ff 	mov.w	r7, #4294967295
 800a188:	3401      	adds	r4, #1
 800a18a:	2300      	movs	r3, #0
 800a18c:	4620      	mov	r0, r4
 800a18e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a192:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a196:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a19a:	930a      	str	r3, [sp, #40]	; 0x28
 800a19c:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a1a0:	4633      	mov	r3, r6
 800a1a2:	e9cd b600 	strd	fp, r6, [sp]
 800a1a6:	4967      	ldr	r1, [pc, #412]	; (800a344 <_tzset_unlocked_r+0x2f4>)
 800a1a8:	aa07      	add	r2, sp, #28
 800a1aa:	f000 fc6b 	bl	800aa84 <siscanf>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	dc7a      	bgt.n	800a2a8 <_tzset_unlocked_r+0x258>
 800a1b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a1b4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800a1b8:	462f      	mov	r7, r5
 800a1ba:	f04f 0900 	mov.w	r9, #0
 800a1be:	652b      	str	r3, [r5, #80]	; 0x50
 800a1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c2:	441c      	add	r4, r3
 800a1c4:	7823      	ldrb	r3, [r4, #0]
 800a1c6:	2b2c      	cmp	r3, #44	; 0x2c
 800a1c8:	bf08      	it	eq
 800a1ca:	3401      	addeq	r4, #1
 800a1cc:	f894 8000 	ldrb.w	r8, [r4]
 800a1d0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800a1d4:	d17a      	bne.n	800a2cc <_tzset_unlocked_r+0x27c>
 800a1d6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800a1da:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800a1de:	ab09      	add	r3, sp, #36	; 0x24
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	4633      	mov	r3, r6
 800a1e6:	4959      	ldr	r1, [pc, #356]	; (800a34c <_tzset_unlocked_r+0x2fc>)
 800a1e8:	9603      	str	r6, [sp, #12]
 800a1ea:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800a1ee:	f000 fc49 	bl	800aa84 <siscanf>
 800a1f2:	2803      	cmp	r0, #3
 800a1f4:	f47f af46 	bne.w	800a084 <_tzset_unlocked_r+0x34>
 800a1f8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800a1fc:	1e4b      	subs	r3, r1, #1
 800a1fe:	2b0b      	cmp	r3, #11
 800a200:	f63f af40 	bhi.w	800a084 <_tzset_unlocked_r+0x34>
 800a204:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800a208:	1e53      	subs	r3, r2, #1
 800a20a:	2b04      	cmp	r3, #4
 800a20c:	f63f af3a 	bhi.w	800a084 <_tzset_unlocked_r+0x34>
 800a210:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a214:	2b06      	cmp	r3, #6
 800a216:	f63f af35 	bhi.w	800a084 <_tzset_unlocked_r+0x34>
 800a21a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800a21e:	f887 8008 	strb.w	r8, [r7, #8]
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a226:	eb04 0803 	add.w	r8, r4, r3
 800a22a:	2302      	movs	r3, #2
 800a22c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a230:	2300      	movs	r3, #0
 800a232:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a236:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a23a:	930a      	str	r3, [sp, #40]	; 0x28
 800a23c:	f898 3000 	ldrb.w	r3, [r8]
 800a240:	2b2f      	cmp	r3, #47	; 0x2f
 800a242:	d109      	bne.n	800a258 <_tzset_unlocked_r+0x208>
 800a244:	4633      	mov	r3, r6
 800a246:	4640      	mov	r0, r8
 800a248:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a24c:	e9cd b600 	strd	fp, r6, [sp]
 800a250:	493f      	ldr	r1, [pc, #252]	; (800a350 <_tzset_unlocked_r+0x300>)
 800a252:	aa07      	add	r2, sp, #28
 800a254:	f000 fc16 	bl	800aa84 <siscanf>
 800a258:	213c      	movs	r1, #60	; 0x3c
 800a25a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a25e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a262:	3728      	adds	r7, #40	; 0x28
 800a264:	fb01 3302 	mla	r3, r1, r2, r3
 800a268:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a26c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a270:	fb01 3302 	mla	r3, r1, r2, r3
 800a274:	f847 3c10 	str.w	r3, [r7, #-16]
 800a278:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a27a:	4444      	add	r4, r8
 800a27c:	f1b9 0f00 	cmp.w	r9, #0
 800a280:	d021      	beq.n	800a2c6 <_tzset_unlocked_r+0x276>
 800a282:	6868      	ldr	r0, [r5, #4]
 800a284:	f000 fc44 	bl	800ab10 <__tzcalc_limits>
 800a288:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a28a:	4b28      	ldr	r3, [pc, #160]	; (800a32c <_tzset_unlocked_r+0x2dc>)
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	bf18      	it	ne
 800a294:	2301      	movne	r3, #1
 800a296:	4a27      	ldr	r2, [pc, #156]	; (800a334 <_tzset_unlocked_r+0x2e4>)
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	e6f3      	b.n	800a084 <_tzset_unlocked_r+0x34>
 800a29c:	2b2b      	cmp	r3, #43	; 0x2b
 800a29e:	f04f 0701 	mov.w	r7, #1
 800a2a2:	bf08      	it	eq
 800a2a4:	3401      	addeq	r4, #1
 800a2a6:	e770      	b.n	800a18a <_tzset_unlocked_r+0x13a>
 800a2a8:	213c      	movs	r1, #60	; 0x3c
 800a2aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a2ae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a2b2:	fb01 3302 	mla	r3, r1, r2, r3
 800a2b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a2ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a2be:	fb01 3302 	mla	r3, r1, r2, r3
 800a2c2:	437b      	muls	r3, r7
 800a2c4:	e778      	b.n	800a1b8 <_tzset_unlocked_r+0x168>
 800a2c6:	f04f 0901 	mov.w	r9, #1
 800a2ca:	e77b      	b.n	800a1c4 <_tzset_unlocked_r+0x174>
 800a2cc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a2d0:	bf0a      	itet	eq
 800a2d2:	4643      	moveq	r3, r8
 800a2d4:	2344      	movne	r3, #68	; 0x44
 800a2d6:	3401      	addeq	r4, #1
 800a2d8:	220a      	movs	r2, #10
 800a2da:	4620      	mov	r0, r4
 800a2dc:	a90b      	add	r1, sp, #44	; 0x2c
 800a2de:	9305      	str	r3, [sp, #20]
 800a2e0:	f7ff fe9a 	bl	800a018 <strtoul>
 800a2e4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a2e8:	9b05      	ldr	r3, [sp, #20]
 800a2ea:	45a0      	cmp	r8, r4
 800a2ec:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a2f0:	d114      	bne.n	800a31c <_tzset_unlocked_r+0x2cc>
 800a2f2:	234d      	movs	r3, #77	; 0x4d
 800a2f4:	f1b9 0f00 	cmp.w	r9, #0
 800a2f8:	d107      	bne.n	800a30a <_tzset_unlocked_r+0x2ba>
 800a2fa:	2103      	movs	r1, #3
 800a2fc:	722b      	strb	r3, [r5, #8]
 800a2fe:	2302      	movs	r3, #2
 800a300:	f8c5 9014 	str.w	r9, [r5, #20]
 800a304:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a308:	e78f      	b.n	800a22a <_tzset_unlocked_r+0x1da>
 800a30a:	220b      	movs	r2, #11
 800a30c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a310:	2301      	movs	r3, #1
 800a312:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a316:	2300      	movs	r3, #0
 800a318:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a31a:	e786      	b.n	800a22a <_tzset_unlocked_r+0x1da>
 800a31c:	b280      	uxth	r0, r0
 800a31e:	723b      	strb	r3, [r7, #8]
 800a320:	6178      	str	r0, [r7, #20]
 800a322:	e782      	b.n	800a22a <_tzset_unlocked_r+0x1da>
 800a324:	0800bc50 	.word	0x0800bc50
 800a328:	20000688 	.word	0x20000688
 800a32c:	20000690 	.word	0x20000690
 800a330:	0800bc53 	.word	0x0800bc53
 800a334:	2000068c 	.word	0x2000068c
 800a338:	20000144 	.word	0x20000144
 800a33c:	2000067b 	.word	0x2000067b
 800a340:	0800bc57 	.word	0x0800bc57
 800a344:	0800bc7a 	.word	0x0800bc7a
 800a348:	20000670 	.word	0x20000670
 800a34c:	0800bc66 	.word	0x0800bc66
 800a350:	0800bc79 	.word	0x0800bc79

0800a354 <abs>:
 800a354:	2800      	cmp	r0, #0
 800a356:	bfb8      	it	lt
 800a358:	4240      	neglt	r0, r0
 800a35a:	4770      	bx	lr

0800a35c <_findenv_r>:
 800a35c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a360:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800a3d0 <_findenv_r+0x74>
 800a364:	4607      	mov	r7, r0
 800a366:	4689      	mov	r9, r1
 800a368:	4616      	mov	r6, r2
 800a36a:	f000 fc7b 	bl	800ac64 <__env_lock>
 800a36e:	f8da 4000 	ldr.w	r4, [sl]
 800a372:	b134      	cbz	r4, 800a382 <_findenv_r+0x26>
 800a374:	464b      	mov	r3, r9
 800a376:	4698      	mov	r8, r3
 800a378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a37c:	b13a      	cbz	r2, 800a38e <_findenv_r+0x32>
 800a37e:	2a3d      	cmp	r2, #61	; 0x3d
 800a380:	d1f9      	bne.n	800a376 <_findenv_r+0x1a>
 800a382:	4638      	mov	r0, r7
 800a384:	f000 fc74 	bl	800ac70 <__env_unlock>
 800a388:	2000      	movs	r0, #0
 800a38a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38e:	eba8 0809 	sub.w	r8, r8, r9
 800a392:	46a3      	mov	fp, r4
 800a394:	f854 0b04 	ldr.w	r0, [r4], #4
 800a398:	2800      	cmp	r0, #0
 800a39a:	d0f2      	beq.n	800a382 <_findenv_r+0x26>
 800a39c:	4642      	mov	r2, r8
 800a39e:	4649      	mov	r1, r9
 800a3a0:	f000 fba2 	bl	800aae8 <strncmp>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d1f4      	bne.n	800a392 <_findenv_r+0x36>
 800a3a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a3ac:	eb03 0508 	add.w	r5, r3, r8
 800a3b0:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a3b4:	2b3d      	cmp	r3, #61	; 0x3d
 800a3b6:	d1ec      	bne.n	800a392 <_findenv_r+0x36>
 800a3b8:	f8da 3000 	ldr.w	r3, [sl]
 800a3bc:	4638      	mov	r0, r7
 800a3be:	ebab 0303 	sub.w	r3, fp, r3
 800a3c2:	109b      	asrs	r3, r3, #2
 800a3c4:	6033      	str	r3, [r6, #0]
 800a3c6:	f000 fc53 	bl	800ac70 <__env_unlock>
 800a3ca:	1c68      	adds	r0, r5, #1
 800a3cc:	e7dd      	b.n	800a38a <_findenv_r+0x2e>
 800a3ce:	bf00      	nop
 800a3d0:	200000bc 	.word	0x200000bc

0800a3d4 <_getenv_r>:
 800a3d4:	b507      	push	{r0, r1, r2, lr}
 800a3d6:	aa01      	add	r2, sp, #4
 800a3d8:	f7ff ffc0 	bl	800a35c <_findenv_r>
 800a3dc:	b003      	add	sp, #12
 800a3de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a3e4 <__gettzinfo>:
 800a3e4:	4800      	ldr	r0, [pc, #0]	; (800a3e8 <__gettzinfo+0x4>)
 800a3e6:	4770      	bx	lr
 800a3e8:	20000150 	.word	0x20000150

0800a3ec <labs>:
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	bfb8      	it	lt
 800a3f0:	4240      	neglt	r0, r0
 800a3f2:	4770      	bx	lr

0800a3f4 <free>:
 800a3f4:	4b02      	ldr	r3, [pc, #8]	; (800a400 <free+0xc>)
 800a3f6:	4601      	mov	r1, r0
 800a3f8:	6818      	ldr	r0, [r3, #0]
 800a3fa:	f7fe becd 	b.w	8009198 <_free_r>
 800a3fe:	bf00      	nop
 800a400:	200000e0 	.word	0x200000e0

0800a404 <memcpy>:
 800a404:	440a      	add	r2, r1
 800a406:	4291      	cmp	r1, r2
 800a408:	f100 33ff 	add.w	r3, r0, #4294967295
 800a40c:	d100      	bne.n	800a410 <memcpy+0xc>
 800a40e:	4770      	bx	lr
 800a410:	b510      	push	{r4, lr}
 800a412:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a416:	4291      	cmp	r1, r2
 800a418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a41c:	d1f9      	bne.n	800a412 <memcpy+0xe>
 800a41e:	bd10      	pop	{r4, pc}

0800a420 <__malloc_lock>:
 800a420:	4801      	ldr	r0, [pc, #4]	; (800a428 <__malloc_lock+0x8>)
 800a422:	f7fe beae 	b.w	8009182 <__retarget_lock_acquire_recursive>
 800a426:	bf00      	nop
 800a428:	20000661 	.word	0x20000661

0800a42c <__malloc_unlock>:
 800a42c:	4801      	ldr	r0, [pc, #4]	; (800a434 <__malloc_unlock+0x8>)
 800a42e:	f7fe beaa 	b.w	8009186 <__retarget_lock_release_recursive>
 800a432:	bf00      	nop
 800a434:	20000661 	.word	0x20000661

0800a438 <__ssputs_r>:
 800a438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a43c:	688e      	ldr	r6, [r1, #8]
 800a43e:	4682      	mov	sl, r0
 800a440:	429e      	cmp	r6, r3
 800a442:	460c      	mov	r4, r1
 800a444:	4690      	mov	r8, r2
 800a446:	461f      	mov	r7, r3
 800a448:	d838      	bhi.n	800a4bc <__ssputs_r+0x84>
 800a44a:	898a      	ldrh	r2, [r1, #12]
 800a44c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a450:	d032      	beq.n	800a4b8 <__ssputs_r+0x80>
 800a452:	6825      	ldr	r5, [r4, #0]
 800a454:	6909      	ldr	r1, [r1, #16]
 800a456:	3301      	adds	r3, #1
 800a458:	eba5 0901 	sub.w	r9, r5, r1
 800a45c:	6965      	ldr	r5, [r4, #20]
 800a45e:	444b      	add	r3, r9
 800a460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a464:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a468:	106d      	asrs	r5, r5, #1
 800a46a:	429d      	cmp	r5, r3
 800a46c:	bf38      	it	cc
 800a46e:	461d      	movcc	r5, r3
 800a470:	0553      	lsls	r3, r2, #21
 800a472:	d531      	bpl.n	800a4d8 <__ssputs_r+0xa0>
 800a474:	4629      	mov	r1, r5
 800a476:	f7fe fef7 	bl	8009268 <_malloc_r>
 800a47a:	4606      	mov	r6, r0
 800a47c:	b950      	cbnz	r0, 800a494 <__ssputs_r+0x5c>
 800a47e:	230c      	movs	r3, #12
 800a480:	f04f 30ff 	mov.w	r0, #4294967295
 800a484:	f8ca 3000 	str.w	r3, [sl]
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a48e:	81a3      	strh	r3, [r4, #12]
 800a490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a494:	464a      	mov	r2, r9
 800a496:	6921      	ldr	r1, [r4, #16]
 800a498:	f7ff ffb4 	bl	800a404 <memcpy>
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4a6:	81a3      	strh	r3, [r4, #12]
 800a4a8:	6126      	str	r6, [r4, #16]
 800a4aa:	444e      	add	r6, r9
 800a4ac:	6026      	str	r6, [r4, #0]
 800a4ae:	463e      	mov	r6, r7
 800a4b0:	6165      	str	r5, [r4, #20]
 800a4b2:	eba5 0509 	sub.w	r5, r5, r9
 800a4b6:	60a5      	str	r5, [r4, #8]
 800a4b8:	42be      	cmp	r6, r7
 800a4ba:	d900      	bls.n	800a4be <__ssputs_r+0x86>
 800a4bc:	463e      	mov	r6, r7
 800a4be:	4632      	mov	r2, r6
 800a4c0:	4641      	mov	r1, r8
 800a4c2:	6820      	ldr	r0, [r4, #0]
 800a4c4:	f000 fbe8 	bl	800ac98 <memmove>
 800a4c8:	68a3      	ldr	r3, [r4, #8]
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	1b9b      	subs	r3, r3, r6
 800a4ce:	60a3      	str	r3, [r4, #8]
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	4433      	add	r3, r6
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	e7db      	b.n	800a490 <__ssputs_r+0x58>
 800a4d8:	462a      	mov	r2, r5
 800a4da:	f000 fbf7 	bl	800accc <_realloc_r>
 800a4de:	4606      	mov	r6, r0
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d1e1      	bne.n	800a4a8 <__ssputs_r+0x70>
 800a4e4:	4650      	mov	r0, sl
 800a4e6:	6921      	ldr	r1, [r4, #16]
 800a4e8:	f7fe fe56 	bl	8009198 <_free_r>
 800a4ec:	e7c7      	b.n	800a47e <__ssputs_r+0x46>
	...

0800a4f0 <_svfiprintf_r>:
 800a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	4698      	mov	r8, r3
 800a4f6:	898b      	ldrh	r3, [r1, #12]
 800a4f8:	4607      	mov	r7, r0
 800a4fa:	061b      	lsls	r3, r3, #24
 800a4fc:	460d      	mov	r5, r1
 800a4fe:	4614      	mov	r4, r2
 800a500:	b09d      	sub	sp, #116	; 0x74
 800a502:	d50e      	bpl.n	800a522 <_svfiprintf_r+0x32>
 800a504:	690b      	ldr	r3, [r1, #16]
 800a506:	b963      	cbnz	r3, 800a522 <_svfiprintf_r+0x32>
 800a508:	2140      	movs	r1, #64	; 0x40
 800a50a:	f7fe fead 	bl	8009268 <_malloc_r>
 800a50e:	6028      	str	r0, [r5, #0]
 800a510:	6128      	str	r0, [r5, #16]
 800a512:	b920      	cbnz	r0, 800a51e <_svfiprintf_r+0x2e>
 800a514:	230c      	movs	r3, #12
 800a516:	603b      	str	r3, [r7, #0]
 800a518:	f04f 30ff 	mov.w	r0, #4294967295
 800a51c:	e0d1      	b.n	800a6c2 <_svfiprintf_r+0x1d2>
 800a51e:	2340      	movs	r3, #64	; 0x40
 800a520:	616b      	str	r3, [r5, #20]
 800a522:	2300      	movs	r3, #0
 800a524:	9309      	str	r3, [sp, #36]	; 0x24
 800a526:	2320      	movs	r3, #32
 800a528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a52c:	2330      	movs	r3, #48	; 0x30
 800a52e:	f04f 0901 	mov.w	r9, #1
 800a532:	f8cd 800c 	str.w	r8, [sp, #12]
 800a536:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a6dc <_svfiprintf_r+0x1ec>
 800a53a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a53e:	4623      	mov	r3, r4
 800a540:	469a      	mov	sl, r3
 800a542:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a546:	b10a      	cbz	r2, 800a54c <_svfiprintf_r+0x5c>
 800a548:	2a25      	cmp	r2, #37	; 0x25
 800a54a:	d1f9      	bne.n	800a540 <_svfiprintf_r+0x50>
 800a54c:	ebba 0b04 	subs.w	fp, sl, r4
 800a550:	d00b      	beq.n	800a56a <_svfiprintf_r+0x7a>
 800a552:	465b      	mov	r3, fp
 800a554:	4622      	mov	r2, r4
 800a556:	4629      	mov	r1, r5
 800a558:	4638      	mov	r0, r7
 800a55a:	f7ff ff6d 	bl	800a438 <__ssputs_r>
 800a55e:	3001      	adds	r0, #1
 800a560:	f000 80aa 	beq.w	800a6b8 <_svfiprintf_r+0x1c8>
 800a564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a566:	445a      	add	r2, fp
 800a568:	9209      	str	r2, [sp, #36]	; 0x24
 800a56a:	f89a 3000 	ldrb.w	r3, [sl]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f000 80a2 	beq.w	800a6b8 <_svfiprintf_r+0x1c8>
 800a574:	2300      	movs	r3, #0
 800a576:	f04f 32ff 	mov.w	r2, #4294967295
 800a57a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a57e:	f10a 0a01 	add.w	sl, sl, #1
 800a582:	9304      	str	r3, [sp, #16]
 800a584:	9307      	str	r3, [sp, #28]
 800a586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a58a:	931a      	str	r3, [sp, #104]	; 0x68
 800a58c:	4654      	mov	r4, sl
 800a58e:	2205      	movs	r2, #5
 800a590:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a594:	4851      	ldr	r0, [pc, #324]	; (800a6dc <_svfiprintf_r+0x1ec>)
 800a596:	f000 fb71 	bl	800ac7c <memchr>
 800a59a:	9a04      	ldr	r2, [sp, #16]
 800a59c:	b9d8      	cbnz	r0, 800a5d6 <_svfiprintf_r+0xe6>
 800a59e:	06d0      	lsls	r0, r2, #27
 800a5a0:	bf44      	itt	mi
 800a5a2:	2320      	movmi	r3, #32
 800a5a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5a8:	0711      	lsls	r1, r2, #28
 800a5aa:	bf44      	itt	mi
 800a5ac:	232b      	movmi	r3, #43	; 0x2b
 800a5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a5b8:	d015      	beq.n	800a5e6 <_svfiprintf_r+0xf6>
 800a5ba:	4654      	mov	r4, sl
 800a5bc:	2000      	movs	r0, #0
 800a5be:	f04f 0c0a 	mov.w	ip, #10
 800a5c2:	9a07      	ldr	r2, [sp, #28]
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5ca:	3b30      	subs	r3, #48	; 0x30
 800a5cc:	2b09      	cmp	r3, #9
 800a5ce:	d94e      	bls.n	800a66e <_svfiprintf_r+0x17e>
 800a5d0:	b1b0      	cbz	r0, 800a600 <_svfiprintf_r+0x110>
 800a5d2:	9207      	str	r2, [sp, #28]
 800a5d4:	e014      	b.n	800a600 <_svfiprintf_r+0x110>
 800a5d6:	eba0 0308 	sub.w	r3, r0, r8
 800a5da:	fa09 f303 	lsl.w	r3, r9, r3
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	46a2      	mov	sl, r4
 800a5e2:	9304      	str	r3, [sp, #16]
 800a5e4:	e7d2      	b.n	800a58c <_svfiprintf_r+0x9c>
 800a5e6:	9b03      	ldr	r3, [sp, #12]
 800a5e8:	1d19      	adds	r1, r3, #4
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	9103      	str	r1, [sp, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	bfbb      	ittet	lt
 800a5f2:	425b      	neglt	r3, r3
 800a5f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a5f8:	9307      	strge	r3, [sp, #28]
 800a5fa:	9307      	strlt	r3, [sp, #28]
 800a5fc:	bfb8      	it	lt
 800a5fe:	9204      	strlt	r2, [sp, #16]
 800a600:	7823      	ldrb	r3, [r4, #0]
 800a602:	2b2e      	cmp	r3, #46	; 0x2e
 800a604:	d10c      	bne.n	800a620 <_svfiprintf_r+0x130>
 800a606:	7863      	ldrb	r3, [r4, #1]
 800a608:	2b2a      	cmp	r3, #42	; 0x2a
 800a60a:	d135      	bne.n	800a678 <_svfiprintf_r+0x188>
 800a60c:	9b03      	ldr	r3, [sp, #12]
 800a60e:	3402      	adds	r4, #2
 800a610:	1d1a      	adds	r2, r3, #4
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	9203      	str	r2, [sp, #12]
 800a616:	2b00      	cmp	r3, #0
 800a618:	bfb8      	it	lt
 800a61a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a61e:	9305      	str	r3, [sp, #20]
 800a620:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a6e0 <_svfiprintf_r+0x1f0>
 800a624:	2203      	movs	r2, #3
 800a626:	4650      	mov	r0, sl
 800a628:	7821      	ldrb	r1, [r4, #0]
 800a62a:	f000 fb27 	bl	800ac7c <memchr>
 800a62e:	b140      	cbz	r0, 800a642 <_svfiprintf_r+0x152>
 800a630:	2340      	movs	r3, #64	; 0x40
 800a632:	eba0 000a 	sub.w	r0, r0, sl
 800a636:	fa03 f000 	lsl.w	r0, r3, r0
 800a63a:	9b04      	ldr	r3, [sp, #16]
 800a63c:	3401      	adds	r4, #1
 800a63e:	4303      	orrs	r3, r0
 800a640:	9304      	str	r3, [sp, #16]
 800a642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a646:	2206      	movs	r2, #6
 800a648:	4826      	ldr	r0, [pc, #152]	; (800a6e4 <_svfiprintf_r+0x1f4>)
 800a64a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a64e:	f000 fb15 	bl	800ac7c <memchr>
 800a652:	2800      	cmp	r0, #0
 800a654:	d038      	beq.n	800a6c8 <_svfiprintf_r+0x1d8>
 800a656:	4b24      	ldr	r3, [pc, #144]	; (800a6e8 <_svfiprintf_r+0x1f8>)
 800a658:	bb1b      	cbnz	r3, 800a6a2 <_svfiprintf_r+0x1b2>
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	3307      	adds	r3, #7
 800a65e:	f023 0307 	bic.w	r3, r3, #7
 800a662:	3308      	adds	r3, #8
 800a664:	9303      	str	r3, [sp, #12]
 800a666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a668:	4433      	add	r3, r6
 800a66a:	9309      	str	r3, [sp, #36]	; 0x24
 800a66c:	e767      	b.n	800a53e <_svfiprintf_r+0x4e>
 800a66e:	460c      	mov	r4, r1
 800a670:	2001      	movs	r0, #1
 800a672:	fb0c 3202 	mla	r2, ip, r2, r3
 800a676:	e7a5      	b.n	800a5c4 <_svfiprintf_r+0xd4>
 800a678:	2300      	movs	r3, #0
 800a67a:	f04f 0c0a 	mov.w	ip, #10
 800a67e:	4619      	mov	r1, r3
 800a680:	3401      	adds	r4, #1
 800a682:	9305      	str	r3, [sp, #20]
 800a684:	4620      	mov	r0, r4
 800a686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a68a:	3a30      	subs	r2, #48	; 0x30
 800a68c:	2a09      	cmp	r2, #9
 800a68e:	d903      	bls.n	800a698 <_svfiprintf_r+0x1a8>
 800a690:	2b00      	cmp	r3, #0
 800a692:	d0c5      	beq.n	800a620 <_svfiprintf_r+0x130>
 800a694:	9105      	str	r1, [sp, #20]
 800a696:	e7c3      	b.n	800a620 <_svfiprintf_r+0x130>
 800a698:	4604      	mov	r4, r0
 800a69a:	2301      	movs	r3, #1
 800a69c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6a0:	e7f0      	b.n	800a684 <_svfiprintf_r+0x194>
 800a6a2:	ab03      	add	r3, sp, #12
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	462a      	mov	r2, r5
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	4b10      	ldr	r3, [pc, #64]	; (800a6ec <_svfiprintf_r+0x1fc>)
 800a6ac:	a904      	add	r1, sp, #16
 800a6ae:	f3af 8000 	nop.w
 800a6b2:	1c42      	adds	r2, r0, #1
 800a6b4:	4606      	mov	r6, r0
 800a6b6:	d1d6      	bne.n	800a666 <_svfiprintf_r+0x176>
 800a6b8:	89ab      	ldrh	r3, [r5, #12]
 800a6ba:	065b      	lsls	r3, r3, #25
 800a6bc:	f53f af2c 	bmi.w	800a518 <_svfiprintf_r+0x28>
 800a6c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6c2:	b01d      	add	sp, #116	; 0x74
 800a6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c8:	ab03      	add	r3, sp, #12
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	462a      	mov	r2, r5
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <_svfiprintf_r+0x1fc>)
 800a6d2:	a904      	add	r1, sp, #16
 800a6d4:	f000 f87c 	bl	800a7d0 <_printf_i>
 800a6d8:	e7eb      	b.n	800a6b2 <_svfiprintf_r+0x1c2>
 800a6da:	bf00      	nop
 800a6dc:	0800bd8d 	.word	0x0800bd8d
 800a6e0:	0800bd93 	.word	0x0800bd93
 800a6e4:	0800bd97 	.word	0x0800bd97
 800a6e8:	00000000 	.word	0x00000000
 800a6ec:	0800a439 	.word	0x0800a439

0800a6f0 <_printf_common>:
 800a6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f4:	4616      	mov	r6, r2
 800a6f6:	4699      	mov	r9, r3
 800a6f8:	688a      	ldr	r2, [r1, #8]
 800a6fa:	690b      	ldr	r3, [r1, #16]
 800a6fc:	4607      	mov	r7, r0
 800a6fe:	4293      	cmp	r3, r2
 800a700:	bfb8      	it	lt
 800a702:	4613      	movlt	r3, r2
 800a704:	6033      	str	r3, [r6, #0]
 800a706:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a70a:	460c      	mov	r4, r1
 800a70c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a710:	b10a      	cbz	r2, 800a716 <_printf_common+0x26>
 800a712:	3301      	adds	r3, #1
 800a714:	6033      	str	r3, [r6, #0]
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	0699      	lsls	r1, r3, #26
 800a71a:	bf42      	ittt	mi
 800a71c:	6833      	ldrmi	r3, [r6, #0]
 800a71e:	3302      	addmi	r3, #2
 800a720:	6033      	strmi	r3, [r6, #0]
 800a722:	6825      	ldr	r5, [r4, #0]
 800a724:	f015 0506 	ands.w	r5, r5, #6
 800a728:	d106      	bne.n	800a738 <_printf_common+0x48>
 800a72a:	f104 0a19 	add.w	sl, r4, #25
 800a72e:	68e3      	ldr	r3, [r4, #12]
 800a730:	6832      	ldr	r2, [r6, #0]
 800a732:	1a9b      	subs	r3, r3, r2
 800a734:	42ab      	cmp	r3, r5
 800a736:	dc28      	bgt.n	800a78a <_printf_common+0x9a>
 800a738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a73c:	1e13      	subs	r3, r2, #0
 800a73e:	6822      	ldr	r2, [r4, #0]
 800a740:	bf18      	it	ne
 800a742:	2301      	movne	r3, #1
 800a744:	0692      	lsls	r2, r2, #26
 800a746:	d42d      	bmi.n	800a7a4 <_printf_common+0xb4>
 800a748:	4649      	mov	r1, r9
 800a74a:	4638      	mov	r0, r7
 800a74c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a750:	47c0      	blx	r8
 800a752:	3001      	adds	r0, #1
 800a754:	d020      	beq.n	800a798 <_printf_common+0xa8>
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	68e5      	ldr	r5, [r4, #12]
 800a75a:	f003 0306 	and.w	r3, r3, #6
 800a75e:	2b04      	cmp	r3, #4
 800a760:	bf18      	it	ne
 800a762:	2500      	movne	r5, #0
 800a764:	6832      	ldr	r2, [r6, #0]
 800a766:	f04f 0600 	mov.w	r6, #0
 800a76a:	68a3      	ldr	r3, [r4, #8]
 800a76c:	bf08      	it	eq
 800a76e:	1aad      	subeq	r5, r5, r2
 800a770:	6922      	ldr	r2, [r4, #16]
 800a772:	bf08      	it	eq
 800a774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a778:	4293      	cmp	r3, r2
 800a77a:	bfc4      	itt	gt
 800a77c:	1a9b      	subgt	r3, r3, r2
 800a77e:	18ed      	addgt	r5, r5, r3
 800a780:	341a      	adds	r4, #26
 800a782:	42b5      	cmp	r5, r6
 800a784:	d11a      	bne.n	800a7bc <_printf_common+0xcc>
 800a786:	2000      	movs	r0, #0
 800a788:	e008      	b.n	800a79c <_printf_common+0xac>
 800a78a:	2301      	movs	r3, #1
 800a78c:	4652      	mov	r2, sl
 800a78e:	4649      	mov	r1, r9
 800a790:	4638      	mov	r0, r7
 800a792:	47c0      	blx	r8
 800a794:	3001      	adds	r0, #1
 800a796:	d103      	bne.n	800a7a0 <_printf_common+0xb0>
 800a798:	f04f 30ff 	mov.w	r0, #4294967295
 800a79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a0:	3501      	adds	r5, #1
 800a7a2:	e7c4      	b.n	800a72e <_printf_common+0x3e>
 800a7a4:	2030      	movs	r0, #48	; 0x30
 800a7a6:	18e1      	adds	r1, r4, r3
 800a7a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7b2:	4422      	add	r2, r4
 800a7b4:	3302      	adds	r3, #2
 800a7b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7ba:	e7c5      	b.n	800a748 <_printf_common+0x58>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	4622      	mov	r2, r4
 800a7c0:	4649      	mov	r1, r9
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	47c0      	blx	r8
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	d0e6      	beq.n	800a798 <_printf_common+0xa8>
 800a7ca:	3601      	adds	r6, #1
 800a7cc:	e7d9      	b.n	800a782 <_printf_common+0x92>
	...

0800a7d0 <_printf_i>:
 800a7d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d4:	7e0f      	ldrb	r7, [r1, #24]
 800a7d6:	4691      	mov	r9, r2
 800a7d8:	2f78      	cmp	r7, #120	; 0x78
 800a7da:	4680      	mov	r8, r0
 800a7dc:	460c      	mov	r4, r1
 800a7de:	469a      	mov	sl, r3
 800a7e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7e6:	d807      	bhi.n	800a7f8 <_printf_i+0x28>
 800a7e8:	2f62      	cmp	r7, #98	; 0x62
 800a7ea:	d80a      	bhi.n	800a802 <_printf_i+0x32>
 800a7ec:	2f00      	cmp	r7, #0
 800a7ee:	f000 80d9 	beq.w	800a9a4 <_printf_i+0x1d4>
 800a7f2:	2f58      	cmp	r7, #88	; 0x58
 800a7f4:	f000 80a4 	beq.w	800a940 <_printf_i+0x170>
 800a7f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a800:	e03a      	b.n	800a878 <_printf_i+0xa8>
 800a802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a806:	2b15      	cmp	r3, #21
 800a808:	d8f6      	bhi.n	800a7f8 <_printf_i+0x28>
 800a80a:	a101      	add	r1, pc, #4	; (adr r1, 800a810 <_printf_i+0x40>)
 800a80c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a810:	0800a869 	.word	0x0800a869
 800a814:	0800a87d 	.word	0x0800a87d
 800a818:	0800a7f9 	.word	0x0800a7f9
 800a81c:	0800a7f9 	.word	0x0800a7f9
 800a820:	0800a7f9 	.word	0x0800a7f9
 800a824:	0800a7f9 	.word	0x0800a7f9
 800a828:	0800a87d 	.word	0x0800a87d
 800a82c:	0800a7f9 	.word	0x0800a7f9
 800a830:	0800a7f9 	.word	0x0800a7f9
 800a834:	0800a7f9 	.word	0x0800a7f9
 800a838:	0800a7f9 	.word	0x0800a7f9
 800a83c:	0800a98b 	.word	0x0800a98b
 800a840:	0800a8ad 	.word	0x0800a8ad
 800a844:	0800a96d 	.word	0x0800a96d
 800a848:	0800a7f9 	.word	0x0800a7f9
 800a84c:	0800a7f9 	.word	0x0800a7f9
 800a850:	0800a9ad 	.word	0x0800a9ad
 800a854:	0800a7f9 	.word	0x0800a7f9
 800a858:	0800a8ad 	.word	0x0800a8ad
 800a85c:	0800a7f9 	.word	0x0800a7f9
 800a860:	0800a7f9 	.word	0x0800a7f9
 800a864:	0800a975 	.word	0x0800a975
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	1d1a      	adds	r2, r3, #4
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	602a      	str	r2, [r5, #0]
 800a870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a878:	2301      	movs	r3, #1
 800a87a:	e0a4      	b.n	800a9c6 <_printf_i+0x1f6>
 800a87c:	6820      	ldr	r0, [r4, #0]
 800a87e:	6829      	ldr	r1, [r5, #0]
 800a880:	0606      	lsls	r6, r0, #24
 800a882:	f101 0304 	add.w	r3, r1, #4
 800a886:	d50a      	bpl.n	800a89e <_printf_i+0xce>
 800a888:	680e      	ldr	r6, [r1, #0]
 800a88a:	602b      	str	r3, [r5, #0]
 800a88c:	2e00      	cmp	r6, #0
 800a88e:	da03      	bge.n	800a898 <_printf_i+0xc8>
 800a890:	232d      	movs	r3, #45	; 0x2d
 800a892:	4276      	negs	r6, r6
 800a894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a898:	230a      	movs	r3, #10
 800a89a:	485e      	ldr	r0, [pc, #376]	; (800aa14 <_printf_i+0x244>)
 800a89c:	e019      	b.n	800a8d2 <_printf_i+0x102>
 800a89e:	680e      	ldr	r6, [r1, #0]
 800a8a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a8a4:	602b      	str	r3, [r5, #0]
 800a8a6:	bf18      	it	ne
 800a8a8:	b236      	sxthne	r6, r6
 800a8aa:	e7ef      	b.n	800a88c <_printf_i+0xbc>
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	6820      	ldr	r0, [r4, #0]
 800a8b0:	1d19      	adds	r1, r3, #4
 800a8b2:	6029      	str	r1, [r5, #0]
 800a8b4:	0601      	lsls	r1, r0, #24
 800a8b6:	d501      	bpl.n	800a8bc <_printf_i+0xec>
 800a8b8:	681e      	ldr	r6, [r3, #0]
 800a8ba:	e002      	b.n	800a8c2 <_printf_i+0xf2>
 800a8bc:	0646      	lsls	r6, r0, #25
 800a8be:	d5fb      	bpl.n	800a8b8 <_printf_i+0xe8>
 800a8c0:	881e      	ldrh	r6, [r3, #0]
 800a8c2:	2f6f      	cmp	r7, #111	; 0x6f
 800a8c4:	bf0c      	ite	eq
 800a8c6:	2308      	moveq	r3, #8
 800a8c8:	230a      	movne	r3, #10
 800a8ca:	4852      	ldr	r0, [pc, #328]	; (800aa14 <_printf_i+0x244>)
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8d2:	6865      	ldr	r5, [r4, #4]
 800a8d4:	2d00      	cmp	r5, #0
 800a8d6:	bfa8      	it	ge
 800a8d8:	6821      	ldrge	r1, [r4, #0]
 800a8da:	60a5      	str	r5, [r4, #8]
 800a8dc:	bfa4      	itt	ge
 800a8de:	f021 0104 	bicge.w	r1, r1, #4
 800a8e2:	6021      	strge	r1, [r4, #0]
 800a8e4:	b90e      	cbnz	r6, 800a8ea <_printf_i+0x11a>
 800a8e6:	2d00      	cmp	r5, #0
 800a8e8:	d04d      	beq.n	800a986 <_printf_i+0x1b6>
 800a8ea:	4615      	mov	r5, r2
 800a8ec:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8f0:	fb03 6711 	mls	r7, r3, r1, r6
 800a8f4:	5dc7      	ldrb	r7, [r0, r7]
 800a8f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8fa:	4637      	mov	r7, r6
 800a8fc:	42bb      	cmp	r3, r7
 800a8fe:	460e      	mov	r6, r1
 800a900:	d9f4      	bls.n	800a8ec <_printf_i+0x11c>
 800a902:	2b08      	cmp	r3, #8
 800a904:	d10b      	bne.n	800a91e <_printf_i+0x14e>
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	07de      	lsls	r6, r3, #31
 800a90a:	d508      	bpl.n	800a91e <_printf_i+0x14e>
 800a90c:	6923      	ldr	r3, [r4, #16]
 800a90e:	6861      	ldr	r1, [r4, #4]
 800a910:	4299      	cmp	r1, r3
 800a912:	bfde      	ittt	le
 800a914:	2330      	movle	r3, #48	; 0x30
 800a916:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a91a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a91e:	1b52      	subs	r2, r2, r5
 800a920:	6122      	str	r2, [r4, #16]
 800a922:	464b      	mov	r3, r9
 800a924:	4621      	mov	r1, r4
 800a926:	4640      	mov	r0, r8
 800a928:	f8cd a000 	str.w	sl, [sp]
 800a92c:	aa03      	add	r2, sp, #12
 800a92e:	f7ff fedf 	bl	800a6f0 <_printf_common>
 800a932:	3001      	adds	r0, #1
 800a934:	d14c      	bne.n	800a9d0 <_printf_i+0x200>
 800a936:	f04f 30ff 	mov.w	r0, #4294967295
 800a93a:	b004      	add	sp, #16
 800a93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a940:	4834      	ldr	r0, [pc, #208]	; (800aa14 <_printf_i+0x244>)
 800a942:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a946:	6829      	ldr	r1, [r5, #0]
 800a948:	6823      	ldr	r3, [r4, #0]
 800a94a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a94e:	6029      	str	r1, [r5, #0]
 800a950:	061d      	lsls	r5, r3, #24
 800a952:	d514      	bpl.n	800a97e <_printf_i+0x1ae>
 800a954:	07df      	lsls	r7, r3, #31
 800a956:	bf44      	itt	mi
 800a958:	f043 0320 	orrmi.w	r3, r3, #32
 800a95c:	6023      	strmi	r3, [r4, #0]
 800a95e:	b91e      	cbnz	r6, 800a968 <_printf_i+0x198>
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	f023 0320 	bic.w	r3, r3, #32
 800a966:	6023      	str	r3, [r4, #0]
 800a968:	2310      	movs	r3, #16
 800a96a:	e7af      	b.n	800a8cc <_printf_i+0xfc>
 800a96c:	6823      	ldr	r3, [r4, #0]
 800a96e:	f043 0320 	orr.w	r3, r3, #32
 800a972:	6023      	str	r3, [r4, #0]
 800a974:	2378      	movs	r3, #120	; 0x78
 800a976:	4828      	ldr	r0, [pc, #160]	; (800aa18 <_printf_i+0x248>)
 800a978:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a97c:	e7e3      	b.n	800a946 <_printf_i+0x176>
 800a97e:	0659      	lsls	r1, r3, #25
 800a980:	bf48      	it	mi
 800a982:	b2b6      	uxthmi	r6, r6
 800a984:	e7e6      	b.n	800a954 <_printf_i+0x184>
 800a986:	4615      	mov	r5, r2
 800a988:	e7bb      	b.n	800a902 <_printf_i+0x132>
 800a98a:	682b      	ldr	r3, [r5, #0]
 800a98c:	6826      	ldr	r6, [r4, #0]
 800a98e:	1d18      	adds	r0, r3, #4
 800a990:	6961      	ldr	r1, [r4, #20]
 800a992:	6028      	str	r0, [r5, #0]
 800a994:	0635      	lsls	r5, r6, #24
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	d501      	bpl.n	800a99e <_printf_i+0x1ce>
 800a99a:	6019      	str	r1, [r3, #0]
 800a99c:	e002      	b.n	800a9a4 <_printf_i+0x1d4>
 800a99e:	0670      	lsls	r0, r6, #25
 800a9a0:	d5fb      	bpl.n	800a99a <_printf_i+0x1ca>
 800a9a2:	8019      	strh	r1, [r3, #0]
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	4615      	mov	r5, r2
 800a9a8:	6123      	str	r3, [r4, #16]
 800a9aa:	e7ba      	b.n	800a922 <_printf_i+0x152>
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	1d1a      	adds	r2, r3, #4
 800a9b2:	602a      	str	r2, [r5, #0]
 800a9b4:	681d      	ldr	r5, [r3, #0]
 800a9b6:	6862      	ldr	r2, [r4, #4]
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f000 f95f 	bl	800ac7c <memchr>
 800a9be:	b108      	cbz	r0, 800a9c4 <_printf_i+0x1f4>
 800a9c0:	1b40      	subs	r0, r0, r5
 800a9c2:	6060      	str	r0, [r4, #4]
 800a9c4:	6863      	ldr	r3, [r4, #4]
 800a9c6:	6123      	str	r3, [r4, #16]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ce:	e7a8      	b.n	800a922 <_printf_i+0x152>
 800a9d0:	462a      	mov	r2, r5
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	4640      	mov	r0, r8
 800a9d6:	6923      	ldr	r3, [r4, #16]
 800a9d8:	47d0      	blx	sl
 800a9da:	3001      	adds	r0, #1
 800a9dc:	d0ab      	beq.n	800a936 <_printf_i+0x166>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	079b      	lsls	r3, r3, #30
 800a9e2:	d413      	bmi.n	800aa0c <_printf_i+0x23c>
 800a9e4:	68e0      	ldr	r0, [r4, #12]
 800a9e6:	9b03      	ldr	r3, [sp, #12]
 800a9e8:	4298      	cmp	r0, r3
 800a9ea:	bfb8      	it	lt
 800a9ec:	4618      	movlt	r0, r3
 800a9ee:	e7a4      	b.n	800a93a <_printf_i+0x16a>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	4632      	mov	r2, r6
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	4640      	mov	r0, r8
 800a9f8:	47d0      	blx	sl
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d09b      	beq.n	800a936 <_printf_i+0x166>
 800a9fe:	3501      	adds	r5, #1
 800aa00:	68e3      	ldr	r3, [r4, #12]
 800aa02:	9903      	ldr	r1, [sp, #12]
 800aa04:	1a5b      	subs	r3, r3, r1
 800aa06:	42ab      	cmp	r3, r5
 800aa08:	dcf2      	bgt.n	800a9f0 <_printf_i+0x220>
 800aa0a:	e7eb      	b.n	800a9e4 <_printf_i+0x214>
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	f104 0619 	add.w	r6, r4, #25
 800aa12:	e7f5      	b.n	800aa00 <_printf_i+0x230>
 800aa14:	0800bd9e 	.word	0x0800bd9e
 800aa18:	0800bdaf 	.word	0x0800bdaf

0800aa1c <sniprintf>:
 800aa1c:	b40c      	push	{r2, r3}
 800aa1e:	b530      	push	{r4, r5, lr}
 800aa20:	4b17      	ldr	r3, [pc, #92]	; (800aa80 <sniprintf+0x64>)
 800aa22:	1e0c      	subs	r4, r1, #0
 800aa24:	681d      	ldr	r5, [r3, #0]
 800aa26:	b09d      	sub	sp, #116	; 0x74
 800aa28:	da08      	bge.n	800aa3c <sniprintf+0x20>
 800aa2a:	238b      	movs	r3, #139	; 0x8b
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa30:	602b      	str	r3, [r5, #0]
 800aa32:	b01d      	add	sp, #116	; 0x74
 800aa34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa38:	b002      	add	sp, #8
 800aa3a:	4770      	bx	lr
 800aa3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aa40:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa44:	bf0c      	ite	eq
 800aa46:	4623      	moveq	r3, r4
 800aa48:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa4c:	9304      	str	r3, [sp, #16]
 800aa4e:	9307      	str	r3, [sp, #28]
 800aa50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa54:	9002      	str	r0, [sp, #8]
 800aa56:	9006      	str	r0, [sp, #24]
 800aa58:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	ab21      	add	r3, sp, #132	; 0x84
 800aa60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa62:	a902      	add	r1, sp, #8
 800aa64:	9301      	str	r3, [sp, #4]
 800aa66:	f7ff fd43 	bl	800a4f0 <_svfiprintf_r>
 800aa6a:	1c43      	adds	r3, r0, #1
 800aa6c:	bfbc      	itt	lt
 800aa6e:	238b      	movlt	r3, #139	; 0x8b
 800aa70:	602b      	strlt	r3, [r5, #0]
 800aa72:	2c00      	cmp	r4, #0
 800aa74:	d0dd      	beq.n	800aa32 <sniprintf+0x16>
 800aa76:	2200      	movs	r2, #0
 800aa78:	9b02      	ldr	r3, [sp, #8]
 800aa7a:	701a      	strb	r2, [r3, #0]
 800aa7c:	e7d9      	b.n	800aa32 <sniprintf+0x16>
 800aa7e:	bf00      	nop
 800aa80:	200000e0 	.word	0x200000e0

0800aa84 <siscanf>:
 800aa84:	b40e      	push	{r1, r2, r3}
 800aa86:	f44f 7201 	mov.w	r2, #516	; 0x204
 800aa8a:	b530      	push	{r4, r5, lr}
 800aa8c:	b09c      	sub	sp, #112	; 0x70
 800aa8e:	ac1f      	add	r4, sp, #124	; 0x7c
 800aa90:	f854 5b04 	ldr.w	r5, [r4], #4
 800aa94:	f8ad 2014 	strh.w	r2, [sp, #20]
 800aa98:	9002      	str	r0, [sp, #8]
 800aa9a:	9006      	str	r0, [sp, #24]
 800aa9c:	f7f5 fb56 	bl	800014c <strlen>
 800aaa0:	4b0b      	ldr	r3, [pc, #44]	; (800aad0 <siscanf+0x4c>)
 800aaa2:	9003      	str	r0, [sp, #12]
 800aaa4:	930b      	str	r3, [sp, #44]	; 0x2c
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aaaa:	9314      	str	r3, [sp, #80]	; 0x50
 800aaac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aab0:	9007      	str	r0, [sp, #28]
 800aab2:	4808      	ldr	r0, [pc, #32]	; (800aad4 <siscanf+0x50>)
 800aab4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aab8:	462a      	mov	r2, r5
 800aaba:	4623      	mov	r3, r4
 800aabc:	a902      	add	r1, sp, #8
 800aabe:	6800      	ldr	r0, [r0, #0]
 800aac0:	9401      	str	r4, [sp, #4]
 800aac2:	f000 f98d 	bl	800ade0 <__ssvfiscanf_r>
 800aac6:	b01c      	add	sp, #112	; 0x70
 800aac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aacc:	b003      	add	sp, #12
 800aace:	4770      	bx	lr
 800aad0:	080093b1 	.word	0x080093b1
 800aad4:	200000e0 	.word	0x200000e0

0800aad8 <strcpy>:
 800aad8:	4603      	mov	r3, r0
 800aada:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aade:	f803 2b01 	strb.w	r2, [r3], #1
 800aae2:	2a00      	cmp	r2, #0
 800aae4:	d1f9      	bne.n	800aada <strcpy+0x2>
 800aae6:	4770      	bx	lr

0800aae8 <strncmp>:
 800aae8:	4603      	mov	r3, r0
 800aaea:	b510      	push	{r4, lr}
 800aaec:	b172      	cbz	r2, 800ab0c <strncmp+0x24>
 800aaee:	3901      	subs	r1, #1
 800aaf0:	1884      	adds	r4, r0, r2
 800aaf2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aaf6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aafa:	4290      	cmp	r0, r2
 800aafc:	d101      	bne.n	800ab02 <strncmp+0x1a>
 800aafe:	42a3      	cmp	r3, r4
 800ab00:	d101      	bne.n	800ab06 <strncmp+0x1e>
 800ab02:	1a80      	subs	r0, r0, r2
 800ab04:	bd10      	pop	{r4, pc}
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d1f3      	bne.n	800aaf2 <strncmp+0xa>
 800ab0a:	e7fa      	b.n	800ab02 <strncmp+0x1a>
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	e7f9      	b.n	800ab04 <strncmp+0x1c>

0800ab10 <__tzcalc_limits>:
 800ab10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	4605      	mov	r5, r0
 800ab16:	f7ff fc65 	bl	800a3e4 <__gettzinfo>
 800ab1a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800ab1e:	429d      	cmp	r5, r3
 800ab20:	f340 809a 	ble.w	800ac58 <__tzcalc_limits+0x148>
 800ab24:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800ab28:	18ac      	adds	r4, r5, r2
 800ab2a:	f240 126d 	movw	r2, #365	; 0x16d
 800ab2e:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800ab32:	10a4      	asrs	r4, r4, #2
 800ab34:	fb02 4403 	mla	r4, r2, r3, r4
 800ab38:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800ab3c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800ab40:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab44:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800ab48:	441c      	add	r4, r3
 800ab4a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ab4e:	186a      	adds	r2, r5, r1
 800ab50:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab54:	fb95 fcf3 	sdiv	ip, r5, r3
 800ab58:	4414      	add	r4, r2
 800ab5a:	2264      	movs	r2, #100	; 0x64
 800ab5c:	fb03 5c1c 	mls	ip, r3, ip, r5
 800ab60:	fb95 f7f2 	sdiv	r7, r5, r2
 800ab64:	fabc f68c 	clz	r6, ip
 800ab68:	4601      	mov	r1, r0
 800ab6a:	fb02 5717 	mls	r7, r2, r7, r5
 800ab6e:	6045      	str	r5, [r0, #4]
 800ab70:	0976      	lsrs	r6, r6, #5
 800ab72:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800ab76:	f005 0203 	and.w	r2, r5, #3
 800ab7a:	7a0d      	ldrb	r5, [r1, #8]
 800ab7c:	694b      	ldr	r3, [r1, #20]
 800ab7e:	2d4a      	cmp	r5, #74	; 0x4a
 800ab80:	d12d      	bne.n	800abde <__tzcalc_limits+0xce>
 800ab82:	eb04 0e03 	add.w	lr, r4, r3
 800ab86:	b902      	cbnz	r2, 800ab8a <__tzcalc_limits+0x7a>
 800ab88:	b917      	cbnz	r7, 800ab90 <__tzcalc_limits+0x80>
 800ab8a:	f1bc 0f00 	cmp.w	ip, #0
 800ab8e:	d124      	bne.n	800abda <__tzcalc_limits+0xca>
 800ab90:	2b3b      	cmp	r3, #59	; 0x3b
 800ab92:	bfd4      	ite	le
 800ab94:	2300      	movle	r3, #0
 800ab96:	2301      	movgt	r3, #1
 800ab98:	4473      	add	r3, lr
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	698d      	ldr	r5, [r1, #24]
 800ab9e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800ac5c <__tzcalc_limits+0x14c>
 800aba2:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800aba6:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800abaa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800abac:	18ed      	adds	r5, r5, r3
 800abae:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800abb2:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800abb6:	3128      	adds	r1, #40	; 0x28
 800abb8:	458b      	cmp	fp, r1
 800abba:	d1de      	bne.n	800ab7a <__tzcalc_limits+0x6a>
 800abbc:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800abc0:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800abc4:	428c      	cmp	r4, r1
 800abc6:	eb72 0303 	sbcs.w	r3, r2, r3
 800abca:	bfb4      	ite	lt
 800abcc:	2301      	movlt	r3, #1
 800abce:	2300      	movge	r3, #0
 800abd0:	6003      	str	r3, [r0, #0]
 800abd2:	2001      	movs	r0, #1
 800abd4:	b003      	add	sp, #12
 800abd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abda:	2300      	movs	r3, #0
 800abdc:	e7dc      	b.n	800ab98 <__tzcalc_limits+0x88>
 800abde:	2d44      	cmp	r5, #68	; 0x44
 800abe0:	d101      	bne.n	800abe6 <__tzcalc_limits+0xd6>
 800abe2:	4423      	add	r3, r4
 800abe4:	e7da      	b.n	800ab9c <__tzcalc_limits+0x8c>
 800abe6:	bb8a      	cbnz	r2, 800ac4c <__tzcalc_limits+0x13c>
 800abe8:	2f00      	cmp	r7, #0
 800abea:	bf0c      	ite	eq
 800abec:	4635      	moveq	r5, r6
 800abee:	2501      	movne	r5, #1
 800abf0:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800abf4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800abf8:	f04f 0800 	mov.w	r8, #0
 800abfc:	f8cd e004 	str.w	lr, [sp, #4]
 800ac00:	46a6      	mov	lr, r4
 800ac02:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800ac60 <__tzcalc_limits+0x150>
 800ac06:	fb0a 9505 	mla	r5, sl, r5, r9
 800ac0a:	3d04      	subs	r5, #4
 800ac0c:	f8dd a004 	ldr.w	sl, [sp, #4]
 800ac10:	f108 0801 	add.w	r8, r8, #1
 800ac14:	45c2      	cmp	sl, r8
 800ac16:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800ac1a:	dc19      	bgt.n	800ac50 <__tzcalc_limits+0x140>
 800ac1c:	f04f 0807 	mov.w	r8, #7
 800ac20:	f10e 0504 	add.w	r5, lr, #4
 800ac24:	fb95 f8f8 	sdiv	r8, r5, r8
 800ac28:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800ac2c:	eba5 0808 	sub.w	r8, r5, r8
 800ac30:	ebb3 0808 	subs.w	r8, r3, r8
 800ac34:	690b      	ldr	r3, [r1, #16]
 800ac36:	bf48      	it	mi
 800ac38:	f108 0807 	addmi.w	r8, r8, #7
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ac42:	4443      	add	r3, r8
 800ac44:	454b      	cmp	r3, r9
 800ac46:	da05      	bge.n	800ac54 <__tzcalc_limits+0x144>
 800ac48:	4473      	add	r3, lr
 800ac4a:	e7a7      	b.n	800ab9c <__tzcalc_limits+0x8c>
 800ac4c:	4635      	mov	r5, r6
 800ac4e:	e7cf      	b.n	800abf0 <__tzcalc_limits+0xe0>
 800ac50:	44ce      	add	lr, r9
 800ac52:	e7db      	b.n	800ac0c <__tzcalc_limits+0xfc>
 800ac54:	3b07      	subs	r3, #7
 800ac56:	e7f5      	b.n	800ac44 <__tzcalc_limits+0x134>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	e7bb      	b.n	800abd4 <__tzcalc_limits+0xc4>
 800ac5c:	00015180 	.word	0x00015180
 800ac60:	0800bdc0 	.word	0x0800bdc0

0800ac64 <__env_lock>:
 800ac64:	4801      	ldr	r0, [pc, #4]	; (800ac6c <__env_lock+0x8>)
 800ac66:	f7fe ba8c 	b.w	8009182 <__retarget_lock_acquire_recursive>
 800ac6a:	bf00      	nop
 800ac6c:	20000660 	.word	0x20000660

0800ac70 <__env_unlock>:
 800ac70:	4801      	ldr	r0, [pc, #4]	; (800ac78 <__env_unlock+0x8>)
 800ac72:	f7fe ba88 	b.w	8009186 <__retarget_lock_release_recursive>
 800ac76:	bf00      	nop
 800ac78:	20000660 	.word	0x20000660

0800ac7c <memchr>:
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	b510      	push	{r4, lr}
 800ac80:	b2c9      	uxtb	r1, r1
 800ac82:	4402      	add	r2, r0
 800ac84:	4293      	cmp	r3, r2
 800ac86:	4618      	mov	r0, r3
 800ac88:	d101      	bne.n	800ac8e <memchr+0x12>
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	e003      	b.n	800ac96 <memchr+0x1a>
 800ac8e:	7804      	ldrb	r4, [r0, #0]
 800ac90:	3301      	adds	r3, #1
 800ac92:	428c      	cmp	r4, r1
 800ac94:	d1f6      	bne.n	800ac84 <memchr+0x8>
 800ac96:	bd10      	pop	{r4, pc}

0800ac98 <memmove>:
 800ac98:	4288      	cmp	r0, r1
 800ac9a:	b510      	push	{r4, lr}
 800ac9c:	eb01 0402 	add.w	r4, r1, r2
 800aca0:	d902      	bls.n	800aca8 <memmove+0x10>
 800aca2:	4284      	cmp	r4, r0
 800aca4:	4623      	mov	r3, r4
 800aca6:	d807      	bhi.n	800acb8 <memmove+0x20>
 800aca8:	1e43      	subs	r3, r0, #1
 800acaa:	42a1      	cmp	r1, r4
 800acac:	d008      	beq.n	800acc0 <memmove+0x28>
 800acae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acb6:	e7f8      	b.n	800acaa <memmove+0x12>
 800acb8:	4601      	mov	r1, r0
 800acba:	4402      	add	r2, r0
 800acbc:	428a      	cmp	r2, r1
 800acbe:	d100      	bne.n	800acc2 <memmove+0x2a>
 800acc0:	bd10      	pop	{r4, pc}
 800acc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acca:	e7f7      	b.n	800acbc <memmove+0x24>

0800accc <_realloc_r>:
 800accc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd0:	4680      	mov	r8, r0
 800acd2:	4614      	mov	r4, r2
 800acd4:	460e      	mov	r6, r1
 800acd6:	b921      	cbnz	r1, 800ace2 <_realloc_r+0x16>
 800acd8:	4611      	mov	r1, r2
 800acda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acde:	f7fe bac3 	b.w	8009268 <_malloc_r>
 800ace2:	b92a      	cbnz	r2, 800acf0 <_realloc_r+0x24>
 800ace4:	f7fe fa58 	bl	8009198 <_free_r>
 800ace8:	4625      	mov	r5, r4
 800acea:	4628      	mov	r0, r5
 800acec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acf0:	f000 fbb2 	bl	800b458 <_malloc_usable_size_r>
 800acf4:	4284      	cmp	r4, r0
 800acf6:	4607      	mov	r7, r0
 800acf8:	d802      	bhi.n	800ad00 <_realloc_r+0x34>
 800acfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acfe:	d812      	bhi.n	800ad26 <_realloc_r+0x5a>
 800ad00:	4621      	mov	r1, r4
 800ad02:	4640      	mov	r0, r8
 800ad04:	f7fe fab0 	bl	8009268 <_malloc_r>
 800ad08:	4605      	mov	r5, r0
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d0ed      	beq.n	800acea <_realloc_r+0x1e>
 800ad0e:	42bc      	cmp	r4, r7
 800ad10:	4622      	mov	r2, r4
 800ad12:	4631      	mov	r1, r6
 800ad14:	bf28      	it	cs
 800ad16:	463a      	movcs	r2, r7
 800ad18:	f7ff fb74 	bl	800a404 <memcpy>
 800ad1c:	4631      	mov	r1, r6
 800ad1e:	4640      	mov	r0, r8
 800ad20:	f7fe fa3a 	bl	8009198 <_free_r>
 800ad24:	e7e1      	b.n	800acea <_realloc_r+0x1e>
 800ad26:	4635      	mov	r5, r6
 800ad28:	e7df      	b.n	800acea <_realloc_r+0x1e>

0800ad2a <_sungetc_r>:
 800ad2a:	b538      	push	{r3, r4, r5, lr}
 800ad2c:	1c4b      	adds	r3, r1, #1
 800ad2e:	4614      	mov	r4, r2
 800ad30:	d103      	bne.n	800ad3a <_sungetc_r+0x10>
 800ad32:	f04f 35ff 	mov.w	r5, #4294967295
 800ad36:	4628      	mov	r0, r5
 800ad38:	bd38      	pop	{r3, r4, r5, pc}
 800ad3a:	8993      	ldrh	r3, [r2, #12]
 800ad3c:	b2cd      	uxtb	r5, r1
 800ad3e:	f023 0320 	bic.w	r3, r3, #32
 800ad42:	8193      	strh	r3, [r2, #12]
 800ad44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad46:	6852      	ldr	r2, [r2, #4]
 800ad48:	b18b      	cbz	r3, 800ad6e <_sungetc_r+0x44>
 800ad4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	dd08      	ble.n	800ad62 <_sungetc_r+0x38>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	1e5a      	subs	r2, r3, #1
 800ad54:	6022      	str	r2, [r4, #0]
 800ad56:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ad5a:	6863      	ldr	r3, [r4, #4]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	6063      	str	r3, [r4, #4]
 800ad60:	e7e9      	b.n	800ad36 <_sungetc_r+0xc>
 800ad62:	4621      	mov	r1, r4
 800ad64:	f000 fb40 	bl	800b3e8 <__submore>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d0f1      	beq.n	800ad50 <_sungetc_r+0x26>
 800ad6c:	e7e1      	b.n	800ad32 <_sungetc_r+0x8>
 800ad6e:	6921      	ldr	r1, [r4, #16]
 800ad70:	6823      	ldr	r3, [r4, #0]
 800ad72:	b151      	cbz	r1, 800ad8a <_sungetc_r+0x60>
 800ad74:	4299      	cmp	r1, r3
 800ad76:	d208      	bcs.n	800ad8a <_sungetc_r+0x60>
 800ad78:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ad7c:	42a9      	cmp	r1, r5
 800ad7e:	d104      	bne.n	800ad8a <_sungetc_r+0x60>
 800ad80:	3b01      	subs	r3, #1
 800ad82:	3201      	adds	r2, #1
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	6062      	str	r2, [r4, #4]
 800ad88:	e7d5      	b.n	800ad36 <_sungetc_r+0xc>
 800ad8a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ad8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad92:	6363      	str	r3, [r4, #52]	; 0x34
 800ad94:	2303      	movs	r3, #3
 800ad96:	63a3      	str	r3, [r4, #56]	; 0x38
 800ad98:	4623      	mov	r3, r4
 800ad9a:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ad9e:	6023      	str	r3, [r4, #0]
 800ada0:	2301      	movs	r3, #1
 800ada2:	e7dc      	b.n	800ad5e <_sungetc_r+0x34>

0800ada4 <__ssrefill_r>:
 800ada4:	b510      	push	{r4, lr}
 800ada6:	460c      	mov	r4, r1
 800ada8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800adaa:	b169      	cbz	r1, 800adc8 <__ssrefill_r+0x24>
 800adac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adb0:	4299      	cmp	r1, r3
 800adb2:	d001      	beq.n	800adb8 <__ssrefill_r+0x14>
 800adb4:	f7fe f9f0 	bl	8009198 <_free_r>
 800adb8:	2000      	movs	r0, #0
 800adba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adbc:	6360      	str	r0, [r4, #52]	; 0x34
 800adbe:	6063      	str	r3, [r4, #4]
 800adc0:	b113      	cbz	r3, 800adc8 <__ssrefill_r+0x24>
 800adc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd10      	pop	{r4, pc}
 800adc8:	6923      	ldr	r3, [r4, #16]
 800adca:	f04f 30ff 	mov.w	r0, #4294967295
 800adce:	6023      	str	r3, [r4, #0]
 800add0:	2300      	movs	r3, #0
 800add2:	6063      	str	r3, [r4, #4]
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	f043 0320 	orr.w	r3, r3, #32
 800adda:	81a3      	strh	r3, [r4, #12]
 800addc:	e7f3      	b.n	800adc6 <__ssrefill_r+0x22>
	...

0800ade0 <__ssvfiscanf_r>:
 800ade0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade4:	460c      	mov	r4, r1
 800ade6:	2100      	movs	r1, #0
 800ade8:	4606      	mov	r6, r0
 800adea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800adee:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800adf2:	49a7      	ldr	r1, [pc, #668]	; (800b090 <__ssvfiscanf_r+0x2b0>)
 800adf4:	f10d 0804 	add.w	r8, sp, #4
 800adf8:	91a0      	str	r1, [sp, #640]	; 0x280
 800adfa:	49a6      	ldr	r1, [pc, #664]	; (800b094 <__ssvfiscanf_r+0x2b4>)
 800adfc:	4fa6      	ldr	r7, [pc, #664]	; (800b098 <__ssvfiscanf_r+0x2b8>)
 800adfe:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b09c <__ssvfiscanf_r+0x2bc>
 800ae02:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ae06:	91a1      	str	r1, [sp, #644]	; 0x284
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	7813      	ldrb	r3, [r2, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f000 815c 	beq.w	800b0ca <__ssvfiscanf_r+0x2ea>
 800ae12:	5dd9      	ldrb	r1, [r3, r7]
 800ae14:	1c55      	adds	r5, r2, #1
 800ae16:	f011 0108 	ands.w	r1, r1, #8
 800ae1a:	d019      	beq.n	800ae50 <__ssvfiscanf_r+0x70>
 800ae1c:	6863      	ldr	r3, [r4, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	dd0f      	ble.n	800ae42 <__ssvfiscanf_r+0x62>
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	781a      	ldrb	r2, [r3, #0]
 800ae26:	5cba      	ldrb	r2, [r7, r2]
 800ae28:	0712      	lsls	r2, r2, #28
 800ae2a:	d401      	bmi.n	800ae30 <__ssvfiscanf_r+0x50>
 800ae2c:	462a      	mov	r2, r5
 800ae2e:	e7ec      	b.n	800ae0a <__ssvfiscanf_r+0x2a>
 800ae30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae32:	3301      	adds	r3, #1
 800ae34:	3201      	adds	r2, #1
 800ae36:	9245      	str	r2, [sp, #276]	; 0x114
 800ae38:	6862      	ldr	r2, [r4, #4]
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	3a01      	subs	r2, #1
 800ae3e:	6062      	str	r2, [r4, #4]
 800ae40:	e7ec      	b.n	800ae1c <__ssvfiscanf_r+0x3c>
 800ae42:	4621      	mov	r1, r4
 800ae44:	4630      	mov	r0, r6
 800ae46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae48:	4798      	blx	r3
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d0e9      	beq.n	800ae22 <__ssvfiscanf_r+0x42>
 800ae4e:	e7ed      	b.n	800ae2c <__ssvfiscanf_r+0x4c>
 800ae50:	2b25      	cmp	r3, #37	; 0x25
 800ae52:	d012      	beq.n	800ae7a <__ssvfiscanf_r+0x9a>
 800ae54:	469a      	mov	sl, r3
 800ae56:	6863      	ldr	r3, [r4, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f340 8094 	ble.w	800af86 <__ssvfiscanf_r+0x1a6>
 800ae5e:	6822      	ldr	r2, [r4, #0]
 800ae60:	7813      	ldrb	r3, [r2, #0]
 800ae62:	4553      	cmp	r3, sl
 800ae64:	f040 8131 	bne.w	800b0ca <__ssvfiscanf_r+0x2ea>
 800ae68:	6863      	ldr	r3, [r4, #4]
 800ae6a:	3201      	adds	r2, #1
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	6063      	str	r3, [r4, #4]
 800ae70:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ae72:	6022      	str	r2, [r4, #0]
 800ae74:	3301      	adds	r3, #1
 800ae76:	9345      	str	r3, [sp, #276]	; 0x114
 800ae78:	e7d8      	b.n	800ae2c <__ssvfiscanf_r+0x4c>
 800ae7a:	9141      	str	r1, [sp, #260]	; 0x104
 800ae7c:	9143      	str	r1, [sp, #268]	; 0x10c
 800ae7e:	7853      	ldrb	r3, [r2, #1]
 800ae80:	2b2a      	cmp	r3, #42	; 0x2a
 800ae82:	bf04      	itt	eq
 800ae84:	2310      	moveq	r3, #16
 800ae86:	1c95      	addeq	r5, r2, #2
 800ae88:	f04f 020a 	mov.w	r2, #10
 800ae8c:	bf08      	it	eq
 800ae8e:	9341      	streq	r3, [sp, #260]	; 0x104
 800ae90:	46aa      	mov	sl, r5
 800ae92:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ae96:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ae9a:	2b09      	cmp	r3, #9
 800ae9c:	d91d      	bls.n	800aeda <__ssvfiscanf_r+0xfa>
 800ae9e:	2203      	movs	r2, #3
 800aea0:	487e      	ldr	r0, [pc, #504]	; (800b09c <__ssvfiscanf_r+0x2bc>)
 800aea2:	f7ff feeb 	bl	800ac7c <memchr>
 800aea6:	b140      	cbz	r0, 800aeba <__ssvfiscanf_r+0xda>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	4655      	mov	r5, sl
 800aeac:	eba0 0009 	sub.w	r0, r0, r9
 800aeb0:	fa03 f000 	lsl.w	r0, r3, r0
 800aeb4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aeb6:	4318      	orrs	r0, r3
 800aeb8:	9041      	str	r0, [sp, #260]	; 0x104
 800aeba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aebe:	2b78      	cmp	r3, #120	; 0x78
 800aec0:	d806      	bhi.n	800aed0 <__ssvfiscanf_r+0xf0>
 800aec2:	2b57      	cmp	r3, #87	; 0x57
 800aec4:	d810      	bhi.n	800aee8 <__ssvfiscanf_r+0x108>
 800aec6:	2b25      	cmp	r3, #37	; 0x25
 800aec8:	d0c4      	beq.n	800ae54 <__ssvfiscanf_r+0x74>
 800aeca:	d857      	bhi.n	800af7c <__ssvfiscanf_r+0x19c>
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d065      	beq.n	800af9c <__ssvfiscanf_r+0x1bc>
 800aed0:	2303      	movs	r3, #3
 800aed2:	9347      	str	r3, [sp, #284]	; 0x11c
 800aed4:	230a      	movs	r3, #10
 800aed6:	9342      	str	r3, [sp, #264]	; 0x108
 800aed8:	e072      	b.n	800afc0 <__ssvfiscanf_r+0x1e0>
 800aeda:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aedc:	4655      	mov	r5, sl
 800aede:	fb02 1103 	mla	r1, r2, r3, r1
 800aee2:	3930      	subs	r1, #48	; 0x30
 800aee4:	9143      	str	r1, [sp, #268]	; 0x10c
 800aee6:	e7d3      	b.n	800ae90 <__ssvfiscanf_r+0xb0>
 800aee8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800aeec:	2a20      	cmp	r2, #32
 800aeee:	d8ef      	bhi.n	800aed0 <__ssvfiscanf_r+0xf0>
 800aef0:	a101      	add	r1, pc, #4	; (adr r1, 800aef8 <__ssvfiscanf_r+0x118>)
 800aef2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aef6:	bf00      	nop
 800aef8:	0800afab 	.word	0x0800afab
 800aefc:	0800aed1 	.word	0x0800aed1
 800af00:	0800aed1 	.word	0x0800aed1
 800af04:	0800b009 	.word	0x0800b009
 800af08:	0800aed1 	.word	0x0800aed1
 800af0c:	0800aed1 	.word	0x0800aed1
 800af10:	0800aed1 	.word	0x0800aed1
 800af14:	0800aed1 	.word	0x0800aed1
 800af18:	0800aed1 	.word	0x0800aed1
 800af1c:	0800aed1 	.word	0x0800aed1
 800af20:	0800aed1 	.word	0x0800aed1
 800af24:	0800b01f 	.word	0x0800b01f
 800af28:	0800aff5 	.word	0x0800aff5
 800af2c:	0800af83 	.word	0x0800af83
 800af30:	0800af83 	.word	0x0800af83
 800af34:	0800af83 	.word	0x0800af83
 800af38:	0800aed1 	.word	0x0800aed1
 800af3c:	0800aff9 	.word	0x0800aff9
 800af40:	0800aed1 	.word	0x0800aed1
 800af44:	0800aed1 	.word	0x0800aed1
 800af48:	0800aed1 	.word	0x0800aed1
 800af4c:	0800aed1 	.word	0x0800aed1
 800af50:	0800b02f 	.word	0x0800b02f
 800af54:	0800b001 	.word	0x0800b001
 800af58:	0800afa3 	.word	0x0800afa3
 800af5c:	0800aed1 	.word	0x0800aed1
 800af60:	0800aed1 	.word	0x0800aed1
 800af64:	0800b02b 	.word	0x0800b02b
 800af68:	0800aed1 	.word	0x0800aed1
 800af6c:	0800aff5 	.word	0x0800aff5
 800af70:	0800aed1 	.word	0x0800aed1
 800af74:	0800aed1 	.word	0x0800aed1
 800af78:	0800afab 	.word	0x0800afab
 800af7c:	3b45      	subs	r3, #69	; 0x45
 800af7e:	2b02      	cmp	r3, #2
 800af80:	d8a6      	bhi.n	800aed0 <__ssvfiscanf_r+0xf0>
 800af82:	2305      	movs	r3, #5
 800af84:	e01b      	b.n	800afbe <__ssvfiscanf_r+0x1de>
 800af86:	4621      	mov	r1, r4
 800af88:	4630      	mov	r0, r6
 800af8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af8c:	4798      	blx	r3
 800af8e:	2800      	cmp	r0, #0
 800af90:	f43f af65 	beq.w	800ae5e <__ssvfiscanf_r+0x7e>
 800af94:	9844      	ldr	r0, [sp, #272]	; 0x110
 800af96:	2800      	cmp	r0, #0
 800af98:	f040 808d 	bne.w	800b0b6 <__ssvfiscanf_r+0x2d6>
 800af9c:	f04f 30ff 	mov.w	r0, #4294967295
 800afa0:	e08f      	b.n	800b0c2 <__ssvfiscanf_r+0x2e2>
 800afa2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800afa4:	f042 0220 	orr.w	r2, r2, #32
 800afa8:	9241      	str	r2, [sp, #260]	; 0x104
 800afaa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800afac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afb0:	9241      	str	r2, [sp, #260]	; 0x104
 800afb2:	2210      	movs	r2, #16
 800afb4:	2b6f      	cmp	r3, #111	; 0x6f
 800afb6:	bf34      	ite	cc
 800afb8:	2303      	movcc	r3, #3
 800afba:	2304      	movcs	r3, #4
 800afbc:	9242      	str	r2, [sp, #264]	; 0x108
 800afbe:	9347      	str	r3, [sp, #284]	; 0x11c
 800afc0:	6863      	ldr	r3, [r4, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	dd42      	ble.n	800b04c <__ssvfiscanf_r+0x26c>
 800afc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800afc8:	0659      	lsls	r1, r3, #25
 800afca:	d404      	bmi.n	800afd6 <__ssvfiscanf_r+0x1f6>
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	781a      	ldrb	r2, [r3, #0]
 800afd0:	5cba      	ldrb	r2, [r7, r2]
 800afd2:	0712      	lsls	r2, r2, #28
 800afd4:	d441      	bmi.n	800b05a <__ssvfiscanf_r+0x27a>
 800afd6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800afd8:	2b02      	cmp	r3, #2
 800afda:	dc50      	bgt.n	800b07e <__ssvfiscanf_r+0x29e>
 800afdc:	466b      	mov	r3, sp
 800afde:	4622      	mov	r2, r4
 800afe0:	4630      	mov	r0, r6
 800afe2:	a941      	add	r1, sp, #260	; 0x104
 800afe4:	f000 f876 	bl	800b0d4 <_scanf_chars>
 800afe8:	2801      	cmp	r0, #1
 800afea:	d06e      	beq.n	800b0ca <__ssvfiscanf_r+0x2ea>
 800afec:	2802      	cmp	r0, #2
 800afee:	f47f af1d 	bne.w	800ae2c <__ssvfiscanf_r+0x4c>
 800aff2:	e7cf      	b.n	800af94 <__ssvfiscanf_r+0x1b4>
 800aff4:	220a      	movs	r2, #10
 800aff6:	e7dd      	b.n	800afb4 <__ssvfiscanf_r+0x1d4>
 800aff8:	2300      	movs	r3, #0
 800affa:	9342      	str	r3, [sp, #264]	; 0x108
 800affc:	2303      	movs	r3, #3
 800affe:	e7de      	b.n	800afbe <__ssvfiscanf_r+0x1de>
 800b000:	2308      	movs	r3, #8
 800b002:	9342      	str	r3, [sp, #264]	; 0x108
 800b004:	2304      	movs	r3, #4
 800b006:	e7da      	b.n	800afbe <__ssvfiscanf_r+0x1de>
 800b008:	4629      	mov	r1, r5
 800b00a:	4640      	mov	r0, r8
 800b00c:	f000 f9b4 	bl	800b378 <__sccl>
 800b010:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b012:	4605      	mov	r5, r0
 800b014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b018:	9341      	str	r3, [sp, #260]	; 0x104
 800b01a:	2301      	movs	r3, #1
 800b01c:	e7cf      	b.n	800afbe <__ssvfiscanf_r+0x1de>
 800b01e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b024:	9341      	str	r3, [sp, #260]	; 0x104
 800b026:	2300      	movs	r3, #0
 800b028:	e7c9      	b.n	800afbe <__ssvfiscanf_r+0x1de>
 800b02a:	2302      	movs	r3, #2
 800b02c:	e7c7      	b.n	800afbe <__ssvfiscanf_r+0x1de>
 800b02e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b030:	06c3      	lsls	r3, r0, #27
 800b032:	f53f aefb 	bmi.w	800ae2c <__ssvfiscanf_r+0x4c>
 800b036:	9b00      	ldr	r3, [sp, #0]
 800b038:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b03a:	1d19      	adds	r1, r3, #4
 800b03c:	9100      	str	r1, [sp, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f010 0f01 	tst.w	r0, #1
 800b044:	bf14      	ite	ne
 800b046:	801a      	strhne	r2, [r3, #0]
 800b048:	601a      	streq	r2, [r3, #0]
 800b04a:	e6ef      	b.n	800ae2c <__ssvfiscanf_r+0x4c>
 800b04c:	4621      	mov	r1, r4
 800b04e:	4630      	mov	r0, r6
 800b050:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b052:	4798      	blx	r3
 800b054:	2800      	cmp	r0, #0
 800b056:	d0b6      	beq.n	800afc6 <__ssvfiscanf_r+0x1e6>
 800b058:	e79c      	b.n	800af94 <__ssvfiscanf_r+0x1b4>
 800b05a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b05c:	3201      	adds	r2, #1
 800b05e:	9245      	str	r2, [sp, #276]	; 0x114
 800b060:	6862      	ldr	r2, [r4, #4]
 800b062:	3a01      	subs	r2, #1
 800b064:	2a00      	cmp	r2, #0
 800b066:	6062      	str	r2, [r4, #4]
 800b068:	dd02      	ble.n	800b070 <__ssvfiscanf_r+0x290>
 800b06a:	3301      	adds	r3, #1
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	e7ad      	b.n	800afcc <__ssvfiscanf_r+0x1ec>
 800b070:	4621      	mov	r1, r4
 800b072:	4630      	mov	r0, r6
 800b074:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b076:	4798      	blx	r3
 800b078:	2800      	cmp	r0, #0
 800b07a:	d0a7      	beq.n	800afcc <__ssvfiscanf_r+0x1ec>
 800b07c:	e78a      	b.n	800af94 <__ssvfiscanf_r+0x1b4>
 800b07e:	2b04      	cmp	r3, #4
 800b080:	dc0e      	bgt.n	800b0a0 <__ssvfiscanf_r+0x2c0>
 800b082:	466b      	mov	r3, sp
 800b084:	4622      	mov	r2, r4
 800b086:	4630      	mov	r0, r6
 800b088:	a941      	add	r1, sp, #260	; 0x104
 800b08a:	f000 f87d 	bl	800b188 <_scanf_i>
 800b08e:	e7ab      	b.n	800afe8 <__ssvfiscanf_r+0x208>
 800b090:	0800ad2b 	.word	0x0800ad2b
 800b094:	0800ada5 	.word	0x0800ada5
 800b098:	0800bc8d 	.word	0x0800bc8d
 800b09c:	0800bd93 	.word	0x0800bd93
 800b0a0:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <__ssvfiscanf_r+0x2f0>)
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f43f aec2 	beq.w	800ae2c <__ssvfiscanf_r+0x4c>
 800b0a8:	466b      	mov	r3, sp
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	a941      	add	r1, sp, #260	; 0x104
 800b0b0:	f3af 8000 	nop.w
 800b0b4:	e798      	b.n	800afe8 <__ssvfiscanf_r+0x208>
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b0bc:	bf18      	it	ne
 800b0be:	f04f 30ff 	movne.w	r0, #4294967295
 800b0c2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ca:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b0cc:	e7f9      	b.n	800b0c2 <__ssvfiscanf_r+0x2e2>
 800b0ce:	bf00      	nop
 800b0d0:	00000000 	.word	0x00000000

0800b0d4 <_scanf_chars>:
 800b0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0d8:	4615      	mov	r5, r2
 800b0da:	688a      	ldr	r2, [r1, #8]
 800b0dc:	4680      	mov	r8, r0
 800b0de:	460c      	mov	r4, r1
 800b0e0:	b932      	cbnz	r2, 800b0f0 <_scanf_chars+0x1c>
 800b0e2:	698a      	ldr	r2, [r1, #24]
 800b0e4:	2a00      	cmp	r2, #0
 800b0e6:	bf0c      	ite	eq
 800b0e8:	2201      	moveq	r2, #1
 800b0ea:	f04f 32ff 	movne.w	r2, #4294967295
 800b0ee:	608a      	str	r2, [r1, #8]
 800b0f0:	2700      	movs	r7, #0
 800b0f2:	6822      	ldr	r2, [r4, #0]
 800b0f4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b184 <_scanf_chars+0xb0>
 800b0f8:	06d1      	lsls	r1, r2, #27
 800b0fa:	bf5f      	itttt	pl
 800b0fc:	681a      	ldrpl	r2, [r3, #0]
 800b0fe:	1d11      	addpl	r1, r2, #4
 800b100:	6019      	strpl	r1, [r3, #0]
 800b102:	6816      	ldrpl	r6, [r2, #0]
 800b104:	69a0      	ldr	r0, [r4, #24]
 800b106:	b188      	cbz	r0, 800b12c <_scanf_chars+0x58>
 800b108:	2801      	cmp	r0, #1
 800b10a:	d107      	bne.n	800b11c <_scanf_chars+0x48>
 800b10c:	682b      	ldr	r3, [r5, #0]
 800b10e:	781a      	ldrb	r2, [r3, #0]
 800b110:	6963      	ldr	r3, [r4, #20]
 800b112:	5c9b      	ldrb	r3, [r3, r2]
 800b114:	b953      	cbnz	r3, 800b12c <_scanf_chars+0x58>
 800b116:	2f00      	cmp	r7, #0
 800b118:	d031      	beq.n	800b17e <_scanf_chars+0xaa>
 800b11a:	e022      	b.n	800b162 <_scanf_chars+0x8e>
 800b11c:	2802      	cmp	r0, #2
 800b11e:	d120      	bne.n	800b162 <_scanf_chars+0x8e>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b128:	071b      	lsls	r3, r3, #28
 800b12a:	d41a      	bmi.n	800b162 <_scanf_chars+0x8e>
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	3701      	adds	r7, #1
 800b130:	06da      	lsls	r2, r3, #27
 800b132:	bf5e      	ittt	pl
 800b134:	682b      	ldrpl	r3, [r5, #0]
 800b136:	781b      	ldrbpl	r3, [r3, #0]
 800b138:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b13c:	682a      	ldr	r2, [r5, #0]
 800b13e:	686b      	ldr	r3, [r5, #4]
 800b140:	3201      	adds	r2, #1
 800b142:	602a      	str	r2, [r5, #0]
 800b144:	68a2      	ldr	r2, [r4, #8]
 800b146:	3b01      	subs	r3, #1
 800b148:	3a01      	subs	r2, #1
 800b14a:	606b      	str	r3, [r5, #4]
 800b14c:	60a2      	str	r2, [r4, #8]
 800b14e:	b142      	cbz	r2, 800b162 <_scanf_chars+0x8e>
 800b150:	2b00      	cmp	r3, #0
 800b152:	dcd7      	bgt.n	800b104 <_scanf_chars+0x30>
 800b154:	4629      	mov	r1, r5
 800b156:	4640      	mov	r0, r8
 800b158:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b15c:	4798      	blx	r3
 800b15e:	2800      	cmp	r0, #0
 800b160:	d0d0      	beq.n	800b104 <_scanf_chars+0x30>
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	f013 0310 	ands.w	r3, r3, #16
 800b168:	d105      	bne.n	800b176 <_scanf_chars+0xa2>
 800b16a:	68e2      	ldr	r2, [r4, #12]
 800b16c:	3201      	adds	r2, #1
 800b16e:	60e2      	str	r2, [r4, #12]
 800b170:	69a2      	ldr	r2, [r4, #24]
 800b172:	b102      	cbz	r2, 800b176 <_scanf_chars+0xa2>
 800b174:	7033      	strb	r3, [r6, #0]
 800b176:	2000      	movs	r0, #0
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	443b      	add	r3, r7
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b182:	bf00      	nop
 800b184:	0800bc8d 	.word	0x0800bc8d

0800b188 <_scanf_i>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	460c      	mov	r4, r1
 800b18e:	4698      	mov	r8, r3
 800b190:	4b75      	ldr	r3, [pc, #468]	; (800b368 <_scanf_i+0x1e0>)
 800b192:	b087      	sub	sp, #28
 800b194:	4682      	mov	sl, r0
 800b196:	4616      	mov	r6, r2
 800b198:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b19c:	ab03      	add	r3, sp, #12
 800b19e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b1a2:	4b72      	ldr	r3, [pc, #456]	; (800b36c <_scanf_i+0x1e4>)
 800b1a4:	69a1      	ldr	r1, [r4, #24]
 800b1a6:	4a72      	ldr	r2, [pc, #456]	; (800b370 <_scanf_i+0x1e8>)
 800b1a8:	4627      	mov	r7, r4
 800b1aa:	2903      	cmp	r1, #3
 800b1ac:	bf18      	it	ne
 800b1ae:	461a      	movne	r2, r3
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	9201      	str	r2, [sp, #4]
 800b1b4:	1e5a      	subs	r2, r3, #1
 800b1b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b1ba:	bf81      	itttt	hi
 800b1bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b1c0:	eb03 0905 	addhi.w	r9, r3, r5
 800b1c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b1c8:	60a3      	strhi	r3, [r4, #8]
 800b1ca:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b1ce:	bf98      	it	ls
 800b1d0:	f04f 0900 	movls.w	r9, #0
 800b1d4:	463d      	mov	r5, r7
 800b1d6:	f04f 0b00 	mov.w	fp, #0
 800b1da:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b1de:	6023      	str	r3, [r4, #0]
 800b1e0:	6831      	ldr	r1, [r6, #0]
 800b1e2:	ab03      	add	r3, sp, #12
 800b1e4:	2202      	movs	r2, #2
 800b1e6:	7809      	ldrb	r1, [r1, #0]
 800b1e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b1ec:	f7ff fd46 	bl	800ac7c <memchr>
 800b1f0:	b328      	cbz	r0, 800b23e <_scanf_i+0xb6>
 800b1f2:	f1bb 0f01 	cmp.w	fp, #1
 800b1f6:	d159      	bne.n	800b2ac <_scanf_i+0x124>
 800b1f8:	6862      	ldr	r2, [r4, #4]
 800b1fa:	b92a      	cbnz	r2, 800b208 <_scanf_i+0x80>
 800b1fc:	2308      	movs	r3, #8
 800b1fe:	6822      	ldr	r2, [r4, #0]
 800b200:	6063      	str	r3, [r4, #4]
 800b202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b206:	6022      	str	r2, [r4, #0]
 800b208:	6822      	ldr	r2, [r4, #0]
 800b20a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b20e:	6022      	str	r2, [r4, #0]
 800b210:	68a2      	ldr	r2, [r4, #8]
 800b212:	1e51      	subs	r1, r2, #1
 800b214:	60a1      	str	r1, [r4, #8]
 800b216:	b192      	cbz	r2, 800b23e <_scanf_i+0xb6>
 800b218:	6832      	ldr	r2, [r6, #0]
 800b21a:	1c51      	adds	r1, r2, #1
 800b21c:	6031      	str	r1, [r6, #0]
 800b21e:	7812      	ldrb	r2, [r2, #0]
 800b220:	f805 2b01 	strb.w	r2, [r5], #1
 800b224:	6872      	ldr	r2, [r6, #4]
 800b226:	3a01      	subs	r2, #1
 800b228:	2a00      	cmp	r2, #0
 800b22a:	6072      	str	r2, [r6, #4]
 800b22c:	dc07      	bgt.n	800b23e <_scanf_i+0xb6>
 800b22e:	4631      	mov	r1, r6
 800b230:	4650      	mov	r0, sl
 800b232:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b236:	4790      	blx	r2
 800b238:	2800      	cmp	r0, #0
 800b23a:	f040 8085 	bne.w	800b348 <_scanf_i+0x1c0>
 800b23e:	f10b 0b01 	add.w	fp, fp, #1
 800b242:	f1bb 0f03 	cmp.w	fp, #3
 800b246:	d1cb      	bne.n	800b1e0 <_scanf_i+0x58>
 800b248:	6863      	ldr	r3, [r4, #4]
 800b24a:	b90b      	cbnz	r3, 800b250 <_scanf_i+0xc8>
 800b24c:	230a      	movs	r3, #10
 800b24e:	6063      	str	r3, [r4, #4]
 800b250:	6863      	ldr	r3, [r4, #4]
 800b252:	4948      	ldr	r1, [pc, #288]	; (800b374 <_scanf_i+0x1ec>)
 800b254:	6960      	ldr	r0, [r4, #20]
 800b256:	1ac9      	subs	r1, r1, r3
 800b258:	f000 f88e 	bl	800b378 <__sccl>
 800b25c:	f04f 0b00 	mov.w	fp, #0
 800b260:	68a3      	ldr	r3, [r4, #8]
 800b262:	6822      	ldr	r2, [r4, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d03d      	beq.n	800b2e4 <_scanf_i+0x15c>
 800b268:	6831      	ldr	r1, [r6, #0]
 800b26a:	6960      	ldr	r0, [r4, #20]
 800b26c:	f891 c000 	ldrb.w	ip, [r1]
 800b270:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b274:	2800      	cmp	r0, #0
 800b276:	d035      	beq.n	800b2e4 <_scanf_i+0x15c>
 800b278:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b27c:	d124      	bne.n	800b2c8 <_scanf_i+0x140>
 800b27e:	0510      	lsls	r0, r2, #20
 800b280:	d522      	bpl.n	800b2c8 <_scanf_i+0x140>
 800b282:	f10b 0b01 	add.w	fp, fp, #1
 800b286:	f1b9 0f00 	cmp.w	r9, #0
 800b28a:	d003      	beq.n	800b294 <_scanf_i+0x10c>
 800b28c:	3301      	adds	r3, #1
 800b28e:	f109 39ff 	add.w	r9, r9, #4294967295
 800b292:	60a3      	str	r3, [r4, #8]
 800b294:	6873      	ldr	r3, [r6, #4]
 800b296:	3b01      	subs	r3, #1
 800b298:	2b00      	cmp	r3, #0
 800b29a:	6073      	str	r3, [r6, #4]
 800b29c:	dd1b      	ble.n	800b2d6 <_scanf_i+0x14e>
 800b29e:	6833      	ldr	r3, [r6, #0]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	6033      	str	r3, [r6, #0]
 800b2a4:	68a3      	ldr	r3, [r4, #8]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	60a3      	str	r3, [r4, #8]
 800b2aa:	e7d9      	b.n	800b260 <_scanf_i+0xd8>
 800b2ac:	f1bb 0f02 	cmp.w	fp, #2
 800b2b0:	d1ae      	bne.n	800b210 <_scanf_i+0x88>
 800b2b2:	6822      	ldr	r2, [r4, #0]
 800b2b4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b2b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b2bc:	d1bf      	bne.n	800b23e <_scanf_i+0xb6>
 800b2be:	2310      	movs	r3, #16
 800b2c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2c4:	6063      	str	r3, [r4, #4]
 800b2c6:	e7a2      	b.n	800b20e <_scanf_i+0x86>
 800b2c8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b2cc:	6022      	str	r2, [r4, #0]
 800b2ce:	780b      	ldrb	r3, [r1, #0]
 800b2d0:	f805 3b01 	strb.w	r3, [r5], #1
 800b2d4:	e7de      	b.n	800b294 <_scanf_i+0x10c>
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	4650      	mov	r0, sl
 800b2da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b2de:	4798      	blx	r3
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d0df      	beq.n	800b2a4 <_scanf_i+0x11c>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	05db      	lsls	r3, r3, #23
 800b2e8:	d50d      	bpl.n	800b306 <_scanf_i+0x17e>
 800b2ea:	42bd      	cmp	r5, r7
 800b2ec:	d909      	bls.n	800b302 <_scanf_i+0x17a>
 800b2ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b2f2:	4632      	mov	r2, r6
 800b2f4:	4650      	mov	r0, sl
 800b2f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2fa:	f105 39ff 	add.w	r9, r5, #4294967295
 800b2fe:	4798      	blx	r3
 800b300:	464d      	mov	r5, r9
 800b302:	42bd      	cmp	r5, r7
 800b304:	d02d      	beq.n	800b362 <_scanf_i+0x1da>
 800b306:	6822      	ldr	r2, [r4, #0]
 800b308:	f012 0210 	ands.w	r2, r2, #16
 800b30c:	d113      	bne.n	800b336 <_scanf_i+0x1ae>
 800b30e:	702a      	strb	r2, [r5, #0]
 800b310:	4639      	mov	r1, r7
 800b312:	6863      	ldr	r3, [r4, #4]
 800b314:	4650      	mov	r0, sl
 800b316:	9e01      	ldr	r6, [sp, #4]
 800b318:	47b0      	blx	r6
 800b31a:	6821      	ldr	r1, [r4, #0]
 800b31c:	f8d8 3000 	ldr.w	r3, [r8]
 800b320:	f011 0f20 	tst.w	r1, #32
 800b324:	d013      	beq.n	800b34e <_scanf_i+0x1c6>
 800b326:	1d1a      	adds	r2, r3, #4
 800b328:	f8c8 2000 	str.w	r2, [r8]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6018      	str	r0, [r3, #0]
 800b330:	68e3      	ldr	r3, [r4, #12]
 800b332:	3301      	adds	r3, #1
 800b334:	60e3      	str	r3, [r4, #12]
 800b336:	2000      	movs	r0, #0
 800b338:	1bed      	subs	r5, r5, r7
 800b33a:	44ab      	add	fp, r5
 800b33c:	6925      	ldr	r5, [r4, #16]
 800b33e:	445d      	add	r5, fp
 800b340:	6125      	str	r5, [r4, #16]
 800b342:	b007      	add	sp, #28
 800b344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b348:	f04f 0b00 	mov.w	fp, #0
 800b34c:	e7ca      	b.n	800b2e4 <_scanf_i+0x15c>
 800b34e:	1d1a      	adds	r2, r3, #4
 800b350:	f8c8 2000 	str.w	r2, [r8]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f011 0f01 	tst.w	r1, #1
 800b35a:	bf14      	ite	ne
 800b35c:	8018      	strhne	r0, [r3, #0]
 800b35e:	6018      	streq	r0, [r3, #0]
 800b360:	e7e6      	b.n	800b330 <_scanf_i+0x1a8>
 800b362:	2001      	movs	r0, #1
 800b364:	e7ed      	b.n	800b342 <_scanf_i+0x1ba>
 800b366:	bf00      	nop
 800b368:	0800b94c 	.word	0x0800b94c
 800b36c:	0800a015 	.word	0x0800a015
 800b370:	08009f19 	.word	0x08009f19
 800b374:	0800be39 	.word	0x0800be39

0800b378 <__sccl>:
 800b378:	b570      	push	{r4, r5, r6, lr}
 800b37a:	780b      	ldrb	r3, [r1, #0]
 800b37c:	4604      	mov	r4, r0
 800b37e:	2b5e      	cmp	r3, #94	; 0x5e
 800b380:	bf13      	iteet	ne
 800b382:	2200      	movne	r2, #0
 800b384:	2201      	moveq	r2, #1
 800b386:	784b      	ldrbeq	r3, [r1, #1]
 800b388:	1c48      	addne	r0, r1, #1
 800b38a:	bf08      	it	eq
 800b38c:	1c88      	addeq	r0, r1, #2
 800b38e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b392:	1e61      	subs	r1, r4, #1
 800b394:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b398:	42a9      	cmp	r1, r5
 800b39a:	d1fb      	bne.n	800b394 <__sccl+0x1c>
 800b39c:	b90b      	cbnz	r3, 800b3a2 <__sccl+0x2a>
 800b39e:	3801      	subs	r0, #1
 800b3a0:	bd70      	pop	{r4, r5, r6, pc}
 800b3a2:	f082 0201 	eor.w	r2, r2, #1
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	54e2      	strb	r2, [r4, r3]
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b3b0:	292d      	cmp	r1, #45	; 0x2d
 800b3b2:	d006      	beq.n	800b3c2 <__sccl+0x4a>
 800b3b4:	295d      	cmp	r1, #93	; 0x5d
 800b3b6:	d0f3      	beq.n	800b3a0 <__sccl+0x28>
 800b3b8:	b909      	cbnz	r1, 800b3be <__sccl+0x46>
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	e7f0      	b.n	800b3a0 <__sccl+0x28>
 800b3be:	460b      	mov	r3, r1
 800b3c0:	e7f1      	b.n	800b3a6 <__sccl+0x2e>
 800b3c2:	786e      	ldrb	r6, [r5, #1]
 800b3c4:	2e5d      	cmp	r6, #93	; 0x5d
 800b3c6:	d0fa      	beq.n	800b3be <__sccl+0x46>
 800b3c8:	42b3      	cmp	r3, r6
 800b3ca:	dcf8      	bgt.n	800b3be <__sccl+0x46>
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	3502      	adds	r5, #2
 800b3d0:	3101      	adds	r1, #1
 800b3d2:	428e      	cmp	r6, r1
 800b3d4:	5462      	strb	r2, [r4, r1]
 800b3d6:	dcfb      	bgt.n	800b3d0 <__sccl+0x58>
 800b3d8:	1af1      	subs	r1, r6, r3
 800b3da:	3901      	subs	r1, #1
 800b3dc:	42b3      	cmp	r3, r6
 800b3de:	bfa8      	it	ge
 800b3e0:	2100      	movge	r1, #0
 800b3e2:	1c58      	adds	r0, r3, #1
 800b3e4:	1843      	adds	r3, r0, r1
 800b3e6:	e7e0      	b.n	800b3aa <__sccl+0x32>

0800b3e8 <__submore>:
 800b3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ec:	460c      	mov	r4, r1
 800b3ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b3f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3f4:	4299      	cmp	r1, r3
 800b3f6:	d11b      	bne.n	800b430 <__submore+0x48>
 800b3f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b3fc:	f7fd ff34 	bl	8009268 <_malloc_r>
 800b400:	b918      	cbnz	r0, 800b40a <__submore+0x22>
 800b402:	f04f 30ff 	mov.w	r0, #4294967295
 800b406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b40a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b40e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b410:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b414:	6360      	str	r0, [r4, #52]	; 0x34
 800b416:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b41a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b41e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b422:	7043      	strb	r3, [r0, #1]
 800b424:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b428:	7003      	strb	r3, [r0, #0]
 800b42a:	6020      	str	r0, [r4, #0]
 800b42c:	2000      	movs	r0, #0
 800b42e:	e7ea      	b.n	800b406 <__submore+0x1e>
 800b430:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b432:	0077      	lsls	r7, r6, #1
 800b434:	463a      	mov	r2, r7
 800b436:	f7ff fc49 	bl	800accc <_realloc_r>
 800b43a:	4605      	mov	r5, r0
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d0e0      	beq.n	800b402 <__submore+0x1a>
 800b440:	eb00 0806 	add.w	r8, r0, r6
 800b444:	4601      	mov	r1, r0
 800b446:	4632      	mov	r2, r6
 800b448:	4640      	mov	r0, r8
 800b44a:	f7fe ffdb 	bl	800a404 <memcpy>
 800b44e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b452:	f8c4 8000 	str.w	r8, [r4]
 800b456:	e7e9      	b.n	800b42c <__submore+0x44>

0800b458 <_malloc_usable_size_r>:
 800b458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b45c:	1f18      	subs	r0, r3, #4
 800b45e:	2b00      	cmp	r3, #0
 800b460:	bfbc      	itt	lt
 800b462:	580b      	ldrlt	r3, [r1, r0]
 800b464:	18c0      	addlt	r0, r0, r3
 800b466:	4770      	bx	lr

0800b468 <sqrt>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	4606      	mov	r6, r0
 800b46c:	460f      	mov	r7, r1
 800b46e:	f000 f81f 	bl	800b4b0 <__ieee754_sqrt>
 800b472:	4632      	mov	r2, r6
 800b474:	4604      	mov	r4, r0
 800b476:	460d      	mov	r5, r1
 800b478:	463b      	mov	r3, r7
 800b47a:	4630      	mov	r0, r6
 800b47c:	4639      	mov	r1, r7
 800b47e:	f7f5 facd 	bl	8000a1c <__aeabi_dcmpun>
 800b482:	b990      	cbnz	r0, 800b4aa <sqrt+0x42>
 800b484:	2200      	movs	r2, #0
 800b486:	2300      	movs	r3, #0
 800b488:	4630      	mov	r0, r6
 800b48a:	4639      	mov	r1, r7
 800b48c:	f7f5 fa9e 	bl	80009cc <__aeabi_dcmplt>
 800b490:	b158      	cbz	r0, 800b4aa <sqrt+0x42>
 800b492:	f7fd fe4b 	bl	800912c <__errno>
 800b496:	2321      	movs	r3, #33	; 0x21
 800b498:	2200      	movs	r2, #0
 800b49a:	6003      	str	r3, [r0, #0]
 800b49c:	2300      	movs	r3, #0
 800b49e:	4610      	mov	r0, r2
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	f7f5 f94b 	bl	800073c <__aeabi_ddiv>
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	460d      	mov	r5, r1
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4b0 <__ieee754_sqrt>:
 800b4b0:	f8df c158 	ldr.w	ip, [pc, #344]	; 800b60c <__ieee754_sqrt+0x15c>
 800b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b8:	ea3c 0c01 	bics.w	ip, ip, r1
 800b4bc:	4606      	mov	r6, r0
 800b4be:	460d      	mov	r5, r1
 800b4c0:	460c      	mov	r4, r1
 800b4c2:	460a      	mov	r2, r1
 800b4c4:	4607      	mov	r7, r0
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	d10f      	bne.n	800b4ea <__ieee754_sqrt+0x3a>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	f7f5 f80b 	bl	80004e8 <__aeabi_dmul>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	4630      	mov	r0, r6
 800b4d8:	4629      	mov	r1, r5
 800b4da:	f7f4 fe4f 	bl	800017c <__adddf3>
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460d      	mov	r5, r1
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ea:	2900      	cmp	r1, #0
 800b4ec:	dc0e      	bgt.n	800b50c <__ieee754_sqrt+0x5c>
 800b4ee:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b4f2:	ea5c 0707 	orrs.w	r7, ip, r7
 800b4f6:	d0f4      	beq.n	800b4e2 <__ieee754_sqrt+0x32>
 800b4f8:	b141      	cbz	r1, 800b50c <__ieee754_sqrt+0x5c>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	f7f4 fe3b 	bl	8000178 <__aeabi_dsub>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	f7f5 f919 	bl	800073c <__aeabi_ddiv>
 800b50a:	e7e8      	b.n	800b4de <__ieee754_sqrt+0x2e>
 800b50c:	1521      	asrs	r1, r4, #20
 800b50e:	d075      	beq.n	800b5fc <__ieee754_sqrt+0x14c>
 800b510:	07cc      	lsls	r4, r1, #31
 800b512:	f04f 0400 	mov.w	r4, #0
 800b516:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b51a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800b51e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b522:	bf5e      	ittt	pl
 800b524:	0fd9      	lsrpl	r1, r3, #31
 800b526:	005b      	lslpl	r3, r3, #1
 800b528:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800b52c:	0fd9      	lsrs	r1, r3, #31
 800b52e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b532:	2516      	movs	r5, #22
 800b534:	4620      	mov	r0, r4
 800b536:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b53a:	107f      	asrs	r7, r7, #1
 800b53c:	005b      	lsls	r3, r3, #1
 800b53e:	1846      	adds	r6, r0, r1
 800b540:	4296      	cmp	r6, r2
 800b542:	bfde      	ittt	le
 800b544:	1b92      	suble	r2, r2, r6
 800b546:	1870      	addle	r0, r6, r1
 800b548:	1864      	addle	r4, r4, r1
 800b54a:	0052      	lsls	r2, r2, #1
 800b54c:	3d01      	subs	r5, #1
 800b54e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b552:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b556:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b55a:	d1f0      	bne.n	800b53e <__ieee754_sqrt+0x8e>
 800b55c:	4629      	mov	r1, r5
 800b55e:	f04f 0e20 	mov.w	lr, #32
 800b562:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b566:	4282      	cmp	r2, r0
 800b568:	eb06 0c05 	add.w	ip, r6, r5
 800b56c:	dc02      	bgt.n	800b574 <__ieee754_sqrt+0xc4>
 800b56e:	d113      	bne.n	800b598 <__ieee754_sqrt+0xe8>
 800b570:	459c      	cmp	ip, r3
 800b572:	d811      	bhi.n	800b598 <__ieee754_sqrt+0xe8>
 800b574:	f1bc 0f00 	cmp.w	ip, #0
 800b578:	eb0c 0506 	add.w	r5, ip, r6
 800b57c:	da43      	bge.n	800b606 <__ieee754_sqrt+0x156>
 800b57e:	2d00      	cmp	r5, #0
 800b580:	db41      	blt.n	800b606 <__ieee754_sqrt+0x156>
 800b582:	f100 0801 	add.w	r8, r0, #1
 800b586:	1a12      	subs	r2, r2, r0
 800b588:	4640      	mov	r0, r8
 800b58a:	459c      	cmp	ip, r3
 800b58c:	bf88      	it	hi
 800b58e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b592:	eba3 030c 	sub.w	r3, r3, ip
 800b596:	4431      	add	r1, r6
 800b598:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b59c:	f1be 0e01 	subs.w	lr, lr, #1
 800b5a0:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800b5a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b5a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b5ac:	d1db      	bne.n	800b566 <__ieee754_sqrt+0xb6>
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	d006      	beq.n	800b5c0 <__ieee754_sqrt+0x110>
 800b5b2:	1c48      	adds	r0, r1, #1
 800b5b4:	bf0b      	itete	eq
 800b5b6:	4671      	moveq	r1, lr
 800b5b8:	3101      	addne	r1, #1
 800b5ba:	3401      	addeq	r4, #1
 800b5bc:	f021 0101 	bicne.w	r1, r1, #1
 800b5c0:	1063      	asrs	r3, r4, #1
 800b5c2:	0849      	lsrs	r1, r1, #1
 800b5c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b5c8:	07e2      	lsls	r2, r4, #31
 800b5ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b5ce:	bf48      	it	mi
 800b5d0:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b5d4:	460e      	mov	r6, r1
 800b5d6:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b5da:	e782      	b.n	800b4e2 <__ieee754_sqrt+0x32>
 800b5dc:	0ada      	lsrs	r2, r3, #11
 800b5de:	3815      	subs	r0, #21
 800b5e0:	055b      	lsls	r3, r3, #21
 800b5e2:	2a00      	cmp	r2, #0
 800b5e4:	d0fa      	beq.n	800b5dc <__ieee754_sqrt+0x12c>
 800b5e6:	02d5      	lsls	r5, r2, #11
 800b5e8:	d50a      	bpl.n	800b600 <__ieee754_sqrt+0x150>
 800b5ea:	f1c1 0420 	rsb	r4, r1, #32
 800b5ee:	fa23 f404 	lsr.w	r4, r3, r4
 800b5f2:	1e4d      	subs	r5, r1, #1
 800b5f4:	408b      	lsls	r3, r1
 800b5f6:	4322      	orrs	r2, r4
 800b5f8:	1b41      	subs	r1, r0, r5
 800b5fa:	e789      	b.n	800b510 <__ieee754_sqrt+0x60>
 800b5fc:	4608      	mov	r0, r1
 800b5fe:	e7f0      	b.n	800b5e2 <__ieee754_sqrt+0x132>
 800b600:	0052      	lsls	r2, r2, #1
 800b602:	3101      	adds	r1, #1
 800b604:	e7ef      	b.n	800b5e6 <__ieee754_sqrt+0x136>
 800b606:	4680      	mov	r8, r0
 800b608:	e7bd      	b.n	800b586 <__ieee754_sqrt+0xd6>
 800b60a:	bf00      	nop
 800b60c:	7ff00000 	.word	0x7ff00000

0800b610 <_init>:
 800b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b612:	bf00      	nop
 800b614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b616:	bc08      	pop	{r3}
 800b618:	469e      	mov	lr, r3
 800b61a:	4770      	bx	lr

0800b61c <_fini>:
 800b61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61e:	bf00      	nop
 800b620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b622:	bc08      	pop	{r3}
 800b624:	469e      	mov	lr, r3
 800b626:	4770      	bx	lr
