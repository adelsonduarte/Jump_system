
JMP_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b954  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  0800ba60  0800ba60  0001ba60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2cc  0800c2cc  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c2cc  0800c2cc  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c2cc  0800c2cc  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2cc  0800c2cc  0001c2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2d0  0800c2d0  0001c2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800c2d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  200001a0  0800c474  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  0800c474  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161a0  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000411d  00000000  00000000  00036369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0003a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  0003bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d391  00000000  00000000  0003d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba4e  00000000  00000000  0005a479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009129c  00000000  00000000  00075ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107163  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cc0  00000000  00000000  001071b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a0 	.word	0x200001a0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ba48 	.word	0x0800ba48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a4 	.word	0x200001a4
 8000148:	0800ba48 	.word	0x0800ba48

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <eraseStateMachine>:
        unsigned char menuState;
        struct dataInsert menuInsert;
    };

unsigned char eraseStateMachine(struct Menu* subMenu)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuErase = subMenu;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	613b      	str	r3, [r7, #16]
    unsigned char key = 0;
 800017c:	2300      	movs	r3, #0
 800017e:	75fb      	strb	r3, [r7, #23]
    unsigned char index = 0;
 8000180:	2300      	movs	r3, #0
 8000182:	72fb      	strb	r3, [r7, #11]
    unsigned char displayUpdateStatus = IDDLE;
 8000184:	2300      	movs	r3, #0
 8000186:	72bb      	strb	r3, [r7, #10]
    unsigned char* ptr_eraseString;
    while(key != MENU)
 8000188:	e07c      	b.n	8000284 <eraseStateMachine+0x114>
    {
        switch(subMenuErase->menuState)
 800018a:	693b      	ldr	r3, [r7, #16]
 800018c:	78db      	ldrb	r3, [r3, #3]
 800018e:	2b02      	cmp	r3, #2
 8000190:	d066      	beq.n	8000260 <eraseStateMachine+0xf0>
 8000192:	2b02      	cmp	r3, #2
 8000194:	dc76      	bgt.n	8000284 <eraseStateMachine+0x114>
 8000196:	2b00      	cmp	r3, #0
 8000198:	d002      	beq.n	80001a0 <eraseStateMachine+0x30>
 800019a:	2b01      	cmp	r3, #1
 800019c:	d008      	beq.n	80001b0 <eraseStateMachine+0x40>
 800019e:	e071      	b.n	8000284 <eraseStateMachine+0x114>
        {
            case IDDLE:
                subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 80001a0:	2001      	movs	r0, #1
 80001a2:	f003 fb43 	bl	800382c <getNextSub>
 80001a6:	4603      	mov	r3, r0
 80001a8:	461a      	mov	r2, r3
 80001aa:	693b      	ldr	r3, [r7, #16]
 80001ac:	70da      	strb	r2, [r3, #3]
            break;
 80001ae:	e069      	b.n	8000284 <eraseStateMachine+0x114>

            case VERFICA_APAGAR:
                updateUserMsg(3,2,eraseselectUserMsg,&displayUpdateStatus);
 80001b0:	4b39      	ldr	r3, [pc, #228]	; (8000298 <eraseStateMachine+0x128>)
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	f107 030a 	add.w	r3, r7, #10
 80001b8:	2102      	movs	r1, #2
 80001ba:	2003      	movs	r0, #3
 80001bc:	f001 fed8 	bl	8001f70 <updateUserMsg>
                ptr_eraseString = getEraseTestString();
 80001c0:	f001 fb60 	bl	8001884 <getEraseTestString>
 80001c4:	60f8      	str	r0, [r7, #12]
                printDataDisplay(0,0,ptr_eraseString);
 80001c6:	68fa      	ldr	r2, [r7, #12]
 80001c8:	2100      	movs	r1, #0
 80001ca:	2000      	movs	r0, #0
 80001cc:	f002 fe44 	bl	8002e58 <printDataDisplay>
                key = getKeyPressed();
 80001d0:	f004 f8fa 	bl	80043c8 <getKeyPressed>
 80001d4:	4603      	mov	r3, r0
 80001d6:	75fb      	strb	r3, [r7, #23]

                if(key == INSERIR)
 80001d8:	7dfb      	ldrb	r3, [r7, #23]
 80001da:	2b49      	cmp	r3, #73	; 0x49
 80001dc:	d10e      	bne.n	80001fc <eraseStateMachine+0x8c>
                {
                	resetKeyPressed();
 80001de:	f004 f8ff 	bl	80043e0 <resetKeyPressed>
                    setUserErase(&index);
 80001e2:	f107 030b 	add.w	r3, r7, #11
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fbc4 	bl	8001974 <setUserErase>
                    subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 80001ec:	2001      	movs	r0, #1
 80001ee:	f003 fb1d 	bl	800382c <getNextSub>
 80001f2:	4603      	mov	r3, r0
 80001f4:	461a      	mov	r2, r3
 80001f6:	693b      	ldr	r3, [r7, #16]
 80001f8:	70da      	strb	r2, [r3, #3]
 80001fa:	e043      	b.n	8000284 <eraseStateMachine+0x114>
                }
                else if(key == CONFIRMAR)
 80001fc:	7dfb      	ldrb	r3, [r7, #23]
 80001fe:	2b43      	cmp	r3, #67	; 0x43
 8000200:	d140      	bne.n	8000284 <eraseStateMachine+0x114>
                {
                	resetKeyPressed();
 8000202:	f004 f8ed 	bl	80043e0 <resetKeyPressed>
                    if(*ptr_eraseString == '5')
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b35      	cmp	r3, #53	; 0x35
 800020c:	d11a      	bne.n	8000244 <eraseStateMachine+0xd4>
                    {
                        updateUserMsg(3,2,erasingUserMsg,&displayUpdateStatus);
 800020e:	4b23      	ldr	r3, [pc, #140]	; (800029c <eraseStateMachine+0x12c>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	f107 030a 	add.w	r3, r7, #10
 8000216:	2102      	movs	r1, #2
 8000218:	2003      	movs	r0, #3
 800021a:	f001 fea9 	bl	8001f70 <updateUserMsg>
                        resetMyResults();
 800021e:	f001 f8e3 	bl	80013e8 <resetMyResults>
                        subMenuErase->menuSelect = setSelectSub(&subMenuErase->menuState);
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	3303      	adds	r3, #3
 8000226:	4618      	mov	r0, r3
 8000228:	f003 fb12 	bl	8003850 <setSelectSub>
 800022c:	4603      	mov	r3, r0
 800022e:	461a      	mov	r2, r3
 8000230:	693b      	ldr	r3, [r7, #16]
 8000232:	705a      	strb	r2, [r3, #1]
                        subMenuErase->menuState = getNextSub(CONFIRMA_APAGAR);
 8000234:	2002      	movs	r0, #2
 8000236:	f003 faf9 	bl	800382c <getNextSub>
 800023a:	4603      	mov	r3, r0
 800023c:	461a      	mov	r2, r3
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	70da      	strb	r2, [r3, #3]
 8000242:	e01f      	b.n	8000284 <eraseStateMachine+0x114>
                    }
                    else if(*ptr_eraseString == '2')
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b32      	cmp	r3, #50	; 0x32
 800024a:	d11b      	bne.n	8000284 <eraseStateMachine+0x114>
                    {
                     subMenuErase->menuState = getNextSub(IDDLE);
 800024c:	2000      	movs	r0, #0
 800024e:	f003 faed 	bl	800382c <getNextSub>
 8000252:	4603      	mov	r3, r0
 8000254:	461a      	mov	r2, r3
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	70da      	strb	r2, [r3, #3]
                      key = MENU;
 800025a:	234d      	movs	r3, #77	; 0x4d
 800025c:	75fb      	strb	r3, [r7, #23]
                    }
                }

            break;
 800025e:	e011      	b.n	8000284 <eraseStateMachine+0x114>

            case CONFIRMA_APAGAR:
                updateUserMsg(3,2,erasedUserMsg,&displayUpdateStatus);
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <eraseStateMachine+0x130>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	f107 030a 	add.w	r3, r7, #10
 8000268:	2102      	movs	r1, #2
 800026a:	2003      	movs	r0, #3
 800026c:	f001 fe80 	bl	8001f70 <updateUserMsg>
                subMenuErase->menuState = getNextSub(IDDLE);
 8000270:	2000      	movs	r0, #0
 8000272:	f003 fadb 	bl	800382c <getNextSub>
 8000276:	4603      	mov	r3, r0
 8000278:	461a      	mov	r2, r3
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	70da      	strb	r2, [r3, #3]
                key = MENU;
 800027e:	234d      	movs	r3, #77	; 0x4d
 8000280:	75fb      	strb	r3, [r7, #23]
                break;
 8000282:	bf00      	nop
    while(key != MENU)
 8000284:	7dfb      	ldrb	r3, [r7, #23]
 8000286:	2b4d      	cmp	r3, #77	; 0x4d
 8000288:	f47f af7f 	bne.w	800018a <eraseStateMachine+0x1a>
        }
    }
}
 800028c:	bf00      	nop
 800028e:	4618      	mov	r0, r3
 8000290:	3718      	adds	r7, #24
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	200000a4 	.word	0x200000a4
 800029c:	200000a8 	.word	0x200000a8
 80002a0:	200000ac 	.word	0x200000ac

080002a4 <configStateMachine>:
//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
//verificar se vou usar o codigo abaixo


unsigned char configStateMachine(struct Menu* subMenu)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b0a8      	sub	sp, #160	; 0xa0
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
    unsigned char* ptr_numSeriesString;
    unsigned char* ptr_intervalSeriesString;

    unsigned char userIntervalSaltosTimeString[9];
    struct tm myTime;
	struct tm* configIntervalTimeStruct = &myTime;
 80002ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    struct Menu* subMenuTesteConfigurar = subMenu;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    unsigned char cursorPosition[2] = {0,0};
 80002ba:	2300      	movs	r3, #0
 80002bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    //verificar se vou usar
    struct dataInsert measurementSensor1;
    struct dataInsert measurementSensor2;
    //
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 80002c0:	f000 ff12 	bl	80010e8 <getUserConfigStruct>
 80002c4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    resetConfigStruct(ptr_userConfiguration);
 80002c8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80002cc:	f001 f852 	bl	8001374 <resetConfigStruct>

    //
    unsigned char key = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    unsigned char displayUpdateStatus = IDDLE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	73fb      	strb	r3, [r7, #15]
    short index = 2;
 80002da:	2302      	movs	r3, #2
 80002dc:	81bb      	strh	r3, [r7, #12]
    while(key != MENU)
 80002de:	bf00      	nop
 80002e0:	f000 bca9 	b.w	8000c36 <configStateMachine+0x992>
    {
        switch(subMenuTesteConfigurar->menuState)
 80002e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80002e8:	78db      	ldrb	r3, [r3, #3]
 80002ea:	2b0d      	cmp	r3, #13
 80002ec:	f200 84a3 	bhi.w	8000c36 <configStateMachine+0x992>
 80002f0:	a201      	add	r2, pc, #4	; (adr r2, 80002f8 <configStateMachine+0x54>)
 80002f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f6:	bf00      	nop
 80002f8:	08000331 	.word	0x08000331
 80002fc:	08000345 	.word	0x08000345
 8000300:	080003df 	.word	0x080003df
 8000304:	08000477 	.word	0x08000477
 8000308:	08000539 	.word	0x08000539
 800030c:	080005fb 	.word	0x080005fb
 8000310:	080006d1 	.word	0x080006d1
 8000314:	080007ab 	.word	0x080007ab
 8000318:	0800088d 	.word	0x0800088d
 800031c:	08000939 	.word	0x08000939
 8000320:	080009ff 	.word	0x080009ff
 8000324:	08000add 	.word	0x08000add
 8000328:	08000b73 	.word	0x08000b73
 800032c:	08000c07 	.word	0x08000c07
        {
        case IDDLE:
            subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000330:	2001      	movs	r0, #1
 8000332:	f003 fa7b 	bl	800382c <getNextSub>
 8000336:	4603      	mov	r3, r0
 8000338:	461a      	mov	r2, r3
 800033a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800033e:	70da      	strb	r2, [r3, #3]

            break;
 8000340:	f000 bc79 	b.w	8000c36 <configStateMachine+0x992>
            case CONFIG_SENSOR_1:
                updateUserMsg(0,0,sensor1UserMsg,&displayUpdateStatus);
 8000344:	4bdd      	ldr	r3, [pc, #884]	; (80006bc <configStateMachine+0x418>)
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	f107 030f 	add.w	r3, r7, #15
 800034c:	2100      	movs	r1, #0
 800034e:	2000      	movs	r0, #0
 8000350:	f001 fe0e 	bl	8001f70 <updateUserMsg>
                key = getKeyPressed();
 8000354:	f004 f838 	bl	80043c8 <getKeyPressed>
 8000358:	4603      	mov	r3, r0
 800035a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == AVANCAR)
 800035e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000362:	2b41      	cmp	r3, #65	; 0x41
 8000364:	d113      	bne.n	800038e <configStateMachine+0xea>
                {
                	resetKeyPressed();
 8000366:	f004 f83b 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800036a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800036e:	f107 030f 	add.w	r3, r7, #15
 8000372:	4611      	mov	r1, r2
 8000374:	4618      	mov	r0, r3
 8000376:	f001 fe19 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_2);
 800037a:	2002      	movs	r0, #2
 800037c:	f003 fa56 	bl	800382c <getNextSub>
 8000380:	4603      	mov	r3, r0
 8000382:	461a      	mov	r2, r3
 8000384:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000388:	70da      	strb	r2, [r3, #3]
 800038a:	f000 bc54 	b.w	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 800038e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000392:	2b43      	cmp	r3, #67	; 0x43
 8000394:	f040 844f 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 8000398:	f004 f822 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800039c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80003a0:	f107 030f 	add.w	r3, r7, #15
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fe00 	bl	8001fac <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 1;
 80003ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80003b0:	2201      	movs	r2, #1
 80003b2:	755a      	strb	r2, [r3, #21]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80003b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80003b8:	3303      	adds	r3, #3
 80003ba:	4618      	mov	r0, r3
 80003bc:	f003 fa48 	bl	8003850 <setSelectSub>
 80003c0:	4603      	mov	r3, r0
 80003c2:	461a      	mov	r2, r3
 80003c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80003c8:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 80003ca:	2003      	movs	r0, #3
 80003cc:	f003 fa2e 	bl	800382c <getNextSub>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80003d8:	70da      	strb	r2, [r3, #3]
                }

                break;
 80003da:	f000 bc2c 	b.w	8000c36 <configStateMachine+0x992>

            case CONFIG_SENSOR_2:
                updateUserMsg(0,0,sensor2UserMsg,&displayUpdateStatus);
 80003de:	4bb8      	ldr	r3, [pc, #736]	; (80006c0 <configStateMachine+0x41c>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	f107 030f 	add.w	r3, r7, #15
 80003e6:	2100      	movs	r1, #0
 80003e8:	2000      	movs	r0, #0
 80003ea:	f001 fdc1 	bl	8001f70 <updateUserMsg>
                key = getKeyPressed();
 80003ee:	f003 ffeb 	bl	80043c8 <getKeyPressed>
 80003f2:	4603      	mov	r3, r0
 80003f4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == AVANCAR)
 80003f8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80003fc:	2b41      	cmp	r3, #65	; 0x41
 80003fe:	d113      	bne.n	8000428 <configStateMachine+0x184>
                {
                	resetKeyPressed();
 8000400:	f003 ffee 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000404:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000408:	f107 030f 	add.w	r3, r7, #15
 800040c:	4611      	mov	r1, r2
 800040e:	4618      	mov	r0, r3
 8000410:	f001 fdcc 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000414:	2001      	movs	r0, #1
 8000416:	f003 fa09 	bl	800382c <getNextSub>
 800041a:	4603      	mov	r3, r0
 800041c:	461a      	mov	r2, r3
 800041e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000422:	70da      	strb	r2, [r3, #3]
 8000424:	f000 bc07 	b.w	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 8000428:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800042c:	2b43      	cmp	r3, #67	; 0x43
 800042e:	f040 8402 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 8000432:	f003 ffd5 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000436:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800043a:	f107 030f 	add.w	r3, r7, #15
 800043e:	4611      	mov	r1, r2
 8000440:	4618      	mov	r0, r3
 8000442:	f001 fdb3 	bl	8001fac <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 2;
 8000446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800044a:	2202      	movs	r2, #2
 800044c:	755a      	strb	r2, [r3, #21]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 800044e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000452:	3303      	adds	r3, #3
 8000454:	4618      	mov	r0, r3
 8000456:	f003 f9fb 	bl	8003850 <setSelectSub>
 800045a:	4603      	mov	r3, r0
 800045c:	461a      	mov	r2, r3
 800045e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000462:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8000464:	2003      	movs	r0, #3
 8000466:	f003 f9e1 	bl	800382c <getNextSub>
 800046a:	4603      	mov	r3, r0
 800046c:	461a      	mov	r2, r3
 800046e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000472:	70da      	strb	r2, [r3, #3]
                }
                break;
 8000474:	e3df      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_ALTMIN:
                updateUserMsg(0,0,altminUserMsg,&displayUpdateStatus);
 8000476:	4b93      	ldr	r3, [pc, #588]	; (80006c4 <configStateMachine+0x420>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	f107 030f 	add.w	r3, r7, #15
 800047e:	2100      	movs	r1, #0
 8000480:	2000      	movs	r0, #0
 8000482:	f001 fd75 	bl	8001f70 <updateUserMsg>
                ptr_altMinString = getAltMinString();
 8000486:	f001 f8c1 	bl	800160c <getAltMinString>
 800048a:	6778      	str	r0, [r7, #116]	; 0x74
                printDataDisplay(0,1,ptr_altMinString);
 800048c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800048e:	2101      	movs	r1, #1
 8000490:	2000      	movs	r0, #0
 8000492:	f002 fce1 	bl	8002e58 <printDataDisplay>
                updateDataDisplay(index,1);
 8000496:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800049a:	2101      	movs	r1, #1
 800049c:	4618      	mov	r0, r3
 800049e:	f002 fcf5 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 80004a2:	f003 ff91 	bl	80043c8 <getKeyPressed>
 80004a6:	4603      	mov	r3, r0
 80004a8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 80004ac:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80004b0:	2b49      	cmp	r3, #73	; 0x49
 80004b2:	d10f      	bne.n	80004d4 <configStateMachine+0x230>
                {
                	resetKeyPressed();
 80004b4:	f003 ff94 	bl	80043e0 <resetKeyPressed>
                    setUserAltMin(&index);
 80004b8:	f107 030c 	add.w	r3, r7, #12
 80004bc:	4618      	mov	r0, r3
 80004be:	f001 fa35 	bl	800192c <setUserAltMin>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 80004c2:	2003      	movs	r0, #3
 80004c4:	f003 f9b2 	bl	800382c <getNextSub>
 80004c8:	4603      	mov	r3, r0
 80004ca:	461a      	mov	r2, r3
 80004cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80004d0:	70da      	strb	r2, [r3, #3]
 80004d2:	e3b0      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == AVANCAR)
 80004d4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80004d8:	2b41      	cmp	r3, #65	; 0x41
 80004da:	d108      	bne.n	80004ee <configStateMachine+0x24a>
                {
                	resetKeyPressed();
 80004dc:	f003 ff80 	bl	80043e0 <resetKeyPressed>
                    indexChange(&index,2);
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	2102      	movs	r1, #2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 f872 	bl	80015d0 <indexChange>
 80004ec:	e3a3      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 80004ee:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80004f2:	2b43      	cmp	r3, #67	; 0x43
 80004f4:	f040 839f 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 80004f8:	f003 ff72 	bl	80043e0 <resetKeyPressed>
                    index = 2;
 80004fc:	2302      	movs	r3, #2
 80004fe:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000500:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000504:	f107 030f 	add.w	r3, r7, #15
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fd4e 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 8000510:	2004      	movs	r0, #4
 8000512:	f003 f98b 	bl	800382c <getNextSub>
 8000516:	4603      	mov	r3, r0
 8000518:	461a      	mov	r2, r3
 800051a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800051e:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000520:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000524:	3303      	adds	r3, #3
 8000526:	4618      	mov	r0, r3
 8000528:	f003 f992 	bl	8003850 <setSelectSub>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000534:	705a      	strb	r2, [r3, #1]
                }
                break;
 8000536:	e37e      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_ALTMAX:
                updateUserMsg(0,0,altmaxUserMsg,&displayUpdateStatus);
 8000538:	4b63      	ldr	r3, [pc, #396]	; (80006c8 <configStateMachine+0x424>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	f107 030f 	add.w	r3, r7, #15
 8000540:	2100      	movs	r1, #0
 8000542:	2000      	movs	r0, #0
 8000544:	f001 fd14 	bl	8001f70 <updateUserMsg>
                ptr_altMaxString = getAltMaxString();
 8000548:	f001 f880 	bl	800164c <getAltMaxString>
 800054c:	67b8      	str	r0, [r7, #120]	; 0x78
                printDataDisplay(0,1,ptr_altMaxString);
 800054e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000550:	2101      	movs	r1, #1
 8000552:	2000      	movs	r0, #0
 8000554:	f002 fc80 	bl	8002e58 <printDataDisplay>
                updateDataDisplay(index,1);
 8000558:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800055c:	2101      	movs	r1, #1
 800055e:	4618      	mov	r0, r3
 8000560:	f002 fc94 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 8000564:	f003 ff30 	bl	80043c8 <getKeyPressed>
 8000568:	4603      	mov	r3, r0
 800056a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 800056e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000572:	2b49      	cmp	r3, #73	; 0x49
 8000574:	d10f      	bne.n	8000596 <configStateMachine+0x2f2>
                {
                	resetKeyPressed();
 8000576:	f003 ff33 	bl	80043e0 <resetKeyPressed>
                    setUserAltMax(&index);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4618      	mov	r0, r3
 8000580:	f001 fa1d 	bl	80019be <setUserAltMax>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 8000584:	2004      	movs	r0, #4
 8000586:	f003 f951 	bl	800382c <getNextSub>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000592:	70da      	strb	r2, [r3, #3]
 8000594:	e34f      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == AVANCAR)
 8000596:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800059a:	2b41      	cmp	r3, #65	; 0x41
 800059c:	d108      	bne.n	80005b0 <configStateMachine+0x30c>
                {
                	resetKeyPressed();
 800059e:	f003 ff1f 	bl	80043e0 <resetKeyPressed>
                    indexChange(&index,2);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2102      	movs	r1, #2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 f811 	bl	80015d0 <indexChange>
 80005ae:	e342      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 80005b0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80005b4:	2b43      	cmp	r3, #67	; 0x43
 80005b6:	f040 833e 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 80005ba:	f003 ff11 	bl	80043e0 <resetKeyPressed>
                    index = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80005c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80005c6:	f107 030f 	add.w	r3, r7, #15
 80005ca:	4611      	mov	r1, r2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fced 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 80005d2:	2005      	movs	r0, #5
 80005d4:	f003 f92a 	bl	800382c <getNextSub>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005e0:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80005e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005e6:	3303      	adds	r3, #3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 f931 	bl	8003850 <setSelectSub>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005f6:	705a      	strb	r2, [r3, #1]
                }

                break;
 80005f8:	e31d      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_SALTOS:
                updateUserMsg(0,0,numsaltosUserMsg,&displayUpdateStatus);
 80005fa:	4b34      	ldr	r3, [pc, #208]	; (80006cc <configStateMachine+0x428>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f107 030f 	add.w	r3, r7, #15
 8000602:	2100      	movs	r1, #0
 8000604:	2000      	movs	r0, #0
 8000606:	f001 fcb3 	bl	8001f70 <updateUserMsg>
                ptr_numSaltosString = getNumSaltosString();
 800060a:	f001 f83f 	bl	800168c <getNumSaltosString>
 800060e:	67f8      	str	r0, [r7, #124]	; 0x7c
                printDataDisplay(0,1,ptr_numSaltosString);
 8000610:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000612:	2101      	movs	r1, #1
 8000614:	2000      	movs	r0, #0
 8000616:	f002 fc1f 	bl	8002e58 <printDataDisplay>
                updateDataDisplay(index,1);
 800061a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800061e:	2101      	movs	r1, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fc33 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 8000626:	f003 fecf 	bl	80043c8 <getKeyPressed>
 800062a:	4603      	mov	r3, r0
 800062c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 8000630:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000634:	2b49      	cmp	r3, #73	; 0x49
 8000636:	d10f      	bne.n	8000658 <configStateMachine+0x3b4>
                {
                	resetKeyPressed();
 8000638:	f003 fed2 	bl	80043e0 <resetKeyPressed>
                    setUserNumSaltos(&index);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f9e0 	bl	8001a06 <setUserNumSaltos>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 8000646:	2005      	movs	r0, #5
 8000648:	f003 f8f0 	bl	800382c <getNextSub>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000654:	70da      	strb	r2, [r3, #3]
 8000656:	e2ee      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == AVANCAR)
 8000658:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800065c:	2b41      	cmp	r3, #65	; 0x41
 800065e:	d108      	bne.n	8000672 <configStateMachine+0x3ce>
                {
                	resetKeyPressed();
 8000660:	f003 febe 	bl	80043e0 <resetKeyPressed>
                    indexChange(&index,2);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2102      	movs	r1, #2
 800066a:	4618      	mov	r0, r3
 800066c:	f000 ffb0 	bl	80015d0 <indexChange>
 8000670:	e2e1      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 8000672:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000676:	2b43      	cmp	r3, #67	; 0x43
 8000678:	f040 82dd 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 800067c:	f003 feb0 	bl	80043e0 <resetKeyPressed>
                    index = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000684:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000688:	f107 030f 	add.w	r3, r7, #15
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fc8c 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 8000694:	2006      	movs	r0, #6
 8000696:	f003 f8c9 	bl	800382c <getNextSub>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006a2:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80006a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006a8:	3303      	adds	r3, #3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 f8d0 	bl	8003850 <setSelectSub>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006b8:	705a      	strb	r2, [r3, #1]
                }
                break;
 80006ba:	e2bc      	b.n	8000c36 <configStateMachine+0x992>
 80006bc:	20000064 	.word	0x20000064
 80006c0:	20000068 	.word	0x20000068
 80006c4:	2000006c 	.word	0x2000006c
 80006c8:	20000070 	.word	0x20000070
 80006cc:	20000074 	.word	0x20000074

            case SENSOR_INT_SALTOS:
                updateUserMsg(0,0,intersaltosUserMsg,&displayUpdateStatus);
 80006d0:	4be3      	ldr	r3, [pc, #908]	; (8000a60 <configStateMachine+0x7bc>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	f107 030f 	add.w	r3, r7, #15
 80006d8:	2100      	movs	r1, #0
 80006da:	2000      	movs	r0, #0
 80006dc:	f001 fc48 	bl	8001f70 <updateUserMsg>
                configIntervalTimeStruct = getIntervalTimeStruct();
 80006e0:	f000 fc8a 	bl	8000ff8 <getIntervalTimeStruct>
 80006e4:	4603      	mov	r3, r0
 80006e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                strftime(userIntervalSaltosTimeString, sizeof(userIntervalSaltosTimeString), "%M:%S", configIntervalTimeStruct);
 80006ea:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80006ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006f2:	4adc      	ldr	r2, [pc, #880]	; (8000a64 <configStateMachine+0x7c0>)
 80006f4:	2109      	movs	r1, #9
 80006f6:	f009 fbbd 	bl	8009e74 <strftime>
                printDataDisplay(0,1,userIntervalSaltosTimeString);
 80006fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	2000      	movs	r0, #0
 8000704:	f002 fba8 	bl	8002e58 <printDataDisplay>
                updateDataDisplay(index,1);
 8000708:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800070c:	2101      	movs	r1, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fbbc 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 8000714:	f003 fe58 	bl	80043c8 <getKeyPressed>
 8000718:	4603      	mov	r3, r0
 800071a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 800071e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000722:	2b49      	cmp	r3, #73	; 0x49
 8000724:	d10f      	bne.n	8000746 <configStateMachine+0x4a2>
                {
                	resetKeyPressed();
 8000726:	f003 fe5b 	bl	80043e0 <resetKeyPressed>
                	setIntervalSaltosTime(&index);
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fa8a 	bl	8001c48 <setIntervalSaltosTime>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 8000734:	2006      	movs	r0, #6
 8000736:	f003 f879 	bl	800382c <getNextSub>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000742:	70da      	strb	r2, [r3, #3]
 8000744:	e277      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == AVANCAR)
 8000746:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800074a:	2b41      	cmp	r3, #65	; 0x41
 800074c:	d108      	bne.n	8000760 <configStateMachine+0x4bc>
				{
					resetKeyPressed();
 800074e:	f003 fe47 	bl	80043e0 <resetKeyPressed>
					indexColumn(&index,4);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2104      	movs	r1, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f000 feb1 	bl	80014c0 <indexColumn>
 800075e:	e26a      	b.n	8000c36 <configStateMachine+0x992>
				}
                else if(key == CONFIRMAR)
 8000760:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000764:	2b43      	cmp	r3, #67	; 0x43
 8000766:	f040 8266 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 800076a:	f003 fe39 	bl	80043e0 <resetKeyPressed>
                    index = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000772:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000776:	f107 030f 	add.w	r3, r7, #15
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fc15 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 8000782:	2007      	movs	r0, #7
 8000784:	f003 f852 	bl	800382c <getNextSub>
 8000788:	4603      	mov	r3, r0
 800078a:	461a      	mov	r2, r3
 800078c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000790:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000792:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000796:	3303      	adds	r3, #3
 8000798:	4618      	mov	r0, r3
 800079a:	f003 f859 	bl	8003850 <setSelectSub>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007a6:	705a      	strb	r2, [r3, #1]
                }

                break;
 80007a8:	e245      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_JMP_SELECT:
                updateUserMsg(0,0,tiposaltoUserMsg,&displayUpdateStatus);
 80007aa:	4baf      	ldr	r3, [pc, #700]	; (8000a68 <configStateMachine+0x7c4>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	f107 030f 	add.w	r3, r7, #15
 80007b2:	2100      	movs	r1, #0
 80007b4:	2000      	movs	r0, #0
 80007b6:	f001 fbdb 	bl	8001f70 <updateUserMsg>
                ptr_jumpSelectString = getTypeJumpString();
 80007ba:	f000 ff87 	bl	80016cc <getTypeJumpString>
 80007be:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                printDataDisplay(0,1,ptr_jumpSelectString);
 80007c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80007c6:	2101      	movs	r1, #1
 80007c8:	2000      	movs	r0, #0
 80007ca:	f002 fb45 	bl	8002e58 <printDataDisplay>
                updateDataDisplay(index,1);
 80007ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007d2:	2101      	movs	r1, #1
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fb59 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 80007da:	f003 fdf5 	bl	80043c8 <getKeyPressed>
 80007de:	4603      	mov	r3, r0
 80007e0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 80007e4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80007e8:	2b49      	cmp	r3, #73	; 0x49
 80007ea:	d10f      	bne.n	800080c <configStateMachine+0x568>
                {
                	resetKeyPressed();
 80007ec:	f003 fdf8 	bl	80043e0 <resetKeyPressed>
                    setUserTypeJump(&index);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 f92a 	bl	8001a4e <setUserTypeJump>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 80007fa:	2007      	movs	r0, #7
 80007fc:	f003 f816 	bl	800382c <getNextSub>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000808:	70da      	strb	r2, [r3, #3]
 800080a:	e214      	b.n	8000c36 <configStateMachine+0x992>

                }
                else if(key == CONFIRMAR)
 800080c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000810:	2b43      	cmp	r3, #67	; 0x43
 8000812:	f040 8210 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 8000816:	f003 fde3 	bl	80043e0 <resetKeyPressed>
                    if(*ptr_jumpSelectString == '3')
 800081a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b33      	cmp	r3, #51	; 0x33
 8000822:	d115      	bne.n	8000850 <configStateMachine+0x5ac>
                    {
                    	index = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 8000828:	2008      	movs	r0, #8
 800082a:	f002 ffff 	bl	800382c <getNextSub>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000836:	70da      	strb	r2, [r3, #3]
                        subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000838:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800083c:	3303      	adds	r3, #3
 800083e:	4618      	mov	r0, r3
 8000840:	f003 f806 	bl	8003850 <setSelectSub>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800084c:	705a      	strb	r2, [r3, #1]
 800084e:	e014      	b.n	800087a <configStateMachine+0x5d6>
                    }
                    else
                    {
                    	index = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8000854:	2009      	movs	r0, #9
 8000856:	f002 ffe9 	bl	800382c <getNextSub>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000862:	70da      	strb	r2, [r3, #3]
                        subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000864:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000868:	3303      	adds	r3, #3
 800086a:	4618      	mov	r0, r3
 800086c:	f002 fff0 	bl	8003850 <setSelectSub>
 8000870:	4603      	mov	r3, r0
 8000872:	461a      	mov	r2, r3
 8000874:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000878:	705a      	strb	r2, [r3, #1]
                    }
                    //TESTE trocar a variavel por uma local e o resultado enviar para ptr_userConfiguration->userCMJ.
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800087a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800087e:	f107 030f 	add.w	r3, r7, #15
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fb91 	bl	8001fac <readyUserInterface>

                }

                break;
 800088a:	e1d4      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_ALTDJ:
                updateUserMsg(0,0,altdjUserMsg,&displayUpdateStatus);
 800088c:	4b77      	ldr	r3, [pc, #476]	; (8000a6c <configStateMachine+0x7c8>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	f107 030f 	add.w	r3, r7, #15
 8000894:	2100      	movs	r1, #0
 8000896:	2000      	movs	r0, #0
 8000898:	f001 fb6a 	bl	8001f70 <updateUserMsg>
                ptr_altDJString = getAltDJString();
 800089c:	f000 ff2c 	bl	80016f8 <getAltDJString>
 80008a0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                printDataDisplay(0,1,ptr_altDJString);
 80008a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80008a8:	2101      	movs	r1, #1
 80008aa:	2000      	movs	r0, #0
 80008ac:	f002 fad4 	bl	8002e58 <printDataDisplay>
                updateDataDisplay(index,1);
 80008b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008b4:	2101      	movs	r1, #1
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 fae8 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 80008bc:	f003 fd84 	bl	80043c8 <getKeyPressed>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 80008c6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80008ca:	2b49      	cmp	r3, #73	; 0x49
 80008cc:	d10f      	bne.n	80008ee <configStateMachine+0x64a>
                {
                	resetKeyPressed();
 80008ce:	f003 fd87 	bl	80043e0 <resetKeyPressed>
                    setUserAltDJ(&index);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 f8dd 	bl	8001a96 <setUserAltDJ>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 80008dc:	2008      	movs	r0, #8
 80008de:	f002 ffa5 	bl	800382c <getNextSub>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008ea:	70da      	strb	r2, [r3, #3]
 80008ec:	e1a3      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 80008ee:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80008f2:	2b43      	cmp	r3, #67	; 0x43
 80008f4:	f040 819f 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 80008f8:	f003 fd72 	bl	80043e0 <resetKeyPressed>
                    index = 2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000900:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000904:	f107 030f 	add.w	r3, r7, #15
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fb4e 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8000910:	2009      	movs	r0, #9
 8000912:	f002 ff8b 	bl	800382c <getNextSub>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800091e:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000924:	3303      	adds	r3, #3
 8000926:	4618      	mov	r0, r3
 8000928:	f002 ff92 	bl	8003850 <setSelectSub>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000934:	705a      	strb	r2, [r3, #1]
                }

                break;
 8000936:	e17e      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_SERIES:
                updateUserMsg(0,0,numserieUserMsg,&displayUpdateStatus);
 8000938:	4b4d      	ldr	r3, [pc, #308]	; (8000a70 <configStateMachine+0x7cc>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	f107 030f 	add.w	r3, r7, #15
 8000940:	2100      	movs	r1, #0
 8000942:	2000      	movs	r0, #0
 8000944:	f001 fb14 	bl	8001f70 <updateUserMsg>
                ptr_numSeriesString = getNumSeriesString();
 8000948:	f000 fef0 	bl	800172c <getNumSeriesString>
 800094c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                printDataDisplay(0,1,ptr_numSeriesString);
 8000950:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000954:	2101      	movs	r1, #1
 8000956:	2000      	movs	r0, #0
 8000958:	f002 fa7e 	bl	8002e58 <printDataDisplay>
                updateDataDisplay(index,1);
 800095c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000960:	2101      	movs	r1, #1
 8000962:	4618      	mov	r0, r3
 8000964:	f002 fa92 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 8000968:	f003 fd2e 	bl	80043c8 <getKeyPressed>
 800096c:	4603      	mov	r3, r0
 800096e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 8000972:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000976:	2b49      	cmp	r3, #73	; 0x49
 8000978:	d10f      	bne.n	800099a <configStateMachine+0x6f6>
                {
                	resetKeyPressed();
 800097a:	f003 fd31 	bl	80043e0 <resetKeyPressed>
                    setUserNumSeries(&index);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f8ab 	bl	8001ade <setUserNumSeries>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8000988:	2009      	movs	r0, #9
 800098a:	f002 ff4f 	bl	800382c <getNextSub>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000996:	70da      	strb	r2, [r3, #3]
 8000998:	e14d      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == AVANCAR)
 800099a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800099e:	2b41      	cmp	r3, #65	; 0x41
 80009a0:	d108      	bne.n	80009b4 <configStateMachine+0x710>
				{
					resetKeyPressed();
 80009a2:	f003 fd1d 	bl	80043e0 <resetKeyPressed>
					indexColumn(&index,2);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	2102      	movs	r1, #2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fd87 	bl	80014c0 <indexColumn>
 80009b2:	e140      	b.n	8000c36 <configStateMachine+0x992>
				}
                else if(key == CONFIRMAR)
 80009b4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80009b8:	2b43      	cmp	r3, #67	; 0x43
 80009ba:	f040 813c 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 80009be:	f003 fd0f 	bl	80043e0 <resetKeyPressed>
                    index = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80009c6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80009ca:	f107 030f 	add.w	r3, r7, #15
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 faeb 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 80009d6:	200a      	movs	r0, #10
 80009d8:	f002 ff28 	bl	800382c <getNextSub>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009e4:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80009e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009ea:	3303      	adds	r3, #3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 ff2f 	bl	8003850 <setSelectSub>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009fa:	705a      	strb	r2, [r3, #1]
                }

                break;
 80009fc:	e11b      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_INT_SERIES:
                updateUserMsg(0,0,interseriesUserMsg,&displayUpdateStatus);
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <configStateMachine+0x7d0>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	f107 030f 	add.w	r3, r7, #15
 8000a06:	2100      	movs	r1, #0
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 fab1 	bl	8001f70 <updateUserMsg>
                ptr_intervalSeriesString = getIntervalSeriesString();
 8000a0e:	f000 fead 	bl	800176c <getIntervalSeriesString>
 8000a12:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                printDataDisplay(0,1,ptr_intervalSeriesString);
 8000a16:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f002 fa1b 	bl	8002e58 <printDataDisplay>
                updateDataDisplay(index,1);
 8000a22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a26:	2101      	movs	r1, #1
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fa2f 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 8000a2e:	f003 fccb 	bl	80043c8 <getKeyPressed>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 8000a38:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000a3c:	2b49      	cmp	r3, #73	; 0x49
 8000a3e:	d11b      	bne.n	8000a78 <configStateMachine+0x7d4>
                {
                	resetKeyPressed();
 8000a40:	f003 fcce 	bl	80043e0 <resetKeyPressed>
                    setUserIntervalSeries(&index);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 f86c 	bl	8001b26 <setUserIntervalSeries>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f002 feec 	bl	800382c <getNextSub>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a5c:	70da      	strb	r2, [r3, #3]
 8000a5e:	e0ea      	b.n	8000c36 <configStateMachine+0x992>
 8000a60:	20000078 	.word	0x20000078
 8000a64:	0800ba60 	.word	0x0800ba60
 8000a68:	2000007c 	.word	0x2000007c
 8000a6c:	20000080 	.word	0x20000080
 8000a70:	20000084 	.word	0x20000084
 8000a74:	20000088 	.word	0x20000088
                }
                else if(key == AVANCAR)
 8000a78:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000a7c:	2b41      	cmp	r3, #65	; 0x41
 8000a7e:	d108      	bne.n	8000a92 <configStateMachine+0x7ee>
				{
					resetKeyPressed();
 8000a80:	f003 fcae 	bl	80043e0 <resetKeyPressed>
					indexColumn(&index,2);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fd18 	bl	80014c0 <indexColumn>
 8000a90:	e0d1      	b.n	8000c36 <configStateMachine+0x992>
				}
                else if(key == CONFIRMAR)
 8000a92:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000a96:	2b43      	cmp	r3, #67	; 0x43
 8000a98:	f040 80cd 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 8000a9c:	f003 fca0 	bl	80043e0 <resetKeyPressed>
                    index = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000aa4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000aa8:	f107 030f 	add.w	r3, r7, #15
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fa7c 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8000ab4:	200b      	movs	r0, #11
 8000ab6:	f002 feb9 	bl	800382c <getNextSub>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ac2:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000ac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ac8:	3303      	adds	r3, #3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fec0 	bl	8003850 <setSelectSub>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ad8:	705a      	strb	r2, [r3, #1]
                }

            break;
 8000ada:	e0ac      	b.n	8000c36 <configStateMachine+0x992>

            case TAPETE_ON:
                updateUserMsg(0,0,intapeteUserMsg,&displayUpdateStatus);
 8000adc:	4b5b      	ldr	r3, [pc, #364]	; (8000c4c <configStateMachine+0x9a8>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	f107 030f 	add.w	r3, r7, #15
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f001 fa42 	bl	8001f70 <updateUserMsg>
                key = getKeyPressed();
 8000aec:	f003 fc6c 	bl	80043c8 <getKeyPressed>
 8000af0:	4603      	mov	r3, r0
 8000af2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == AVANCAR)
 8000af6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000afa:	2b41      	cmp	r3, #65	; 0x41
 8000afc:	d112      	bne.n	8000b24 <configStateMachine+0x880>
                {
                	resetKeyPressed();
 8000afe:	f003 fc6f 	bl	80043e0 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000b02:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b06:	f107 030f 	add.w	r3, r7, #15
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fa4d 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_OFF);
 8000b12:	200c      	movs	r0, #12
 8000b14:	f002 fe8a 	bl	800382c <getNextSub>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b20:	70da      	strb	r2, [r3, #3]
 8000b22:	e088      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 8000b24:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000b28:	2b43      	cmp	r3, #67	; 0x43
 8000b2a:	f040 8084 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 8000b2e:	f003 fc57 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000b32:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b36:	f107 030f 	add.w	r3, r7, #15
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 fa35 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b46:	3303      	adds	r3, #3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fe81 	bl	8003850 <setSelectSub>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b56:	705a      	strb	r2, [r3, #1]
                    ptr_userConfiguration->userSelectTapete = TRUE;
 8000b58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	751a      	strb	r2, [r3, #20]
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 8000b60:	200d      	movs	r0, #13
 8000b62:	f002 fe63 	bl	800382c <getNextSub>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b6e:	70da      	strb	r2, [r3, #3]
                }
                break;
 8000b70:	e061      	b.n	8000c36 <configStateMachine+0x992>

            case TAPETE_OFF:
                updateUserMsg(0,0,outtapeteUserMsg,&displayUpdateStatus);
 8000b72:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <configStateMachine+0x9ac>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	f107 030f 	add.w	r3, r7, #15
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f001 f9f7 	bl	8001f70 <updateUserMsg>
                key = getKeyPressed();
 8000b82:	f003 fc21 	bl	80043c8 <getKeyPressed>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == AVANCAR)
 8000b8c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000b90:	2b41      	cmp	r3, #65	; 0x41
 8000b92:	d112      	bne.n	8000bba <configStateMachine+0x916>
                {
                	resetKeyPressed();
 8000b94:	f003 fc24 	bl	80043e0 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000b98:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b9c:	f107 030f 	add.w	r3, r7, #15
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fa02 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8000ba8:	200b      	movs	r0, #11
 8000baa:	f002 fe3f 	bl	800382c <getNextSub>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bb6:	70da      	strb	r2, [r3, #3]
 8000bb8:	e03d      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 8000bba:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000bbe:	2b43      	cmp	r3, #67	; 0x43
 8000bc0:	d139      	bne.n	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 8000bc2:	f003 fc0d 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000bc6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000bca:	f107 030f 	add.w	r3, r7, #15
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 f9eb 	bl	8001fac <readyUserInterface>
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bda:	3303      	adds	r3, #3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fe37 	bl	8003850 <setSelectSub>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bea:	705a      	strb	r2, [r3, #1]
                    ptr_userConfiguration->userSelectTapete = FALSE;
 8000bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	751a      	strb	r2, [r3, #20]
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 8000bf4:	200d      	movs	r0, #13
 8000bf6:	f002 fe19 	bl	800382c <getNextSub>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c02:	70da      	strb	r2, [r3, #3]
                }
                break;
 8000c04:	e017      	b.n	8000c36 <configStateMachine+0x992>

            case SAVE_CONFIGS:
                subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f002 fe10 	bl	800382c <getNextSub>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c14:	70da      	strb	r2, [r3, #3]
                setInsertData(ptr_userConfiguration);
 8000c16:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8000c1a:	f002 fe2d 	bl	8003878 <setInsertData>
                readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000c1e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c22:	f107 030f 	add.w	r3, r7, #15
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 f9bf 	bl	8001fac <readyUserInterface>
                key = MENU;
 8000c2e:	234d      	movs	r3, #77	; 0x4d
 8000c30:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                break;
 8000c34:	bf00      	nop
    while(key != MENU)
 8000c36:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000c3a:	2b4d      	cmp	r3, #77	; 0x4d
 8000c3c:	f47f ab52 	bne.w	80002e4 <configStateMachine+0x40>
        }
    }
}
 8000c40:	bf00      	nop
 8000c42:	4618      	mov	r0, r3
 8000c44:	37a0      	adds	r7, #160	; 0xa0
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000008c 	.word	0x2000008c
 8000c50:	20000090 	.word	0x20000090

08000c54 <consultStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char consultStateMachine(struct Menu* subMenu)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuTesteConsultar = subMenu;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char* ptr_consultTestString;
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    struct results* ptr_structConsultResult;
    unsigned char selectedUserTest = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char testSamples=0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    unsigned char cursorPosition[2] = {0,0};
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	81bb      	strh	r3, [r7, #12]
    short index = 2; //(000 MENU)
 8000c70:	2302      	movs	r3, #2
 8000c72:	817b      	strh	r3, [r7, #10]
    unsigned char key = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    static unsigned char results = 0;
    unsigned char displayUpdateStatus = IDDLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	727b      	strb	r3, [r7, #9]

    while(key != MENU)
 8000c7e:	bf00      	nop
 8000c80:	e197      	b.n	8000fb2 <consultStateMachine+0x35e>
    {
        switch(subMenuTesteConsultar->menuState)
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	78db      	ldrb	r3, [r3, #3]
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	f200 8193 	bhi.w	8000fb2 <consultStateMachine+0x35e>
 8000c8c:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <consultStateMachine+0x40>)
 8000c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000ca5 	.word	0x08000ca5
 8000c98:	08000cb5 	.word	0x08000cb5
 8000c9c:	08000d6b 	.word	0x08000d6b
 8000ca0:	08000f13 	.word	0x08000f13
        {
            case IDDLE:
                subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f002 fdc1 	bl	800382c <getNextSub>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	70da      	strb	r2, [r3, #3]
            break;
 8000cb2:	e17e      	b.n	8000fb2 <consultStateMachine+0x35e>

            case CONSULTA_TESTE:
                updateUserMsg(0,0,consultTestUserMsg,&displayUpdateStatus);
 8000cb4:	4bc4      	ldr	r3, [pc, #784]	; (8000fc8 <consultStateMachine+0x374>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	f107 0309 	add.w	r3, r7, #9
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f956 	bl	8001f70 <updateUserMsg>
                ptr_consultTestString = getNumTestString();
 8000cc4:	f000 fdbe 	bl	8001844 <getNumTestString>
 8000cc8:	62f8      	str	r0, [r7, #44]	; 0x2c
                printDataDisplay(0,1,ptr_consultTestString);
 8000cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ccc:	2101      	movs	r1, #1
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f002 f8c2 	bl	8002e58 <printDataDisplay>
                updateDataDisplay(index,1);
 8000cd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 f8d6 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 8000ce0:	f003 fb72 	bl	80043c8 <getKeyPressed>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if(key == INSERIR)
 8000cea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000cee:	2b49      	cmp	r3, #73	; 0x49
 8000cf0:	d10e      	bne.n	8000d10 <consultStateMachine+0xbc>
                {
                	resetKeyPressed();
 8000cf2:	f003 fb75 	bl	80043e0 <resetKeyPressed>
                    setUserNumTest(&index);
 8000cf6:	f107 030a 	add.w	r3, r7, #10
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 ff7f 	bl	8001bfe <setUserNumTest>
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f002 fd93 	bl	800382c <getNextSub>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	70da      	strb	r2, [r3, #3]
 8000d0e:	e150      	b.n	8000fb2 <consultStateMachine+0x35e>
                }
                else if(key == AVANCAR)
 8000d10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d14:	2b41      	cmp	r3, #65	; 0x41
 8000d16:	d108      	bne.n	8000d2a <consultStateMachine+0xd6>
                {
                	resetKeyPressed();
 8000d18:	f003 fb62 	bl	80043e0 <resetKeyPressed>
                    indexChange(&index,2);
 8000d1c:	f107 030a 	add.w	r3, r7, #10
 8000d20:	2102      	movs	r1, #2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fc54 	bl	80015d0 <indexChange>
 8000d28:	e143      	b.n	8000fb2 <consultStateMachine+0x35e>
                }
                else if(key == CONFIRMAR)
 8000d2a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d2e:	2b43      	cmp	r3, #67	; 0x43
 8000d30:	f040 813f 	bne.w	8000fb2 <consultStateMachine+0x35e>
                {
                	resetKeyPressed();
 8000d34:	f003 fb54 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000d38:	f107 020c 	add.w	r2, r7, #12
 8000d3c:	f107 0309 	add.w	r3, r7, #9
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 f932 	bl	8001fac <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f002 fd6f 	bl	800382c <getNextSub>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	3303      	adds	r3, #3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fd78 	bl	8003850 <setSelectSub>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	705a      	strb	r2, [r3, #1]
                }
            break;
 8000d68:	e123      	b.n	8000fb2 <consultStateMachine+0x35e>

            case RESULT_TESTE:
            	updateUserMsg(0,0,consultTestUserMsg,&displayUpdateStatus);
 8000d6a:	4b97      	ldr	r3, [pc, #604]	; (8000fc8 <consultStateMachine+0x374>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	f107 0309 	add.w	r3, r7, #9
 8000d72:	2100      	movs	r1, #0
 8000d74:	2000      	movs	r0, #0
 8000d76:	f001 f8fb 	bl	8001f70 <updateUserMsg>
                selectedUserTest = stringToInt(ptr_consultTestString);
 8000d7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d7c:	f000 fbed 	bl	800155a <stringToInt>
 8000d80:	4603      	mov	r3, r0
 8000d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                ptr_structConsultResult = load_data(selectedUserTest);
 8000d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fc96 	bl	80036bc <load_data>
 8000d90:	4603      	mov	r3, r0
 8000d92:	61fb      	str	r3, [r7, #28]

                if(testSamples<(ptr_structConsultResult->resultTestAcquiredSamples))
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d27c      	bcs.n	8000e9a <consultStateMachine+0x246>
                {
                	resetKeyPressed();
 8000da0:	f003 fb1e 	bl	80043e0 <resetKeyPressed>
                    updateUserMsg(0,0,"Amostra",&displayUpdateStatus);
 8000da4:	f107 0309 	add.w	r3, r7, #9
 8000da8:	4a88      	ldr	r2, [pc, #544]	; (8000fcc <consultStateMachine+0x378>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	2000      	movs	r0, #0
 8000dae:	f001 f8df 	bl	8001f70 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000db2:	f107 020c 	add.w	r2, r7, #12
 8000db6:	f107 0309 	add.w	r3, r7, #9
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 f8f5 	bl	8001fac <readyUserInterface>
                    ptr_sampleString = param_1_toString(&ptr_structConsultResult->Measurement[testSamples].sampleNum);
 8000dc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	69fa      	ldr	r2, [r7, #28]
 8000dca:	4413      	add	r3, r2
 8000dcc:	3304      	adds	r3, #4
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fd70 	bl	80018b4 <param_1_toString>
 8000dd4:	61b8      	str	r0, [r7, #24]
                    updateUserMsg(0,1,ptr_sampleString,&displayUpdateStatus);
 8000dd6:	f107 0309 	add.w	r3, r7, #9
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	2101      	movs	r1, #1
 8000dde:	2000      	movs	r0, #0
 8000de0:	f001 f8c6 	bl	8001f70 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000de4:	f107 020c 	add.w	r2, r7, #12
 8000de8:	f107 0309 	add.w	r3, r7, #9
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 f8dc 	bl	8001fac <readyUserInterface>

                    updateUserMsg(0,0,"Tempo de Voo",&displayUpdateStatus);
 8000df4:	f107 0309 	add.w	r3, r7, #9
 8000df8:	4a75      	ldr	r2, [pc, #468]	; (8000fd0 <consultStateMachine+0x37c>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f001 f8b7 	bl	8001f70 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000e02:	f107 020c 	add.w	r2, r7, #12
 8000e06:	f107 0309 	add.w	r3, r7, #9
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f8cd 	bl	8001fac <readyUserInterface>
                    ptr_vooTimeString = param_2_toString(&ptr_structConsultResult->Measurement[testSamples].uiVooTime);
 8000e12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	3308      	adds	r3, #8
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	3304      	adds	r3, #4
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fd5b 	bl	80018dc <param_2_toString>
 8000e26:	6178      	str	r0, [r7, #20]
                    updateUserMsg(0,1,ptr_vooTimeString,&displayUpdateStatus);
 8000e28:	f107 0309 	add.w	r3, r7, #9
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	2101      	movs	r1, #1
 8000e30:	2000      	movs	r0, #0
 8000e32:	f001 f89d 	bl	8001f70 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000e36:	f107 020c 	add.w	r2, r7, #12
 8000e3a:	f107 0309 	add.w	r3, r7, #9
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 f8b3 	bl	8001fac <readyUserInterface>

                    updateUserMsg(0,0,"Altura do salto",&displayUpdateStatus);
 8000e46:	f107 0309 	add.w	r3, r7, #9
 8000e4a:	4a62      	ldr	r2, [pc, #392]	; (8000fd4 <consultStateMachine+0x380>)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f001 f88e 	bl	8001f70 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000e54:	f107 020c 	add.w	r2, r7, #12
 8000e58:	f107 0309 	add.w	r3, r7, #9
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 f8a4 	bl	8001fac <readyUserInterface>
                    ptr_alturaString = param_3_toString(&ptr_structConsultResult->Measurement[testSamples].ucAltDistance);
 8000e64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	3308      	adds	r3, #8
 8000e6c:	69fa      	ldr	r2, [r7, #28]
 8000e6e:	4413      	add	r3, r2
 8000e70:	3308      	adds	r3, #8
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fd46 	bl	8001904 <param_3_toString>
 8000e78:	6138      	str	r0, [r7, #16]
                    updateUserMsg(0,1,ptr_alturaString,&displayUpdateStatus);
 8000e7a:	f107 0309 	add.w	r3, r7, #9
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	2101      	movs	r1, #1
 8000e82:	2000      	movs	r0, #0
 8000e84:	f001 f874 	bl	8001f70 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000e88:	f107 020c 	add.w	r2, r7, #12
 8000e8c:	f107 0309 	add.w	r3, r7, #9
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 f88a 	bl	8001fac <readyUserInterface>
 8000e98:	e004      	b.n	8000ea4 <consultStateMachine+0x250>
                }
                else  printDataDisplay(0,0,"VAZIO");
 8000e9a:	4a4f      	ldr	r2, [pc, #316]	; (8000fd8 <consultStateMachine+0x384>)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f001 ffda 	bl	8002e58 <printDataDisplay>

                key = getKeyPressed();
 8000ea4:	f003 fa90 	bl	80043c8 <getKeyPressed>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == AVANCAR)
 8000eae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000eb2:	2b41      	cmp	r3, #65	; 0x41
 8000eb4:	d117      	bne.n	8000ee6 <consultStateMachine+0x292>
                {
                	resetKeyPressed();
 8000eb6:	f003 fa93 	bl	80043e0 <resetKeyPressed>
                    testSamples++;
 8000eba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if(testSamples == ptr_structConsultResult->resultTestAcquiredSamples) testSamples = 0;
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	785b      	ldrb	r3, [r3, #1]
 8000ec8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d102      	bne.n	8000ed6 <consultStateMachine+0x282>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f002 fca8 	bl	800382c <getNextSub>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	70da      	strb	r2, [r3, #3]
 8000ee4:	e065      	b.n	8000fb2 <consultStateMachine+0x35e>
                }
                else if(key == PARAR)
 8000ee6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000eea:	2b50      	cmp	r3, #80	; 0x50
 8000eec:	d161      	bne.n	8000fb2 <consultStateMachine+0x35e>
                {
                	resetKeyPressed();
 8000eee:	f003 fa77 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000ef2:	f107 020c 	add.w	r2, r7, #12
 8000ef6:	f107 0309 	add.w	r3, r7, #9
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 f855 	bl	8001fac <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(EXPORTAR);
 8000f02:	2003      	movs	r0, #3
 8000f04:	f002 fc92 	bl	800382c <getNextSub>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	70da      	strb	r2, [r3, #3]
                }
                break;
 8000f10:	e04f      	b.n	8000fb2 <consultStateMachine+0x35e>

            case EXPORTAR:
                updateUserMsg(0,0,consultExportUserMsg,&displayUpdateStatus);
 8000f12:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <consultStateMachine+0x388>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f107 0309 	add.w	r3, r7, #9
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f001 f827 	bl	8001f70 <updateUserMsg>
                key = getKeyPressed();
 8000f22:	f003 fa51 	bl	80043c8 <getKeyPressed>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == PARAR)
 8000f2c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f30:	2b50      	cmp	r3, #80	; 0x50
 8000f32:	d114      	bne.n	8000f5e <consultStateMachine+0x30a>
                {
                	resetKeyPressed();
 8000f34:	f003 fa54 	bl	80043e0 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000f38:	f107 020c 	add.w	r2, r7, #12
 8000f3c:	f107 0309 	add.w	r3, r7, #9
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 f832 	bl	8001fac <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8000f48:	234d      	movs	r3, #77	; 0x4d
 8000f4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f002 fc6c 	bl	800382c <getNextSub>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	70da      	strb	r2, [r3, #3]
 8000f5c:	e028      	b.n	8000fb0 <consultStateMachine+0x35c>
                }
                else if(key == CONFIRMAR)
 8000f5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f62:	2b43      	cmp	r3, #67	; 0x43
 8000f64:	d124      	bne.n	8000fb0 <consultStateMachine+0x35c>
                {
                    //display
                	resetKeyPressed();
 8000f66:	f003 fa3b 	bl	80043e0 <resetKeyPressed>
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <consultStateMachine+0x38c>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	f107 0309 	add.w	r3, r7, #9
 8000f72:	2100      	movs	r1, #0
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 fffb 	bl	8001f70 <updateUserMsg>
                    subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	3303      	adds	r3, #3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 fc66 	bl	8003850 <setSelectSub>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f002 fc4d 	bl	800382c <getNextSub>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	70da      	strb	r2, [r3, #3]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000f9a:	f107 020c 	add.w	r2, r7, #12
 8000f9e:	f107 0309 	add.w	r3, r7, #9
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 f801 	bl	8001fac <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8000faa:	234d      	movs	r3, #77	; 0x4d
 8000fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                }
                break;
 8000fb0:	bf00      	nop
    while(key != MENU)
 8000fb2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fb6:	2b4d      	cmp	r3, #77	; 0x4d
 8000fb8:	f47f ae63 	bne.w	8000c82 <consultStateMachine+0x2e>
        }
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3730      	adds	r7, #48	; 0x30
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000054 	.word	0x20000054
 8000fcc:	0800ba68 	.word	0x0800ba68
 8000fd0:	0800ba70 	.word	0x0800ba70
 8000fd4:	0800ba80 	.word	0x0800ba80
 8000fd8:	0800ba90 	.word	0x0800ba90
 8000fdc:	20000058 	.word	0x20000058
 8000fe0:	2000005c 	.word	0x2000005c

08000fe4 <getTimeStruct>:
{
    return myData.userSelectTapete;
}

unsigned char* getTimeStruct()
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
    return insertTime;
 8000fe8:	4b02      	ldr	r3, [pc, #8]	; (8000ff4 <getTimeStruct+0x10>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	20000000 	.word	0x20000000

08000ff8 <getIntervalTimeStruct>:

unsigned char* getIntervalTimeStruct()
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
    return intervalTime;
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <getIntervalTimeStruct+0x10>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	20000004 	.word	0x20000004

0800100c <getMassArray>:

unsigned char* getMassArray()
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
    return massArray;
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <getMassArray+0x10>)
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200003c0 	.word	0x200003c0

08001020 <getOverMassArray>:

unsigned char* getOverMassArray()
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
    return overMassArray;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <getOverMassArray+0x10>)
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200003c8 	.word	0x200003c8

08001034 <getAltMinArray>:

unsigned char* getAltMinArray()
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
    return altMinArray;
 8001038:	4b02      	ldr	r3, [pc, #8]	; (8001044 <getAltMinArray+0x10>)
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200003d0 	.word	0x200003d0

08001048 <getAltMaxArray>:

unsigned char* getAltMaxArray()
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
    return altMaxArray;
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <getAltMaxArray+0x10>)
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200003d4 	.word	0x200003d4

0800105c <getNumSaltosArray>:

unsigned char* getNumSaltosArray()
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
    return numSaltosArray;
 8001060:	4b02      	ldr	r3, [pc, #8]	; (800106c <getNumSaltosArray+0x10>)
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200003d8 	.word	0x200003d8

08001070 <getTypeJumpArray>:
//{
//    return intervalSaltosArray;
//}

unsigned char* getTypeJumpArray()
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
    return JumpTypeArray;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <getTypeJumpArray+0x10>)
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200003e0 	.word	0x200003e0

08001084 <getAltDJArray>:

unsigned char* getAltDJArray()
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
    return altDJArray;
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <getAltDJArray+0x10>)
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200003dc 	.word	0x200003dc

08001098 <getNumSeriesArray>:

unsigned char* getNumSeriesArray()
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
    return numSeriesArray;
 800109c:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <getNumSeriesArray+0x10>)
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200003e4 	.word	0x200003e4

080010ac <getIntervalSeriesArray>:

unsigned char* getIntervalSeriesArray()
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
    return intervalSeriesArray;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <getIntervalSeriesArray+0x10>)
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200003e8 	.word	0x200003e8

080010c0 <getNumTestArray>:

unsigned char* getNumTestArray()
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
    return numTestArray;
 80010c4:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <getNumTestArray+0x10>)
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008

080010d4 <getEraseTestArray>:

unsigned char* getEraseTestArray()
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
    return selectEraseArray;
 80010d8:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <getEraseTestArray+0x10>)
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200003ec 	.word	0x200003ec

080010e8 <getUserConfigStruct>:

unsigned char* getUserConfigStruct() //VERIFICAR SE VOU USAR
{
 80010e8:	b4b0      	push	{r4, r5, r7}
 80010ea:	af00      	add	r7, sp, #0
    static struct dataInsert configStruct;
    configStruct = myData;
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <getUserConfigStruct+0x24>)
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <getUserConfigStruct+0x28>)
 80010f0:	4614      	mov	r4, r2
 80010f2:	461d      	mov	r5, r3
 80010f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010fc:	e884 0003 	stmia.w	r4, {r0, r1}
    return &configStruct;
 8001100:	4b02      	ldr	r3, [pc, #8]	; (800110c <getUserConfigStruct+0x24>)
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	bcb0      	pop	{r4, r5, r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200003f0 	.word	0x200003f0
 8001110:	200001bc 	.word	0x200001bc

08001114 <setUserInputConfigData>:

unsigned char setUserInputConfigData(struct dataInsert* dataToInsert)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    myData.userTest = dataToInsert->userTest;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <setUserInputConfigData+0x94>)
 8001122:	701a      	strb	r2, [r3, #0]
    myData.userTime = dataToInsert->userTime;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <setUserInputConfigData+0x94>)
 800112a:	6053      	str	r3, [r2, #4]
    myData.userMass = dataToInsert->userMass;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7a1a      	ldrb	r2, [r3, #8]
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <setUserInputConfigData+0x94>)
 8001132:	721a      	strb	r2, [r3, #8]
    myData.userOverMass = dataToInsert->userOverMass;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7a5a      	ldrb	r2, [r3, #9]
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <setUserInputConfigData+0x94>)
 800113a:	725a      	strb	r2, [r3, #9]
    myData.userConsultTest = dataToInsert->userConsultTest;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7a9a      	ldrb	r2, [r3, #10]
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <setUserInputConfigData+0x94>)
 8001142:	729a      	strb	r2, [r3, #10]
    myData.userAlturaMin = dataToInsert->userAlturaMin;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7ada      	ldrb	r2, [r3, #11]
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <setUserInputConfigData+0x94>)
 800114a:	72da      	strb	r2, [r3, #11]
    myData.userAlturaMax = dataToInsert->userAlturaMax;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7b1a      	ldrb	r2, [r3, #12]
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <setUserInputConfigData+0x94>)
 8001152:	731a      	strb	r2, [r3, #12]
    myData.userNumSaltos = dataToInsert->userNumSaltos;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7b5a      	ldrb	r2, [r3, #13]
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <setUserInputConfigData+0x94>)
 800115a:	735a      	strb	r2, [r3, #13]
    myData.userIntervalSaltos = dataToInsert->userIntervalSaltos;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7b9a      	ldrb	r2, [r3, #14]
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <setUserInputConfigData+0x94>)
 8001162:	739a      	strb	r2, [r3, #14]
    myData.userCMJ = dataToInsert->userCMJ;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7bda      	ldrb	r2, [r3, #15]
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <setUserInputConfigData+0x94>)
 800116a:	73da      	strb	r2, [r3, #15]
    myData.userAlturaDJ = dataToInsert->userAlturaDJ;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7c1a      	ldrb	r2, [r3, #16]
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <setUserInputConfigData+0x94>)
 8001172:	741a      	strb	r2, [r3, #16]
    myData.userNumSeries = dataToInsert->userNumSeries;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7c5a      	ldrb	r2, [r3, #17]
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <setUserInputConfigData+0x94>)
 800117a:	745a      	strb	r2, [r3, #17]
    myData.userIntervalSeries = dataToInsert->userIntervalSeries;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7c9a      	ldrb	r2, [r3, #18]
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <setUserInputConfigData+0x94>)
 8001182:	749a      	strb	r2, [r3, #18]
    myData.userCommConfig = dataToInsert->userCommConfig;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7cda      	ldrb	r2, [r3, #19]
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <setUserInputConfigData+0x94>)
 800118a:	74da      	strb	r2, [r3, #19]
    myData.userSelectTapete = dataToInsert->userSelectTapete;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7d1a      	ldrb	r2, [r3, #20]
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <setUserInputConfigData+0x94>)
 8001192:	751a      	strb	r2, [r3, #20]
    myData.userSelectSensorChannel = dataToInsert->userSelectSensorChannel;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7d5a      	ldrb	r2, [r3, #21]
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <setUserInputConfigData+0x94>)
 800119a:	755a      	strb	r2, [r3, #21]
}
 800119c:	bf00      	nop
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	200001bc 	.word	0x200001bc

080011ac <getUserResultData>:

unsigned char* getUserResultData(unsigned char numTest)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
    return &myResults[numTest-1];
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	2254      	movs	r2, #84	; 0x54
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <getUserResultData+0x24>)
 80011c2:	4413      	add	r3, r2
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	200001d4 	.word	0x200001d4

080011d4 <getResultTestNumber>:

unsigned char getResultTestNumber()
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
    return numberTest;
 80011d8:	4b02      	ldr	r3, [pc, #8]	; (80011e4 <getResultTestNumber+0x10>)
 80011da:	781b      	ldrb	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	200003ed 	.word	0x200003ed

080011e8 <setResultTestNumber>:
{
     myResults[numTest].thereAreData = TRUE;
}

unsigned char setResultTestNumber()
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
     numberTest++;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <setResultTestNumber+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <setResultTestNumber+0x1c>)
 80011f6:	701a      	strb	r2, [r3, #0]
}
 80011f8:	bf00      	nop
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200003ed 	.word	0x200003ed

08001208 <setUserResultData>:

unsigned char setUserResultData(struct results* structDataResult, unsigned char numTest, unsigned char numSample)
{
 8001208:	b490      	push	{r4, r7}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]
 8001214:	4613      	mov	r3, r2
 8001216:	70bb      	strb	r3, [r7, #2]
    myResults[numTest].resultTestNum = numTest+1;
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	78fa      	ldrb	r2, [r7, #3]
 800121c:	3201      	adds	r2, #1
 800121e:	b2d0      	uxtb	r0, r2
 8001220:	4a37      	ldr	r2, [pc, #220]	; (8001300 <setUserResultData+0xf8>)
 8001222:	2154      	movs	r1, #84	; 0x54
 8001224:	fb01 f303 	mul.w	r3, r1, r3
 8001228:	4413      	add	r3, r2
 800122a:	4602      	mov	r2, r0
 800122c:	701a      	strb	r2, [r3, #0]
    myResults[numTest].resultTestAcquiredSamples = numSample;
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	4a33      	ldr	r2, [pc, #204]	; (8001300 <setUserResultData+0xf8>)
 8001232:	2154      	movs	r1, #84	; 0x54
 8001234:	fb01 f303 	mul.w	r3, r1, r3
 8001238:	4413      	add	r3, r2
 800123a:	3301      	adds	r3, #1
 800123c:	78ba      	ldrb	r2, [r7, #2]
 800123e:	701a      	strb	r2, [r3, #0]
    myResults[numTest].thereAreData = TRUE;
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <setUserResultData+0xf8>)
 8001244:	2154      	movs	r1, #84	; 0x54
 8001246:	fb01 f303 	mul.w	r3, r1, r3
 800124a:	4413      	add	r3, r2
 800124c:	3302      	adds	r3, #2
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	e048      	b.n	80012ea <setUserResultData+0xe2>
    {
        myResults[numTest].Measurement[i].sampleNum = structDataResult->Measurement[i].sampleNum;
 8001258:	7bf9      	ldrb	r1, [r7, #15]
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	0109      	lsls	r1, r1, #4
 8001262:	4401      	add	r1, r0
 8001264:	3104      	adds	r1, #4
 8001266:	780c      	ldrb	r4, [r1, #0]
 8001268:	4925      	ldr	r1, [pc, #148]	; (8001300 <setUserResultData+0xf8>)
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	2054      	movs	r0, #84	; 0x54
 800126e:	fb00 f303 	mul.w	r3, r0, r3
 8001272:	4413      	add	r3, r2
 8001274:	440b      	add	r3, r1
 8001276:	3304      	adds	r3, #4
 8001278:	4622      	mov	r2, r4
 800127a:	701a      	strb	r2, [r3, #0]
        myResults[numTest].Measurement[i].ulReadingTime = structDataResult->Measurement[i].ulReadingTime;
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	7bf9      	ldrb	r1, [r7, #15]
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	4402      	add	r2, r0
 8001288:	3208      	adds	r2, #8
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	481c      	ldr	r0, [pc, #112]	; (8001300 <setUserResultData+0xf8>)
 800128e:	0109      	lsls	r1, r1, #4
 8001290:	2454      	movs	r4, #84	; 0x54
 8001292:	fb04 f303 	mul.w	r3, r4, r3
 8001296:	440b      	add	r3, r1
 8001298:	4403      	add	r3, r0
 800129a:	3308      	adds	r3, #8
 800129c:	601a      	str	r2, [r3, #0]
        myResults[numTest].Measurement[i].uiVooTime = structDataResult->Measurement[i].uiVooTime;
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	7bf9      	ldrb	r1, [r7, #15]
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	4402      	add	r2, r0
 80012aa:	320c      	adds	r2, #12
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	4814      	ldr	r0, [pc, #80]	; (8001300 <setUserResultData+0xf8>)
 80012b0:	0109      	lsls	r1, r1, #4
 80012b2:	2454      	movs	r4, #84	; 0x54
 80012b4:	fb04 f303 	mul.w	r3, r4, r3
 80012b8:	440b      	add	r3, r1
 80012ba:	4403      	add	r3, r0
 80012bc:	330c      	adds	r3, #12
 80012be:	601a      	str	r2, [r3, #0]
        myResults[numTest].Measurement[i].ucAltDistance = structDataResult->Measurement[i].ucAltDistance;
 80012c0:	7bf9      	ldrb	r1, [r7, #15]
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	0109      	lsls	r1, r1, #4
 80012ca:	4401      	add	r1, r0
 80012cc:	3110      	adds	r1, #16
 80012ce:	780c      	ldrb	r4, [r1, #0]
 80012d0:	490b      	ldr	r1, [pc, #44]	; (8001300 <setUserResultData+0xf8>)
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	2054      	movs	r0, #84	; 0x54
 80012d6:	fb00 f303 	mul.w	r3, r0, r3
 80012da:	4413      	add	r3, r2
 80012dc:	440b      	add	r3, r1
 80012de:	3310      	adds	r3, #16
 80012e0:	4622      	mov	r2, r4
 80012e2:	701a      	strb	r2, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	3301      	adds	r3, #1
 80012e8:	73fb      	strb	r3, [r7, #15]
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	78bb      	ldrb	r3, [r7, #2]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3b2      	bcc.n	8001258 <setUserResultData+0x50>
    }
}
 80012f2:	bf00      	nop
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc90      	pop	{r4, r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200001d4 	.word	0x200001d4

08001304 <resetResultStruct>:

unsigned char resetResultStruct(struct results* structToReset) //verificar se vai precisar
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    structToReset->resultTestNum = 0;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
    structToReset->resultTestAcquiredSamples = 0;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	705a      	strb	r2, [r3, #1]
    structToReset->thereAreData = FALSE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	709a      	strb	r2, [r3, #2]
    for(unsigned char i = 0;i<MEASUREMENT_SIZE;i++)
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e01e      	b.n	8001362 <resetResultStruct+0x5e>
    {
        structToReset->Measurement[i].sampleNum = 0;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	4413      	add	r3, r2
 800132c:	3304      	adds	r3, #4
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
        structToReset->Measurement[i].ulReadingTime = 0;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	3308      	adds	r3, #8
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
        structToReset->Measurement[i].uiVooTime = 0;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4413      	add	r3, r2
 8001348:	330c      	adds	r3, #12
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
        structToReset->Measurement[i].ucAltDistance = 0;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4413      	add	r3, r2
 8001356:	3310      	adds	r3, #16
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
    for(unsigned char i = 0;i<MEASUREMENT_SIZE;i++)
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	3301      	adds	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d9dd      	bls.n	8001324 <resetResultStruct+0x20>
    }

}
 8001368:	bf00      	nop
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <resetConfigStruct>:

unsigned char resetConfigStruct(struct dataInsert* structToReset)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    structToReset->userTest = 0;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
    structToReset->userAlturaDJ = 0;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	741a      	strb	r2, [r3, #16]
    structToReset->userAlturaMax = 0;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	731a      	strb	r2, [r3, #12]
    structToReset->userAlturaMin = 0;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	72da      	strb	r2, [r3, #11]
    structToReset->userCMJ = 0;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	73da      	strb	r2, [r3, #15]
    structToReset->userCommConfig = 0;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	74da      	strb	r2, [r3, #19]
    structToReset->userConsultTest = 0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	729a      	strb	r2, [r3, #10]
    structToReset->userIntervalSaltos = 0;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	739a      	strb	r2, [r3, #14]
    structToReset->userIntervalSeries = 0;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	749a      	strb	r2, [r3, #18]
    structToReset->userMass = 0;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	721a      	strb	r2, [r3, #8]
    structToReset->userNumSaltos = 0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	735a      	strb	r2, [r3, #13]
    structToReset->userNumSeries = 0;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	745a      	strb	r2, [r3, #17]
    structToReset->userOverMass = 0;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	725a      	strb	r2, [r3, #9]
    structToReset->userSelectSensorChannel = 0;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	755a      	strb	r2, [r3, #21]
    structToReset->userSelectTapete = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	751a      	strb	r2, [r3, #20]
    structToReset->userTime = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]

}
 80013dc:	bf00      	nop
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <resetMyResults>:

void resetMyResults()
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
    numberTest = 0;
 80013ee:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <resetMyResults+0xd0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
    for(unsigned char test=0;test<TEST_SIZE;test++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	e055      	b.n	80014a6 <resetMyResults+0xbe>
    {
        myResults[test].resultTestNum = 0;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4a2f      	ldr	r2, [pc, #188]	; (80014bc <resetMyResults+0xd4>)
 80013fe:	2154      	movs	r1, #84	; 0x54
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
        myResults[test].resultTestAcquiredSamples = 0;
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4a2b      	ldr	r2, [pc, #172]	; (80014bc <resetMyResults+0xd4>)
 800140e:	2154      	movs	r1, #84	; 0x54
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	4413      	add	r3, r2
 8001416:	3301      	adds	r3, #1
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
        myResults[test].thereAreData = FALSE;
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	4a27      	ldr	r2, [pc, #156]	; (80014bc <resetMyResults+0xd4>)
 8001420:	2154      	movs	r1, #84	; 0x54
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	3302      	adds	r3, #2
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	e032      	b.n	800149a <resetMyResults+0xb2>
        {
            myResults[test].Measurement[sample].sampleNum = 0;
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	4921      	ldr	r1, [pc, #132]	; (80014bc <resetMyResults+0xd4>)
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	2054      	movs	r0, #84	; 0x54
 800143e:	fb00 f303 	mul.w	r3, r0, r3
 8001442:	4413      	add	r3, r2
 8001444:	440b      	add	r3, r1
 8001446:	3304      	adds	r3, #4
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
            myResults[test].Measurement[sample].ulReadingTime = 0;
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	491b      	ldr	r1, [pc, #108]	; (80014bc <resetMyResults+0xd4>)
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	2054      	movs	r0, #84	; 0x54
 8001456:	fb00 f303 	mul.w	r3, r0, r3
 800145a:	4413      	add	r3, r2
 800145c:	440b      	add	r3, r1
 800145e:	3308      	adds	r3, #8
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
            myResults[test].Measurement[sample].uiVooTime = 0;
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4915      	ldr	r1, [pc, #84]	; (80014bc <resetMyResults+0xd4>)
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	2054      	movs	r0, #84	; 0x54
 800146e:	fb00 f303 	mul.w	r3, r0, r3
 8001472:	4413      	add	r3, r2
 8001474:	440b      	add	r3, r1
 8001476:	330c      	adds	r3, #12
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
            myResults[test].Measurement[sample].ucAltDistance = 0;
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	490f      	ldr	r1, [pc, #60]	; (80014bc <resetMyResults+0xd4>)
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	2054      	movs	r0, #84	; 0x54
 8001486:	fb00 f303 	mul.w	r3, r0, r3
 800148a:	4413      	add	r3, r2
 800148c:	440b      	add	r3, r1
 800148e:	3310      	adds	r3, #16
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2b04      	cmp	r3, #4
 800149e:	d9c9      	bls.n	8001434 <resetMyResults+0x4c>
    for(unsigned char test=0;test<TEST_SIZE;test++)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	3301      	adds	r3, #1
 80014a4:	71fb      	strb	r3, [r7, #7]
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d9a6      	bls.n	80013fa <resetMyResults+0x12>
        }

    }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	200003ed 	.word	0x200003ed
 80014bc:	200001d4 	.word	0x200001d4

080014c0 <indexColumn>:
        *index = 0;
    }
}

unsigned char indexColumn(short* currentColumn, unsigned char size)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
    *currentColumn = *currentColumn -1;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	3b01      	subs	r3, #1
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	b21a      	sxth	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	801a      	strh	r2, [r3, #0]
    if(*currentColumn == 5) *currentColumn = *currentColumn -1;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d109      	bne.n	80014fc <indexColumn+0x3c>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	801a      	strh	r2, [r3, #0]
 80014fa:	e00d      	b.n	8001518 <indexColumn+0x58>
    else if(*currentColumn == 2) *currentColumn = *currentColumn -1;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d108      	bne.n	8001518 <indexColumn+0x58>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150c:	b29b      	uxth	r3, r3
 800150e:	3b01      	subs	r3, #1
 8001510:	b29b      	uxth	r3, r3
 8001512:	b21a      	sxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	801a      	strh	r2, [r3, #0]
    if(*currentColumn <0)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151e:	2b00      	cmp	r3, #0
 8001520:	da03      	bge.n	800152a <indexColumn+0x6a>
    {
        *currentColumn = size;
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	b21a      	sxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	801a      	strh	r2, [r3, #0]
    }
}
 800152a:	bf00      	nop
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <stringToLong>:

unsigned long stringToLong(unsigned char* string)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
    char *ptr;
    unsigned long int intTime = strtol(string,&ptr,10);
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	220a      	movs	r2, #10
 8001544:	4619      	mov	r1, r3
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f008 fd14 	bl	8009f74 <strtol>
 800154c:	4603      	mov	r3, r0
 800154e:	60fb      	str	r3, [r7, #12]
    //fazer a convers�o de hhmmss para ms
    return intTime;
 8001550:	68fb      	ldr	r3, [r7, #12]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <stringToInt>:

unsigned int stringToInt(unsigned char* string)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
    char *ptr;
    unsigned int x = strtol(string,&ptr,10);
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	220a      	movs	r2, #10
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f008 fd02 	bl	8009f74 <strtol>
 8001570:	4603      	mov	r3, r0
 8001572:	60fb      	str	r3, [r7, #12]
    return x;
 8001574:	68fb      	ldr	r3, [r7, #12]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <indexMass>:
    float x = strtof(string,NULL);
    return x;
}

unsigned char indexMass(short* index)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
    *index = *index -1;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158c:	b29b      	uxth	r3, r3
 800158e:	3b01      	subs	r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	b21a      	sxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	801a      	strh	r2, [r3, #0]
    if(*index == 3) *index = *index -1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d108      	bne.n	80015b4 <indexMass+0x36>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	3b01      	subs	r3, #1
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	da02      	bge.n	80015c4 <indexMass+0x46>
    {
        *index = 4;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2204      	movs	r2, #4
 80015c2:	801a      	strh	r2, [r3, #0]
    }
}
 80015c4:	bf00      	nop
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <indexChange>:

unsigned char indexChange(short* index, unsigned char size)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
    *index = *index - 1;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	3b01      	subs	r3, #1
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	da03      	bge.n	8001600 <indexChange+0x30>
    {
        *index = size;
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	801a      	strh	r2, [r3, #0]
    }
}
 8001600:	bf00      	nop
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <getAltMinString>:

unsigned char* getAltMinString()
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af02      	add	r7, sp, #8
    unsigned char* altMinArray = getAltMinArray();
 8001612:	f7ff fd0f 	bl	8001034 <getAltMinArray>
 8001616:	6078      	str	r0, [r7, #4]
    sprintf(altMinString,"%d%d%d",altMinArray[0],altMinArray[1],altMinArray[2]);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3301      	adds	r3, #1
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3302      	adds	r3, #2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	460b      	mov	r3, r1
 8001630:	4904      	ldr	r1, [pc, #16]	; (8001644 <getAltMinString+0x38>)
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <getAltMinString+0x3c>)
 8001634:	f007 fe84 	bl	8009340 <siprintf>
    return altMinString;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <getAltMinString+0x3c>)
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	0800ba98 	.word	0x0800ba98
 8001648:	20000420 	.word	0x20000420

0800164c <getAltMaxString>:

unsigned char* getAltMaxString()
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af02      	add	r7, sp, #8
    unsigned char* altMaxArray = getAltMaxArray();
 8001652:	f7ff fcf9 	bl	8001048 <getAltMaxArray>
 8001656:	6078      	str	r0, [r7, #4]
    sprintf(altMaxString,"%d%d%d",altMaxArray[0],altMaxArray[1],altMaxArray[2]);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3301      	adds	r3, #1
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3302      	adds	r3, #2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	460b      	mov	r3, r1
 8001670:	4904      	ldr	r1, [pc, #16]	; (8001684 <getAltMaxString+0x38>)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <getAltMaxString+0x3c>)
 8001674:	f007 fe64 	bl	8009340 <siprintf>
    return altMaxString;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <getAltMaxString+0x3c>)
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	0800ba98 	.word	0x0800ba98
 8001688:	2000042c 	.word	0x2000042c

0800168c <getNumSaltosString>:

unsigned char* getNumSaltosString()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af02      	add	r7, sp, #8
    unsigned char* numSaltosArray = getNumSaltosArray();
 8001692:	f7ff fce3 	bl	800105c <getNumSaltosArray>
 8001696:	6078      	str	r0, [r7, #4]
    sprintf(numSaltosString,"%d%d%d",numSaltosArray[0],numSaltosArray[1],numSaltosArray[2]);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3301      	adds	r3, #1
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3302      	adds	r3, #2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	460b      	mov	r3, r1
 80016b0:	4904      	ldr	r1, [pc, #16]	; (80016c4 <getNumSaltosString+0x38>)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <getNumSaltosString+0x3c>)
 80016b4:	f007 fe44 	bl	8009340 <siprintf>
    return numSaltosString;
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <getNumSaltosString+0x3c>)
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	0800ba98 	.word	0x0800ba98
 80016c8:	20000438 	.word	0x20000438

080016cc <getTypeJumpString>:

unsigned char* getTypeJumpString()
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
    unsigned char* typeJumpArray = getTypeJumpArray();
 80016d2:	f7ff fccd 	bl	8001070 <getTypeJumpArray>
 80016d6:	6078      	str	r0, [r7, #4]
    sprintf(tipoSaltoString,"%d",typeJumpArray[0]);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4904      	ldr	r1, [pc, #16]	; (80016f0 <getTypeJumpString+0x24>)
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <getTypeJumpString+0x28>)
 80016e2:	f007 fe2d 	bl	8009340 <siprintf>
    return tipoSaltoString;
 80016e6:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <getTypeJumpString+0x28>)
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	0800baa0 	.word	0x0800baa0
 80016f4:	20000444 	.word	0x20000444

080016f8 <getAltDJString>:

unsigned char* getAltDJString()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
    unsigned char* altDJArray = getAltDJArray();
 80016fe:	f7ff fcc1 	bl	8001084 <getAltDJArray>
 8001702:	6078      	str	r0, [r7, #4]
    sprintf(altDJString,"%d%d%",altDJArray[0],altDJArray[1]);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3301      	adds	r3, #1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4904      	ldr	r1, [pc, #16]	; (8001724 <getAltDJString+0x2c>)
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <getAltDJString+0x30>)
 8001714:	f007 fe14 	bl	8009340 <siprintf>
    return altDJString;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <getAltDJString+0x30>)
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	0800baa4 	.word	0x0800baa4
 8001728:	20000450 	.word	0x20000450

0800172c <getNumSeriesString>:

unsigned char* getNumSeriesString()
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af02      	add	r7, sp, #8
    unsigned char* numSeriesArray = getNumSeriesArray();
 8001732:	f7ff fcb1 	bl	8001098 <getNumSeriesArray>
 8001736:	6078      	str	r0, [r7, #4]
    sprintf(numSeriesString,"%d%d%d",numSeriesArray[0],numSeriesArray[1],numSeriesArray[2]);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3301      	adds	r3, #1
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3302      	adds	r3, #2
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	460b      	mov	r3, r1
 8001750:	4904      	ldr	r1, [pc, #16]	; (8001764 <getNumSeriesString+0x38>)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <getNumSeriesString+0x3c>)
 8001754:	f007 fdf4 	bl	8009340 <siprintf>
    return numSeriesString;
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <getNumSeriesString+0x3c>)
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	0800ba98 	.word	0x0800ba98
 8001768:	2000045c 	.word	0x2000045c

0800176c <getIntervalSeriesString>:

unsigned char* getIntervalSeriesString()
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af02      	add	r7, sp, #8
    unsigned char* intervalSeriesArray = getIntervalSeriesArray();
 8001772:	f7ff fc9b 	bl	80010ac <getIntervalSeriesArray>
 8001776:	6078      	str	r0, [r7, #4]
    sprintf(interSeriesString,"%d%d%d",intervalSeriesArray[0],intervalSeriesArray[1],intervalSeriesArray[2]);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3301      	adds	r3, #1
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3302      	adds	r3, #2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	460b      	mov	r3, r1
 8001790:	4904      	ldr	r1, [pc, #16]	; (80017a4 <getIntervalSeriesString+0x38>)
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <getIntervalSeriesString+0x3c>)
 8001794:	f007 fdd4 	bl	8009340 <siprintf>
    return interSeriesString;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <getIntervalSeriesString+0x3c>)
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	0800ba98 	.word	0x0800ba98
 80017a8:	20000468 	.word	0x20000468

080017ac <getMassString>:

unsigned char* getMassString()
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af02      	add	r7, sp, #8
    unsigned char* massArray = getMassArray();
 80017b2:	f7ff fc2b 	bl	800100c <getMassArray>
 80017b6:	6078      	str	r0, [r7, #4]
    sprintf(massString,"%d%d%d.%d",massArray[0],massArray[1],massArray[2],massArray[4]);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3301      	adds	r3, #1
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3302      	adds	r3, #2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3304      	adds	r3, #4
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	9200      	str	r2, [sp, #0]
 80017d8:	4603      	mov	r3, r0
 80017da:	460a      	mov	r2, r1
 80017dc:	4904      	ldr	r1, [pc, #16]	; (80017f0 <getMassString+0x44>)
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <getMassString+0x48>)
 80017e0:	f007 fdae 	bl	8009340 <siprintf>
    //massArray[3] ficou representando o "." no display
    return massString;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <getMassString+0x48>)
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	0800baac 	.word	0x0800baac
 80017f4:	20000408 	.word	0x20000408

080017f8 <getOverMassString>:

unsigned char* getOverMassString()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af02      	add	r7, sp, #8
    unsigned char* overMassArray = getOverMassArray();
 80017fe:	f7ff fc0f 	bl	8001020 <getOverMassArray>
 8001802:	6078      	str	r0, [r7, #4]
    sprintf(overMassString,"%d%d%d.%d",overMassArray[0],overMassArray[1],overMassArray[2],overMassArray[4]);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3301      	adds	r3, #1
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3302      	adds	r3, #2
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	4603      	mov	r3, r0
 8001826:	460a      	mov	r2, r1
 8001828:	4904      	ldr	r1, [pc, #16]	; (800183c <getOverMassString+0x44>)
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <getOverMassString+0x48>)
 800182c:	f007 fd88 	bl	8009340 <siprintf>
    return overMassString;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <getOverMassString+0x48>)
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	0800baac 	.word	0x0800baac
 8001840:	20000414 	.word	0x20000414

08001844 <getNumTestString>:

unsigned char* getNumTestString()
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af02      	add	r7, sp, #8
    unsigned char* numTestArray = getNumTestArray();
 800184a:	f7ff fc39 	bl	80010c0 <getNumTestArray>
 800184e:	6078      	str	r0, [r7, #4]
    sprintf(numTestString,"%d%d%d",numTestArray[0],numTestArray[1],numTestArray[2]);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3301      	adds	r3, #1
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3302      	adds	r3, #2
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	460b      	mov	r3, r1
 8001868:	4904      	ldr	r1, [pc, #16]	; (800187c <getNumTestString+0x38>)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <getNumTestString+0x3c>)
 800186c:	f007 fd68 	bl	8009340 <siprintf>
    return numTestString;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <getNumTestString+0x3c>)
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	0800ba98 	.word	0x0800ba98
 8001880:	20000474 	.word	0x20000474

08001884 <getEraseTestString>:

unsigned char* getEraseTestString()
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
    unsigned char* eraseTestArray = getEraseTestArray();
 800188a:	f7ff fc23 	bl	80010d4 <getEraseTestArray>
 800188e:	4603      	mov	r3, r0
 8001890:	607b      	str	r3, [r7, #4]
    sprintf(eraseTestString,"%d",eraseTestArray[0]);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	4904      	ldr	r1, [pc, #16]	; (80018ac <getEraseTestString+0x28>)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <getEraseTestString+0x2c>)
 800189c:	f007 fd50 	bl	8009340 <siprintf>
    return eraseTestString;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <getEraseTestString+0x2c>)
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	0800baa0 	.word	0x0800baa0
 80018b0:	20000480 	.word	0x20000480

080018b4 <param_1_toString>:
	static unsigned char saveResultString[50];
	return saveResultString;
}

unsigned int* param_1_toString(unsigned char* string)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    static unsigned char result[TEST_SIZE];
    sprintf(result,"%d",*string);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4904      	ldr	r1, [pc, #16]	; (80018d4 <param_1_toString+0x20>)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <param_1_toString+0x24>)
 80018c6:	f007 fd3b 	bl	8009340 <siprintf>
    return result;
 80018ca:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <param_1_toString+0x24>)
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	0800baa0 	.word	0x0800baa0
 80018d8:	2000048c 	.word	0x2000048c

080018dc <param_2_toString>:

unsigned int* param_2_toString(unsigned char* string)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
    static unsigned char result[TEST_SIZE];
    sprintf(result,"%d",*string);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4904      	ldr	r1, [pc, #16]	; (80018fc <param_2_toString+0x20>)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <param_2_toString+0x24>)
 80018ee:	f007 fd27 	bl	8009340 <siprintf>
    return result;
 80018f2:	4b03      	ldr	r3, [pc, #12]	; (8001900 <param_2_toString+0x24>)
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	0800baa0 	.word	0x0800baa0
 8001900:	20000494 	.word	0x20000494

08001904 <param_3_toString>:

unsigned int* param_3_toString(unsigned char* string)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
    static unsigned char result[TEST_SIZE];
    sprintf(result,"%d",*string);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4904      	ldr	r1, [pc, #16]	; (8001924 <param_3_toString+0x20>)
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <param_3_toString+0x24>)
 8001916:	f007 fd13 	bl	8009340 <siprintf>
    return result;
 800191a:	4b03      	ldr	r3, [pc, #12]	; (8001928 <param_3_toString+0x24>)
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	0800baa0 	.word	0x0800baa0
 8001928:	2000049c 	.word	0x2000049c

0800192c <setUserAltMin>:

unsigned char setUserAltMin(unsigned char* idx)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
    unsigned char* altMinArray = getAltMinArray();
 8001934:	f7ff fb7e 	bl	8001034 <getAltMinArray>
 8001938:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	72fb      	strb	r3, [r7, #11]
    altMinArray[index] = altMinArray[index]+1;
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	68f9      	ldr	r1, [r7, #12]
 800194c:	440b      	add	r3, r1
 800194e:	3201      	adds	r2, #1
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	701a      	strb	r2, [r3, #0]
    if(altMinArray[index]>9) altMinArray[index]= 0;
 8001954:	7afb      	ldrb	r3, [r7, #11]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4413      	add	r3, r2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b09      	cmp	r3, #9
 800195e:	d904      	bls.n	800196a <setUserAltMin+0x3e>
 8001960:	7afb      	ldrb	r3, [r7, #11]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4413      	add	r3, r2
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <setUserErase>:

unsigned char setUserErase(unsigned char* idx)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    unsigned char* eraseArray = getEraseTestArray();
 800197c:	f7ff fbaa 	bl	80010d4 <getEraseTestArray>
 8001980:	4603      	mov	r3, r0
 8001982:	60fb      	str	r3, [r7, #12]
    unsigned char index = *idx;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	72fb      	strb	r3, [r7, #11]
    eraseArray[index] = eraseArray[index]+1;
 800198a:	7afb      	ldrb	r3, [r7, #11]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	7afb      	ldrb	r3, [r7, #11]
 8001994:	68f9      	ldr	r1, [r7, #12]
 8001996:	440b      	add	r3, r1
 8001998:	3201      	adds	r2, #1
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]
    if(eraseArray[index]>9) eraseArray[index]= 0;
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b09      	cmp	r3, #9
 80019a8:	d904      	bls.n	80019b4 <setUserErase+0x40>
 80019aa:	7afb      	ldrb	r3, [r7, #11]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
}
 80019b4:	bf00      	nop
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <setUserAltMax>:

unsigned char setUserAltMax(unsigned char* idx)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
    unsigned char* altMaxArray = getAltMaxArray();
 80019c6:	f7ff fb3f 	bl	8001048 <getAltMaxArray>
 80019ca:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	72fb      	strb	r3, [r7, #11]
    altMaxArray[index] = altMaxArray[index]+1;
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	7afb      	ldrb	r3, [r7, #11]
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	440b      	add	r3, r1
 80019e0:	3201      	adds	r2, #1
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]
    if(altMaxArray[index]>9) altMaxArray[index]= 0;
 80019e6:	7afb      	ldrb	r3, [r7, #11]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b09      	cmp	r3, #9
 80019f0:	d904      	bls.n	80019fc <setUserAltMax+0x3e>
 80019f2:	7afb      	ldrb	r3, [r7, #11]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
}
 80019fc:	bf00      	nop
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <setUserNumSaltos>:

unsigned char setUserNumSaltos(unsigned char* idx)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
    unsigned char* numSaltosArray = getNumSaltosArray();
 8001a0e:	f7ff fb25 	bl	800105c <getNumSaltosArray>
 8001a12:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	72fb      	strb	r3, [r7, #11]
    numSaltosArray[index] = numSaltosArray[index]+1;
 8001a1a:	7afb      	ldrb	r3, [r7, #11]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	440b      	add	r3, r1
 8001a28:	3201      	adds	r2, #1
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]
    if(numSaltosArray[index]>9) numSaltosArray[index]= 0;
 8001a2e:	7afb      	ldrb	r3, [r7, #11]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b09      	cmp	r3, #9
 8001a38:	d904      	bls.n	8001a44 <setUserNumSaltos+0x3e>
 8001a3a:	7afb      	ldrb	r3, [r7, #11]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <setUserTypeJump>:

unsigned char setUserTypeJump(unsigned char* idx)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
    unsigned char* typeJumpArray = getTypeJumpArray();
 8001a56:	f7ff fb0b 	bl	8001070 <getTypeJumpArray>
 8001a5a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	72fb      	strb	r3, [r7, #11]
    typeJumpArray[index] = typeJumpArray[index]+1;
 8001a62:	7afb      	ldrb	r3, [r7, #11]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	7afb      	ldrb	r3, [r7, #11]
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	440b      	add	r3, r1
 8001a70:	3201      	adds	r2, #1
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]
    if(typeJumpArray[index]>3) typeJumpArray[index]= 0;
 8001a76:	7afb      	ldrb	r3, [r7, #11]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d904      	bls.n	8001a8c <setUserTypeJump+0x3e>
 8001a82:	7afb      	ldrb	r3, [r7, #11]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <setUserAltDJ>:

unsigned char setUserAltDJ(unsigned char* idx)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
    unsigned char* AltDJArray = getAltDJArray();
 8001a9e:	f7ff faf1 	bl	8001084 <getAltDJArray>
 8001aa2:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	72fb      	strb	r3, [r7, #11]
    AltDJArray[index] = AltDJArray[index]+1;
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3201      	adds	r2, #1
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]
    if(AltDJArray[index]>9) AltDJArray[index]= 0;
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b09      	cmp	r3, #9
 8001ac8:	d904      	bls.n	8001ad4 <setUserAltDJ+0x3e>
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <setUserNumSeries>:

unsigned char setUserNumSeries(unsigned char* idx)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
    unsigned char* numSeriesArray = getNumSeriesArray();
 8001ae6:	f7ff fad7 	bl	8001098 <getNumSeriesArray>
 8001aea:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	72fb      	strb	r3, [r7, #11]
    numSeriesArray[index] = numSeriesArray[index]+1;
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	7afb      	ldrb	r3, [r7, #11]
 8001afc:	68f9      	ldr	r1, [r7, #12]
 8001afe:	440b      	add	r3, r1
 8001b00:	3201      	adds	r2, #1
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]
    if(numSeriesArray[index]>9) numSeriesArray[index]= 0;
 8001b06:	7afb      	ldrb	r3, [r7, #11]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b09      	cmp	r3, #9
 8001b10:	d904      	bls.n	8001b1c <setUserNumSeries+0x3e>
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <setUserIntervalSeries>:

unsigned char setUserIntervalSeries(unsigned char* idx)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
    unsigned char* IntervalSeriesArray = getIntervalSeriesArray();
 8001b2e:	f7ff fabd 	bl	80010ac <getIntervalSeriesArray>
 8001b32:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	72fb      	strb	r3, [r7, #11]
    IntervalSeriesArray[index] = IntervalSeriesArray[index]+1;
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	7afb      	ldrb	r3, [r7, #11]
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	440b      	add	r3, r1
 8001b48:	3201      	adds	r2, #1
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]
    if(IntervalSeriesArray[index]>9) IntervalSeriesArray[index]= 0;
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b09      	cmp	r3, #9
 8001b58:	d904      	bls.n	8001b64 <setUserIntervalSeries+0x3e>
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
}
 8001b64:	bf00      	nop
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <setUserMass>:

unsigned char setUserMass(unsigned char* idx)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
    unsigned char* massArray = getMassArray();
 8001b76:	f7ff fa49 	bl	800100c <getMassArray>
 8001b7a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	72fb      	strb	r3, [r7, #11]
    massArray[index] = massArray[index]+1;
 8001b82:	7afb      	ldrb	r3, [r7, #11]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	7afb      	ldrb	r3, [r7, #11]
 8001b8c:	68f9      	ldr	r1, [r7, #12]
 8001b8e:	440b      	add	r3, r1
 8001b90:	3201      	adds	r2, #1
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]
    if(massArray[index]>9) massArray[index]= 0;
 8001b96:	7afb      	ldrb	r3, [r7, #11]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b09      	cmp	r3, #9
 8001ba0:	d904      	bls.n	8001bac <setUserMass+0x3e>
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
}
 8001bac:	bf00      	nop
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <setUserOverMass>:

unsigned char setUserOverMass(unsigned char* idx)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
    unsigned char* overMassArray = getOverMassArray();
 8001bbe:	f7ff fa2f 	bl	8001020 <getOverMassArray>
 8001bc2:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	72fb      	strb	r3, [r7, #11]
    overMassArray[index] = overMassArray[index]+1;
 8001bca:	7afb      	ldrb	r3, [r7, #11]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	781a      	ldrb	r2, [r3, #0]
 8001bd2:	7afb      	ldrb	r3, [r7, #11]
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3201      	adds	r2, #1
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]
    if(overMassArray[index]>9) overMassArray[index]= 0;
 8001bde:	7afb      	ldrb	r3, [r7, #11]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b09      	cmp	r3, #9
 8001be8:	d904      	bls.n	8001bf4 <setUserOverMass+0x3e>
 8001bea:	7afb      	ldrb	r3, [r7, #11]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <setUserNumTest>:

unsigned char setUserNumTest(unsigned char* idx)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
    unsigned char* numTestArray = getNumTestArray();
 8001c06:	f7ff fa5b 	bl	80010c0 <getNumTestArray>
 8001c0a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	72fb      	strb	r3, [r7, #11]
    numTestArray[index] = numTestArray[index]+1;
 8001c12:	7afb      	ldrb	r3, [r7, #11]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	7afb      	ldrb	r3, [r7, #11]
 8001c1c:	68f9      	ldr	r1, [r7, #12]
 8001c1e:	440b      	add	r3, r1
 8001c20:	3201      	adds	r2, #1
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]
    if(numTestArray[index]>9) numTestArray[index]= 0;
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b09      	cmp	r3, #9
 8001c30:	d904      	bls.n	8001c3c <setUserNumTest+0x3e>
 8001c32:	7afb      	ldrb	r3, [r7, #11]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <setIntervalSaltosTime>:

unsigned char* setIntervalSaltosTime(unsigned char* configInputTimer)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	unsigned char index = *configInputTimer + 3;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	3303      	adds	r3, #3
 8001c56:	73fb      	strb	r3, [r7, #15]
	struct tm* insertTime = getIntervalTimeStruct();
 8001c58:	f7ff f9ce 	bl	8000ff8 <getIntervalTimeStruct>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60bb      	str	r3, [r7, #8]

	switch(index)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	3b03      	subs	r3, #3
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d84a      	bhi.n	8001cfe <setIntervalSaltosTime+0xb6>
 8001c68:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <setIntervalSaltosTime+0x28>)
 8001c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6e:	bf00      	nop
 8001c70:	08001c85 	.word	0x08001c85
 8001c74:	08001ca1 	.word	0x08001ca1
 8001c78:	08001cff 	.word	0x08001cff
 8001c7c:	08001cbb 	.word	0x08001cbb
 8001c80:	08001cd7 	.word	0x08001cd7
	{
		case DEZENA_M:
			insertTime->tm_min = insertTime->tm_min+10;
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f103 020a 	add.w	r2, r3, #10
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b3c      	cmp	r3, #60	; 0x3c
 8001c96:	dd2b      	ble.n	8001cf0 <setIntervalSaltosTime+0xa8>
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
		break;
 8001c9e:	e027      	b.n	8001cf0 <setIntervalSaltosTime+0xa8>

		case UNIDADE_M:
			insertTime->tm_min = insertTime->tm_min+1;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b3c      	cmp	r3, #60	; 0x3c
 8001cb0:	dd20      	ble.n	8001cf4 <setIntervalSaltosTime+0xac>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	605a      	str	r2, [r3, #4]
		break;
 8001cb8:	e01c      	b.n	8001cf4 <setIntervalSaltosTime+0xac>

		case DEZENA_S:
			insertTime->tm_sec =insertTime->tm_sec+10 ;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f103 020a 	add.w	r2, r3, #10
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b3c      	cmp	r3, #60	; 0x3c
 8001ccc:	dd14      	ble.n	8001cf8 <setIntervalSaltosTime+0xb0>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

		break;
 8001cd4:	e010      	b.n	8001cf8 <setIntervalSaltosTime+0xb0>

		case UNIDADE_S:
			insertTime->tm_sec =insertTime->tm_sec+1 ;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b3c      	cmp	r3, #60	; 0x3c
 8001ce6:	dd09      	ble.n	8001cfc <setIntervalSaltosTime+0xb4>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
		break;
 8001cee:	e005      	b.n	8001cfc <setIntervalSaltosTime+0xb4>
		break;
 8001cf0:	bf00      	nop
 8001cf2:	e004      	b.n	8001cfe <setIntervalSaltosTime+0xb6>
		break;
 8001cf4:	bf00      	nop
 8001cf6:	e002      	b.n	8001cfe <setIntervalSaltosTime+0xb6>
		break;
 8001cf8:	bf00      	nop
 8001cfa:	e000      	b.n	8001cfe <setIntervalSaltosTime+0xb6>
		break;
 8001cfc:	bf00      	nop
	}

}
 8001cfe:	bf00      	nop
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <setUserTime>:

unsigned char* setUserTime(unsigned char* inputUserTimer)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    unsigned char index = *inputUserTimer;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	73fb      	strb	r3, [r7, #15]
    struct tm* insertTime = getTimeStruct();
 8001d16:	f7ff f965 	bl	8000fe4 <getTimeStruct>
 8001d1a:	60b8      	str	r0, [r7, #8]
    static unsigned char timeString[9];

    switch(index)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b07      	cmp	r3, #7
 8001d20:	f200 8089 	bhi.w	8001e36 <setUserTime+0x12e>
 8001d24:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <setUserTime+0x24>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08001d4d 	.word	0x08001d4d
 8001d30:	08001d75 	.word	0x08001d75
 8001d34:	08001e37 	.word	0x08001e37
 8001d38:	08001d9b 	.word	0x08001d9b
 8001d3c:	08001dc3 	.word	0x08001dc3
 8001d40:	08001e37 	.word	0x08001e37
 8001d44:	08001de9 	.word	0x08001de9
 8001d48:	08001e11 	.word	0x08001e11
    {
        case DEZENA_H:
            insertTime->tm_hour = insertTime->tm_hour+10;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f103 020a 	add.w	r2, r3, #10
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b17      	cmp	r3, #23
 8001d5e:	dd02      	ble.n	8001d66 <setUserTime+0x5e>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	4a35      	ldr	r2, [pc, #212]	; (8001e40 <setUserTime+0x138>)
 8001d6a:	2109      	movs	r1, #9
 8001d6c:	4835      	ldr	r0, [pc, #212]	; (8001e44 <setUserTime+0x13c>)
 8001d6e:	f008 f881 	bl	8009e74 <strftime>
        break;
 8001d72:	e060      	b.n	8001e36 <setUserTime+0x12e>

        case UNIDADE_H:
            insertTime->tm_hour = insertTime->tm_hour+1;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b17      	cmp	r3, #23
 8001d84:	dd02      	ble.n	8001d8c <setUserTime+0x84>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4a2c      	ldr	r2, [pc, #176]	; (8001e40 <setUserTime+0x138>)
 8001d90:	2109      	movs	r1, #9
 8001d92:	482c      	ldr	r0, [pc, #176]	; (8001e44 <setUserTime+0x13c>)
 8001d94:	f008 f86e 	bl	8009e74 <strftime>
        break;
 8001d98:	e04d      	b.n	8001e36 <setUserTime+0x12e>

        case DEZENA_M:
            insertTime->tm_min = insertTime->tm_min+10;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f103 020a 	add.w	r2, r3, #10
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b3c      	cmp	r3, #60	; 0x3c
 8001dac:	dd02      	ble.n	8001db4 <setUserTime+0xac>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2200      	movs	r2, #0
 8001db2:	605a      	str	r2, [r3, #4]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <setUserTime+0x138>)
 8001db8:	2109      	movs	r1, #9
 8001dba:	4822      	ldr	r0, [pc, #136]	; (8001e44 <setUserTime+0x13c>)
 8001dbc:	f008 f85a 	bl	8009e74 <strftime>
        break;
 8001dc0:	e039      	b.n	8001e36 <setUserTime+0x12e>

        case UNIDADE_M:
        	insertTime->tm_min = insertTime->tm_min+1;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b3c      	cmp	r3, #60	; 0x3c
 8001dd2:	dd02      	ble.n	8001dda <setUserTime+0xd2>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <setUserTime+0x138>)
 8001dde:	2109      	movs	r1, #9
 8001de0:	4818      	ldr	r0, [pc, #96]	; (8001e44 <setUserTime+0x13c>)
 8001de2:	f008 f847 	bl	8009e74 <strftime>
        break;
 8001de6:	e026      	b.n	8001e36 <setUserTime+0x12e>

        case DEZENA_S:
            insertTime->tm_sec =insertTime->tm_sec+10 ;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f103 020a 	add.w	r2, r3, #10
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b3c      	cmp	r3, #60	; 0x3c
 8001dfa:	dd02      	ble.n	8001e02 <setUserTime+0xfa>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <setUserTime+0x138>)
 8001e06:	2109      	movs	r1, #9
 8001e08:	480e      	ldr	r0, [pc, #56]	; (8001e44 <setUserTime+0x13c>)
 8001e0a:	f008 f833 	bl	8009e74 <strftime>
        break;
 8001e0e:	e012      	b.n	8001e36 <setUserTime+0x12e>

        case UNIDADE_S:
            insertTime->tm_sec =insertTime->tm_sec+1 ;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b3c      	cmp	r3, #60	; 0x3c
 8001e20:	dd02      	ble.n	8001e28 <setUserTime+0x120>
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <setUserTime+0x138>)
 8001e2c:	2109      	movs	r1, #9
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <setUserTime+0x13c>)
 8001e30:	f008 f820 	bl	8009e74 <strftime>
        break;
 8001e34:	bf00      	nop
    }
}
 8001e36:	bf00      	nop
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	0800bab8 	.word	0x0800bab8
 8001e44:	200004a4 	.word	0x200004a4

08001e48 <startReadingOutsideSensor>:

void startReadingOutsideSensor()
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
	static unsigned char userState = REPOUSO;
	unsigned char sensorFlag;
	static unsigned int initialTime,currentTime,contatoTime,vooTime,totalTime = 0;
	totalTime = getTimer3Variable();
 8001e4e:	f002 faff 	bl	8004450 <getTimer3Variable>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <startReadingOutsideSensor+0x100>)
 8001e58:	601a      	str	r2, [r3, #0]
	switch(userState)
 8001e5a:	4b3c      	ldr	r3, [pc, #240]	; (8001f4c <startReadingOutsideSensor+0x104>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b34      	cmp	r3, #52	; 0x34
 8001e60:	d044      	beq.n	8001eec <startReadingOutsideSensor+0xa4>
 8001e62:	2b34      	cmp	r3, #52	; 0x34
 8001e64:	dc6b      	bgt.n	8001f3e <startReadingOutsideSensor+0xf6>
 8001e66:	2b32      	cmp	r3, #50	; 0x32
 8001e68:	d002      	beq.n	8001e70 <startReadingOutsideSensor+0x28>
 8001e6a:	2b33      	cmp	r3, #51	; 0x33
 8001e6c:	d015      	beq.n	8001e9a <startReadingOutsideSensor+0x52>
		break;

	}


}
 8001e6e:	e066      	b.n	8001f3e <startReadingOutsideSensor+0xf6>
			sensorFlag = getTimer2Variable();
 8001e70:	f002 fae2 	bl	8004438 <getTimer2Variable>
 8001e74:	4603      	mov	r3, r0
 8001e76:	71fb      	strb	r3, [r7, #7]
			if(sensorFlag == 0)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <startReadingOutsideSensor+0x4a>
				userState = CONTATO;
 8001e7e:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <startReadingOutsideSensor+0x104>)
 8001e80:	2233      	movs	r2, #51	; 0x33
 8001e82:	701a      	strb	r2, [r3, #0]
				initialTime = getTimer3Variable();
 8001e84:	f002 fae4 	bl	8004450 <getTimer3Variable>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <startReadingOutsideSensor+0x108>)
 8001e8e:	601a      	str	r2, [r3, #0]
		break;
 8001e90:	e055      	b.n	8001f3e <startReadingOutsideSensor+0xf6>
				userState = REPOUSO;
 8001e92:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <startReadingOutsideSensor+0x104>)
 8001e94:	2232      	movs	r2, #50	; 0x32
 8001e96:	701a      	strb	r2, [r3, #0]
		break;
 8001e98:	e051      	b.n	8001f3e <startReadingOutsideSensor+0xf6>
			sensorFlag = getTimer2Variable();
 8001e9a:	f002 facd 	bl	8004438 <getTimer2Variable>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
			if(sensorFlag == 1)
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d117      	bne.n	8001ed8 <startReadingOutsideSensor+0x90>
				userState = VOO;
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <startReadingOutsideSensor+0x104>)
 8001eaa:	2234      	movs	r2, #52	; 0x34
 8001eac:	701a      	strb	r2, [r3, #0]
				currentTime = getTimer3Variable();
 8001eae:	f002 facf 	bl	8004450 <getTimer3Variable>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <startReadingOutsideSensor+0x10c>)
 8001eb8:	601a      	str	r2, [r3, #0]
				contatoTime = currentTime-initialTime;
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <startReadingOutsideSensor+0x10c>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <startReadingOutsideSensor+0x108>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <startReadingOutsideSensor+0x110>)
 8001ec6:	6013      	str	r3, [r2, #0]
				initialTime = currentTime;
 8001ec8:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <startReadingOutsideSensor+0x10c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <startReadingOutsideSensor+0x108>)
 8001ece:	6013      	str	r3, [r2, #0]
				vooTime = 0;
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <startReadingOutsideSensor+0x114>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
		break;
 8001ed6:	e032      	b.n	8001f3e <startReadingOutsideSensor+0xf6>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ede:	4820      	ldr	r0, [pc, #128]	; (8001f60 <startReadingOutsideSensor+0x118>)
 8001ee0:	f003 ffd6 	bl	8005e90 <HAL_GPIO_WritePin>
				userState = CONTATO;
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <startReadingOutsideSensor+0x104>)
 8001ee6:	2233      	movs	r2, #51	; 0x33
 8001ee8:	701a      	strb	r2, [r3, #0]
		break;
 8001eea:	e028      	b.n	8001f3e <startReadingOutsideSensor+0xf6>
			sensorFlag = getTimer2Variable();
 8001eec:	f002 faa4 	bl	8004438 <getTimer2Variable>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
			if(sensorFlag == 0)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d117      	bne.n	8001f2a <startReadingOutsideSensor+0xe2>
				userState = CONTATO;
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <startReadingOutsideSensor+0x104>)
 8001efc:	2233      	movs	r2, #51	; 0x33
 8001efe:	701a      	strb	r2, [r3, #0]
				currentTime = getTimer3Variable();
 8001f00:	f002 faa6 	bl	8004450 <getTimer3Variable>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <startReadingOutsideSensor+0x10c>)
 8001f0a:	601a      	str	r2, [r3, #0]
				vooTime = currentTime - initialTime;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <startReadingOutsideSensor+0x10c>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <startReadingOutsideSensor+0x108>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <startReadingOutsideSensor+0x114>)
 8001f18:	6013      	str	r3, [r2, #0]
 				contatoTime = 0;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <startReadingOutsideSensor+0x110>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
				initialTime = currentTime;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <startReadingOutsideSensor+0x10c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <startReadingOutsideSensor+0x108>)
 8001f26:	6013      	str	r3, [r2, #0]
		break;
 8001f28:	e008      	b.n	8001f3c <startReadingOutsideSensor+0xf4>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f30:	480b      	ldr	r0, [pc, #44]	; (8001f60 <startReadingOutsideSensor+0x118>)
 8001f32:	f003 ffad 	bl	8005e90 <HAL_GPIO_WritePin>
				userState = VOO;
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <startReadingOutsideSensor+0x104>)
 8001f38:	2234      	movs	r2, #52	; 0x34
 8001f3a:	701a      	strb	r2, [r3, #0]
		break;
 8001f3c:	bf00      	nop
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200004b0 	.word	0x200004b0
 8001f4c:	2000000b 	.word	0x2000000b
 8001f50:	200004b4 	.word	0x200004b4
 8001f54:	200004b8 	.word	0x200004b8
 8001f58:	200004bc 	.word	0x200004bc
 8001f5c:	200004c0 	.word	0x200004c0
 8001f60:	40011000 	.word	0x40011000

08001f64 <startReadingInsideSensor>:
void startReadingInsideSensor()
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
//
//			start_dentro_state = CONTATO;
//		break;
//	}

}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <updateUserMsg>:
#include "time.h"
#include "stdlib.h"


unsigned char updateUserMsg(unsigned char col, unsigned char linha, unsigned char *userMessage, unsigned char* status)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60ba      	str	r2, [r7, #8]
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	73fb      	strb	r3, [r7, #15]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	73bb      	strb	r3, [r7, #14]
	if(*status == IDDLE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10b      	bne.n	8001fa2 <updateUserMsg+0x32>
	{
	    printDataDisplay(col,linha,userMessage);
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	7bb9      	ldrb	r1, [r7, #14]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 ff61 	bl	8002e58 <printDataDisplay>
		*status = PRINTED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(250);
 8001f9c:	20fa      	movs	r0, #250	; 0xfa
 8001f9e:	f003 fa23 	bl	80053e8 <HAL_Delay>
	}
}
 8001fa2:	bf00      	nop
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <readyUserInterface>:

unsigned char readyUserInterface(unsigned char* displayStatus,unsigned char* cursorPosition)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
	statusUserInterface(displayStatus);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f80c 	bl	8001fd4 <statusUserInterface>
	resetKeyPressed();
 8001fbc:	f002 fa10 	bl	80043e0 <resetKeyPressed>
	resetCursorInterface(cursorPosition);
 8001fc0:	6838      	ldr	r0, [r7, #0]
 8001fc2:	f000 f814 	bl	8001fee <resetCursorInterface>
	eraseDataDisplay();
 8001fc6:	f000 ff5a 	bl	8002e7e <eraseDataDisplay>
}
 8001fca:	bf00      	nop
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <statusUserInterface>:

unsigned char statusUserInterface(unsigned char* displayStatus)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	*displayStatus = IDDLE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <resetCursorInterface>:
	HW_UPDATE_DATA(actualposition,linha);
	return actualposition;
}

unsigned char resetCursorInterface(unsigned char* cursorPosition)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
	cursorPosition[0] = 0;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
	cursorPosition[1] = 0;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3301      	adds	r3, #1
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
}
 8002004:	bf00      	nop
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <exportStateMachine>:
        struct dataInsert menuInsert;
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
unsigned char exportStateMachine(struct Menu* subMenu)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	; 0x30
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuExport = subMenu;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	623b      	str	r3, [r7, #32]
    unsigned char key = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    short index = 2;
 8002022:	2302      	movs	r3, #2
 8002024:	81fb      	strh	r3, [r7, #14]
    unsigned char indexTest = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	77fb      	strb	r3, [r7, #31]
    unsigned char testSamples = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    unsigned char selectedUserTest=0;
 8002030:	2300      	movs	r3, #0
 8002032:	77bb      	strb	r3, [r7, #30]
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    struct results* ptr_structExportResult;
    unsigned char dataVerify;
    unsigned char cursorPosition[2] = {0,0};
 8002034:	2300      	movs	r3, #0
 8002036:	81bb      	strh	r3, [r7, #12]
    unsigned char displayUpdateStatus = IDDLE;
 8002038:	2300      	movs	r3, #0
 800203a:	72fb      	strb	r3, [r7, #11]
    while(key != MENU)
 800203c:	bf00      	nop
 800203e:	e1f8      	b.n	8002432 <exportStateMachine+0x422>
    {
        switch(subMenuExport->menuState)
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	78db      	ldrb	r3, [r3, #3]
 8002044:	2b06      	cmp	r3, #6
 8002046:	f200 81f4 	bhi.w	8002432 <exportStateMachine+0x422>
 800204a:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <exportStateMachine+0x40>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	0800206d 	.word	0x0800206d
 8002054:	0800207d 	.word	0x0800207d
 8002058:	080020b1 	.word	0x080020b1
 800205c:	080021bd 	.word	0x080021bd
 8002060:	08002273 	.word	0x08002273
 8002064:	08002137 	.word	0x08002137
 8002068:	080023fd 	.word	0x080023fd
        {
            case IDDLE:
                subMenuExport->menuState = getNextSub(VERIFICA_COMM);
 800206c:	2001      	movs	r0, #1
 800206e:	f001 fbdd 	bl	800382c <getNextSub>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	70da      	strb	r2, [r3, #3]
            break;
 800207a:	e1da      	b.n	8002432 <exportStateMachine+0x422>

            case VERIFICA_COMM:
                //funcao para habilitar comunicacao
            	startCOMM(); //verificar se nao preciso deixar uma flag de comm no data.c para acessar o valor dela
 800207c:	f000 ff60 	bl	8002f40 <startCOMM>
            	// e comparar para verificar se a comm já está ligada antes de liga-la novamente.
                updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 8002080:	4bd6      	ldr	r3, [pc, #856]	; (80023dc <exportStateMachine+0x3cc>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	f107 030b 	add.w	r3, r7, #11
 8002088:	2100      	movs	r1, #0
 800208a:	2000      	movs	r0, #0
 800208c:	f7ff ff70 	bl	8001f70 <updateUserMsg>
                subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8002090:	2002      	movs	r0, #2
 8002092:	f001 fbcb 	bl	800382c <getNextSub>
 8002096:	4603      	mov	r3, r0
 8002098:	461a      	mov	r2, r3
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	70da      	strb	r2, [r3, #3]
                readyUserInterface(&displayUpdateStatus,cursorPosition);
 800209e:	f107 020c 	add.w	r2, r7, #12
 80020a2:	f107 030b 	add.w	r3, r7, #11
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff7f 	bl	8001fac <readyUserInterface>
            break;
 80020ae:	e1c0      	b.n	8002432 <exportStateMachine+0x422>

            case EXPORTAR_UNITARIO:
                updateUserMsg(0,0,exportunitUserMsg,&displayUpdateStatus);
 80020b0:	4bcb      	ldr	r3, [pc, #812]	; (80023e0 <exportStateMachine+0x3d0>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	f107 030b 	add.w	r3, r7, #11
 80020b8:	2100      	movs	r1, #0
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7ff ff58 	bl	8001f70 <updateUserMsg>
                key = getKeyPressed();
 80020c0:	f002 f982 	bl	80043c8 <getKeyPressed>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if(key == AVANCAR)
 80020ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020ce:	2b41      	cmp	r3, #65	; 0x41
 80020d0:	d111      	bne.n	80020f6 <exportStateMachine+0xe6>
                {
                	resetKeyPressed();
 80020d2:	f002 f985 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80020d6:	f107 020c 	add.w	r2, r7, #12
 80020da:	f107 030b 	add.w	r3, r7, #11
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff63 	bl	8001fac <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_TODOS);
 80020e6:	2005      	movs	r0, #5
 80020e8:	f001 fba0 	bl	800382c <getNextSub>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461a      	mov	r2, r3
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	70da      	strb	r2, [r3, #3]
 80020f4:	e19d      	b.n	8002432 <exportStateMachine+0x422>
                }

                else if(key == CONFIRMAR)
 80020f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020fa:	2b43      	cmp	r3, #67	; 0x43
 80020fc:	f040 8199 	bne.w	8002432 <exportStateMachine+0x422>
                {
                	resetKeyPressed();
 8002100:	f002 f96e 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002104:	f107 020c 	add.w	r2, r7, #12
 8002108:	f107 030b 	add.w	r3, r7, #11
 800210c:	4611      	mov	r1, r2
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff4c 	bl	8001fac <readyUserInterface>
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	3303      	adds	r3, #3
 8002118:	4618      	mov	r0, r3
 800211a:	f001 fb99 	bl	8003850 <setSelectSub>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	705a      	strb	r2, [r3, #1]
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 8002126:	2003      	movs	r0, #3
 8002128:	f001 fb80 	bl	800382c <getNextSub>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	70da      	strb	r2, [r3, #3]
                }
                break;
 8002134:	e17d      	b.n	8002432 <exportStateMachine+0x422>

            case EXPORTAR_TODOS:
                updateUserMsg(0,0,exportallUserMsg,&displayUpdateStatus);
 8002136:	4bab      	ldr	r3, [pc, #684]	; (80023e4 <exportStateMachine+0x3d4>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	f107 030b 	add.w	r3, r7, #11
 800213e:	2100      	movs	r1, #0
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff ff15 	bl	8001f70 <updateUserMsg>
                key = getKeyPressed();
 8002146:	f002 f93f 	bl	80043c8 <getKeyPressed>
 800214a:	4603      	mov	r3, r0
 800214c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if(key == AVANCAR)
 8002150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002154:	2b41      	cmp	r3, #65	; 0x41
 8002156:	d111      	bne.n	800217c <exportStateMachine+0x16c>
                {
                	resetKeyPressed();
 8002158:	f002 f942 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800215c:	f107 020c 	add.w	r2, r7, #12
 8002160:	f107 030b 	add.w	r3, r7, #11
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff20 	bl	8001fac <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 800216c:	2002      	movs	r0, #2
 800216e:	f001 fb5d 	bl	800382c <getNextSub>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	70da      	strb	r2, [r3, #3]
 800217a:	e15a      	b.n	8002432 <exportStateMachine+0x422>
                }

                else if(key == CONFIRMAR)
 800217c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002180:	2b43      	cmp	r3, #67	; 0x43
 8002182:	f040 8156 	bne.w	8002432 <exportStateMachine+0x422>
                {
                	resetKeyPressed();
 8002186:	f002 f92b 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800218a:	f107 020c 	add.w	r2, r7, #12
 800218e:	f107 030b 	add.w	r3, r7, #11
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff09 	bl	8001fac <readyUserInterface>
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	3303      	adds	r3, #3
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 fb56 	bl	8003850 <setSelectSub>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	705a      	strb	r2, [r3, #1]
                    subMenuExport->menuState = getNextSub(PROCESS_TODOS);
 80021ac:	2006      	movs	r0, #6
 80021ae:	f001 fb3d 	bl	800382c <getNextSub>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461a      	mov	r2, r3
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	70da      	strb	r2, [r3, #3]
                }
                break;
 80021ba:	e13a      	b.n	8002432 <exportStateMachine+0x422>


            case NUM_TESTE_EXPORT:
                updateUserMsg(0,0,consultTestUserMsg,&displayUpdateStatus);
 80021bc:	4b8a      	ldr	r3, [pc, #552]	; (80023e8 <exportStateMachine+0x3d8>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	f107 030b 	add.w	r3, r7, #11
 80021c4:	2100      	movs	r1, #0
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7ff fed2 	bl	8001f70 <updateUserMsg>
                ptr_exportTestString = getNumTestString();
 80021cc:	f7ff fb3a 	bl	8001844 <getNumTestString>
 80021d0:	62b8      	str	r0, [r7, #40]	; 0x28
                printDataDisplay(0,1,ptr_exportTestString);
 80021d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021d4:	2101      	movs	r1, #1
 80021d6:	2000      	movs	r0, #0
 80021d8:	f000 fe3e 	bl	8002e58 <printDataDisplay>
                updateDataDisplay(index,1);
 80021dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021e0:	2101      	movs	r1, #1
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fe52 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 80021e8:	f002 f8ee 	bl	80043c8 <getKeyPressed>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if(key == INSERIR)
 80021f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021f6:	2b49      	cmp	r3, #73	; 0x49
 80021f8:	d10e      	bne.n	8002218 <exportStateMachine+0x208>
                {
                	resetKeyPressed();
 80021fa:	f002 f8f1 	bl	80043e0 <resetKeyPressed>
                    setUserNumTest(&index);
 80021fe:	f107 030e 	add.w	r3, r7, #14
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fcfb 	bl	8001bfe <setUserNumTest>
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 8002208:	2003      	movs	r0, #3
 800220a:	f001 fb0f 	bl	800382c <getNextSub>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	70da      	strb	r2, [r3, #3]
 8002216:	e10c      	b.n	8002432 <exportStateMachine+0x422>
                }
                else if(key == AVANCAR)
 8002218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800221c:	2b41      	cmp	r3, #65	; 0x41
 800221e:	d108      	bne.n	8002232 <exportStateMachine+0x222>
                {
                	resetKeyPressed();
 8002220:	f002 f8de 	bl	80043e0 <resetKeyPressed>
                    indexChange(&index,2);
 8002224:	f107 030e 	add.w	r3, r7, #14
 8002228:	2102      	movs	r1, #2
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff f9d0 	bl	80015d0 <indexChange>
 8002230:	e0ff      	b.n	8002432 <exportStateMachine+0x422>
                }
                else if(key == CONFIRMAR)
 8002232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002236:	2b43      	cmp	r3, #67	; 0x43
 8002238:	f040 80fb 	bne.w	8002432 <exportStateMachine+0x422>
                {
                	resetKeyPressed();
 800223c:	f002 f8d0 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002240:	f107 020c 	add.w	r2, r7, #12
 8002244:	f107 030b 	add.w	r3, r7, #11
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff feae 	bl	8001fac <readyUserInterface>
                    subMenuExport->menuState = getNextSub(PROCESS_UNITARIO);
 8002250:	2004      	movs	r0, #4
 8002252:	f001 faeb 	bl	800382c <getNextSub>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	70da      	strb	r2, [r3, #3]
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	3303      	adds	r3, #3
 8002262:	4618      	mov	r0, r3
 8002264:	f001 faf4 	bl	8003850 <setSelectSub>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	705a      	strb	r2, [r3, #1]
                }

                break;
 8002270:	e0df      	b.n	8002432 <exportStateMachine+0x422>

                case PROCESS_UNITARIO:
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8002272:	4b5e      	ldr	r3, [pc, #376]	; (80023ec <exportStateMachine+0x3dc>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	f107 030b 	add.w	r3, r7, #11
 800227a:	2100      	movs	r1, #0
 800227c:	2000      	movs	r0, #0
 800227e:	f7ff fe77 	bl	8001f70 <updateUserMsg>
                    selectedUserTest = stringToInt(ptr_exportTestString);
 8002282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002284:	f7ff f969 	bl	800155a <stringToInt>
 8002288:	4603      	mov	r3, r0
 800228a:	77bb      	strb	r3, [r7, #30]
                    ptr_structExportResult = getUserResultData(selectedUserTest);
 800228c:	7fbb      	ldrb	r3, [r7, #30]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe ff8c 	bl	80011ac <getUserResultData>
 8002294:	6278      	str	r0, [r7, #36]	; 0x24

                   //ESSE FOR � S� PARA TESTE NO CONSOLE, AO INVES DESSE MONTE DE "PRINT", COLOCAREI FU��O PARA ENVIAR BT

                    for(testSamples=0;testSamples<(ptr_structExportResult->resultTestAcquiredSamples);testSamples++)
 8002296:	2300      	movs	r3, #0
 8002298:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800229c:	e08b      	b.n	80023b6 <exportStateMachine+0x3a6>
                    {
                        ptr_structExportResult = getUserResultData(selectedUserTest);
 800229e:	7fbb      	ldrb	r3, [r7, #30]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe ff83 	bl	80011ac <getUserResultData>
 80022a6:	6278      	str	r0, [r7, #36]	; 0x24
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 80022a8:	f107 020c 	add.w	r2, r7, #12
 80022ac:	f107 030b 	add.w	r3, r7, #11
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fe7a 	bl	8001fac <readyUserInterface>
                        updateUserMsg(0,0,"Amostra",&displayUpdateStatus);
 80022b8:	f107 030b 	add.w	r3, r7, #11
 80022bc:	4a4c      	ldr	r2, [pc, #304]	; (80023f0 <exportStateMachine+0x3e0>)
 80022be:	2100      	movs	r1, #0
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff fe55 	bl	8001f70 <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 80022c6:	f107 020c 	add.w	r2, r7, #12
 80022ca:	f107 030b 	add.w	r3, r7, #11
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fe6b 	bl	8001fac <readyUserInterface>
                        ptr_sampleString = param_1_toString(&ptr_structExportResult->Measurement[testSamples].sampleNum);
 80022d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022de:	4413      	add	r3, r2
 80022e0:	3304      	adds	r3, #4
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fae6 	bl	80018b4 <param_1_toString>
 80022e8:	61b8      	str	r0, [r7, #24]
                        updateUserMsg(0,0,ptr_sampleString,&displayUpdateStatus);
 80022ea:	f107 030b 	add.w	r3, r7, #11
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	2100      	movs	r1, #0
 80022f2:	2000      	movs	r0, #0
 80022f4:	f7ff fe3c 	bl	8001f70 <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 80022f8:	f107 020c 	add.w	r2, r7, #12
 80022fc:	f107 030b 	add.w	r3, r7, #11
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fe52 	bl	8001fac <readyUserInterface>

                        updateUserMsg(0,0,"Tempo de Voo",&displayUpdateStatus);
 8002308:	f107 030b 	add.w	r3, r7, #11
 800230c:	4a39      	ldr	r2, [pc, #228]	; (80023f4 <exportStateMachine+0x3e4>)
 800230e:	2100      	movs	r1, #0
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff fe2d 	bl	8001f70 <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002316:	f107 020c 	add.w	r2, r7, #12
 800231a:	f107 030b 	add.w	r3, r7, #11
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fe43 	bl	8001fac <readyUserInterface>
                        ptr_vooTimeString = param_2_toString(&ptr_structExportResult->Measurement[testSamples].uiVooTime);
 8002326:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	3308      	adds	r3, #8
 800232e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002330:	4413      	add	r3, r2
 8002332:	3304      	adds	r3, #4
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fad1 	bl	80018dc <param_2_toString>
 800233a:	6178      	str	r0, [r7, #20]
                        updateUserMsg(0,0,ptr_vooTimeString,&displayUpdateStatus);
 800233c:	f107 030b 	add.w	r3, r7, #11
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	2100      	movs	r1, #0
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff fe13 	bl	8001f70 <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 800234a:	f107 020c 	add.w	r2, r7, #12
 800234e:	f107 030b 	add.w	r3, r7, #11
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fe29 	bl	8001fac <readyUserInterface>

                        updateUserMsg(0,0,"Altura do salto",&displayUpdateStatus);
 800235a:	f107 030b 	add.w	r3, r7, #11
 800235e:	4a26      	ldr	r2, [pc, #152]	; (80023f8 <exportStateMachine+0x3e8>)
 8002360:	2100      	movs	r1, #0
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff fe04 	bl	8001f70 <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002368:	f107 020c 	add.w	r2, r7, #12
 800236c:	f107 030b 	add.w	r3, r7, #11
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fe1a 	bl	8001fac <readyUserInterface>
                        ptr_alturaString = param_3_toString(&ptr_structExportResult->Measurement[testSamples].ucAltDistance);
 8002378:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	3308      	adds	r3, #8
 8002380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002382:	4413      	add	r3, r2
 8002384:	3308      	adds	r3, #8
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fabc 	bl	8001904 <param_3_toString>
 800238c:	6138      	str	r0, [r7, #16]
                        updateUserMsg(0,0,ptr_alturaString,&displayUpdateStatus);
 800238e:	f107 030b 	add.w	r3, r7, #11
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	2100      	movs	r1, #0
 8002396:	2000      	movs	r0, #0
 8002398:	f7ff fdea 	bl	8001f70 <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 800239c:	f107 020c 	add.w	r2, r7, #12
 80023a0:	f107 030b 	add.w	r3, r7, #11
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fe00 	bl	8001fac <readyUserInterface>
                    for(testSamples=0;testSamples<(ptr_structExportResult->resultTestAcquiredSamples);testSamples++)
 80023ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023b0:	3301      	adds	r3, #1
 80023b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	785b      	ldrb	r3, [r3, #1]
 80023ba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80023be:	429a      	cmp	r2, r3
 80023c0:	f4ff af6d 	bcc.w	800229e <exportStateMachine+0x28e>
                    }
//                    transmissionCOMM();
                    //Acessa os dados referente ao Teste e envia apenas o selecionado por BT
                subMenuExport->menuState = getNextSub(IDDLE);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f001 fa31 	bl	800382c <getNextSub>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461a      	mov	r2, r3
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	70da      	strb	r2, [r3, #3]
                key = MENU;
 80023d2:	234d      	movs	r3, #77	; 0x4d
 80023d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 80023d8:	e02b      	b.n	8002432 <exportStateMachine+0x422>
 80023da:	bf00      	nop
 80023dc:	20000024 	.word	0x20000024
 80023e0:	20000098 	.word	0x20000098
 80023e4:	2000009c 	.word	0x2000009c
 80023e8:	20000054 	.word	0x20000054
 80023ec:	2000005c 	.word	0x2000005c
 80023f0:	0800bd2c 	.word	0x0800bd2c
 80023f4:	0800bd34 	.word	0x0800bd34
 80023f8:	0800bd44 	.word	0x0800bd44

                case PROCESS_TODOS: //
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <exportStateMachine+0x438>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	f107 030b 	add.w	r3, r7, #11
 8002404:	2100      	movs	r1, #0
 8002406:	2000      	movs	r0, #0
 8002408:	f7ff fdb2 	bl	8001f70 <updateUserMsg>
//                            printf("Teste %d existe\n",i);
//                       }
//                       else printf("Teste %d nao existe\n",i);
//
//                    }
                    subMenuExport->menuState = getNextSub(IDDLE);
 800240c:	2000      	movs	r0, #0
 800240e:	f001 fa0d 	bl	800382c <getNextSub>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	70da      	strb	r2, [r3, #3]
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800241a:	f107 020c 	add.w	r2, r7, #12
 800241e:	f107 030b 	add.w	r3, r7, #11
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fdc1 	bl	8001fac <readyUserInterface>
                    key = MENU;
 800242a:	234d      	movs	r3, #77	; 0x4d
 800242c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    break;
 8002430:	bf00      	nop
    while(key != MENU)
 8002432:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002436:	2b4d      	cmp	r3, #77	; 0x4d
 8002438:	f47f ae02 	bne.w	8002040 <exportStateMachine+0x30>
        }
    }
}
 800243c:	bf00      	nop
 800243e:	4618      	mov	r0, r3
 8002440:	3730      	adds	r7, #48	; 0x30
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	2000005c 	.word	0x2000005c

0800244c <initStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char initStateMachine(struct Menu* subMenu)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8002452:	af00      	add	r7, sp, #0
 8002454:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002458:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800245c:	6018      	str	r0, [r3, #0]
    struct Menu* subMenuIniciar = subMenu;
 800245e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002462:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 800246c:	f7fe fe3c 	bl	80010e8 <getUserConfigStruct>
 8002470:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
    unsigned char key = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
    short insertColumn = 7;
 800247a:	2307      	movs	r3, #7
 800247c:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222

    struct tm myTime;
    struct tm* userTimeStruct = &myTime;
 8002480:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8002484:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    unsigned char userTimeString[9];
    unsigned char procTimeString[9];
    unsigned char* ptr_massString;
    unsigned char* ptr_overMassString;

    unsigned char displayUpdateStatus = IDDLE;
 8002488:	2300      	movs	r3, #0
 800248a:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
    unsigned char cursorPosition[2] = {0,0};
 800248e:	2300      	movs	r3, #0
 8002490:	f8a7 31e0 	strh.w	r3, [r7, #480]	; 0x1e0
    unsigned char* ptr_Sample;
    unsigned char* ptr_ulReadingTime;
    unsigned char* ptr_uiVooTime;
    unsigned char* ptr_ucAltDistance;
    struct results result[TEST_SIZE]; //verificar se vou usar o endere�o de data.c assim como fiz com a estrutura de configuracao
    unsigned char i = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
    unsigned char sampleCount=0;
 800249a:	2300      	movs	r3, #0
 800249c:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
    static unsigned char arraySample[9];
    static unsigned long int arrayReadingTime[9];
    static unsigned int arrayVooTime[9];
    static unsigned char arrayAltDistance[9];
    //
    resetResultStruct(&result[0]);
 80024a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe ff2d 	bl	8001304 <resetResultStruct>
    resetResultStruct(&result[1]);
 80024aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024ae:	3354      	adds	r3, #84	; 0x54
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe ff27 	bl	8001304 <resetResultStruct>
    resetResultStruct(&result[2]);
 80024b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024ba:	33a8      	adds	r3, #168	; 0xa8
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe ff21 	bl	8001304 <resetResultStruct>
    resetResultStruct(&result[3]);
 80024c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024c6:	33fc      	adds	r3, #252	; 0xfc
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe ff1b 	bl	8001304 <resetResultStruct>
    resetResultStruct(&result[4]);
 80024ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe ff14 	bl	8001304 <resetResultStruct>
    unsigned int sensorFlag;
    unsigned int timer3Data;
    unsigned int T_initial;
    unsigned int T_current;
    unsigned int T_final;
    unsigned char readingState = IDDLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 323c 	strb.w	r3, [r7, #572]	; 0x23c
    unsigned char timer2DataString[5] = {0,0,0,0,0};
 80024e2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80024e6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80024ea:	4ae3      	ldr	r2, [pc, #908]	; (8002878 <initStateMachine+0x42c>)
 80024ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024f0:	6018      	str	r0, [r3, #0]
 80024f2:	3304      	adds	r3, #4
 80024f4:	7019      	strb	r1, [r3, #0]
    unsigned char timer3DataString[5] = {0,0,0,0,0};
 80024f6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80024fa:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80024fe:	4ade      	ldr	r2, [pc, #888]	; (8002878 <initStateMachine+0x42c>)
 8002500:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002504:	6018      	str	r0, [r3, #0]
 8002506:	3304      	adds	r3, #4
 8002508:	7019      	strb	r1, [r3, #0]
    unsigned char T_initialDataString[5] = {0,0,0,0,0};
 800250a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800250e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002512:	4ad9      	ldr	r2, [pc, #868]	; (8002878 <initStateMachine+0x42c>)
 8002514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002518:	6018      	str	r0, [r3, #0]
 800251a:	3304      	adds	r3, #4
 800251c:	7019      	strb	r1, [r3, #0]
    unsigned char T_finalDataString[5] = {0,0,0,0,0};
 800251e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002522:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8002526:	4ad4      	ldr	r2, [pc, #848]	; (8002878 <initStateMachine+0x42c>)
 8002528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800252c:	6018      	str	r0, [r3, #0]
 800252e:	3304      	adds	r3, #4
 8002530:	7019      	strb	r1, [r3, #0]
    unsigned char T_currentDataString[5] = {0,0,0,0,0};
 8002532:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002536:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800253a:	4acf      	ldr	r2, [pc, #828]	; (8002878 <initStateMachine+0x42c>)
 800253c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002540:	6018      	str	r0, [r3, #0]
 8002542:	3304      	adds	r3, #4
 8002544:	7019      	strb	r1, [r3, #0]
    unsigned char sensorFlagString[5] = {0,0,0,0,0};
 8002546:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800254a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800254e:	4aca      	ldr	r2, [pc, #808]	; (8002878 <initStateMachine+0x42c>)
 8002550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002554:	6018      	str	r0, [r3, #0]
 8002556:	3304      	adds	r3, #4
 8002558:	7019      	strb	r1, [r3, #0]
    unsigned char startTapete;


    while(key != MENU)
 800255a:	bf00      	nop
 800255c:	f000 bc47 	b.w	8002dee <initStateMachine+0x9a2>
    {
        switch(subMenuIniciar->menuState)
 8002560:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002564:	78db      	ldrb	r3, [r3, #3]
 8002566:	2b0c      	cmp	r3, #12
 8002568:	f200 8441 	bhi.w	8002dee <initStateMachine+0x9a2>
 800256c:	a201      	add	r2, pc, #4	; (adr r2, 8002574 <initStateMachine+0x128>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	080025a9 	.word	0x080025a9
 8002578:	080025bd 	.word	0x080025bd
 800257c:	08002657 	.word	0x08002657
 8002580:	08002711 	.word	0x08002711
 8002584:	08002811 	.word	0x08002811
 8002588:	0800290f 	.word	0x0800290f
 800258c:	080029eb 	.word	0x080029eb
 8002590:	08002a71 	.word	0x08002a71
 8002594:	08002ae5 	.word	0x08002ae5
 8002598:	08002b73 	.word	0x08002b73
 800259c:	08002c01 	.word	0x08002c01
 80025a0:	08002c31 	.word	0x08002c31
 80025a4:	08002d27 	.word	0x08002d27
        {
            case IDDLE:
                subMenuIniciar->menuState = getNextSub(COMM_OFF);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f001 f93f 	bl	800382c <getNextSub>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80025b6:	70da      	strb	r2, [r3, #3]
                //RESET
            break;
 80025b8:	f000 bc19 	b.w	8002dee <initStateMachine+0x9a2>

            case COMM_OFF:
                updateUserMsg(0,0,noTransmissionMsg,&displayUpdateStatus);
 80025bc:	4baf      	ldr	r3, [pc, #700]	; (800287c <initStateMachine+0x430>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 80025c4:	2100      	movs	r1, #0
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7ff fcd2 	bl	8001f70 <updateUserMsg>
                key = getKeyPressed();
 80025cc:	f001 fefc 	bl	80043c8 <getKeyPressed>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
                if(key == AVANCAR)
 80025d6:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80025da:	2b41      	cmp	r3, #65	; 0x41
 80025dc:	d112      	bne.n	8002604 <initStateMachine+0x1b8>
                {
                	resetKeyPressed();
 80025de:	f001 feff 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80025e2:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80025e6:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fcdd 	bl	8001fac <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(COMM_ON);
 80025f2:	2002      	movs	r0, #2
 80025f4:	f001 f91a 	bl	800382c <getNextSub>
 80025f8:	4603      	mov	r3, r0
 80025fa:	461a      	mov	r2, r3
 80025fc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002600:	70da      	strb	r2, [r3, #3]
 8002602:	e3f4      	b.n	8002dee <initStateMachine+0x9a2>
                }
                else if(key == CONFIRMAR)
 8002604:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002608:	2b43      	cmp	r3, #67	; 0x43
 800260a:	f040 83f0 	bne.w	8002dee <initStateMachine+0x9a2>
                {
                	resetKeyPressed();
 800260e:	f001 fee7 	bl	80043e0 <resetKeyPressed>
                    stopCOMM();
 8002612:	f000 fca4 	bl	8002f5e <stopCOMM>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002616:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800261a:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fcc3 	bl	8001fac <readyUserInterface>
                    ptr_userConfiguration->userCommConfig = COMM_OFF;
 8002626:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800262a:	2201      	movs	r2, #1
 800262c:	74da      	strb	r2, [r3, #19]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 800262e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002632:	3303      	adds	r3, #3
 8002634:	4618      	mov	r0, r3
 8002636:	f001 f90b 	bl	8003850 <setSelectSub>
 800263a:	4603      	mov	r3, r0
 800263c:	461a      	mov	r2, r3
 800263e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002642:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 8002644:	2003      	movs	r0, #3
 8002646:	f001 f8f1 	bl	800382c <getNextSub>
 800264a:	4603      	mov	r3, r0
 800264c:	461a      	mov	r2, r3
 800264e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002652:	70da      	strb	r2, [r3, #3]
                }
            break;
 8002654:	e3cb      	b.n	8002dee <initStateMachine+0x9a2>

            case COMM_ON:
				updateUserMsg(0,0,yesTransmissionMsg,&displayUpdateStatus);
 8002656:	4b8a      	ldr	r3, [pc, #552]	; (8002880 <initStateMachine+0x434>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 800265e:	2100      	movs	r1, #0
 8002660:	2000      	movs	r0, #0
 8002662:	f7ff fc85 	bl	8001f70 <updateUserMsg>
				key = getKeyPressed();
 8002666:	f001 feaf 	bl	80043c8 <getKeyPressed>
 800266a:	4603      	mov	r3, r0
 800266c:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
                if(key == AVANCAR)
 8002670:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002674:	2b41      	cmp	r3, #65	; 0x41
 8002676:	d112      	bne.n	800269e <initStateMachine+0x252>
				{
                	resetKeyPressed();
 8002678:	f001 feb2 	bl	80043e0 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 800267c:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002680:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fc90 	bl	8001fac <readyUserInterface>
					subMenuIniciar->menuState = getNextSub(COMM_OFF);
 800268c:	2001      	movs	r0, #1
 800268e:	f001 f8cd 	bl	800382c <getNextSub>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800269a:	70da      	strb	r2, [r3, #3]
 800269c:	e3a7      	b.n	8002dee <initStateMachine+0x9a2>
				}
                else if(key == CONFIRMAR)
 800269e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80026a2:	2b43      	cmp	r3, #67	; 0x43
 80026a4:	f040 83a3 	bne.w	8002dee <initStateMachine+0x9a2>
                {
                	resetKeyPressed();
 80026a8:	f001 fe9a 	bl	80043e0 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 80026ac:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80026b0:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fc78 	bl	8001fac <readyUserInterface>
                    startCOMM();
 80026bc:	f000 fc40 	bl	8002f40 <startCOMM>
                	updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 80026c0:	4b70      	ldr	r3, [pc, #448]	; (8002884 <initStateMachine+0x438>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 80026c8:	2100      	movs	r1, #0
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7ff fc50 	bl	8001f70 <updateUserMsg>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 80026d0:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80026d4:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fc66 	bl	8001fac <readyUserInterface>
                     ptr_userConfiguration->userCommConfig = COMM_ON;
 80026e0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80026e4:	2202      	movs	r2, #2
 80026e6:	74da      	strb	r2, [r3, #19]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80026e8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80026ec:	3303      	adds	r3, #3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 f8ae 	bl	8003850 <setSelectSub>
 80026f4:	4603      	mov	r3, r0
 80026f6:	461a      	mov	r2, r3
 80026f8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80026fc:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 80026fe:	2003      	movs	r0, #3
 8002700:	f001 f894 	bl	800382c <getNextSub>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800270c:	70da      	strb	r2, [r3, #3]
                }
                break;
 800270e:	e36e      	b.n	8002dee <initStateMachine+0x9a2>

            case TEMPO_READ:
                updateUserMsg(0,0,timeUserMsg,&displayUpdateStatus);
 8002710:	4b5d      	ldr	r3, [pc, #372]	; (8002888 <initStateMachine+0x43c>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002718:	2100      	movs	r1, #0
 800271a:	2000      	movs	r0, #0
 800271c:	f7ff fc28 	bl	8001f70 <updateUserMsg>
                userTimeStruct = getTimeStruct();
 8002720:	f7fe fc60 	bl	8000fe4 <getTimeStruct>
 8002724:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230
                strftime(userTimeString, sizeof(userTimeString), "%H:%M:%S", userTimeStruct);
 8002728:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 800272c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002730:	4a56      	ldr	r2, [pc, #344]	; (800288c <initStateMachine+0x440>)
 8002732:	2109      	movs	r1, #9
 8002734:	f007 fb9e 	bl	8009e74 <strftime>
                printDataDisplay(0,1,userTimeString);
 8002738:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800273c:	461a      	mov	r2, r3
 800273e:	2101      	movs	r1, #1
 8002740:	2000      	movs	r0, #0
 8002742:	f000 fb89 	bl	8002e58 <printDataDisplay>
                updateDataDisplay(insertColumn,1);
 8002746:	f9b7 3222 	ldrsh.w	r3, [r7, #546]	; 0x222
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2101      	movs	r1, #1
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fb9c 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 8002754:	f001 fe38 	bl	80043c8 <getKeyPressed>
 8002758:	4603      	mov	r3, r0
 800275a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

                if(key == INSERIR)
 800275e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002762:	2b49      	cmp	r3, #73	; 0x49
 8002764:	d10f      	bne.n	8002786 <initStateMachine+0x33a>
                {
                	resetKeyPressed();
 8002766:	f001 fe3b 	bl	80043e0 <resetKeyPressed>
                    setUserTime(&insertColumn);
 800276a:	f207 2322 	addw	r3, r7, #546	; 0x222
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff faca 	bl	8001d08 <setUserTime>
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 8002774:	2003      	movs	r0, #3
 8002776:	f001 f859 	bl	800382c <getNextSub>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002782:	70da      	strb	r2, [r3, #3]
 8002784:	e333      	b.n	8002dee <initStateMachine+0x9a2>
                }
                else if (key == AVANCAR)
 8002786:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800278a:	2b41      	cmp	r3, #65	; 0x41
 800278c:	d108      	bne.n	80027a0 <initStateMachine+0x354>
                {
                	resetKeyPressed();
 800278e:	f001 fe27 	bl	80043e0 <resetKeyPressed>
                    indexColumn(&insertColumn,7);
 8002792:	f207 2322 	addw	r3, r7, #546	; 0x222
 8002796:	2107      	movs	r1, #7
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fe91 	bl	80014c0 <indexColumn>
 800279e:	e326      	b.n	8002dee <initStateMachine+0x9a2>
                }
                else if(key == CONFIRMAR)
 80027a0:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80027a4:	2b43      	cmp	r3, #67	; 0x43
 80027a6:	f040 8322 	bne.w	8002dee <initStateMachine+0x9a2>
                {
                	resetKeyPressed();
 80027aa:	f001 fe19 	bl	80043e0 <resetKeyPressed>
                	insertColumn = 4; //colocar um define talvez -> definicao de caracteres no display massa e overmass
 80027ae:	2304      	movs	r3, #4
 80027b0:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80027b4:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80027b8:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fbf4 	bl	8001fac <readyUserInterface>
                    strftime(procTimeString, sizeof(procTimeString), "%H%M%S", userTimeStruct);
 80027c4:	f507 70f2 	add.w	r0, r7, #484	; 0x1e4
 80027c8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80027cc:	4a30      	ldr	r2, [pc, #192]	; (8002890 <initStateMachine+0x444>)
 80027ce:	2109      	movs	r1, #9
 80027d0:	f007 fb50 	bl	8009e74 <strftime>
                    ptr_userConfiguration->userTime = stringToLong(procTimeString);
 80027d4:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe feac 	bl	8001536 <stringToLong>
 80027de:	4603      	mov	r3, r0
 80027e0:	461a      	mov	r2, r3
 80027e2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80027e6:	605a      	str	r2, [r3, #4]
                    //Configurar TIMER
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 80027e8:	2004      	movs	r0, #4
 80027ea:	f001 f81f 	bl	800382c <getNextSub>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80027f6:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80027f8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80027fc:	3303      	adds	r3, #3
 80027fe:	4618      	mov	r0, r3
 8002800:	f001 f826 	bl	8003850 <setSelectSub>
 8002804:	4603      	mov	r3, r0
 8002806:	461a      	mov	r2, r3
 8002808:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800280c:	705a      	strb	r2, [r3, #1]
                }
                break;
 800280e:	e2ee      	b.n	8002dee <initStateMachine+0x9a2>

            case MASSA_READ:
                 updateUserMsg(0,0,massUserMsg,&displayUpdateStatus);
 8002810:	4b20      	ldr	r3, [pc, #128]	; (8002894 <initStateMachine+0x448>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002818:	2100      	movs	r1, #0
 800281a:	2000      	movs	r0, #0
 800281c:	f7ff fba8 	bl	8001f70 <updateUserMsg>
                 ptr_massString = getMassString();
 8002820:	f7fe ffc4 	bl	80017ac <getMassString>
 8002824:	4603      	mov	r3, r0
 8002826:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
                 printDataDisplay(0,1,ptr_massString);
 800282a:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800282e:	2101      	movs	r1, #1
 8002830:	2000      	movs	r0, #0
 8002832:	f000 fb11 	bl	8002e58 <printDataDisplay>
                 updateDataDisplay(insertColumn,1);
 8002836:	f9b7 3222 	ldrsh.w	r3, [r7, #546]	; 0x222
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2101      	movs	r1, #1
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fb24 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 8002844:	f001 fdc0 	bl	80043c8 <getKeyPressed>
 8002848:	4603      	mov	r3, r0
 800284a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
                if(key == INSERIR)
 800284e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002852:	2b49      	cmp	r3, #73	; 0x49
 8002854:	d120      	bne.n	8002898 <initStateMachine+0x44c>
                {
                	resetKeyPressed();
 8002856:	f001 fdc3 	bl	80043e0 <resetKeyPressed>
                    setUserMass(&insertColumn); //criar variavel adicional para separar insertcolumn
 800285a:	f207 2322 	addw	r3, r7, #546	; 0x222
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f985 	bl	8001b6e <setUserMass>
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 8002864:	2004      	movs	r0, #4
 8002866:	f000 ffe1 	bl	800382c <getNextSub>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002872:	70da      	strb	r2, [r3, #3]
 8002874:	e2bb      	b.n	8002dee <initStateMachine+0x9a2>
 8002876:	bf00      	nop
 8002878:	0800bd74 	.word	0x0800bd74
 800287c:	2000001c 	.word	0x2000001c
 8002880:	20000020 	.word	0x20000020
 8002884:	20000024 	.word	0x20000024
 8002888:	20000028 	.word	0x20000028
 800288c:	0800bd54 	.word	0x0800bd54
 8002890:	0800bd60 	.word	0x0800bd60
 8002894:	2000002c 	.word	0x2000002c
                }
                else if(key == AVANCAR)
 8002898:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800289c:	2b41      	cmp	r3, #65	; 0x41
 800289e:	d107      	bne.n	80028b0 <initStateMachine+0x464>
                {
                	resetKeyPressed();
 80028a0:	f001 fd9e 	bl	80043e0 <resetKeyPressed>
                    indexMass(&insertColumn);
 80028a4:	f207 2322 	addw	r3, r7, #546	; 0x222
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe fe68 	bl	800157e <indexMass>
 80028ae:	e29e      	b.n	8002dee <initStateMachine+0x9a2>
                }
                else if(key == CONFIRMAR)
 80028b0:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80028b4:	2b43      	cmp	r3, #67	; 0x43
 80028b6:	f040 829a 	bne.w	8002dee <initStateMachine+0x9a2>
                {
                	resetKeyPressed();
 80028ba:	f001 fd91 	bl	80043e0 <resetKeyPressed>
                	insertColumn = 4;
 80028be:	2304      	movs	r3, #4
 80028c0:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80028c4:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80028c8:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fb6c 	bl	8001fac <readyUserInterface>
                    ptr_userConfiguration->userMass= stringToInt(ptr_massString);
 80028d4:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 80028d8:	f7fe fe3f 	bl	800155a <stringToInt>
 80028dc:	4603      	mov	r3, r0
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80028e4:	721a      	strb	r2, [r3, #8]
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 80028e6:	2005      	movs	r0, #5
 80028e8:	f000 ffa0 	bl	800382c <getNextSub>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80028f4:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80028f6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80028fa:	3303      	adds	r3, #3
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 ffa7 	bl	8003850 <setSelectSub>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800290a:	705a      	strb	r2, [r3, #1]
                }
                break;
 800290c:	e26f      	b.n	8002dee <initStateMachine+0x9a2>

            case SOBREC_READ:
                updateUserMsg(0,0,overmassUserMsg,&displayUpdateStatus);
 800290e:	4bde      	ldr	r3, [pc, #888]	; (8002c88 <initStateMachine+0x83c>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002916:	2100      	movs	r1, #0
 8002918:	2000      	movs	r0, #0
 800291a:	f7ff fb29 	bl	8001f70 <updateUserMsg>
                ptr_overMassString = getOverMassString();
 800291e:	f7fe ff6b 	bl	80017f8 <getOverMassString>
 8002922:	4603      	mov	r3, r0
 8002924:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
                printDataDisplay(0,1,ptr_overMassString);
 8002928:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 800292c:	2101      	movs	r1, #1
 800292e:	2000      	movs	r0, #0
 8002930:	f000 fa92 	bl	8002e58 <printDataDisplay>
                updateDataDisplay(insertColumn,1);
 8002934:	f9b7 3222 	ldrsh.w	r3, [r7, #546]	; 0x222
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f000 faa5 	bl	8002e8c <updateDataDisplay>
                key = getKeyPressed();
 8002942:	f001 fd41 	bl	80043c8 <getKeyPressed>
 8002946:	4603      	mov	r3, r0
 8002948:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

                if(key == INSERIR)
 800294c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002950:	2b49      	cmp	r3, #73	; 0x49
 8002952:	d10f      	bne.n	8002974 <initStateMachine+0x528>
                {
                	resetKeyPressed();
 8002954:	f001 fd44 	bl	80043e0 <resetKeyPressed>
                    setUserOverMass(&insertColumn);
 8002958:	f207 2322 	addw	r3, r7, #546	; 0x222
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f92a 	bl	8001bb6 <setUserOverMass>
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 8002962:	2005      	movs	r0, #5
 8002964:	f000 ff62 	bl	800382c <getNextSub>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002970:	70da      	strb	r2, [r3, #3]
 8002972:	e23c      	b.n	8002dee <initStateMachine+0x9a2>
                }
                else if(key == AVANCAR)
 8002974:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002978:	2b41      	cmp	r3, #65	; 0x41
 800297a:	d107      	bne.n	800298c <initStateMachine+0x540>
                {
                	resetKeyPressed();
 800297c:	f001 fd30 	bl	80043e0 <resetKeyPressed>
                    indexMass(&insertColumn);
 8002980:	f207 2322 	addw	r3, r7, #546	; 0x222
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fdfa 	bl	800157e <indexMass>
 800298a:	e230      	b.n	8002dee <initStateMachine+0x9a2>
                }
                else if(key == CONFIRMAR)
 800298c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002990:	2b43      	cmp	r3, #67	; 0x43
 8002992:	f040 822c 	bne.w	8002dee <initStateMachine+0x9a2>
                {
                	resetKeyPressed();
 8002996:	f001 fd23 	bl	80043e0 <resetKeyPressed>
                	insertColumn = 7; //definicao de caracteres para TIME
 800299a:	2307      	movs	r3, #7
 800299c:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80029a0:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80029a4:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fafe 	bl	8001fac <readyUserInterface>
                    ptr_userConfiguration->userOverMass= stringToInt(ptr_overMassString);
 80029b0:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 80029b4:	f7fe fdd1 	bl	800155a <stringToInt>
 80029b8:	4603      	mov	r3, r0
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80029c0:	725a      	strb	r2, [r3, #9]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80029c2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029c6:	3303      	adds	r3, #3
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 ff41 	bl	8003850 <setSelectSub>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029d6:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(START);
 80029d8:	2006      	movs	r0, #6
 80029da:	f000 ff27 	bl	800382c <getNextSub>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029e6:	70da      	strb	r2, [r3, #3]
                }
                break;
 80029e8:	e201      	b.n	8002dee <initStateMachine+0x9a2>

            case START:
                setInsertData(ptr_userConfiguration);
 80029ea:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 80029ee:	f000 ff43 	bl	8003878 <setInsertData>
                updateUserMsg(0,0,startreadUserMsg,&displayUpdateStatus);
 80029f2:	4ba6      	ldr	r3, [pc, #664]	; (8002c8c <initStateMachine+0x840>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 80029fa:	2100      	movs	r1, #0
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7ff fab7 	bl	8001f70 <updateUserMsg>
                printDataDisplay(0,1,userTimeString);
 8002a02:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002a06:	461a      	mov	r2, r3
 8002a08:	2101      	movs	r1, #1
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f000 fa24 	bl	8002e58 <printDataDisplay>
                key = getKeyPressed();
 8002a10:	f001 fcda 	bl	80043c8 <getKeyPressed>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

                if(key == CONFIRMAR)
 8002a1a:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002a1e:	2b43      	cmp	r3, #67	; 0x43
 8002a20:	f040 81e5 	bne.w	8002dee <initStateMachine+0x9a2>
                {
                	resetKeyPressed();
 8002a24:	f001 fcdc 	bl	80043e0 <resetKeyPressed>
//                	startTapete = getUserSelectTapete();
//                	if(startTapete == TRUE) readingState = DENTRO;
//                	else readingState = FORA;
                	readingState = FORA;
 8002a28:	2330      	movs	r3, #48	; 0x30
 8002a2a:	f887 323c 	strb.w	r3, [r7, #572]	; 0x23c
//                	if(startTapete == TRUE) setTimer2Variable();
//                	else if(startTapete == FALSE) iddleTimer2Variable();
                	//MSG PARA SUBIR NO TAPETE ANTES DE CONTINUAR e CONFIRMAR //alex

                    indexTest = getResultTestNumber();
 8002a2e:	f7fe fbd1 	bl	80011d4 <getResultTestNumber>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002a38:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002a3c:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fab2 	bl	8001fac <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(READING);
 8002a48:	2007      	movs	r0, #7
 8002a4a:	f000 feef 	bl	800382c <getNextSub>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	461a      	mov	r2, r3
 8002a52:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a56:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8002a58:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a5c:	3303      	adds	r3, #3
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fef6 	bl	8003850 <setSelectSub>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a6c:	705a      	strb	r2, [r3, #1]
                }
            break;
 8002a6e:	e1be      	b.n	8002dee <initStateMachine+0x9a2>

            case READING:
            	 updateUserMsg(0,0,"READING...",&displayUpdateStatus);
 8002a70:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002a74:	4a86      	ldr	r2, [pc, #536]	; (8002c90 <initStateMachine+0x844>)
 8002a76:	2100      	movs	r1, #0
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7ff fa79 	bl	8001f70 <updateUserMsg>
            	 startTM2();
 8002a7e:	f000 f9cf 	bl	8002e20 <startTM2>
				 startTM3();
 8002a82:	f000 f9db 	bl	8002e3c <startTM3>
            	 while(key != PARAR)
 8002a86:	e011      	b.n	8002aac <initStateMachine+0x660>
            	 {
            		 switch(readingState)
 8002a88:	f897 323c 	ldrb.w	r3, [r7, #572]	; 0x23c
 8002a8c:	2b30      	cmp	r3, #48	; 0x30
 8002a8e:	d002      	beq.n	8002a96 <initStateMachine+0x64a>
 8002a90:	2b31      	cmp	r3, #49	; 0x31
 8002a92:	d003      	beq.n	8002a9c <initStateMachine+0x650>
 8002a94:	e005      	b.n	8002aa2 <initStateMachine+0x656>
					 {
						 case FORA:
							startReadingOutsideSensor();
 8002a96:	f7ff f9d7 	bl	8001e48 <startReadingOutsideSensor>
						 break;
 8002a9a:	e002      	b.n	8002aa2 <initStateMachine+0x656>
						 case DENTRO:
							startReadingInsideSensor();
 8002a9c:	f7ff fa62 	bl	8001f64 <startReadingInsideSensor>
						 break;
 8002aa0:	bf00      	nop
//					 timer3Data = getTimer3Variable();
//					 sprintf(timer3DataString,"%d",timer3Data);
//					 sprintf(timer2DataString,"%d",sensorFlag);
//					 printDataDisplay(0,2,timer3DataString);
//					 printDataDisplay(0,3,timer2DataString);
					 key = getKeyPressed();
 8002aa2:	f001 fc91 	bl	80043c8 <getKeyPressed>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
            	 while(key != PARAR)
 8002aac:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002ab0:	2b50      	cmp	r3, #80	; 0x50
 8002ab2:	d1e9      	bne.n	8002a88 <initStateMachine+0x63c>
				 3 - PRESSIONAR O BOTAO PARAR

				 */


				if(key == PARAR)
 8002ab4:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002ab8:	2b50      	cmp	r3, #80	; 0x50
 8002aba:	f040 8198 	bne.w	8002dee <initStateMachine+0x9a2>
				{
					resetKeyPressed();
 8002abe:	f001 fc8f 	bl	80043e0 <resetKeyPressed>
					readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002ac2:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002ac6:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fa6d 	bl	8001fac <readyUserInterface>
					subMenuIniciar->menuState = getNextSub(STOP);
 8002ad2:	2008      	movs	r0, #8
 8002ad4:	f000 feaa 	bl	800382c <getNextSub>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002ae0:	70da      	strb	r2, [r3, #3]
				}
            break;
 8002ae2:	e184      	b.n	8002dee <initStateMachine+0x9a2>

            case STOP:
                updateUserMsg(0,0,stopreadUserMsg,&displayUpdateStatus);
 8002ae4:	4b6b      	ldr	r3, [pc, #428]	; (8002c94 <initStateMachine+0x848>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002aec:	2100      	movs	r1, #0
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7ff fa3e 	bl	8001f70 <updateUserMsg>
                key = getKeyPressed();
 8002af4:	f001 fc68 	bl	80043c8 <getKeyPressed>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

                if(key == CONFIRMAR)
 8002afe:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002b02:	2b43      	cmp	r3, #67	; 0x43
 8002b04:	f040 8173 	bne.w	8002dee <initStateMachine+0x9a2>
                {
//                	transmissionCOMM(&timer3Data);
                	transmissionCOMM();
 8002b08:	f000 fa38 	bl	8002f7c <transmissionCOMM>
                	resetKeyPressed();
 8002b0c:	f001 fc68 	bl	80043e0 <resetKeyPressed>
                    stopTM2();
 8002b10:	f000 f98d 	bl	8002e2e <stopTM2>
                    stopTM3();
 8002b14:	f000 f999 	bl	8002e4a <stopTM3>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002b18:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002b1c:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fa42 	bl	8001fac <readyUserInterface>
                    //PARA LEITURA, DESLIGA TIMER, ENCODER, O QUE FOR I0_INTERFACE
                    setUserResultData(&result[indexTest],indexTest,sampleCount);
 8002b28:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
 8002b2c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002b30:	2154      	movs	r1, #84	; 0x54
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	f897 123d 	ldrb.w	r1, [r7, #573]	; 0x23d
 8002b3c:	f897 223e 	ldrb.w	r2, [r7, #574]	; 0x23e
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fb61 	bl	8001208 <setUserResultData>
                    setResultTestNumber();
 8002b46:	f7fe fb4f 	bl	80011e8 <setResultTestNumber>
                    subMenuIniciar->menuState = getNextSub(DISP_RESULTS);
 8002b4a:	2009      	movs	r0, #9
 8002b4c:	f000 fe6e 	bl	800382c <getNextSub>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b58:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8002b5a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b5e:	3303      	adds	r3, #3
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fe75 	bl	8003850 <setSelectSub>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b6e:	705a      	strb	r2, [r3, #1]

                }
                break;
 8002b70:	e13d      	b.n	8002dee <initStateMachine+0x9a2>

            case DISP_RESULTS:
                updateUserMsg(0,0,resultsUserMsg,&displayUpdateStatus);
 8002b72:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <initStateMachine+0x84c>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7ff f9f7 	bl	8001f70 <updateUserMsg>
                key = getKeyPressed();
 8002b82:	f001 fc21 	bl	80043c8 <getKeyPressed>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

                if(key == PARAR)
 8002b8c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002b90:	2b50      	cmp	r3, #80	; 0x50
 8002b92:	d112      	bne.n	8002bba <initStateMachine+0x76e>
                {
                	resetKeyPressed();
 8002b94:	f001 fc24 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002b98:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002b9c:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fa02 	bl	8001fac <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8002ba8:	200b      	movs	r0, #11
 8002baa:	f000 fe3f 	bl	800382c <getNextSub>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002bb6:	70da      	strb	r2, [r3, #3]
 8002bb8:	e119      	b.n	8002dee <initStateMachine+0x9a2>
                }
                else if(key == CONFIRMAR)
 8002bba:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002bbe:	2b43      	cmp	r3, #67	; 0x43
 8002bc0:	f040 8115 	bne.w	8002dee <initStateMachine+0x9a2>
                {
                	resetKeyPressed();
 8002bc4:	f001 fc0c 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002bc8:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002bcc:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff f9ea 	bl	8001fac <readyUserInterface>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8002bd8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002bdc:	3303      	adds	r3, #3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fe36 	bl	8003850 <setSelectSub>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002bec:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(RESULTS);
 8002bee:	200a      	movs	r0, #10
 8002bf0:	f000 fe1c 	bl	800382c <getNextSub>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002bfc:	70da      	strb	r2, [r3, #3]
                }
            break;
 8002bfe:	e0f6      	b.n	8002dee <initStateMachine+0x9a2>
//                        i=0;
//                    }
//                    //
//                    subMenuIniciar->menuState = getNextSub(RESULTS);
//                }
                if(key == PARAR)
 8002c00:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002c04:	2b50      	cmp	r3, #80	; 0x50
 8002c06:	f040 80f2 	bne.w	8002dee <initStateMachine+0x9a2>
                {
                	resetKeyPressed();
 8002c0a:	f001 fbe9 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002c0e:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002c12:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff f9c7 	bl	8001fac <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8002c1e:	200b      	movs	r0, #11
 8002c20:	f000 fe04 	bl	800382c <getNextSub>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002c2c:	70da      	strb	r2, [r3, #3]
                }

            break;
 8002c2e:	e0de      	b.n	8002dee <initStateMachine+0x9a2>

            case SAVE_DATA:
                updateUserMsg(0,0,saveUserMsg,&displayUpdateStatus);
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <initStateMachine+0x850>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002c38:	2100      	movs	r1, #0
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f7ff f998 	bl	8001f70 <updateUserMsg>
                key = getKeyPressed();
 8002c40:	f001 fbc2 	bl	80043c8 <getKeyPressed>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

                if(key == AVANCAR)
 8002c4a:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002c4e:	2b41      	cmp	r3, #65	; 0x41
 8002c50:	d128      	bne.n	8002ca4 <initStateMachine+0x858>
                {
                	resetKeyPressed();
 8002c52:	f001 fbc5 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002c56:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002c5a:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff f9a3 	bl	8001fac <readyUserInterface>
                    updateUserMsg(0,0,cancelUserMsg,&displayUpdateStatus);
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <initStateMachine+0x854>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002c6e:	2100      	movs	r1, #0
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7ff f97d 	bl	8001f70 <updateUserMsg>
                    subMenuIniciar->menuState = getNextSub(CANCEL_SAVE);
 8002c76:	200c      	movs	r0, #12
 8002c78:	f000 fdd8 	bl	800382c <getNextSub>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002c84:	70da      	strb	r2, [r3, #3]
 8002c86:	e0b2      	b.n	8002dee <initStateMachine+0x9a2>
 8002c88:	20000030 	.word	0x20000030
 8002c8c:	20000034 	.word	0x20000034
 8002c90:	0800bd68 	.word	0x0800bd68
 8002c94:	20000038 	.word	0x20000038
 8002c98:	2000003c 	.word	0x2000003c
 8002c9c:	20000040 	.word	0x20000040
 8002ca0:	20000048 	.word	0x20000048
                }
                else if(key == CONFIRMAR)
 8002ca4:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002ca8:	2b43      	cmp	r3, #67	; 0x43
 8002caa:	f040 80a0 	bne.w	8002dee <initStateMachine+0x9a2>
                {
                	resetKeyPressed();
 8002cae:	f001 fb97 	bl	80043e0 <resetKeyPressed>
                    save_data(indexTest);
 8002cb2:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fcda 	bl	8003670 <save_data>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002cbc:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002cc0:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff f970 	bl	8001fac <readyUserInterface>
                    updateUserMsg(0,0,savedUserMsg,&displayUpdateStatus);
 8002ccc:	4b51      	ldr	r3, [pc, #324]	; (8002e14 <initStateMachine+0x9c8>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7ff f94a 	bl	8001f70 <updateUserMsg>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8002cdc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002ce0:	3303      	adds	r3, #3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fdb4 	bl	8003850 <setSelectSub>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002cf0:	705a      	strb	r2, [r3, #1]
                    //display
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f000 fd9a 	bl	800382c <getNextSub>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d00:	70da      	strb	r2, [r3, #3]
                    sampleCount = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
                    i=0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002d0e:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002d12:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff f947 	bl	8001fac <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8002d1e:	234d      	movs	r3, #77	; 0x4d
 8002d20:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
                }
            break;
 8002d24:	e063      	b.n	8002dee <initStateMachine+0x9a2>

            case CANCEL_SAVE:
                updateUserMsg(0,0,cancelUserMsg,&displayUpdateStatus);
 8002d26:	4b3c      	ldr	r3, [pc, #240]	; (8002e18 <initStateMachine+0x9cc>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002d2e:	2100      	movs	r1, #0
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7ff f91d 	bl	8001f70 <updateUserMsg>
                key = getKeyPressed();
 8002d36:	f001 fb47 	bl	80043c8 <getKeyPressed>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

                if(key == AVANCAR)
 8002d40:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002d44:	2b41      	cmp	r3, #65	; 0x41
 8002d46:	d112      	bne.n	8002d6e <initStateMachine+0x922>
                {
                	resetKeyPressed();
 8002d48:	f001 fb4a 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002d4c:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002d50:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff f928 	bl	8001fac <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8002d5c:	200b      	movs	r0, #11
 8002d5e:	f000 fd65 	bl	800382c <getNextSub>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d6a:	70da      	strb	r2, [r3, #3]
 8002d6c:	e03e      	b.n	8002dec <initStateMachine+0x9a0>
                }
                else if(key == CONFIRMAR)
 8002d6e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002d72:	2b43      	cmp	r3, #67	; 0x43
 8002d74:	d13a      	bne.n	8002dec <initStateMachine+0x9a0>
                {
                	resetKeyPressed();
 8002d76:	f001 fb33 	bl	80043e0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002d7a:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002d7e:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff f911 	bl	8001fac <readyUserInterface>
                    updateUserMsg(0,0,canceledUserMsg,&displayUpdateStatus);
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <initStateMachine+0x9d0>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002d92:	2100      	movs	r1, #0
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff f8eb 	bl	8001f70 <updateUserMsg>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8002d9a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d9e:	3303      	adds	r3, #3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fd55 	bl	8003850 <setSelectSub>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dae:	705a      	strb	r2, [r3, #1]
                    sampleCount = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
                    i=0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
                    indexTest++;
 8002dbc:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d
                    //
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f000 fd30 	bl	800382c <getNextSub>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dd4:	70da      	strb	r2, [r3, #3]
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002dd6:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002dda:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff f8e3 	bl	8001fac <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8002de6:	234d      	movs	r3, #77	; 0x4d
 8002de8:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
                }
            break;
 8002dec:	bf00      	nop
    while(key != MENU)
 8002dee:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002df2:	2b4d      	cmp	r3, #77	; 0x4d
 8002df4:	f47f abb4 	bne.w	8002560 <initStateMachine+0x114>
        }
    }
    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002df8:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002dfc:	f207 13e3 	addw	r3, r7, #483	; 0x1e3
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff f8d2 	bl	8001fac <readyUserInterface>
}
 8002e08:	bf00      	nop
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000044 	.word	0x20000044
 8002e18:	20000048 	.word	0x20000048
 8002e1c:	2000004c 	.word	0x2000004c

08002e20 <startTM2>:
    unsigned char thereAreData;
    struct samples Measurement[MEASUREMENT_SIZE];
};

unsigned char startTM2(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
        SET_HW_TIMER2();
 8002e24:	f000 fd36 	bl	8003894 <SET_HW_TIMER2>
}
 8002e28:	bf00      	nop
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <stopTM2>:

unsigned char stopTM2(void)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	af00      	add	r7, sp, #0
    RESET_HW_TIMER2();
 8002e32:	f000 fd51 	bl	80038d8 <RESET_HW_TIMER2>
}
 8002e36:	bf00      	nop
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <startTM3>:

unsigned char startTM3(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
        SET_HW_TIMER3();
 8002e40:	f000 fd68 	bl	8003914 <SET_HW_TIMER3>
}
 8002e44:	bf00      	nop
 8002e46:	4618      	mov	r0, r3
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <stopTM3>:

unsigned char stopTM3(void)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	af00      	add	r7, sp, #0
    RESET_HW_TIMER3();
 8002e4e:	f000 fd83 	bl	8003958 <RESET_HW_TIMER3>
}
 8002e52:	bf00      	nop
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <printDataDisplay>:
{
//    RESET_HARDWARE();
}

unsigned char printDataDisplay(unsigned char col, unsigned char linha,unsigned char* userData)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	603a      	str	r2, [r7, #0]
 8002e62:	71fb      	strb	r3, [r7, #7]
 8002e64:	460b      	mov	r3, r1
 8002e66:	71bb      	strb	r3, [r7, #6]
    HW_PRINT_DATA(col, linha,userData);
 8002e68:	79b9      	ldrb	r1, [r7, #6]
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 f8a0 	bl	8002fb4 <HW_PRINT_DATA>
}
 8002e74:	bf00      	nop
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <eraseDataDisplay>:
	HW_INSERT_DATA(col, linha,userData);
}


unsigned char eraseDataDisplay()
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	af00      	add	r7, sp, #0
    HW_ERASE_DATA();
 8002e82:	f000 f8b3 	bl	8002fec <HW_ERASE_DATA>
}
 8002e86:	bf00      	nop
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <updateDataDisplay>:

unsigned char updateDataDisplay(unsigned char col, unsigned char linha)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	460a      	mov	r2, r1
 8002e96:	71fb      	strb	r3, [r7, #7]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	71bb      	strb	r3, [r7, #6]
	HW_UPDATE_DATA(col,linha);
 8002e9c:	79ba      	ldrb	r2, [r7, #6]
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f8ac 	bl	8003000 <HW_UPDATE_DATA>
}
 8002ea8:	bf00      	nop
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <homeDataDisplay>:

unsigned char homeDataDisplay(unsigned char* appName,unsigned char* companyName,unsigned char* appVersion)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
//    printf("%s\n",appName);
//    printf("%s\n",companyName);
//    printf("%s\n",appVersion);
    HW_HOME_DISP(appName,companyName,appVersion);
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f8bc 	bl	8003040 <HW_HOME_DISP>

}
 8002ec8:	bf00      	nop
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <load_SD_card>:
{
//    HW_EXT_MEMORY_CHECK();
}

unsigned char* load_SD_card(unsigned char numTeste)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	71fb      	strb	r3, [r7, #7]
     unsigned char (*ptr_loadStringResult)[MAX_LINES][MAX_LEN];
     unsigned char loadStringResult;
     unsigned char line = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	75fb      	strb	r3, [r7, #23]
     unsigned char column = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	75bb      	strb	r3, [r7, #22]
     unsigned char count = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	72fb      	strb	r3, [r7, #11]
     unsigned char* ptr_loadName = getArqName(numTeste);
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fc5c 	bl	80037a8 <getArqName>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	613b      	str	r3, [r7, #16]
     count = lineCounter(numTeste);
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fc6a 	bl	80037d0 <lineCounter>
 8002efc:	4603      	mov	r3, r0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	72fb      	strb	r3, [r7, #11]
     setFileLineCounter(&count);
 8002f02:	f107 030b 	add.w	r3, r7, #11
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fb98 	bl	800363c <setFileLineCounter>
//        }
//    }
//
////
//    fclose(ptr_file);
    return ptr_loadStringResult;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <save_SD_card>:

unsigned char save_SD_card(unsigned char* dataToSave, unsigned char numTeste)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	70fb      	strb	r3, [r7, #3]
    unsigned char* ptr_saveName = getArqName(numTeste);
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fc3f 	bl	80037a8 <getArqName>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	617b      	str	r3, [r7, #20]
    struct results* saveStruct = dataToSave;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	613b      	str	r3, [r7, #16]
    unsigned char sampleToSave = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
//    }
//    fclose(ptr_file);



}
 8002f36:	bf00      	nop
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <startCOMM>:

unsigned char startCOMM()
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
//    printf("SET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8002f46:	f001 fa59 	bl	80043fc <getUARTInstance>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	607b      	str	r3, [r7, #4]
	SET_HW_UART(uartInstance);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fd1e 	bl	8003990 <SET_HW_UART>
}
 8002f54:	bf00      	nop
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <stopCOMM>:

unsigned char stopCOMM()
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
//    printf("RESET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8002f64:	f001 fa4a 	bl	80043fc <getUARTInstance>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	607b      	str	r3, [r7, #4]
	RESET_HW_UART(uartInstance);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fd23 	bl	80039b8 <RESET_HW_UART>
}
 8002f72:	bf00      	nop
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <transmissionCOMM>:

unsigned char transmissionCOMM(unsigned char* msg)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
//        printf("TRANSMISSION_HW_UART2()\n");
	unsigned char uartMsg[10] = "ADELSON10";
 8002f84:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <transmissionCOMM+0x34>)
 8002f86:	f107 0308 	add.w	r3, r7, #8
 8002f8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f8c:	c303      	stmia	r3!, {r0, r1}
 8002f8e:	801a      	strh	r2, [r3, #0]
//	unsigned char uartMsg[10];
//	sprintf(uartMsg,"%d",msg);
	unsigned char* uartInstance = getUARTInstance();
 8002f90:	f001 fa34 	bl	80043fc <getUARTInstance>
 8002f94:	4603      	mov	r3, r0
 8002f96:	617b      	str	r3, [r7, #20]
	TRANSMISSION_HW_UART(uartInstance,uartMsg);
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6978      	ldr	r0, [r7, #20]
 8002fa0:	f000 fd1e 	bl	80039e0 <TRANSMISSION_HW_UART>
}
 8002fa4:	bf00      	nop
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	0800bd7c 	.word	0x0800bd7c

08002fb4 <HW_PRINT_DATA>:
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	603a      	str	r2, [r7, #0]
 8002fbe:	71fb      	strb	r3, [r7, #7]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	71bb      	strb	r3, [r7, #6]
 8002fc4:	79ba      	ldrb	r2, [r7, #6]
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4807      	ldr	r0, [pc, #28]	; (8002fe8 <HW_PRINT_DATA+0x34>)
 8002fcc:	f000 fb06 	bl	80035dc <setCursor>
 8002fd0:	20fa      	movs	r0, #250	; 0xfa
 8002fd2:	f002 fa09 	bl	80053e8 <HAL_Delay>
 8002fd6:	6839      	ldr	r1, [r7, #0]
 8002fd8:	4803      	ldr	r0, [pc, #12]	; (8002fe8 <HW_PRINT_DATA+0x34>)
 8002fda:	f000 f95b 	bl	8003294 <print>
 8002fde:	bf00      	nop
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200004c4 	.word	0x200004c4

08002fec <HW_ERASE_DATA>:
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4802      	ldr	r0, [pc, #8]	; (8002ffc <HW_ERASE_DATA+0x10>)
 8002ff2:	f000 f971 	bl	80032d8 <clear>
 8002ff6:	bf00      	nop
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	200004c4 	.word	0x200004c4

08003000 <HW_UPDATE_DATA>:
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	460a      	mov	r2, r1
 800300a:	71fb      	strb	r3, [r7, #7]
 800300c:	4613      	mov	r3, r2
 800300e:	71bb      	strb	r3, [r7, #6]
 8003010:	79ba      	ldrb	r2, [r7, #6]
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	4619      	mov	r1, r3
 8003016:	4809      	ldr	r0, [pc, #36]	; (800303c <HW_UPDATE_DATA+0x3c>)
 8003018:	f000 fae0 	bl	80035dc <setCursor>
 800301c:	4807      	ldr	r0, [pc, #28]	; (800303c <HW_UPDATE_DATA+0x3c>)
 800301e:	f000 f99a 	bl	8003356 <cursor>
 8003022:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003026:	f002 f9df 	bl	80053e8 <HAL_Delay>
 800302a:	4804      	ldr	r0, [pc, #16]	; (800303c <HW_UPDATE_DATA+0x3c>)
 800302c:	f000 f97b 	bl	8003326 <noCursor>
 8003030:	bf00      	nop
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200004c4 	.word	0x200004c4

08003040 <HW_HOME_DISP>:
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	2304      	movs	r3, #4
 800304e:	2204      	movs	r2, #4
 8003050:	2110      	movs	r1, #16
 8003052:	4812      	ldr	r0, [pc, #72]	; (800309c <HW_HOME_DISP+0x5c>)
 8003054:	f000 f824 	bl	80030a0 <begin>
 8003058:	2200      	movs	r2, #0
 800305a:	2100      	movs	r1, #0
 800305c:	480f      	ldr	r0, [pc, #60]	; (800309c <HW_HOME_DISP+0x5c>)
 800305e:	f000 fabd 	bl	80035dc <setCursor>
 8003062:	68f9      	ldr	r1, [r7, #12]
 8003064:	480d      	ldr	r0, [pc, #52]	; (800309c <HW_HOME_DISP+0x5c>)
 8003066:	f000 f915 	bl	8003294 <print>
 800306a:	2201      	movs	r2, #1
 800306c:	2100      	movs	r1, #0
 800306e:	480b      	ldr	r0, [pc, #44]	; (800309c <HW_HOME_DISP+0x5c>)
 8003070:	f000 fab4 	bl	80035dc <setCursor>
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	4809      	ldr	r0, [pc, #36]	; (800309c <HW_HOME_DISP+0x5c>)
 8003078:	f000 f90c 	bl	8003294 <print>
 800307c:	2203      	movs	r2, #3
 800307e:	2100      	movs	r1, #0
 8003080:	4806      	ldr	r0, [pc, #24]	; (800309c <HW_HOME_DISP+0x5c>)
 8003082:	f000 faab 	bl	80035dc <setCursor>
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4804      	ldr	r0, [pc, #16]	; (800309c <HW_HOME_DISP+0x5c>)
 800308a:	f000 f903 	bl	8003294 <print>
 800308e:	4b03      	ldr	r3, [pc, #12]	; (800309c <HW_HOME_DISP+0x5c>)
 8003090:	b2db      	uxtb	r3, r3
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	200004c4 	.word	0x200004c4

080030a0 <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	4608      	mov	r0, r1
 80030aa:	4611      	mov	r1, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	70fb      	strb	r3, [r7, #3]
 80030b2:	460b      	mov	r3, r1
 80030b4:	70bb      	strb	r3, [r7, #2]
 80030b6:	4613      	mov	r3, r2
 80030b8:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 80030ba:	f107 0308 	add.w	r3, r7, #8
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f107 0308 	add.w	r3, r7, #8
 80030cc:	cb03      	ldmia	r3!, {r0, r1}
 80030ce:	6010      	str	r0, [r2, #0]
 80030d0:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80030d2:	2200      	movs	r2, #0
 80030d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030d8:	486c      	ldr	r0, [pc, #432]	; (800328c <begin+0x1ec>)
 80030da:	f002 fed9 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80030de:	2200      	movs	r2, #0
 80030e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030e4:	4869      	ldr	r0, [pc, #420]	; (800328c <begin+0x1ec>)
 80030e6:	f002 fed3 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80030ea:	2200      	movs	r2, #0
 80030ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030f0:	4866      	ldr	r0, [pc, #408]	; (800328c <begin+0x1ec>)
 80030f2:	f002 fecd 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80030f6:	2200      	movs	r2, #0
 80030f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030fc:	4863      	ldr	r0, [pc, #396]	; (800328c <begin+0x1ec>)
 80030fe:	f002 fec7 	bl	8005e90 <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8003102:	2200      	movs	r2, #0
 8003104:	2108      	movs	r1, #8
 8003106:	4861      	ldr	r0, [pc, #388]	; (800328c <begin+0x1ec>)
 8003108:	f002 fec2 	bl	8005e90 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 800310c:	2200      	movs	r2, #0
 800310e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003112:	485f      	ldr	r0, [pc, #380]	; (8003290 <begin+0x1f0>)
 8003114:	f002 febc 	bl	8005e90 <HAL_GPIO_WritePin>

	#if defined(LCD_8BITMODE)
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,GPIO_PIN_RESET);
 8003118:	2200      	movs	r2, #0
 800311a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800311e:	485c      	ldr	r0, [pc, #368]	; (8003290 <begin+0x1f0>)
 8003120:	f002 feb6 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,GPIO_PIN_RESET);
 8003124:	2200      	movs	r2, #0
 8003126:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800312a:	4859      	ldr	r0, [pc, #356]	; (8003290 <begin+0x1f0>)
 800312c:	f002 feb0 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,GPIO_PIN_RESET);
 8003130:	2200      	movs	r2, #0
 8003132:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003136:	4856      	ldr	r0, [pc, #344]	; (8003290 <begin+0x1f0>)
 8003138:	f002 feaa 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,GPIO_PIN_RESET);
 800313c:	2200      	movs	r2, #0
 800313e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003142:	4853      	ldr	r0, [pc, #332]	; (8003290 <begin+0x1f0>)
 8003144:	f002 fea4 	bl	8005e90 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8003148:	2200      	movs	r2, #0
 800314a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800314e:	4850      	ldr	r0, [pc, #320]	; (8003290 <begin+0x1f0>)
 8003150:	f002 fe9e 	bl	8005e90 <HAL_GPIO_WritePin>
	#endif

	if (lines > 1) {
 8003154:	78bb      	ldrb	r3, [r7, #2]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d906      	bls.n	8003168 <begin+0xc8>
		lcd->_displayfunction |= LCD_2LINE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	f043 0308 	orr.w	r3, r3, #8
 8003162:	b2da      	uxtb	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	78ba      	ldrb	r2, [r7, #2]
 800316c:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	3340      	adds	r3, #64	; 0x40
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	4613      	mov	r3, r2
 8003178:	2240      	movs	r2, #64	; 0x40
 800317a:	2100      	movs	r1, #0
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fa11 	bl	80035a4 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8003182:	787b      	ldrb	r3, [r7, #1]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <begin+0xfc>
 8003188:	78bb      	ldrb	r3, [r7, #2]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d106      	bne.n	800319c <begin+0xfc>
		lcd->_displayfunction |= LCD_5x10DOTS;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	b2da      	uxtb	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 800319c:	2032      	movs	r0, #50	; 0x32
 800319e:	f002 f923 	bl	80053e8 <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2108      	movs	r1, #8
 80031a6:	4839      	ldr	r0, [pc, #228]	; (800328c <begin+0x1ec>)
 80031a8:	f002 fe72 	bl	8005e90 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80031ac:	2200      	movs	r2, #0
 80031ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031b2:	4837      	ldr	r0, [pc, #220]	; (8003290 <begin+0x1f0>)
 80031b4:	f002 fe6c 	bl	8005e90 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80031b8:	2200      	movs	r2, #0
 80031ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031be:	4834      	ldr	r0, [pc, #208]	; (8003290 <begin+0x1f0>)
 80031c0:	f002 fe66 	bl	8005e90 <HAL_GPIO_WritePin>
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d015      	beq.n	80031f8 <begin+0x158>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 80031cc:	2003      	movs	r0, #3
 80031ce:	f000 f933 	bl	8003438 <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 80031d2:	2005      	movs	r0, #5
 80031d4:	f002 f908 	bl	80053e8 <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 80031d8:	2003      	movs	r0, #3
 80031da:	f000 f92d 	bl	8003438 <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 80031de:	2005      	movs	r0, #5
 80031e0:	f002 f902 	bl	80053e8 <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 80031e4:	2003      	movs	r0, #3
 80031e6:	f000 f927 	bl	8003438 <write4bits>
		HAL_Delay(5);
 80031ea:	2005      	movs	r0, #5
 80031ec:	f002 f8fc 	bl	80053e8 <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 80031f0:	2002      	movs	r0, #2
 80031f2:	f000 f921 	bl	8003438 <write4bits>
 80031f6:	e023      	b.n	8003240 <begin+0x1a0>

		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 23, pg 45 

		// Envia sequência de comando
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f043 0320 	orr.w	r3, r3, #32
 8003200:	b2db      	uxtb	r3, r3
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f9bd 	bl	8003584 <command>
		HAL_Delay(6);  // wait more than 4.1 ms
 800320a:	2006      	movs	r0, #6
 800320c:	f002 f8ec 	bl	80053e8 <HAL_Delay>

		// Segundo envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	f043 0320 	orr.w	r3, r3, #32
 8003218:	b2db      	uxtb	r3, r3
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f9b1 	bl	8003584 <command>
		HAL_Delay(1);
 8003222:	2001      	movs	r0, #1
 8003224:	f002 f8e0 	bl	80053e8 <HAL_Delay>

		// Terceiro envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	f043 0320 	orr.w	r3, r3, #32
 8003230:	b2db      	uxtb	r3, r3
 8003232:	4619      	mov	r1, r3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f9a5 	bl	8003584 <command>
		HAL_Delay(1);
 800323a:	2001      	movs	r0, #1
 800323c:	f002 f8d4 	bl	80053e8 <HAL_Delay>
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	f043 0320 	orr.w	r3, r3, #32
 8003248:	b2db      	uxtb	r3, r3
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f999 	bl	8003584 <command>
    HAL_Delay(1);
 8003252:	2001      	movs	r0, #1
 8003254:	f002 f8c8 	bl	80053e8 <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2204      	movs	r2, #4
 800325c:	705a      	strb	r2, [r3, #1]
    display(lcd);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f849 	bl	80032f6 <display>

    // Limpa display
    clear(lcd);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f837 	bl	80032d8 <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2202      	movs	r2, #2
 800326e:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	789b      	ldrb	r3, [r3, #2]
 8003274:	f043 0304 	orr.w	r3, r3, #4
 8003278:	b2db      	uxtb	r3, r3
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f981 	bl	8003584 <command>
}
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40010c00 	.word	0x40010c00
 8003290:	40010800 	.word	0x40010800

08003294 <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 800329e:	6838      	ldr	r0, [r7, #0]
 80032a0:	f7fc ff54 	bl	800014c <strlen>
 80032a4:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
 80032aa:	e00c      	b.n	80032c6 <print+0x32>
		write(lcd ,*(value+i));
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	4413      	add	r3, r2
 80032b2:	f993 3000 	ldrsb.w	r3, [r3]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f863 	bl	8003386 <write>
	for (uint8_t i = 0; i < Lengh; i++){
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	3301      	adds	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d8ee      	bhi.n	80032ac <print+0x18>
	}
}
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 80032e0:	2101      	movs	r1, #1
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f94e 	bl	8003584 <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 80032e8:	2002      	movs	r0, #2
 80032ea:	f002 f87d 	bl	80053e8 <HAL_Delay>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	785b      	ldrb	r3, [r3, #1]
 8003302:	f043 0304 	orr.w	r3, r3, #4
 8003306:	b2da      	uxtb	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	785b      	ldrb	r3, [r3, #1]
 8003310:	f043 0308 	orr.w	r3, r3, #8
 8003314:	b2db      	uxtb	r3, r3
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f933 	bl	8003584 <command>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <noCursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void noCursor(LiquidCrystal *lcd){
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol &= ~LCD_CURSORON;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	f023 0302 	bic.w	r3, r3, #2
 8003336:	b2da      	uxtb	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	785b      	ldrb	r3, [r3, #1]
 8003340:	f043 0308 	orr.w	r3, r3, #8
 8003344:	b2db      	uxtb	r3, r3
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f91b 	bl	8003584 <command>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <cursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void cursor(LiquidCrystal *lcd){
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol |= LCD_CURSORON;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	785b      	ldrb	r3, [r3, #1]
 8003362:	f043 0302 	orr.w	r3, r3, #2
 8003366:	b2da      	uxtb	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	785b      	ldrb	r3, [r3, #1]
 8003370:	f043 0308 	orr.w	r3, r3, #8
 8003374:	b2db      	uxtb	r3, r3
 8003376:	4619      	mov	r1, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f903 	bl	8003584 <command>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	2201      	movs	r2, #1
 8003396:	4619      	mov	r1, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f805 	bl	80033a8 <send>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
 80033b4:	4613      	mov	r3, r2
 80033b6:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 80033b8:	78bb      	ldrb	r3, [r7, #2]
 80033ba:	461a      	mov	r2, r3
 80033bc:	2108      	movs	r1, #8
 80033be:	4811      	ldr	r0, [pc, #68]	; (8003404 <send+0x5c>)
 80033c0:	f002 fd66 	bl	8005e90 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 80033c4:	2200      	movs	r2, #0
 80033c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033ca:	480f      	ldr	r0, [pc, #60]	; (8003408 <send+0x60>)
 80033cc:	f002 fd60 	bl	8005e90 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <send+0x3e>
	    write8bits(value);
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f866 	bl	80034b0 <write8bits>
	    write4bits(value);
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 80033e4:	e009      	b.n	80033fa <send+0x52>
	    write4bits(value>>4);
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 f823 	bl	8003438 <write4bits>
	    write4bits(value);
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f81f 	bl	8003438 <write4bits>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40010c00 	.word	0x40010c00
 8003408:	40010800 	.word	0x40010800

0800340c <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8003410:	2201      	movs	r2, #1
 8003412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003416:	4807      	ldr	r0, [pc, #28]	; (8003434 <pulseEnable+0x28>)
 8003418:	f002 fd3a 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800341c:	2001      	movs	r0, #1
 800341e:	f001 ffe3 	bl	80053e8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003422:	2200      	movs	r2, #0
 8003424:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <pulseEnable+0x28>)
 800342a:	f002 fd31 	bl	8005e90 <HAL_GPIO_WritePin>
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40010800 	.word	0x40010800

08003438 <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003450:	4816      	ldr	r0, [pc, #88]	; (80034ac <write4bits+0x74>)
 8003452:	f002 fd1d 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003468:	4810      	ldr	r0, [pc, #64]	; (80034ac <write4bits+0x74>)
 800346a:	f002 fd11 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	089b      	lsrs	r3, r3, #2
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003480:	480a      	ldr	r0, [pc, #40]	; (80034ac <write4bits+0x74>)
 8003482:	f002 fd05 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	08db      	lsrs	r3, r3, #3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003498:	4804      	ldr	r0, [pc, #16]	; (80034ac <write4bits+0x74>)
 800349a:	f002 fcf9 	bl	8005e90 <HAL_GPIO_WritePin>

	pulseEnable();
 800349e:	f7ff ffb5 	bl	800340c <pulseEnable>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40010c00 	.word	0x40010c00

080034b0 <write8bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write8bits(uint8_t value){
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,(value >> 0) & 0x01);
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034c8:	482c      	ldr	r0, [pc, #176]	; (800357c <write8bits+0xcc>)
 80034ca:	f002 fce1 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,(value >> 1) & 0x01);
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034e0:	4826      	ldr	r0, [pc, #152]	; (800357c <write8bits+0xcc>)
 80034e2:	f002 fcd5 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,(value >> 2) & 0x01);
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034f8:	4820      	ldr	r0, [pc, #128]	; (800357c <write8bits+0xcc>)
 80034fa:	f002 fcc9 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,(value >> 3) & 0x01);
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	08db      	lsrs	r3, r3, #3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003510:	481a      	ldr	r0, [pc, #104]	; (800357c <write8bits+0xcc>)
 8003512:	f002 fcbd 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 4) & 0x01);
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003528:	4815      	ldr	r0, [pc, #84]	; (8003580 <write8bits+0xd0>)
 800352a:	f002 fcb1 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 5) & 0x01);
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003540:	480f      	ldr	r0, [pc, #60]	; (8003580 <write8bits+0xd0>)
 8003542:	f002 fca5 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 6) & 0x01);
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	099b      	lsrs	r3, r3, #6
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003558:	4809      	ldr	r0, [pc, #36]	; (8003580 <write8bits+0xd0>)
 800355a:	f002 fc99 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 7) & 0x01);
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	09db      	lsrs	r3, r3, #7
 8003562:	b2db      	uxtb	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <write8bits+0xd0>)
 800356c:	f002 fc90 	bl	8005e90 <HAL_GPIO_WritePin>

	pulseEnable();
 8003570:	f7ff ff4c 	bl	800340c <pulseEnable>

}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40010800 	.word	0x40010800
 8003580:	40010c00 	.word	0x40010c00

08003584 <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	2200      	movs	r2, #0
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff ff06 	bl	80033a8 <send>
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	71da      	strb	r2, [r3, #7]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
 80035e8:	4613      	mov	r3, r2
 80035ea:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 80035ec:	2304      	movs	r3, #4
 80035ee:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 80035f0:	78bb      	ldrb	r3, [r7, #2]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d803      	bhi.n	8003600 <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	78db      	ldrb	r3, [r3, #3]
 8003604:	78ba      	ldrb	r2, [r7, #2]
 8003606:	429a      	cmp	r2, r3
 8003608:	d303      	bcc.n	8003612 <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	78db      	ldrb	r3, [r3, #3]
 800360e:	3b01      	subs	r3, #1
 8003610:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 8003612:	78bb      	ldrb	r3, [r7, #2]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	791a      	ldrb	r2, [r3, #4]
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	4413      	add	r3, r2
 800361e:	b2db      	uxtb	r3, r3
 8003620:	b25b      	sxtb	r3, r3
 8003622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003626:	b25b      	sxtb	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ffa9 	bl	8003584 <command>
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <setFileLineCounter>:
            dataToSave->sampleMeasurement[sample].ucAltDistance);
    return stringToSave;
}

unsigned char setFileLineCounter(unsigned char* count)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
    loadFileLineCounter = *count;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	781a      	ldrb	r2, [r3, #0]
 8003648:	4b03      	ldr	r3, [pc, #12]	; (8003658 <setFileLineCounter+0x1c>)
 800364a:	701a      	strb	r2, [r3, #0]
}
 800364c:	bf00      	nop
 800364e:	4618      	mov	r0, r3
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	200004cc 	.word	0x200004cc

0800365c <getFileLineCounter>:

unsigned char getFileLineCounter()
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
    return loadFileLineCounter;
 8003660:	4b02      	ldr	r3, [pc, #8]	; (800366c <getFileLineCounter+0x10>)
 8003662:	781b      	ldrb	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	200004cc 	.word	0x200004cc

08003670 <save_data>:

unsigned char save_data(unsigned char numTest)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
    numTest++;
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	3301      	adds	r3, #1
 800367e:	71fb      	strb	r3, [r7, #7]
    struct results* ptr_resultDataSave;
    ptr_resultDataSave = getUserResultData(numTest);
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd fd92 	bl	80011ac <getUserResultData>
 8003688:	60f8      	str	r0, [r7, #12]
    //TESTE SD
    ptr_resultDataSave->resultTestAcquiredSamples = 1;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	705a      	strb	r2, [r3, #1]
    ptr_resultDataSave->sampleMeasurement[0].sampleNum = 1;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	711a      	strb	r2, [r3, #4]
    ptr_resultDataSave->sampleMeasurement[0].ulReadingTime =2;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2202      	movs	r2, #2
 800369a:	609a      	str	r2, [r3, #8]
    ptr_resultDataSave->sampleMeasurement[0].uiVooTime = 3;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2203      	movs	r2, #3
 80036a0:	60da      	str	r2, [r3, #12]
    ptr_resultDataSave->sampleMeasurement[0].ucAltDistance = 4;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2204      	movs	r2, #4
 80036a6:	741a      	strb	r2, [r3, #16]
    //TESTE SD
    save_SD_card(ptr_resultDataSave,numTest);
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	4619      	mov	r1, r3
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7ff fc32 	bl	8002f16 <save_SD_card>
}
 80036b2:	bf00      	nop
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <load_data>:

unsigned char* load_data(unsigned char numTest)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
    unsigned char* ptr_dataLoad;
    struct results* ptr_resultLoadStruct;
    ptr_dataLoad = load_SD_card(numTest);
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fc02 	bl	8002ed2 <load_SD_card>
 80036ce:	4603      	mov	r3, r0
 80036d0:	60fb      	str	r3, [r7, #12]
    ptr_resultLoadStruct = loadDataArrayToStruct(ptr_dataLoad);
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f806 	bl	80036e4 <loadDataArrayToStruct>
 80036d8:	60b8      	str	r0, [r7, #8]
    return ptr_resultLoadStruct;
 80036da:	68bb      	ldr	r3, [r7, #8]

}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <loadDataArrayToStruct>:

unsigned char* loadDataArrayToStruct(unsigned char* data)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
    static struct results loadedResults; //
    struct results* ptr_loadedResults = &loadedResults;
 80036ec:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <loadDataArrayToStruct+0xc0>)
 80036ee:	613b      	str	r3, [r7, #16]

    unsigned char (*loadData)[MAX_LINES][MAX_LEN] = data;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	60fb      	str	r3, [r7, #12]
    unsigned char numTeste = getResultTestNumber();
 80036f4:	f7fd fd6e 	bl	80011d4 <getResultTestNumber>
 80036f8:	4603      	mov	r3, r0
 80036fa:	72fb      	strb	r3, [r7, #11]
    unsigned char samplesCounter = getFileLineCounter();
 80036fc:	f7ff ffae 	bl	800365c <getFileLineCounter>
 8003700:	4603      	mov	r3, r0
 8003702:	72bb      	strb	r3, [r7, #10]

    ptr_loadedResults->resultTestNum = numTeste;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	7afa      	ldrb	r2, [r7, #11]
 8003708:	701a      	strb	r2, [r3, #0]
    ptr_loadedResults->resultTestAcquiredSamples = samplesCounter;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	7aba      	ldrb	r2, [r7, #10]
 800370e:	705a      	strb	r2, [r3, #1]

    for(unsigned char samples = 0; samples<samplesCounter;samples++)
 8003710:	2300      	movs	r3, #0
 8003712:	75fb      	strb	r3, [r7, #23]
 8003714:	e03d      	b.n	8003792 <loadDataArrayToStruct+0xae>
    {
        ptr_loadedResults->sampleMeasurement[samples].sampleNum = (*loadData)[samples][0];
 8003716:	7dfa      	ldrb	r2, [r7, #23]
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	68f9      	ldr	r1, [r7, #12]
 800371c:	2064      	movs	r0, #100	; 0x64
 800371e:	fb00 f202 	mul.w	r2, r0, r2
 8003722:	440a      	add	r2, r1
 8003724:	7811      	ldrb	r1, [r2, #0]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	4413      	add	r3, r2
 800372c:	3304      	adds	r3, #4
 800372e:	460a      	mov	r2, r1
 8003730:	701a      	strb	r2, [r3, #0]
        ptr_loadedResults->sampleMeasurement[samples].ulReadingTime = (*loadData)[samples][1];
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	2164      	movs	r1, #100	; 0x64
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	4413      	add	r3, r2
 800373e:	3301      	adds	r3, #1
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	4611      	mov	r1, r2
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	4413      	add	r3, r2
 800374c:	3308      	adds	r3, #8
 800374e:	6019      	str	r1, [r3, #0]
        ptr_loadedResults->sampleMeasurement[samples].uiVooTime = (*loadData)[samples][2];
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	2164      	movs	r1, #100	; 0x64
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	3302      	adds	r3, #2
 800375e:	781a      	ldrb	r2, [r3, #0]
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	4611      	mov	r1, r2
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	4413      	add	r3, r2
 800376a:	330c      	adds	r3, #12
 800376c:	6019      	str	r1, [r3, #0]
        ptr_loadedResults->sampleMeasurement[samples].ucAltDistance = (*loadData)[samples][3];
 800376e:	7dfa      	ldrb	r2, [r7, #23]
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	68f9      	ldr	r1, [r7, #12]
 8003774:	2064      	movs	r0, #100	; 0x64
 8003776:	fb00 f202 	mul.w	r2, r0, r2
 800377a:	440a      	add	r2, r1
 800377c:	3203      	adds	r2, #3
 800377e:	7811      	ldrb	r1, [r2, #0]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	4413      	add	r3, r2
 8003786:	3310      	adds	r3, #16
 8003788:	460a      	mov	r2, r1
 800378a:	701a      	strb	r2, [r3, #0]
    for(unsigned char samples = 0; samples<samplesCounter;samples++)
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	3301      	adds	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
 8003792:	7dfa      	ldrb	r2, [r7, #23]
 8003794:	7abb      	ldrb	r3, [r7, #10]
 8003796:	429a      	cmp	r2, r3
 8003798:	d3bd      	bcc.n	8003716 <loadDataArrayToStruct+0x32>
    }

    return ptr_loadedResults;
 800379a:	693b      	ldr	r3, [r7, #16]

}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	200004d0 	.word	0x200004d0

080037a8 <getArqName>:

unsigned char* getArqName(unsigned char numTeste)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
    static unsigned char arqName[15]; //VERIFICAR SE VOU FAZER UM GET NISSO
    sprintf(arqName,"Teste %d.txt",numTeste);
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	461a      	mov	r2, r3
 80037b6:	4904      	ldr	r1, [pc, #16]	; (80037c8 <getArqName+0x20>)
 80037b8:	4804      	ldr	r0, [pc, #16]	; (80037cc <getArqName+0x24>)
 80037ba:	f005 fdc1 	bl	8009340 <siprintf>
    return arqName;
 80037be:	4b03      	ldr	r3, [pc, #12]	; (80037cc <getArqName+0x24>)
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	0800bda4 	.word	0x0800bda4
 80037cc:	20000524 	.word	0x20000524

080037d0 <lineCounter>:

unsigned char lineCounter(unsigned char numTeste)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
    unsigned char* arqName = getArqName(numTeste);
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ffe3 	bl	80037a8 <getArqName>
 80037e2:	6138      	str	r0, [r7, #16]
    char c = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	75fb      	strb	r3, [r7, #23]
    unsigned char count = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	75bb      	strb	r3, [r7, #22]
    FILE* ptr_file;
    ptr_file = fopen(arqName,"r");
 80037ec:	490d      	ldr	r1, [pc, #52]	; (8003824 <lineCounter+0x54>)
 80037ee:	6938      	ldr	r0, [r7, #16]
 80037f0:	f005 fa74 	bl	8008cdc <fopen>
 80037f4:	60f8      	str	r0, [r7, #12]
    if (ptr_file == NULL )
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <lineCounter+0x32>
    {
        printf( "error ao abrir\n");
 80037fc:	480a      	ldr	r0, [pc, #40]	; (8003828 <lineCounter+0x58>)
 80037fe:	f005 fd5b 	bl	80092b8 <puts>
    }
    for(c = fgetc(ptr_file); c != EOF; c = fgetc(ptr_file))
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f005 f938 	bl	8008a78 <fgetc>
 8003808:	4603      	mov	r3, r0
 800380a:	75fb      	strb	r3, [r7, #23]
    {
        if (c == '\n') // Increment count if this character is newline
 800380c:	7dfb      	ldrb	r3, [r7, #23]
 800380e:	2b0a      	cmp	r3, #10
 8003810:	d102      	bne.n	8003818 <lineCounter+0x48>
        {
          count = count + 1;
 8003812:	7dbb      	ldrb	r3, [r7, #22]
 8003814:	3301      	adds	r3, #1
 8003816:	75bb      	strb	r3, [r7, #22]
    for(c = fgetc(ptr_file); c != EOF; c = fgetc(ptr_file))
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f005 f92d 	bl	8008a78 <fgetc>
 800381e:	4603      	mov	r3, r0
 8003820:	75fb      	strb	r3, [r7, #23]
        if (c == '\n') // Increment count if this character is newline
 8003822:	e7f3      	b.n	800380c <lineCounter+0x3c>
 8003824:	0800bdb4 	.word	0x0800bdb4
 8003828:	0800bdb8 	.word	0x0800bdb8

0800382c <getNextSub>:

struct Menu menuSub ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextSub(unsigned char nextState)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
    menuSub.menuNext = nextState;
 8003836:	4a05      	ldr	r2, [pc, #20]	; (800384c <getNextSub+0x20>)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	7013      	strb	r3, [r2, #0]
    return menuSub.menuNext;
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <getNextSub+0x20>)
 800383e:	781b      	ldrb	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000534 	.word	0x20000534

08003850 <setSelectSub>:

unsigned char setSelectSub(unsigned char *selectedState)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
    unsigned char state = *selectedState;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	73fb      	strb	r3, [r7, #15]
    menuSub.menuSelect = state;
 800385e:	4a05      	ldr	r2, [pc, #20]	; (8003874 <setSelectSub+0x24>)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	7053      	strb	r3, [r2, #1]
    return menuSub.menuSelect;
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <setSelectSub+0x24>)
 8003866:	785b      	ldrb	r3, [r3, #1]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000534 	.word	0x20000534

08003878 <setInsertData>:

unsigned char setInsertData(struct dataInsert* dataToInsert)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
    struct dataInsert* userDataInput = dataToInsert;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60fb      	str	r3, [r7, #12]
    setUserInputConfigData(userDataInput);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7fd fc45 	bl	8001114 <setUserInputConfigData>
}
 800388a:	bf00      	nop
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <SET_HW_TIMER2>:

static unsigned char encoderStatus;
static unsigned char timerStatus;

unsigned char SET_HW_TIMER2(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
	encoderStatus = 0;
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <SET_HW_TIMER2+0x40>)
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
//	TIM_HandleTypeDef* htim2 =  getTimer2Instance();
	unsigned char* htim2 =  getTimer2Instance();
 80038a0:	f000 fdb6 	bl	8004410 <getTimer2Instance>
 80038a4:	4603      	mov	r3, r0
 80038a6:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Start_IT(htim2, TIM_CHANNEL_ALL);
 80038a8:	213c      	movs	r1, #60	; 0x3c
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f003 fcb4 	bl	8007218 <HAL_TIM_Encoder_Start_IT>
 80038b0:	4603      	mov	r3, r0
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <SET_HW_TIMER2+0x40>)
 80038b6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 80038b8:	2064      	movs	r0, #100	; 0x64
 80038ba:	f001 fd95 	bl	80053e8 <HAL_Delay>
	return !encoderStatus;
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <SET_HW_TIMER2+0x40>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf0c      	ite	eq
 80038c6:	2301      	moveq	r3, #1
 80038c8:	2300      	movne	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000550 	.word	0x20000550

080038d8 <RESET_HW_TIMER2>:

unsigned char RESET_HW_TIMER2(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
    encoderStatus = 1;
 80038de:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <RESET_HW_TIMER2+0x38>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
//    TIM_HandleTypeDef* htim2 =  getTimer2Instance();
    unsigned char* htim2 =  getTimer2Instance();
 80038e4:	f000 fd94 	bl	8004410 <getTimer2Instance>
 80038e8:	4603      	mov	r3, r0
 80038ea:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Stop_IT(htim2, TIM_CHANNEL_ALL);
 80038ec:	213c      	movs	r1, #60	; 0x3c
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f003 fd40 	bl	8007374 <HAL_TIM_Encoder_Stop_IT>
 80038f4:	4603      	mov	r3, r0
 80038f6:	461a      	mov	r2, r3
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <RESET_HW_TIMER2+0x38>)
 80038fa:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 80038fc:	2064      	movs	r0, #100	; 0x64
 80038fe:	f001 fd73 	bl	80053e8 <HAL_Delay>
	return encoderStatus;
 8003902:	4b03      	ldr	r3, [pc, #12]	; (8003910 <RESET_HW_TIMER2+0x38>)
 8003904:	781b      	ldrb	r3, [r3, #0]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000550 	.word	0x20000550

08003914 <SET_HW_TIMER3>:

unsigned char SET_HW_TIMER3(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
    timerStatus = 0;
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <SET_HW_TIMER3+0x40>)
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8003920:	f000 fd80 	bl	8004424 <getTimer3Instance>
 8003924:	4603      	mov	r3, r0
 8003926:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Start_IT(htim3);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f003 fb53 	bl	8006fd4 <HAL_TIM_Base_Start_IT>
 800392e:	4603      	mov	r3, r0
 8003930:	461a      	mov	r2, r3
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <SET_HW_TIMER3+0x40>)
 8003934:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 8003936:	2064      	movs	r0, #100	; 0x64
 8003938:	f001 fd56 	bl	80053e8 <HAL_Delay>
    return !timerStatus;
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <SET_HW_TIMER3+0x40>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000551 	.word	0x20000551

08003958 <RESET_HW_TIMER3>:

unsigned char RESET_HW_TIMER3(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
    timerStatus = 1;
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <RESET_HW_TIMER3+0x34>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8003964:	f000 fd5e 	bl	8004424 <getTimer3Instance>
 8003968:	4603      	mov	r3, r0
 800396a:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Stop_IT(htim3);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f003 fb83 	bl	8007078 <HAL_TIM_Base_Stop_IT>
 8003972:	4603      	mov	r3, r0
 8003974:	461a      	mov	r2, r3
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <RESET_HW_TIMER3+0x34>)
 8003978:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 800397a:	2064      	movs	r0, #100	; 0x64
 800397c:	f001 fd34 	bl	80053e8 <HAL_Delay>
    return timerStatus;
 8003980:	4b02      	ldr	r3, [pc, #8]	; (800398c <RESET_HW_TIMER3+0x34>)
 8003982:	781b      	ldrb	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000551 	.word	0x20000551

08003990 <SET_HW_UART>:
#include "UARTHW.h"
#include "main.h"


unsigned char SET_HW_UART(unsigned char* addr)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60fb      	str	r3, [r7, #12]
    __HAL_UART_ENABLE(instance);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039aa:	60da      	str	r2, [r3, #12]
}
 80039ac:	bf00      	nop
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <RESET_HW_UART>:

unsigned char RESET_HW_UART(unsigned char* addr)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60fb      	str	r3, [r7, #12]
    __HAL_UART_DISABLE(instance);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d2:	60da      	str	r2, [r3, #12]
}
 80039d4:	bf00      	nop
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <TRANSMISSION_HW_UART>:

unsigned char TRANSMISSION_HW_UART(unsigned char* addr, unsigned char* TX)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08e      	sub	sp, #56	; 0x38
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
	unsigned int buffer[10];
	for(unsigned char i = 0; i<10;i++) buffer[i] = TX[i];
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80039f0:	e010      	b.n	8003a14 <TRANSMISSION_HW_UART+0x34>
 80039f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	4413      	add	r3, r2
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	3338      	adds	r3, #56	; 0x38
 8003a04:	443b      	add	r3, r7
 8003a06:	f843 2c30 	str.w	r2, [r3, #-48]
 8003a0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003a14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003a18:	2b09      	cmp	r3, #9
 8003a1a:	d9ea      	bls.n	80039f2 <TRANSMISSION_HW_UART+0x12>
	UART_HandleTypeDef* instance = addr;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	633b      	str	r3, [r7, #48]	; 0x30

    HAL_UART_Transmit(instance, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8003a20:	f107 0108 	add.w	r1, r7, #8
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295
 8003a28:	2228      	movs	r2, #40	; 0x28
 8003a2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a2c:	f004 f917 	bl	8007c5e <HAL_UART_Transmit>

}
 8003a30:	bf00      	nop
 8003a32:	4618      	mov	r0, r3
 8003a34:	3738      	adds	r7, #56	; 0x38
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003a40:	2200      	movs	r2, #0
 8003a42:	2110      	movs	r1, #16
 8003a44:	4803      	ldr	r0, [pc, #12]	; (8003a54 <SELECT+0x18>)
 8003a46:	f002 fa23 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	f001 fccc 	bl	80053e8 <HAL_Delay>
}
 8003a50:	bf00      	nop
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40010800 	.word	0x40010800

08003a58 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	2110      	movs	r1, #16
 8003a60:	4803      	ldr	r0, [pc, #12]	; (8003a70 <DESELECT+0x18>)
 8003a62:	f002 fa15 	bl	8005e90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003a66:	2001      	movs	r0, #1
 8003a68:	f001 fcbe 	bl	80053e8 <HAL_Delay>
}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40010800 	.word	0x40010800

08003a74 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003a7e:	bf00      	nop
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <SPI_TxByte+0x30>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d1f8      	bne.n	8003a80 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003a8e:	1df9      	adds	r1, r7, #7
 8003a90:	2364      	movs	r3, #100	; 0x64
 8003a92:	2201      	movs	r2, #1
 8003a94:	4803      	ldr	r0, [pc, #12]	; (8003aa4 <SPI_TxByte+0x30>)
 8003a96:	f002 fec9 	bl	800682c <HAL_SPI_Transmit>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000554 	.word	0x20000554

08003aa8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003ab4:	bf00      	nop
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <SPI_TxBuffer+0x30>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d1f8      	bne.n	8003ab6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8003ac4:	887a      	ldrh	r2, [r7, #2]
 8003ac6:	2364      	movs	r3, #100	; 0x64
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <SPI_TxBuffer+0x30>)
 8003acc:	f002 feae 	bl	800682c <HAL_SPI_Transmit>
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000554 	.word	0x20000554

08003adc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003ae2:	23ff      	movs	r3, #255	; 0xff
 8003ae4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003ae6:	bf00      	nop
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <SPI_RxByte+0x34>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d1f8      	bne.n	8003ae8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003af6:	1dba      	adds	r2, r7, #6
 8003af8:	1df9      	adds	r1, r7, #7
 8003afa:	2364      	movs	r3, #100	; 0x64
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	2301      	movs	r3, #1
 8003b00:	4803      	ldr	r0, [pc, #12]	; (8003b10 <SPI_RxByte+0x34>)
 8003b02:	f002 ffcf 	bl	8006aa4 <HAL_SPI_TransmitReceive>

	return data;
 8003b06:	79bb      	ldrb	r3, [r7, #6]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000554 	.word	0x20000554

08003b14 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003b1c:	f7ff ffde 	bl	8003adc <SPI_RxByte>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	701a      	strb	r2, [r3, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <SD_ReadyWait+0x30>)
 8003b38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b3c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003b3e:	f7ff ffcd 	bl	8003adc <SPI_RxByte>
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	2bff      	cmp	r3, #255	; 0xff
 8003b4a:	d003      	beq.n	8003b54 <SD_ReadyWait+0x24>
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <SD_ReadyWait+0x30>)
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f4      	bne.n	8003b3e <SD_ReadyWait+0xe>

	return res;
 8003b54:	79fb      	ldrb	r3, [r7, #7]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200006de 	.word	0x200006de

08003b64 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8003b6a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003b6e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8003b70:	f7ff ff72 	bl	8003a58 <DESELECT>
	for(int i = 0; i < 10; i++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	e005      	b.n	8003b86 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8003b7a:	20ff      	movs	r0, #255	; 0xff
 8003b7c:	f7ff ff7a 	bl	8003a74 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	3301      	adds	r3, #1
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b09      	cmp	r3, #9
 8003b8a:	ddf6      	ble.n	8003b7a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8003b8c:	f7ff ff56 	bl	8003a3c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8003b90:	2340      	movs	r3, #64	; 0x40
 8003b92:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8003ba4:	2395      	movs	r3, #149	; 0x95
 8003ba6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8003ba8:	463b      	mov	r3, r7
 8003baa:	2106      	movs	r1, #6
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff7b 	bl	8003aa8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003bb2:	e002      	b.n	8003bba <SD_PowerOn+0x56>
	{
		cnt--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003bba:	f7ff ff8f 	bl	8003adc <SPI_RxByte>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d002      	beq.n	8003bca <SD_PowerOn+0x66>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f4      	bne.n	8003bb4 <SD_PowerOn+0x50>
	}

	DESELECT();
 8003bca:	f7ff ff45 	bl	8003a58 <DESELECT>
	SPI_TxByte(0XFF);
 8003bce:	20ff      	movs	r0, #255	; 0xff
 8003bd0:	f7ff ff50 	bl	8003a74 <SPI_TxByte>

	PowerFlag = 1;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <SD_PowerOn+0x80>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000553 	.word	0x20000553

08003be8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <SD_PowerOff+0x14>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000553 	.word	0x20000553

08003c00 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003c04:	4b02      	ldr	r3, [pc, #8]	; (8003c10 <SD_CheckPower+0x10>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr
 8003c10:	20000553 	.word	0x20000553

08003c14 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <SD_RxDataBlock+0x58>)
 8003c20:	22c8      	movs	r2, #200	; 0xc8
 8003c22:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003c24:	f7ff ff5a 	bl	8003adc <SPI_RxByte>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2bff      	cmp	r3, #255	; 0xff
 8003c30:	d103      	bne.n	8003c3a <SD_RxDataBlock+0x26>
 8003c32:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <SD_RxDataBlock+0x58>)
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f4      	bne.n	8003c24 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2bfe      	cmp	r3, #254	; 0xfe
 8003c3e:	d001      	beq.n	8003c44 <SD_RxDataBlock+0x30>
 8003c40:	2300      	movs	r3, #0
 8003c42:	e00f      	b.n	8003c64 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff ff62 	bl	8003b14 <SPI_RxBytePtr>
	} while(len--);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	603a      	str	r2, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f4      	bne.n	8003c44 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8003c5a:	f7ff ff3f 	bl	8003adc <SPI_RxByte>
	SPI_RxByte();
 8003c5e:	f7ff ff3d 	bl	8003adc <SPI_RxByte>

	return TRUE;
 8003c62:	2301      	movs	r3, #1
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	200006dd 	.word	0x200006dd

08003c70 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003c80:	f7ff ff56 	bl	8003b30 <SD_ReadyWait>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2bff      	cmp	r3, #255	; 0xff
 8003c88:	d001      	beq.n	8003c8e <SD_TxDataBlock+0x1e>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e02f      	b.n	8003cee <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff feef 	bl	8003a74 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	2bfd      	cmp	r3, #253	; 0xfd
 8003c9a:	d020      	beq.n	8003cde <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ff01 	bl	8003aa8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003ca6:	f7ff ff19 	bl	8003adc <SPI_RxByte>
		SPI_RxByte();
 8003caa:	f7ff ff17 	bl	8003adc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003cae:	e00b      	b.n	8003cc8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003cb0:	f7ff ff14 	bl	8003adc <SPI_RxByte>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	2b05      	cmp	r3, #5
 8003cc0:	d006      	beq.n	8003cd0 <SD_TxDataBlock+0x60>
			i++;
 8003cc2:	7bbb      	ldrb	r3, [r7, #14]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8003cc8:	7bbb      	ldrb	r3, [r7, #14]
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d9f0      	bls.n	8003cb0 <SD_TxDataBlock+0x40>
 8003cce:	e000      	b.n	8003cd2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003cd0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003cd2:	bf00      	nop
 8003cd4:	f7ff ff02 	bl	8003adc <SPI_RxByte>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0fa      	beq.n	8003cd4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	2b05      	cmp	r3, #5
 8003ce6:	d101      	bne.n	8003cec <SD_TxDataBlock+0x7c>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <SD_TxDataBlock+0x7e>

	return FALSE;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	6039      	str	r1, [r7, #0]
 8003d00:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003d02:	f7ff ff15 	bl	8003b30 <SD_ReadyWait>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2bff      	cmp	r3, #255	; 0xff
 8003d0a:	d001      	beq.n	8003d10 <SD_SendCmd+0x1a>
 8003d0c:	23ff      	movs	r3, #255	; 0xff
 8003d0e:	e042      	b.n	8003d96 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff feae 	bl	8003a74 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	0e1b      	lsrs	r3, r3, #24
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fea8 	bl	8003a74 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fea2 	bl	8003a74 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fe9c 	bl	8003a74 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fe97 	bl	8003a74 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	2b40      	cmp	r3, #64	; 0x40
 8003d4a:	d102      	bne.n	8003d52 <SD_SendCmd+0x5c>
 8003d4c:	2395      	movs	r3, #149	; 0x95
 8003d4e:	73fb      	strb	r3, [r7, #15]
 8003d50:	e007      	b.n	8003d62 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	2b48      	cmp	r3, #72	; 0x48
 8003d56:	d102      	bne.n	8003d5e <SD_SendCmd+0x68>
 8003d58:	2387      	movs	r3, #135	; 0x87
 8003d5a:	73fb      	strb	r3, [r7, #15]
 8003d5c:	e001      	b.n	8003d62 <SD_SendCmd+0x6c>
	else crc = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fe85 	bl	8003a74 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	2b4c      	cmp	r3, #76	; 0x4c
 8003d6e:	d101      	bne.n	8003d74 <SD_SendCmd+0x7e>
 8003d70:	f7ff feb4 	bl	8003adc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8003d74:	230a      	movs	r3, #10
 8003d76:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8003d78:	f7ff feb0 	bl	8003adc <SPI_RxByte>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8003d80:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	da05      	bge.n	8003d94 <SD_SendCmd+0x9e>
 8003d88:	7bbb      	ldrb	r3, [r7, #14]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	73bb      	strb	r3, [r7, #14]
 8003d8e:	7bbb      	ldrb	r3, [r7, #14]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f1      	bne.n	8003d78 <SD_SendCmd+0x82>

	return res;
 8003d94:	7b7b      	ldrb	r3, [r7, #13]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <SD_disk_initialize+0x14>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0d1      	b.n	8003f58 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003db4:	4b6a      	ldr	r3, [pc, #424]	; (8003f60 <SD_disk_initialize+0x1c0>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <SD_disk_initialize+0x2a>
 8003dc2:	4b67      	ldr	r3, [pc, #412]	; (8003f60 <SD_disk_initialize+0x1c0>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	e0c6      	b.n	8003f58 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8003dca:	f7ff fecb 	bl	8003b64 <SD_PowerOn>

	/* slave select */
	SELECT();
 8003dce:	f7ff fe35 	bl	8003a3c <SELECT>

	/* check disk type */
	type = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	2040      	movs	r0, #64	; 0x40
 8003dda:	f7ff ff8c 	bl	8003cf6 <SD_SendCmd>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 80a1 	bne.w	8003f28 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8003de6:	4b5f      	ldr	r3, [pc, #380]	; (8003f64 <SD_disk_initialize+0x1c4>)
 8003de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dec:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003dee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003df2:	2048      	movs	r0, #72	; 0x48
 8003df4:	f7ff ff7f 	bl	8003cf6 <SD_SendCmd>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d155      	bne.n	8003eaa <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	73fb      	strb	r3, [r7, #15]
 8003e02:	e00c      	b.n	8003e1e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8003e04:	7bfc      	ldrb	r4, [r7, #15]
 8003e06:	f7ff fe69 	bl	8003adc <SPI_RxByte>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f104 0310 	add.w	r3, r4, #16
 8003e12:	443b      	add	r3, r7
 8003e14:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d9ef      	bls.n	8003e04 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003e24:	7abb      	ldrb	r3, [r7, #10]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d17e      	bne.n	8003f28 <SD_disk_initialize+0x188>
 8003e2a:	7afb      	ldrb	r3, [r7, #11]
 8003e2c:	2baa      	cmp	r3, #170	; 0xaa
 8003e2e:	d17b      	bne.n	8003f28 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003e30:	2100      	movs	r1, #0
 8003e32:	2077      	movs	r0, #119	; 0x77
 8003e34:	f7ff ff5f 	bl	8003cf6 <SD_SendCmd>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d807      	bhi.n	8003e4e <SD_disk_initialize+0xae>
 8003e3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003e42:	2069      	movs	r0, #105	; 0x69
 8003e44:	f7ff ff57 	bl	8003cf6 <SD_SendCmd>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8003e4e:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <SD_disk_initialize+0x1c4>)
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1ec      	bne.n	8003e30 <SD_disk_initialize+0x90>
 8003e56:	e000      	b.n	8003e5a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003e58:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003e5a:	4b42      	ldr	r3, [pc, #264]	; (8003f64 <SD_disk_initialize+0x1c4>)
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d062      	beq.n	8003f28 <SD_disk_initialize+0x188>
 8003e62:	2100      	movs	r1, #0
 8003e64:	207a      	movs	r0, #122	; 0x7a
 8003e66:	f7ff ff46 	bl	8003cf6 <SD_SendCmd>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d15b      	bne.n	8003f28 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e00c      	b.n	8003e90 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8003e76:	7bfc      	ldrb	r4, [r7, #15]
 8003e78:	f7ff fe30 	bl	8003adc <SPI_RxByte>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f104 0310 	add.w	r3, r4, #16
 8003e84:	443b      	add	r3, r7
 8003e86:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d9ef      	bls.n	8003e76 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003e96:	7a3b      	ldrb	r3, [r7, #8]
 8003e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <SD_disk_initialize+0x104>
 8003ea0:	230c      	movs	r3, #12
 8003ea2:	e000      	b.n	8003ea6 <SD_disk_initialize+0x106>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	73bb      	strb	r3, [r7, #14]
 8003ea8:	e03e      	b.n	8003f28 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003eaa:	2100      	movs	r1, #0
 8003eac:	2077      	movs	r0, #119	; 0x77
 8003eae:	f7ff ff22 	bl	8003cf6 <SD_SendCmd>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d808      	bhi.n	8003eca <SD_disk_initialize+0x12a>
 8003eb8:	2100      	movs	r1, #0
 8003eba:	2069      	movs	r0, #105	; 0x69
 8003ebc:	f7ff ff1b 	bl	8003cf6 <SD_SendCmd>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d801      	bhi.n	8003eca <SD_disk_initialize+0x12a>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e000      	b.n	8003ecc <SD_disk_initialize+0x12c>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8003ece:	7bbb      	ldrb	r3, [r7, #14]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d10e      	bne.n	8003ef2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	2077      	movs	r0, #119	; 0x77
 8003ed8:	f7ff ff0d 	bl	8003cf6 <SD_SendCmd>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d80e      	bhi.n	8003f00 <SD_disk_initialize+0x160>
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	2069      	movs	r0, #105	; 0x69
 8003ee6:	f7ff ff06 	bl	8003cf6 <SD_SendCmd>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d107      	bne.n	8003f00 <SD_disk_initialize+0x160>
 8003ef0:	e00c      	b.n	8003f0c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	2041      	movs	r0, #65	; 0x41
 8003ef6:	f7ff fefe 	bl	8003cf6 <SD_SendCmd>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d004      	beq.n	8003f0a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8003f00:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <SD_disk_initialize+0x1c4>)
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e2      	bne.n	8003ece <SD_disk_initialize+0x12e>
 8003f08:	e000      	b.n	8003f0c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003f0a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003f0c:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <SD_disk_initialize+0x1c4>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <SD_disk_initialize+0x184>
 8003f14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f18:	2050      	movs	r0, #80	; 0x50
 8003f1a:	f7ff feec 	bl	8003cf6 <SD_SendCmd>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <SD_disk_initialize+0x188>
 8003f24:	2300      	movs	r3, #0
 8003f26:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8003f28:	4a0f      	ldr	r2, [pc, #60]	; (8003f68 <SD_disk_initialize+0x1c8>)
 8003f2a:	7bbb      	ldrb	r3, [r7, #14]
 8003f2c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8003f2e:	f7ff fd93 	bl	8003a58 <DESELECT>
	SPI_RxByte();
 8003f32:	f7ff fdd3 	bl	8003adc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8003f36:	7bbb      	ldrb	r3, [r7, #14]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8003f3c:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <SD_disk_initialize+0x1c0>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <SD_disk_initialize+0x1c0>)
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	e001      	b.n	8003f52 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8003f4e:	f7ff fe4b 	bl	8003be8 <SD_PowerOff>
	}

	return Stat;
 8003f52:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <SD_disk_initialize+0x1c0>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b2db      	uxtb	r3, r3
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd90      	pop	{r4, r7, pc}
 8003f60:	200000b0 	.word	0x200000b0
 8003f64:	200006dd 	.word	0x200006dd
 8003f68:	20000552 	.word	0x20000552

08003f6c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <SD_disk_status+0x14>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e002      	b.n	8003f86 <SD_disk_status+0x1a>
	return Stat;
 8003f80:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <SD_disk_status+0x24>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b2db      	uxtb	r3, r3
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr
 8003f90:	200000b0 	.word	0x200000b0

08003f94 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <SD_disk_read+0x1c>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <SD_disk_read+0x20>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	e051      	b.n	8004058 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003fb4:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <SD_disk_read+0xcc>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <SD_disk_read+0x32>
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e048      	b.n	8004058 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003fc6:	4b27      	ldr	r3, [pc, #156]	; (8004064 <SD_disk_read+0xd0>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d102      	bne.n	8003fd8 <SD_disk_read+0x44>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	025b      	lsls	r3, r3, #9
 8003fd6:	607b      	str	r3, [r7, #4]

	SELECT();
 8003fd8:	f7ff fd30 	bl	8003a3c <SELECT>

	if (count == 1)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d111      	bne.n	8004006 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	2051      	movs	r0, #81	; 0x51
 8003fe6:	f7ff fe86 	bl	8003cf6 <SD_SendCmd>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d129      	bne.n	8004044 <SD_disk_read+0xb0>
 8003ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ff4:	68b8      	ldr	r0, [r7, #8]
 8003ff6:	f7ff fe0d 	bl	8003c14 <SD_RxDataBlock>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d021      	beq.n	8004044 <SD_disk_read+0xb0>
 8004000:	2300      	movs	r3, #0
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	e01e      	b.n	8004044 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	2052      	movs	r0, #82	; 0x52
 800400a:	f7ff fe74 	bl	8003cf6 <SD_SendCmd>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d117      	bne.n	8004044 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004014:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004018:	68b8      	ldr	r0, [r7, #8]
 800401a:	f7ff fdfb 	bl	8003c14 <SD_RxDataBlock>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <SD_disk_read+0xa6>
				buff += 512;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800402a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	3b01      	subs	r3, #1
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ed      	bne.n	8004014 <SD_disk_read+0x80>
 8004038:	e000      	b.n	800403c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800403a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800403c:	2100      	movs	r1, #0
 800403e:	204c      	movs	r0, #76	; 0x4c
 8004040:	f7ff fe59 	bl	8003cf6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004044:	f7ff fd08 	bl	8003a58 <DESELECT>
	SPI_RxByte();
 8004048:	f7ff fd48 	bl	8003adc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	200000b0 	.word	0x200000b0
 8004064:	20000552 	.word	0x20000552

08004068 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	4603      	mov	r3, r0
 8004076:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <SD_disk_write+0x1c>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <SD_disk_write+0x20>
 8004084:	2304      	movs	r3, #4
 8004086:	e06b      	b.n	8004160 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004088:	4b37      	ldr	r3, [pc, #220]	; (8004168 <SD_disk_write+0x100>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <SD_disk_write+0x32>
 8004096:	2303      	movs	r3, #3
 8004098:	e062      	b.n	8004160 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800409a:	4b33      	ldr	r3, [pc, #204]	; (8004168 <SD_disk_write+0x100>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <SD_disk_write+0x44>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e059      	b.n	8004160 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80040ac:	4b2f      	ldr	r3, [pc, #188]	; (800416c <SD_disk_write+0x104>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <SD_disk_write+0x56>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	025b      	lsls	r3, r3, #9
 80040bc:	607b      	str	r3, [r7, #4]

	SELECT();
 80040be:	f7ff fcbd 	bl	8003a3c <SELECT>

	if (count == 1)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d110      	bne.n	80040ea <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	2058      	movs	r0, #88	; 0x58
 80040cc:	f7ff fe13 	bl	8003cf6 <SD_SendCmd>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d13a      	bne.n	800414c <SD_disk_write+0xe4>
 80040d6:	21fe      	movs	r1, #254	; 0xfe
 80040d8:	68b8      	ldr	r0, [r7, #8]
 80040da:	f7ff fdc9 	bl	8003c70 <SD_TxDataBlock>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d033      	beq.n	800414c <SD_disk_write+0xe4>
			count = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	e030      	b.n	800414c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80040ea:	4b20      	ldr	r3, [pc, #128]	; (800416c <SD_disk_write+0x104>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80040f6:	2100      	movs	r1, #0
 80040f8:	2077      	movs	r0, #119	; 0x77
 80040fa:	f7ff fdfc 	bl	8003cf6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80040fe:	6839      	ldr	r1, [r7, #0]
 8004100:	2057      	movs	r0, #87	; 0x57
 8004102:	f7ff fdf8 	bl	8003cf6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	2059      	movs	r0, #89	; 0x59
 800410a:	f7ff fdf4 	bl	8003cf6 <SD_SendCmd>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d11b      	bne.n	800414c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004114:	21fc      	movs	r1, #252	; 0xfc
 8004116:	68b8      	ldr	r0, [r7, #8]
 8004118:	f7ff fdaa 	bl	8003c70 <SD_TxDataBlock>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <SD_disk_write+0xd0>
				buff += 512;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004128:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	3b01      	subs	r3, #1
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ee      	bne.n	8004114 <SD_disk_write+0xac>
 8004136:	e000      	b.n	800413a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004138:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800413a:	21fd      	movs	r1, #253	; 0xfd
 800413c:	2000      	movs	r0, #0
 800413e:	f7ff fd97 	bl	8003c70 <SD_TxDataBlock>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <SD_disk_write+0xe4>
			{
				count = 1;
 8004148:	2301      	movs	r3, #1
 800414a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800414c:	f7ff fc84 	bl	8003a58 <DESELECT>
	SPI_RxByte();
 8004150:	f7ff fcc4 	bl	8003adc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	bf14      	ite	ne
 800415a:	2301      	movne	r3, #1
 800415c:	2300      	moveq	r3, #0
 800415e:	b2db      	uxtb	r3, r3
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	200000b0 	.word	0x200000b0
 800416c:	20000552 	.word	0x20000552

08004170 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004170:	b590      	push	{r4, r7, lr}
 8004172:	b08b      	sub	sp, #44	; 0x2c
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	603a      	str	r2, [r7, #0]
 800417a:	71fb      	strb	r3, [r7, #7]
 800417c:	460b      	mov	r3, r1
 800417e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <SD_disk_ioctl+0x1e>
 800418a:	2304      	movs	r3, #4
 800418c:	e115      	b.n	80043ba <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8004194:	79bb      	ldrb	r3, [r7, #6]
 8004196:	2b05      	cmp	r3, #5
 8004198:	d124      	bne.n	80041e4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d012      	beq.n	80041c8 <SD_disk_ioctl+0x58>
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	dc1a      	bgt.n	80041dc <SD_disk_ioctl+0x6c>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <SD_disk_ioctl+0x40>
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d006      	beq.n	80041bc <SD_disk_ioctl+0x4c>
 80041ae:	e015      	b.n	80041dc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80041b0:	f7ff fd1a 	bl	8003be8 <SD_PowerOff>
			res = RES_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80041ba:	e0fc      	b.n	80043b6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80041bc:	f7ff fcd2 	bl	8003b64 <SD_PowerOn>
			res = RES_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80041c6:	e0f6      	b.n	80043b6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	1c5c      	adds	r4, r3, #1
 80041cc:	f7ff fd18 	bl	8003c00 <SD_CheckPower>
 80041d0:	4603      	mov	r3, r0
 80041d2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80041d4:	2300      	movs	r3, #0
 80041d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80041da:	e0ec      	b.n	80043b6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80041dc:	2304      	movs	r3, #4
 80041de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80041e2:	e0e8      	b.n	80043b6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80041e4:	4b77      	ldr	r3, [pc, #476]	; (80043c4 <SD_disk_ioctl+0x254>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <SD_disk_ioctl+0x86>
 80041f2:	2303      	movs	r3, #3
 80041f4:	e0e1      	b.n	80043ba <SD_disk_ioctl+0x24a>

		SELECT();
 80041f6:	f7ff fc21 	bl	8003a3c <SELECT>

		switch (ctrl)
 80041fa:	79bb      	ldrb	r3, [r7, #6]
 80041fc:	2b0d      	cmp	r3, #13
 80041fe:	f200 80cb 	bhi.w	8004398 <SD_disk_ioctl+0x228>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <SD_disk_ioctl+0x98>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	08004303 	.word	0x08004303
 800420c:	08004241 	.word	0x08004241
 8004210:	080042f3 	.word	0x080042f3
 8004214:	08004399 	.word	0x08004399
 8004218:	08004399 	.word	0x08004399
 800421c:	08004399 	.word	0x08004399
 8004220:	08004399 	.word	0x08004399
 8004224:	08004399 	.word	0x08004399
 8004228:	08004399 	.word	0x08004399
 800422c:	08004399 	.word	0x08004399
 8004230:	08004399 	.word	0x08004399
 8004234:	08004315 	.word	0x08004315
 8004238:	08004339 	.word	0x08004339
 800423c:	0800435d 	.word	0x0800435d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004240:	2100      	movs	r1, #0
 8004242:	2049      	movs	r0, #73	; 0x49
 8004244:	f7ff fd57 	bl	8003cf6 <SD_SendCmd>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 80a8 	bne.w	80043a0 <SD_disk_ioctl+0x230>
 8004250:	f107 030c 	add.w	r3, r7, #12
 8004254:	2110      	movs	r1, #16
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fcdc 	bl	8003c14 <SD_RxDataBlock>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 809e 	beq.w	80043a0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8004264:	7b3b      	ldrb	r3, [r7, #12]
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d10e      	bne.n	800428c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800426e:	7d7b      	ldrb	r3, [r7, #21]
 8004270:	b29a      	uxth	r2, r3
 8004272:	7d3b      	ldrb	r3, [r7, #20]
 8004274:	b29b      	uxth	r3, r3
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	b29b      	uxth	r3, r3
 800427a:	4413      	add	r3, r2
 800427c:	b29b      	uxth	r3, r3
 800427e:	3301      	adds	r3, #1
 8004280:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004282:	8bfb      	ldrh	r3, [r7, #30]
 8004284:	029a      	lsls	r2, r3, #10
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e02e      	b.n	80042ea <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800428c:	7c7b      	ldrb	r3, [r7, #17]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	b2da      	uxtb	r2, r3
 8004294:	7dbb      	ldrb	r3, [r7, #22]
 8004296:	09db      	lsrs	r3, r3, #7
 8004298:	b2db      	uxtb	r3, r3
 800429a:	4413      	add	r3, r2
 800429c:	b2da      	uxtb	r2, r3
 800429e:	7d7b      	ldrb	r3, [r7, #21]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f003 0306 	and.w	r3, r3, #6
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	3302      	adds	r3, #2
 80042b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80042b4:	7d3b      	ldrb	r3, [r7, #20]
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	7cbb      	ldrb	r3, [r7, #18]
 80042ca:	029b      	lsls	r3, r3, #10
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3301      	adds	r3, #1
 80042da:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80042dc:	8bfa      	ldrh	r2, [r7, #30]
 80042de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80042e2:	3b09      	subs	r3, #9
 80042e4:	409a      	lsls	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80042f0:	e056      	b.n	80043a0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004300:	e055      	b.n	80043ae <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004302:	f7ff fc15 	bl	8003b30 <SD_ReadyWait>
 8004306:	4603      	mov	r3, r0
 8004308:	2bff      	cmp	r3, #255	; 0xff
 800430a:	d14b      	bne.n	80043a4 <SD_disk_ioctl+0x234>
 800430c:	2300      	movs	r3, #0
 800430e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004312:	e047      	b.n	80043a4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004314:	2100      	movs	r1, #0
 8004316:	2049      	movs	r0, #73	; 0x49
 8004318:	f7ff fced 	bl	8003cf6 <SD_SendCmd>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d142      	bne.n	80043a8 <SD_disk_ioctl+0x238>
 8004322:	2110      	movs	r1, #16
 8004324:	6a38      	ldr	r0, [r7, #32]
 8004326:	f7ff fc75 	bl	8003c14 <SD_RxDataBlock>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d03b      	beq.n	80043a8 <SD_disk_ioctl+0x238>
 8004330:	2300      	movs	r3, #0
 8004332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004336:	e037      	b.n	80043a8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004338:	2100      	movs	r1, #0
 800433a:	204a      	movs	r0, #74	; 0x4a
 800433c:	f7ff fcdb 	bl	8003cf6 <SD_SendCmd>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d132      	bne.n	80043ac <SD_disk_ioctl+0x23c>
 8004346:	2110      	movs	r1, #16
 8004348:	6a38      	ldr	r0, [r7, #32]
 800434a:	f7ff fc63 	bl	8003c14 <SD_RxDataBlock>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02b      	beq.n	80043ac <SD_disk_ioctl+0x23c>
 8004354:	2300      	movs	r3, #0
 8004356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800435a:	e027      	b.n	80043ac <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800435c:	2100      	movs	r1, #0
 800435e:	207a      	movs	r0, #122	; 0x7a
 8004360:	f7ff fcc9 	bl	8003cf6 <SD_SendCmd>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d116      	bne.n	8004398 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800436a:	2300      	movs	r3, #0
 800436c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004370:	e00b      	b.n	800438a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8004372:	6a3c      	ldr	r4, [r7, #32]
 8004374:	1c63      	adds	r3, r4, #1
 8004376:	623b      	str	r3, [r7, #32]
 8004378:	f7ff fbb0 	bl	8003adc <SPI_RxByte>
 800437c:	4603      	mov	r3, r0
 800437e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004380:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004384:	3301      	adds	r3, #1
 8004386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800438a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800438e:	2b03      	cmp	r3, #3
 8004390:	d9ef      	bls.n	8004372 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8004398:	2304      	movs	r3, #4
 800439a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800439e:	e006      	b.n	80043ae <SD_disk_ioctl+0x23e>
			break;
 80043a0:	bf00      	nop
 80043a2:	e004      	b.n	80043ae <SD_disk_ioctl+0x23e>
			break;
 80043a4:	bf00      	nop
 80043a6:	e002      	b.n	80043ae <SD_disk_ioctl+0x23e>
			break;
 80043a8:	bf00      	nop
 80043aa:	e000      	b.n	80043ae <SD_disk_ioctl+0x23e>
			break;
 80043ac:	bf00      	nop
		}

		DESELECT();
 80043ae:	f7ff fb53 	bl	8003a58 <DESELECT>
		SPI_RxByte();
 80043b2:	f7ff fb93 	bl	8003adc <SPI_RxByte>
	}

	return res;
 80043b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	372c      	adds	r7, #44	; 0x2c
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd90      	pop	{r4, r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200000b0 	.word	0x200000b0

080043c8 <getKeyPressed>:
//{
//	sensorFlag = SET_SENSOR;
//}

unsigned char getKeyPressed()
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
	return key;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <getKeyPressed+0x14>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b2db      	uxtb	r3, r3
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	200006c4 	.word	0x200006c4

080043e0 <resetKeyPressed>:

unsigned char resetKeyPressed()
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
	key = IDDLE;
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <resetKeyPressed+0x18>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(250);
 80043ea:	20fa      	movs	r0, #250	; 0xfa
 80043ec:	f000 fffc 	bl	80053e8 <HAL_Delay>
}
 80043f0:	bf00      	nop
 80043f2:	4618      	mov	r0, r3
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	200006c4 	.word	0x200006c4

080043fc <getUARTInstance>:

unsigned char* getUARTInstance()
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
	return &huart2;
 8004400:	4b02      	ldr	r3, [pc, #8]	; (800440c <getUARTInstance+0x10>)
}
 8004402:	4618      	mov	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	2000063c 	.word	0x2000063c

08004410 <getTimer2Instance>:

unsigned char* getTimer2Instance()
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
	return &htim2;
 8004414:	4b02      	ldr	r3, [pc, #8]	; (8004420 <getTimer2Instance+0x10>)
}
 8004416:	4618      	mov	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	200005ac 	.word	0x200005ac

08004424 <getTimer3Instance>:

unsigned char* getTimer3Instance()
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
	return &htim3;
 8004428:	4b02      	ldr	r3, [pc, #8]	; (8004434 <getTimer3Instance+0x10>)
}
 800442a:	4618      	mov	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	200005f4 	.word	0x200005f4

08004438 <getTimer2Variable>:

unsigned char getTimer2Variable()
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
	return sensorFlag;
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <getTimer2Variable+0x14>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
}
 8004442:	4618      	mov	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	200000b1 	.word	0x200000b1

08004450 <getTimer3Variable>:

unsigned char getTimer3Variable()
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
	return timer3Data;
 8004454:	4b03      	ldr	r3, [pc, #12]	; (8004464 <getTimer3Variable+0x14>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	b2db      	uxtb	r3, r3
}
 800445a:	4618      	mov	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	200006c8 	.word	0x200006c8

08004468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800446e:	f000 ff59 	bl	8005324 <HAL_Init>
	  unsigned char menuSelect;
	  unsigned char menuDisplay;
	  unsigned char menuState;
  };

  struct Menu menuTesteMain = {IDDLE,IDDLE,IDDLE,IDDLE};
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
  struct Menu menuTesteSub = {IDDLE,IDDLE,IDDLE,IDDLE};
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]
  unsigned char displayUpdateStatus = IDDLE;
 800447a:	2300      	movs	r3, #0
 800447c:	71fb      	strb	r3, [r7, #7]
  unsigned char cursorPosition[2] = {0,0};
 800447e:	2300      	movs	r3, #0
 8004480:	80bb      	strh	r3, [r7, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004482:	f000 f9ad 	bl	80047e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004486:	f000 fb11 	bl	8004aac <MX_GPIO_Init>
  MX_DMA_Init();
 800448a:	f000 faf1 	bl	8004a70 <MX_DMA_Init>
  MX_TIM2_Init();
 800448e:	f000 fa23 	bl	80048d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004492:	f000 fa75 	bl	8004980 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8004496:	f000 fac1 	bl	8004a1c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800449a:	f004 f9e1 	bl	8008860 <MX_FATFS_Init>
  MX_SPI1_Init();
 800449e:	f000 f9e5 	bl	800486c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, 1);
 80044a2:	2201      	movs	r2, #1
 80044a4:	49c1      	ldr	r1, [pc, #772]	; (80047ac <main+0x344>)
 80044a6:	48c2      	ldr	r0, [pc, #776]	; (80047b0 <main+0x348>)
 80044a8:	f003 fc6b 	bl	8007d82 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80044ac:	4bc1      	ldr	r3, [pc, #772]	; (80047b4 <main+0x34c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4bc0      	ldr	r3, [pc, #768]	; (80047b4 <main+0x34c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0204 	bic.w	r2, r2, #4
 80044ba:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80044bc:	2201      	movs	r2, #1
 80044be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044c2:	48bd      	ldr	r0, [pc, #756]	; (80047b8 <main+0x350>)
 80044c4:	f001 fce4 	bl	8005e90 <HAL_GPIO_WritePin>
  homeDataDisplay(appNameMsg,companyNameMsg,appVersionMsg);
 80044c8:	4bbc      	ldr	r3, [pc, #752]	; (80047bc <main+0x354>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4abc      	ldr	r2, [pc, #752]	; (80047c0 <main+0x358>)
 80044ce:	6811      	ldr	r1, [r2, #0]
 80044d0:	4abc      	ldr	r2, [pc, #752]	; (80047c4 <main+0x35c>)
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe fcec 	bl	8002eb2 <homeDataDisplay>
  while(1)
  {
	  switch(menuTesteMain.menuState)
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	2b05      	cmp	r3, #5
 80044de:	d8fc      	bhi.n	80044da <main+0x72>
 80044e0:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <main+0x80>)
 80044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e6:	bf00      	nop
 80044e8:	08004501 	.word	0x08004501
 80044ec:	08004529 	.word	0x08004529
 80044f0:	080045a1 	.word	0x080045a1
 80044f4:	0800461f 	.word	0x0800461f
 80044f8:	0800469d 	.word	0x0800469d
 80044fc:	08004719 	.word	0x08004719
	  {
		  case IDDLE:
			  if(key == AVANCAR)
 8004500:	4bb1      	ldr	r3, [pc, #708]	; (80047c8 <main+0x360>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b41      	cmp	r3, #65	; 0x41
 8004508:	f040 8144 	bne.w	8004794 <main+0x32c>
			  {
				  resetKeyPressed();
 800450c:	f7ff ff68 	bl	80043e0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004510:	1d3a      	adds	r2, r7, #4
 8004512:	1dfb      	adds	r3, r7, #7
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd fd48 	bl	8001fac <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(START_TEST);
 800451c:	2001      	movs	r0, #1
 800451e:	f000 fc01 	bl	8004d24 <getNextMain>
 8004522:	4603      	mov	r3, r0
 8004524:	73fb      	strb	r3, [r7, #15]
			  }
		  break;
 8004526:	e135      	b.n	8004794 <main+0x32c>

		  case START_TEST:
			  updateUserMsg(0,0,startUserMsg,&displayUpdateStatus);
 8004528:	4ba8      	ldr	r3, [pc, #672]	; (80047cc <main+0x364>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	1dfb      	adds	r3, r7, #7
 800452e:	2100      	movs	r1, #0
 8004530:	2000      	movs	r0, #0
 8004532:	f7fd fd1d 	bl	8001f70 <updateUserMsg>
			  if(key == AVANCAR)
 8004536:	4ba4      	ldr	r3, [pc, #656]	; (80047c8 <main+0x360>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b41      	cmp	r3, #65	; 0x41
 800453e:	d10d      	bne.n	800455c <main+0xf4>
			  {
				  resetKeyPressed();
 8004540:	f7ff ff4e 	bl	80043e0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004544:	1d3a      	adds	r2, r7, #4
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f7fd fd2e 	bl	8001fac <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(CONSULT_DATA);
 8004550:	2002      	movs	r0, #2
 8004552:	f000 fbe7 	bl	8004d24 <getNextMain>
 8004556:	4603      	mov	r3, r0
 8004558:	73fb      	strb	r3, [r7, #15]
				  menuTesteMain.menuSelect = menuTesteMain.menuState;
				  initStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
			  }
		  break;
 800455a:	e11d      	b.n	8004798 <main+0x330>
			  else if(key == CONFIRMAR)
 800455c:	4b9a      	ldr	r3, [pc, #616]	; (80047c8 <main+0x360>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b43      	cmp	r3, #67	; 0x43
 8004564:	f040 8118 	bne.w	8004798 <main+0x330>
				  resetKeyPressed();
 8004568:	f7ff ff3a 	bl	80043e0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800456c:	1d3a      	adds	r2, r7, #4
 800456e:	1dfb      	adds	r3, r7, #7
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd fd1a 	bl	8001fac <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 8004578:	f107 030c 	add.w	r3, r7, #12
 800457c:	3303      	adds	r3, #3
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fbe2 	bl	8004d48 <setSelectMain>
 8004584:	4603      	mov	r3, r0
 8004586:	73fb      	strb	r3, [r7, #15]
				  menuTesteMain.menuSelect = menuTesteMain.menuState;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	737b      	strb	r3, [r7, #13]
				  initStateMachine(&menuTesteSub);
 800458c:	f107 0308 	add.w	r3, r7, #8
 8004590:	4618      	mov	r0, r3
 8004592:	f7fd ff5b 	bl	800244c <initStateMachine>
				  menuTesteSub.menuState = IDDLE;
 8004596:	2300      	movs	r3, #0
 8004598:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 800459a:	2300      	movs	r3, #0
 800459c:	727b      	strb	r3, [r7, #9]
		  break;
 800459e:	e0fb      	b.n	8004798 <main+0x330>

		  case CONSULT_DATA:
			  updateUserMsg(0,0,consultUserMsg,&displayUpdateStatus);
 80045a0:	4b8b      	ldr	r3, [pc, #556]	; (80047d0 <main+0x368>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	1dfb      	adds	r3, r7, #7
 80045a6:	2100      	movs	r1, #0
 80045a8:	2000      	movs	r0, #0
 80045aa:	f7fd fce1 	bl	8001f70 <updateUserMsg>
			  if(key == AVANCAR)
 80045ae:	4b86      	ldr	r3, [pc, #536]	; (80047c8 <main+0x360>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b41      	cmp	r3, #65	; 0x41
 80045b6:	d10d      	bne.n	80045d4 <main+0x16c>
			  {
				  resetKeyPressed();
 80045b8:	f7ff ff12 	bl	80043e0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80045bc:	1d3a      	adds	r2, r7, #4
 80045be:	1dfb      	adds	r3, r7, #7
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd fcf2 	bl	8001fac <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(CONFIG_SENSOR);
 80045c8:	2003      	movs	r0, #3
 80045ca:	f000 fbab 	bl	8004d24 <getNextMain>
 80045ce:	4603      	mov	r3, r0
 80045d0:	73fb      	strb	r3, [r7, #15]
				 consultStateMachine(&menuTesteSub);
				 menuTesteMain.menuState = getNextMain(START_TEST);
				 menuTesteSub.menuState = IDDLE;
				 menuTesteSub.menuSelect = IDDLE;
			  }
		  break;
 80045d2:	e0e3      	b.n	800479c <main+0x334>
			  else if(key == CONFIRMAR)
 80045d4:	4b7c      	ldr	r3, [pc, #496]	; (80047c8 <main+0x360>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b43      	cmp	r3, #67	; 0x43
 80045dc:	f040 80de 	bne.w	800479c <main+0x334>
				  resetKeyPressed();
 80045e0:	f7ff fefe 	bl	80043e0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80045e4:	1d3a      	adds	r2, r7, #4
 80045e6:	1dfb      	adds	r3, r7, #7
 80045e8:	4611      	mov	r1, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fd fcde 	bl	8001fac <readyUserInterface>
				 menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 80045f0:	f107 030c 	add.w	r3, r7, #12
 80045f4:	3303      	adds	r3, #3
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fba6 	bl	8004d48 <setSelectMain>
 80045fc:	4603      	mov	r3, r0
 80045fe:	73fb      	strb	r3, [r7, #15]
				 consultStateMachine(&menuTesteSub);
 8004600:	f107 0308 	add.w	r3, r7, #8
 8004604:	4618      	mov	r0, r3
 8004606:	f7fc fb25 	bl	8000c54 <consultStateMachine>
				 menuTesteMain.menuState = getNextMain(START_TEST);
 800460a:	2001      	movs	r0, #1
 800460c:	f000 fb8a 	bl	8004d24 <getNextMain>
 8004610:	4603      	mov	r3, r0
 8004612:	73fb      	strb	r3, [r7, #15]
				 menuTesteSub.menuState = IDDLE;
 8004614:	2300      	movs	r3, #0
 8004616:	72fb      	strb	r3, [r7, #11]
				 menuTesteSub.menuSelect = IDDLE;
 8004618:	2300      	movs	r3, #0
 800461a:	727b      	strb	r3, [r7, #9]
		  break;
 800461c:	e0be      	b.n	800479c <main+0x334>

		  case CONFIG_SENSOR:
			  updateUserMsg(0,0,configUserMsg,&displayUpdateStatus);
 800461e:	4b6d      	ldr	r3, [pc, #436]	; (80047d4 <main+0x36c>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	1dfb      	adds	r3, r7, #7
 8004624:	2100      	movs	r1, #0
 8004626:	2000      	movs	r0, #0
 8004628:	f7fd fca2 	bl	8001f70 <updateUserMsg>
			  if(key == AVANCAR)
 800462c:	4b66      	ldr	r3, [pc, #408]	; (80047c8 <main+0x360>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b41      	cmp	r3, #65	; 0x41
 8004634:	d10d      	bne.n	8004652 <main+0x1ea>
			  {
				  resetKeyPressed();
 8004636:	f7ff fed3 	bl	80043e0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800463a:	1d3a      	adds	r2, r7, #4
 800463c:	1dfb      	adds	r3, r7, #7
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f7fd fcb3 	bl	8001fac <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(EXPORT_DATA);
 8004646:	2004      	movs	r0, #4
 8004648:	f000 fb6c 	bl	8004d24 <getNextMain>
 800464c:	4603      	mov	r3, r0
 800464e:	73fb      	strb	r3, [r7, #15]
				  configStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 8004650:	e0a6      	b.n	80047a0 <main+0x338>
			  else if(key == CONFIRMAR)
 8004652:	4b5d      	ldr	r3, [pc, #372]	; (80047c8 <main+0x360>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b43      	cmp	r3, #67	; 0x43
 800465a:	f040 80a1 	bne.w	80047a0 <main+0x338>
				  resetKeyPressed();
 800465e:	f7ff febf 	bl	80043e0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004662:	1d3a      	adds	r2, r7, #4
 8004664:	1dfb      	adds	r3, r7, #7
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f7fd fc9f 	bl	8001fac <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 800466e:	f107 030c 	add.w	r3, r7, #12
 8004672:	3303      	adds	r3, #3
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fb67 	bl	8004d48 <setSelectMain>
 800467a:	4603      	mov	r3, r0
 800467c:	73fb      	strb	r3, [r7, #15]
				  configStateMachine(&menuTesteSub);
 800467e:	f107 0308 	add.w	r3, r7, #8
 8004682:	4618      	mov	r0, r3
 8004684:	f7fb fe0e 	bl	80002a4 <configStateMachine>
				  menuTesteSub.menuState = IDDLE;
 8004688:	2300      	movs	r3, #0
 800468a:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 800468c:	2300      	movs	r3, #0
 800468e:	727b      	strb	r3, [r7, #9]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8004690:	2001      	movs	r0, #1
 8004692:	f000 fb47 	bl	8004d24 <getNextMain>
 8004696:	4603      	mov	r3, r0
 8004698:	73fb      	strb	r3, [r7, #15]
		  break;
 800469a:	e081      	b.n	80047a0 <main+0x338>

		  case EXPORT_DATA:
			  updateUserMsg(0,0,exportUserMsg,&displayUpdateStatus);
 800469c:	4b4e      	ldr	r3, [pc, #312]	; (80047d8 <main+0x370>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	1dfb      	adds	r3, r7, #7
 80046a2:	2100      	movs	r1, #0
 80046a4:	2000      	movs	r0, #0
 80046a6:	f7fd fc63 	bl	8001f70 <updateUserMsg>
			  if(key == AVANCAR)
 80046aa:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <main+0x360>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b41      	cmp	r3, #65	; 0x41
 80046b2:	d10d      	bne.n	80046d0 <main+0x268>
			  {
				  resetKeyPressed();
 80046b4:	f7ff fe94 	bl	80043e0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80046b8:	1d3a      	adds	r2, r7, #4
 80046ba:	1dfb      	adds	r3, r7, #7
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fd fc74 	bl	8001fac <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(ERASE_DATA);
 80046c4:	2005      	movs	r0, #5
 80046c6:	f000 fb2d 	bl	8004d24 <getNextMain>
 80046ca:	4603      	mov	r3, r0
 80046cc:	73fb      	strb	r3, [r7, #15]
				  exportStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 80046ce:	e069      	b.n	80047a4 <main+0x33c>
			  else if(key == CONFIRMAR)
 80046d0:	4b3d      	ldr	r3, [pc, #244]	; (80047c8 <main+0x360>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b43      	cmp	r3, #67	; 0x43
 80046d8:	d164      	bne.n	80047a4 <main+0x33c>
				  resetKeyPressed();
 80046da:	f7ff fe81 	bl	80043e0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80046de:	1d3a      	adds	r2, r7, #4
 80046e0:	1dfb      	adds	r3, r7, #7
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fd fc61 	bl	8001fac <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 80046ea:	f107 030c 	add.w	r3, r7, #12
 80046ee:	3303      	adds	r3, #3
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fb29 	bl	8004d48 <setSelectMain>
 80046f6:	4603      	mov	r3, r0
 80046f8:	73fb      	strb	r3, [r7, #15]
				  exportStateMachine(&menuTesteSub);
 80046fa:	f107 0308 	add.w	r3, r7, #8
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fd fc86 	bl	8002010 <exportStateMachine>
				  menuTesteSub.menuState = IDDLE;
 8004704:	2300      	movs	r3, #0
 8004706:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 8004708:	2300      	movs	r3, #0
 800470a:	727b      	strb	r3, [r7, #9]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 800470c:	2001      	movs	r0, #1
 800470e:	f000 fb09 	bl	8004d24 <getNextMain>
 8004712:	4603      	mov	r3, r0
 8004714:	73fb      	strb	r3, [r7, #15]
		  break;
 8004716:	e045      	b.n	80047a4 <main+0x33c>

		  case ERASE_DATA:
			  updateUserMsg(0,0,eraseUserMsg,&displayUpdateStatus);
 8004718:	4b30      	ldr	r3, [pc, #192]	; (80047dc <main+0x374>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	1dfb      	adds	r3, r7, #7
 800471e:	2100      	movs	r1, #0
 8004720:	2000      	movs	r0, #0
 8004722:	f7fd fc25 	bl	8001f70 <updateUserMsg>
			  if(key == AVANCAR)
 8004726:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <main+0x360>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b41      	cmp	r3, #65	; 0x41
 800472e:	d10d      	bne.n	800474c <main+0x2e4>
			  {
				  resetKeyPressed();
 8004730:	f7ff fe56 	bl	80043e0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004734:	1d3a      	adds	r2, r7, #4
 8004736:	1dfb      	adds	r3, r7, #7
 8004738:	4611      	mov	r1, r2
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd fc36 	bl	8001fac <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8004740:	2001      	movs	r0, #1
 8004742:	f000 faef 	bl	8004d24 <getNextMain>
 8004746:	4603      	mov	r3, r0
 8004748:	73fb      	strb	r3, [r7, #15]
				  eraseStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 800474a:	e02d      	b.n	80047a8 <main+0x340>
			  else if(key == CONFIRMAR)
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <main+0x360>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b43      	cmp	r3, #67	; 0x43
 8004754:	d128      	bne.n	80047a8 <main+0x340>
				  resetKeyPressed();
 8004756:	f7ff fe43 	bl	80043e0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800475a:	1d3a      	adds	r2, r7, #4
 800475c:	1dfb      	adds	r3, r7, #7
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f7fd fc23 	bl	8001fac <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 8004766:	f107 030c 	add.w	r3, r7, #12
 800476a:	3303      	adds	r3, #3
 800476c:	4618      	mov	r0, r3
 800476e:	f000 faeb 	bl	8004d48 <setSelectMain>
 8004772:	4603      	mov	r3, r0
 8004774:	73fb      	strb	r3, [r7, #15]
				  eraseStateMachine(&menuTesteSub);
 8004776:	f107 0308 	add.w	r3, r7, #8
 800477a:	4618      	mov	r0, r3
 800477c:	f7fb fcf8 	bl	8000170 <eraseStateMachine>
				  menuTesteSub.menuState = IDDLE;
 8004780:	2300      	movs	r3, #0
 8004782:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 8004784:	2300      	movs	r3, #0
 8004786:	727b      	strb	r3, [r7, #9]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8004788:	2001      	movs	r0, #1
 800478a:	f000 facb 	bl	8004d24 <getNextMain>
 800478e:	4603      	mov	r3, r0
 8004790:	73fb      	strb	r3, [r7, #15]
		  break;
 8004792:	e009      	b.n	80047a8 <main+0x340>
		  break;
 8004794:	bf00      	nop
 8004796:	e6a0      	b.n	80044da <main+0x72>
		  break;
 8004798:	bf00      	nop
 800479a:	e69e      	b.n	80044da <main+0x72>
		  break;
 800479c:	bf00      	nop
 800479e:	e69c      	b.n	80044da <main+0x72>
		  break;
 80047a0:	bf00      	nop
 80047a2:	e69a      	b.n	80044da <main+0x72>
		  break;
 80047a4:	bf00      	nop
 80047a6:	e698      	b.n	80044da <main+0x72>
		  break;
 80047a8:	bf00      	nop
	  switch(menuTesteMain.menuState)
 80047aa:	e696      	b.n	80044da <main+0x72>
 80047ac:	200006d0 	.word	0x200006d0
 80047b0:	2000063c 	.word	0x2000063c
 80047b4:	20000680 	.word	0x20000680
 80047b8:	40011000 	.word	0x40011000
 80047bc:	2000000c 	.word	0x2000000c
 80047c0:	20000010 	.word	0x20000010
 80047c4:	20000014 	.word	0x20000014
 80047c8:	200006c4 	.word	0x200006c4
 80047cc:	20000018 	.word	0x20000018
 80047d0:	20000050 	.word	0x20000050
 80047d4:	20000060 	.word	0x20000060
 80047d8:	20000094 	.word	0x20000094
 80047dc:	200000a0 	.word	0x200000a0

080047e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b090      	sub	sp, #64	; 0x40
 80047e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047e6:	f107 0318 	add.w	r3, r7, #24
 80047ea:	2228      	movs	r2, #40	; 0x28
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f004 fbfe 	bl	8008ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047f4:	1d3b      	adds	r3, r7, #4
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	605a      	str	r2, [r3, #4]
 80047fc:	609a      	str	r2, [r3, #8]
 80047fe:	60da      	str	r2, [r3, #12]
 8004800:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004802:	2301      	movs	r3, #1
 8004804:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800480a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800480c:	2300      	movs	r3, #0
 800480e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004810:	2301      	movs	r3, #1
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004814:	2302      	movs	r3, #2
 8004816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800481c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800481e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004822:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004824:	f107 0318 	add.w	r3, r7, #24
 8004828:	4618      	mov	r0, r3
 800482a:	f001 fb61 	bl	8005ef0 <HAL_RCC_OscConfig>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004834:	f000 fa70 	bl	8004d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004838:	230f      	movs	r3, #15
 800483a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800483c:	2302      	movs	r3, #2
 800483e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	2102      	movs	r1, #2
 8004852:	4618      	mov	r0, r3
 8004854:	f001 fdce 	bl	80063f4 <HAL_RCC_ClockConfig>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800485e:	f000 fa5b 	bl	8004d18 <Error_Handler>
  }
}
 8004862:	bf00      	nop
 8004864:	3740      	adds	r7, #64	; 0x40
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004870:	4b17      	ldr	r3, [pc, #92]	; (80048d0 <MX_SPI1_Init+0x64>)
 8004872:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <MX_SPI1_Init+0x68>)
 8004874:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004876:	4b16      	ldr	r3, [pc, #88]	; (80048d0 <MX_SPI1_Init+0x64>)
 8004878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800487c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800487e:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <MX_SPI1_Init+0x64>)
 8004880:	2200      	movs	r2, #0
 8004882:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004884:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <MX_SPI1_Init+0x64>)
 8004886:	2200      	movs	r2, #0
 8004888:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800488a:	4b11      	ldr	r3, [pc, #68]	; (80048d0 <MX_SPI1_Init+0x64>)
 800488c:	2200      	movs	r2, #0
 800488e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004890:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <MX_SPI1_Init+0x64>)
 8004892:	2200      	movs	r2, #0
 8004894:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004896:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <MX_SPI1_Init+0x64>)
 8004898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800489c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <MX_SPI1_Init+0x64>)
 80048a0:	2208      	movs	r2, #8
 80048a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048a4:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <MX_SPI1_Init+0x64>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80048aa:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <MX_SPI1_Init+0x64>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048b0:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <MX_SPI1_Init+0x64>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <MX_SPI1_Init+0x64>)
 80048b8:	220a      	movs	r2, #10
 80048ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80048bc:	4804      	ldr	r0, [pc, #16]	; (80048d0 <MX_SPI1_Init+0x64>)
 80048be:	f001 ff31 	bl	8006724 <HAL_SPI_Init>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80048c8:	f000 fa26 	bl	8004d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80048cc:	bf00      	nop
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000554 	.word	0x20000554
 80048d4:	40013000 	.word	0x40013000

080048d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08c      	sub	sp, #48	; 0x30
 80048dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80048de:	f107 030c 	add.w	r3, r7, #12
 80048e2:	2224      	movs	r2, #36	; 0x24
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f004 fb82 	bl	8008ff0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048ec:	1d3b      	adds	r3, r7, #4
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80048f4:	4b21      	ldr	r3, [pc, #132]	; (800497c <MX_TIM2_Init+0xa4>)
 80048f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80048fc:	4b1f      	ldr	r3, [pc, #124]	; (800497c <MX_TIM2_Init+0xa4>)
 80048fe:	2200      	movs	r2, #0
 8004900:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004902:	4b1e      	ldr	r3, [pc, #120]	; (800497c <MX_TIM2_Init+0xa4>)
 8004904:	2200      	movs	r2, #0
 8004906:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004908:	4b1c      	ldr	r3, [pc, #112]	; (800497c <MX_TIM2_Init+0xa4>)
 800490a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800490e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004910:	4b1a      	ldr	r3, [pc, #104]	; (800497c <MX_TIM2_Init+0xa4>)
 8004912:	2200      	movs	r2, #0
 8004914:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004916:	4b19      	ldr	r3, [pc, #100]	; (800497c <MX_TIM2_Init+0xa4>)
 8004918:	2200      	movs	r2, #0
 800491a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800491c:	2303      	movs	r3, #3
 800491e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004920:	2302      	movs	r3, #2
 8004922:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004924:	2301      	movs	r3, #1
 8004926:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004928:	2300      	movs	r3, #0
 800492a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800492c:	230f      	movs	r3, #15
 800492e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004930:	2300      	movs	r3, #0
 8004932:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004934:	2301      	movs	r3, #1
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004938:	2300      	movs	r3, #0
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800493c:	230f      	movs	r3, #15
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004940:	f107 030c 	add.w	r3, r7, #12
 8004944:	4619      	mov	r1, r3
 8004946:	480d      	ldr	r0, [pc, #52]	; (800497c <MX_TIM2_Init+0xa4>)
 8004948:	f002 fbc4 	bl	80070d4 <HAL_TIM_Encoder_Init>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004952:	f000 f9e1 	bl	8004d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004956:	2300      	movs	r3, #0
 8004958:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800495a:	2300      	movs	r3, #0
 800495c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	4619      	mov	r1, r3
 8004962:	4806      	ldr	r0, [pc, #24]	; (800497c <MX_TIM2_Init+0xa4>)
 8004964:	f003 f8be 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800496e:	f000 f9d3 	bl	8004d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004972:	bf00      	nop
 8004974:	3730      	adds	r7, #48	; 0x30
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	200005ac 	.word	0x200005ac

08004980 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004986:	f107 0308 	add.w	r3, r7, #8
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	605a      	str	r2, [r3, #4]
 8004990:	609a      	str	r2, [r3, #8]
 8004992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004994:	463b      	mov	r3, r7
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800499c:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <MX_TIM3_Init+0x94>)
 800499e:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <MX_TIM3_Init+0x98>)
 80049a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <MX_TIM3_Init+0x94>)
 80049a4:	2247      	movs	r2, #71	; 0x47
 80049a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049a8:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <MX_TIM3_Init+0x94>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80049ae:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <MX_TIM3_Init+0x94>)
 80049b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049b6:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <MX_TIM3_Init+0x94>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049bc:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <MX_TIM3_Init+0x94>)
 80049be:	2200      	movs	r2, #0
 80049c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80049c2:	4814      	ldr	r0, [pc, #80]	; (8004a14 <MX_TIM3_Init+0x94>)
 80049c4:	f002 fab6 	bl	8006f34 <HAL_TIM_Base_Init>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80049ce:	f000 f9a3 	bl	8004d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80049d8:	f107 0308 	add.w	r3, r7, #8
 80049dc:	4619      	mov	r1, r3
 80049de:	480d      	ldr	r0, [pc, #52]	; (8004a14 <MX_TIM3_Init+0x94>)
 80049e0:	f002 fe85 	bl	80076ee <HAL_TIM_ConfigClockSource>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80049ea:	f000 f995 	bl	8004d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049ee:	2300      	movs	r3, #0
 80049f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80049f6:	463b      	mov	r3, r7
 80049f8:	4619      	mov	r1, r3
 80049fa:	4806      	ldr	r0, [pc, #24]	; (8004a14 <MX_TIM3_Init+0x94>)
 80049fc:	f003 f872 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004a06:	f000 f987 	bl	8004d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	200005f4 	.word	0x200005f4
 8004a18:	40000400 	.word	0x40000400

08004a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a20:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <MX_USART2_UART_Init+0x4c>)
 8004a22:	4a12      	ldr	r2, [pc, #72]	; (8004a6c <MX_USART2_UART_Init+0x50>)
 8004a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a26:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <MX_USART2_UART_Init+0x4c>)
 8004a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <MX_USART2_UART_Init+0x4c>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <MX_USART2_UART_Init+0x4c>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <MX_USART2_UART_Init+0x4c>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a40:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <MX_USART2_UART_Init+0x4c>)
 8004a42:	220c      	movs	r2, #12
 8004a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a46:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <MX_USART2_UART_Init+0x4c>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <MX_USART2_UART_Init+0x4c>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a52:	4805      	ldr	r0, [pc, #20]	; (8004a68 <MX_USART2_UART_Init+0x4c>)
 8004a54:	f003 f8b6 	bl	8007bc4 <HAL_UART_Init>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004a5e:	f000 f95b 	bl	8004d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2000063c 	.word	0x2000063c
 8004a6c:	40004400 	.word	0x40004400

08004a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004a76:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <MX_DMA_Init+0x38>)
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	4a0b      	ldr	r2, [pc, #44]	; (8004aa8 <MX_DMA_Init+0x38>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	6153      	str	r3, [r2, #20]
 8004a82:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <MX_DMA_Init+0x38>)
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	607b      	str	r3, [r7, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2100      	movs	r1, #0
 8004a92:	2010      	movs	r0, #16
 8004a94:	f000 fda3 	bl	80055de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004a98:	2010      	movs	r0, #16
 8004a9a:	f000 fdbc 	bl	8005616 <HAL_NVIC_EnableIRQ>

}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40021000 	.word	0x40021000

08004aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab2:	f107 0310 	add.w	r3, r7, #16
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	605a      	str	r2, [r3, #4]
 8004abc:	609a      	str	r2, [r3, #8]
 8004abe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ac0:	4b47      	ldr	r3, [pc, #284]	; (8004be0 <MX_GPIO_Init+0x134>)
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	4a46      	ldr	r2, [pc, #280]	; (8004be0 <MX_GPIO_Init+0x134>)
 8004ac6:	f043 0310 	orr.w	r3, r3, #16
 8004aca:	6193      	str	r3, [r2, #24]
 8004acc:	4b44      	ldr	r3, [pc, #272]	; (8004be0 <MX_GPIO_Init+0x134>)
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ad8:	4b41      	ldr	r3, [pc, #260]	; (8004be0 <MX_GPIO_Init+0x134>)
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	4a40      	ldr	r2, [pc, #256]	; (8004be0 <MX_GPIO_Init+0x134>)
 8004ade:	f043 0320 	orr.w	r3, r3, #32
 8004ae2:	6193      	str	r3, [r2, #24]
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <MX_GPIO_Init+0x134>)
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af0:	4b3b      	ldr	r3, [pc, #236]	; (8004be0 <MX_GPIO_Init+0x134>)
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	4a3a      	ldr	r2, [pc, #232]	; (8004be0 <MX_GPIO_Init+0x134>)
 8004af6:	f043 0304 	orr.w	r3, r3, #4
 8004afa:	6193      	str	r3, [r2, #24]
 8004afc:	4b38      	ldr	r3, [pc, #224]	; (8004be0 <MX_GPIO_Init+0x134>)
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b08:	4b35      	ldr	r3, [pc, #212]	; (8004be0 <MX_GPIO_Init+0x134>)
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	4a34      	ldr	r2, [pc, #208]	; (8004be0 <MX_GPIO_Init+0x134>)
 8004b0e:	f043 0308 	orr.w	r3, r3, #8
 8004b12:	6193      	str	r3, [r2, #24]
 8004b14:	4b32      	ldr	r3, [pc, #200]	; (8004be0 <MX_GPIO_Init+0x134>)
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004b20:	2200      	movs	r2, #0
 8004b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b26:	482f      	ldr	r0, [pc, #188]	; (8004be4 <MX_GPIO_Init+0x138>)
 8004b28:	f001 f9b2 	bl	8005e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f649 7110 	movw	r1, #40720	; 0x9f10
 8004b32:	482d      	ldr	r0, [pc, #180]	; (8004be8 <MX_GPIO_Init+0x13c>)
 8004b34:	f001 f9ac 	bl	8005e90 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f24f 2108 	movw	r1, #61960	; 0xf208
 8004b3e:	482b      	ldr	r0, [pc, #172]	; (8004bec <MX_GPIO_Init+0x140>)
 8004b40:	f001 f9a6 	bl	8005e90 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b52:	2302      	movs	r3, #2
 8004b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004b56:	f107 0310 	add.w	r3, r7, #16
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4821      	ldr	r0, [pc, #132]	; (8004be4 <MX_GPIO_Init+0x138>)
 8004b5e:	f001 f813 	bl	8005b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LCD_D3_Pin LCD_D2_Pin LCD_D1_Pin
                           LCD_D0_Pin LCD_EN_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8004b62:	f649 7310 	movw	r3, #40720	; 0x9f10
 8004b66:	613b      	str	r3, [r7, #16]
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b70:	2302      	movs	r3, #2
 8004b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b74:	f107 0310 	add.w	r3, r7, #16
 8004b78:	4619      	mov	r1, r3
 8004b7a:	481b      	ldr	r0, [pc, #108]	; (8004be8 <MX_GPIO_Init+0x13c>)
 8004b7c:	f001 f804 	bl	8005b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_RS_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8004b80:	f24f 2308 	movw	r3, #61960	; 0xf208
 8004b84:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b86:	2301      	movs	r3, #1
 8004b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8e:	2302      	movs	r3, #2
 8004b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b92:	f107 0310 	add.w	r3, r7, #16
 8004b96:	4619      	mov	r1, r3
 8004b98:	4814      	ldr	r0, [pc, #80]	; (8004bec <MX_GPIO_Init+0x140>)
 8004b9a:	f000 fff5 	bl	8005b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_MENU_Pin BT_AVANCA_Pin BT_SELECT_Pin BT_STOP_Pin
                           BT_INSERT_Pin */
  GPIO_InitStruct.Pin = BT_MENU_Pin|BT_AVANCA_Pin|BT_SELECT_Pin|BT_STOP_Pin
 8004b9e:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8004ba2:	613b      	str	r3, [r7, #16]
                          |BT_INSERT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <MX_GPIO_Init+0x144>)
 8004ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bac:	f107 0310 	add.w	r3, r7, #16
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	480e      	ldr	r0, [pc, #56]	; (8004bec <MX_GPIO_Init+0x140>)
 8004bb4:	f000 ffe8 	bl	8005b88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2100      	movs	r1, #0
 8004bbc:	200a      	movs	r0, #10
 8004bbe:	f000 fd0e 	bl	80055de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004bc2:	200a      	movs	r0, #10
 8004bc4:	f000 fd27 	bl	8005616 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2100      	movs	r1, #0
 8004bcc:	2017      	movs	r0, #23
 8004bce:	f000 fd06 	bl	80055de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004bd2:	2017      	movs	r0, #23
 8004bd4:	f000 fd1f 	bl	8005616 <HAL_NVIC_EnableIRQ>

}
 8004bd8:	bf00      	nop
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40011000 	.word	0x40011000
 8004be8:	40010800 	.word	0x40010800
 8004bec:	40010c00 	.word	0x40010c00
 8004bf0:	10210000 	.word	0x10210000

08004bf4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	timer3Count+=1;  //1ms
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004c04:	6013      	str	r3, [r2, #0]
	if(timer3Count == 1000)
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c0e:	d107      	bne.n	8004c20 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		timer3Data += 1;
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3301      	adds	r3, #1
 8004c16:	4a06      	ldr	r2, [pc, #24]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004c18:	6013      	str	r3, [r2, #0]
		timer3Count = 0;
 8004c1a:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

	}

}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	200006cc 	.word	0x200006cc
 8004c30:	200006c8 	.word	0x200006c8

08004c34 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	807b      	strh	r3, [r7, #2]

	uartBuffer[0]+=1;
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <HAL_UARTEx_RxEventCallback+0x3c>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	3301      	adds	r3, #1
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <HAL_UARTEx_RxEventCallback+0x3c>)
 8004c4c:	701a      	strb	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 8004c4e:	2205      	movs	r2, #5
 8004c50:	4907      	ldr	r1, [pc, #28]	; (8004c70 <HAL_UARTEx_RxEventCallback+0x3c>)
 8004c52:	4808      	ldr	r0, [pc, #32]	; (8004c74 <HAL_UARTEx_RxEventCallback+0x40>)
 8004c54:	f003 f895 	bl	8007d82 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8004c58:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <HAL_UARTEx_RxEventCallback+0x44>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_UARTEx_RxEventCallback+0x44>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0204 	bic.w	r2, r2, #4
 8004c66:	601a      	str	r2, [r3, #0]

}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	200006d0 	.word	0x200006d0
 8004c74:	2000063c 	.word	0x2000063c
 8004c78:	20000680 	.word	0x20000680

08004c7c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	if(htim->Channel == 2) sensorFlag = 1;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	7f1b      	ldrb	r3, [r3, #28]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d103      	bne.n	8004c94 <HAL_TIM_IC_CaptureCallback+0x18>
 8004c8c:	4b07      	ldr	r3, [pc, #28]	; (8004cac <HAL_TIM_IC_CaptureCallback+0x30>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
//	arraySample[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].sampleNum;
//	arrayAltDistance[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].ucAltDistance;
//	arrayVooTime[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].uiVooTime;
//	arrayReadingTime[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].ulReadingTime;
//	sampleCount++;
}
 8004c92:	e006      	b.n	8004ca2 <HAL_TIM_IC_CaptureCallback+0x26>
	else if(htim->Channel == 1) sensorFlag = 0;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	7f1b      	ldrb	r3, [r3, #28]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d102      	bne.n	8004ca2 <HAL_TIM_IC_CaptureCallback+0x26>
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <HAL_TIM_IC_CaptureCallback+0x30>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	701a      	strb	r2, [r3, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr
 8004cac:	200000b1 	.word	0x200000b1

08004cb0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc0:	d012      	beq.n	8004ce8 <HAL_GPIO_EXTI_Callback+0x38>
 8004cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc6:	dc1f      	bgt.n	8004d08 <HAL_GPIO_EXTI_Callback+0x58>
 8004cc8:	2b80      	cmp	r3, #128	; 0x80
 8004cca:	d019      	beq.n	8004d00 <HAL_GPIO_EXTI_Callback+0x50>
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	dc1b      	bgt.n	8004d08 <HAL_GPIO_EXTI_Callback+0x58>
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	d011      	beq.n	8004cf8 <HAL_GPIO_EXTI_Callback+0x48>
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	dc17      	bgt.n	8004d08 <HAL_GPIO_EXTI_Callback+0x58>
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d009      	beq.n	8004cf0 <HAL_GPIO_EXTI_Callback+0x40>
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d113      	bne.n	8004d08 <HAL_GPIO_EXTI_Callback+0x58>
	{
		case BT_AVANCA_Pin:
			key = AVANCAR;
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <HAL_GPIO_EXTI_Callback+0x64>)
 8004ce2:	2241      	movs	r2, #65	; 0x41
 8004ce4:	701a      	strb	r2, [r3, #0]
		break;
 8004ce6:	e00f      	b.n	8004d08 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_INSERT_Pin:
			key = INSERIR;
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <HAL_GPIO_EXTI_Callback+0x64>)
 8004cea:	2249      	movs	r2, #73	; 0x49
 8004cec:	701a      	strb	r2, [r3, #0]
		break;
 8004cee:	e00b      	b.n	8004d08 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_MENU_Pin:
			key = MENU;
 8004cf0:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <HAL_GPIO_EXTI_Callback+0x64>)
 8004cf2:	224d      	movs	r2, #77	; 0x4d
 8004cf4:	701a      	strb	r2, [r3, #0]
		break;
 8004cf6:	e007      	b.n	8004d08 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_SELECT_Pin:
			key = CONFIRMAR;
 8004cf8:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <HAL_GPIO_EXTI_Callback+0x64>)
 8004cfa:	2243      	movs	r2, #67	; 0x43
 8004cfc:	701a      	strb	r2, [r3, #0]
		break;
 8004cfe:	e003      	b.n	8004d08 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_STOP_Pin:
			key = PARAR;
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <HAL_GPIO_EXTI_Callback+0x64>)
 8004d02:	2250      	movs	r2, #80	; 0x50
 8004d04:	701a      	strb	r2, [r3, #0]
		break;
 8004d06:	bf00      	nop
	}

}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	200006c4 	.word	0x200006c4

08004d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d1c:	b672      	cpsid	i
}
 8004d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d20:	e7fe      	b.n	8004d20 <Error_Handler+0x8>
	...

08004d24 <getNextMain>:

struct Menu menuMain ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextMain(unsigned char nextState)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71fb      	strb	r3, [r7, #7]

    menuMain.menuNext = nextState;
 8004d2e:	4a05      	ldr	r2, [pc, #20]	; (8004d44 <getNextMain+0x20>)
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	7013      	strb	r3, [r2, #0]
    return menuMain.menuNext;
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <getNextMain+0x20>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	200006d8 	.word	0x200006d8

08004d48 <setSelectMain>:

unsigned char setSelectMain(unsigned char *selectedState)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
    unsigned char state = *selectedState;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	73fb      	strb	r3, [r7, #15]
    menuMain.menuSelect = state;
 8004d56:	4a05      	ldr	r2, [pc, #20]	; (8004d6c <setSelectMain+0x24>)
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	7053      	strb	r3, [r2, #1]
    return menuMain.menuSelect;
 8004d5c:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <setSelectMain+0x24>)
 8004d5e:	785b      	ldrb	r3, [r3, #1]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	200006d8 	.word	0x200006d8

08004d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004d76:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <HAL_MspInit+0x5c>)
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	4a14      	ldr	r2, [pc, #80]	; (8004dcc <HAL_MspInit+0x5c>)
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	6193      	str	r3, [r2, #24]
 8004d82:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <HAL_MspInit+0x5c>)
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <HAL_MspInit+0x5c>)
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	4a0e      	ldr	r2, [pc, #56]	; (8004dcc <HAL_MspInit+0x5c>)
 8004d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d98:	61d3      	str	r3, [r2, #28]
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <HAL_MspInit+0x5c>)
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <HAL_MspInit+0x60>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	4a04      	ldr	r2, [pc, #16]	; (8004dd0 <HAL_MspInit+0x60>)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40010000 	.word	0x40010000

08004dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ddc:	f107 0310 	add.w	r3, r7, #16
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	605a      	str	r2, [r3, #4]
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1b      	ldr	r2, [pc, #108]	; (8004e5c <HAL_SPI_MspInit+0x88>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d12f      	bne.n	8004e54 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004df4:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <HAL_SPI_MspInit+0x8c>)
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <HAL_SPI_MspInit+0x8c>)
 8004dfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dfe:	6193      	str	r3, [r2, #24]
 8004e00:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <HAL_SPI_MspInit+0x8c>)
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <HAL_SPI_MspInit+0x8c>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <HAL_SPI_MspInit+0x8c>)
 8004e12:	f043 0304 	orr.w	r3, r3, #4
 8004e16:	6193      	str	r3, [r2, #24]
 8004e18:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <HAL_SPI_MspInit+0x8c>)
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004e24:	23a0      	movs	r3, #160	; 0xa0
 8004e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e30:	f107 0310 	add.w	r3, r7, #16
 8004e34:	4619      	mov	r1, r3
 8004e36:	480b      	ldr	r0, [pc, #44]	; (8004e64 <HAL_SPI_MspInit+0x90>)
 8004e38:	f000 fea6 	bl	8005b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004e3c:	2340      	movs	r3, #64	; 0x40
 8004e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e48:	f107 0310 	add.w	r3, r7, #16
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4805      	ldr	r0, [pc, #20]	; (8004e64 <HAL_SPI_MspInit+0x90>)
 8004e50:	f000 fe9a 	bl	8005b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004e54:	bf00      	nop
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40013000 	.word	0x40013000
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40010800 	.word	0x40010800

08004e68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e70:	f107 0310 	add.w	r3, r7, #16
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	605a      	str	r2, [r3, #4]
 8004e7a:	609a      	str	r2, [r3, #8]
 8004e7c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e86:	d12b      	bne.n	8004ee0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e88:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	4a16      	ldr	r2, [pc, #88]	; (8004ee8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	61d3      	str	r3, [r2, #28]
 8004e94:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	4a10      	ldr	r2, [pc, #64]	; (8004ee8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004ea6:	f043 0304 	orr.w	r3, r3, #4
 8004eaa:	6193      	str	r3, [r2, #24]
 8004eac:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec4:	f107 0310 	add.w	r3, r7, #16
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4808      	ldr	r0, [pc, #32]	; (8004eec <HAL_TIM_Encoder_MspInit+0x84>)
 8004ecc:	f000 fe5c 	bl	8005b88 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	201c      	movs	r0, #28
 8004ed6:	f000 fb82 	bl	80055de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004eda:	201c      	movs	r0, #28
 8004edc:	f000 fb9b 	bl	8005616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004ee0:	bf00      	nop
 8004ee2:	3720      	adds	r7, #32
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40010800 	.word	0x40010800

08004ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a0d      	ldr	r2, [pc, #52]	; (8004f34 <HAL_TIM_Base_MspInit+0x44>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d113      	bne.n	8004f2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f02:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <HAL_TIM_Base_MspInit+0x48>)
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <HAL_TIM_Base_MspInit+0x48>)
 8004f08:	f043 0302 	orr.w	r3, r3, #2
 8004f0c:	61d3      	str	r3, [r2, #28]
 8004f0e:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <HAL_TIM_Base_MspInit+0x48>)
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	201d      	movs	r0, #29
 8004f20:	f000 fb5d 	bl	80055de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f24:	201d      	movs	r0, #29
 8004f26:	f000 fb76 	bl	8005616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004f2a:	bf00      	nop
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40021000 	.word	0x40021000

08004f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f44:	f107 0310 	add.w	r3, r7, #16
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a32      	ldr	r2, [pc, #200]	; (8005020 <HAL_UART_MspInit+0xe4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d15d      	bne.n	8005018 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f5c:	4b31      	ldr	r3, [pc, #196]	; (8005024 <HAL_UART_MspInit+0xe8>)
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	4a30      	ldr	r2, [pc, #192]	; (8005024 <HAL_UART_MspInit+0xe8>)
 8004f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f66:	61d3      	str	r3, [r2, #28]
 8004f68:	4b2e      	ldr	r3, [pc, #184]	; (8005024 <HAL_UART_MspInit+0xe8>)
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f74:	4b2b      	ldr	r3, [pc, #172]	; (8005024 <HAL_UART_MspInit+0xe8>)
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	4a2a      	ldr	r2, [pc, #168]	; (8005024 <HAL_UART_MspInit+0xe8>)
 8004f7a:	f043 0304 	orr.w	r3, r3, #4
 8004f7e:	6193      	str	r3, [r2, #24]
 8004f80:	4b28      	ldr	r3, [pc, #160]	; (8005024 <HAL_UART_MspInit+0xe8>)
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f90:	2302      	movs	r3, #2
 8004f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f94:	2303      	movs	r3, #3
 8004f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f98:	f107 0310 	add.w	r3, r7, #16
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4822      	ldr	r0, [pc, #136]	; (8005028 <HAL_UART_MspInit+0xec>)
 8004fa0:	f000 fdf2 	bl	8005b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fb0:	f107 0310 	add.w	r3, r7, #16
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	481c      	ldr	r0, [pc, #112]	; (8005028 <HAL_UART_MspInit+0xec>)
 8004fb8:	f000 fde6 	bl	8005b88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	; (800502c <HAL_UART_MspInit+0xf0>)
 8004fbe:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <HAL_UART_MspInit+0xf4>)
 8004fc0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	; (800502c <HAL_UART_MspInit+0xf0>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fc8:	4b18      	ldr	r3, [pc, #96]	; (800502c <HAL_UART_MspInit+0xf0>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fce:	4b17      	ldr	r3, [pc, #92]	; (800502c <HAL_UART_MspInit+0xf0>)
 8004fd0:	2280      	movs	r2, #128	; 0x80
 8004fd2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fd4:	4b15      	ldr	r3, [pc, #84]	; (800502c <HAL_UART_MspInit+0xf0>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <HAL_UART_MspInit+0xf0>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004fe0:	4b12      	ldr	r3, [pc, #72]	; (800502c <HAL_UART_MspInit+0xf0>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004fe6:	4b11      	ldr	r3, [pc, #68]	; (800502c <HAL_UART_MspInit+0xf0>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004fec:	480f      	ldr	r0, [pc, #60]	; (800502c <HAL_UART_MspInit+0xf0>)
 8004fee:	f000 fb2d 	bl	800564c <HAL_DMA_Init>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8004ff8:	f7ff fe8e 	bl	8004d18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a0b      	ldr	r2, [pc, #44]	; (800502c <HAL_UART_MspInit+0xf0>)
 8005000:	639a      	str	r2, [r3, #56]	; 0x38
 8005002:	4a0a      	ldr	r2, [pc, #40]	; (800502c <HAL_UART_MspInit+0xf0>)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005008:	2200      	movs	r2, #0
 800500a:	2100      	movs	r1, #0
 800500c:	2026      	movs	r0, #38	; 0x26
 800500e:	f000 fae6 	bl	80055de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005012:	2026      	movs	r0, #38	; 0x26
 8005014:	f000 faff 	bl	8005616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005018:	bf00      	nop
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40004400 	.word	0x40004400
 8005024:	40021000 	.word	0x40021000
 8005028:	40010800 	.word	0x40010800
 800502c:	20000680 	.word	0x20000680
 8005030:	4002006c 	.word	0x4002006c

08005034 <SDTimerHandler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1,Timer2;

void SDTimerHandler(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
	if(Timer1>0)
 8005038:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <SDTimerHandler+0x3c>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d006      	beq.n	8005050 <SDTimerHandler+0x1c>
		Timer1--;
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <SDTimerHandler+0x3c>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b2da      	uxtb	r2, r3
 800504c:	4b08      	ldr	r3, [pc, #32]	; (8005070 <SDTimerHandler+0x3c>)
 800504e:	701a      	strb	r2, [r3, #0]

	if(Timer2>0)
 8005050:	4b08      	ldr	r3, [pc, #32]	; (8005074 <SDTimerHandler+0x40>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d006      	beq.n	8005068 <SDTimerHandler+0x34>
		Timer2--;
 800505a:	4b06      	ldr	r3, [pc, #24]	; (8005074 <SDTimerHandler+0x40>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b2da      	uxtb	r2, r3
 8005064:	4b03      	ldr	r3, [pc, #12]	; (8005074 <SDTimerHandler+0x40>)
 8005066:	701a      	strb	r2, [r3, #0]
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr
 8005070:	200006dd 	.word	0x200006dd
 8005074:	200006de 	.word	0x200006de

08005078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800507c:	e7fe      	b.n	800507c <NMI_Handler+0x4>

0800507e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800507e:	b480      	push	{r7}
 8005080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005082:	e7fe      	b.n	8005082 <HardFault_Handler+0x4>

08005084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005088:	e7fe      	b.n	8005088 <MemManage_Handler+0x4>

0800508a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800508a:	b480      	push	{r7}
 800508c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800508e:	e7fe      	b.n	800508e <BusFault_Handler+0x4>

08005090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005094:	e7fe      	b.n	8005094 <UsageFault_Handler+0x4>

08005096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005096:	b480      	push	{r7}
 8005098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800509a:	bf00      	nop
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050a2:	b480      	push	{r7}
 80050a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050a6:	bf00      	nop
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr

080050ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050ae:	b480      	push	{r7}
 80050b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050b2:	bf00      	nop
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bc80      	pop	{r7}
 80050b8:	4770      	bx	lr
	...

080050bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <SysTick_Handler+0x30>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	3301      	adds	r3, #1
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	4b08      	ldr	r3, [pc, #32]	; (80050ec <SysTick_Handler+0x30>)
 80050cc:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt >=10)
 80050ce:	4b07      	ldr	r3, [pc, #28]	; (80050ec <SysTick_Handler+0x30>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b09      	cmp	r3, #9
 80050d6:	d904      	bls.n	80050e2 <SysTick_Handler+0x26>
		{
			FatFsCnt = 0;
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <SysTick_Handler+0x30>)
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
			SDTimerHandler();
 80050de:	f7ff ffa9 	bl	8005034 <SDTimerHandler>
		}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050e2:	f000 f965 	bl	80053b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050e6:	bf00      	nop
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	200006dc 	.word	0x200006dc

080050f0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_MENU_Pin);
 80050f4:	2010      	movs	r0, #16
 80050f6:	f000 fee3 	bl	8005ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005104:	4802      	ldr	r0, [pc, #8]	; (8005110 <DMA1_Channel6_IRQHandler+0x10>)
 8005106:	f000 fc0b 	bl	8005920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800510a:	bf00      	nop
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000680 	.word	0x20000680

08005114 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_AVANCA_Pin);
 8005118:	2020      	movs	r0, #32
 800511a:	f000 fed1 	bl	8005ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_SELECT_Pin);
 800511e:	2040      	movs	r0, #64	; 0x40
 8005120:	f000 fece 	bl	8005ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_STOP_Pin);
 8005124:	2080      	movs	r0, #128	; 0x80
 8005126:	f000 fecb 	bl	8005ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_INSERT_Pin);
 800512a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800512e:	f000 fec7 	bl	8005ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005132:	bf00      	nop
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800513c:	4802      	ldr	r0, [pc, #8]	; (8005148 <TIM2_IRQHandler+0x10>)
 800513e:	f002 f9ce 	bl	80074de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200005ac 	.word	0x200005ac

0800514c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005150:	4802      	ldr	r0, [pc, #8]	; (800515c <TIM3_IRQHandler+0x10>)
 8005152:	f002 f9c4 	bl	80074de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005156:	bf00      	nop
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	200005f4 	.word	0x200005f4

08005160 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005164:	4802      	ldr	r0, [pc, #8]	; (8005170 <USART2_IRQHandler+0x10>)
 8005166:	f002 fe5b 	bl	8007e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	2000063c 	.word	0x2000063c

08005174 <_read>:
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	e00a      	b.n	800519c <_read+0x28>
 8005186:	f3af 8000 	nop.w
 800518a:	4601      	mov	r1, r0
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	60ba      	str	r2, [r7, #8]
 8005192:	b2ca      	uxtb	r2, r1
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	3301      	adds	r3, #1
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	dbf0      	blt.n	8005186 <_read+0x12>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <_write>:
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b086      	sub	sp, #24
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	e009      	b.n	80051d4 <_write+0x26>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	60ba      	str	r2, [r7, #8]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f3af 8000 	nop.w
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	3301      	adds	r3, #1
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	dbf1      	blt.n	80051c0 <_write+0x12>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <_close>:
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	f04f 33ff 	mov.w	r3, #4294967295
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr

080051fc <_fstat>:
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	2300      	movs	r3, #0
 8005210:	4618      	mov	r0, r3
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <_isatty>:
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	2301      	movs	r3, #1
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr

0800522e <_lseek>:
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	2300      	movs	r3, #0
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr

08005246 <_open>:
 8005246:	b40e      	push	{r1, r2, r3}
 8005248:	b480      	push	{r7}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	f04f 33ff 	mov.w	r3, #4294967295
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	b003      	add	sp, #12
 800525e:	4770      	bx	lr

08005260 <_sbrk>:
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	4a14      	ldr	r2, [pc, #80]	; (80052bc <_sbrk+0x5c>)
 800526a:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <_sbrk+0x60>)
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	4b13      	ldr	r3, [pc, #76]	; (80052c4 <_sbrk+0x64>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d102      	bne.n	8005282 <_sbrk+0x22>
 800527c:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <_sbrk+0x64>)
 800527e:	4a12      	ldr	r2, [pc, #72]	; (80052c8 <_sbrk+0x68>)
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <_sbrk+0x64>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4413      	add	r3, r2
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	429a      	cmp	r2, r3
 800528e:	d207      	bcs.n	80052a0 <_sbrk+0x40>
 8005290:	f003 fbac 	bl	80089ec <__errno>
 8005294:	4603      	mov	r3, r0
 8005296:	220c      	movs	r2, #12
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	f04f 33ff 	mov.w	r3, #4294967295
 800529e:	e009      	b.n	80052b4 <_sbrk+0x54>
 80052a0:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <_sbrk+0x64>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <_sbrk+0x64>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4413      	add	r3, r2
 80052ae:	4a05      	ldr	r2, [pc, #20]	; (80052c4 <_sbrk+0x64>)
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20005000 	.word	0x20005000
 80052c0:	00000400 	.word	0x00000400
 80052c4:	200006e4 	.word	0x200006e4
 80052c8:	20000738 	.word	0x20000738

080052cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr

080052d8 <Reset_Handler>:
 80052d8:	480c      	ldr	r0, [pc, #48]	; (800530c <LoopFillZerobss+0x12>)
 80052da:	490d      	ldr	r1, [pc, #52]	; (8005310 <LoopFillZerobss+0x16>)
 80052dc:	4a0d      	ldr	r2, [pc, #52]	; (8005314 <LoopFillZerobss+0x1a>)
 80052de:	2300      	movs	r3, #0
 80052e0:	e002      	b.n	80052e8 <LoopCopyDataInit>

080052e2 <CopyDataInit>:
 80052e2:	58d4      	ldr	r4, [r2, r3]
 80052e4:	50c4      	str	r4, [r0, r3]
 80052e6:	3304      	adds	r3, #4

080052e8 <LoopCopyDataInit>:
 80052e8:	18c4      	adds	r4, r0, r3
 80052ea:	428c      	cmp	r4, r1
 80052ec:	d3f9      	bcc.n	80052e2 <CopyDataInit>
 80052ee:	4a0a      	ldr	r2, [pc, #40]	; (8005318 <LoopFillZerobss+0x1e>)
 80052f0:	4c0a      	ldr	r4, [pc, #40]	; (800531c <LoopFillZerobss+0x22>)
 80052f2:	2300      	movs	r3, #0
 80052f4:	e001      	b.n	80052fa <LoopFillZerobss>

080052f6 <FillZerobss>:
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	3204      	adds	r2, #4

080052fa <LoopFillZerobss>:
 80052fa:	42a2      	cmp	r2, r4
 80052fc:	d3fb      	bcc.n	80052f6 <FillZerobss>
 80052fe:	f7ff ffe5 	bl	80052cc <SystemInit>
 8005302:	f003 fde5 	bl	8008ed0 <__libc_init_array>
 8005306:	f7ff f8af 	bl	8004468 <main>
 800530a:	4770      	bx	lr
 800530c:	20000000 	.word	0x20000000
 8005310:	200001a0 	.word	0x200001a0
 8005314:	0800c2d4 	.word	0x0800c2d4
 8005318:	200001a0 	.word	0x200001a0
 800531c:	20000738 	.word	0x20000738

08005320 <ADC1_2_IRQHandler>:
 8005320:	e7fe      	b.n	8005320 <ADC1_2_IRQHandler>
	...

08005324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005328:	4b08      	ldr	r3, [pc, #32]	; (800534c <HAL_Init+0x28>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a07      	ldr	r2, [pc, #28]	; (800534c <HAL_Init+0x28>)
 800532e:	f043 0310 	orr.w	r3, r3, #16
 8005332:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005334:	2003      	movs	r0, #3
 8005336:	f000 f947 	bl	80055c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800533a:	200f      	movs	r0, #15
 800533c:	f000 f808 	bl	8005350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005340:	f7ff fd16 	bl	8004d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40022000 	.word	0x40022000

08005350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005358:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <HAL_InitTick+0x54>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <HAL_InitTick+0x58>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	4619      	mov	r1, r3
 8005362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005366:	fbb3 f3f1 	udiv	r3, r3, r1
 800536a:	fbb2 f3f3 	udiv	r3, r2, r3
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f95f 	bl	8005632 <HAL_SYSTICK_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e00e      	b.n	800539c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b0f      	cmp	r3, #15
 8005382:	d80a      	bhi.n	800539a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005384:	2200      	movs	r2, #0
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	f04f 30ff 	mov.w	r0, #4294967295
 800538c:	f000 f927 	bl	80055de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005390:	4a06      	ldr	r2, [pc, #24]	; (80053ac <HAL_InitTick+0x5c>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	e000      	b.n	800539c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	200000b8 	.word	0x200000b8
 80053a8:	200000c0 	.word	0x200000c0
 80053ac:	200000bc 	.word	0x200000bc

080053b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_IncTick+0x1c>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <HAL_IncTick+0x20>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4413      	add	r3, r2
 80053c0:	4a03      	ldr	r2, [pc, #12]	; (80053d0 <HAL_IncTick+0x20>)
 80053c2:	6013      	str	r3, [r2, #0]
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr
 80053cc:	200000c0 	.word	0x200000c0
 80053d0:	200006e8 	.word	0x200006e8

080053d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return uwTick;
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <HAL_GetTick+0x10>)
 80053da:	681b      	ldr	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr
 80053e4:	200006e8 	.word	0x200006e8

080053e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053f0:	f7ff fff0 	bl	80053d4 <HAL_GetTick>
 80053f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d005      	beq.n	800540e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <HAL_Delay+0x44>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800540e:	bf00      	nop
 8005410:	f7ff ffe0 	bl	80053d4 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	429a      	cmp	r2, r3
 800541e:	d8f7      	bhi.n	8005410 <HAL_Delay+0x28>
  {
  }
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	200000c0 	.word	0x200000c0

08005430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005440:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <__NVIC_SetPriorityGrouping+0x44>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800544c:	4013      	ands	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800545c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005462:	4a04      	ldr	r2, [pc, #16]	; (8005474 <__NVIC_SetPriorityGrouping+0x44>)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	60d3      	str	r3, [r2, #12]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	e000ed00 	.word	0xe000ed00

08005478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800547c:	4b04      	ldr	r3, [pc, #16]	; (8005490 <__NVIC_GetPriorityGrouping+0x18>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	f003 0307 	and.w	r3, r3, #7
}
 8005486:	4618      	mov	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	e000ed00 	.word	0xe000ed00

08005494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800549e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	db0b      	blt.n	80054be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054a6:	79fb      	ldrb	r3, [r7, #7]
 80054a8:	f003 021f 	and.w	r2, r3, #31
 80054ac:	4906      	ldr	r1, [pc, #24]	; (80054c8 <__NVIC_EnableIRQ+0x34>)
 80054ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	2001      	movs	r0, #1
 80054b6:	fa00 f202 	lsl.w	r2, r0, r2
 80054ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr
 80054c8:	e000e100 	.word	0xe000e100

080054cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	6039      	str	r1, [r7, #0]
 80054d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	db0a      	blt.n	80054f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	490c      	ldr	r1, [pc, #48]	; (8005518 <__NVIC_SetPriority+0x4c>)
 80054e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ea:	0112      	lsls	r2, r2, #4
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	440b      	add	r3, r1
 80054f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054f4:	e00a      	b.n	800550c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	4908      	ldr	r1, [pc, #32]	; (800551c <__NVIC_SetPriority+0x50>)
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	3b04      	subs	r3, #4
 8005504:	0112      	lsls	r2, r2, #4
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	440b      	add	r3, r1
 800550a:	761a      	strb	r2, [r3, #24]
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	e000e100 	.word	0xe000e100
 800551c:	e000ed00 	.word	0xe000ed00

08005520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005520:	b480      	push	{r7}
 8005522:	b089      	sub	sp, #36	; 0x24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f1c3 0307 	rsb	r3, r3, #7
 800553a:	2b04      	cmp	r3, #4
 800553c:	bf28      	it	cs
 800553e:	2304      	movcs	r3, #4
 8005540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3304      	adds	r3, #4
 8005546:	2b06      	cmp	r3, #6
 8005548:	d902      	bls.n	8005550 <NVIC_EncodePriority+0x30>
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3b03      	subs	r3, #3
 800554e:	e000      	b.n	8005552 <NVIC_EncodePriority+0x32>
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005554:	f04f 32ff 	mov.w	r2, #4294967295
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	43da      	mvns	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	401a      	ands	r2, r3
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005568:	f04f 31ff 	mov.w	r1, #4294967295
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	43d9      	mvns	r1, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005578:	4313      	orrs	r3, r2
         );
}
 800557a:	4618      	mov	r0, r3
 800557c:	3724      	adds	r7, #36	; 0x24
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3b01      	subs	r3, #1
 8005590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005594:	d301      	bcc.n	800559a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005596:	2301      	movs	r3, #1
 8005598:	e00f      	b.n	80055ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800559a:	4a0a      	ldr	r2, [pc, #40]	; (80055c4 <SysTick_Config+0x40>)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3b01      	subs	r3, #1
 80055a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055a2:	210f      	movs	r1, #15
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295
 80055a8:	f7ff ff90 	bl	80054cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <SysTick_Config+0x40>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055b2:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <SysTick_Config+0x40>)
 80055b4:	2207      	movs	r2, #7
 80055b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	e000e010 	.word	0xe000e010

080055c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff ff2d 	bl	8005430 <__NVIC_SetPriorityGrouping>
}
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055de:	b580      	push	{r7, lr}
 80055e0:	b086      	sub	sp, #24
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	4603      	mov	r3, r0
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	607a      	str	r2, [r7, #4]
 80055ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055f0:	f7ff ff42 	bl	8005478 <__NVIC_GetPriorityGrouping>
 80055f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	6978      	ldr	r0, [r7, #20]
 80055fc:	f7ff ff90 	bl	8005520 <NVIC_EncodePriority>
 8005600:	4602      	mov	r2, r0
 8005602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005606:	4611      	mov	r1, r2
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff ff5f 	bl	80054cc <__NVIC_SetPriority>
}
 800560e:	bf00      	nop
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	4603      	mov	r3, r0
 800561e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff ff35 	bl	8005494 <__NVIC_EnableIRQ>
}
 800562a:	bf00      	nop
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7ff ffa2 	bl	8005584 <SysTick_Config>
 8005640:	4603      	mov	r3, r0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e043      	b.n	80056ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	4b22      	ldr	r3, [pc, #136]	; (80056f4 <HAL_DMA_Init+0xa8>)
 800566a:	4413      	add	r3, r2
 800566c:	4a22      	ldr	r2, [pc, #136]	; (80056f8 <HAL_DMA_Init+0xac>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	009a      	lsls	r2, r3, #2
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a1f      	ldr	r2, [pc, #124]	; (80056fc <HAL_DMA_Init+0xb0>)
 800567e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005696:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800569a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80056a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr
 80056f4:	bffdfff8 	.word	0xbffdfff8
 80056f8:	cccccccd 	.word	0xcccccccd
 80056fc:	40020000 	.word	0x40020000

08005700 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_DMA_Start_IT+0x20>
 800571c:	2302      	movs	r3, #2
 800571e:	e04a      	b.n	80057b6 <HAL_DMA_Start_IT+0xb6>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800572e:	2b01      	cmp	r3, #1
 8005730:	d13a      	bne.n	80057a8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f9e8 	bl	8005b2c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 020e 	orr.w	r2, r2, #14
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	e00f      	b.n	8005796 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0204 	bic.w	r2, r2, #4
 8005784:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 020a 	orr.w	r2, r2, #10
 8005794:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0201 	orr.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	e005      	b.n	80057b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
 80057b2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d008      	beq.n	80057e6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2204      	movs	r2, #4
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e020      	b.n	8005828 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 020e 	bic.w	r2, r2, #14
 80057f4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	2101      	movs	r1, #1
 8005810:	fa01 f202 	lsl.w	r2, r1, r2
 8005814:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005826:	7bfb      	ldrb	r3, [r7, #15]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr
	...

08005834 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005846:	2b02      	cmp	r3, #2
 8005848:	d005      	beq.n	8005856 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2204      	movs	r2, #4
 800584e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	73fb      	strb	r3, [r7, #15]
 8005854:	e051      	b.n	80058fa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 020e 	bic.w	r2, r2, #14
 8005864:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a22      	ldr	r2, [pc, #136]	; (8005904 <HAL_DMA_Abort_IT+0xd0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d029      	beq.n	80058d4 <HAL_DMA_Abort_IT+0xa0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a20      	ldr	r2, [pc, #128]	; (8005908 <HAL_DMA_Abort_IT+0xd4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d022      	beq.n	80058d0 <HAL_DMA_Abort_IT+0x9c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1f      	ldr	r2, [pc, #124]	; (800590c <HAL_DMA_Abort_IT+0xd8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d01a      	beq.n	80058ca <HAL_DMA_Abort_IT+0x96>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <HAL_DMA_Abort_IT+0xdc>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d012      	beq.n	80058c4 <HAL_DMA_Abort_IT+0x90>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <HAL_DMA_Abort_IT+0xe0>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00a      	beq.n	80058be <HAL_DMA_Abort_IT+0x8a>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1a      	ldr	r2, [pc, #104]	; (8005918 <HAL_DMA_Abort_IT+0xe4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d102      	bne.n	80058b8 <HAL_DMA_Abort_IT+0x84>
 80058b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80058b6:	e00e      	b.n	80058d6 <HAL_DMA_Abort_IT+0xa2>
 80058b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058bc:	e00b      	b.n	80058d6 <HAL_DMA_Abort_IT+0xa2>
 80058be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058c2:	e008      	b.n	80058d6 <HAL_DMA_Abort_IT+0xa2>
 80058c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058c8:	e005      	b.n	80058d6 <HAL_DMA_Abort_IT+0xa2>
 80058ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058ce:	e002      	b.n	80058d6 <HAL_DMA_Abort_IT+0xa2>
 80058d0:	2310      	movs	r3, #16
 80058d2:	e000      	b.n	80058d6 <HAL_DMA_Abort_IT+0xa2>
 80058d4:	2301      	movs	r3, #1
 80058d6:	4a11      	ldr	r2, [pc, #68]	; (800591c <HAL_DMA_Abort_IT+0xe8>)
 80058d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
    } 
  }
  return status;
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40020008 	.word	0x40020008
 8005908:	4002001c 	.word	0x4002001c
 800590c:	40020030 	.word	0x40020030
 8005910:	40020044 	.word	0x40020044
 8005914:	40020058 	.word	0x40020058
 8005918:	4002006c 	.word	0x4002006c
 800591c:	40020000 	.word	0x40020000

08005920 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	2204      	movs	r2, #4
 800593e:	409a      	lsls	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4013      	ands	r3, r2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d04f      	beq.n	80059e8 <HAL_DMA_IRQHandler+0xc8>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d04a      	beq.n	80059e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d107      	bne.n	8005970 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0204 	bic.w	r2, r2, #4
 800596e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a66      	ldr	r2, [pc, #408]	; (8005b10 <HAL_DMA_IRQHandler+0x1f0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d029      	beq.n	80059ce <HAL_DMA_IRQHandler+0xae>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a65      	ldr	r2, [pc, #404]	; (8005b14 <HAL_DMA_IRQHandler+0x1f4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d022      	beq.n	80059ca <HAL_DMA_IRQHandler+0xaa>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a63      	ldr	r2, [pc, #396]	; (8005b18 <HAL_DMA_IRQHandler+0x1f8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01a      	beq.n	80059c4 <HAL_DMA_IRQHandler+0xa4>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a62      	ldr	r2, [pc, #392]	; (8005b1c <HAL_DMA_IRQHandler+0x1fc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d012      	beq.n	80059be <HAL_DMA_IRQHandler+0x9e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a60      	ldr	r2, [pc, #384]	; (8005b20 <HAL_DMA_IRQHandler+0x200>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00a      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x98>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a5f      	ldr	r2, [pc, #380]	; (8005b24 <HAL_DMA_IRQHandler+0x204>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d102      	bne.n	80059b2 <HAL_DMA_IRQHandler+0x92>
 80059ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059b0:	e00e      	b.n	80059d0 <HAL_DMA_IRQHandler+0xb0>
 80059b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80059b6:	e00b      	b.n	80059d0 <HAL_DMA_IRQHandler+0xb0>
 80059b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80059bc:	e008      	b.n	80059d0 <HAL_DMA_IRQHandler+0xb0>
 80059be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059c2:	e005      	b.n	80059d0 <HAL_DMA_IRQHandler+0xb0>
 80059c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c8:	e002      	b.n	80059d0 <HAL_DMA_IRQHandler+0xb0>
 80059ca:	2340      	movs	r3, #64	; 0x40
 80059cc:	e000      	b.n	80059d0 <HAL_DMA_IRQHandler+0xb0>
 80059ce:	2304      	movs	r3, #4
 80059d0:	4a55      	ldr	r2, [pc, #340]	; (8005b28 <HAL_DMA_IRQHandler+0x208>)
 80059d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8094 	beq.w	8005b06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80059e6:	e08e      	b.n	8005b06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	2202      	movs	r2, #2
 80059ee:	409a      	lsls	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d056      	beq.n	8005aa6 <HAL_DMA_IRQHandler+0x186>
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d051      	beq.n	8005aa6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10b      	bne.n	8005a28 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 020a 	bic.w	r2, r2, #10
 8005a1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a38      	ldr	r2, [pc, #224]	; (8005b10 <HAL_DMA_IRQHandler+0x1f0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d029      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x166>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a37      	ldr	r2, [pc, #220]	; (8005b14 <HAL_DMA_IRQHandler+0x1f4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d022      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x162>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a35      	ldr	r2, [pc, #212]	; (8005b18 <HAL_DMA_IRQHandler+0x1f8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01a      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x15c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a34      	ldr	r2, [pc, #208]	; (8005b1c <HAL_DMA_IRQHandler+0x1fc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d012      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x156>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a32      	ldr	r2, [pc, #200]	; (8005b20 <HAL_DMA_IRQHandler+0x200>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00a      	beq.n	8005a70 <HAL_DMA_IRQHandler+0x150>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a31      	ldr	r2, [pc, #196]	; (8005b24 <HAL_DMA_IRQHandler+0x204>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d102      	bne.n	8005a6a <HAL_DMA_IRQHandler+0x14a>
 8005a64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a68:	e00e      	b.n	8005a88 <HAL_DMA_IRQHandler+0x168>
 8005a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a6e:	e00b      	b.n	8005a88 <HAL_DMA_IRQHandler+0x168>
 8005a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a74:	e008      	b.n	8005a88 <HAL_DMA_IRQHandler+0x168>
 8005a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a7a:	e005      	b.n	8005a88 <HAL_DMA_IRQHandler+0x168>
 8005a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a80:	e002      	b.n	8005a88 <HAL_DMA_IRQHandler+0x168>
 8005a82:	2320      	movs	r3, #32
 8005a84:	e000      	b.n	8005a88 <HAL_DMA_IRQHandler+0x168>
 8005a86:	2302      	movs	r3, #2
 8005a88:	4a27      	ldr	r2, [pc, #156]	; (8005b28 <HAL_DMA_IRQHandler+0x208>)
 8005a8a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d034      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005aa4:	e02f      	b.n	8005b06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	2208      	movs	r2, #8
 8005aac:	409a      	lsls	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d028      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x1e8>
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d023      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 020e 	bic.w	r2, r2, #14
 8005ace:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad8:	2101      	movs	r1, #1
 8005ada:	fa01 f202 	lsl.w	r2, r1, r2
 8005ade:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	4798      	blx	r3
    }
  }
  return;
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
}
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40020008 	.word	0x40020008
 8005b14:	4002001c 	.word	0x4002001c
 8005b18:	40020030 	.word	0x40020030
 8005b1c:	40020044 	.word	0x40020044
 8005b20:	40020058 	.word	0x40020058
 8005b24:	4002006c 	.word	0x4002006c
 8005b28:	40020000 	.word	0x40020000

08005b2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	2101      	movs	r1, #1
 8005b44:	fa01 f202 	lsl.w	r2, r1, r2
 8005b48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b10      	cmp	r3, #16
 8005b58:	d108      	bne.n	8005b6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b6a:	e007      	b.n	8005b7c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	60da      	str	r2, [r3, #12]
}
 8005b7c:	bf00      	nop
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr
	...

08005b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b08b      	sub	sp, #44	; 0x2c
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b92:	2300      	movs	r3, #0
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005b96:	2300      	movs	r3, #0
 8005b98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b9a:	e169      	b.n	8005e70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	4013      	ands	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	f040 8158 	bne.w	8005e6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	4a9a      	ldr	r2, [pc, #616]	; (8005e28 <HAL_GPIO_Init+0x2a0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d05e      	beq.n	8005c82 <HAL_GPIO_Init+0xfa>
 8005bc4:	4a98      	ldr	r2, [pc, #608]	; (8005e28 <HAL_GPIO_Init+0x2a0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d875      	bhi.n	8005cb6 <HAL_GPIO_Init+0x12e>
 8005bca:	4a98      	ldr	r2, [pc, #608]	; (8005e2c <HAL_GPIO_Init+0x2a4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d058      	beq.n	8005c82 <HAL_GPIO_Init+0xfa>
 8005bd0:	4a96      	ldr	r2, [pc, #600]	; (8005e2c <HAL_GPIO_Init+0x2a4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d86f      	bhi.n	8005cb6 <HAL_GPIO_Init+0x12e>
 8005bd6:	4a96      	ldr	r2, [pc, #600]	; (8005e30 <HAL_GPIO_Init+0x2a8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d052      	beq.n	8005c82 <HAL_GPIO_Init+0xfa>
 8005bdc:	4a94      	ldr	r2, [pc, #592]	; (8005e30 <HAL_GPIO_Init+0x2a8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d869      	bhi.n	8005cb6 <HAL_GPIO_Init+0x12e>
 8005be2:	4a94      	ldr	r2, [pc, #592]	; (8005e34 <HAL_GPIO_Init+0x2ac>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d04c      	beq.n	8005c82 <HAL_GPIO_Init+0xfa>
 8005be8:	4a92      	ldr	r2, [pc, #584]	; (8005e34 <HAL_GPIO_Init+0x2ac>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d863      	bhi.n	8005cb6 <HAL_GPIO_Init+0x12e>
 8005bee:	4a92      	ldr	r2, [pc, #584]	; (8005e38 <HAL_GPIO_Init+0x2b0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d046      	beq.n	8005c82 <HAL_GPIO_Init+0xfa>
 8005bf4:	4a90      	ldr	r2, [pc, #576]	; (8005e38 <HAL_GPIO_Init+0x2b0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d85d      	bhi.n	8005cb6 <HAL_GPIO_Init+0x12e>
 8005bfa:	2b12      	cmp	r3, #18
 8005bfc:	d82a      	bhi.n	8005c54 <HAL_GPIO_Init+0xcc>
 8005bfe:	2b12      	cmp	r3, #18
 8005c00:	d859      	bhi.n	8005cb6 <HAL_GPIO_Init+0x12e>
 8005c02:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <HAL_GPIO_Init+0x80>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c83 	.word	0x08005c83
 8005c0c:	08005c5d 	.word	0x08005c5d
 8005c10:	08005c6f 	.word	0x08005c6f
 8005c14:	08005cb1 	.word	0x08005cb1
 8005c18:	08005cb7 	.word	0x08005cb7
 8005c1c:	08005cb7 	.word	0x08005cb7
 8005c20:	08005cb7 	.word	0x08005cb7
 8005c24:	08005cb7 	.word	0x08005cb7
 8005c28:	08005cb7 	.word	0x08005cb7
 8005c2c:	08005cb7 	.word	0x08005cb7
 8005c30:	08005cb7 	.word	0x08005cb7
 8005c34:	08005cb7 	.word	0x08005cb7
 8005c38:	08005cb7 	.word	0x08005cb7
 8005c3c:	08005cb7 	.word	0x08005cb7
 8005c40:	08005cb7 	.word	0x08005cb7
 8005c44:	08005cb7 	.word	0x08005cb7
 8005c48:	08005cb7 	.word	0x08005cb7
 8005c4c:	08005c65 	.word	0x08005c65
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	4a79      	ldr	r2, [pc, #484]	; (8005e3c <HAL_GPIO_Init+0x2b4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d013      	beq.n	8005c82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005c5a:	e02c      	b.n	8005cb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	623b      	str	r3, [r7, #32]
          break;
 8005c62:	e029      	b.n	8005cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	623b      	str	r3, [r7, #32]
          break;
 8005c6c:	e024      	b.n	8005cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	3308      	adds	r3, #8
 8005c74:	623b      	str	r3, [r7, #32]
          break;
 8005c76:	e01f      	b.n	8005cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	623b      	str	r3, [r7, #32]
          break;
 8005c80:	e01a      	b.n	8005cb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005c8a:	2304      	movs	r3, #4
 8005c8c:	623b      	str	r3, [r7, #32]
          break;
 8005c8e:	e013      	b.n	8005cb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d105      	bne.n	8005ca4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c98:	2308      	movs	r3, #8
 8005c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	611a      	str	r2, [r3, #16]
          break;
 8005ca2:	e009      	b.n	8005cb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ca4:	2308      	movs	r3, #8
 8005ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	615a      	str	r2, [r3, #20]
          break;
 8005cae:	e003      	b.n	8005cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	623b      	str	r3, [r7, #32]
          break;
 8005cb4:	e000      	b.n	8005cb8 <HAL_GPIO_Init+0x130>
          break;
 8005cb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2bff      	cmp	r3, #255	; 0xff
 8005cbc:	d801      	bhi.n	8005cc2 <HAL_GPIO_Init+0x13a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	e001      	b.n	8005cc6 <HAL_GPIO_Init+0x13e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	2bff      	cmp	r3, #255	; 0xff
 8005ccc:	d802      	bhi.n	8005cd4 <HAL_GPIO_Init+0x14c>
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	e002      	b.n	8005cda <HAL_GPIO_Init+0x152>
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	3b08      	subs	r3, #8
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	210f      	movs	r1, #15
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	401a      	ands	r2, r3
 8005cec:	6a39      	ldr	r1, [r7, #32]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80b1 	beq.w	8005e6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005d08:	4b4d      	ldr	r3, [pc, #308]	; (8005e40 <HAL_GPIO_Init+0x2b8>)
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	4a4c      	ldr	r2, [pc, #304]	; (8005e40 <HAL_GPIO_Init+0x2b8>)
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	6193      	str	r3, [r2, #24]
 8005d14:	4b4a      	ldr	r3, [pc, #296]	; (8005e40 <HAL_GPIO_Init+0x2b8>)
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005d20:	4a48      	ldr	r2, [pc, #288]	; (8005e44 <HAL_GPIO_Init+0x2bc>)
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	089b      	lsrs	r3, r3, #2
 8005d26:	3302      	adds	r3, #2
 8005d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	220f      	movs	r2, #15
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4013      	ands	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a40      	ldr	r2, [pc, #256]	; (8005e48 <HAL_GPIO_Init+0x2c0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d013      	beq.n	8005d74 <HAL_GPIO_Init+0x1ec>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a3f      	ldr	r2, [pc, #252]	; (8005e4c <HAL_GPIO_Init+0x2c4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00d      	beq.n	8005d70 <HAL_GPIO_Init+0x1e8>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a3e      	ldr	r2, [pc, #248]	; (8005e50 <HAL_GPIO_Init+0x2c8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d007      	beq.n	8005d6c <HAL_GPIO_Init+0x1e4>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a3d      	ldr	r2, [pc, #244]	; (8005e54 <HAL_GPIO_Init+0x2cc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d101      	bne.n	8005d68 <HAL_GPIO_Init+0x1e0>
 8005d64:	2303      	movs	r3, #3
 8005d66:	e006      	b.n	8005d76 <HAL_GPIO_Init+0x1ee>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	e004      	b.n	8005d76 <HAL_GPIO_Init+0x1ee>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e002      	b.n	8005d76 <HAL_GPIO_Init+0x1ee>
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <HAL_GPIO_Init+0x1ee>
 8005d74:	2300      	movs	r3, #0
 8005d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d78:	f002 0203 	and.w	r2, r2, #3
 8005d7c:	0092      	lsls	r2, r2, #2
 8005d7e:	4093      	lsls	r3, r2
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005d86:	492f      	ldr	r1, [pc, #188]	; (8005e44 <HAL_GPIO_Init+0x2bc>)
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	089b      	lsrs	r3, r3, #2
 8005d8c:	3302      	adds	r3, #2
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d006      	beq.n	8005dae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005da0:	4b2d      	ldr	r3, [pc, #180]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	492c      	ldr	r1, [pc, #176]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	600b      	str	r3, [r1, #0]
 8005dac:	e006      	b.n	8005dbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005dae:	4b2a      	ldr	r3, [pc, #168]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	43db      	mvns	r3, r3
 8005db6:	4928      	ldr	r1, [pc, #160]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d006      	beq.n	8005dd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005dc8:	4b23      	ldr	r3, [pc, #140]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	4922      	ldr	r1, [pc, #136]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	604b      	str	r3, [r1, #4]
 8005dd4:	e006      	b.n	8005de4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005dd6:	4b20      	ldr	r3, [pc, #128]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	491e      	ldr	r1, [pc, #120]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d006      	beq.n	8005dfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005df0:	4b19      	ldr	r3, [pc, #100]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	4918      	ldr	r1, [pc, #96]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	608b      	str	r3, [r1, #8]
 8005dfc:	e006      	b.n	8005e0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005dfe:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	4914      	ldr	r1, [pc, #80]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d021      	beq.n	8005e5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005e18:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	490e      	ldr	r1, [pc, #56]	; (8005e58 <HAL_GPIO_Init+0x2d0>)
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60cb      	str	r3, [r1, #12]
 8005e24:	e021      	b.n	8005e6a <HAL_GPIO_Init+0x2e2>
 8005e26:	bf00      	nop
 8005e28:	10320000 	.word	0x10320000
 8005e2c:	10310000 	.word	0x10310000
 8005e30:	10220000 	.word	0x10220000
 8005e34:	10210000 	.word	0x10210000
 8005e38:	10120000 	.word	0x10120000
 8005e3c:	10110000 	.word	0x10110000
 8005e40:	40021000 	.word	0x40021000
 8005e44:	40010000 	.word	0x40010000
 8005e48:	40010800 	.word	0x40010800
 8005e4c:	40010c00 	.word	0x40010c00
 8005e50:	40011000 	.word	0x40011000
 8005e54:	40011400 	.word	0x40011400
 8005e58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <HAL_GPIO_Init+0x304>)
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	43db      	mvns	r3, r3
 8005e64:	4909      	ldr	r1, [pc, #36]	; (8005e8c <HAL_GPIO_Init+0x304>)
 8005e66:	4013      	ands	r3, r2
 8005e68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f47f ae8e 	bne.w	8005b9c <HAL_GPIO_Init+0x14>
  }
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	372c      	adds	r7, #44	; 0x2c
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr
 8005e8c:	40010400 	.word	0x40010400

08005e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	807b      	strh	r3, [r7, #2]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ea0:	787b      	ldrb	r3, [r7, #1]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ea6:	887a      	ldrh	r2, [r7, #2]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005eac:	e003      	b.n	8005eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005eae:	887b      	ldrh	r3, [r7, #2]
 8005eb0:	041a      	lsls	r2, r3, #16
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	611a      	str	r2, [r3, #16]
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005eca:	4b08      	ldr	r3, [pc, #32]	; (8005eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d006      	beq.n	8005ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ed6:	4a05      	ldr	r2, [pc, #20]	; (8005eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe fee6 	bl	8004cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40010400 	.word	0x40010400

08005ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e272      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 8087 	beq.w	800601e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f10:	4b92      	ldr	r3, [pc, #584]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 030c 	and.w	r3, r3, #12
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d00c      	beq.n	8005f36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f1c:	4b8f      	ldr	r3, [pc, #572]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f003 030c 	and.w	r3, r3, #12
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d112      	bne.n	8005f4e <HAL_RCC_OscConfig+0x5e>
 8005f28:	4b8c      	ldr	r3, [pc, #560]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f34:	d10b      	bne.n	8005f4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f36:	4b89      	ldr	r3, [pc, #548]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d06c      	beq.n	800601c <HAL_RCC_OscConfig+0x12c>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d168      	bne.n	800601c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e24c      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f56:	d106      	bne.n	8005f66 <HAL_RCC_OscConfig+0x76>
 8005f58:	4b80      	ldr	r3, [pc, #512]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a7f      	ldr	r2, [pc, #508]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	e02e      	b.n	8005fc4 <HAL_RCC_OscConfig+0xd4>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10c      	bne.n	8005f88 <HAL_RCC_OscConfig+0x98>
 8005f6e:	4b7b      	ldr	r3, [pc, #492]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a7a      	ldr	r2, [pc, #488]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	4b78      	ldr	r3, [pc, #480]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a77      	ldr	r2, [pc, #476]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	e01d      	b.n	8005fc4 <HAL_RCC_OscConfig+0xd4>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f90:	d10c      	bne.n	8005fac <HAL_RCC_OscConfig+0xbc>
 8005f92:	4b72      	ldr	r3, [pc, #456]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a71      	ldr	r2, [pc, #452]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	4b6f      	ldr	r3, [pc, #444]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a6e      	ldr	r2, [pc, #440]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	e00b      	b.n	8005fc4 <HAL_RCC_OscConfig+0xd4>
 8005fac:	4b6b      	ldr	r3, [pc, #428]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a6a      	ldr	r2, [pc, #424]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	4b68      	ldr	r3, [pc, #416]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a67      	ldr	r2, [pc, #412]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d013      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fcc:	f7ff fa02 	bl	80053d4 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fd4:	f7ff f9fe 	bl	80053d4 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b64      	cmp	r3, #100	; 0x64
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e200      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe6:	4b5d      	ldr	r3, [pc, #372]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCC_OscConfig+0xe4>
 8005ff2:	e014      	b.n	800601e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff4:	f7ff f9ee 	bl	80053d4 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ffc:	f7ff f9ea 	bl	80053d4 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b64      	cmp	r3, #100	; 0x64
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e1ec      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800600e:	4b53      	ldr	r3, [pc, #332]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f0      	bne.n	8005ffc <HAL_RCC_OscConfig+0x10c>
 800601a:	e000      	b.n	800601e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800601c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d063      	beq.n	80060f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800602a:	4b4c      	ldr	r3, [pc, #304]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f003 030c 	and.w	r3, r3, #12
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006036:	4b49      	ldr	r3, [pc, #292]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f003 030c 	and.w	r3, r3, #12
 800603e:	2b08      	cmp	r3, #8
 8006040:	d11c      	bne.n	800607c <HAL_RCC_OscConfig+0x18c>
 8006042:	4b46      	ldr	r3, [pc, #280]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d116      	bne.n	800607c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800604e:	4b43      	ldr	r3, [pc, #268]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <HAL_RCC_OscConfig+0x176>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d001      	beq.n	8006066 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e1c0      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006066:	4b3d      	ldr	r3, [pc, #244]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	4939      	ldr	r1, [pc, #228]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8006076:	4313      	orrs	r3, r2
 8006078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800607a:	e03a      	b.n	80060f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d020      	beq.n	80060c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006084:	4b36      	ldr	r3, [pc, #216]	; (8006160 <HAL_RCC_OscConfig+0x270>)
 8006086:	2201      	movs	r2, #1
 8006088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608a:	f7ff f9a3 	bl	80053d4 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006092:	f7ff f99f 	bl	80053d4 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e1a1      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a4:	4b2d      	ldr	r3, [pc, #180]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b0:	4b2a      	ldr	r3, [pc, #168]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	4927      	ldr	r1, [pc, #156]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	600b      	str	r3, [r1, #0]
 80060c4:	e015      	b.n	80060f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060c6:	4b26      	ldr	r3, [pc, #152]	; (8006160 <HAL_RCC_OscConfig+0x270>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060cc:	f7ff f982 	bl	80053d4 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060d4:	f7ff f97e 	bl	80053d4 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e180      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060e6:	4b1d      	ldr	r3, [pc, #116]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f0      	bne.n	80060d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0308 	and.w	r3, r3, #8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d03a      	beq.n	8006174 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d019      	beq.n	800613a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006106:	4b17      	ldr	r3, [pc, #92]	; (8006164 <HAL_RCC_OscConfig+0x274>)
 8006108:	2201      	movs	r2, #1
 800610a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610c:	f7ff f962 	bl	80053d4 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006114:	f7ff f95e 	bl	80053d4 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e160      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <HAL_RCC_OscConfig+0x26c>)
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0f0      	beq.n	8006114 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006132:	2001      	movs	r0, #1
 8006134:	f000 fad8 	bl	80066e8 <RCC_Delay>
 8006138:	e01c      	b.n	8006174 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800613a:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <HAL_RCC_OscConfig+0x274>)
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006140:	f7ff f948 	bl	80053d4 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006146:	e00f      	b.n	8006168 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006148:	f7ff f944 	bl	80053d4 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d908      	bls.n	8006168 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e146      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
 800615a:	bf00      	nop
 800615c:	40021000 	.word	0x40021000
 8006160:	42420000 	.word	0x42420000
 8006164:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006168:	4b92      	ldr	r3, [pc, #584]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e9      	bne.n	8006148 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80a6 	beq.w	80062ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006182:	2300      	movs	r3, #0
 8006184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006186:	4b8b      	ldr	r3, [pc, #556]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10d      	bne.n	80061ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006192:	4b88      	ldr	r3, [pc, #544]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	4a87      	ldr	r2, [pc, #540]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619c:	61d3      	str	r3, [r2, #28]
 800619e:	4b85      	ldr	r3, [pc, #532]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a6:	60bb      	str	r3, [r7, #8]
 80061a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061aa:	2301      	movs	r3, #1
 80061ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ae:	4b82      	ldr	r3, [pc, #520]	; (80063b8 <HAL_RCC_OscConfig+0x4c8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d118      	bne.n	80061ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ba:	4b7f      	ldr	r3, [pc, #508]	; (80063b8 <HAL_RCC_OscConfig+0x4c8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a7e      	ldr	r2, [pc, #504]	; (80063b8 <HAL_RCC_OscConfig+0x4c8>)
 80061c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061c6:	f7ff f905 	bl	80053d4 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ce:	f7ff f901 	bl	80053d4 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b64      	cmp	r3, #100	; 0x64
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e103      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e0:	4b75      	ldr	r3, [pc, #468]	; (80063b8 <HAL_RCC_OscConfig+0x4c8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d106      	bne.n	8006202 <HAL_RCC_OscConfig+0x312>
 80061f4:	4b6f      	ldr	r3, [pc, #444]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	4a6e      	ldr	r2, [pc, #440]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 80061fa:	f043 0301 	orr.w	r3, r3, #1
 80061fe:	6213      	str	r3, [r2, #32]
 8006200:	e02d      	b.n	800625e <HAL_RCC_OscConfig+0x36e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10c      	bne.n	8006224 <HAL_RCC_OscConfig+0x334>
 800620a:	4b6a      	ldr	r3, [pc, #424]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	4a69      	ldr	r2, [pc, #420]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006210:	f023 0301 	bic.w	r3, r3, #1
 8006214:	6213      	str	r3, [r2, #32]
 8006216:	4b67      	ldr	r3, [pc, #412]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	4a66      	ldr	r2, [pc, #408]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 800621c:	f023 0304 	bic.w	r3, r3, #4
 8006220:	6213      	str	r3, [r2, #32]
 8006222:	e01c      	b.n	800625e <HAL_RCC_OscConfig+0x36e>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	2b05      	cmp	r3, #5
 800622a:	d10c      	bne.n	8006246 <HAL_RCC_OscConfig+0x356>
 800622c:	4b61      	ldr	r3, [pc, #388]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	4a60      	ldr	r2, [pc, #384]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006232:	f043 0304 	orr.w	r3, r3, #4
 8006236:	6213      	str	r3, [r2, #32]
 8006238:	4b5e      	ldr	r3, [pc, #376]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	4a5d      	ldr	r2, [pc, #372]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 800623e:	f043 0301 	orr.w	r3, r3, #1
 8006242:	6213      	str	r3, [r2, #32]
 8006244:	e00b      	b.n	800625e <HAL_RCC_OscConfig+0x36e>
 8006246:	4b5b      	ldr	r3, [pc, #364]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	4a5a      	ldr	r2, [pc, #360]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	6213      	str	r3, [r2, #32]
 8006252:	4b58      	ldr	r3, [pc, #352]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	4a57      	ldr	r2, [pc, #348]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006258:	f023 0304 	bic.w	r3, r3, #4
 800625c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d015      	beq.n	8006292 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006266:	f7ff f8b5 	bl	80053d4 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800626c:	e00a      	b.n	8006284 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626e:	f7ff f8b1 	bl	80053d4 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	f241 3288 	movw	r2, #5000	; 0x1388
 800627c:	4293      	cmp	r3, r2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e0b1      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006284:	4b4b      	ldr	r3, [pc, #300]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0ee      	beq.n	800626e <HAL_RCC_OscConfig+0x37e>
 8006290:	e014      	b.n	80062bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006292:	f7ff f89f 	bl	80053d4 <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006298:	e00a      	b.n	80062b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7ff f89b 	bl	80053d4 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e09b      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062b0:	4b40      	ldr	r3, [pc, #256]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1ee      	bne.n	800629a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d105      	bne.n	80062ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062c2:	4b3c      	ldr	r3, [pc, #240]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	4a3b      	ldr	r2, [pc, #236]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 80062c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 8087 	beq.w	80063e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062d8:	4b36      	ldr	r3, [pc, #216]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f003 030c 	and.w	r3, r3, #12
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d061      	beq.n	80063a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d146      	bne.n	800637a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ec:	4b33      	ldr	r3, [pc, #204]	; (80063bc <HAL_RCC_OscConfig+0x4cc>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f2:	f7ff f86f 	bl	80053d4 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062fa:	f7ff f86b 	bl	80053d4 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e06d      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800630c:	4b29      	ldr	r3, [pc, #164]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1f0      	bne.n	80062fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006320:	d108      	bne.n	8006334 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006322:	4b24      	ldr	r3, [pc, #144]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	4921      	ldr	r1, [pc, #132]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006330:	4313      	orrs	r3, r2
 8006332:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006334:	4b1f      	ldr	r3, [pc, #124]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a19      	ldr	r1, [r3, #32]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	430b      	orrs	r3, r1
 8006346:	491b      	ldr	r1, [pc, #108]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 8006348:	4313      	orrs	r3, r2
 800634a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800634c:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <HAL_RCC_OscConfig+0x4cc>)
 800634e:	2201      	movs	r2, #1
 8006350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006352:	f7ff f83f 	bl	80053d4 <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800635a:	f7ff f83b 	bl	80053d4 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e03d      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800636c:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f0      	beq.n	800635a <HAL_RCC_OscConfig+0x46a>
 8006378:	e035      	b.n	80063e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800637a:	4b10      	ldr	r3, [pc, #64]	; (80063bc <HAL_RCC_OscConfig+0x4cc>)
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006380:	f7ff f828 	bl	80053d4 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006388:	f7ff f824 	bl	80053d4 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e026      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800639a:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <HAL_RCC_OscConfig+0x4c4>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0x498>
 80063a6:	e01e      	b.n	80063e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d107      	bne.n	80063c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e019      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
 80063b4:	40021000 	.word	0x40021000
 80063b8:	40007000 	.word	0x40007000
 80063bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <HAL_RCC_OscConfig+0x500>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d106      	bne.n	80063e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063de:	429a      	cmp	r2, r3
 80063e0:	d001      	beq.n	80063e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40021000 	.word	0x40021000

080063f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0d0      	b.n	80065aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006408:	4b6a      	ldr	r3, [pc, #424]	; (80065b4 <HAL_RCC_ClockConfig+0x1c0>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d910      	bls.n	8006438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006416:	4b67      	ldr	r3, [pc, #412]	; (80065b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f023 0207 	bic.w	r2, r3, #7
 800641e:	4965      	ldr	r1, [pc, #404]	; (80065b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	4313      	orrs	r3, r2
 8006424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006426:	4b63      	ldr	r3, [pc, #396]	; (80065b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d001      	beq.n	8006438 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0b8      	b.n	80065aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d020      	beq.n	8006486 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006450:	4b59      	ldr	r3, [pc, #356]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	4a58      	ldr	r2, [pc, #352]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006456:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800645a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006468:	4b53      	ldr	r3, [pc, #332]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	4a52      	ldr	r2, [pc, #328]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 800646e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006472:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006474:	4b50      	ldr	r3, [pc, #320]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	494d      	ldr	r1, [pc, #308]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006482:	4313      	orrs	r3, r2
 8006484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d040      	beq.n	8006514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d107      	bne.n	80064aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649a:	4b47      	ldr	r3, [pc, #284]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d115      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e07f      	b.n	80065aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d107      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b2:	4b41      	ldr	r3, [pc, #260]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e073      	b.n	80065aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c2:	4b3d      	ldr	r3, [pc, #244]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e06b      	b.n	80065aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064d2:	4b39      	ldr	r3, [pc, #228]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f023 0203 	bic.w	r2, r3, #3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	4936      	ldr	r1, [pc, #216]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064e4:	f7fe ff76 	bl	80053d4 <HAL_GetTick>
 80064e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ea:	e00a      	b.n	8006502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ec:	f7fe ff72 	bl	80053d4 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e053      	b.n	80065aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006502:	4b2d      	ldr	r3, [pc, #180]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f003 020c 	and.w	r2, r3, #12
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	429a      	cmp	r2, r3
 8006512:	d1eb      	bne.n	80064ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006514:	4b27      	ldr	r3, [pc, #156]	; (80065b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d210      	bcs.n	8006544 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006522:	4b24      	ldr	r3, [pc, #144]	; (80065b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f023 0207 	bic.w	r2, r3, #7
 800652a:	4922      	ldr	r1, [pc, #136]	; (80065b4 <HAL_RCC_ClockConfig+0x1c0>)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	4313      	orrs	r3, r2
 8006530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006532:	4b20      	ldr	r3, [pc, #128]	; (80065b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d001      	beq.n	8006544 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e032      	b.n	80065aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d008      	beq.n	8006562 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006550:	4b19      	ldr	r3, [pc, #100]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	4916      	ldr	r1, [pc, #88]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 800655e:	4313      	orrs	r3, r2
 8006560:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800656e:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	490e      	ldr	r1, [pc, #56]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 800657e:	4313      	orrs	r3, r2
 8006580:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006582:	f000 f821 	bl	80065c8 <HAL_RCC_GetSysClockFreq>
 8006586:	4602      	mov	r2, r0
 8006588:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	091b      	lsrs	r3, r3, #4
 800658e:	f003 030f 	and.w	r3, r3, #15
 8006592:	490a      	ldr	r1, [pc, #40]	; (80065bc <HAL_RCC_ClockConfig+0x1c8>)
 8006594:	5ccb      	ldrb	r3, [r1, r3]
 8006596:	fa22 f303 	lsr.w	r3, r2, r3
 800659a:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <HAL_RCC_ClockConfig+0x1cc>)
 800659c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800659e:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <HAL_RCC_ClockConfig+0x1d0>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe fed4 	bl	8005350 <HAL_InitTick>

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	40022000 	.word	0x40022000
 80065b8:	40021000 	.word	0x40021000
 80065bc:	0800bde4 	.word	0x0800bde4
 80065c0:	200000b8 	.word	0x200000b8
 80065c4:	200000bc 	.word	0x200000bc

080065c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065c8:	b490      	push	{r4, r7}
 80065ca:	b08a      	sub	sp, #40	; 0x28
 80065cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80065ce:	4b29      	ldr	r3, [pc, #164]	; (8006674 <HAL_RCC_GetSysClockFreq+0xac>)
 80065d0:	1d3c      	adds	r4, r7, #4
 80065d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80065d8:	f240 2301 	movw	r3, #513	; 0x201
 80065dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	2300      	movs	r3, #0
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	2300      	movs	r3, #0
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80065f2:	4b21      	ldr	r3, [pc, #132]	; (8006678 <HAL_RCC_GetSysClockFreq+0xb0>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f003 030c 	and.w	r3, r3, #12
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d002      	beq.n	8006608 <HAL_RCC_GetSysClockFreq+0x40>
 8006602:	2b08      	cmp	r3, #8
 8006604:	d003      	beq.n	800660e <HAL_RCC_GetSysClockFreq+0x46>
 8006606:	e02b      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006608:	4b1c      	ldr	r3, [pc, #112]	; (800667c <HAL_RCC_GetSysClockFreq+0xb4>)
 800660a:	623b      	str	r3, [r7, #32]
      break;
 800660c:	e02b      	b.n	8006666 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	0c9b      	lsrs	r3, r3, #18
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	3328      	adds	r3, #40	; 0x28
 8006618:	443b      	add	r3, r7
 800661a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800661e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d012      	beq.n	8006650 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800662a:	4b13      	ldr	r3, [pc, #76]	; (8006678 <HAL_RCC_GetSysClockFreq+0xb0>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	0c5b      	lsrs	r3, r3, #17
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	3328      	adds	r3, #40	; 0x28
 8006636:	443b      	add	r3, r7
 8006638:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800663c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	4a0e      	ldr	r2, [pc, #56]	; (800667c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006642:	fb03 f202 	mul.w	r2, r3, r2
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
 800664e:	e004      	b.n	800665a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	4a0b      	ldr	r2, [pc, #44]	; (8006680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006654:	fb02 f303 	mul.w	r3, r2, r3
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	623b      	str	r3, [r7, #32]
      break;
 800665e:	e002      	b.n	8006666 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006660:	4b06      	ldr	r3, [pc, #24]	; (800667c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006662:	623b      	str	r3, [r7, #32]
      break;
 8006664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006666:	6a3b      	ldr	r3, [r7, #32]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3728      	adds	r7, #40	; 0x28
 800666c:	46bd      	mov	sp, r7
 800666e:	bc90      	pop	{r4, r7}
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	0800bdc8 	.word	0x0800bdc8
 8006678:	40021000 	.word	0x40021000
 800667c:	007a1200 	.word	0x007a1200
 8006680:	003d0900 	.word	0x003d0900

08006684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006688:	4b02      	ldr	r3, [pc, #8]	; (8006694 <HAL_RCC_GetHCLKFreq+0x10>)
 800668a:	681b      	ldr	r3, [r3, #0]
}
 800668c:	4618      	mov	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr
 8006694:	200000b8 	.word	0x200000b8

08006698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800669c:	f7ff fff2 	bl	8006684 <HAL_RCC_GetHCLKFreq>
 80066a0:	4602      	mov	r2, r0
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	0a1b      	lsrs	r3, r3, #8
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	4903      	ldr	r1, [pc, #12]	; (80066bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ae:	5ccb      	ldrb	r3, [r1, r3]
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40021000 	.word	0x40021000
 80066bc:	0800bdf4 	.word	0x0800bdf4

080066c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066c4:	f7ff ffde 	bl	8006684 <HAL_RCC_GetHCLKFreq>
 80066c8:	4602      	mov	r2, r0
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	0adb      	lsrs	r3, r3, #11
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	4903      	ldr	r1, [pc, #12]	; (80066e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066d6:	5ccb      	ldrb	r3, [r1, r3]
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066dc:	4618      	mov	r0, r3
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	40021000 	.word	0x40021000
 80066e4:	0800bdf4 	.word	0x0800bdf4

080066e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80066f0:	4b0a      	ldr	r3, [pc, #40]	; (800671c <RCC_Delay+0x34>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a0a      	ldr	r2, [pc, #40]	; (8006720 <RCC_Delay+0x38>)
 80066f6:	fba2 2303 	umull	r2, r3, r2, r3
 80066fa:	0a5b      	lsrs	r3, r3, #9
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	fb02 f303 	mul.w	r3, r2, r3
 8006702:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006704:	bf00      	nop
  }
  while (Delay --);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	1e5a      	subs	r2, r3, #1
 800670a:	60fa      	str	r2, [r7, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1f9      	bne.n	8006704 <RCC_Delay+0x1c>
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr
 800671c:	200000b8 	.word	0x200000b8
 8006720:	10624dd3 	.word	0x10624dd3

08006724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e076      	b.n	8006824 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	2b00      	cmp	r3, #0
 800673c:	d108      	bne.n	8006750 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006746:	d009      	beq.n	800675c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	61da      	str	r2, [r3, #28]
 800674e:	e005      	b.n	800675c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fe fb2c 	bl	8004dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006792:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e0:	ea42 0103 	orr.w	r1, r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	0c1a      	lsrs	r2, r3, #16
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f002 0204 	and.w	r2, r2, #4
 8006802:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69da      	ldr	r2, [r3, #28]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006812:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_SPI_Transmit+0x22>
 800684a:	2302      	movs	r3, #2
 800684c:	e126      	b.n	8006a9c <HAL_SPI_Transmit+0x270>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006856:	f7fe fdbd 	bl	80053d4 <HAL_GetTick>
 800685a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800685c:	88fb      	ldrh	r3, [r7, #6]
 800685e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	d002      	beq.n	8006872 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800686c:	2302      	movs	r3, #2
 800686e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006870:	e10b      	b.n	8006a8a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HAL_SPI_Transmit+0x52>
 8006878:	88fb      	ldrh	r3, [r7, #6]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006882:	e102      	b.n	8006a8a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2203      	movs	r2, #3
 8006888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	88fa      	ldrh	r2, [r7, #6]
 800689c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	88fa      	ldrh	r2, [r7, #6]
 80068a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ca:	d10f      	bne.n	80068ec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d007      	beq.n	800690a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006908:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006912:	d14b      	bne.n	80069ac <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_SPI_Transmit+0xf6>
 800691c:	8afb      	ldrh	r3, [r7, #22]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d13e      	bne.n	80069a0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	881a      	ldrh	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	1c9a      	adds	r2, r3, #2
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006946:	e02b      	b.n	80069a0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b02      	cmp	r3, #2
 8006954:	d112      	bne.n	800697c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	881a      	ldrh	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	1c9a      	adds	r2, r3, #2
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	86da      	strh	r2, [r3, #54]	; 0x36
 800697a:	e011      	b.n	80069a0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800697c:	f7fe fd2a 	bl	80053d4 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d803      	bhi.n	8006994 <HAL_SPI_Transmit+0x168>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	d102      	bne.n	800699a <HAL_SPI_Transmit+0x16e>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d102      	bne.n	80069a0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800699e:	e074      	b.n	8006a8a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1ce      	bne.n	8006948 <HAL_SPI_Transmit+0x11c>
 80069aa:	e04c      	b.n	8006a46 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <HAL_SPI_Transmit+0x18e>
 80069b4:	8afb      	ldrh	r3, [r7, #22]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d140      	bne.n	8006a3c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	330c      	adds	r3, #12
 80069c4:	7812      	ldrb	r2, [r2, #0]
 80069c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80069e0:	e02c      	b.n	8006a3c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d113      	bne.n	8006a18 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	330c      	adds	r3, #12
 80069fa:	7812      	ldrb	r2, [r2, #0]
 80069fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a16:	e011      	b.n	8006a3c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a18:	f7fe fcdc 	bl	80053d4 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d803      	bhi.n	8006a30 <HAL_SPI_Transmit+0x204>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2e:	d102      	bne.n	8006a36 <HAL_SPI_Transmit+0x20a>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d102      	bne.n	8006a3c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a3a:	e026      	b.n	8006a8a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1cd      	bne.n	80069e2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 fa54 	bl	8006ef8 <SPI_EndRxTxTransaction>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10a      	bne.n	8006a7a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a64:	2300      	movs	r3, #0
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	613b      	str	r3, [r7, #16]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	77fb      	strb	r3, [r7, #31]
 8006a86:	e000      	b.n	8006a8a <HAL_SPI_Transmit+0x25e>
  }

error:
 8006a88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3720      	adds	r7, #32
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08c      	sub	sp, #48	; 0x30
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d101      	bne.n	8006aca <HAL_SPI_TransmitReceive+0x26>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e18a      	b.n	8006de0 <HAL_SPI_TransmitReceive+0x33c>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ad2:	f7fe fc7f 	bl	80053d4 <HAL_GetTick>
 8006ad6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006ae8:	887b      	ldrh	r3, [r7, #2]
 8006aea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d00f      	beq.n	8006b14 <HAL_SPI_TransmitReceive+0x70>
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006afa:	d107      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d103      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x68>
 8006b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d003      	beq.n	8006b14 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b12:	e15b      	b.n	8006dcc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d005      	beq.n	8006b26 <HAL_SPI_TransmitReceive+0x82>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <HAL_SPI_TransmitReceive+0x82>
 8006b20:	887b      	ldrh	r3, [r7, #2]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b2c:	e14e      	b.n	8006dcc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d003      	beq.n	8006b42 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2205      	movs	r2, #5
 8006b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	887a      	ldrh	r2, [r7, #2]
 8006b52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	887a      	ldrh	r2, [r7, #2]
 8006b58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	887a      	ldrh	r2, [r7, #2]
 8006b64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	887a      	ldrh	r2, [r7, #2]
 8006b6a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b82:	2b40      	cmp	r3, #64	; 0x40
 8006b84:	d007      	beq.n	8006b96 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b9e:	d178      	bne.n	8006c92 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <HAL_SPI_TransmitReceive+0x10a>
 8006ba8:	8b7b      	ldrh	r3, [r7, #26]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d166      	bne.n	8006c7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	881a      	ldrh	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	1c9a      	adds	r2, r3, #2
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bd2:	e053      	b.n	8006c7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d11b      	bne.n	8006c1a <HAL_SPI_TransmitReceive+0x176>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d016      	beq.n	8006c1a <HAL_SPI_TransmitReceive+0x176>
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d113      	bne.n	8006c1a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	881a      	ldrh	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c02:	1c9a      	adds	r2, r3, #2
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d119      	bne.n	8006c5c <HAL_SPI_TransmitReceive+0x1b8>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d014      	beq.n	8006c5c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3c:	b292      	uxth	r2, r2
 8006c3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	1c9a      	adds	r2, r3, #2
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c5c:	f7fe fbba 	bl	80053d4 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d807      	bhi.n	8006c7c <HAL_SPI_TransmitReceive+0x1d8>
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c72:	d003      	beq.n	8006c7c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c7a:	e0a7      	b.n	8006dcc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1a6      	bne.n	8006bd4 <HAL_SPI_TransmitReceive+0x130>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1a1      	bne.n	8006bd4 <HAL_SPI_TransmitReceive+0x130>
 8006c90:	e07c      	b.n	8006d8c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_SPI_TransmitReceive+0x1fc>
 8006c9a:	8b7b      	ldrh	r3, [r7, #26]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d16b      	bne.n	8006d78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	7812      	ldrb	r2, [r2, #0]
 8006cac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cc6:	e057      	b.n	8006d78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d11c      	bne.n	8006d10 <HAL_SPI_TransmitReceive+0x26c>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d017      	beq.n	8006d10 <HAL_SPI_TransmitReceive+0x26c>
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d114      	bne.n	8006d10 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	330c      	adds	r3, #12
 8006cf0:	7812      	ldrb	r2, [r2, #0]
 8006cf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d119      	bne.n	8006d52 <HAL_SPI_TransmitReceive+0x2ae>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d014      	beq.n	8006d52 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d52:	f7fe fb3f 	bl	80053d4 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d803      	bhi.n	8006d6a <HAL_SPI_TransmitReceive+0x2c6>
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d68:	d102      	bne.n	8006d70 <HAL_SPI_TransmitReceive+0x2cc>
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d76:	e029      	b.n	8006dcc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1a2      	bne.n	8006cc8 <HAL_SPI_TransmitReceive+0x224>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d19d      	bne.n	8006cc8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f8b1 	bl	8006ef8 <SPI_EndRxTxTransaction>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d006      	beq.n	8006daa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2220      	movs	r2, #32
 8006da6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006da8:	e010      	b.n	8006dcc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10b      	bne.n	8006dca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	e000      	b.n	8006dcc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006dca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ddc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3730      	adds	r7, #48	; 0x30
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006df8:	f7fe faec 	bl	80053d4 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	4413      	add	r3, r2
 8006e06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e08:	f7fe fae4 	bl	80053d4 <HAL_GetTick>
 8006e0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e0e:	4b39      	ldr	r3, [pc, #228]	; (8006ef4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	015b      	lsls	r3, r3, #5
 8006e14:	0d1b      	lsrs	r3, r3, #20
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	fb02 f303 	mul.w	r3, r2, r3
 8006e1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e1e:	e054      	b.n	8006eca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e26:	d050      	beq.n	8006eca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e28:	f7fe fad4 	bl	80053d4 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d902      	bls.n	8006e3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d13d      	bne.n	8006eba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e56:	d111      	bne.n	8006e7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e60:	d004      	beq.n	8006e6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6a:	d107      	bne.n	8006e7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e84:	d10f      	bne.n	8006ea6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ea4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e017      	b.n	8006eea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	bf0c      	ite	eq
 8006eda:	2301      	moveq	r3, #1
 8006edc:	2300      	movne	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d19b      	bne.n	8006e20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3720      	adds	r7, #32
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	200000b8 	.word	0x200000b8

08006ef8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2180      	movs	r1, #128	; 0x80
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f7ff ff6a 	bl	8006de8 <SPI_WaitFlagStateUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d007      	beq.n	8006f2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1e:	f043 0220 	orr.w	r2, r3, #32
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e000      	b.n	8006f2c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e041      	b.n	8006fca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fd ffc8 	bl	8004ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4619      	mov	r1, r3
 8006f72:	4610      	mov	r0, r2
 8006f74:	f000 fc9a 	bl	80078ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d001      	beq.n	8006fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e03a      	b.n	8007062 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a18      	ldr	r2, [pc, #96]	; (800706c <HAL_TIM_Base_Start_IT+0x98>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00e      	beq.n	800702c <HAL_TIM_Base_Start_IT+0x58>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007016:	d009      	beq.n	800702c <HAL_TIM_Base_Start_IT+0x58>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a14      	ldr	r2, [pc, #80]	; (8007070 <HAL_TIM_Base_Start_IT+0x9c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d004      	beq.n	800702c <HAL_TIM_Base_Start_IT+0x58>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a13      	ldr	r2, [pc, #76]	; (8007074 <HAL_TIM_Base_Start_IT+0xa0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d111      	bne.n	8007050 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b06      	cmp	r3, #6
 800703c:	d010      	beq.n	8007060 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f042 0201 	orr.w	r2, r2, #1
 800704c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704e:	e007      	b.n	8007060 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0201 	orr.w	r2, r2, #1
 800705e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr
 800706c:	40012c00 	.word	0x40012c00
 8007070:	40000400 	.word	0x40000400
 8007074:	40000800 	.word	0x40000800

08007078 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0201 	bic.w	r2, r2, #1
 800708e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6a1a      	ldr	r2, [r3, #32]
 8007096:	f241 1311 	movw	r3, #4369	; 0x1111
 800709a:	4013      	ands	r3, r2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10f      	bne.n	80070c0 <HAL_TIM_Base_Stop_IT+0x48>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6a1a      	ldr	r2, [r3, #32]
 80070a6:	f240 4344 	movw	r3, #1092	; 0x444
 80070aa:	4013      	ands	r3, r2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d107      	bne.n	80070c0 <HAL_TIM_Base_Stop_IT+0x48>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0201 	bic.w	r2, r2, #1
 80070be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bc80      	pop	{r7}
 80070d2:	4770      	bx	lr

080070d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e093      	b.n	8007210 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d106      	bne.n	8007102 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7fd feb3 	bl	8004e68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2202      	movs	r2, #2
 8007106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6812      	ldr	r2, [r2, #0]
 8007114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007118:	f023 0307 	bic.w	r3, r3, #7
 800711c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3304      	adds	r3, #4
 8007126:	4619      	mov	r1, r3
 8007128:	4610      	mov	r0, r2
 800712a:	f000 fbbf 	bl	80078ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	021b      	lsls	r3, r3, #8
 8007166:	4313      	orrs	r3, r2
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007174:	f023 030c 	bic.w	r3, r3, #12
 8007178:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007184:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	4313      	orrs	r3, r2
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	4313      	orrs	r3, r2
 8007196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	011a      	lsls	r2, r3, #4
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	031b      	lsls	r3, r3, #12
 80071a4:	4313      	orrs	r3, r2
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80071b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	011b      	lsls	r3, r3, #4
 80071be:	4313      	orrs	r3, r2
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007228:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007230:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007238:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007240:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d110      	bne.n	800726a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d102      	bne.n	8007254 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800724e:	7b7b      	ldrb	r3, [r7, #13]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d001      	beq.n	8007258 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e089      	b.n	800736c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007268:	e031      	b.n	80072ce <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b04      	cmp	r3, #4
 800726e:	d110      	bne.n	8007292 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d102      	bne.n	800727c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007276:	7b3b      	ldrb	r3, [r7, #12]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d001      	beq.n	8007280 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e075      	b.n	800736c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007290:	e01d      	b.n	80072ce <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d108      	bne.n	80072aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d105      	bne.n	80072aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800729e:	7b7b      	ldrb	r3, [r7, #13]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d102      	bne.n	80072aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80072a4:	7b3b      	ldrb	r3, [r7, #12]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d001      	beq.n	80072ae <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e05e      	b.n	800736c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2202      	movs	r2, #2
 80072b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2202      	movs	r2, #2
 80072ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2202      	movs	r2, #2
 80072c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_TIM_Encoder_Start_IT+0xc4>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d010      	beq.n	80072fc <HAL_TIM_Encoder_Start_IT+0xe4>
 80072da:	e01f      	b.n	800731c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2201      	movs	r2, #1
 80072e2:	2100      	movs	r1, #0
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fbd9 	bl	8007a9c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0202 	orr.w	r2, r2, #2
 80072f8:	60da      	str	r2, [r3, #12]
      break;
 80072fa:	e02e      	b.n	800735a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2201      	movs	r2, #1
 8007302:	2104      	movs	r1, #4
 8007304:	4618      	mov	r0, r3
 8007306:	f000 fbc9 	bl	8007a9c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f042 0204 	orr.w	r2, r2, #4
 8007318:	60da      	str	r2, [r3, #12]
      break;
 800731a:	e01e      	b.n	800735a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2201      	movs	r2, #1
 8007322:	2100      	movs	r1, #0
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fbb9 	bl	8007a9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2201      	movs	r2, #1
 8007330:	2104      	movs	r1, #4
 8007332:	4618      	mov	r0, r3
 8007334:	f000 fbb2 	bl	8007a9c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0202 	orr.w	r2, r2, #2
 8007346:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0204 	orr.w	r2, r2, #4
 8007356:	60da      	str	r2, [r3, #12]
      break;
 8007358:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f042 0201 	orr.w	r2, r2, #1
 8007368:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10f      	bne.n	80073a4 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2200      	movs	r2, #0
 800738a:	2100      	movs	r1, #0
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fb85 	bl	8007a9c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0202 	bic.w	r2, r2, #2
 80073a0:	60da      	str	r2, [r3, #12]
 80073a2:	e030      	b.n	8007406 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d10f      	bne.n	80073ca <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2200      	movs	r2, #0
 80073b0:	2104      	movs	r1, #4
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fb72 	bl	8007a9c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0204 	bic.w	r2, r2, #4
 80073c6:	60da      	str	r2, [r3, #12]
 80073c8:	e01d      	b.n	8007406 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2200      	movs	r2, #0
 80073d0:	2100      	movs	r1, #0
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fb62 	bl	8007a9c <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2200      	movs	r2, #0
 80073de:	2104      	movs	r1, #4
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fb5b 	bl	8007a9c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0202 	bic.w	r2, r2, #2
 80073f4:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0204 	bic.w	r2, r2, #4
 8007404:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6a1a      	ldr	r2, [r3, #32]
 800740c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007410:	4013      	ands	r3, r2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10f      	bne.n	8007436 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6a1a      	ldr	r2, [r3, #32]
 800741c:	f240 4344 	movw	r3, #1092	; 0x444
 8007420:	4013      	ands	r3, r2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d107      	bne.n	8007436 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0201 	bic.w	r2, r2, #1
 8007434:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <HAL_TIM_Encoder_Stop_IT+0xce>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b04      	cmp	r3, #4
 8007440:	d138      	bne.n	80074b4 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d104      	bne.n	8007452 <HAL_TIM_Encoder_Stop_IT+0xde>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007450:	e013      	b.n	800747a <HAL_TIM_Encoder_Stop_IT+0x106>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b04      	cmp	r3, #4
 8007456:	d104      	bne.n	8007462 <HAL_TIM_Encoder_Stop_IT+0xee>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007460:	e00b      	b.n	800747a <HAL_TIM_Encoder_Stop_IT+0x106>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b08      	cmp	r3, #8
 8007466:	d104      	bne.n	8007472 <HAL_TIM_Encoder_Stop_IT+0xfe>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007470:	e003      	b.n	800747a <HAL_TIM_Encoder_Stop_IT+0x106>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d104      	bne.n	800748a <HAL_TIM_Encoder_Stop_IT+0x116>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007488:	e024      	b.n	80074d4 <HAL_TIM_Encoder_Stop_IT+0x160>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b04      	cmp	r3, #4
 800748e:	d104      	bne.n	800749a <HAL_TIM_Encoder_Stop_IT+0x126>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007498:	e01c      	b.n	80074d4 <HAL_TIM_Encoder_Stop_IT+0x160>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b08      	cmp	r3, #8
 800749e:	d104      	bne.n	80074aa <HAL_TIM_Encoder_Stop_IT+0x136>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a8:	e014      	b.n	80074d4 <HAL_TIM_Encoder_Stop_IT+0x160>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074b2:	e00f      	b.n	80074d4 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d122      	bne.n	800753a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d11b      	bne.n	800753a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f06f 0202 	mvn.w	r2, #2
 800750a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	f003 0303 	and.w	r3, r3, #3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7fd fbab 	bl	8004c7c <HAL_TIM_IC_CaptureCallback>
 8007526:	e005      	b.n	8007534 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f9a4 	bl	8007876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f9aa 	bl	8007888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b04      	cmp	r3, #4
 8007546:	d122      	bne.n	800758e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f003 0304 	and.w	r3, r3, #4
 8007552:	2b04      	cmp	r3, #4
 8007554:	d11b      	bne.n	800758e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f06f 0204 	mvn.w	r2, #4
 800755e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7fd fb81 	bl	8004c7c <HAL_TIM_IC_CaptureCallback>
 800757a:	e005      	b.n	8007588 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f97a 	bl	8007876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f980 	bl	8007888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	2b08      	cmp	r3, #8
 800759a:	d122      	bne.n	80075e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b08      	cmp	r3, #8
 80075a8:	d11b      	bne.n	80075e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f06f 0208 	mvn.w	r2, #8
 80075b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2204      	movs	r2, #4
 80075b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	f003 0303 	and.w	r3, r3, #3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7fd fb57 	bl	8004c7c <HAL_TIM_IC_CaptureCallback>
 80075ce:	e005      	b.n	80075dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f950 	bl	8007876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f956 	bl	8007888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b10      	cmp	r3, #16
 80075ee:	d122      	bne.n	8007636 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f003 0310 	and.w	r3, r3, #16
 80075fa:	2b10      	cmp	r3, #16
 80075fc:	d11b      	bne.n	8007636 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f06f 0210 	mvn.w	r2, #16
 8007606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2208      	movs	r2, #8
 800760c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7fd fb2d 	bl	8004c7c <HAL_TIM_IC_CaptureCallback>
 8007622:	e005      	b.n	8007630 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f926 	bl	8007876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f92c 	bl	8007888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b01      	cmp	r3, #1
 8007642:	d10e      	bne.n	8007662 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b01      	cmp	r3, #1
 8007650:	d107      	bne.n	8007662 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f06f 0201 	mvn.w	r2, #1
 800765a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7fd fac9 	bl	8004bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766c:	2b80      	cmp	r3, #128	; 0x80
 800766e:	d10e      	bne.n	800768e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767a:	2b80      	cmp	r3, #128	; 0x80
 800767c:	d107      	bne.n	800768e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fa92 	bl	8007bb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007698:	2b40      	cmp	r3, #64	; 0x40
 800769a:	d10e      	bne.n	80076ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a6:	2b40      	cmp	r3, #64	; 0x40
 80076a8:	d107      	bne.n	80076ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f8f0 	bl	800789a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d10e      	bne.n	80076e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f003 0320 	and.w	r3, r3, #32
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d107      	bne.n	80076e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f06f 0220 	mvn.w	r2, #32
 80076de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fa5d 	bl	8007ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076e6:	bf00      	nop
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <HAL_TIM_ConfigClockSource+0x18>
 8007702:	2302      	movs	r3, #2
 8007704:	e0b3      	b.n	800786e <HAL_TIM_ConfigClockSource+0x180>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2202      	movs	r2, #2
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007724:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800772c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800773e:	d03e      	beq.n	80077be <HAL_TIM_ConfigClockSource+0xd0>
 8007740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007744:	f200 8087 	bhi.w	8007856 <HAL_TIM_ConfigClockSource+0x168>
 8007748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774c:	f000 8085 	beq.w	800785a <HAL_TIM_ConfigClockSource+0x16c>
 8007750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007754:	d87f      	bhi.n	8007856 <HAL_TIM_ConfigClockSource+0x168>
 8007756:	2b70      	cmp	r3, #112	; 0x70
 8007758:	d01a      	beq.n	8007790 <HAL_TIM_ConfigClockSource+0xa2>
 800775a:	2b70      	cmp	r3, #112	; 0x70
 800775c:	d87b      	bhi.n	8007856 <HAL_TIM_ConfigClockSource+0x168>
 800775e:	2b60      	cmp	r3, #96	; 0x60
 8007760:	d050      	beq.n	8007804 <HAL_TIM_ConfigClockSource+0x116>
 8007762:	2b60      	cmp	r3, #96	; 0x60
 8007764:	d877      	bhi.n	8007856 <HAL_TIM_ConfigClockSource+0x168>
 8007766:	2b50      	cmp	r3, #80	; 0x50
 8007768:	d03c      	beq.n	80077e4 <HAL_TIM_ConfigClockSource+0xf6>
 800776a:	2b50      	cmp	r3, #80	; 0x50
 800776c:	d873      	bhi.n	8007856 <HAL_TIM_ConfigClockSource+0x168>
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d058      	beq.n	8007824 <HAL_TIM_ConfigClockSource+0x136>
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	d86f      	bhi.n	8007856 <HAL_TIM_ConfigClockSource+0x168>
 8007776:	2b30      	cmp	r3, #48	; 0x30
 8007778:	d064      	beq.n	8007844 <HAL_TIM_ConfigClockSource+0x156>
 800777a:	2b30      	cmp	r3, #48	; 0x30
 800777c:	d86b      	bhi.n	8007856 <HAL_TIM_ConfigClockSource+0x168>
 800777e:	2b20      	cmp	r3, #32
 8007780:	d060      	beq.n	8007844 <HAL_TIM_ConfigClockSource+0x156>
 8007782:	2b20      	cmp	r3, #32
 8007784:	d867      	bhi.n	8007856 <HAL_TIM_ConfigClockSource+0x168>
 8007786:	2b00      	cmp	r3, #0
 8007788:	d05c      	beq.n	8007844 <HAL_TIM_ConfigClockSource+0x156>
 800778a:	2b10      	cmp	r3, #16
 800778c:	d05a      	beq.n	8007844 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800778e:	e062      	b.n	8007856 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	6899      	ldr	r1, [r3, #8]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f000 f95d 	bl	8007a5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	609a      	str	r2, [r3, #8]
      break;
 80077bc:	e04e      	b.n	800785c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	6899      	ldr	r1, [r3, #8]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f000 f946 	bl	8007a5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077e0:	609a      	str	r2, [r3, #8]
      break;
 80077e2:	e03b      	b.n	800785c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	6859      	ldr	r1, [r3, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	461a      	mov	r2, r3
 80077f2:	f000 f8bd 	bl	8007970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2150      	movs	r1, #80	; 0x50
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 f914 	bl	8007a2a <TIM_ITRx_SetConfig>
      break;
 8007802:	e02b      	b.n	800785c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6818      	ldr	r0, [r3, #0]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	6859      	ldr	r1, [r3, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	461a      	mov	r2, r3
 8007812:	f000 f8db 	bl	80079cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2160      	movs	r1, #96	; 0x60
 800781c:	4618      	mov	r0, r3
 800781e:	f000 f904 	bl	8007a2a <TIM_ITRx_SetConfig>
      break;
 8007822:	e01b      	b.n	800785c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6818      	ldr	r0, [r3, #0]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	6859      	ldr	r1, [r3, #4]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	461a      	mov	r2, r3
 8007832:	f000 f89d 	bl	8007970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2140      	movs	r1, #64	; 0x40
 800783c:	4618      	mov	r0, r3
 800783e:	f000 f8f4 	bl	8007a2a <TIM_ITRx_SetConfig>
      break;
 8007842:	e00b      	b.n	800785c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f000 f8eb 	bl	8007a2a <TIM_ITRx_SetConfig>
        break;
 8007854:	e002      	b.n	800785c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007856:	bf00      	nop
 8007858:	e000      	b.n	800785c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800785a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr

08007888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	bc80      	pop	{r7}
 8007898:	4770      	bx	lr

0800789a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bc80      	pop	{r7}
 80078aa:	4770      	bx	lr

080078ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a29      	ldr	r2, [pc, #164]	; (8007964 <TIM_Base_SetConfig+0xb8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00b      	beq.n	80078dc <TIM_Base_SetConfig+0x30>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ca:	d007      	beq.n	80078dc <TIM_Base_SetConfig+0x30>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a26      	ldr	r2, [pc, #152]	; (8007968 <TIM_Base_SetConfig+0xbc>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_Base_SetConfig+0x30>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a25      	ldr	r2, [pc, #148]	; (800796c <TIM_Base_SetConfig+0xc0>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d108      	bne.n	80078ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a1c      	ldr	r2, [pc, #112]	; (8007964 <TIM_Base_SetConfig+0xb8>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00b      	beq.n	800790e <TIM_Base_SetConfig+0x62>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078fc:	d007      	beq.n	800790e <TIM_Base_SetConfig+0x62>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a19      	ldr	r2, [pc, #100]	; (8007968 <TIM_Base_SetConfig+0xbc>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d003      	beq.n	800790e <TIM_Base_SetConfig+0x62>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a18      	ldr	r2, [pc, #96]	; (800796c <TIM_Base_SetConfig+0xc0>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d108      	bne.n	8007920 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4313      	orrs	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a07      	ldr	r2, [pc, #28]	; (8007964 <TIM_Base_SetConfig+0xb8>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d103      	bne.n	8007954 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	691a      	ldr	r2, [r3, #16]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	615a      	str	r2, [r3, #20]
}
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	bc80      	pop	{r7}
 8007962:	4770      	bx	lr
 8007964:	40012c00 	.word	0x40012c00
 8007968:	40000400 	.word	0x40000400
 800796c:	40000800 	.word	0x40000800

08007970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f023 0201 	bic.w	r2, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800799a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f023 030a 	bic.w	r3, r3, #10
 80079ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	621a      	str	r2, [r3, #32]
}
 80079c2:	bf00      	nop
 80079c4:	371c      	adds	r7, #28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bc80      	pop	{r7}
 80079ca:	4770      	bx	lr

080079cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	f023 0210 	bic.w	r2, r3, #16
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	031b      	lsls	r3, r3, #12
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	011b      	lsls	r3, r3, #4
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	621a      	str	r2, [r3, #32]
}
 8007a20:	bf00      	nop
 8007a22:	371c      	adds	r7, #28
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bc80      	pop	{r7}
 8007a28:	4770      	bx	lr

08007a2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f043 0307 	orr.w	r3, r3, #7
 8007a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	609a      	str	r2, [r3, #8]
}
 8007a54:	bf00      	nop
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bc80      	pop	{r7}
 8007a5c:	4770      	bx	lr

08007a5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b087      	sub	sp, #28
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	021a      	lsls	r2, r3, #8
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	431a      	orrs	r2, r3
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	609a      	str	r2, [r3, #8]
}
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bc80      	pop	{r7}
 8007a9a:	4770      	bx	lr

08007a9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f003 031f 	and.w	r3, r3, #31
 8007aae:	2201      	movs	r2, #1
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a1a      	ldr	r2, [r3, #32]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	43db      	mvns	r3, r3
 8007abe:	401a      	ands	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	f003 031f 	and.w	r3, r3, #31
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	621a      	str	r2, [r3, #32]
}
 8007ada:	bf00      	nop
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bc80      	pop	{r7}
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e046      	b.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00e      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b48:	d009      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a12      	ldr	r2, [pc, #72]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d004      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a10      	ldr	r2, [pc, #64]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d10c      	bne.n	8007b78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bc80      	pop	{r7}
 8007b92:	4770      	bx	lr
 8007b94:	40012c00 	.word	0x40012c00
 8007b98:	40000400 	.word	0x40000400
 8007b9c:	40000800 	.word	0x40000800

08007ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bc80      	pop	{r7}
 8007bb0:	4770      	bx	lr

08007bb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e03f      	b.n	8007c56 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d106      	bne.n	8007bf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fd f9a6 	bl	8004f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2224      	movs	r2, #36	; 0x24
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fd9b 	bl	8008744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	695a      	ldr	r2, [r3, #20]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b08a      	sub	sp, #40	; 0x28
 8007c62:	af02      	add	r7, sp, #8
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	603b      	str	r3, [r7, #0]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	d17c      	bne.n	8007d78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <HAL_UART_Transmit+0x2c>
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e075      	b.n	8007d7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d101      	bne.n	8007c9c <HAL_UART_Transmit+0x3e>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e06e      	b.n	8007d7a <HAL_UART_Transmit+0x11c>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2221      	movs	r2, #33	; 0x21
 8007cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cb2:	f7fd fb8f 	bl	80053d4 <HAL_GetTick>
 8007cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	88fa      	ldrh	r2, [r7, #6]
 8007cbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	88fa      	ldrh	r2, [r7, #6]
 8007cc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ccc:	d108      	bne.n	8007ce0 <HAL_UART_Transmit+0x82>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d104      	bne.n	8007ce0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	61bb      	str	r3, [r7, #24]
 8007cde:	e003      	b.n	8007ce8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007cf0:	e02a      	b.n	8007d48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2180      	movs	r1, #128	; 0x80
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fb0d 	bl	800831c <UART_WaitOnFlagUntilTimeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e036      	b.n	8007d7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10b      	bne.n	8007d2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	3302      	adds	r3, #2
 8007d26:	61bb      	str	r3, [r7, #24]
 8007d28:	e007      	b.n	8007d3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	781a      	ldrb	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	3301      	adds	r3, #1
 8007d38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	3b01      	subs	r3, #1
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1cf      	bne.n	8007cf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2140      	movs	r1, #64	; 0x40
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 fadd 	bl	800831c <UART_WaitOnFlagUntilTimeout>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e006      	b.n	8007d7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e000      	b.n	8007d7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d78:	2302      	movs	r3, #2
  }
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3720      	adds	r7, #32
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b086      	sub	sp, #24
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d13c      	bne.n	8007e16 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007da2:	88fb      	ldrh	r3, [r7, #6]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e035      	b.n	8007e18 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d101      	bne.n	8007dba <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007db6:	2302      	movs	r3, #2
 8007db8:	e02e      	b.n	8007e18 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007dc8:	88fb      	ldrh	r3, [r7, #6]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	68b9      	ldr	r1, [r7, #8]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 faee 	bl	80083b0 <UART_Start_Receive_DMA>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d119      	bne.n	8007e12 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d113      	bne.n	8007e0e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007de6:	2300      	movs	r3, #0
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	613b      	str	r3, [r7, #16]
 8007dfa:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0210 	orr.w	r2, r2, #16
 8007e0a:	60da      	str	r2, [r3, #12]
 8007e0c:	e001      	b.n	8007e12 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	e000      	b.n	8007e18 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8007e16:	2302      	movs	r3, #2
  }
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08a      	sub	sp, #40	; 0x28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	f003 030f 	and.w	r3, r3, #15
 8007e4e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10d      	bne.n	8007e72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	f003 0320 	and.w	r3, r3, #32
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d008      	beq.n	8007e72 <HAL_UART_IRQHandler+0x52>
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fbc0 	bl	80085f0 <UART_Receive_IT>
      return;
 8007e70:	e17b      	b.n	800816a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 80b1 	beq.w	8007fdc <HAL_UART_IRQHandler+0x1bc>
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d105      	bne.n	8007e90 <HAL_UART_IRQHandler+0x70>
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 80a6 	beq.w	8007fdc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <HAL_UART_IRQHandler+0x90>
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d005      	beq.n	8007eb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	f043 0201 	orr.w	r2, r3, #1
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	f003 0304 	and.w	r3, r3, #4
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00a      	beq.n	8007ed0 <HAL_UART_IRQHandler+0xb0>
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d005      	beq.n	8007ed0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	f043 0202 	orr.w	r2, r3, #2
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <HAL_UART_IRQHandler+0xd0>
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d005      	beq.n	8007ef0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee8:	f043 0204 	orr.w	r2, r3, #4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00f      	beq.n	8007f1a <HAL_UART_IRQHandler+0xfa>
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	f003 0320 	and.w	r3, r3, #32
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <HAL_UART_IRQHandler+0xee>
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d005      	beq.n	8007f1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	f043 0208 	orr.w	r2, r3, #8
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 811e 	beq.w	8008160 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	f003 0320 	and.w	r3, r3, #32
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <HAL_UART_IRQHandler+0x11e>
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	f003 0320 	and.w	r3, r3, #32
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fb59 	bl	80085f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bf14      	ite	ne
 8007f4c:	2301      	movne	r3, #1
 8007f4e:	2300      	moveq	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <HAL_UART_IRQHandler+0x146>
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d031      	beq.n	8007fca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fa9b 	bl	80084a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d023      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	695a      	ldr	r2, [r3, #20]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f88:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d013      	beq.n	8007fba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f96:	4a76      	ldr	r2, [pc, #472]	; (8008170 <HAL_UART_IRQHandler+0x350>)
 8007f98:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fd fc48 	bl	8005834 <HAL_DMA_Abort_IT>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d016      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb8:	e00e      	b.n	8007fd8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f8f5 	bl	80081aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc0:	e00a      	b.n	8007fd8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f8f1 	bl	80081aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc8:	e006      	b.n	8007fd8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f8ed 	bl	80081aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007fd6:	e0c3      	b.n	8008160 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd8:	bf00      	nop
    return;
 8007fda:	e0c1      	b.n	8008160 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	f040 80a1 	bne.w	8008128 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	f003 0310 	and.w	r3, r3, #16
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 809b 	beq.w	8008128 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	f003 0310 	and.w	r3, r3, #16
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 8095 	beq.w	8008128 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	d04e      	beq.n	80080c0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800802c:	8a3b      	ldrh	r3, [r7, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 8098 	beq.w	8008164 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008038:	8a3a      	ldrh	r2, [r7, #16]
 800803a:	429a      	cmp	r2, r3
 800803c:	f080 8092 	bcs.w	8008164 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	8a3a      	ldrh	r2, [r7, #16]
 8008044:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	2b20      	cmp	r3, #32
 800804e:	d02b      	beq.n	80080a8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800805e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	695a      	ldr	r2, [r3, #20]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0201 	bic.w	r2, r2, #1
 800806e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695a      	ldr	r2, [r3, #20]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800807e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2220      	movs	r2, #32
 8008084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68da      	ldr	r2, [r3, #12]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 0210 	bic.w	r2, r2, #16
 800809c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fd fb8b 	bl	80057be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7fc fdbb 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80080be:	e051      	b.n	8008164 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d047      	beq.n	8008168 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80080d8:	8a7b      	ldrh	r3, [r7, #18]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d044      	beq.n	8008168 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080ec:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695a      	ldr	r2, [r3, #20]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 0201 	bic.w	r2, r2, #1
 80080fc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0210 	bic.w	r2, r2, #16
 800811a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800811c:	8a7b      	ldrh	r3, [r7, #18]
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7fc fd87 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008126:	e01f      	b.n	8008168 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800812e:	2b00      	cmp	r3, #0
 8008130:	d008      	beq.n	8008144 <HAL_UART_IRQHandler+0x324>
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f9f0 	bl	8008522 <UART_Transmit_IT>
    return;
 8008142:	e012      	b.n	800816a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00d      	beq.n	800816a <HAL_UART_IRQHandler+0x34a>
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008154:	2b00      	cmp	r3, #0
 8008156:	d008      	beq.n	800816a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fa31 	bl	80085c0 <UART_EndTransmit_IT>
    return;
 800815e:	e004      	b.n	800816a <HAL_UART_IRQHandler+0x34a>
    return;
 8008160:	bf00      	nop
 8008162:	e002      	b.n	800816a <HAL_UART_IRQHandler+0x34a>
      return;
 8008164:	bf00      	nop
 8008166:	e000      	b.n	800816a <HAL_UART_IRQHandler+0x34a>
      return;
 8008168:	bf00      	nop
  }
}
 800816a:	3728      	adds	r7, #40	; 0x28
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	080084fb 	.word	0x080084fb

08008174 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	bc80      	pop	{r7}
 8008184:	4770      	bx	lr

08008186 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800818e:	bf00      	nop
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	bc80      	pop	{r7}
 8008196:	4770      	bx	lr

08008198 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr

080081aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bc80      	pop	{r7}
 80081ba:	4770      	bx	lr

080081bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d12a      	bne.n	800822e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081ec:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	695a      	ldr	r2, [r3, #20]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0201 	bic.w	r2, r2, #1
 80081fc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	695a      	ldr	r2, [r3, #20]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800820c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2220      	movs	r2, #32
 8008212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821a:	2b01      	cmp	r3, #1
 800821c:	d107      	bne.n	800822e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 0210 	bic.w	r2, r2, #16
 800822c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008232:	2b01      	cmp	r3, #1
 8008234:	d106      	bne.n	8008244 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800823a:	4619      	mov	r1, r3
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7fc fcf9 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008242:	e002      	b.n	800824a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff ff9e 	bl	8008186 <HAL_UART_RxCpltCallback>
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	2b01      	cmp	r3, #1
 8008266:	d108      	bne.n	800827a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800826c:	085b      	lsrs	r3, r3, #1
 800826e:	b29b      	uxth	r3, r3
 8008270:	4619      	mov	r1, r3
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f7fc fcde 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008278:	e002      	b.n	8008280 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff ff8c 	bl	8008198 <HAL_UART_RxHalfCpltCallback>
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bf14      	ite	ne
 80082a8:	2301      	movne	r3, #1
 80082aa:	2300      	moveq	r3, #0
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b21      	cmp	r3, #33	; 0x21
 80082ba:	d108      	bne.n	80082ce <UART_DMAError+0x46>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80082c8:	68b8      	ldr	r0, [r7, #8]
 80082ca:	f000 f8d5 	bl	8008478 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d8:	2b00      	cmp	r3, #0
 80082da:	bf14      	ite	ne
 80082dc:	2301      	movne	r3, #1
 80082de:	2300      	moveq	r3, #0
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b22      	cmp	r3, #34	; 0x22
 80082ee:	d108      	bne.n	8008302 <UART_DMAError+0x7a>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d005      	beq.n	8008302 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2200      	movs	r2, #0
 80082fa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80082fc:	68b8      	ldr	r0, [r7, #8]
 80082fe:	f000 f8d0 	bl	80084a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	f043 0210 	orr.w	r2, r3, #16
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800830e:	68b8      	ldr	r0, [r7, #8]
 8008310:	f7ff ff4b 	bl	80081aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008314:	bf00      	nop
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	603b      	str	r3, [r7, #0]
 8008328:	4613      	mov	r3, r2
 800832a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800832c:	e02c      	b.n	8008388 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	d028      	beq.n	8008388 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d007      	beq.n	800834c <UART_WaitOnFlagUntilTimeout+0x30>
 800833c:	f7fd f84a 	bl	80053d4 <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	429a      	cmp	r2, r3
 800834a:	d21d      	bcs.n	8008388 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800835a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695a      	ldr	r2, [r3, #20]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0201 	bic.w	r2, r2, #1
 800836a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2220      	movs	r2, #32
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2220      	movs	r2, #32
 8008378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e00f      	b.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	4013      	ands	r3, r2
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	429a      	cmp	r2, r3
 8008396:	bf0c      	ite	eq
 8008398:	2301      	moveq	r3, #1
 800839a:	2300      	movne	r3, #0
 800839c:	b2db      	uxtb	r3, r3
 800839e:	461a      	mov	r2, r3
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d0c3      	beq.n	800832e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	88fa      	ldrh	r2, [r7, #6]
 80083c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2222      	movs	r2, #34	; 0x22
 80083d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	4a23      	ldr	r2, [pc, #140]	; (800846c <UART_Start_Receive_DMA+0xbc>)
 80083de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	4a22      	ldr	r2, [pc, #136]	; (8008470 <UART_Start_Receive_DMA+0xc0>)
 80083e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ec:	4a21      	ldr	r2, [pc, #132]	; (8008474 <UART_Start_Receive_DMA+0xc4>)
 80083ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f4:	2200      	movs	r2, #0
 80083f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80083f8:	f107 0308 	add.w	r3, r7, #8
 80083fc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3304      	adds	r3, #4
 8008408:	4619      	mov	r1, r3
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	88fb      	ldrh	r3, [r7, #6]
 8008410:	f7fd f976 	bl	8005700 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008414:	2300      	movs	r3, #0
 8008416:	613b      	str	r3, [r7, #16]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	613b      	str	r3, [r7, #16]
 8008428:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68da      	ldr	r2, [r3, #12]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008440:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	695a      	ldr	r2, [r3, #20]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0201 	orr.w	r2, r2, #1
 8008450:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	695a      	ldr	r2, [r3, #20]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008460:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	080081bd 	.word	0x080081bd
 8008470:	08008253 	.word	0x08008253
 8008474:	08008289 	.word	0x08008289

08008478 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800848e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	bc80      	pop	{r7}
 80084a0:	4770      	bx	lr

080084a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80084b8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695a      	ldr	r2, [r3, #20]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 0201 	bic.w	r2, r2, #1
 80084c8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d107      	bne.n	80084e2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68da      	ldr	r2, [r3, #12]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0210 	bic.w	r2, r2, #16
 80084e0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2220      	movs	r2, #32
 80084e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bc80      	pop	{r7}
 80084f8:	4770      	bx	lr

080084fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7ff fe48 	bl	80081aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800851a:	bf00      	nop
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b21      	cmp	r3, #33	; 0x21
 8008534:	d13e      	bne.n	80085b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853e:	d114      	bne.n	800856a <UART_Transmit_IT+0x48>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d110      	bne.n	800856a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800855c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	1c9a      	adds	r2, r3, #2
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	621a      	str	r2, [r3, #32]
 8008568:	e008      	b.n	800857c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	1c59      	adds	r1, r3, #1
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6211      	str	r1, [r2, #32]
 8008574:	781a      	ldrb	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b01      	subs	r3, #1
 8008584:	b29b      	uxth	r3, r3
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	4619      	mov	r1, r3
 800858a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10f      	bne.n	80085b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800859e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	e000      	b.n	80085b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085b4:	2302      	movs	r3, #2
  }
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bc80      	pop	{r7}
 80085be:	4770      	bx	lr

080085c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2220      	movs	r2, #32
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7ff fdc7 	bl	8008174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b22      	cmp	r3, #34	; 0x22
 8008602:	f040 8099 	bne.w	8008738 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860e:	d117      	bne.n	8008640 <UART_Receive_IT+0x50>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d113      	bne.n	8008640 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008618:	2300      	movs	r3, #0
 800861a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008620:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	b29b      	uxth	r3, r3
 800862a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862e:	b29a      	uxth	r2, r3
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008638:	1c9a      	adds	r2, r3, #2
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	629a      	str	r2, [r3, #40]	; 0x28
 800863e:	e026      	b.n	800868e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008644:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008646:	2300      	movs	r3, #0
 8008648:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008652:	d007      	beq.n	8008664 <UART_Receive_IT+0x74>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <UART_Receive_IT+0x82>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d106      	bne.n	8008672 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	b2da      	uxtb	r2, r3
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	701a      	strb	r2, [r3, #0]
 8008670:	e008      	b.n	8008684 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867e:	b2da      	uxtb	r2, r3
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008692:	b29b      	uxth	r3, r3
 8008694:	3b01      	subs	r3, #1
 8008696:	b29b      	uxth	r3, r3
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	4619      	mov	r1, r3
 800869c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d148      	bne.n	8008734 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 0220 	bic.w	r2, r2, #32
 80086b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	695a      	ldr	r2, [r3, #20]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0201 	bic.w	r2, r2, #1
 80086d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d123      	bne.n	800872a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 0210 	bic.w	r2, r2, #16
 80086f6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0310 	and.w	r3, r3, #16
 8008702:	2b10      	cmp	r3, #16
 8008704:	d10a      	bne.n	800871c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7fc fa86 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
 8008728:	e002      	b.n	8008730 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7ff fd2b 	bl	8008186 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	e002      	b.n	800873a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	e000      	b.n	800873a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008738:	2302      	movs	r3, #2
  }
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689a      	ldr	r2, [r3, #8]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	431a      	orrs	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	4313      	orrs	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800877e:	f023 030c 	bic.w	r3, r3, #12
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	6812      	ldr	r2, [r2, #0]
 8008786:	68b9      	ldr	r1, [r7, #8]
 8008788:	430b      	orrs	r3, r1
 800878a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	430a      	orrs	r2, r1
 80087a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a2c      	ldr	r2, [pc, #176]	; (8008858 <UART_SetConfig+0x114>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d103      	bne.n	80087b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80087ac:	f7fd ff88 	bl	80066c0 <HAL_RCC_GetPCLK2Freq>
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	e002      	b.n	80087ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80087b4:	f7fd ff70 	bl	8006698 <HAL_RCC_GetPCLK1Freq>
 80087b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4613      	mov	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	009a      	lsls	r2, r3, #2
 80087c4:	441a      	add	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d0:	4a22      	ldr	r2, [pc, #136]	; (800885c <UART_SetConfig+0x118>)
 80087d2:	fba2 2303 	umull	r2, r3, r2, r3
 80087d6:	095b      	lsrs	r3, r3, #5
 80087d8:	0119      	lsls	r1, r3, #4
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	009a      	lsls	r2, r3, #2
 80087e4:	441a      	add	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80087f0:	4b1a      	ldr	r3, [pc, #104]	; (800885c <UART_SetConfig+0x118>)
 80087f2:	fba3 0302 	umull	r0, r3, r3, r2
 80087f6:	095b      	lsrs	r3, r3, #5
 80087f8:	2064      	movs	r0, #100	; 0x64
 80087fa:	fb00 f303 	mul.w	r3, r0, r3
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	011b      	lsls	r3, r3, #4
 8008802:	3332      	adds	r3, #50	; 0x32
 8008804:	4a15      	ldr	r2, [pc, #84]	; (800885c <UART_SetConfig+0x118>)
 8008806:	fba2 2303 	umull	r2, r3, r2, r3
 800880a:	095b      	lsrs	r3, r3, #5
 800880c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008810:	4419      	add	r1, r3
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	009a      	lsls	r2, r3, #2
 800881c:	441a      	add	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	fbb2 f2f3 	udiv	r2, r2, r3
 8008828:	4b0c      	ldr	r3, [pc, #48]	; (800885c <UART_SetConfig+0x118>)
 800882a:	fba3 0302 	umull	r0, r3, r3, r2
 800882e:	095b      	lsrs	r3, r3, #5
 8008830:	2064      	movs	r0, #100	; 0x64
 8008832:	fb00 f303 	mul.w	r3, r0, r3
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	011b      	lsls	r3, r3, #4
 800883a:	3332      	adds	r3, #50	; 0x32
 800883c:	4a07      	ldr	r2, [pc, #28]	; (800885c <UART_SetConfig+0x118>)
 800883e:	fba2 2303 	umull	r2, r3, r2, r3
 8008842:	095b      	lsrs	r3, r3, #5
 8008844:	f003 020f 	and.w	r2, r3, #15
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	440a      	add	r2, r1
 800884e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	40013800 	.word	0x40013800
 800885c:	51eb851f 	.word	0x51eb851f

08008860 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008864:	4904      	ldr	r1, [pc, #16]	; (8008878 <MX_FATFS_Init+0x18>)
 8008866:	4805      	ldr	r0, [pc, #20]	; (800887c <MX_FATFS_Init+0x1c>)
 8008868:	f000 f8b0 	bl	80089cc <FATFS_LinkDriver>
 800886c:	4603      	mov	r3, r0
 800886e:	461a      	mov	r2, r3
 8008870:	4b03      	ldr	r3, [pc, #12]	; (8008880 <MX_FATFS_Init+0x20>)
 8008872:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008874:	bf00      	nop
 8008876:	bd80      	pop	{r7, pc}
 8008878:	200006f0 	.word	0x200006f0
 800887c:	200000c4 	.word	0x200000c4
 8008880:	200006ec 	.word	0x200006ec

08008884 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_initialize(pdrv);
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	4618      	mov	r0, r3
 8008892:	f7fb fa85 	bl	8003da0 <SD_disk_initialize>
 8008896:	4603      	mov	r3, r0
 8008898:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	4603      	mov	r3, r0
 80088aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fb fb5c 	bl	8003f6c <SD_disk_status>
 80088b4:	4603      	mov	r3, r0
 80088b6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
 80088ca:	603b      	str	r3, [r7, #0]
 80088cc:	4603      	mov	r3, r0
 80088ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80088d0:	7bf8      	ldrb	r0, [r7, #15]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	68b9      	ldr	r1, [r7, #8]
 80088d8:	f7fb fb5c 	bl	8003f94 <SD_disk_read>
 80088dc:	4603      	mov	r3, r0
 80088de:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
 80088f2:	603b      	str	r3, [r7, #0]
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80088f8:	7bf8      	ldrb	r0, [r7, #15]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	f7fb fbb2 	bl	8004068 <SD_disk_write>
 8008904:	4603      	mov	r3, r0
 8008906:	b2db      	uxtb	r3, r3
//    return RES_OK;
  /* USER CODE END WRITE */
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	603a      	str	r2, [r7, #0]
 800891a:	71fb      	strb	r3, [r7, #7]
 800891c:	460b      	mov	r3, r1
 800891e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	79b9      	ldrb	r1, [r7, #6]
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f7fb fc22 	bl	8004170 <SD_disk_ioctl>
 800892c:	4603      	mov	r3, r0
 800892e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	4613      	mov	r3, r2
 8008944:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008946:	2301      	movs	r3, #1
 8008948:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800894e:	4b1e      	ldr	r3, [pc, #120]	; (80089c8 <FATFS_LinkDriverEx+0x90>)
 8008950:	7a5b      	ldrb	r3, [r3, #9]
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b01      	cmp	r3, #1
 8008956:	d831      	bhi.n	80089bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008958:	4b1b      	ldr	r3, [pc, #108]	; (80089c8 <FATFS_LinkDriverEx+0x90>)
 800895a:	7a5b      	ldrb	r3, [r3, #9]
 800895c:	b2db      	uxtb	r3, r3
 800895e:	461a      	mov	r2, r3
 8008960:	4b19      	ldr	r3, [pc, #100]	; (80089c8 <FATFS_LinkDriverEx+0x90>)
 8008962:	2100      	movs	r1, #0
 8008964:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008966:	4b18      	ldr	r3, [pc, #96]	; (80089c8 <FATFS_LinkDriverEx+0x90>)
 8008968:	7a5b      	ldrb	r3, [r3, #9]
 800896a:	b2db      	uxtb	r3, r3
 800896c:	4a16      	ldr	r2, [pc, #88]	; (80089c8 <FATFS_LinkDriverEx+0x90>)
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008976:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <FATFS_LinkDriverEx+0x90>)
 8008978:	7a5b      	ldrb	r3, [r3, #9]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	461a      	mov	r2, r3
 800897e:	4b12      	ldr	r3, [pc, #72]	; (80089c8 <FATFS_LinkDriverEx+0x90>)
 8008980:	4413      	add	r3, r2
 8008982:	79fa      	ldrb	r2, [r7, #7]
 8008984:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008986:	4b10      	ldr	r3, [pc, #64]	; (80089c8 <FATFS_LinkDriverEx+0x90>)
 8008988:	7a5b      	ldrb	r3, [r3, #9]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	b2d1      	uxtb	r1, r2
 8008990:	4a0d      	ldr	r2, [pc, #52]	; (80089c8 <FATFS_LinkDriverEx+0x90>)
 8008992:	7251      	strb	r1, [r2, #9]
 8008994:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008996:	7dbb      	ldrb	r3, [r7, #22]
 8008998:	3330      	adds	r3, #48	; 0x30
 800899a:	b2da      	uxtb	r2, r3
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	3301      	adds	r3, #1
 80089a4:	223a      	movs	r2, #58	; 0x3a
 80089a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	3302      	adds	r3, #2
 80089ac:	222f      	movs	r2, #47	; 0x2f
 80089ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	3303      	adds	r3, #3
 80089b4:	2200      	movs	r2, #0
 80089b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr
 80089c8:	200006f4 	.word	0x200006f4

080089cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80089d6:	2200      	movs	r2, #0
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7ff ffac 	bl	8008938 <FATFS_LinkDriverEx>
 80089e0:	4603      	mov	r3, r0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <__errno>:
 80089ec:	4b01      	ldr	r3, [pc, #4]	; (80089f4 <__errno+0x8>)
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	200000d8 	.word	0x200000d8

080089f8 <_fgetc_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	460c      	mov	r4, r1
 80089fc:	4605      	mov	r5, r0
 80089fe:	b118      	cbz	r0, 8008a08 <_fgetc_r+0x10>
 8008a00:	6983      	ldr	r3, [r0, #24]
 8008a02:	b90b      	cbnz	r3, 8008a08 <_fgetc_r+0x10>
 8008a04:	f000 f898 	bl	8008b38 <__sinit>
 8008a08:	4b18      	ldr	r3, [pc, #96]	; (8008a6c <_fgetc_r+0x74>)
 8008a0a:	429c      	cmp	r4, r3
 8008a0c:	d11e      	bne.n	8008a4c <_fgetc_r+0x54>
 8008a0e:	686c      	ldr	r4, [r5, #4]
 8008a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a12:	07d8      	lsls	r0, r3, #31
 8008a14:	d405      	bmi.n	8008a22 <_fgetc_r+0x2a>
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	0599      	lsls	r1, r3, #22
 8008a1a:	d402      	bmi.n	8008a22 <_fgetc_r+0x2a>
 8008a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a1e:	f000 fa7e 	bl	8008f1e <__retarget_lock_acquire_recursive>
 8008a22:	6863      	ldr	r3, [r4, #4]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	6063      	str	r3, [r4, #4]
 8008a2a:	da19      	bge.n	8008a60 <_fgetc_r+0x68>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	4621      	mov	r1, r4
 8008a30:	f000 fc4a 	bl	80092c8 <__srget_r>
 8008a34:	4605      	mov	r5, r0
 8008a36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a38:	07da      	lsls	r2, r3, #31
 8008a3a:	d405      	bmi.n	8008a48 <_fgetc_r+0x50>
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	059b      	lsls	r3, r3, #22
 8008a40:	d402      	bmi.n	8008a48 <_fgetc_r+0x50>
 8008a42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a44:	f000 fa6d 	bl	8008f22 <__retarget_lock_release_recursive>
 8008a48:	4628      	mov	r0, r5
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	4b08      	ldr	r3, [pc, #32]	; (8008a70 <_fgetc_r+0x78>)
 8008a4e:	429c      	cmp	r4, r3
 8008a50:	d101      	bne.n	8008a56 <_fgetc_r+0x5e>
 8008a52:	68ac      	ldr	r4, [r5, #8]
 8008a54:	e7dc      	b.n	8008a10 <_fgetc_r+0x18>
 8008a56:	4b07      	ldr	r3, [pc, #28]	; (8008a74 <_fgetc_r+0x7c>)
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	bf08      	it	eq
 8008a5c:	68ec      	ldreq	r4, [r5, #12]
 8008a5e:	e7d7      	b.n	8008a10 <_fgetc_r+0x18>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	6022      	str	r2, [r4, #0]
 8008a66:	781d      	ldrb	r5, [r3, #0]
 8008a68:	e7e5      	b.n	8008a36 <_fgetc_r+0x3e>
 8008a6a:	bf00      	nop
 8008a6c:	0800be1c 	.word	0x0800be1c
 8008a70:	0800be3c 	.word	0x0800be3c
 8008a74:	0800bdfc 	.word	0x0800bdfc

08008a78 <fgetc>:
 8008a78:	4b02      	ldr	r3, [pc, #8]	; (8008a84 <fgetc+0xc>)
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	f7ff bfbb 	b.w	80089f8 <_fgetc_r>
 8008a82:	bf00      	nop
 8008a84:	200000d8 	.word	0x200000d8

08008a88 <std>:
 8008a88:	2300      	movs	r3, #0
 8008a8a:	b510      	push	{r4, lr}
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a96:	6083      	str	r3, [r0, #8]
 8008a98:	8181      	strh	r1, [r0, #12]
 8008a9a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a9c:	81c2      	strh	r2, [r0, #14]
 8008a9e:	6183      	str	r3, [r0, #24]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	2208      	movs	r2, #8
 8008aa4:	305c      	adds	r0, #92	; 0x5c
 8008aa6:	f000 faa3 	bl	8008ff0 <memset>
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <std+0x38>)
 8008aac:	6224      	str	r4, [r4, #32]
 8008aae:	6263      	str	r3, [r4, #36]	; 0x24
 8008ab0:	4b04      	ldr	r3, [pc, #16]	; (8008ac4 <std+0x3c>)
 8008ab2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ab4:	4b04      	ldr	r3, [pc, #16]	; (8008ac8 <std+0x40>)
 8008ab6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ab8:	4b04      	ldr	r3, [pc, #16]	; (8008acc <std+0x44>)
 8008aba:	6323      	str	r3, [r4, #48]	; 0x30
 8008abc:	bd10      	pop	{r4, pc}
 8008abe:	bf00      	nop
 8008ac0:	08009381 	.word	0x08009381
 8008ac4:	080093a7 	.word	0x080093a7
 8008ac8:	080093df 	.word	0x080093df
 8008acc:	08009403 	.word	0x08009403

08008ad0 <_cleanup_r>:
 8008ad0:	4901      	ldr	r1, [pc, #4]	; (8008ad8 <_cleanup_r+0x8>)
 8008ad2:	f000 b9de 	b.w	8008e92 <_fwalk_reent>
 8008ad6:	bf00      	nop
 8008ad8:	0800a67d 	.word	0x0800a67d

08008adc <__sfmoreglue>:
 8008adc:	2268      	movs	r2, #104	; 0x68
 8008ade:	b570      	push	{r4, r5, r6, lr}
 8008ae0:	1e4d      	subs	r5, r1, #1
 8008ae2:	4355      	muls	r5, r2
 8008ae4:	460e      	mov	r6, r1
 8008ae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008aea:	f000 faf1 	bl	80090d0 <_malloc_r>
 8008aee:	4604      	mov	r4, r0
 8008af0:	b140      	cbz	r0, 8008b04 <__sfmoreglue+0x28>
 8008af2:	2100      	movs	r1, #0
 8008af4:	e9c0 1600 	strd	r1, r6, [r0]
 8008af8:	300c      	adds	r0, #12
 8008afa:	60a0      	str	r0, [r4, #8]
 8008afc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b00:	f000 fa76 	bl	8008ff0 <memset>
 8008b04:	4620      	mov	r0, r4
 8008b06:	bd70      	pop	{r4, r5, r6, pc}

08008b08 <__sfp_lock_acquire>:
 8008b08:	4801      	ldr	r0, [pc, #4]	; (8008b10 <__sfp_lock_acquire+0x8>)
 8008b0a:	f000 ba08 	b.w	8008f1e <__retarget_lock_acquire_recursive>
 8008b0e:	bf00      	nop
 8008b10:	20000702 	.word	0x20000702

08008b14 <__sfp_lock_release>:
 8008b14:	4801      	ldr	r0, [pc, #4]	; (8008b1c <__sfp_lock_release+0x8>)
 8008b16:	f000 ba04 	b.w	8008f22 <__retarget_lock_release_recursive>
 8008b1a:	bf00      	nop
 8008b1c:	20000702 	.word	0x20000702

08008b20 <__sinit_lock_acquire>:
 8008b20:	4801      	ldr	r0, [pc, #4]	; (8008b28 <__sinit_lock_acquire+0x8>)
 8008b22:	f000 b9fc 	b.w	8008f1e <__retarget_lock_acquire_recursive>
 8008b26:	bf00      	nop
 8008b28:	20000703 	.word	0x20000703

08008b2c <__sinit_lock_release>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	; (8008b34 <__sinit_lock_release+0x8>)
 8008b2e:	f000 b9f8 	b.w	8008f22 <__retarget_lock_release_recursive>
 8008b32:	bf00      	nop
 8008b34:	20000703 	.word	0x20000703

08008b38 <__sinit>:
 8008b38:	b510      	push	{r4, lr}
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	f7ff fff0 	bl	8008b20 <__sinit_lock_acquire>
 8008b40:	69a3      	ldr	r3, [r4, #24]
 8008b42:	b11b      	cbz	r3, 8008b4c <__sinit+0x14>
 8008b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b48:	f7ff bff0 	b.w	8008b2c <__sinit_lock_release>
 8008b4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b50:	6523      	str	r3, [r4, #80]	; 0x50
 8008b52:	4b13      	ldr	r3, [pc, #76]	; (8008ba0 <__sinit+0x68>)
 8008b54:	4a13      	ldr	r2, [pc, #76]	; (8008ba4 <__sinit+0x6c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b5a:	42a3      	cmp	r3, r4
 8008b5c:	bf08      	it	eq
 8008b5e:	2301      	moveq	r3, #1
 8008b60:	4620      	mov	r0, r4
 8008b62:	bf08      	it	eq
 8008b64:	61a3      	streq	r3, [r4, #24]
 8008b66:	f000 f81f 	bl	8008ba8 <__sfp>
 8008b6a:	6060      	str	r0, [r4, #4]
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f000 f81b 	bl	8008ba8 <__sfp>
 8008b72:	60a0      	str	r0, [r4, #8]
 8008b74:	4620      	mov	r0, r4
 8008b76:	f000 f817 	bl	8008ba8 <__sfp>
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	2104      	movs	r1, #4
 8008b7e:	60e0      	str	r0, [r4, #12]
 8008b80:	6860      	ldr	r0, [r4, #4]
 8008b82:	f7ff ff81 	bl	8008a88 <std>
 8008b86:	2201      	movs	r2, #1
 8008b88:	2109      	movs	r1, #9
 8008b8a:	68a0      	ldr	r0, [r4, #8]
 8008b8c:	f7ff ff7c 	bl	8008a88 <std>
 8008b90:	2202      	movs	r2, #2
 8008b92:	2112      	movs	r1, #18
 8008b94:	68e0      	ldr	r0, [r4, #12]
 8008b96:	f7ff ff77 	bl	8008a88 <std>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	61a3      	str	r3, [r4, #24]
 8008b9e:	e7d1      	b.n	8008b44 <__sinit+0xc>
 8008ba0:	0800be5c 	.word	0x0800be5c
 8008ba4:	08008ad1 	.word	0x08008ad1

08008ba8 <__sfp>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	4607      	mov	r7, r0
 8008bac:	f7ff ffac 	bl	8008b08 <__sfp_lock_acquire>
 8008bb0:	4b1e      	ldr	r3, [pc, #120]	; (8008c2c <__sfp+0x84>)
 8008bb2:	681e      	ldr	r6, [r3, #0]
 8008bb4:	69b3      	ldr	r3, [r6, #24]
 8008bb6:	b913      	cbnz	r3, 8008bbe <__sfp+0x16>
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f7ff ffbd 	bl	8008b38 <__sinit>
 8008bbe:	3648      	adds	r6, #72	; 0x48
 8008bc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	d503      	bpl.n	8008bd0 <__sfp+0x28>
 8008bc8:	6833      	ldr	r3, [r6, #0]
 8008bca:	b30b      	cbz	r3, 8008c10 <__sfp+0x68>
 8008bcc:	6836      	ldr	r6, [r6, #0]
 8008bce:	e7f7      	b.n	8008bc0 <__sfp+0x18>
 8008bd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bd4:	b9d5      	cbnz	r5, 8008c0c <__sfp+0x64>
 8008bd6:	4b16      	ldr	r3, [pc, #88]	; (8008c30 <__sfp+0x88>)
 8008bd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bdc:	60e3      	str	r3, [r4, #12]
 8008bde:	6665      	str	r5, [r4, #100]	; 0x64
 8008be0:	f000 f99a 	bl	8008f18 <__retarget_lock_init_recursive>
 8008be4:	f7ff ff96 	bl	8008b14 <__sfp_lock_release>
 8008be8:	2208      	movs	r2, #8
 8008bea:	4629      	mov	r1, r5
 8008bec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bf4:	6025      	str	r5, [r4, #0]
 8008bf6:	61a5      	str	r5, [r4, #24]
 8008bf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bfc:	f000 f9f8 	bl	8008ff0 <memset>
 8008c00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c08:	4620      	mov	r0, r4
 8008c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c0c:	3468      	adds	r4, #104	; 0x68
 8008c0e:	e7d9      	b.n	8008bc4 <__sfp+0x1c>
 8008c10:	2104      	movs	r1, #4
 8008c12:	4638      	mov	r0, r7
 8008c14:	f7ff ff62 	bl	8008adc <__sfmoreglue>
 8008c18:	4604      	mov	r4, r0
 8008c1a:	6030      	str	r0, [r6, #0]
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d1d5      	bne.n	8008bcc <__sfp+0x24>
 8008c20:	f7ff ff78 	bl	8008b14 <__sfp_lock_release>
 8008c24:	230c      	movs	r3, #12
 8008c26:	603b      	str	r3, [r7, #0]
 8008c28:	e7ee      	b.n	8008c08 <__sfp+0x60>
 8008c2a:	bf00      	nop
 8008c2c:	0800be5c 	.word	0x0800be5c
 8008c30:	ffff0001 	.word	0xffff0001

08008c34 <_fopen_r>:
 8008c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c36:	460f      	mov	r7, r1
 8008c38:	4611      	mov	r1, r2
 8008c3a:	aa01      	add	r2, sp, #4
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	f001 fd6b 	bl	800a718 <__sflags>
 8008c42:	4606      	mov	r6, r0
 8008c44:	b918      	cbnz	r0, 8008c4e <_fopen_r+0x1a>
 8008c46:	2400      	movs	r4, #0
 8008c48:	4620      	mov	r0, r4
 8008c4a:	b003      	add	sp, #12
 8008c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f7ff ffaa 	bl	8008ba8 <__sfp>
 8008c54:	4604      	mov	r4, r0
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d0f5      	beq.n	8008c46 <_fopen_r+0x12>
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8008c60:	4628      	mov	r0, r5
 8008c62:	9a01      	ldr	r2, [sp, #4]
 8008c64:	f000 faa8 	bl	80091b8 <_open_r>
 8008c68:	1e07      	subs	r7, r0, #0
 8008c6a:	da09      	bge.n	8008c80 <_fopen_r+0x4c>
 8008c6c:	2500      	movs	r5, #0
 8008c6e:	f7ff ff4b 	bl	8008b08 <__sfp_lock_acquire>
 8008c72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c74:	81a5      	strh	r5, [r4, #12]
 8008c76:	f000 f950 	bl	8008f1a <__retarget_lock_close_recursive>
 8008c7a:	f7ff ff4b 	bl	8008b14 <__sfp_lock_release>
 8008c7e:	e7e2      	b.n	8008c46 <_fopen_r+0x12>
 8008c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c82:	07db      	lsls	r3, r3, #31
 8008c84:	d405      	bmi.n	8008c92 <_fopen_r+0x5e>
 8008c86:	89a3      	ldrh	r3, [r4, #12]
 8008c88:	0598      	lsls	r0, r3, #22
 8008c8a:	d402      	bmi.n	8008c92 <_fopen_r+0x5e>
 8008c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c8e:	f000 f946 	bl	8008f1e <__retarget_lock_acquire_recursive>
 8008c92:	4b0e      	ldr	r3, [pc, #56]	; (8008ccc <_fopen_r+0x98>)
 8008c94:	05f1      	lsls	r1, r6, #23
 8008c96:	6263      	str	r3, [r4, #36]	; 0x24
 8008c98:	4b0d      	ldr	r3, [pc, #52]	; (8008cd0 <_fopen_r+0x9c>)
 8008c9a:	81e7      	strh	r7, [r4, #14]
 8008c9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c9e:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <_fopen_r+0xa0>)
 8008ca0:	81a6      	strh	r6, [r4, #12]
 8008ca2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <_fopen_r+0xa4>)
 8008ca6:	6224      	str	r4, [r4, #32]
 8008ca8:	6323      	str	r3, [r4, #48]	; 0x30
 8008caa:	d505      	bpl.n	8008cb8 <_fopen_r+0x84>
 8008cac:	2302      	movs	r3, #2
 8008cae:	2200      	movs	r2, #0
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 f81a 	bl	8008cec <_fseek_r>
 8008cb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cba:	07da      	lsls	r2, r3, #31
 8008cbc:	d4c4      	bmi.n	8008c48 <_fopen_r+0x14>
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	059b      	lsls	r3, r3, #22
 8008cc2:	d4c1      	bmi.n	8008c48 <_fopen_r+0x14>
 8008cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cc6:	f000 f92c 	bl	8008f22 <__retarget_lock_release_recursive>
 8008cca:	e7bd      	b.n	8008c48 <_fopen_r+0x14>
 8008ccc:	08009381 	.word	0x08009381
 8008cd0:	080093a7 	.word	0x080093a7
 8008cd4:	080093df 	.word	0x080093df
 8008cd8:	08009403 	.word	0x08009403

08008cdc <fopen>:
 8008cdc:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <fopen+0xc>)
 8008cde:	460a      	mov	r2, r1
 8008ce0:	4601      	mov	r1, r0
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	f7ff bfa6 	b.w	8008c34 <_fopen_r>
 8008ce8:	200000d8 	.word	0x200000d8

08008cec <_fseek_r>:
 8008cec:	f000 b800 	b.w	8008cf0 <_fseeko_r>

08008cf0 <_fseeko_r>:
 8008cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	4617      	mov	r7, r2
 8008cf8:	461d      	mov	r5, r3
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	b118      	cbz	r0, 8008d06 <_fseeko_r+0x16>
 8008cfe:	6983      	ldr	r3, [r0, #24]
 8008d00:	b90b      	cbnz	r3, 8008d06 <_fseeko_r+0x16>
 8008d02:	f7ff ff19 	bl	8008b38 <__sinit>
 8008d06:	4b51      	ldr	r3, [pc, #324]	; (8008e4c <_fseeko_r+0x15c>)
 8008d08:	429c      	cmp	r4, r3
 8008d0a:	d122      	bne.n	8008d52 <_fseeko_r+0x62>
 8008d0c:	6874      	ldr	r4, [r6, #4]
 8008d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d10:	07d9      	lsls	r1, r3, #31
 8008d12:	d405      	bmi.n	8008d20 <_fseeko_r+0x30>
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	059a      	lsls	r2, r3, #22
 8008d18:	d402      	bmi.n	8008d20 <_fseeko_r+0x30>
 8008d1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d1c:	f000 f8ff 	bl	8008f1e <__retarget_lock_acquire_recursive>
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8008d26:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8008d2a:	d103      	bne.n	8008d34 <_fseeko_r+0x44>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f001 fca4 	bl	800a67c <_fflush_r>
 8008d34:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8008d38:	f1b8 0f00 	cmp.w	r8, #0
 8008d3c:	d113      	bne.n	8008d66 <_fseeko_r+0x76>
 8008d3e:	231d      	movs	r3, #29
 8008d40:	6033      	str	r3, [r6, #0]
 8008d42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d44:	07d9      	lsls	r1, r3, #31
 8008d46:	d578      	bpl.n	8008e3a <_fseeko_r+0x14a>
 8008d48:	f04f 35ff 	mov.w	r5, #4294967295
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d52:	4b3f      	ldr	r3, [pc, #252]	; (8008e50 <_fseeko_r+0x160>)
 8008d54:	429c      	cmp	r4, r3
 8008d56:	d101      	bne.n	8008d5c <_fseeko_r+0x6c>
 8008d58:	68b4      	ldr	r4, [r6, #8]
 8008d5a:	e7d8      	b.n	8008d0e <_fseeko_r+0x1e>
 8008d5c:	4b3d      	ldr	r3, [pc, #244]	; (8008e54 <_fseeko_r+0x164>)
 8008d5e:	429c      	cmp	r4, r3
 8008d60:	bf08      	it	eq
 8008d62:	68f4      	ldreq	r4, [r6, #12]
 8008d64:	e7d3      	b.n	8008d0e <_fseeko_r+0x1e>
 8008d66:	2d01      	cmp	r5, #1
 8008d68:	d036      	beq.n	8008dd8 <_fseeko_r+0xe8>
 8008d6a:	f035 0302 	bics.w	r3, r5, #2
 8008d6e:	d162      	bne.n	8008e36 <_fseeko_r+0x146>
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	b91b      	cbnz	r3, 8008d7c <_fseeko_r+0x8c>
 8008d74:	4621      	mov	r1, r4
 8008d76:	4630      	mov	r0, r6
 8008d78:	f000 f8fa 	bl	8008f70 <__smakebuf_r>
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f001 fc7c 	bl	800a67c <_fflush_r>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d1dc      	bne.n	8008d42 <_fseeko_r+0x52>
 8008d88:	462b      	mov	r3, r5
 8008d8a:	463a      	mov	r2, r7
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	6a21      	ldr	r1, [r4, #32]
 8008d90:	47c0      	blx	r8
 8008d92:	3001      	adds	r0, #1
 8008d94:	d0d5      	beq.n	8008d42 <_fseeko_r+0x52>
 8008d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d98:	b141      	cbz	r1, 8008dac <_fseeko_r+0xbc>
 8008d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d9e:	4299      	cmp	r1, r3
 8008da0:	d002      	beq.n	8008da8 <_fseeko_r+0xb8>
 8008da2:	4630      	mov	r0, r6
 8008da4:	f000 f92c 	bl	8009000 <_free_r>
 8008da8:	2300      	movs	r3, #0
 8008daa:	6363      	str	r3, [r4, #52]	; 0x34
 8008dac:	2600      	movs	r6, #0
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	2208      	movs	r2, #8
 8008db2:	6023      	str	r3, [r4, #0]
 8008db4:	89a3      	ldrh	r3, [r4, #12]
 8008db6:	4631      	mov	r1, r6
 8008db8:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8008dbc:	6066      	str	r6, [r4, #4]
 8008dbe:	81a3      	strh	r3, [r4, #12]
 8008dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008dc4:	f000 f914 	bl	8008ff0 <memset>
 8008dc8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008dca:	f015 0501 	ands.w	r5, r5, #1
 8008dce:	d13b      	bne.n	8008e48 <_fseeko_r+0x158>
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	059b      	lsls	r3, r3, #22
 8008dd4:	d4ba      	bmi.n	8008d4c <_fseeko_r+0x5c>
 8008dd6:	e021      	b.n	8008e1c <_fseeko_r+0x12c>
 8008dd8:	4621      	mov	r1, r4
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f001 fc4e 	bl	800a67c <_fflush_r>
 8008de0:	89a2      	ldrh	r2, [r4, #12]
 8008de2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008de6:	d00c      	beq.n	8008e02 <_fseeko_r+0x112>
 8008de8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	075a      	lsls	r2, r3, #29
 8008dee:	d519      	bpl.n	8008e24 <_fseeko_r+0x134>
 8008df0:	6863      	ldr	r3, [r4, #4]
 8008df2:	1aed      	subs	r5, r5, r3
 8008df4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008df6:	b10b      	cbz	r3, 8008dfc <_fseeko_r+0x10c>
 8008df8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dfa:	1aed      	subs	r5, r5, r3
 8008dfc:	442f      	add	r7, r5
 8008dfe:	2500      	movs	r5, #0
 8008e00:	e7b6      	b.n	8008d70 <_fseeko_r+0x80>
 8008e02:	462b      	mov	r3, r5
 8008e04:	4630      	mov	r0, r6
 8008e06:	6a21      	ldr	r1, [r4, #32]
 8008e08:	47c0      	blx	r8
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	d1ec      	bne.n	8008dea <_fseeko_r+0xfa>
 8008e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e12:	07d8      	lsls	r0, r3, #31
 8008e14:	d498      	bmi.n	8008d48 <_fseeko_r+0x58>
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	0599      	lsls	r1, r3, #22
 8008e1a:	d495      	bmi.n	8008d48 <_fseeko_r+0x58>
 8008e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e1e:	f000 f880 	bl	8008f22 <__retarget_lock_release_recursive>
 8008e22:	e793      	b.n	8008d4c <_fseeko_r+0x5c>
 8008e24:	0718      	lsls	r0, r3, #28
 8008e26:	d5e9      	bpl.n	8008dfc <_fseeko_r+0x10c>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	6922      	ldr	r2, [r4, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0e5      	beq.n	8008dfc <_fseeko_r+0x10c>
 8008e30:	1a9b      	subs	r3, r3, r2
 8008e32:	441d      	add	r5, r3
 8008e34:	e7e2      	b.n	8008dfc <_fseeko_r+0x10c>
 8008e36:	2316      	movs	r3, #22
 8008e38:	e782      	b.n	8008d40 <_fseeko_r+0x50>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	059a      	lsls	r2, r3, #22
 8008e3e:	d483      	bmi.n	8008d48 <_fseeko_r+0x58>
 8008e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e42:	f000 f86e 	bl	8008f22 <__retarget_lock_release_recursive>
 8008e46:	e77f      	b.n	8008d48 <_fseeko_r+0x58>
 8008e48:	4635      	mov	r5, r6
 8008e4a:	e77f      	b.n	8008d4c <_fseeko_r+0x5c>
 8008e4c:	0800be1c 	.word	0x0800be1c
 8008e50:	0800be3c 	.word	0x0800be3c
 8008e54:	0800bdfc 	.word	0x0800bdfc

08008e58 <_fwalk>:
 8008e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5c:	460f      	mov	r7, r1
 8008e5e:	2600      	movs	r6, #0
 8008e60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e64:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8008e68:	f1b8 0801 	subs.w	r8, r8, #1
 8008e6c:	d505      	bpl.n	8008e7a <_fwalk+0x22>
 8008e6e:	6824      	ldr	r4, [r4, #0]
 8008e70:	2c00      	cmp	r4, #0
 8008e72:	d1f7      	bne.n	8008e64 <_fwalk+0xc>
 8008e74:	4630      	mov	r0, r6
 8008e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e7a:	89ab      	ldrh	r3, [r5, #12]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d906      	bls.n	8008e8e <_fwalk+0x36>
 8008e80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e84:	3301      	adds	r3, #1
 8008e86:	d002      	beq.n	8008e8e <_fwalk+0x36>
 8008e88:	4628      	mov	r0, r5
 8008e8a:	47b8      	blx	r7
 8008e8c:	4306      	orrs	r6, r0
 8008e8e:	3568      	adds	r5, #104	; 0x68
 8008e90:	e7ea      	b.n	8008e68 <_fwalk+0x10>

08008e92 <_fwalk_reent>:
 8008e92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e96:	4606      	mov	r6, r0
 8008e98:	4688      	mov	r8, r1
 8008e9a:	2700      	movs	r7, #0
 8008e9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ea4:	f1b9 0901 	subs.w	r9, r9, #1
 8008ea8:	d505      	bpl.n	8008eb6 <_fwalk_reent+0x24>
 8008eaa:	6824      	ldr	r4, [r4, #0]
 8008eac:	2c00      	cmp	r4, #0
 8008eae:	d1f7      	bne.n	8008ea0 <_fwalk_reent+0xe>
 8008eb0:	4638      	mov	r0, r7
 8008eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eb6:	89ab      	ldrh	r3, [r5, #12]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d907      	bls.n	8008ecc <_fwalk_reent+0x3a>
 8008ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	d003      	beq.n	8008ecc <_fwalk_reent+0x3a>
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	47c0      	blx	r8
 8008eca:	4307      	orrs	r7, r0
 8008ecc:	3568      	adds	r5, #104	; 0x68
 8008ece:	e7e9      	b.n	8008ea4 <_fwalk_reent+0x12>

08008ed0 <__libc_init_array>:
 8008ed0:	b570      	push	{r4, r5, r6, lr}
 8008ed2:	2600      	movs	r6, #0
 8008ed4:	4d0c      	ldr	r5, [pc, #48]	; (8008f08 <__libc_init_array+0x38>)
 8008ed6:	4c0d      	ldr	r4, [pc, #52]	; (8008f0c <__libc_init_array+0x3c>)
 8008ed8:	1b64      	subs	r4, r4, r5
 8008eda:	10a4      	asrs	r4, r4, #2
 8008edc:	42a6      	cmp	r6, r4
 8008ede:	d109      	bne.n	8008ef4 <__libc_init_array+0x24>
 8008ee0:	f002 fdb2 	bl	800ba48 <_init>
 8008ee4:	2600      	movs	r6, #0
 8008ee6:	4d0a      	ldr	r5, [pc, #40]	; (8008f10 <__libc_init_array+0x40>)
 8008ee8:	4c0a      	ldr	r4, [pc, #40]	; (8008f14 <__libc_init_array+0x44>)
 8008eea:	1b64      	subs	r4, r4, r5
 8008eec:	10a4      	asrs	r4, r4, #2
 8008eee:	42a6      	cmp	r6, r4
 8008ef0:	d105      	bne.n	8008efe <__libc_init_array+0x2e>
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef8:	4798      	blx	r3
 8008efa:	3601      	adds	r6, #1
 8008efc:	e7ee      	b.n	8008edc <__libc_init_array+0xc>
 8008efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f02:	4798      	blx	r3
 8008f04:	3601      	adds	r6, #1
 8008f06:	e7f2      	b.n	8008eee <__libc_init_array+0x1e>
 8008f08:	0800c2cc 	.word	0x0800c2cc
 8008f0c:	0800c2cc 	.word	0x0800c2cc
 8008f10:	0800c2cc 	.word	0x0800c2cc
 8008f14:	0800c2d0 	.word	0x0800c2d0

08008f18 <__retarget_lock_init_recursive>:
 8008f18:	4770      	bx	lr

08008f1a <__retarget_lock_close_recursive>:
 8008f1a:	4770      	bx	lr

08008f1c <__retarget_lock_acquire>:
 8008f1c:	4770      	bx	lr

08008f1e <__retarget_lock_acquire_recursive>:
 8008f1e:	4770      	bx	lr

08008f20 <__retarget_lock_release>:
 8008f20:	4770      	bx	lr

08008f22 <__retarget_lock_release_recursive>:
 8008f22:	4770      	bx	lr

08008f24 <__swhatbuf_r>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	460e      	mov	r6, r1
 8008f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	2900      	cmp	r1, #0
 8008f30:	461d      	mov	r5, r3
 8008f32:	b096      	sub	sp, #88	; 0x58
 8008f34:	da08      	bge.n	8008f48 <__swhatbuf_r+0x24>
 8008f36:	2200      	movs	r2, #0
 8008f38:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f3c:	602a      	str	r2, [r5, #0]
 8008f3e:	061a      	lsls	r2, r3, #24
 8008f40:	d410      	bmi.n	8008f64 <__swhatbuf_r+0x40>
 8008f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f46:	e00e      	b.n	8008f66 <__swhatbuf_r+0x42>
 8008f48:	466a      	mov	r2, sp
 8008f4a:	f001 fc1b 	bl	800a784 <_fstat_r>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	dbf1      	blt.n	8008f36 <__swhatbuf_r+0x12>
 8008f52:	9a01      	ldr	r2, [sp, #4]
 8008f54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f5c:	425a      	negs	r2, r3
 8008f5e:	415a      	adcs	r2, r3
 8008f60:	602a      	str	r2, [r5, #0]
 8008f62:	e7ee      	b.n	8008f42 <__swhatbuf_r+0x1e>
 8008f64:	2340      	movs	r3, #64	; 0x40
 8008f66:	2000      	movs	r0, #0
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	b016      	add	sp, #88	; 0x58
 8008f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f70 <__smakebuf_r>:
 8008f70:	898b      	ldrh	r3, [r1, #12]
 8008f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f74:	079d      	lsls	r5, r3, #30
 8008f76:	4606      	mov	r6, r0
 8008f78:	460c      	mov	r4, r1
 8008f7a:	d507      	bpl.n	8008f8c <__smakebuf_r+0x1c>
 8008f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	6123      	str	r3, [r4, #16]
 8008f84:	2301      	movs	r3, #1
 8008f86:	6163      	str	r3, [r4, #20]
 8008f88:	b002      	add	sp, #8
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	466a      	mov	r2, sp
 8008f8e:	ab01      	add	r3, sp, #4
 8008f90:	f7ff ffc8 	bl	8008f24 <__swhatbuf_r>
 8008f94:	9900      	ldr	r1, [sp, #0]
 8008f96:	4605      	mov	r5, r0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f000 f899 	bl	80090d0 <_malloc_r>
 8008f9e:	b948      	cbnz	r0, 8008fb4 <__smakebuf_r+0x44>
 8008fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa4:	059a      	lsls	r2, r3, #22
 8008fa6:	d4ef      	bmi.n	8008f88 <__smakebuf_r+0x18>
 8008fa8:	f023 0303 	bic.w	r3, r3, #3
 8008fac:	f043 0302 	orr.w	r3, r3, #2
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	e7e3      	b.n	8008f7c <__smakebuf_r+0xc>
 8008fb4:	4b0d      	ldr	r3, [pc, #52]	; (8008fec <__smakebuf_r+0x7c>)
 8008fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	6020      	str	r0, [r4, #0]
 8008fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	9b00      	ldr	r3, [sp, #0]
 8008fc4:	6120      	str	r0, [r4, #16]
 8008fc6:	6163      	str	r3, [r4, #20]
 8008fc8:	9b01      	ldr	r3, [sp, #4]
 8008fca:	b15b      	cbz	r3, 8008fe4 <__smakebuf_r+0x74>
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fd2:	f001 fc31 	bl	800a838 <_isatty_r>
 8008fd6:	b128      	cbz	r0, 8008fe4 <__smakebuf_r+0x74>
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	f023 0303 	bic.w	r3, r3, #3
 8008fde:	f043 0301 	orr.w	r3, r3, #1
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	89a0      	ldrh	r0, [r4, #12]
 8008fe6:	4305      	orrs	r5, r0
 8008fe8:	81a5      	strh	r5, [r4, #12]
 8008fea:	e7cd      	b.n	8008f88 <__smakebuf_r+0x18>
 8008fec:	08008ad1 	.word	0x08008ad1

08008ff0 <memset>:
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	4402      	add	r2, r0
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d100      	bne.n	8008ffa <memset+0xa>
 8008ff8:	4770      	bx	lr
 8008ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8008ffe:	e7f9      	b.n	8008ff4 <memset+0x4>

08009000 <_free_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4605      	mov	r5, r0
 8009004:	2900      	cmp	r1, #0
 8009006:	d040      	beq.n	800908a <_free_r+0x8a>
 8009008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800900c:	1f0c      	subs	r4, r1, #4
 800900e:	2b00      	cmp	r3, #0
 8009010:	bfb8      	it	lt
 8009012:	18e4      	addlt	r4, r4, r3
 8009014:	f001 fc4c 	bl	800a8b0 <__malloc_lock>
 8009018:	4a1c      	ldr	r2, [pc, #112]	; (800908c <_free_r+0x8c>)
 800901a:	6813      	ldr	r3, [r2, #0]
 800901c:	b933      	cbnz	r3, 800902c <_free_r+0x2c>
 800901e:	6063      	str	r3, [r4, #4]
 8009020:	6014      	str	r4, [r2, #0]
 8009022:	4628      	mov	r0, r5
 8009024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009028:	f001 bc48 	b.w	800a8bc <__malloc_unlock>
 800902c:	42a3      	cmp	r3, r4
 800902e:	d908      	bls.n	8009042 <_free_r+0x42>
 8009030:	6820      	ldr	r0, [r4, #0]
 8009032:	1821      	adds	r1, r4, r0
 8009034:	428b      	cmp	r3, r1
 8009036:	bf01      	itttt	eq
 8009038:	6819      	ldreq	r1, [r3, #0]
 800903a:	685b      	ldreq	r3, [r3, #4]
 800903c:	1809      	addeq	r1, r1, r0
 800903e:	6021      	streq	r1, [r4, #0]
 8009040:	e7ed      	b.n	800901e <_free_r+0x1e>
 8009042:	461a      	mov	r2, r3
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	b10b      	cbz	r3, 800904c <_free_r+0x4c>
 8009048:	42a3      	cmp	r3, r4
 800904a:	d9fa      	bls.n	8009042 <_free_r+0x42>
 800904c:	6811      	ldr	r1, [r2, #0]
 800904e:	1850      	adds	r0, r2, r1
 8009050:	42a0      	cmp	r0, r4
 8009052:	d10b      	bne.n	800906c <_free_r+0x6c>
 8009054:	6820      	ldr	r0, [r4, #0]
 8009056:	4401      	add	r1, r0
 8009058:	1850      	adds	r0, r2, r1
 800905a:	4283      	cmp	r3, r0
 800905c:	6011      	str	r1, [r2, #0]
 800905e:	d1e0      	bne.n	8009022 <_free_r+0x22>
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	4401      	add	r1, r0
 8009066:	6011      	str	r1, [r2, #0]
 8009068:	6053      	str	r3, [r2, #4]
 800906a:	e7da      	b.n	8009022 <_free_r+0x22>
 800906c:	d902      	bls.n	8009074 <_free_r+0x74>
 800906e:	230c      	movs	r3, #12
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	e7d6      	b.n	8009022 <_free_r+0x22>
 8009074:	6820      	ldr	r0, [r4, #0]
 8009076:	1821      	adds	r1, r4, r0
 8009078:	428b      	cmp	r3, r1
 800907a:	bf01      	itttt	eq
 800907c:	6819      	ldreq	r1, [r3, #0]
 800907e:	685b      	ldreq	r3, [r3, #4]
 8009080:	1809      	addeq	r1, r1, r0
 8009082:	6021      	streq	r1, [r4, #0]
 8009084:	6063      	str	r3, [r4, #4]
 8009086:	6054      	str	r4, [r2, #4]
 8009088:	e7cb      	b.n	8009022 <_free_r+0x22>
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	20000708 	.word	0x20000708

08009090 <sbrk_aligned>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	4e0e      	ldr	r6, [pc, #56]	; (80090cc <sbrk_aligned+0x3c>)
 8009094:	460c      	mov	r4, r1
 8009096:	6831      	ldr	r1, [r6, #0]
 8009098:	4605      	mov	r5, r0
 800909a:	b911      	cbnz	r1, 80090a2 <sbrk_aligned+0x12>
 800909c:	f000 f940 	bl	8009320 <_sbrk_r>
 80090a0:	6030      	str	r0, [r6, #0]
 80090a2:	4621      	mov	r1, r4
 80090a4:	4628      	mov	r0, r5
 80090a6:	f000 f93b 	bl	8009320 <_sbrk_r>
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	d00a      	beq.n	80090c4 <sbrk_aligned+0x34>
 80090ae:	1cc4      	adds	r4, r0, #3
 80090b0:	f024 0403 	bic.w	r4, r4, #3
 80090b4:	42a0      	cmp	r0, r4
 80090b6:	d007      	beq.n	80090c8 <sbrk_aligned+0x38>
 80090b8:	1a21      	subs	r1, r4, r0
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 f930 	bl	8009320 <_sbrk_r>
 80090c0:	3001      	adds	r0, #1
 80090c2:	d101      	bne.n	80090c8 <sbrk_aligned+0x38>
 80090c4:	f04f 34ff 	mov.w	r4, #4294967295
 80090c8:	4620      	mov	r0, r4
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	2000070c 	.word	0x2000070c

080090d0 <_malloc_r>:
 80090d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d4:	1ccd      	adds	r5, r1, #3
 80090d6:	f025 0503 	bic.w	r5, r5, #3
 80090da:	3508      	adds	r5, #8
 80090dc:	2d0c      	cmp	r5, #12
 80090de:	bf38      	it	cc
 80090e0:	250c      	movcc	r5, #12
 80090e2:	2d00      	cmp	r5, #0
 80090e4:	4607      	mov	r7, r0
 80090e6:	db01      	blt.n	80090ec <_malloc_r+0x1c>
 80090e8:	42a9      	cmp	r1, r5
 80090ea:	d905      	bls.n	80090f8 <_malloc_r+0x28>
 80090ec:	230c      	movs	r3, #12
 80090ee:	2600      	movs	r6, #0
 80090f0:	603b      	str	r3, [r7, #0]
 80090f2:	4630      	mov	r0, r6
 80090f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f8:	4e2e      	ldr	r6, [pc, #184]	; (80091b4 <_malloc_r+0xe4>)
 80090fa:	f001 fbd9 	bl	800a8b0 <__malloc_lock>
 80090fe:	6833      	ldr	r3, [r6, #0]
 8009100:	461c      	mov	r4, r3
 8009102:	bb34      	cbnz	r4, 8009152 <_malloc_r+0x82>
 8009104:	4629      	mov	r1, r5
 8009106:	4638      	mov	r0, r7
 8009108:	f7ff ffc2 	bl	8009090 <sbrk_aligned>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	4604      	mov	r4, r0
 8009110:	d14d      	bne.n	80091ae <_malloc_r+0xde>
 8009112:	6834      	ldr	r4, [r6, #0]
 8009114:	4626      	mov	r6, r4
 8009116:	2e00      	cmp	r6, #0
 8009118:	d140      	bne.n	800919c <_malloc_r+0xcc>
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	4631      	mov	r1, r6
 800911e:	4638      	mov	r0, r7
 8009120:	eb04 0803 	add.w	r8, r4, r3
 8009124:	f000 f8fc 	bl	8009320 <_sbrk_r>
 8009128:	4580      	cmp	r8, r0
 800912a:	d13a      	bne.n	80091a2 <_malloc_r+0xd2>
 800912c:	6821      	ldr	r1, [r4, #0]
 800912e:	3503      	adds	r5, #3
 8009130:	1a6d      	subs	r5, r5, r1
 8009132:	f025 0503 	bic.w	r5, r5, #3
 8009136:	3508      	adds	r5, #8
 8009138:	2d0c      	cmp	r5, #12
 800913a:	bf38      	it	cc
 800913c:	250c      	movcc	r5, #12
 800913e:	4638      	mov	r0, r7
 8009140:	4629      	mov	r1, r5
 8009142:	f7ff ffa5 	bl	8009090 <sbrk_aligned>
 8009146:	3001      	adds	r0, #1
 8009148:	d02b      	beq.n	80091a2 <_malloc_r+0xd2>
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	442b      	add	r3, r5
 800914e:	6023      	str	r3, [r4, #0]
 8009150:	e00e      	b.n	8009170 <_malloc_r+0xa0>
 8009152:	6822      	ldr	r2, [r4, #0]
 8009154:	1b52      	subs	r2, r2, r5
 8009156:	d41e      	bmi.n	8009196 <_malloc_r+0xc6>
 8009158:	2a0b      	cmp	r2, #11
 800915a:	d916      	bls.n	800918a <_malloc_r+0xba>
 800915c:	1961      	adds	r1, r4, r5
 800915e:	42a3      	cmp	r3, r4
 8009160:	6025      	str	r5, [r4, #0]
 8009162:	bf18      	it	ne
 8009164:	6059      	strne	r1, [r3, #4]
 8009166:	6863      	ldr	r3, [r4, #4]
 8009168:	bf08      	it	eq
 800916a:	6031      	streq	r1, [r6, #0]
 800916c:	5162      	str	r2, [r4, r5]
 800916e:	604b      	str	r3, [r1, #4]
 8009170:	4638      	mov	r0, r7
 8009172:	f104 060b 	add.w	r6, r4, #11
 8009176:	f001 fba1 	bl	800a8bc <__malloc_unlock>
 800917a:	f026 0607 	bic.w	r6, r6, #7
 800917e:	1d23      	adds	r3, r4, #4
 8009180:	1af2      	subs	r2, r6, r3
 8009182:	d0b6      	beq.n	80090f2 <_malloc_r+0x22>
 8009184:	1b9b      	subs	r3, r3, r6
 8009186:	50a3      	str	r3, [r4, r2]
 8009188:	e7b3      	b.n	80090f2 <_malloc_r+0x22>
 800918a:	6862      	ldr	r2, [r4, #4]
 800918c:	42a3      	cmp	r3, r4
 800918e:	bf0c      	ite	eq
 8009190:	6032      	streq	r2, [r6, #0]
 8009192:	605a      	strne	r2, [r3, #4]
 8009194:	e7ec      	b.n	8009170 <_malloc_r+0xa0>
 8009196:	4623      	mov	r3, r4
 8009198:	6864      	ldr	r4, [r4, #4]
 800919a:	e7b2      	b.n	8009102 <_malloc_r+0x32>
 800919c:	4634      	mov	r4, r6
 800919e:	6876      	ldr	r6, [r6, #4]
 80091a0:	e7b9      	b.n	8009116 <_malloc_r+0x46>
 80091a2:	230c      	movs	r3, #12
 80091a4:	4638      	mov	r0, r7
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	f001 fb88 	bl	800a8bc <__malloc_unlock>
 80091ac:	e7a1      	b.n	80090f2 <_malloc_r+0x22>
 80091ae:	6025      	str	r5, [r4, #0]
 80091b0:	e7de      	b.n	8009170 <_malloc_r+0xa0>
 80091b2:	bf00      	nop
 80091b4:	20000708 	.word	0x20000708

080091b8 <_open_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	4611      	mov	r1, r2
 80091c0:	2200      	movs	r2, #0
 80091c2:	4d05      	ldr	r5, [pc, #20]	; (80091d8 <_open_r+0x20>)
 80091c4:	602a      	str	r2, [r5, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f7fc f83d 	bl	8005246 <_open>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d102      	bne.n	80091d6 <_open_r+0x1e>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	b103      	cbz	r3, 80091d6 <_open_r+0x1e>
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
 80091d8:	20000710 	.word	0x20000710

080091dc <_puts_r>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	460e      	mov	r6, r1
 80091e0:	4605      	mov	r5, r0
 80091e2:	b118      	cbz	r0, 80091ec <_puts_r+0x10>
 80091e4:	6983      	ldr	r3, [r0, #24]
 80091e6:	b90b      	cbnz	r3, 80091ec <_puts_r+0x10>
 80091e8:	f7ff fca6 	bl	8008b38 <__sinit>
 80091ec:	69ab      	ldr	r3, [r5, #24]
 80091ee:	68ac      	ldr	r4, [r5, #8]
 80091f0:	b913      	cbnz	r3, 80091f8 <_puts_r+0x1c>
 80091f2:	4628      	mov	r0, r5
 80091f4:	f7ff fca0 	bl	8008b38 <__sinit>
 80091f8:	4b2c      	ldr	r3, [pc, #176]	; (80092ac <_puts_r+0xd0>)
 80091fa:	429c      	cmp	r4, r3
 80091fc:	d120      	bne.n	8009240 <_puts_r+0x64>
 80091fe:	686c      	ldr	r4, [r5, #4]
 8009200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009202:	07db      	lsls	r3, r3, #31
 8009204:	d405      	bmi.n	8009212 <_puts_r+0x36>
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	0598      	lsls	r0, r3, #22
 800920a:	d402      	bmi.n	8009212 <_puts_r+0x36>
 800920c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800920e:	f7ff fe86 	bl	8008f1e <__retarget_lock_acquire_recursive>
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	0719      	lsls	r1, r3, #28
 8009216:	d51d      	bpl.n	8009254 <_puts_r+0x78>
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	b1db      	cbz	r3, 8009254 <_puts_r+0x78>
 800921c:	3e01      	subs	r6, #1
 800921e:	68a3      	ldr	r3, [r4, #8]
 8009220:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009224:	3b01      	subs	r3, #1
 8009226:	60a3      	str	r3, [r4, #8]
 8009228:	bb39      	cbnz	r1, 800927a <_puts_r+0x9e>
 800922a:	2b00      	cmp	r3, #0
 800922c:	da38      	bge.n	80092a0 <_puts_r+0xc4>
 800922e:	4622      	mov	r2, r4
 8009230:	210a      	movs	r1, #10
 8009232:	4628      	mov	r0, r5
 8009234:	f001 f8ba 	bl	800a3ac <__swbuf_r>
 8009238:	3001      	adds	r0, #1
 800923a:	d011      	beq.n	8009260 <_puts_r+0x84>
 800923c:	250a      	movs	r5, #10
 800923e:	e011      	b.n	8009264 <_puts_r+0x88>
 8009240:	4b1b      	ldr	r3, [pc, #108]	; (80092b0 <_puts_r+0xd4>)
 8009242:	429c      	cmp	r4, r3
 8009244:	d101      	bne.n	800924a <_puts_r+0x6e>
 8009246:	68ac      	ldr	r4, [r5, #8]
 8009248:	e7da      	b.n	8009200 <_puts_r+0x24>
 800924a:	4b1a      	ldr	r3, [pc, #104]	; (80092b4 <_puts_r+0xd8>)
 800924c:	429c      	cmp	r4, r3
 800924e:	bf08      	it	eq
 8009250:	68ec      	ldreq	r4, [r5, #12]
 8009252:	e7d5      	b.n	8009200 <_puts_r+0x24>
 8009254:	4621      	mov	r1, r4
 8009256:	4628      	mov	r0, r5
 8009258:	f001 f90c 	bl	800a474 <__swsetup_r>
 800925c:	2800      	cmp	r0, #0
 800925e:	d0dd      	beq.n	800921c <_puts_r+0x40>
 8009260:	f04f 35ff 	mov.w	r5, #4294967295
 8009264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009266:	07da      	lsls	r2, r3, #31
 8009268:	d405      	bmi.n	8009276 <_puts_r+0x9a>
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	059b      	lsls	r3, r3, #22
 800926e:	d402      	bmi.n	8009276 <_puts_r+0x9a>
 8009270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009272:	f7ff fe56 	bl	8008f22 <__retarget_lock_release_recursive>
 8009276:	4628      	mov	r0, r5
 8009278:	bd70      	pop	{r4, r5, r6, pc}
 800927a:	2b00      	cmp	r3, #0
 800927c:	da04      	bge.n	8009288 <_puts_r+0xac>
 800927e:	69a2      	ldr	r2, [r4, #24]
 8009280:	429a      	cmp	r2, r3
 8009282:	dc06      	bgt.n	8009292 <_puts_r+0xb6>
 8009284:	290a      	cmp	r1, #10
 8009286:	d004      	beq.n	8009292 <_puts_r+0xb6>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	6022      	str	r2, [r4, #0]
 800928e:	7019      	strb	r1, [r3, #0]
 8009290:	e7c5      	b.n	800921e <_puts_r+0x42>
 8009292:	4622      	mov	r2, r4
 8009294:	4628      	mov	r0, r5
 8009296:	f001 f889 	bl	800a3ac <__swbuf_r>
 800929a:	3001      	adds	r0, #1
 800929c:	d1bf      	bne.n	800921e <_puts_r+0x42>
 800929e:	e7df      	b.n	8009260 <_puts_r+0x84>
 80092a0:	250a      	movs	r5, #10
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	1c5a      	adds	r2, r3, #1
 80092a6:	6022      	str	r2, [r4, #0]
 80092a8:	701d      	strb	r5, [r3, #0]
 80092aa:	e7db      	b.n	8009264 <_puts_r+0x88>
 80092ac:	0800be1c 	.word	0x0800be1c
 80092b0:	0800be3c 	.word	0x0800be3c
 80092b4:	0800bdfc 	.word	0x0800bdfc

080092b8 <puts>:
 80092b8:	4b02      	ldr	r3, [pc, #8]	; (80092c4 <puts+0xc>)
 80092ba:	4601      	mov	r1, r0
 80092bc:	6818      	ldr	r0, [r3, #0]
 80092be:	f7ff bf8d 	b.w	80091dc <_puts_r>
 80092c2:	bf00      	nop
 80092c4:	200000d8 	.word	0x200000d8

080092c8 <__srget_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	460c      	mov	r4, r1
 80092cc:	4605      	mov	r5, r0
 80092ce:	b118      	cbz	r0, 80092d8 <__srget_r+0x10>
 80092d0:	6983      	ldr	r3, [r0, #24]
 80092d2:	b90b      	cbnz	r3, 80092d8 <__srget_r+0x10>
 80092d4:	f7ff fc30 	bl	8008b38 <__sinit>
 80092d8:	4b0e      	ldr	r3, [pc, #56]	; (8009314 <__srget_r+0x4c>)
 80092da:	429c      	cmp	r4, r3
 80092dc:	d10d      	bne.n	80092fa <__srget_r+0x32>
 80092de:	686c      	ldr	r4, [r5, #4]
 80092e0:	4621      	mov	r1, r4
 80092e2:	4628      	mov	r0, r5
 80092e4:	f001 fdfe 	bl	800aee4 <__srefill_r>
 80092e8:	b988      	cbnz	r0, 800930e <__srget_r+0x46>
 80092ea:	6863      	ldr	r3, [r4, #4]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	6063      	str	r3, [r4, #4]
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	6022      	str	r2, [r4, #0]
 80092f6:	7818      	ldrb	r0, [r3, #0]
 80092f8:	bd38      	pop	{r3, r4, r5, pc}
 80092fa:	4b07      	ldr	r3, [pc, #28]	; (8009318 <__srget_r+0x50>)
 80092fc:	429c      	cmp	r4, r3
 80092fe:	d101      	bne.n	8009304 <__srget_r+0x3c>
 8009300:	68ac      	ldr	r4, [r5, #8]
 8009302:	e7ed      	b.n	80092e0 <__srget_r+0x18>
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <__srget_r+0x54>)
 8009306:	429c      	cmp	r4, r3
 8009308:	bf08      	it	eq
 800930a:	68ec      	ldreq	r4, [r5, #12]
 800930c:	e7e8      	b.n	80092e0 <__srget_r+0x18>
 800930e:	f04f 30ff 	mov.w	r0, #4294967295
 8009312:	e7f1      	b.n	80092f8 <__srget_r+0x30>
 8009314:	0800be1c 	.word	0x0800be1c
 8009318:	0800be3c 	.word	0x0800be3c
 800931c:	0800bdfc 	.word	0x0800bdfc

08009320 <_sbrk_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	2300      	movs	r3, #0
 8009324:	4d05      	ldr	r5, [pc, #20]	; (800933c <_sbrk_r+0x1c>)
 8009326:	4604      	mov	r4, r0
 8009328:	4608      	mov	r0, r1
 800932a:	602b      	str	r3, [r5, #0]
 800932c:	f7fb ff98 	bl	8005260 <_sbrk>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d102      	bne.n	800933a <_sbrk_r+0x1a>
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	b103      	cbz	r3, 800933a <_sbrk_r+0x1a>
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	20000710 	.word	0x20000710

08009340 <siprintf>:
 8009340:	b40e      	push	{r1, r2, r3}
 8009342:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009346:	b500      	push	{lr}
 8009348:	b09c      	sub	sp, #112	; 0x70
 800934a:	ab1d      	add	r3, sp, #116	; 0x74
 800934c:	9002      	str	r0, [sp, #8]
 800934e:	9006      	str	r0, [sp, #24]
 8009350:	9107      	str	r1, [sp, #28]
 8009352:	9104      	str	r1, [sp, #16]
 8009354:	4808      	ldr	r0, [pc, #32]	; (8009378 <siprintf+0x38>)
 8009356:	4909      	ldr	r1, [pc, #36]	; (800937c <siprintf+0x3c>)
 8009358:	f853 2b04 	ldr.w	r2, [r3], #4
 800935c:	9105      	str	r1, [sp, #20]
 800935e:	6800      	ldr	r0, [r0, #0]
 8009360:	a902      	add	r1, sp, #8
 8009362:	9301      	str	r3, [sp, #4]
 8009364:	f001 fb0c 	bl	800a980 <_svfiprintf_r>
 8009368:	2200      	movs	r2, #0
 800936a:	9b02      	ldr	r3, [sp, #8]
 800936c:	701a      	strb	r2, [r3, #0]
 800936e:	b01c      	add	sp, #112	; 0x70
 8009370:	f85d eb04 	ldr.w	lr, [sp], #4
 8009374:	b003      	add	sp, #12
 8009376:	4770      	bx	lr
 8009378:	200000d8 	.word	0x200000d8
 800937c:	ffff0208 	.word	0xffff0208

08009380 <__sread>:
 8009380:	b510      	push	{r4, lr}
 8009382:	460c      	mov	r4, r1
 8009384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009388:	f001 fd90 	bl	800aeac <_read_r>
 800938c:	2800      	cmp	r0, #0
 800938e:	bfab      	itete	ge
 8009390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009392:	89a3      	ldrhlt	r3, [r4, #12]
 8009394:	181b      	addge	r3, r3, r0
 8009396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800939a:	bfac      	ite	ge
 800939c:	6563      	strge	r3, [r4, #84]	; 0x54
 800939e:	81a3      	strhlt	r3, [r4, #12]
 80093a0:	bd10      	pop	{r4, pc}

080093a2 <__seofread>:
 80093a2:	2000      	movs	r0, #0
 80093a4:	4770      	bx	lr

080093a6 <__swrite>:
 80093a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093aa:	461f      	mov	r7, r3
 80093ac:	898b      	ldrh	r3, [r1, #12]
 80093ae:	4605      	mov	r5, r0
 80093b0:	05db      	lsls	r3, r3, #23
 80093b2:	460c      	mov	r4, r1
 80093b4:	4616      	mov	r6, r2
 80093b6:	d505      	bpl.n	80093c4 <__swrite+0x1e>
 80093b8:	2302      	movs	r3, #2
 80093ba:	2200      	movs	r2, #0
 80093bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c0:	f001 fa4e 	bl	800a860 <_lseek_r>
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	4632      	mov	r2, r6
 80093c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093cc:	81a3      	strh	r3, [r4, #12]
 80093ce:	4628      	mov	r0, r5
 80093d0:	463b      	mov	r3, r7
 80093d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093da:	f001 b839 	b.w	800a450 <_write_r>

080093de <__sseek>:
 80093de:	b510      	push	{r4, lr}
 80093e0:	460c      	mov	r4, r1
 80093e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e6:	f001 fa3b 	bl	800a860 <_lseek_r>
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	bf15      	itete	ne
 80093f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80093f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093fa:	81a3      	strheq	r3, [r4, #12]
 80093fc:	bf18      	it	ne
 80093fe:	81a3      	strhne	r3, [r4, #12]
 8009400:	bd10      	pop	{r4, pc}

08009402 <__sclose>:
 8009402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009406:	f001 b8a7 	b.w	800a558 <_close_r>
	...

0800940c <iso_year_adjust>:
 800940c:	6942      	ldr	r2, [r0, #20]
 800940e:	f240 736c 	movw	r3, #1900	; 0x76c
 8009412:	2a00      	cmp	r2, #0
 8009414:	bfa8      	it	ge
 8009416:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800941a:	4413      	add	r3, r2
 800941c:	0792      	lsls	r2, r2, #30
 800941e:	d105      	bne.n	800942c <iso_year_adjust+0x20>
 8009420:	2164      	movs	r1, #100	; 0x64
 8009422:	fb93 f2f1 	sdiv	r2, r3, r1
 8009426:	fb01 3212 	mls	r2, r1, r2, r3
 800942a:	b9da      	cbnz	r2, 8009464 <iso_year_adjust+0x58>
 800942c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009430:	fb93 f1f2 	sdiv	r1, r3, r2
 8009434:	fb02 3311 	mls	r3, r2, r1, r3
 8009438:	fab3 f383 	clz	r3, r3
 800943c:	095b      	lsrs	r3, r3, #5
 800943e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8009442:	0040      	lsls	r0, r0, #1
 8009444:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8009448:	4418      	add	r0, r3
 800944a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800944e:	4298      	cmp	r0, r3
 8009450:	d03a      	beq.n	80094c8 <iso_year_adjust+0xbc>
 8009452:	dc21      	bgt.n	8009498 <iso_year_adjust+0x8c>
 8009454:	2801      	cmp	r0, #1
 8009456:	dc1a      	bgt.n	800948e <iso_year_adjust+0x82>
 8009458:	2800      	cmp	r0, #0
 800945a:	bfb4      	ite	lt
 800945c:	2000      	movlt	r0, #0
 800945e:	f04f 30ff 	movge.w	r0, #4294967295
 8009462:	4770      	bx	lr
 8009464:	2301      	movs	r3, #1
 8009466:	e7ea      	b.n	800943e <iso_year_adjust+0x32>
 8009468:	2817      	cmp	r0, #23
 800946a:	d813      	bhi.n	8009494 <iso_year_adjust+0x88>
 800946c:	e8df f000 	tbb	[pc, r0]
 8009470:	0c0c0c0c 	.word	0x0c0c0c0c
 8009474:	0c0c1212 	.word	0x0c0c1212
 8009478:	12121212 	.word	0x12121212
 800947c:	12121212 	.word	0x12121212
 8009480:	0c0c1212 	.word	0x0c0c1212
 8009484:	0c0c1212 	.word	0x0c0c1212
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	4770      	bx	lr
 800948e:	380a      	subs	r0, #10
 8009490:	2817      	cmp	r0, #23
 8009492:	d9e9      	bls.n	8009468 <iso_year_adjust+0x5c>
 8009494:	2000      	movs	r0, #0
 8009496:	4770      	bx	lr
 8009498:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800949c:	4298      	cmp	r0, r3
 800949e:	dc06      	bgt.n	80094ae <iso_year_adjust+0xa2>
 80094a0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80094a4:	4298      	cmp	r0, r3
 80094a6:	bfd4      	ite	le
 80094a8:	2000      	movle	r0, #0
 80094aa:	2001      	movgt	r0, #1
 80094ac:	4770      	bx	lr
 80094ae:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80094b2:	3802      	subs	r0, #2
 80094b4:	2815      	cmp	r0, #21
 80094b6:	d8ed      	bhi.n	8009494 <iso_year_adjust+0x88>
 80094b8:	2301      	movs	r3, #1
 80094ba:	4083      	lsls	r3, r0
 80094bc:	4803      	ldr	r0, [pc, #12]	; (80094cc <iso_year_adjust+0xc0>)
 80094be:	4018      	ands	r0, r3
 80094c0:	3800      	subs	r0, #0
 80094c2:	bf18      	it	ne
 80094c4:	2001      	movne	r0, #1
 80094c6:	4770      	bx	lr
 80094c8:	2001      	movs	r0, #1
 80094ca:	4770      	bx	lr
 80094cc:	002a001f 	.word	0x002a001f

080094d0 <__strftime.isra.0>:
 80094d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d4:	461e      	mov	r6, r3
 80094d6:	2300      	movs	r3, #0
 80094d8:	4607      	mov	r7, r0
 80094da:	460d      	mov	r5, r1
 80094dc:	461c      	mov	r4, r3
 80094de:	b08f      	sub	sp, #60	; 0x3c
 80094e0:	9302      	str	r3, [sp, #8]
 80094e2:	7813      	ldrb	r3, [r2, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 84b5 	beq.w	8009e54 <__strftime.isra.0+0x984>
 80094ea:	2b25      	cmp	r3, #37	; 0x25
 80094ec:	d11f      	bne.n	800952e <__strftime.isra.0+0x5e>
 80094ee:	f892 b001 	ldrb.w	fp, [r2, #1]
 80094f2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80094f6:	d024      	beq.n	8009542 <__strftime.isra.0+0x72>
 80094f8:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80094fc:	d021      	beq.n	8009542 <__strftime.isra.0+0x72>
 80094fe:	f04f 0b00 	mov.w	fp, #0
 8009502:	f102 0801 	add.w	r8, r2, #1
 8009506:	f898 2000 	ldrb.w	r2, [r8]
 800950a:	3a31      	subs	r2, #49	; 0x31
 800950c:	2a08      	cmp	r2, #8
 800950e:	d81b      	bhi.n	8009548 <__strftime.isra.0+0x78>
 8009510:	4640      	mov	r0, r8
 8009512:	220a      	movs	r2, #10
 8009514:	a906      	add	r1, sp, #24
 8009516:	f000 fdab 	bl	800a070 <strtoul>
 800951a:	4681      	mov	r9, r0
 800951c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009520:	f898 2000 	ldrb.w	r2, [r8]
 8009524:	2a45      	cmp	r2, #69	; 0x45
 8009526:	d112      	bne.n	800954e <__strftime.isra.0+0x7e>
 8009528:	f108 0801 	add.w	r8, r8, #1
 800952c:	e011      	b.n	8009552 <__strftime.isra.0+0x82>
 800952e:	1e69      	subs	r1, r5, #1
 8009530:	42a1      	cmp	r1, r4
 8009532:	d802      	bhi.n	800953a <__strftime.isra.0+0x6a>
 8009534:	2400      	movs	r4, #0
 8009536:	f000 bc90 	b.w	8009e5a <__strftime.isra.0+0x98a>
 800953a:	553b      	strb	r3, [r7, r4]
 800953c:	3201      	adds	r2, #1
 800953e:	3401      	adds	r4, #1
 8009540:	e7cf      	b.n	80094e2 <__strftime.isra.0+0x12>
 8009542:	f102 0802 	add.w	r8, r2, #2
 8009546:	e7de      	b.n	8009506 <__strftime.isra.0+0x36>
 8009548:	f04f 0900 	mov.w	r9, #0
 800954c:	e7e8      	b.n	8009520 <__strftime.isra.0+0x50>
 800954e:	2a4f      	cmp	r2, #79	; 0x4f
 8009550:	d0ea      	beq.n	8009528 <__strftime.isra.0+0x58>
 8009552:	f898 0000 	ldrb.w	r0, [r8]
 8009556:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800955a:	2a55      	cmp	r2, #85	; 0x55
 800955c:	d8ea      	bhi.n	8009534 <__strftime.isra.0+0x64>
 800955e:	a301      	add	r3, pc, #4	; (adr r3, 8009564 <__strftime.isra.0+0x94>)
 8009560:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8009564:	08009e49 	.word	0x08009e49
 8009568:	08009535 	.word	0x08009535
 800956c:	08009535 	.word	0x08009535
 8009570:	08009535 	.word	0x08009535
 8009574:	08009535 	.word	0x08009535
 8009578:	08009535 	.word	0x08009535
 800957c:	08009535 	.word	0x08009535
 8009580:	08009535 	.word	0x08009535
 8009584:	08009535 	.word	0x08009535
 8009588:	08009535 	.word	0x08009535
 800958c:	08009535 	.word	0x08009535
 8009590:	08009535 	.word	0x08009535
 8009594:	08009535 	.word	0x08009535
 8009598:	08009535 	.word	0x08009535
 800959c:	08009535 	.word	0x08009535
 80095a0:	08009535 	.word	0x08009535
 80095a4:	08009535 	.word	0x08009535
 80095a8:	08009535 	.word	0x08009535
 80095ac:	08009535 	.word	0x08009535
 80095b0:	08009535 	.word	0x08009535
 80095b4:	08009535 	.word	0x08009535
 80095b8:	08009535 	.word	0x08009535
 80095bc:	08009535 	.word	0x08009535
 80095c0:	08009535 	.word	0x08009535
 80095c4:	08009535 	.word	0x08009535
 80095c8:	08009535 	.word	0x08009535
 80095cc:	08009535 	.word	0x08009535
 80095d0:	08009535 	.word	0x08009535
 80095d4:	080096f9 	.word	0x080096f9
 80095d8:	08009751 	.word	0x08009751
 80095dc:	080097bf 	.word	0x080097bf
 80095e0:	0800985d 	.word	0x0800985d
 80095e4:	08009535 	.word	0x08009535
 80095e8:	080098a7 	.word	0x080098a7
 80095ec:	08009995 	.word	0x08009995
 80095f0:	08009a6b 	.word	0x08009a6b
 80095f4:	08009a79 	.word	0x08009a79
 80095f8:	08009535 	.word	0x08009535
 80095fc:	08009535 	.word	0x08009535
 8009600:	08009535 	.word	0x08009535
 8009604:	08009aa9 	.word	0x08009aa9
 8009608:	08009535 	.word	0x08009535
 800960c:	08009535 	.word	0x08009535
 8009610:	08009abd 	.word	0x08009abd
 8009614:	08009535 	.word	0x08009535
 8009618:	08009b0f 	.word	0x08009b0f
 800961c:	08009c21 	.word	0x08009c21
 8009620:	08009c31 	.word	0x08009c31
 8009624:	08009c59 	.word	0x08009c59
 8009628:	08009c69 	.word	0x08009c69
 800962c:	08009d03 	.word	0x08009d03
 8009630:	080097b7 	.word	0x080097b7
 8009634:	08009d2f 	.word	0x08009d2f
 8009638:	08009df7 	.word	0x08009df7
 800963c:	08009535 	.word	0x08009535
 8009640:	08009535 	.word	0x08009535
 8009644:	08009535 	.word	0x08009535
 8009648:	08009535 	.word	0x08009535
 800964c:	08009535 	.word	0x08009535
 8009650:	08009535 	.word	0x08009535
 8009654:	080096bd 	.word	0x080096bd
 8009658:	08009727 	.word	0x08009727
 800965c:	0800977d 	.word	0x0800977d
 8009660:	08009839 	.word	0x08009839
 8009664:	08009839 	.word	0x08009839
 8009668:	08009535 	.word	0x08009535
 800966c:	080098f9 	.word	0x080098f9
 8009670:	08009727 	.word	0x08009727
 8009674:	08009535 	.word	0x08009535
 8009678:	08009a9b 	.word	0x08009a9b
 800967c:	08009a6b 	.word	0x08009a6b
 8009680:	08009a79 	.word	0x08009a79
 8009684:	08009aa3 	.word	0x08009aa3
 8009688:	08009aad 	.word	0x08009aad
 800968c:	08009535 	.word	0x08009535
 8009690:	08009abd 	.word	0x08009abd
 8009694:	08009535 	.word	0x08009535
 8009698:	080097a7 	.word	0x080097a7
 800969c:	08009b21 	.word	0x08009b21
 80096a0:	08009c25 	.word	0x08009c25
 80096a4:	08009c3f 	.word	0x08009c3f
 80096a8:	08009535 	.word	0x08009535
 80096ac:	08009cf5 	.word	0x08009cf5
 80096b0:	080097af 	.word	0x080097af
 80096b4:	08009d13 	.word	0x08009d13
 80096b8:	08009d81 	.word	0x08009d81
 80096bc:	69b3      	ldr	r3, [r6, #24]
 80096be:	4aa9      	ldr	r2, [pc, #676]	; (8009964 <__strftime.isra.0+0x494>)
 80096c0:	3318      	adds	r3, #24
 80096c2:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80096c6:	4648      	mov	r0, r9
 80096c8:	f7f6 fd40 	bl	800014c <strlen>
 80096cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80096d0:	4420      	add	r0, r4
 80096d2:	1e6b      	subs	r3, r5, #1
 80096d4:	42a0      	cmp	r0, r4
 80096d6:	d107      	bne.n	80096e8 <__strftime.isra.0+0x218>
 80096d8:	f898 3000 	ldrb.w	r3, [r8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 83b9 	beq.w	8009e54 <__strftime.isra.0+0x984>
 80096e2:	f108 0201 	add.w	r2, r8, #1
 80096e6:	e6fc      	b.n	80094e2 <__strftime.isra.0+0x12>
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	f67f af23 	bls.w	8009534 <__strftime.isra.0+0x64>
 80096ee:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80096f2:	553a      	strb	r2, [r7, r4]
 80096f4:	3401      	adds	r4, #1
 80096f6:	e7ed      	b.n	80096d4 <__strftime.isra.0+0x204>
 80096f8:	69b2      	ldr	r2, [r6, #24]
 80096fa:	4b9a      	ldr	r3, [pc, #616]	; (8009964 <__strftime.isra.0+0x494>)
 80096fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009700:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8009704:	4648      	mov	r0, r9
 8009706:	f7f6 fd21 	bl	800014c <strlen>
 800970a:	f109 39ff 	add.w	r9, r9, #4294967295
 800970e:	4420      	add	r0, r4
 8009710:	1e6b      	subs	r3, r5, #1
 8009712:	42a0      	cmp	r0, r4
 8009714:	d0e0      	beq.n	80096d8 <__strftime.isra.0+0x208>
 8009716:	42a3      	cmp	r3, r4
 8009718:	f67f af0c 	bls.w	8009534 <__strftime.isra.0+0x64>
 800971c:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009720:	553a      	strb	r2, [r7, r4]
 8009722:	3401      	adds	r4, #1
 8009724:	e7f5      	b.n	8009712 <__strftime.isra.0+0x242>
 8009726:	4b8f      	ldr	r3, [pc, #572]	; (8009964 <__strftime.isra.0+0x494>)
 8009728:	6932      	ldr	r2, [r6, #16]
 800972a:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800972e:	4648      	mov	r0, r9
 8009730:	f7f6 fd0c 	bl	800014c <strlen>
 8009734:	f109 39ff 	add.w	r9, r9, #4294967295
 8009738:	4420      	add	r0, r4
 800973a:	1e6b      	subs	r3, r5, #1
 800973c:	42a0      	cmp	r0, r4
 800973e:	d0cb      	beq.n	80096d8 <__strftime.isra.0+0x208>
 8009740:	42a3      	cmp	r3, r4
 8009742:	f67f aef7 	bls.w	8009534 <__strftime.isra.0+0x64>
 8009746:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800974a:	553a      	strb	r2, [r7, r4]
 800974c:	3401      	adds	r4, #1
 800974e:	e7f5      	b.n	800973c <__strftime.isra.0+0x26c>
 8009750:	6933      	ldr	r3, [r6, #16]
 8009752:	4a84      	ldr	r2, [pc, #528]	; (8009964 <__strftime.isra.0+0x494>)
 8009754:	330c      	adds	r3, #12
 8009756:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800975a:	4648      	mov	r0, r9
 800975c:	f7f6 fcf6 	bl	800014c <strlen>
 8009760:	f109 39ff 	add.w	r9, r9, #4294967295
 8009764:	4420      	add	r0, r4
 8009766:	1e6b      	subs	r3, r5, #1
 8009768:	42a0      	cmp	r0, r4
 800976a:	d0b5      	beq.n	80096d8 <__strftime.isra.0+0x208>
 800976c:	42a3      	cmp	r3, r4
 800976e:	f67f aee1 	bls.w	8009534 <__strftime.isra.0+0x64>
 8009772:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009776:	553a      	strb	r2, [r7, r4]
 8009778:	3401      	adds	r4, #1
 800977a:	e7f5      	b.n	8009768 <__strftime.isra.0+0x298>
 800977c:	4b79      	ldr	r3, [pc, #484]	; (8009964 <__strftime.isra.0+0x494>)
 800977e:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8009782:	4648      	mov	r0, r9
 8009784:	f7f6 fce2 	bl	800014c <strlen>
 8009788:	f899 3000 	ldrb.w	r3, [r9]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d0a3      	beq.n	80096d8 <__strftime.isra.0+0x208>
 8009790:	4633      	mov	r3, r6
 8009792:	464a      	mov	r2, r9
 8009794:	1b29      	subs	r1, r5, r4
 8009796:	1938      	adds	r0, r7, r4
 8009798:	f7ff fe9a 	bl	80094d0 <__strftime.isra.0>
 800979c:	2800      	cmp	r0, #0
 800979e:	f77f aec9 	ble.w	8009534 <__strftime.isra.0+0x64>
 80097a2:	4404      	add	r4, r0
 80097a4:	e798      	b.n	80096d8 <__strftime.isra.0+0x208>
 80097a6:	4b6f      	ldr	r3, [pc, #444]	; (8009964 <__strftime.isra.0+0x494>)
 80097a8:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 80097ac:	e7e9      	b.n	8009782 <__strftime.isra.0+0x2b2>
 80097ae:	4b6d      	ldr	r3, [pc, #436]	; (8009964 <__strftime.isra.0+0x494>)
 80097b0:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 80097b4:	e7e5      	b.n	8009782 <__strftime.isra.0+0x2b2>
 80097b6:	4b6b      	ldr	r3, [pc, #428]	; (8009964 <__strftime.isra.0+0x494>)
 80097b8:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80097bc:	e7e1      	b.n	8009782 <__strftime.isra.0+0x2b2>
 80097be:	496a      	ldr	r1, [pc, #424]	; (8009968 <__strftime.isra.0+0x498>)
 80097c0:	f8d6 a014 	ldr.w	sl, [r6, #20]
 80097c4:	458a      	cmp	sl, r1
 80097c6:	bfac      	ite	ge
 80097c8:	2100      	movge	r1, #0
 80097ca:	2101      	movlt	r1, #1
 80097cc:	f1ba 0f00 	cmp.w	sl, #0
 80097d0:	db11      	blt.n	80097f6 <__strftime.isra.0+0x326>
 80097d2:	2064      	movs	r0, #100	; 0x64
 80097d4:	fb9a f0f0 	sdiv	r0, sl, r0
 80097d8:	3013      	adds	r0, #19
 80097da:	f1bb 0f00 	cmp.w	fp, #0
 80097de:	d014      	beq.n	800980a <__strftime.isra.0+0x33a>
 80097e0:	2863      	cmp	r0, #99	; 0x63
 80097e2:	dd27      	ble.n	8009834 <__strftime.isra.0+0x364>
 80097e4:	4b61      	ldr	r3, [pc, #388]	; (800996c <__strftime.isra.0+0x49c>)
 80097e6:	4a62      	ldr	r2, [pc, #392]	; (8009970 <__strftime.isra.0+0x4a0>)
 80097e8:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80097ec:	bf18      	it	ne
 80097ee:	461a      	movne	r2, r3
 80097f0:	f8df c180 	ldr.w	ip, [pc, #384]	; 8009974 <__strftime.isra.0+0x4a4>
 80097f4:	e00c      	b.n	8009810 <__strftime.isra.0+0x340>
 80097f6:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 80097fa:	9103      	str	r1, [sp, #12]
 80097fc:	f000 fea8 	bl	800a550 <abs>
 8009800:	2264      	movs	r2, #100	; 0x64
 8009802:	9903      	ldr	r1, [sp, #12]
 8009804:	fb90 f0f2 	sdiv	r0, r0, r2
 8009808:	e7e7      	b.n	80097da <__strftime.isra.0+0x30a>
 800980a:	4a58      	ldr	r2, [pc, #352]	; (800996c <__strftime.isra.0+0x49c>)
 800980c:	f8df c168 	ldr.w	ip, [pc, #360]	; 8009978 <__strftime.isra.0+0x4a8>
 8009810:	f1b9 0f02 	cmp.w	r9, #2
 8009814:	bf2c      	ite	cs
 8009816:	ebc1 0109 	rsbcs	r1, r1, r9
 800981a:	f1c1 0102 	rsbcc	r1, r1, #2
 800981e:	4b57      	ldr	r3, [pc, #348]	; (800997c <__strftime.isra.0+0x4ac>)
 8009820:	9100      	str	r1, [sp, #0]
 8009822:	4951      	ldr	r1, [pc, #324]	; (8009968 <__strftime.isra.0+0x498>)
 8009824:	9001      	str	r0, [sp, #4]
 8009826:	458a      	cmp	sl, r1
 8009828:	bfa8      	it	ge
 800982a:	4613      	movge	r3, r2
 800982c:	4662      	mov	r2, ip
 800982e:	1b29      	subs	r1, r5, r4
 8009830:	1938      	adds	r0, r7, r4
 8009832:	e029      	b.n	8009888 <__strftime.isra.0+0x3b8>
 8009834:	4a4d      	ldr	r2, [pc, #308]	; (800996c <__strftime.isra.0+0x49c>)
 8009836:	e7db      	b.n	80097f0 <__strftime.isra.0+0x320>
 8009838:	4951      	ldr	r1, [pc, #324]	; (8009980 <__strftime.isra.0+0x4b0>)
 800983a:	4a52      	ldr	r2, [pc, #328]	; (8009984 <__strftime.isra.0+0x4b4>)
 800983c:	68f3      	ldr	r3, [r6, #12]
 800983e:	2864      	cmp	r0, #100	; 0x64
 8009840:	bf08      	it	eq
 8009842:	460a      	moveq	r2, r1
 8009844:	1b29      	subs	r1, r5, r4
 8009846:	1938      	adds	r0, r7, r4
 8009848:	f001 fbd8 	bl	800affc <sniprintf>
 800984c:	2800      	cmp	r0, #0
 800984e:	f6ff ae71 	blt.w	8009534 <__strftime.isra.0+0x64>
 8009852:	4404      	add	r4, r0
 8009854:	42a5      	cmp	r5, r4
 8009856:	f63f af3f 	bhi.w	80096d8 <__strftime.isra.0+0x208>
 800985a:	e66b      	b.n	8009534 <__strftime.isra.0+0x64>
 800985c:	6970      	ldr	r0, [r6, #20]
 800985e:	6933      	ldr	r3, [r6, #16]
 8009860:	2800      	cmp	r0, #0
 8009862:	68f2      	ldr	r2, [r6, #12]
 8009864:	eb07 0904 	add.w	r9, r7, r4
 8009868:	eba5 0a04 	sub.w	sl, r5, r4
 800986c:	f103 0b01 	add.w	fp, r3, #1
 8009870:	db0d      	blt.n	800988e <__strftime.isra.0+0x3be>
 8009872:	2164      	movs	r1, #100	; 0x64
 8009874:	fb90 fcf1 	sdiv	ip, r0, r1
 8009878:	fb01 001c 	mls	r0, r1, ip, r0
 800987c:	e9cd 2000 	strd	r2, r0, [sp]
 8009880:	465b      	mov	r3, fp
 8009882:	4651      	mov	r1, sl
 8009884:	4648      	mov	r0, r9
 8009886:	4a40      	ldr	r2, [pc, #256]	; (8009988 <__strftime.isra.0+0x4b8>)
 8009888:	f001 fbb8 	bl	800affc <sniprintf>
 800988c:	e7de      	b.n	800984c <__strftime.isra.0+0x37c>
 800988e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009892:	9203      	str	r2, [sp, #12]
 8009894:	f000 fe5c 	bl	800a550 <abs>
 8009898:	2164      	movs	r1, #100	; 0x64
 800989a:	fb90 fcf1 	sdiv	ip, r0, r1
 800989e:	9a03      	ldr	r2, [sp, #12]
 80098a0:	fb0c 0011 	mls	r0, ip, r1, r0
 80098a4:	e7ea      	b.n	800987c <__strftime.isra.0+0x3ac>
 80098a6:	2225      	movs	r2, #37	; 0x25
 80098a8:	f88d 2018 	strb.w	r2, [sp, #24]
 80098ac:	f1bb 0f00 	cmp.w	fp, #0
 80098b0:	d011      	beq.n	80098d6 <__strftime.isra.0+0x406>
 80098b2:	f1b9 0f06 	cmp.w	r9, #6
 80098b6:	bf38      	it	cc
 80098b8:	f04f 0906 	movcc.w	r9, #6
 80098bc:	f1b9 0306 	subs.w	r3, r9, #6
 80098c0:	f88d b019 	strb.w	fp, [sp, #25]
 80098c4:	d10c      	bne.n	80098e0 <__strftime.isra.0+0x410>
 80098c6:	f10d 001a 	add.w	r0, sp, #26
 80098ca:	4930      	ldr	r1, [pc, #192]	; (800998c <__strftime.isra.0+0x4bc>)
 80098cc:	f001 fbf4 	bl	800b0b8 <strcpy>
 80098d0:	4633      	mov	r3, r6
 80098d2:	aa06      	add	r2, sp, #24
 80098d4:	e75e      	b.n	8009794 <__strftime.isra.0+0x2c4>
 80098d6:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 80098da:	f04f 090a 	mov.w	r9, #10
 80098de:	e7ed      	b.n	80098bc <__strftime.isra.0+0x3ec>
 80098e0:	211e      	movs	r1, #30
 80098e2:	4a2b      	ldr	r2, [pc, #172]	; (8009990 <__strftime.isra.0+0x4c0>)
 80098e4:	f10d 001a 	add.w	r0, sp, #26
 80098e8:	f001 fb88 	bl	800affc <sniprintf>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	ddea      	ble.n	80098c6 <__strftime.isra.0+0x3f6>
 80098f0:	f10d 031a 	add.w	r3, sp, #26
 80098f4:	4418      	add	r0, r3
 80098f6:	e7e8      	b.n	80098ca <__strftime.isra.0+0x3fa>
 80098f8:	4630      	mov	r0, r6
 80098fa:	f7ff fd87 	bl	800940c <iso_year_adjust>
 80098fe:	4681      	mov	r9, r0
 8009900:	6970      	ldr	r0, [r6, #20]
 8009902:	2800      	cmp	r0, #0
 8009904:	db11      	blt.n	800992a <__strftime.isra.0+0x45a>
 8009906:	2364      	movs	r3, #100	; 0x64
 8009908:	fb90 f2f3 	sdiv	r2, r0, r3
 800990c:	fb03 0012 	mls	r0, r3, r2, r0
 8009910:	2264      	movs	r2, #100	; 0x64
 8009912:	4481      	add	r9, r0
 8009914:	fb99 f3f2 	sdiv	r3, r9, r2
 8009918:	fb02 9913 	mls	r9, r2, r3, r9
 800991c:	4491      	add	r9, r2
 800991e:	fbb9 f3f2 	udiv	r3, r9, r2
 8009922:	fb02 9313 	mls	r3, r2, r3, r9
 8009926:	4a16      	ldr	r2, [pc, #88]	; (8009980 <__strftime.isra.0+0x4b0>)
 8009928:	e78c      	b.n	8009844 <__strftime.isra.0+0x374>
 800992a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800992e:	f000 fe0f 	bl	800a550 <abs>
 8009932:	2364      	movs	r3, #100	; 0x64
 8009934:	fb90 f2f3 	sdiv	r2, r0, r3
 8009938:	f1b9 0f00 	cmp.w	r9, #0
 800993c:	fb02 0013 	mls	r0, r2, r3, r0
 8009940:	da07      	bge.n	8009952 <__strftime.isra.0+0x482>
 8009942:	6972      	ldr	r2, [r6, #20]
 8009944:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8009948:	429a      	cmp	r2, r3
 800994a:	bfb8      	it	lt
 800994c:	f04f 0901 	movlt.w	r9, #1
 8009950:	e7de      	b.n	8009910 <__strftime.isra.0+0x440>
 8009952:	d0dd      	beq.n	8009910 <__strftime.isra.0+0x440>
 8009954:	6972      	ldr	r2, [r6, #20]
 8009956:	4b04      	ldr	r3, [pc, #16]	; (8009968 <__strftime.isra.0+0x498>)
 8009958:	429a      	cmp	r2, r3
 800995a:	bfb8      	it	lt
 800995c:	f04f 39ff 	movlt.w	r9, #4294967295
 8009960:	e7d6      	b.n	8009910 <__strftime.isra.0+0x440>
 8009962:	bf00      	nop
 8009964:	0800bfe4 	.word	0x0800bfe4
 8009968:	fffff894 	.word	0xfffff894
 800996c:	0800c222 	.word	0x0800c222
 8009970:	0800be6f 	.word	0x0800be6f
 8009974:	0800be67 	.word	0x0800be67
 8009978:	0800be60 	.word	0x0800be60
 800997c:	0800c2b1 	.word	0x0800c2b1
 8009980:	0800be7f 	.word	0x0800be7f
 8009984:	0800be71 	.word	0x0800be71
 8009988:	0800be75 	.word	0x0800be75
 800998c:	0800be88 	.word	0x0800be88
 8009990:	0800be84 	.word	0x0800be84
 8009994:	6971      	ldr	r1, [r6, #20]
 8009996:	4aba      	ldr	r2, [pc, #744]	; (8009c80 <__strftime.isra.0+0x7b0>)
 8009998:	4630      	mov	r0, r6
 800999a:	4291      	cmp	r1, r2
 800999c:	bfac      	ite	ge
 800999e:	2300      	movge	r3, #0
 80099a0:	2301      	movlt	r3, #1
 80099a2:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80099a6:	f7ff fd31 	bl	800940c <iso_year_adjust>
 80099aa:	9904      	ldr	r1, [sp, #16]
 80099ac:	4682      	mov	sl, r0
 80099ae:	2900      	cmp	r1, #0
 80099b0:	db2c      	blt.n	8009a0c <__strftime.isra.0+0x53c>
 80099b2:	2264      	movs	r2, #100	; 0x64
 80099b4:	fb91 f2f2 	sdiv	r2, r1, r2
 80099b8:	3213      	adds	r2, #19
 80099ba:	6970      	ldr	r0, [r6, #20]
 80099bc:	2800      	cmp	r0, #0
 80099be:	db2f      	blt.n	8009a20 <__strftime.isra.0+0x550>
 80099c0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80099c4:	fb90 fefc 	sdiv	lr, r0, ip
 80099c8:	fb0c 001e 	mls	r0, ip, lr, r0
 80099cc:	f1ba 0f00 	cmp.w	sl, #0
 80099d0:	da35      	bge.n	8009a3e <__strftime.isra.0+0x56e>
 80099d2:	6971      	ldr	r1, [r6, #20]
 80099d4:	4bab      	ldr	r3, [pc, #684]	; (8009c84 <__strftime.isra.0+0x7b4>)
 80099d6:	4299      	cmp	r1, r3
 80099d8:	db3b      	blt.n	8009a52 <__strftime.isra.0+0x582>
 80099da:	4482      	add	sl, r0
 80099dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80099e0:	d13c      	bne.n	8009a5c <__strftime.isra.0+0x58c>
 80099e2:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80099e6:	3a01      	subs	r2, #1
 80099e8:	2064      	movs	r0, #100	; 0x64
 80099ea:	9b03      	ldr	r3, [sp, #12]
 80099ec:	fb00 aa02 	mla	sl, r0, r2, sl
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f000 81a8 	beq.w	8009d46 <__strftime.isra.0+0x876>
 80099f6:	222d      	movs	r2, #45	; 0x2d
 80099f8:	f88d 2018 	strb.w	r2, [sp, #24]
 80099fc:	f1b9 0f00 	cmp.w	r9, #0
 8009a00:	d001      	beq.n	8009a06 <__strftime.isra.0+0x536>
 8009a02:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a06:	f10d 0219 	add.w	r2, sp, #25
 8009a0a:	e1a7      	b.n	8009d5c <__strftime.isra.0+0x88c>
 8009a0c:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8009a10:	9104      	str	r1, [sp, #16]
 8009a12:	f000 fd9d 	bl	800a550 <abs>
 8009a16:	2264      	movs	r2, #100	; 0x64
 8009a18:	9904      	ldr	r1, [sp, #16]
 8009a1a:	fb90 f2f2 	sdiv	r2, r0, r2
 8009a1e:	e7cc      	b.n	80099ba <__strftime.isra.0+0x4ea>
 8009a20:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009a24:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009a28:	f000 fd92 	bl	800a550 <abs>
 8009a2c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009a30:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8009a34:	fb90 fefc 	sdiv	lr, r0, ip
 8009a38:	fb0e 001c 	mls	r0, lr, ip, r0
 8009a3c:	e7c6      	b.n	80099cc <__strftime.isra.0+0x4fc>
 8009a3e:	d0cc      	beq.n	80099da <__strftime.isra.0+0x50a>
 8009a40:	4b8f      	ldr	r3, [pc, #572]	; (8009c80 <__strftime.isra.0+0x7b0>)
 8009a42:	4299      	cmp	r1, r3
 8009a44:	bfb6      	itet	lt
 8009a46:	2301      	movlt	r3, #1
 8009a48:	2300      	movge	r3, #0
 8009a4a:	f04f 3aff 	movlt.w	sl, #4294967295
 8009a4e:	9303      	str	r3, [sp, #12]
 8009a50:	e7c3      	b.n	80099da <__strftime.isra.0+0x50a>
 8009a52:	f04f 0a01 	mov.w	sl, #1
 8009a56:	f8cd a00c 	str.w	sl, [sp, #12]
 8009a5a:	e7be      	b.n	80099da <__strftime.isra.0+0x50a>
 8009a5c:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8009a60:	bf04      	itt	eq
 8009a62:	f04f 0a00 	moveq.w	sl, #0
 8009a66:	3201      	addeq	r2, #1
 8009a68:	e7be      	b.n	80099e8 <__strftime.isra.0+0x518>
 8009a6a:	4987      	ldr	r1, [pc, #540]	; (8009c88 <__strftime.isra.0+0x7b8>)
 8009a6c:	4a87      	ldr	r2, [pc, #540]	; (8009c8c <__strftime.isra.0+0x7bc>)
 8009a6e:	68b3      	ldr	r3, [r6, #8]
 8009a70:	286b      	cmp	r0, #107	; 0x6b
 8009a72:	bf08      	it	eq
 8009a74:	460a      	moveq	r2, r1
 8009a76:	e6e5      	b.n	8009844 <__strftime.isra.0+0x374>
 8009a78:	68b3      	ldr	r3, [r6, #8]
 8009a7a:	b163      	cbz	r3, 8009a96 <__strftime.isra.0+0x5c6>
 8009a7c:	2b0c      	cmp	r3, #12
 8009a7e:	d004      	beq.n	8009a8a <__strftime.isra.0+0x5ba>
 8009a80:	210c      	movs	r1, #12
 8009a82:	fb93 f2f1 	sdiv	r2, r3, r1
 8009a86:	fb01 3312 	mls	r3, r1, r2, r3
 8009a8a:	4980      	ldr	r1, [pc, #512]	; (8009c8c <__strftime.isra.0+0x7bc>)
 8009a8c:	4a7e      	ldr	r2, [pc, #504]	; (8009c88 <__strftime.isra.0+0x7b8>)
 8009a8e:	2849      	cmp	r0, #73	; 0x49
 8009a90:	bf08      	it	eq
 8009a92:	460a      	moveq	r2, r1
 8009a94:	e6d6      	b.n	8009844 <__strftime.isra.0+0x374>
 8009a96:	230c      	movs	r3, #12
 8009a98:	e7f7      	b.n	8009a8a <__strftime.isra.0+0x5ba>
 8009a9a:	69f3      	ldr	r3, [r6, #28]
 8009a9c:	4a7c      	ldr	r2, [pc, #496]	; (8009c90 <__strftime.isra.0+0x7c0>)
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	e6d0      	b.n	8009844 <__strftime.isra.0+0x374>
 8009aa2:	6933      	ldr	r3, [r6, #16]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	e73e      	b.n	8009926 <__strftime.isra.0+0x456>
 8009aa8:	6873      	ldr	r3, [r6, #4]
 8009aaa:	e73c      	b.n	8009926 <__strftime.isra.0+0x456>
 8009aac:	1e6b      	subs	r3, r5, #1
 8009aae:	429c      	cmp	r4, r3
 8009ab0:	f4bf ad40 	bcs.w	8009534 <__strftime.isra.0+0x64>
 8009ab4:	230a      	movs	r3, #10
 8009ab6:	553b      	strb	r3, [r7, r4]
 8009ab8:	3401      	adds	r4, #1
 8009aba:	e60d      	b.n	80096d8 <__strftime.isra.0+0x208>
 8009abc:	68b3      	ldr	r3, [r6, #8]
 8009abe:	2b0b      	cmp	r3, #11
 8009ac0:	bfd4      	ite	le
 8009ac2:	2200      	movle	r2, #0
 8009ac4:	2201      	movgt	r2, #1
 8009ac6:	4b73      	ldr	r3, [pc, #460]	; (8009c94 <__strftime.isra.0+0x7c4>)
 8009ac8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009acc:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8009ad0:	4648      	mov	r0, r9
 8009ad2:	f7f6 fb3b 	bl	800014c <strlen>
 8009ad6:	f109 32ff 	add.w	r2, r9, #4294967295
 8009ada:	4420      	add	r0, r4
 8009adc:	f105 3cff 	add.w	ip, r5, #4294967295
 8009ae0:	42a0      	cmp	r0, r4
 8009ae2:	f43f adf9 	beq.w	80096d8 <__strftime.isra.0+0x208>
 8009ae6:	45a4      	cmp	ip, r4
 8009ae8:	f67f ad24 	bls.w	8009534 <__strftime.isra.0+0x64>
 8009aec:	f898 1000 	ldrb.w	r1, [r8]
 8009af0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009af4:	2950      	cmp	r1, #80	; 0x50
 8009af6:	d107      	bne.n	8009b08 <__strftime.isra.0+0x638>
 8009af8:	4967      	ldr	r1, [pc, #412]	; (8009c98 <__strftime.isra.0+0x7c8>)
 8009afa:	5cc9      	ldrb	r1, [r1, r3]
 8009afc:	f001 0103 	and.w	r1, r1, #3
 8009b00:	2901      	cmp	r1, #1
 8009b02:	bf08      	it	eq
 8009b04:	3320      	addeq	r3, #32
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	553b      	strb	r3, [r7, r4]
 8009b0a:	3401      	adds	r4, #1
 8009b0c:	e7e8      	b.n	8009ae0 <__strftime.isra.0+0x610>
 8009b0e:	6873      	ldr	r3, [r6, #4]
 8009b10:	4a62      	ldr	r2, [pc, #392]	; (8009c9c <__strftime.isra.0+0x7cc>)
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	68b3      	ldr	r3, [r6, #8]
 8009b16:	1b29      	subs	r1, r5, r4
 8009b18:	1938      	adds	r0, r7, r4
 8009b1a:	f001 fa6f 	bl	800affc <sniprintf>
 8009b1e:	e695      	b.n	800984c <__strftime.isra.0+0x37c>
 8009b20:	6a33      	ldr	r3, [r6, #32]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	db79      	blt.n	8009c1a <__strftime.isra.0+0x74a>
 8009b26:	f000 faad 	bl	800a084 <__tz_lock>
 8009b2a:	9b02      	ldr	r3, [sp, #8]
 8009b2c:	b90b      	cbnz	r3, 8009b32 <__strftime.isra.0+0x662>
 8009b2e:	f000 fab5 	bl	800a09c <_tzset_unlocked>
 8009b32:	f000 fe7d 	bl	800a830 <__gettzinfo>
 8009b36:	6a33      	ldr	r3, [r6, #32]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	bfd4      	ite	le
 8009b3c:	2200      	movle	r2, #0
 8009b3e:	2201      	movgt	r2, #1
 8009b40:	2328      	movs	r3, #40	; 0x28
 8009b42:	fb02 3303 	mla	r3, r2, r3, r3
 8009b46:	58c3      	ldr	r3, [r0, r3]
 8009b48:	f1c3 0900 	rsb	r9, r3, #0
 8009b4c:	f000 faa0 	bl	800a090 <__tz_unlock>
 8009b50:	2301      	movs	r3, #1
 8009b52:	9302      	str	r3, [sp, #8]
 8009b54:	6972      	ldr	r2, [r6, #20]
 8009b56:	1b29      	subs	r1, r5, r4
 8009b58:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8009b5c:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8009b60:	f16c 0c00 	sbc.w	ip, ip, #0
 8009b64:	f1bc 0f00 	cmp.w	ip, #0
 8009b68:	eb07 0004 	add.w	r0, r7, r4
 8009b6c:	da02      	bge.n	8009b74 <__strftime.isra.0+0x6a4>
 8009b6e:	3303      	adds	r3, #3
 8009b70:	f14c 0c00 	adc.w	ip, ip, #0
 8009b74:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8009b78:	f102 3aff 	add.w	sl, r2, #4294967295
 8009b7c:	fb9a fefe 	sdiv	lr, sl, lr
 8009b80:	089b      	lsrs	r3, r3, #2
 8009b82:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8009b86:	ebb3 030e 	subs.w	r3, r3, lr
 8009b8a:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8009b8e:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8009b92:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8009b96:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8009b9a:	fb9a fefe 	sdiv	lr, sl, lr
 8009b9e:	eb13 030e 	adds.w	r3, r3, lr
 8009ba2:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8009ba6:	f240 1c6d 	movw	ip, #365	; 0x16d
 8009baa:	3a46      	subs	r2, #70	; 0x46
 8009bac:	fb0c f202 	mul.w	r2, ip, r2
 8009bb0:	f04f 0c18 	mov.w	ip, #24
 8009bb4:	189b      	adds	r3, r3, r2
 8009bb6:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8009bba:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 8009bbe:	eb13 030e 	adds.w	r3, r3, lr
 8009bc2:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8009bc6:	fba3 3e0c 	umull	r3, lr, r3, ip
 8009bca:	fb0c e202 	mla	r2, ip, r2, lr
 8009bce:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8009bd2:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8009bd6:	eb13 030e 	adds.w	r3, r3, lr
 8009bda:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8009bde:	fba3 320c 	umull	r3, r2, r3, ip
 8009be2:	fb0c 220e 	mla	r2, ip, lr, r2
 8009be6:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8009bea:	eb13 030e 	adds.w	r3, r3, lr
 8009bee:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8009bf2:	fba3 3e0c 	umull	r3, lr, r3, ip
 8009bf6:	fb0c e202 	mla	r2, ip, r2, lr
 8009bfa:	f8d6 e000 	ldr.w	lr, [r6]
 8009bfe:	eb13 030e 	adds.w	r3, r3, lr
 8009c02:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8009c06:	ebb3 0309 	subs.w	r3, r3, r9
 8009c0a:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8009c0e:	e9cd 3200 	strd	r3, r2, [sp]
 8009c12:	4a23      	ldr	r2, [pc, #140]	; (8009ca0 <__strftime.isra.0+0x7d0>)
 8009c14:	f001 f9f2 	bl	800affc <sniprintf>
 8009c18:	e618      	b.n	800984c <__strftime.isra.0+0x37c>
 8009c1a:	f04f 0900 	mov.w	r9, #0
 8009c1e:	e799      	b.n	8009b54 <__strftime.isra.0+0x684>
 8009c20:	6833      	ldr	r3, [r6, #0]
 8009c22:	e680      	b.n	8009926 <__strftime.isra.0+0x456>
 8009c24:	1e6b      	subs	r3, r5, #1
 8009c26:	429c      	cmp	r4, r3
 8009c28:	f4bf ac84 	bcs.w	8009534 <__strftime.isra.0+0x64>
 8009c2c:	2309      	movs	r3, #9
 8009c2e:	e742      	b.n	8009ab6 <__strftime.isra.0+0x5e6>
 8009c30:	6833      	ldr	r3, [r6, #0]
 8009c32:	4a1c      	ldr	r2, [pc, #112]	; (8009ca4 <__strftime.isra.0+0x7d4>)
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	6873      	ldr	r3, [r6, #4]
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	68b3      	ldr	r3, [r6, #8]
 8009c3c:	e5f7      	b.n	800982e <__strftime.isra.0+0x35e>
 8009c3e:	1e6b      	subs	r3, r5, #1
 8009c40:	429c      	cmp	r4, r3
 8009c42:	f4bf ac77 	bcs.w	8009534 <__strftime.isra.0+0x64>
 8009c46:	69b3      	ldr	r3, [r6, #24]
 8009c48:	1c62      	adds	r2, r4, #1
 8009c4a:	b91b      	cbnz	r3, 8009c54 <__strftime.isra.0+0x784>
 8009c4c:	2337      	movs	r3, #55	; 0x37
 8009c4e:	553b      	strb	r3, [r7, r4]
 8009c50:	4614      	mov	r4, r2
 8009c52:	e541      	b.n	80096d8 <__strftime.isra.0+0x208>
 8009c54:	3330      	adds	r3, #48	; 0x30
 8009c56:	e7fa      	b.n	8009c4e <__strftime.isra.0+0x77e>
 8009c58:	69f3      	ldr	r3, [r6, #28]
 8009c5a:	69b2      	ldr	r2, [r6, #24]
 8009c5c:	3307      	adds	r3, #7
 8009c5e:	1a9b      	subs	r3, r3, r2
 8009c60:	2207      	movs	r2, #7
 8009c62:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c66:	e65e      	b.n	8009926 <__strftime.isra.0+0x456>
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f7ff fbcf 	bl	800940c <iso_year_adjust>
 8009c6e:	69b2      	ldr	r2, [r6, #24]
 8009c70:	b1d2      	cbz	r2, 8009ca8 <__strftime.isra.0+0x7d8>
 8009c72:	3a01      	subs	r2, #1
 8009c74:	2800      	cmp	r0, #0
 8009c76:	dc3b      	bgt.n	8009cf0 <__strftime.isra.0+0x820>
 8009c78:	69f3      	ldr	r3, [r6, #28]
 8009c7a:	d117      	bne.n	8009cac <__strftime.isra.0+0x7dc>
 8009c7c:	330a      	adds	r3, #10
 8009c7e:	e7ee      	b.n	8009c5e <__strftime.isra.0+0x78e>
 8009c80:	fffff894 	.word	0xfffff894
 8009c84:	fffff895 	.word	0xfffff895
 8009c88:	0800be71 	.word	0x0800be71
 8009c8c:	0800be7f 	.word	0x0800be7f
 8009c90:	0800be94 	.word	0x0800be94
 8009c94:	0800bfe4 	.word	0x0800bfe4
 8009c98:	0800c11d 	.word	0x0800c11d
 8009c9c:	0800bea3 	.word	0x0800bea3
 8009ca0:	0800be99 	.word	0x0800be99
 8009ca4:	0800be9e 	.word	0x0800be9e
 8009ca8:	2206      	movs	r2, #6
 8009caa:	e7e3      	b.n	8009c74 <__strftime.isra.0+0x7a4>
 8009cac:	6971      	ldr	r1, [r6, #20]
 8009cae:	1ad2      	subs	r2, r2, r3
 8009cb0:	2900      	cmp	r1, #0
 8009cb2:	f240 736b 	movw	r3, #1899	; 0x76b
 8009cb6:	bfa8      	it	ge
 8009cb8:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 8009cbc:	440b      	add	r3, r1
 8009cbe:	0799      	lsls	r1, r3, #30
 8009cc0:	d105      	bne.n	8009cce <__strftime.isra.0+0x7fe>
 8009cc2:	2064      	movs	r0, #100	; 0x64
 8009cc4:	fb93 f1f0 	sdiv	r1, r3, r0
 8009cc8:	fb00 3111 	mls	r1, r0, r1, r3
 8009ccc:	b971      	cbnz	r1, 8009cec <__strftime.isra.0+0x81c>
 8009cce:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009cd2:	fb93 f0f1 	sdiv	r0, r3, r1
 8009cd6:	fb01 3310 	mls	r3, r1, r0, r3
 8009cda:	fab3 f383 	clz	r3, r3
 8009cde:	095b      	lsrs	r3, r3, #5
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b05      	cmp	r3, #5
 8009ce4:	bfb4      	ite	lt
 8009ce6:	2335      	movlt	r3, #53	; 0x35
 8009ce8:	2334      	movge	r3, #52	; 0x34
 8009cea:	e61c      	b.n	8009926 <__strftime.isra.0+0x456>
 8009cec:	2301      	movs	r3, #1
 8009cee:	e7f7      	b.n	8009ce0 <__strftime.isra.0+0x810>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e618      	b.n	8009926 <__strftime.isra.0+0x456>
 8009cf4:	1e6b      	subs	r3, r5, #1
 8009cf6:	429c      	cmp	r4, r3
 8009cf8:	f4bf ac1c 	bcs.w	8009534 <__strftime.isra.0+0x64>
 8009cfc:	69b3      	ldr	r3, [r6, #24]
 8009cfe:	3330      	adds	r3, #48	; 0x30
 8009d00:	e6d9      	b.n	8009ab6 <__strftime.isra.0+0x5e6>
 8009d02:	69b2      	ldr	r2, [r6, #24]
 8009d04:	b11a      	cbz	r2, 8009d0e <__strftime.isra.0+0x83e>
 8009d06:	3a01      	subs	r2, #1
 8009d08:	69f3      	ldr	r3, [r6, #28]
 8009d0a:	3307      	adds	r3, #7
 8009d0c:	e7a7      	b.n	8009c5e <__strftime.isra.0+0x78e>
 8009d0e:	2206      	movs	r2, #6
 8009d10:	e7fa      	b.n	8009d08 <__strftime.isra.0+0x838>
 8009d12:	6970      	ldr	r0, [r6, #20]
 8009d14:	2800      	cmp	r0, #0
 8009d16:	db05      	blt.n	8009d24 <__strftime.isra.0+0x854>
 8009d18:	2364      	movs	r3, #100	; 0x64
 8009d1a:	fb90 f2f3 	sdiv	r2, r0, r3
 8009d1e:	fb02 0313 	mls	r3, r2, r3, r0
 8009d22:	e600      	b.n	8009926 <__strftime.isra.0+0x456>
 8009d24:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009d28:	f000 fc12 	bl	800a550 <abs>
 8009d2c:	e7f4      	b.n	8009d18 <__strftime.isra.0+0x848>
 8009d2e:	6972      	ldr	r2, [r6, #20]
 8009d30:	494c      	ldr	r1, [pc, #304]	; (8009e64 <__strftime.isra.0+0x994>)
 8009d32:	428a      	cmp	r2, r1
 8009d34:	da05      	bge.n	8009d42 <__strftime.isra.0+0x872>
 8009d36:	202d      	movs	r0, #45	; 0x2d
 8009d38:	eba1 0a02 	sub.w	sl, r1, r2
 8009d3c:	f88d 0018 	strb.w	r0, [sp, #24]
 8009d40:	e65c      	b.n	80099fc <__strftime.isra.0+0x52c>
 8009d42:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8009d46:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8009d4a:	d106      	bne.n	8009d5a <__strftime.isra.0+0x88a>
 8009d4c:	f242 720f 	movw	r2, #9999	; 0x270f
 8009d50:	4592      	cmp	sl, r2
 8009d52:	d902      	bls.n	8009d5a <__strftime.isra.0+0x88a>
 8009d54:	f88d b018 	strb.w	fp, [sp, #24]
 8009d58:	e650      	b.n	80099fc <__strftime.isra.0+0x52c>
 8009d5a:	aa06      	add	r2, sp, #24
 8009d5c:	2125      	movs	r1, #37	; 0x25
 8009d5e:	7011      	strb	r1, [r2, #0]
 8009d60:	f1bb 0f00 	cmp.w	fp, #0
 8009d64:	d108      	bne.n	8009d78 <__strftime.isra.0+0x8a8>
 8009d66:	1c50      	adds	r0, r2, #1
 8009d68:	493f      	ldr	r1, [pc, #252]	; (8009e68 <__strftime.isra.0+0x998>)
 8009d6a:	f001 f9a5 	bl	800b0b8 <strcpy>
 8009d6e:	464b      	mov	r3, r9
 8009d70:	f8cd a000 	str.w	sl, [sp]
 8009d74:	aa06      	add	r2, sp, #24
 8009d76:	e6ce      	b.n	8009b16 <__strftime.isra.0+0x646>
 8009d78:	2330      	movs	r3, #48	; 0x30
 8009d7a:	1c90      	adds	r0, r2, #2
 8009d7c:	7053      	strb	r3, [r2, #1]
 8009d7e:	e7f3      	b.n	8009d68 <__strftime.isra.0+0x898>
 8009d80:	6a33      	ldr	r3, [r6, #32]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f6ff aca8 	blt.w	80096d8 <__strftime.isra.0+0x208>
 8009d88:	f000 f97c 	bl	800a084 <__tz_lock>
 8009d8c:	9b02      	ldr	r3, [sp, #8]
 8009d8e:	b90b      	cbnz	r3, 8009d94 <__strftime.isra.0+0x8c4>
 8009d90:	f000 f984 	bl	800a09c <_tzset_unlocked>
 8009d94:	f000 fd4c 	bl	800a830 <__gettzinfo>
 8009d98:	6a33      	ldr	r3, [r6, #32]
 8009d9a:	eb07 0a04 	add.w	sl, r7, r4
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	bfd4      	ite	le
 8009da2:	2200      	movle	r2, #0
 8009da4:	2201      	movgt	r2, #1
 8009da6:	2328      	movs	r3, #40	; 0x28
 8009da8:	fb02 3303 	mla	r3, r2, r3, r3
 8009dac:	58c3      	ldr	r3, [r0, r3]
 8009dae:	eba5 0b04 	sub.w	fp, r5, r4
 8009db2:	f1c3 0900 	rsb	r9, r3, #0
 8009db6:	f000 f96b 	bl	800a090 <__tz_unlock>
 8009dba:	233c      	movs	r3, #60	; 0x3c
 8009dbc:	fb99 f0f3 	sdiv	r0, r9, r3
 8009dc0:	f000 fd4a 	bl	800a858 <labs>
 8009dc4:	233c      	movs	r3, #60	; 0x3c
 8009dc6:	fb90 f2f3 	sdiv	r2, r0, r3
 8009dca:	fb02 0013 	mls	r0, r2, r3, r0
 8009dce:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009dd2:	9000      	str	r0, [sp, #0]
 8009dd4:	fb99 f3f3 	sdiv	r3, r9, r3
 8009dd8:	4659      	mov	r1, fp
 8009dda:	4650      	mov	r0, sl
 8009ddc:	4a23      	ldr	r2, [pc, #140]	; (8009e6c <__strftime.isra.0+0x99c>)
 8009dde:	f001 f90d 	bl	800affc <sniprintf>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f6ff aba6 	blt.w	8009534 <__strftime.isra.0+0x64>
 8009de8:	4404      	add	r4, r0
 8009dea:	42a5      	cmp	r5, r4
 8009dec:	f67f aba2 	bls.w	8009534 <__strftime.isra.0+0x64>
 8009df0:	2301      	movs	r3, #1
 8009df2:	9302      	str	r3, [sp, #8]
 8009df4:	e470      	b.n	80096d8 <__strftime.isra.0+0x208>
 8009df6:	6a33      	ldr	r3, [r6, #32]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f6ff ac6d 	blt.w	80096d8 <__strftime.isra.0+0x208>
 8009dfe:	f000 f941 	bl	800a084 <__tz_lock>
 8009e02:	9b02      	ldr	r3, [sp, #8]
 8009e04:	b90b      	cbnz	r3, 8009e0a <__strftime.isra.0+0x93a>
 8009e06:	f000 f949 	bl	800a09c <_tzset_unlocked>
 8009e0a:	6a33      	ldr	r3, [r6, #32]
 8009e0c:	4a18      	ldr	r2, [pc, #96]	; (8009e70 <__strftime.isra.0+0x9a0>)
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bfd4      	ite	le
 8009e12:	2300      	movle	r3, #0
 8009e14:	2301      	movgt	r3, #1
 8009e16:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8009e1a:	4648      	mov	r0, r9
 8009e1c:	f7f6 f996 	bl	800014c <strlen>
 8009e20:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e24:	4420      	add	r0, r4
 8009e26:	1e6b      	subs	r3, r5, #1
 8009e28:	42a0      	cmp	r0, r4
 8009e2a:	d102      	bne.n	8009e32 <__strftime.isra.0+0x962>
 8009e2c:	f000 f930 	bl	800a090 <__tz_unlock>
 8009e30:	e7de      	b.n	8009df0 <__strftime.isra.0+0x920>
 8009e32:	42a3      	cmp	r3, r4
 8009e34:	d904      	bls.n	8009e40 <__strftime.isra.0+0x970>
 8009e36:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009e3a:	553a      	strb	r2, [r7, r4]
 8009e3c:	3401      	adds	r4, #1
 8009e3e:	e7f3      	b.n	8009e28 <__strftime.isra.0+0x958>
 8009e40:	f000 f926 	bl	800a090 <__tz_unlock>
 8009e44:	f7ff bb76 	b.w	8009534 <__strftime.isra.0+0x64>
 8009e48:	1e6b      	subs	r3, r5, #1
 8009e4a:	429c      	cmp	r4, r3
 8009e4c:	f4bf ab72 	bcs.w	8009534 <__strftime.isra.0+0x64>
 8009e50:	2325      	movs	r3, #37	; 0x25
 8009e52:	e630      	b.n	8009ab6 <__strftime.isra.0+0x5e6>
 8009e54:	b10d      	cbz	r5, 8009e5a <__strftime.isra.0+0x98a>
 8009e56:	2300      	movs	r3, #0
 8009e58:	553b      	strb	r3, [r7, r4]
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	b00f      	add	sp, #60	; 0x3c
 8009e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e62:	bf00      	nop
 8009e64:	fffff894 	.word	0xfffff894
 8009e68:	0800be90 	.word	0x0800be90
 8009e6c:	0800bead 	.word	0x0800bead
 8009e70:	2000013c 	.word	0x2000013c

08009e74 <strftime>:
 8009e74:	f7ff bb2c 	b.w	80094d0 <__strftime.isra.0>

08009e78 <_strtol_l.constprop.0>:
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7e:	4680      	mov	r8, r0
 8009e80:	d001      	beq.n	8009e86 <_strtol_l.constprop.0+0xe>
 8009e82:	2b24      	cmp	r3, #36	; 0x24
 8009e84:	d906      	bls.n	8009e94 <_strtol_l.constprop.0+0x1c>
 8009e86:	f7fe fdb1 	bl	80089ec <__errno>
 8009e8a:	2316      	movs	r3, #22
 8009e8c:	6003      	str	r3, [r0, #0]
 8009e8e:	2000      	movs	r0, #0
 8009e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e94:	460d      	mov	r5, r1
 8009e96:	4f35      	ldr	r7, [pc, #212]	; (8009f6c <_strtol_l.constprop.0+0xf4>)
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e9e:	5de6      	ldrb	r6, [r4, r7]
 8009ea0:	f016 0608 	ands.w	r6, r6, #8
 8009ea4:	d1f8      	bne.n	8009e98 <_strtol_l.constprop.0+0x20>
 8009ea6:	2c2d      	cmp	r4, #45	; 0x2d
 8009ea8:	d12f      	bne.n	8009f0a <_strtol_l.constprop.0+0x92>
 8009eaa:	2601      	movs	r6, #1
 8009eac:	782c      	ldrb	r4, [r5, #0]
 8009eae:	1c85      	adds	r5, r0, #2
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d057      	beq.n	8009f64 <_strtol_l.constprop.0+0xec>
 8009eb4:	2b10      	cmp	r3, #16
 8009eb6:	d109      	bne.n	8009ecc <_strtol_l.constprop.0+0x54>
 8009eb8:	2c30      	cmp	r4, #48	; 0x30
 8009eba:	d107      	bne.n	8009ecc <_strtol_l.constprop.0+0x54>
 8009ebc:	7828      	ldrb	r0, [r5, #0]
 8009ebe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009ec2:	2858      	cmp	r0, #88	; 0x58
 8009ec4:	d149      	bne.n	8009f5a <_strtol_l.constprop.0+0xe2>
 8009ec6:	2310      	movs	r3, #16
 8009ec8:	786c      	ldrb	r4, [r5, #1]
 8009eca:	3502      	adds	r5, #2
 8009ecc:	2700      	movs	r7, #0
 8009ece:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009ed2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009ed6:	fbbe f9f3 	udiv	r9, lr, r3
 8009eda:	4638      	mov	r0, r7
 8009edc:	fb03 ea19 	mls	sl, r3, r9, lr
 8009ee0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009ee4:	f1bc 0f09 	cmp.w	ip, #9
 8009ee8:	d814      	bhi.n	8009f14 <_strtol_l.constprop.0+0x9c>
 8009eea:	4664      	mov	r4, ip
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	dd22      	ble.n	8009f36 <_strtol_l.constprop.0+0xbe>
 8009ef0:	2f00      	cmp	r7, #0
 8009ef2:	db1d      	blt.n	8009f30 <_strtol_l.constprop.0+0xb8>
 8009ef4:	4581      	cmp	r9, r0
 8009ef6:	d31b      	bcc.n	8009f30 <_strtol_l.constprop.0+0xb8>
 8009ef8:	d101      	bne.n	8009efe <_strtol_l.constprop.0+0x86>
 8009efa:	45a2      	cmp	sl, r4
 8009efc:	db18      	blt.n	8009f30 <_strtol_l.constprop.0+0xb8>
 8009efe:	2701      	movs	r7, #1
 8009f00:	fb00 4003 	mla	r0, r0, r3, r4
 8009f04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f08:	e7ea      	b.n	8009ee0 <_strtol_l.constprop.0+0x68>
 8009f0a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f0c:	bf04      	itt	eq
 8009f0e:	782c      	ldrbeq	r4, [r5, #0]
 8009f10:	1c85      	addeq	r5, r0, #2
 8009f12:	e7cd      	b.n	8009eb0 <_strtol_l.constprop.0+0x38>
 8009f14:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009f18:	f1bc 0f19 	cmp.w	ip, #25
 8009f1c:	d801      	bhi.n	8009f22 <_strtol_l.constprop.0+0xaa>
 8009f1e:	3c37      	subs	r4, #55	; 0x37
 8009f20:	e7e4      	b.n	8009eec <_strtol_l.constprop.0+0x74>
 8009f22:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009f26:	f1bc 0f19 	cmp.w	ip, #25
 8009f2a:	d804      	bhi.n	8009f36 <_strtol_l.constprop.0+0xbe>
 8009f2c:	3c57      	subs	r4, #87	; 0x57
 8009f2e:	e7dd      	b.n	8009eec <_strtol_l.constprop.0+0x74>
 8009f30:	f04f 37ff 	mov.w	r7, #4294967295
 8009f34:	e7e6      	b.n	8009f04 <_strtol_l.constprop.0+0x8c>
 8009f36:	2f00      	cmp	r7, #0
 8009f38:	da07      	bge.n	8009f4a <_strtol_l.constprop.0+0xd2>
 8009f3a:	2322      	movs	r3, #34	; 0x22
 8009f3c:	4670      	mov	r0, lr
 8009f3e:	f8c8 3000 	str.w	r3, [r8]
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	d0a4      	beq.n	8009e90 <_strtol_l.constprop.0+0x18>
 8009f46:	1e69      	subs	r1, r5, #1
 8009f48:	e005      	b.n	8009f56 <_strtol_l.constprop.0+0xde>
 8009f4a:	b106      	cbz	r6, 8009f4e <_strtol_l.constprop.0+0xd6>
 8009f4c:	4240      	negs	r0, r0
 8009f4e:	2a00      	cmp	r2, #0
 8009f50:	d09e      	beq.n	8009e90 <_strtol_l.constprop.0+0x18>
 8009f52:	2f00      	cmp	r7, #0
 8009f54:	d1f7      	bne.n	8009f46 <_strtol_l.constprop.0+0xce>
 8009f56:	6011      	str	r1, [r2, #0]
 8009f58:	e79a      	b.n	8009e90 <_strtol_l.constprop.0+0x18>
 8009f5a:	2430      	movs	r4, #48	; 0x30
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1b5      	bne.n	8009ecc <_strtol_l.constprop.0+0x54>
 8009f60:	2308      	movs	r3, #8
 8009f62:	e7b3      	b.n	8009ecc <_strtol_l.constprop.0+0x54>
 8009f64:	2c30      	cmp	r4, #48	; 0x30
 8009f66:	d0a9      	beq.n	8009ebc <_strtol_l.constprop.0+0x44>
 8009f68:	230a      	movs	r3, #10
 8009f6a:	e7af      	b.n	8009ecc <_strtol_l.constprop.0+0x54>
 8009f6c:	0800c11d 	.word	0x0800c11d

08009f70 <_strtol_r>:
 8009f70:	f7ff bf82 	b.w	8009e78 <_strtol_l.constprop.0>

08009f74 <strtol>:
 8009f74:	4613      	mov	r3, r2
 8009f76:	460a      	mov	r2, r1
 8009f78:	4601      	mov	r1, r0
 8009f7a:	4802      	ldr	r0, [pc, #8]	; (8009f84 <strtol+0x10>)
 8009f7c:	6800      	ldr	r0, [r0, #0]
 8009f7e:	f7ff bf7b 	b.w	8009e78 <_strtol_l.constprop.0>
 8009f82:	bf00      	nop
 8009f84:	200000d8 	.word	0x200000d8

08009f88 <_strtoul_l.constprop.0>:
 8009f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f8c:	4686      	mov	lr, r0
 8009f8e:	460d      	mov	r5, r1
 8009f90:	4f35      	ldr	r7, [pc, #212]	; (800a068 <_strtoul_l.constprop.0+0xe0>)
 8009f92:	4628      	mov	r0, r5
 8009f94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f98:	5de6      	ldrb	r6, [r4, r7]
 8009f9a:	f016 0608 	ands.w	r6, r6, #8
 8009f9e:	d1f8      	bne.n	8009f92 <_strtoul_l.constprop.0+0xa>
 8009fa0:	2c2d      	cmp	r4, #45	; 0x2d
 8009fa2:	d12f      	bne.n	800a004 <_strtoul_l.constprop.0+0x7c>
 8009fa4:	2601      	movs	r6, #1
 8009fa6:	782c      	ldrb	r4, [r5, #0]
 8009fa8:	1c85      	adds	r5, r0, #2
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d057      	beq.n	800a05e <_strtoul_l.constprop.0+0xd6>
 8009fae:	2b10      	cmp	r3, #16
 8009fb0:	d109      	bne.n	8009fc6 <_strtoul_l.constprop.0+0x3e>
 8009fb2:	2c30      	cmp	r4, #48	; 0x30
 8009fb4:	d107      	bne.n	8009fc6 <_strtoul_l.constprop.0+0x3e>
 8009fb6:	7828      	ldrb	r0, [r5, #0]
 8009fb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009fbc:	2858      	cmp	r0, #88	; 0x58
 8009fbe:	d149      	bne.n	800a054 <_strtoul_l.constprop.0+0xcc>
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	786c      	ldrb	r4, [r5, #1]
 8009fc4:	3502      	adds	r5, #2
 8009fc6:	f04f 38ff 	mov.w	r8, #4294967295
 8009fca:	fbb8 f8f3 	udiv	r8, r8, r3
 8009fce:	2700      	movs	r7, #0
 8009fd0:	fb03 f908 	mul.w	r9, r3, r8
 8009fd4:	4638      	mov	r0, r7
 8009fd6:	ea6f 0909 	mvn.w	r9, r9
 8009fda:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009fde:	f1bc 0f09 	cmp.w	ip, #9
 8009fe2:	d814      	bhi.n	800a00e <_strtoul_l.constprop.0+0x86>
 8009fe4:	4664      	mov	r4, ip
 8009fe6:	42a3      	cmp	r3, r4
 8009fe8:	dd22      	ble.n	800a030 <_strtoul_l.constprop.0+0xa8>
 8009fea:	2f00      	cmp	r7, #0
 8009fec:	db1d      	blt.n	800a02a <_strtoul_l.constprop.0+0xa2>
 8009fee:	4580      	cmp	r8, r0
 8009ff0:	d31b      	bcc.n	800a02a <_strtoul_l.constprop.0+0xa2>
 8009ff2:	d101      	bne.n	8009ff8 <_strtoul_l.constprop.0+0x70>
 8009ff4:	45a1      	cmp	r9, r4
 8009ff6:	db18      	blt.n	800a02a <_strtoul_l.constprop.0+0xa2>
 8009ff8:	2701      	movs	r7, #1
 8009ffa:	fb00 4003 	mla	r0, r0, r3, r4
 8009ffe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a002:	e7ea      	b.n	8009fda <_strtoul_l.constprop.0+0x52>
 800a004:	2c2b      	cmp	r4, #43	; 0x2b
 800a006:	bf04      	itt	eq
 800a008:	782c      	ldrbeq	r4, [r5, #0]
 800a00a:	1c85      	addeq	r5, r0, #2
 800a00c:	e7cd      	b.n	8009faa <_strtoul_l.constprop.0+0x22>
 800a00e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a012:	f1bc 0f19 	cmp.w	ip, #25
 800a016:	d801      	bhi.n	800a01c <_strtoul_l.constprop.0+0x94>
 800a018:	3c37      	subs	r4, #55	; 0x37
 800a01a:	e7e4      	b.n	8009fe6 <_strtoul_l.constprop.0+0x5e>
 800a01c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a020:	f1bc 0f19 	cmp.w	ip, #25
 800a024:	d804      	bhi.n	800a030 <_strtoul_l.constprop.0+0xa8>
 800a026:	3c57      	subs	r4, #87	; 0x57
 800a028:	e7dd      	b.n	8009fe6 <_strtoul_l.constprop.0+0x5e>
 800a02a:	f04f 37ff 	mov.w	r7, #4294967295
 800a02e:	e7e6      	b.n	8009ffe <_strtoul_l.constprop.0+0x76>
 800a030:	2f00      	cmp	r7, #0
 800a032:	da07      	bge.n	800a044 <_strtoul_l.constprop.0+0xbc>
 800a034:	2322      	movs	r3, #34	; 0x22
 800a036:	f04f 30ff 	mov.w	r0, #4294967295
 800a03a:	f8ce 3000 	str.w	r3, [lr]
 800a03e:	b932      	cbnz	r2, 800a04e <_strtoul_l.constprop.0+0xc6>
 800a040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a044:	b106      	cbz	r6, 800a048 <_strtoul_l.constprop.0+0xc0>
 800a046:	4240      	negs	r0, r0
 800a048:	2a00      	cmp	r2, #0
 800a04a:	d0f9      	beq.n	800a040 <_strtoul_l.constprop.0+0xb8>
 800a04c:	b107      	cbz	r7, 800a050 <_strtoul_l.constprop.0+0xc8>
 800a04e:	1e69      	subs	r1, r5, #1
 800a050:	6011      	str	r1, [r2, #0]
 800a052:	e7f5      	b.n	800a040 <_strtoul_l.constprop.0+0xb8>
 800a054:	2430      	movs	r4, #48	; 0x30
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1b5      	bne.n	8009fc6 <_strtoul_l.constprop.0+0x3e>
 800a05a:	2308      	movs	r3, #8
 800a05c:	e7b3      	b.n	8009fc6 <_strtoul_l.constprop.0+0x3e>
 800a05e:	2c30      	cmp	r4, #48	; 0x30
 800a060:	d0a9      	beq.n	8009fb6 <_strtoul_l.constprop.0+0x2e>
 800a062:	230a      	movs	r3, #10
 800a064:	e7af      	b.n	8009fc6 <_strtoul_l.constprop.0+0x3e>
 800a066:	bf00      	nop
 800a068:	0800c11d 	.word	0x0800c11d

0800a06c <_strtoul_r>:
 800a06c:	f7ff bf8c 	b.w	8009f88 <_strtoul_l.constprop.0>

0800a070 <strtoul>:
 800a070:	4613      	mov	r3, r2
 800a072:	460a      	mov	r2, r1
 800a074:	4601      	mov	r1, r0
 800a076:	4802      	ldr	r0, [pc, #8]	; (800a080 <strtoul+0x10>)
 800a078:	6800      	ldr	r0, [r0, #0]
 800a07a:	f7ff bf85 	b.w	8009f88 <_strtoul_l.constprop.0>
 800a07e:	bf00      	nop
 800a080:	200000d8 	.word	0x200000d8

0800a084 <__tz_lock>:
 800a084:	4801      	ldr	r0, [pc, #4]	; (800a08c <__tz_lock+0x8>)
 800a086:	f7fe bf49 	b.w	8008f1c <__retarget_lock_acquire>
 800a08a:	bf00      	nop
 800a08c:	20000704 	.word	0x20000704

0800a090 <__tz_unlock>:
 800a090:	4801      	ldr	r0, [pc, #4]	; (800a098 <__tz_unlock+0x8>)
 800a092:	f7fe bf45 	b.w	8008f20 <__retarget_lock_release>
 800a096:	bf00      	nop
 800a098:	20000704 	.word	0x20000704

0800a09c <_tzset_unlocked>:
 800a09c:	4b01      	ldr	r3, [pc, #4]	; (800a0a4 <_tzset_unlocked+0x8>)
 800a09e:	6818      	ldr	r0, [r3, #0]
 800a0a0:	f000 b802 	b.w	800a0a8 <_tzset_unlocked_r>
 800a0a4:	200000d8 	.word	0x200000d8

0800a0a8 <_tzset_unlocked_r>:
 800a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ac:	b08d      	sub	sp, #52	; 0x34
 800a0ae:	4607      	mov	r7, r0
 800a0b0:	f000 fbbe 	bl	800a830 <__gettzinfo>
 800a0b4:	49b1      	ldr	r1, [pc, #708]	; (800a37c <_tzset_unlocked_r+0x2d4>)
 800a0b6:	4605      	mov	r5, r0
 800a0b8:	4638      	mov	r0, r7
 800a0ba:	f000 fbb1 	bl	800a820 <_getenv_r>
 800a0be:	4eb0      	ldr	r6, [pc, #704]	; (800a380 <_tzset_unlocked_r+0x2d8>)
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	b970      	cbnz	r0, 800a0e2 <_tzset_unlocked_r+0x3a>
 800a0c4:	4baf      	ldr	r3, [pc, #700]	; (800a384 <_tzset_unlocked_r+0x2dc>)
 800a0c6:	4ab0      	ldr	r2, [pc, #704]	; (800a388 <_tzset_unlocked_r+0x2e0>)
 800a0c8:	6018      	str	r0, [r3, #0]
 800a0ca:	4bb0      	ldr	r3, [pc, #704]	; (800a38c <_tzset_unlocked_r+0x2e4>)
 800a0cc:	6018      	str	r0, [r3, #0]
 800a0ce:	4bb0      	ldr	r3, [pc, #704]	; (800a390 <_tzset_unlocked_r+0x2e8>)
 800a0d0:	6830      	ldr	r0, [r6, #0]
 800a0d2:	e9c3 2200 	strd	r2, r2, [r3]
 800a0d6:	f000 fbd5 	bl	800a884 <free>
 800a0da:	6034      	str	r4, [r6, #0]
 800a0dc:	b00d      	add	sp, #52	; 0x34
 800a0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e2:	6831      	ldr	r1, [r6, #0]
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	d162      	bne.n	800a1ae <_tzset_unlocked_r+0x106>
 800a0e8:	6830      	ldr	r0, [r6, #0]
 800a0ea:	f000 fbcb 	bl	800a884 <free>
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f7f6 f82c 	bl	800014c <strlen>
 800a0f4:	1c41      	adds	r1, r0, #1
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	f7fe ffea 	bl	80090d0 <_malloc_r>
 800a0fc:	6030      	str	r0, [r6, #0]
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d15a      	bne.n	800a1b8 <_tzset_unlocked_r+0x110>
 800a102:	7823      	ldrb	r3, [r4, #0]
 800a104:	ae0a      	add	r6, sp, #40	; 0x28
 800a106:	2b3a      	cmp	r3, #58	; 0x3a
 800a108:	bf08      	it	eq
 800a10a:	3401      	addeq	r4, #1
 800a10c:	4633      	mov	r3, r6
 800a10e:	4620      	mov	r0, r4
 800a110:	4aa0      	ldr	r2, [pc, #640]	; (800a394 <_tzset_unlocked_r+0x2ec>)
 800a112:	49a1      	ldr	r1, [pc, #644]	; (800a398 <_tzset_unlocked_r+0x2f0>)
 800a114:	f000 ffa6 	bl	800b064 <siscanf>
 800a118:	2800      	cmp	r0, #0
 800a11a:	dddf      	ble.n	800a0dc <_tzset_unlocked_r+0x34>
 800a11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a11e:	18e7      	adds	r7, r4, r3
 800a120:	5ce3      	ldrb	r3, [r4, r3]
 800a122:	2b2d      	cmp	r3, #45	; 0x2d
 800a124:	d14c      	bne.n	800a1c0 <_tzset_unlocked_r+0x118>
 800a126:	f04f 38ff 	mov.w	r8, #4294967295
 800a12a:	3701      	adds	r7, #1
 800a12c:	2400      	movs	r4, #0
 800a12e:	f10d 0a20 	add.w	sl, sp, #32
 800a132:	f10d 0b1e 	add.w	fp, sp, #30
 800a136:	4633      	mov	r3, r6
 800a138:	4638      	mov	r0, r7
 800a13a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800a13e:	4997      	ldr	r1, [pc, #604]	; (800a39c <_tzset_unlocked_r+0x2f4>)
 800a140:	9603      	str	r6, [sp, #12]
 800a142:	f8cd b000 	str.w	fp, [sp]
 800a146:	aa07      	add	r2, sp, #28
 800a148:	f8ad 401e 	strh.w	r4, [sp, #30]
 800a14c:	f8ad 4020 	strh.w	r4, [sp, #32]
 800a150:	f000 ff88 	bl	800b064 <siscanf>
 800a154:	42a0      	cmp	r0, r4
 800a156:	ddc1      	ble.n	800a0dc <_tzset_unlocked_r+0x34>
 800a158:	213c      	movs	r1, #60	; 0x3c
 800a15a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a15e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a162:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800a3a0 <_tzset_unlocked_r+0x2f8>
 800a166:	fb01 3302 	mla	r3, r1, r2, r3
 800a16a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a16e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a172:	fb01 3302 	mla	r3, r1, r2, r3
 800a176:	fb08 f303 	mul.w	r3, r8, r3
 800a17a:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800a390 <_tzset_unlocked_r+0x2e8>
 800a17e:	62ab      	str	r3, [r5, #40]	; 0x28
 800a180:	4b84      	ldr	r3, [pc, #528]	; (800a394 <_tzset_unlocked_r+0x2ec>)
 800a182:	464a      	mov	r2, r9
 800a184:	f8c8 3000 	str.w	r3, [r8]
 800a188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a18a:	4983      	ldr	r1, [pc, #524]	; (800a398 <_tzset_unlocked_r+0x2f0>)
 800a18c:	441f      	add	r7, r3
 800a18e:	4638      	mov	r0, r7
 800a190:	4633      	mov	r3, r6
 800a192:	f000 ff67 	bl	800b064 <siscanf>
 800a196:	42a0      	cmp	r0, r4
 800a198:	dc18      	bgt.n	800a1cc <_tzset_unlocked_r+0x124>
 800a19a:	f8d8 3000 	ldr.w	r3, [r8]
 800a19e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a1a0:	f8c8 3004 	str.w	r3, [r8, #4]
 800a1a4:	4b77      	ldr	r3, [pc, #476]	; (800a384 <_tzset_unlocked_r+0x2dc>)
 800a1a6:	601a      	str	r2, [r3, #0]
 800a1a8:	4b78      	ldr	r3, [pc, #480]	; (800a38c <_tzset_unlocked_r+0x2e4>)
 800a1aa:	601c      	str	r4, [r3, #0]
 800a1ac:	e796      	b.n	800a0dc <_tzset_unlocked_r+0x34>
 800a1ae:	f7f5 ffd5 	bl	800015c <strcmp>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d198      	bne.n	800a0e8 <_tzset_unlocked_r+0x40>
 800a1b6:	e791      	b.n	800a0dc <_tzset_unlocked_r+0x34>
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	f000 ff7d 	bl	800b0b8 <strcpy>
 800a1be:	e7a0      	b.n	800a102 <_tzset_unlocked_r+0x5a>
 800a1c0:	2b2b      	cmp	r3, #43	; 0x2b
 800a1c2:	f04f 0801 	mov.w	r8, #1
 800a1c6:	bf08      	it	eq
 800a1c8:	3701      	addeq	r7, #1
 800a1ca:	e7af      	b.n	800a12c <_tzset_unlocked_r+0x84>
 800a1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ce:	f8c8 9004 	str.w	r9, [r8, #4]
 800a1d2:	18fc      	adds	r4, r7, r3
 800a1d4:	5cfb      	ldrb	r3, [r7, r3]
 800a1d6:	2b2d      	cmp	r3, #45	; 0x2d
 800a1d8:	f040 808c 	bne.w	800a2f4 <_tzset_unlocked_r+0x24c>
 800a1dc:	f04f 37ff 	mov.w	r7, #4294967295
 800a1e0:	3401      	adds	r4, #1
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a1ea:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a1ee:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a1f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a1f4:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a1f8:	4633      	mov	r3, r6
 800a1fa:	e9cd b600 	strd	fp, r6, [sp]
 800a1fe:	4967      	ldr	r1, [pc, #412]	; (800a39c <_tzset_unlocked_r+0x2f4>)
 800a200:	aa07      	add	r2, sp, #28
 800a202:	f000 ff2f 	bl	800b064 <siscanf>
 800a206:	2800      	cmp	r0, #0
 800a208:	dc7a      	bgt.n	800a300 <_tzset_unlocked_r+0x258>
 800a20a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a20c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800a210:	462f      	mov	r7, r5
 800a212:	f04f 0900 	mov.w	r9, #0
 800a216:	652b      	str	r3, [r5, #80]	; 0x50
 800a218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a21a:	441c      	add	r4, r3
 800a21c:	7823      	ldrb	r3, [r4, #0]
 800a21e:	2b2c      	cmp	r3, #44	; 0x2c
 800a220:	bf08      	it	eq
 800a222:	3401      	addeq	r4, #1
 800a224:	f894 8000 	ldrb.w	r8, [r4]
 800a228:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800a22c:	d17a      	bne.n	800a324 <_tzset_unlocked_r+0x27c>
 800a22e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800a232:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800a236:	ab09      	add	r3, sp, #36	; 0x24
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	4620      	mov	r0, r4
 800a23c:	4633      	mov	r3, r6
 800a23e:	4959      	ldr	r1, [pc, #356]	; (800a3a4 <_tzset_unlocked_r+0x2fc>)
 800a240:	9603      	str	r6, [sp, #12]
 800a242:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800a246:	f000 ff0d 	bl	800b064 <siscanf>
 800a24a:	2803      	cmp	r0, #3
 800a24c:	f47f af46 	bne.w	800a0dc <_tzset_unlocked_r+0x34>
 800a250:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800a254:	1e4b      	subs	r3, r1, #1
 800a256:	2b0b      	cmp	r3, #11
 800a258:	f63f af40 	bhi.w	800a0dc <_tzset_unlocked_r+0x34>
 800a25c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800a260:	1e53      	subs	r3, r2, #1
 800a262:	2b04      	cmp	r3, #4
 800a264:	f63f af3a 	bhi.w	800a0dc <_tzset_unlocked_r+0x34>
 800a268:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a26c:	2b06      	cmp	r3, #6
 800a26e:	f63f af35 	bhi.w	800a0dc <_tzset_unlocked_r+0x34>
 800a272:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800a276:	f887 8008 	strb.w	r8, [r7, #8]
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27e:	eb04 0803 	add.w	r8, r4, r3
 800a282:	2302      	movs	r3, #2
 800a284:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a288:	2300      	movs	r3, #0
 800a28a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a28e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a292:	930a      	str	r3, [sp, #40]	; 0x28
 800a294:	f898 3000 	ldrb.w	r3, [r8]
 800a298:	2b2f      	cmp	r3, #47	; 0x2f
 800a29a:	d109      	bne.n	800a2b0 <_tzset_unlocked_r+0x208>
 800a29c:	4633      	mov	r3, r6
 800a29e:	4640      	mov	r0, r8
 800a2a0:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a2a4:	e9cd b600 	strd	fp, r6, [sp]
 800a2a8:	493f      	ldr	r1, [pc, #252]	; (800a3a8 <_tzset_unlocked_r+0x300>)
 800a2aa:	aa07      	add	r2, sp, #28
 800a2ac:	f000 feda 	bl	800b064 <siscanf>
 800a2b0:	213c      	movs	r1, #60	; 0x3c
 800a2b2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a2b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a2ba:	3728      	adds	r7, #40	; 0x28
 800a2bc:	fb01 3302 	mla	r3, r1, r2, r3
 800a2c0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a2c4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a2c8:	fb01 3302 	mla	r3, r1, r2, r3
 800a2cc:	f847 3c10 	str.w	r3, [r7, #-16]
 800a2d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a2d2:	4444      	add	r4, r8
 800a2d4:	f1b9 0f00 	cmp.w	r9, #0
 800a2d8:	d021      	beq.n	800a31e <_tzset_unlocked_r+0x276>
 800a2da:	6868      	ldr	r0, [r5, #4]
 800a2dc:	f000 ff08 	bl	800b0f0 <__tzcalc_limits>
 800a2e0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a2e2:	4b28      	ldr	r3, [pc, #160]	; (800a384 <_tzset_unlocked_r+0x2dc>)
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a2e8:	1a9b      	subs	r3, r3, r2
 800a2ea:	bf18      	it	ne
 800a2ec:	2301      	movne	r3, #1
 800a2ee:	4a27      	ldr	r2, [pc, #156]	; (800a38c <_tzset_unlocked_r+0x2e4>)
 800a2f0:	6013      	str	r3, [r2, #0]
 800a2f2:	e6f3      	b.n	800a0dc <_tzset_unlocked_r+0x34>
 800a2f4:	2b2b      	cmp	r3, #43	; 0x2b
 800a2f6:	f04f 0701 	mov.w	r7, #1
 800a2fa:	bf08      	it	eq
 800a2fc:	3401      	addeq	r4, #1
 800a2fe:	e770      	b.n	800a1e2 <_tzset_unlocked_r+0x13a>
 800a300:	213c      	movs	r1, #60	; 0x3c
 800a302:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a306:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a30a:	fb01 3302 	mla	r3, r1, r2, r3
 800a30e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a312:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a316:	fb01 3302 	mla	r3, r1, r2, r3
 800a31a:	437b      	muls	r3, r7
 800a31c:	e778      	b.n	800a210 <_tzset_unlocked_r+0x168>
 800a31e:	f04f 0901 	mov.w	r9, #1
 800a322:	e77b      	b.n	800a21c <_tzset_unlocked_r+0x174>
 800a324:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a328:	bf0a      	itet	eq
 800a32a:	4643      	moveq	r3, r8
 800a32c:	2344      	movne	r3, #68	; 0x44
 800a32e:	3401      	addeq	r4, #1
 800a330:	220a      	movs	r2, #10
 800a332:	4620      	mov	r0, r4
 800a334:	a90b      	add	r1, sp, #44	; 0x2c
 800a336:	9305      	str	r3, [sp, #20]
 800a338:	f7ff fe9a 	bl	800a070 <strtoul>
 800a33c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a340:	9b05      	ldr	r3, [sp, #20]
 800a342:	45a0      	cmp	r8, r4
 800a344:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a348:	d114      	bne.n	800a374 <_tzset_unlocked_r+0x2cc>
 800a34a:	234d      	movs	r3, #77	; 0x4d
 800a34c:	f1b9 0f00 	cmp.w	r9, #0
 800a350:	d107      	bne.n	800a362 <_tzset_unlocked_r+0x2ba>
 800a352:	2103      	movs	r1, #3
 800a354:	722b      	strb	r3, [r5, #8]
 800a356:	2302      	movs	r3, #2
 800a358:	f8c5 9014 	str.w	r9, [r5, #20]
 800a35c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a360:	e78f      	b.n	800a282 <_tzset_unlocked_r+0x1da>
 800a362:	220b      	movs	r2, #11
 800a364:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a368:	2301      	movs	r3, #1
 800a36a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a36e:	2300      	movs	r3, #0
 800a370:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a372:	e786      	b.n	800a282 <_tzset_unlocked_r+0x1da>
 800a374:	b280      	uxth	r0, r0
 800a376:	723b      	strb	r3, [r7, #8]
 800a378:	6178      	str	r0, [r7, #20]
 800a37a:	e782      	b.n	800a282 <_tzset_unlocked_r+0x1da>
 800a37c:	0800c0e0 	.word	0x0800c0e0
 800a380:	2000072c 	.word	0x2000072c
 800a384:	20000734 	.word	0x20000734
 800a388:	0800c0e3 	.word	0x0800c0e3
 800a38c:	20000730 	.word	0x20000730
 800a390:	2000013c 	.word	0x2000013c
 800a394:	2000071f 	.word	0x2000071f
 800a398:	0800c0e7 	.word	0x0800c0e7
 800a39c:	0800c10a 	.word	0x0800c10a
 800a3a0:	20000714 	.word	0x20000714
 800a3a4:	0800c0f6 	.word	0x0800c0f6
 800a3a8:	0800c109 	.word	0x0800c109

0800a3ac <__swbuf_r>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	460e      	mov	r6, r1
 800a3b0:	4614      	mov	r4, r2
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	b118      	cbz	r0, 800a3be <__swbuf_r+0x12>
 800a3b6:	6983      	ldr	r3, [r0, #24]
 800a3b8:	b90b      	cbnz	r3, 800a3be <__swbuf_r+0x12>
 800a3ba:	f7fe fbbd 	bl	8008b38 <__sinit>
 800a3be:	4b21      	ldr	r3, [pc, #132]	; (800a444 <__swbuf_r+0x98>)
 800a3c0:	429c      	cmp	r4, r3
 800a3c2:	d12b      	bne.n	800a41c <__swbuf_r+0x70>
 800a3c4:	686c      	ldr	r4, [r5, #4]
 800a3c6:	69a3      	ldr	r3, [r4, #24]
 800a3c8:	60a3      	str	r3, [r4, #8]
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	071a      	lsls	r2, r3, #28
 800a3ce:	d52f      	bpl.n	800a430 <__swbuf_r+0x84>
 800a3d0:	6923      	ldr	r3, [r4, #16]
 800a3d2:	b36b      	cbz	r3, 800a430 <__swbuf_r+0x84>
 800a3d4:	6923      	ldr	r3, [r4, #16]
 800a3d6:	6820      	ldr	r0, [r4, #0]
 800a3d8:	b2f6      	uxtb	r6, r6
 800a3da:	1ac0      	subs	r0, r0, r3
 800a3dc:	6963      	ldr	r3, [r4, #20]
 800a3de:	4637      	mov	r7, r6
 800a3e0:	4283      	cmp	r3, r0
 800a3e2:	dc04      	bgt.n	800a3ee <__swbuf_r+0x42>
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	f000 f948 	bl	800a67c <_fflush_r>
 800a3ec:	bb30      	cbnz	r0, 800a43c <__swbuf_r+0x90>
 800a3ee:	68a3      	ldr	r3, [r4, #8]
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	60a3      	str	r3, [r4, #8]
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	6022      	str	r2, [r4, #0]
 800a3fc:	701e      	strb	r6, [r3, #0]
 800a3fe:	6963      	ldr	r3, [r4, #20]
 800a400:	4283      	cmp	r3, r0
 800a402:	d004      	beq.n	800a40e <__swbuf_r+0x62>
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	07db      	lsls	r3, r3, #31
 800a408:	d506      	bpl.n	800a418 <__swbuf_r+0x6c>
 800a40a:	2e0a      	cmp	r6, #10
 800a40c:	d104      	bne.n	800a418 <__swbuf_r+0x6c>
 800a40e:	4621      	mov	r1, r4
 800a410:	4628      	mov	r0, r5
 800a412:	f000 f933 	bl	800a67c <_fflush_r>
 800a416:	b988      	cbnz	r0, 800a43c <__swbuf_r+0x90>
 800a418:	4638      	mov	r0, r7
 800a41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a41c:	4b0a      	ldr	r3, [pc, #40]	; (800a448 <__swbuf_r+0x9c>)
 800a41e:	429c      	cmp	r4, r3
 800a420:	d101      	bne.n	800a426 <__swbuf_r+0x7a>
 800a422:	68ac      	ldr	r4, [r5, #8]
 800a424:	e7cf      	b.n	800a3c6 <__swbuf_r+0x1a>
 800a426:	4b09      	ldr	r3, [pc, #36]	; (800a44c <__swbuf_r+0xa0>)
 800a428:	429c      	cmp	r4, r3
 800a42a:	bf08      	it	eq
 800a42c:	68ec      	ldreq	r4, [r5, #12]
 800a42e:	e7ca      	b.n	800a3c6 <__swbuf_r+0x1a>
 800a430:	4621      	mov	r1, r4
 800a432:	4628      	mov	r0, r5
 800a434:	f000 f81e 	bl	800a474 <__swsetup_r>
 800a438:	2800      	cmp	r0, #0
 800a43a:	d0cb      	beq.n	800a3d4 <__swbuf_r+0x28>
 800a43c:	f04f 37ff 	mov.w	r7, #4294967295
 800a440:	e7ea      	b.n	800a418 <__swbuf_r+0x6c>
 800a442:	bf00      	nop
 800a444:	0800be1c 	.word	0x0800be1c
 800a448:	0800be3c 	.word	0x0800be3c
 800a44c:	0800bdfc 	.word	0x0800bdfc

0800a450 <_write_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	4604      	mov	r4, r0
 800a454:	4608      	mov	r0, r1
 800a456:	4611      	mov	r1, r2
 800a458:	2200      	movs	r2, #0
 800a45a:	4d05      	ldr	r5, [pc, #20]	; (800a470 <_write_r+0x20>)
 800a45c:	602a      	str	r2, [r5, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	f7fa fea5 	bl	80051ae <_write>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_write_r+0x1e>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_write_r+0x1e>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	20000710 	.word	0x20000710

0800a474 <__swsetup_r>:
 800a474:	4b32      	ldr	r3, [pc, #200]	; (800a540 <__swsetup_r+0xcc>)
 800a476:	b570      	push	{r4, r5, r6, lr}
 800a478:	681d      	ldr	r5, [r3, #0]
 800a47a:	4606      	mov	r6, r0
 800a47c:	460c      	mov	r4, r1
 800a47e:	b125      	cbz	r5, 800a48a <__swsetup_r+0x16>
 800a480:	69ab      	ldr	r3, [r5, #24]
 800a482:	b913      	cbnz	r3, 800a48a <__swsetup_r+0x16>
 800a484:	4628      	mov	r0, r5
 800a486:	f7fe fb57 	bl	8008b38 <__sinit>
 800a48a:	4b2e      	ldr	r3, [pc, #184]	; (800a544 <__swsetup_r+0xd0>)
 800a48c:	429c      	cmp	r4, r3
 800a48e:	d10f      	bne.n	800a4b0 <__swsetup_r+0x3c>
 800a490:	686c      	ldr	r4, [r5, #4]
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a498:	0719      	lsls	r1, r3, #28
 800a49a:	d42c      	bmi.n	800a4f6 <__swsetup_r+0x82>
 800a49c:	06dd      	lsls	r5, r3, #27
 800a49e:	d411      	bmi.n	800a4c4 <__swsetup_r+0x50>
 800a4a0:	2309      	movs	r3, #9
 800a4a2:	6033      	str	r3, [r6, #0]
 800a4a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	81a3      	strh	r3, [r4, #12]
 800a4ae:	e03e      	b.n	800a52e <__swsetup_r+0xba>
 800a4b0:	4b25      	ldr	r3, [pc, #148]	; (800a548 <__swsetup_r+0xd4>)
 800a4b2:	429c      	cmp	r4, r3
 800a4b4:	d101      	bne.n	800a4ba <__swsetup_r+0x46>
 800a4b6:	68ac      	ldr	r4, [r5, #8]
 800a4b8:	e7eb      	b.n	800a492 <__swsetup_r+0x1e>
 800a4ba:	4b24      	ldr	r3, [pc, #144]	; (800a54c <__swsetup_r+0xd8>)
 800a4bc:	429c      	cmp	r4, r3
 800a4be:	bf08      	it	eq
 800a4c0:	68ec      	ldreq	r4, [r5, #12]
 800a4c2:	e7e6      	b.n	800a492 <__swsetup_r+0x1e>
 800a4c4:	0758      	lsls	r0, r3, #29
 800a4c6:	d512      	bpl.n	800a4ee <__swsetup_r+0x7a>
 800a4c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ca:	b141      	cbz	r1, 800a4de <__swsetup_r+0x6a>
 800a4cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4d0:	4299      	cmp	r1, r3
 800a4d2:	d002      	beq.n	800a4da <__swsetup_r+0x66>
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f7fe fd93 	bl	8009000 <_free_r>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	6363      	str	r3, [r4, #52]	; 0x34
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4e4:	81a3      	strh	r3, [r4, #12]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	6063      	str	r3, [r4, #4]
 800a4ea:	6923      	ldr	r3, [r4, #16]
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	89a3      	ldrh	r3, [r4, #12]
 800a4f0:	f043 0308 	orr.w	r3, r3, #8
 800a4f4:	81a3      	strh	r3, [r4, #12]
 800a4f6:	6923      	ldr	r3, [r4, #16]
 800a4f8:	b94b      	cbnz	r3, 800a50e <__swsetup_r+0x9a>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a504:	d003      	beq.n	800a50e <__swsetup_r+0x9a>
 800a506:	4621      	mov	r1, r4
 800a508:	4630      	mov	r0, r6
 800a50a:	f7fe fd31 	bl	8008f70 <__smakebuf_r>
 800a50e:	89a0      	ldrh	r0, [r4, #12]
 800a510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a514:	f010 0301 	ands.w	r3, r0, #1
 800a518:	d00a      	beq.n	800a530 <__swsetup_r+0xbc>
 800a51a:	2300      	movs	r3, #0
 800a51c:	60a3      	str	r3, [r4, #8]
 800a51e:	6963      	ldr	r3, [r4, #20]
 800a520:	425b      	negs	r3, r3
 800a522:	61a3      	str	r3, [r4, #24]
 800a524:	6923      	ldr	r3, [r4, #16]
 800a526:	b943      	cbnz	r3, 800a53a <__swsetup_r+0xc6>
 800a528:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a52c:	d1ba      	bne.n	800a4a4 <__swsetup_r+0x30>
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	0781      	lsls	r1, r0, #30
 800a532:	bf58      	it	pl
 800a534:	6963      	ldrpl	r3, [r4, #20]
 800a536:	60a3      	str	r3, [r4, #8]
 800a538:	e7f4      	b.n	800a524 <__swsetup_r+0xb0>
 800a53a:	2000      	movs	r0, #0
 800a53c:	e7f7      	b.n	800a52e <__swsetup_r+0xba>
 800a53e:	bf00      	nop
 800a540:	200000d8 	.word	0x200000d8
 800a544:	0800be1c 	.word	0x0800be1c
 800a548:	0800be3c 	.word	0x0800be3c
 800a54c:	0800bdfc 	.word	0x0800bdfc

0800a550 <abs>:
 800a550:	2800      	cmp	r0, #0
 800a552:	bfb8      	it	lt
 800a554:	4240      	neglt	r0, r0
 800a556:	4770      	bx	lr

0800a558 <_close_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	2300      	movs	r3, #0
 800a55c:	4d05      	ldr	r5, [pc, #20]	; (800a574 <_close_r+0x1c>)
 800a55e:	4604      	mov	r4, r0
 800a560:	4608      	mov	r0, r1
 800a562:	602b      	str	r3, [r5, #0]
 800a564:	f7fa fe3f 	bl	80051e6 <_close>
 800a568:	1c43      	adds	r3, r0, #1
 800a56a:	d102      	bne.n	800a572 <_close_r+0x1a>
 800a56c:	682b      	ldr	r3, [r5, #0]
 800a56e:	b103      	cbz	r3, 800a572 <_close_r+0x1a>
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	bd38      	pop	{r3, r4, r5, pc}
 800a574:	20000710 	.word	0x20000710

0800a578 <__sflush_r>:
 800a578:	898a      	ldrh	r2, [r1, #12]
 800a57a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57c:	4605      	mov	r5, r0
 800a57e:	0710      	lsls	r0, r2, #28
 800a580:	460c      	mov	r4, r1
 800a582:	d457      	bmi.n	800a634 <__sflush_r+0xbc>
 800a584:	684b      	ldr	r3, [r1, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	dc04      	bgt.n	800a594 <__sflush_r+0x1c>
 800a58a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	dc01      	bgt.n	800a594 <__sflush_r+0x1c>
 800a590:	2000      	movs	r0, #0
 800a592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a596:	2e00      	cmp	r6, #0
 800a598:	d0fa      	beq.n	800a590 <__sflush_r+0x18>
 800a59a:	2300      	movs	r3, #0
 800a59c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5a0:	682f      	ldr	r7, [r5, #0]
 800a5a2:	602b      	str	r3, [r5, #0]
 800a5a4:	d032      	beq.n	800a60c <__sflush_r+0x94>
 800a5a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5a8:	89a3      	ldrh	r3, [r4, #12]
 800a5aa:	075a      	lsls	r2, r3, #29
 800a5ac:	d505      	bpl.n	800a5ba <__sflush_r+0x42>
 800a5ae:	6863      	ldr	r3, [r4, #4]
 800a5b0:	1ac0      	subs	r0, r0, r3
 800a5b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5b4:	b10b      	cbz	r3, 800a5ba <__sflush_r+0x42>
 800a5b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5b8:	1ac0      	subs	r0, r0, r3
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	4602      	mov	r2, r0
 800a5be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	6a21      	ldr	r1, [r4, #32]
 800a5c4:	47b0      	blx	r6
 800a5c6:	1c43      	adds	r3, r0, #1
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	d106      	bne.n	800a5da <__sflush_r+0x62>
 800a5cc:	6829      	ldr	r1, [r5, #0]
 800a5ce:	291d      	cmp	r1, #29
 800a5d0:	d82c      	bhi.n	800a62c <__sflush_r+0xb4>
 800a5d2:	4a29      	ldr	r2, [pc, #164]	; (800a678 <__sflush_r+0x100>)
 800a5d4:	40ca      	lsrs	r2, r1
 800a5d6:	07d6      	lsls	r6, r2, #31
 800a5d8:	d528      	bpl.n	800a62c <__sflush_r+0xb4>
 800a5da:	2200      	movs	r2, #0
 800a5dc:	6062      	str	r2, [r4, #4]
 800a5de:	6922      	ldr	r2, [r4, #16]
 800a5e0:	04d9      	lsls	r1, r3, #19
 800a5e2:	6022      	str	r2, [r4, #0]
 800a5e4:	d504      	bpl.n	800a5f0 <__sflush_r+0x78>
 800a5e6:	1c42      	adds	r2, r0, #1
 800a5e8:	d101      	bne.n	800a5ee <__sflush_r+0x76>
 800a5ea:	682b      	ldr	r3, [r5, #0]
 800a5ec:	b903      	cbnz	r3, 800a5f0 <__sflush_r+0x78>
 800a5ee:	6560      	str	r0, [r4, #84]	; 0x54
 800a5f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5f2:	602f      	str	r7, [r5, #0]
 800a5f4:	2900      	cmp	r1, #0
 800a5f6:	d0cb      	beq.n	800a590 <__sflush_r+0x18>
 800a5f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5fc:	4299      	cmp	r1, r3
 800a5fe:	d002      	beq.n	800a606 <__sflush_r+0x8e>
 800a600:	4628      	mov	r0, r5
 800a602:	f7fe fcfd 	bl	8009000 <_free_r>
 800a606:	2000      	movs	r0, #0
 800a608:	6360      	str	r0, [r4, #52]	; 0x34
 800a60a:	e7c2      	b.n	800a592 <__sflush_r+0x1a>
 800a60c:	6a21      	ldr	r1, [r4, #32]
 800a60e:	2301      	movs	r3, #1
 800a610:	4628      	mov	r0, r5
 800a612:	47b0      	blx	r6
 800a614:	1c41      	adds	r1, r0, #1
 800a616:	d1c7      	bne.n	800a5a8 <__sflush_r+0x30>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d0c4      	beq.n	800a5a8 <__sflush_r+0x30>
 800a61e:	2b1d      	cmp	r3, #29
 800a620:	d001      	beq.n	800a626 <__sflush_r+0xae>
 800a622:	2b16      	cmp	r3, #22
 800a624:	d101      	bne.n	800a62a <__sflush_r+0xb2>
 800a626:	602f      	str	r7, [r5, #0]
 800a628:	e7b2      	b.n	800a590 <__sflush_r+0x18>
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a630:	81a3      	strh	r3, [r4, #12]
 800a632:	e7ae      	b.n	800a592 <__sflush_r+0x1a>
 800a634:	690f      	ldr	r7, [r1, #16]
 800a636:	2f00      	cmp	r7, #0
 800a638:	d0aa      	beq.n	800a590 <__sflush_r+0x18>
 800a63a:	0793      	lsls	r3, r2, #30
 800a63c:	bf18      	it	ne
 800a63e:	2300      	movne	r3, #0
 800a640:	680e      	ldr	r6, [r1, #0]
 800a642:	bf08      	it	eq
 800a644:	694b      	ldreq	r3, [r1, #20]
 800a646:	1bf6      	subs	r6, r6, r7
 800a648:	600f      	str	r7, [r1, #0]
 800a64a:	608b      	str	r3, [r1, #8]
 800a64c:	2e00      	cmp	r6, #0
 800a64e:	dd9f      	ble.n	800a590 <__sflush_r+0x18>
 800a650:	4633      	mov	r3, r6
 800a652:	463a      	mov	r2, r7
 800a654:	4628      	mov	r0, r5
 800a656:	6a21      	ldr	r1, [r4, #32]
 800a658:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a65c:	47e0      	blx	ip
 800a65e:	2800      	cmp	r0, #0
 800a660:	dc06      	bgt.n	800a670 <__sflush_r+0xf8>
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	f04f 30ff 	mov.w	r0, #4294967295
 800a668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a66c:	81a3      	strh	r3, [r4, #12]
 800a66e:	e790      	b.n	800a592 <__sflush_r+0x1a>
 800a670:	4407      	add	r7, r0
 800a672:	1a36      	subs	r6, r6, r0
 800a674:	e7ea      	b.n	800a64c <__sflush_r+0xd4>
 800a676:	bf00      	nop
 800a678:	20400001 	.word	0x20400001

0800a67c <_fflush_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	690b      	ldr	r3, [r1, #16]
 800a680:	4605      	mov	r5, r0
 800a682:	460c      	mov	r4, r1
 800a684:	b913      	cbnz	r3, 800a68c <_fflush_r+0x10>
 800a686:	2500      	movs	r5, #0
 800a688:	4628      	mov	r0, r5
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	b118      	cbz	r0, 800a696 <_fflush_r+0x1a>
 800a68e:	6983      	ldr	r3, [r0, #24]
 800a690:	b90b      	cbnz	r3, 800a696 <_fflush_r+0x1a>
 800a692:	f7fe fa51 	bl	8008b38 <__sinit>
 800a696:	4b14      	ldr	r3, [pc, #80]	; (800a6e8 <_fflush_r+0x6c>)
 800a698:	429c      	cmp	r4, r3
 800a69a:	d11b      	bne.n	800a6d4 <_fflush_r+0x58>
 800a69c:	686c      	ldr	r4, [r5, #4]
 800a69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d0ef      	beq.n	800a686 <_fflush_r+0xa>
 800a6a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6a8:	07d0      	lsls	r0, r2, #31
 800a6aa:	d404      	bmi.n	800a6b6 <_fflush_r+0x3a>
 800a6ac:	0599      	lsls	r1, r3, #22
 800a6ae:	d402      	bmi.n	800a6b6 <_fflush_r+0x3a>
 800a6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6b2:	f7fe fc34 	bl	8008f1e <__retarget_lock_acquire_recursive>
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	f7ff ff5d 	bl	800a578 <__sflush_r>
 800a6be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	07da      	lsls	r2, r3, #31
 800a6c4:	d4e0      	bmi.n	800a688 <_fflush_r+0xc>
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	059b      	lsls	r3, r3, #22
 800a6ca:	d4dd      	bmi.n	800a688 <_fflush_r+0xc>
 800a6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ce:	f7fe fc28 	bl	8008f22 <__retarget_lock_release_recursive>
 800a6d2:	e7d9      	b.n	800a688 <_fflush_r+0xc>
 800a6d4:	4b05      	ldr	r3, [pc, #20]	; (800a6ec <_fflush_r+0x70>)
 800a6d6:	429c      	cmp	r4, r3
 800a6d8:	d101      	bne.n	800a6de <_fflush_r+0x62>
 800a6da:	68ac      	ldr	r4, [r5, #8]
 800a6dc:	e7df      	b.n	800a69e <_fflush_r+0x22>
 800a6de:	4b04      	ldr	r3, [pc, #16]	; (800a6f0 <_fflush_r+0x74>)
 800a6e0:	429c      	cmp	r4, r3
 800a6e2:	bf08      	it	eq
 800a6e4:	68ec      	ldreq	r4, [r5, #12]
 800a6e6:	e7da      	b.n	800a69e <_fflush_r+0x22>
 800a6e8:	0800be1c 	.word	0x0800be1c
 800a6ec:	0800be3c 	.word	0x0800be3c
 800a6f0:	0800bdfc 	.word	0x0800bdfc

0800a6f4 <fflush>:
 800a6f4:	4601      	mov	r1, r0
 800a6f6:	b920      	cbnz	r0, 800a702 <fflush+0xe>
 800a6f8:	4b04      	ldr	r3, [pc, #16]	; (800a70c <fflush+0x18>)
 800a6fa:	4905      	ldr	r1, [pc, #20]	; (800a710 <fflush+0x1c>)
 800a6fc:	6818      	ldr	r0, [r3, #0]
 800a6fe:	f7fe bbc8 	b.w	8008e92 <_fwalk_reent>
 800a702:	4b04      	ldr	r3, [pc, #16]	; (800a714 <fflush+0x20>)
 800a704:	6818      	ldr	r0, [r3, #0]
 800a706:	f7ff bfb9 	b.w	800a67c <_fflush_r>
 800a70a:	bf00      	nop
 800a70c:	0800be5c 	.word	0x0800be5c
 800a710:	0800a67d 	.word	0x0800a67d
 800a714:	200000d8 	.word	0x200000d8

0800a718 <__sflags>:
 800a718:	780b      	ldrb	r3, [r1, #0]
 800a71a:	b530      	push	{r4, r5, lr}
 800a71c:	2b72      	cmp	r3, #114	; 0x72
 800a71e:	d022      	beq.n	800a766 <__sflags+0x4e>
 800a720:	2b77      	cmp	r3, #119	; 0x77
 800a722:	d024      	beq.n	800a76e <__sflags+0x56>
 800a724:	2b61      	cmp	r3, #97	; 0x61
 800a726:	d027      	beq.n	800a778 <__sflags+0x60>
 800a728:	2316      	movs	r3, #22
 800a72a:	6003      	str	r3, [r0, #0]
 800a72c:	2000      	movs	r0, #0
 800a72e:	bd30      	pop	{r4, r5, pc}
 800a730:	2d62      	cmp	r5, #98	; 0x62
 800a732:	d012      	beq.n	800a75a <__sflags+0x42>
 800a734:	2d78      	cmp	r5, #120	; 0x78
 800a736:	d013      	beq.n	800a760 <__sflags+0x48>
 800a738:	2d2b      	cmp	r5, #43	; 0x2b
 800a73a:	d107      	bne.n	800a74c <__sflags+0x34>
 800a73c:	f020 001c 	bic.w	r0, r0, #28
 800a740:	f023 0303 	bic.w	r3, r3, #3
 800a744:	f040 0010 	orr.w	r0, r0, #16
 800a748:	f043 0302 	orr.w	r3, r3, #2
 800a74c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a750:	2d00      	cmp	r5, #0
 800a752:	d1ed      	bne.n	800a730 <__sflags+0x18>
 800a754:	4323      	orrs	r3, r4
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	e7e9      	b.n	800a72e <__sflags+0x16>
 800a75a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a75e:	e7f5      	b.n	800a74c <__sflags+0x34>
 800a760:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a764:	e7f2      	b.n	800a74c <__sflags+0x34>
 800a766:	2400      	movs	r4, #0
 800a768:	2004      	movs	r0, #4
 800a76a:	4623      	mov	r3, r4
 800a76c:	e7ee      	b.n	800a74c <__sflags+0x34>
 800a76e:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800a772:	2301      	movs	r3, #1
 800a774:	2008      	movs	r0, #8
 800a776:	e7e9      	b.n	800a74c <__sflags+0x34>
 800a778:	f44f 7402 	mov.w	r4, #520	; 0x208
 800a77c:	2301      	movs	r3, #1
 800a77e:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a782:	e7e3      	b.n	800a74c <__sflags+0x34>

0800a784 <_fstat_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	2300      	movs	r3, #0
 800a788:	4d06      	ldr	r5, [pc, #24]	; (800a7a4 <_fstat_r+0x20>)
 800a78a:	4604      	mov	r4, r0
 800a78c:	4608      	mov	r0, r1
 800a78e:	4611      	mov	r1, r2
 800a790:	602b      	str	r3, [r5, #0]
 800a792:	f7fa fd33 	bl	80051fc <_fstat>
 800a796:	1c43      	adds	r3, r0, #1
 800a798:	d102      	bne.n	800a7a0 <_fstat_r+0x1c>
 800a79a:	682b      	ldr	r3, [r5, #0]
 800a79c:	b103      	cbz	r3, 800a7a0 <_fstat_r+0x1c>
 800a79e:	6023      	str	r3, [r4, #0]
 800a7a0:	bd38      	pop	{r3, r4, r5, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20000710 	.word	0x20000710

0800a7a8 <_findenv_r>:
 800a7a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800a81c <_findenv_r+0x74>
 800a7b0:	4607      	mov	r7, r0
 800a7b2:	4689      	mov	r9, r1
 800a7b4:	4616      	mov	r6, r2
 800a7b6:	f000 fd45 	bl	800b244 <__env_lock>
 800a7ba:	f8da 4000 	ldr.w	r4, [sl]
 800a7be:	b134      	cbz	r4, 800a7ce <_findenv_r+0x26>
 800a7c0:	464b      	mov	r3, r9
 800a7c2:	4698      	mov	r8, r3
 800a7c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c8:	b13a      	cbz	r2, 800a7da <_findenv_r+0x32>
 800a7ca:	2a3d      	cmp	r2, #61	; 0x3d
 800a7cc:	d1f9      	bne.n	800a7c2 <_findenv_r+0x1a>
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	f000 fd3e 	bl	800b250 <__env_unlock>
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7da:	eba8 0809 	sub.w	r8, r8, r9
 800a7de:	46a3      	mov	fp, r4
 800a7e0:	f854 0b04 	ldr.w	r0, [r4], #4
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d0f2      	beq.n	800a7ce <_findenv_r+0x26>
 800a7e8:	4642      	mov	r2, r8
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	f000 fc6c 	bl	800b0c8 <strncmp>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d1f4      	bne.n	800a7de <_findenv_r+0x36>
 800a7f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a7f8:	eb03 0508 	add.w	r5, r3, r8
 800a7fc:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a800:	2b3d      	cmp	r3, #61	; 0x3d
 800a802:	d1ec      	bne.n	800a7de <_findenv_r+0x36>
 800a804:	f8da 3000 	ldr.w	r3, [sl]
 800a808:	4638      	mov	r0, r7
 800a80a:	ebab 0303 	sub.w	r3, fp, r3
 800a80e:	109b      	asrs	r3, r3, #2
 800a810:	6033      	str	r3, [r6, #0]
 800a812:	f000 fd1d 	bl	800b250 <__env_unlock>
 800a816:	1c68      	adds	r0, r5, #1
 800a818:	e7dd      	b.n	800a7d6 <_findenv_r+0x2e>
 800a81a:	bf00      	nop
 800a81c:	200000b4 	.word	0x200000b4

0800a820 <_getenv_r>:
 800a820:	b507      	push	{r0, r1, r2, lr}
 800a822:	aa01      	add	r2, sp, #4
 800a824:	f7ff ffc0 	bl	800a7a8 <_findenv_r>
 800a828:	b003      	add	sp, #12
 800a82a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a830 <__gettzinfo>:
 800a830:	4800      	ldr	r0, [pc, #0]	; (800a834 <__gettzinfo+0x4>)
 800a832:	4770      	bx	lr
 800a834:	20000148 	.word	0x20000148

0800a838 <_isatty_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	2300      	movs	r3, #0
 800a83c:	4d05      	ldr	r5, [pc, #20]	; (800a854 <_isatty_r+0x1c>)
 800a83e:	4604      	mov	r4, r0
 800a840:	4608      	mov	r0, r1
 800a842:	602b      	str	r3, [r5, #0]
 800a844:	f7fa fce9 	bl	800521a <_isatty>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	d102      	bne.n	800a852 <_isatty_r+0x1a>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	b103      	cbz	r3, 800a852 <_isatty_r+0x1a>
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	bd38      	pop	{r3, r4, r5, pc}
 800a854:	20000710 	.word	0x20000710

0800a858 <labs>:
 800a858:	2800      	cmp	r0, #0
 800a85a:	bfb8      	it	lt
 800a85c:	4240      	neglt	r0, r0
 800a85e:	4770      	bx	lr

0800a860 <_lseek_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4604      	mov	r4, r0
 800a864:	4608      	mov	r0, r1
 800a866:	4611      	mov	r1, r2
 800a868:	2200      	movs	r2, #0
 800a86a:	4d05      	ldr	r5, [pc, #20]	; (800a880 <_lseek_r+0x20>)
 800a86c:	602a      	str	r2, [r5, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	f7fa fcdd 	bl	800522e <_lseek>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d102      	bne.n	800a87e <_lseek_r+0x1e>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	b103      	cbz	r3, 800a87e <_lseek_r+0x1e>
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	20000710 	.word	0x20000710

0800a884 <free>:
 800a884:	4b02      	ldr	r3, [pc, #8]	; (800a890 <free+0xc>)
 800a886:	4601      	mov	r1, r0
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	f7fe bbb9 	b.w	8009000 <_free_r>
 800a88e:	bf00      	nop
 800a890:	200000d8 	.word	0x200000d8

0800a894 <memcpy>:
 800a894:	440a      	add	r2, r1
 800a896:	4291      	cmp	r1, r2
 800a898:	f100 33ff 	add.w	r3, r0, #4294967295
 800a89c:	d100      	bne.n	800a8a0 <memcpy+0xc>
 800a89e:	4770      	bx	lr
 800a8a0:	b510      	push	{r4, lr}
 800a8a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8a6:	4291      	cmp	r1, r2
 800a8a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8ac:	d1f9      	bne.n	800a8a2 <memcpy+0xe>
 800a8ae:	bd10      	pop	{r4, pc}

0800a8b0 <__malloc_lock>:
 800a8b0:	4801      	ldr	r0, [pc, #4]	; (800a8b8 <__malloc_lock+0x8>)
 800a8b2:	f7fe bb34 	b.w	8008f1e <__retarget_lock_acquire_recursive>
 800a8b6:	bf00      	nop
 800a8b8:	20000701 	.word	0x20000701

0800a8bc <__malloc_unlock>:
 800a8bc:	4801      	ldr	r0, [pc, #4]	; (800a8c4 <__malloc_unlock+0x8>)
 800a8be:	f7fe bb30 	b.w	8008f22 <__retarget_lock_release_recursive>
 800a8c2:	bf00      	nop
 800a8c4:	20000701 	.word	0x20000701

0800a8c8 <__ssputs_r>:
 800a8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8cc:	688e      	ldr	r6, [r1, #8]
 800a8ce:	4682      	mov	sl, r0
 800a8d0:	429e      	cmp	r6, r3
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	4690      	mov	r8, r2
 800a8d6:	461f      	mov	r7, r3
 800a8d8:	d838      	bhi.n	800a94c <__ssputs_r+0x84>
 800a8da:	898a      	ldrh	r2, [r1, #12]
 800a8dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8e0:	d032      	beq.n	800a948 <__ssputs_r+0x80>
 800a8e2:	6825      	ldr	r5, [r4, #0]
 800a8e4:	6909      	ldr	r1, [r1, #16]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	eba5 0901 	sub.w	r9, r5, r1
 800a8ec:	6965      	ldr	r5, [r4, #20]
 800a8ee:	444b      	add	r3, r9
 800a8f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8f8:	106d      	asrs	r5, r5, #1
 800a8fa:	429d      	cmp	r5, r3
 800a8fc:	bf38      	it	cc
 800a8fe:	461d      	movcc	r5, r3
 800a900:	0553      	lsls	r3, r2, #21
 800a902:	d531      	bpl.n	800a968 <__ssputs_r+0xa0>
 800a904:	4629      	mov	r1, r5
 800a906:	f7fe fbe3 	bl	80090d0 <_malloc_r>
 800a90a:	4606      	mov	r6, r0
 800a90c:	b950      	cbnz	r0, 800a924 <__ssputs_r+0x5c>
 800a90e:	230c      	movs	r3, #12
 800a910:	f04f 30ff 	mov.w	r0, #4294967295
 800a914:	f8ca 3000 	str.w	r3, [sl]
 800a918:	89a3      	ldrh	r3, [r4, #12]
 800a91a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a91e:	81a3      	strh	r3, [r4, #12]
 800a920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a924:	464a      	mov	r2, r9
 800a926:	6921      	ldr	r1, [r4, #16]
 800a928:	f7ff ffb4 	bl	800a894 <memcpy>
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a936:	81a3      	strh	r3, [r4, #12]
 800a938:	6126      	str	r6, [r4, #16]
 800a93a:	444e      	add	r6, r9
 800a93c:	6026      	str	r6, [r4, #0]
 800a93e:	463e      	mov	r6, r7
 800a940:	6165      	str	r5, [r4, #20]
 800a942:	eba5 0509 	sub.w	r5, r5, r9
 800a946:	60a5      	str	r5, [r4, #8]
 800a948:	42be      	cmp	r6, r7
 800a94a:	d900      	bls.n	800a94e <__ssputs_r+0x86>
 800a94c:	463e      	mov	r6, r7
 800a94e:	4632      	mov	r2, r6
 800a950:	4641      	mov	r1, r8
 800a952:	6820      	ldr	r0, [r4, #0]
 800a954:	f000 fc90 	bl	800b278 <memmove>
 800a958:	68a3      	ldr	r3, [r4, #8]
 800a95a:	2000      	movs	r0, #0
 800a95c:	1b9b      	subs	r3, r3, r6
 800a95e:	60a3      	str	r3, [r4, #8]
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	4433      	add	r3, r6
 800a964:	6023      	str	r3, [r4, #0]
 800a966:	e7db      	b.n	800a920 <__ssputs_r+0x58>
 800a968:	462a      	mov	r2, r5
 800a96a:	f000 fc9f 	bl	800b2ac <_realloc_r>
 800a96e:	4606      	mov	r6, r0
 800a970:	2800      	cmp	r0, #0
 800a972:	d1e1      	bne.n	800a938 <__ssputs_r+0x70>
 800a974:	4650      	mov	r0, sl
 800a976:	6921      	ldr	r1, [r4, #16]
 800a978:	f7fe fb42 	bl	8009000 <_free_r>
 800a97c:	e7c7      	b.n	800a90e <__ssputs_r+0x46>
	...

0800a980 <_svfiprintf_r>:
 800a980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a984:	4698      	mov	r8, r3
 800a986:	898b      	ldrh	r3, [r1, #12]
 800a988:	4607      	mov	r7, r0
 800a98a:	061b      	lsls	r3, r3, #24
 800a98c:	460d      	mov	r5, r1
 800a98e:	4614      	mov	r4, r2
 800a990:	b09d      	sub	sp, #116	; 0x74
 800a992:	d50e      	bpl.n	800a9b2 <_svfiprintf_r+0x32>
 800a994:	690b      	ldr	r3, [r1, #16]
 800a996:	b963      	cbnz	r3, 800a9b2 <_svfiprintf_r+0x32>
 800a998:	2140      	movs	r1, #64	; 0x40
 800a99a:	f7fe fb99 	bl	80090d0 <_malloc_r>
 800a99e:	6028      	str	r0, [r5, #0]
 800a9a0:	6128      	str	r0, [r5, #16]
 800a9a2:	b920      	cbnz	r0, 800a9ae <_svfiprintf_r+0x2e>
 800a9a4:	230c      	movs	r3, #12
 800a9a6:	603b      	str	r3, [r7, #0]
 800a9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ac:	e0d1      	b.n	800ab52 <_svfiprintf_r+0x1d2>
 800a9ae:	2340      	movs	r3, #64	; 0x40
 800a9b0:	616b      	str	r3, [r5, #20]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b6:	2320      	movs	r3, #32
 800a9b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9bc:	2330      	movs	r3, #48	; 0x30
 800a9be:	f04f 0901 	mov.w	r9, #1
 800a9c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ab6c <_svfiprintf_r+0x1ec>
 800a9ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9ce:	4623      	mov	r3, r4
 800a9d0:	469a      	mov	sl, r3
 800a9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9d6:	b10a      	cbz	r2, 800a9dc <_svfiprintf_r+0x5c>
 800a9d8:	2a25      	cmp	r2, #37	; 0x25
 800a9da:	d1f9      	bne.n	800a9d0 <_svfiprintf_r+0x50>
 800a9dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a9e0:	d00b      	beq.n	800a9fa <_svfiprintf_r+0x7a>
 800a9e2:	465b      	mov	r3, fp
 800a9e4:	4622      	mov	r2, r4
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	4638      	mov	r0, r7
 800a9ea:	f7ff ff6d 	bl	800a8c8 <__ssputs_r>
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	f000 80aa 	beq.w	800ab48 <_svfiprintf_r+0x1c8>
 800a9f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9f6:	445a      	add	r2, fp
 800a9f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 80a2 	beq.w	800ab48 <_svfiprintf_r+0x1c8>
 800aa04:	2300      	movs	r3, #0
 800aa06:	f04f 32ff 	mov.w	r2, #4294967295
 800aa0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa0e:	f10a 0a01 	add.w	sl, sl, #1
 800aa12:	9304      	str	r3, [sp, #16]
 800aa14:	9307      	str	r3, [sp, #28]
 800aa16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa1a:	931a      	str	r3, [sp, #104]	; 0x68
 800aa1c:	4654      	mov	r4, sl
 800aa1e:	2205      	movs	r2, #5
 800aa20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa24:	4851      	ldr	r0, [pc, #324]	; (800ab6c <_svfiprintf_r+0x1ec>)
 800aa26:	f000 fc19 	bl	800b25c <memchr>
 800aa2a:	9a04      	ldr	r2, [sp, #16]
 800aa2c:	b9d8      	cbnz	r0, 800aa66 <_svfiprintf_r+0xe6>
 800aa2e:	06d0      	lsls	r0, r2, #27
 800aa30:	bf44      	itt	mi
 800aa32:	2320      	movmi	r3, #32
 800aa34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa38:	0711      	lsls	r1, r2, #28
 800aa3a:	bf44      	itt	mi
 800aa3c:	232b      	movmi	r3, #43	; 0x2b
 800aa3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa42:	f89a 3000 	ldrb.w	r3, [sl]
 800aa46:	2b2a      	cmp	r3, #42	; 0x2a
 800aa48:	d015      	beq.n	800aa76 <_svfiprintf_r+0xf6>
 800aa4a:	4654      	mov	r4, sl
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	f04f 0c0a 	mov.w	ip, #10
 800aa52:	9a07      	ldr	r2, [sp, #28]
 800aa54:	4621      	mov	r1, r4
 800aa56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa5a:	3b30      	subs	r3, #48	; 0x30
 800aa5c:	2b09      	cmp	r3, #9
 800aa5e:	d94e      	bls.n	800aafe <_svfiprintf_r+0x17e>
 800aa60:	b1b0      	cbz	r0, 800aa90 <_svfiprintf_r+0x110>
 800aa62:	9207      	str	r2, [sp, #28]
 800aa64:	e014      	b.n	800aa90 <_svfiprintf_r+0x110>
 800aa66:	eba0 0308 	sub.w	r3, r0, r8
 800aa6a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	46a2      	mov	sl, r4
 800aa72:	9304      	str	r3, [sp, #16]
 800aa74:	e7d2      	b.n	800aa1c <_svfiprintf_r+0x9c>
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	1d19      	adds	r1, r3, #4
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	9103      	str	r1, [sp, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	bfbb      	ittet	lt
 800aa82:	425b      	neglt	r3, r3
 800aa84:	f042 0202 	orrlt.w	r2, r2, #2
 800aa88:	9307      	strge	r3, [sp, #28]
 800aa8a:	9307      	strlt	r3, [sp, #28]
 800aa8c:	bfb8      	it	lt
 800aa8e:	9204      	strlt	r2, [sp, #16]
 800aa90:	7823      	ldrb	r3, [r4, #0]
 800aa92:	2b2e      	cmp	r3, #46	; 0x2e
 800aa94:	d10c      	bne.n	800aab0 <_svfiprintf_r+0x130>
 800aa96:	7863      	ldrb	r3, [r4, #1]
 800aa98:	2b2a      	cmp	r3, #42	; 0x2a
 800aa9a:	d135      	bne.n	800ab08 <_svfiprintf_r+0x188>
 800aa9c:	9b03      	ldr	r3, [sp, #12]
 800aa9e:	3402      	adds	r4, #2
 800aaa0:	1d1a      	adds	r2, r3, #4
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	9203      	str	r2, [sp, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bfb8      	it	lt
 800aaaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800aaae:	9305      	str	r3, [sp, #20]
 800aab0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ab70 <_svfiprintf_r+0x1f0>
 800aab4:	2203      	movs	r2, #3
 800aab6:	4650      	mov	r0, sl
 800aab8:	7821      	ldrb	r1, [r4, #0]
 800aaba:	f000 fbcf 	bl	800b25c <memchr>
 800aabe:	b140      	cbz	r0, 800aad2 <_svfiprintf_r+0x152>
 800aac0:	2340      	movs	r3, #64	; 0x40
 800aac2:	eba0 000a 	sub.w	r0, r0, sl
 800aac6:	fa03 f000 	lsl.w	r0, r3, r0
 800aaca:	9b04      	ldr	r3, [sp, #16]
 800aacc:	3401      	adds	r4, #1
 800aace:	4303      	orrs	r3, r0
 800aad0:	9304      	str	r3, [sp, #16]
 800aad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad6:	2206      	movs	r2, #6
 800aad8:	4826      	ldr	r0, [pc, #152]	; (800ab74 <_svfiprintf_r+0x1f4>)
 800aada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aade:	f000 fbbd 	bl	800b25c <memchr>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d038      	beq.n	800ab58 <_svfiprintf_r+0x1d8>
 800aae6:	4b24      	ldr	r3, [pc, #144]	; (800ab78 <_svfiprintf_r+0x1f8>)
 800aae8:	bb1b      	cbnz	r3, 800ab32 <_svfiprintf_r+0x1b2>
 800aaea:	9b03      	ldr	r3, [sp, #12]
 800aaec:	3307      	adds	r3, #7
 800aaee:	f023 0307 	bic.w	r3, r3, #7
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	9303      	str	r3, [sp, #12]
 800aaf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf8:	4433      	add	r3, r6
 800aafa:	9309      	str	r3, [sp, #36]	; 0x24
 800aafc:	e767      	b.n	800a9ce <_svfiprintf_r+0x4e>
 800aafe:	460c      	mov	r4, r1
 800ab00:	2001      	movs	r0, #1
 800ab02:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab06:	e7a5      	b.n	800aa54 <_svfiprintf_r+0xd4>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f04f 0c0a 	mov.w	ip, #10
 800ab0e:	4619      	mov	r1, r3
 800ab10:	3401      	adds	r4, #1
 800ab12:	9305      	str	r3, [sp, #20]
 800ab14:	4620      	mov	r0, r4
 800ab16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab1a:	3a30      	subs	r2, #48	; 0x30
 800ab1c:	2a09      	cmp	r2, #9
 800ab1e:	d903      	bls.n	800ab28 <_svfiprintf_r+0x1a8>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d0c5      	beq.n	800aab0 <_svfiprintf_r+0x130>
 800ab24:	9105      	str	r1, [sp, #20]
 800ab26:	e7c3      	b.n	800aab0 <_svfiprintf_r+0x130>
 800ab28:	4604      	mov	r4, r0
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab30:	e7f0      	b.n	800ab14 <_svfiprintf_r+0x194>
 800ab32:	ab03      	add	r3, sp, #12
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	462a      	mov	r2, r5
 800ab38:	4638      	mov	r0, r7
 800ab3a:	4b10      	ldr	r3, [pc, #64]	; (800ab7c <_svfiprintf_r+0x1fc>)
 800ab3c:	a904      	add	r1, sp, #16
 800ab3e:	f3af 8000 	nop.w
 800ab42:	1c42      	adds	r2, r0, #1
 800ab44:	4606      	mov	r6, r0
 800ab46:	d1d6      	bne.n	800aaf6 <_svfiprintf_r+0x176>
 800ab48:	89ab      	ldrh	r3, [r5, #12]
 800ab4a:	065b      	lsls	r3, r3, #25
 800ab4c:	f53f af2c 	bmi.w	800a9a8 <_svfiprintf_r+0x28>
 800ab50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab52:	b01d      	add	sp, #116	; 0x74
 800ab54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab58:	ab03      	add	r3, sp, #12
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	462a      	mov	r2, r5
 800ab5e:	4638      	mov	r0, r7
 800ab60:	4b06      	ldr	r3, [pc, #24]	; (800ab7c <_svfiprintf_r+0x1fc>)
 800ab62:	a904      	add	r1, sp, #16
 800ab64:	f000 f87c 	bl	800ac60 <_printf_i>
 800ab68:	e7eb      	b.n	800ab42 <_svfiprintf_r+0x1c2>
 800ab6a:	bf00      	nop
 800ab6c:	0800c21d 	.word	0x0800c21d
 800ab70:	0800c223 	.word	0x0800c223
 800ab74:	0800c227 	.word	0x0800c227
 800ab78:	00000000 	.word	0x00000000
 800ab7c:	0800a8c9 	.word	0x0800a8c9

0800ab80 <_printf_common>:
 800ab80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab84:	4616      	mov	r6, r2
 800ab86:	4699      	mov	r9, r3
 800ab88:	688a      	ldr	r2, [r1, #8]
 800ab8a:	690b      	ldr	r3, [r1, #16]
 800ab8c:	4607      	mov	r7, r0
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	bfb8      	it	lt
 800ab92:	4613      	movlt	r3, r2
 800ab94:	6033      	str	r3, [r6, #0]
 800ab96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aba0:	b10a      	cbz	r2, 800aba6 <_printf_common+0x26>
 800aba2:	3301      	adds	r3, #1
 800aba4:	6033      	str	r3, [r6, #0]
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	0699      	lsls	r1, r3, #26
 800abaa:	bf42      	ittt	mi
 800abac:	6833      	ldrmi	r3, [r6, #0]
 800abae:	3302      	addmi	r3, #2
 800abb0:	6033      	strmi	r3, [r6, #0]
 800abb2:	6825      	ldr	r5, [r4, #0]
 800abb4:	f015 0506 	ands.w	r5, r5, #6
 800abb8:	d106      	bne.n	800abc8 <_printf_common+0x48>
 800abba:	f104 0a19 	add.w	sl, r4, #25
 800abbe:	68e3      	ldr	r3, [r4, #12]
 800abc0:	6832      	ldr	r2, [r6, #0]
 800abc2:	1a9b      	subs	r3, r3, r2
 800abc4:	42ab      	cmp	r3, r5
 800abc6:	dc28      	bgt.n	800ac1a <_printf_common+0x9a>
 800abc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abcc:	1e13      	subs	r3, r2, #0
 800abce:	6822      	ldr	r2, [r4, #0]
 800abd0:	bf18      	it	ne
 800abd2:	2301      	movne	r3, #1
 800abd4:	0692      	lsls	r2, r2, #26
 800abd6:	d42d      	bmi.n	800ac34 <_printf_common+0xb4>
 800abd8:	4649      	mov	r1, r9
 800abda:	4638      	mov	r0, r7
 800abdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abe0:	47c0      	blx	r8
 800abe2:	3001      	adds	r0, #1
 800abe4:	d020      	beq.n	800ac28 <_printf_common+0xa8>
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	68e5      	ldr	r5, [r4, #12]
 800abea:	f003 0306 	and.w	r3, r3, #6
 800abee:	2b04      	cmp	r3, #4
 800abf0:	bf18      	it	ne
 800abf2:	2500      	movne	r5, #0
 800abf4:	6832      	ldr	r2, [r6, #0]
 800abf6:	f04f 0600 	mov.w	r6, #0
 800abfa:	68a3      	ldr	r3, [r4, #8]
 800abfc:	bf08      	it	eq
 800abfe:	1aad      	subeq	r5, r5, r2
 800ac00:	6922      	ldr	r2, [r4, #16]
 800ac02:	bf08      	it	eq
 800ac04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	bfc4      	itt	gt
 800ac0c:	1a9b      	subgt	r3, r3, r2
 800ac0e:	18ed      	addgt	r5, r5, r3
 800ac10:	341a      	adds	r4, #26
 800ac12:	42b5      	cmp	r5, r6
 800ac14:	d11a      	bne.n	800ac4c <_printf_common+0xcc>
 800ac16:	2000      	movs	r0, #0
 800ac18:	e008      	b.n	800ac2c <_printf_common+0xac>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	4652      	mov	r2, sl
 800ac1e:	4649      	mov	r1, r9
 800ac20:	4638      	mov	r0, r7
 800ac22:	47c0      	blx	r8
 800ac24:	3001      	adds	r0, #1
 800ac26:	d103      	bne.n	800ac30 <_printf_common+0xb0>
 800ac28:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac30:	3501      	adds	r5, #1
 800ac32:	e7c4      	b.n	800abbe <_printf_common+0x3e>
 800ac34:	2030      	movs	r0, #48	; 0x30
 800ac36:	18e1      	adds	r1, r4, r3
 800ac38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac3c:	1c5a      	adds	r2, r3, #1
 800ac3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac42:	4422      	add	r2, r4
 800ac44:	3302      	adds	r3, #2
 800ac46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac4a:	e7c5      	b.n	800abd8 <_printf_common+0x58>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	4622      	mov	r2, r4
 800ac50:	4649      	mov	r1, r9
 800ac52:	4638      	mov	r0, r7
 800ac54:	47c0      	blx	r8
 800ac56:	3001      	adds	r0, #1
 800ac58:	d0e6      	beq.n	800ac28 <_printf_common+0xa8>
 800ac5a:	3601      	adds	r6, #1
 800ac5c:	e7d9      	b.n	800ac12 <_printf_common+0x92>
	...

0800ac60 <_printf_i>:
 800ac60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac64:	7e0f      	ldrb	r7, [r1, #24]
 800ac66:	4691      	mov	r9, r2
 800ac68:	2f78      	cmp	r7, #120	; 0x78
 800ac6a:	4680      	mov	r8, r0
 800ac6c:	460c      	mov	r4, r1
 800ac6e:	469a      	mov	sl, r3
 800ac70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac76:	d807      	bhi.n	800ac88 <_printf_i+0x28>
 800ac78:	2f62      	cmp	r7, #98	; 0x62
 800ac7a:	d80a      	bhi.n	800ac92 <_printf_i+0x32>
 800ac7c:	2f00      	cmp	r7, #0
 800ac7e:	f000 80d9 	beq.w	800ae34 <_printf_i+0x1d4>
 800ac82:	2f58      	cmp	r7, #88	; 0x58
 800ac84:	f000 80a4 	beq.w	800add0 <_printf_i+0x170>
 800ac88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac90:	e03a      	b.n	800ad08 <_printf_i+0xa8>
 800ac92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac96:	2b15      	cmp	r3, #21
 800ac98:	d8f6      	bhi.n	800ac88 <_printf_i+0x28>
 800ac9a:	a101      	add	r1, pc, #4	; (adr r1, 800aca0 <_printf_i+0x40>)
 800ac9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aca0:	0800acf9 	.word	0x0800acf9
 800aca4:	0800ad0d 	.word	0x0800ad0d
 800aca8:	0800ac89 	.word	0x0800ac89
 800acac:	0800ac89 	.word	0x0800ac89
 800acb0:	0800ac89 	.word	0x0800ac89
 800acb4:	0800ac89 	.word	0x0800ac89
 800acb8:	0800ad0d 	.word	0x0800ad0d
 800acbc:	0800ac89 	.word	0x0800ac89
 800acc0:	0800ac89 	.word	0x0800ac89
 800acc4:	0800ac89 	.word	0x0800ac89
 800acc8:	0800ac89 	.word	0x0800ac89
 800accc:	0800ae1b 	.word	0x0800ae1b
 800acd0:	0800ad3d 	.word	0x0800ad3d
 800acd4:	0800adfd 	.word	0x0800adfd
 800acd8:	0800ac89 	.word	0x0800ac89
 800acdc:	0800ac89 	.word	0x0800ac89
 800ace0:	0800ae3d 	.word	0x0800ae3d
 800ace4:	0800ac89 	.word	0x0800ac89
 800ace8:	0800ad3d 	.word	0x0800ad3d
 800acec:	0800ac89 	.word	0x0800ac89
 800acf0:	0800ac89 	.word	0x0800ac89
 800acf4:	0800ae05 	.word	0x0800ae05
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	1d1a      	adds	r2, r3, #4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	602a      	str	r2, [r5, #0]
 800ad00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e0a4      	b.n	800ae56 <_printf_i+0x1f6>
 800ad0c:	6820      	ldr	r0, [r4, #0]
 800ad0e:	6829      	ldr	r1, [r5, #0]
 800ad10:	0606      	lsls	r6, r0, #24
 800ad12:	f101 0304 	add.w	r3, r1, #4
 800ad16:	d50a      	bpl.n	800ad2e <_printf_i+0xce>
 800ad18:	680e      	ldr	r6, [r1, #0]
 800ad1a:	602b      	str	r3, [r5, #0]
 800ad1c:	2e00      	cmp	r6, #0
 800ad1e:	da03      	bge.n	800ad28 <_printf_i+0xc8>
 800ad20:	232d      	movs	r3, #45	; 0x2d
 800ad22:	4276      	negs	r6, r6
 800ad24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad28:	230a      	movs	r3, #10
 800ad2a:	485e      	ldr	r0, [pc, #376]	; (800aea4 <_printf_i+0x244>)
 800ad2c:	e019      	b.n	800ad62 <_printf_i+0x102>
 800ad2e:	680e      	ldr	r6, [r1, #0]
 800ad30:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad34:	602b      	str	r3, [r5, #0]
 800ad36:	bf18      	it	ne
 800ad38:	b236      	sxthne	r6, r6
 800ad3a:	e7ef      	b.n	800ad1c <_printf_i+0xbc>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	6820      	ldr	r0, [r4, #0]
 800ad40:	1d19      	adds	r1, r3, #4
 800ad42:	6029      	str	r1, [r5, #0]
 800ad44:	0601      	lsls	r1, r0, #24
 800ad46:	d501      	bpl.n	800ad4c <_printf_i+0xec>
 800ad48:	681e      	ldr	r6, [r3, #0]
 800ad4a:	e002      	b.n	800ad52 <_printf_i+0xf2>
 800ad4c:	0646      	lsls	r6, r0, #25
 800ad4e:	d5fb      	bpl.n	800ad48 <_printf_i+0xe8>
 800ad50:	881e      	ldrh	r6, [r3, #0]
 800ad52:	2f6f      	cmp	r7, #111	; 0x6f
 800ad54:	bf0c      	ite	eq
 800ad56:	2308      	moveq	r3, #8
 800ad58:	230a      	movne	r3, #10
 800ad5a:	4852      	ldr	r0, [pc, #328]	; (800aea4 <_printf_i+0x244>)
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad62:	6865      	ldr	r5, [r4, #4]
 800ad64:	2d00      	cmp	r5, #0
 800ad66:	bfa8      	it	ge
 800ad68:	6821      	ldrge	r1, [r4, #0]
 800ad6a:	60a5      	str	r5, [r4, #8]
 800ad6c:	bfa4      	itt	ge
 800ad6e:	f021 0104 	bicge.w	r1, r1, #4
 800ad72:	6021      	strge	r1, [r4, #0]
 800ad74:	b90e      	cbnz	r6, 800ad7a <_printf_i+0x11a>
 800ad76:	2d00      	cmp	r5, #0
 800ad78:	d04d      	beq.n	800ae16 <_printf_i+0x1b6>
 800ad7a:	4615      	mov	r5, r2
 800ad7c:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad80:	fb03 6711 	mls	r7, r3, r1, r6
 800ad84:	5dc7      	ldrb	r7, [r0, r7]
 800ad86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad8a:	4637      	mov	r7, r6
 800ad8c:	42bb      	cmp	r3, r7
 800ad8e:	460e      	mov	r6, r1
 800ad90:	d9f4      	bls.n	800ad7c <_printf_i+0x11c>
 800ad92:	2b08      	cmp	r3, #8
 800ad94:	d10b      	bne.n	800adae <_printf_i+0x14e>
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	07de      	lsls	r6, r3, #31
 800ad9a:	d508      	bpl.n	800adae <_printf_i+0x14e>
 800ad9c:	6923      	ldr	r3, [r4, #16]
 800ad9e:	6861      	ldr	r1, [r4, #4]
 800ada0:	4299      	cmp	r1, r3
 800ada2:	bfde      	ittt	le
 800ada4:	2330      	movle	r3, #48	; 0x30
 800ada6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800adae:	1b52      	subs	r2, r2, r5
 800adb0:	6122      	str	r2, [r4, #16]
 800adb2:	464b      	mov	r3, r9
 800adb4:	4621      	mov	r1, r4
 800adb6:	4640      	mov	r0, r8
 800adb8:	f8cd a000 	str.w	sl, [sp]
 800adbc:	aa03      	add	r2, sp, #12
 800adbe:	f7ff fedf 	bl	800ab80 <_printf_common>
 800adc2:	3001      	adds	r0, #1
 800adc4:	d14c      	bne.n	800ae60 <_printf_i+0x200>
 800adc6:	f04f 30ff 	mov.w	r0, #4294967295
 800adca:	b004      	add	sp, #16
 800adcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add0:	4834      	ldr	r0, [pc, #208]	; (800aea4 <_printf_i+0x244>)
 800add2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800add6:	6829      	ldr	r1, [r5, #0]
 800add8:	6823      	ldr	r3, [r4, #0]
 800adda:	f851 6b04 	ldr.w	r6, [r1], #4
 800adde:	6029      	str	r1, [r5, #0]
 800ade0:	061d      	lsls	r5, r3, #24
 800ade2:	d514      	bpl.n	800ae0e <_printf_i+0x1ae>
 800ade4:	07df      	lsls	r7, r3, #31
 800ade6:	bf44      	itt	mi
 800ade8:	f043 0320 	orrmi.w	r3, r3, #32
 800adec:	6023      	strmi	r3, [r4, #0]
 800adee:	b91e      	cbnz	r6, 800adf8 <_printf_i+0x198>
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	f023 0320 	bic.w	r3, r3, #32
 800adf6:	6023      	str	r3, [r4, #0]
 800adf8:	2310      	movs	r3, #16
 800adfa:	e7af      	b.n	800ad5c <_printf_i+0xfc>
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	f043 0320 	orr.w	r3, r3, #32
 800ae02:	6023      	str	r3, [r4, #0]
 800ae04:	2378      	movs	r3, #120	; 0x78
 800ae06:	4828      	ldr	r0, [pc, #160]	; (800aea8 <_printf_i+0x248>)
 800ae08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae0c:	e7e3      	b.n	800add6 <_printf_i+0x176>
 800ae0e:	0659      	lsls	r1, r3, #25
 800ae10:	bf48      	it	mi
 800ae12:	b2b6      	uxthmi	r6, r6
 800ae14:	e7e6      	b.n	800ade4 <_printf_i+0x184>
 800ae16:	4615      	mov	r5, r2
 800ae18:	e7bb      	b.n	800ad92 <_printf_i+0x132>
 800ae1a:	682b      	ldr	r3, [r5, #0]
 800ae1c:	6826      	ldr	r6, [r4, #0]
 800ae1e:	1d18      	adds	r0, r3, #4
 800ae20:	6961      	ldr	r1, [r4, #20]
 800ae22:	6028      	str	r0, [r5, #0]
 800ae24:	0635      	lsls	r5, r6, #24
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	d501      	bpl.n	800ae2e <_printf_i+0x1ce>
 800ae2a:	6019      	str	r1, [r3, #0]
 800ae2c:	e002      	b.n	800ae34 <_printf_i+0x1d4>
 800ae2e:	0670      	lsls	r0, r6, #25
 800ae30:	d5fb      	bpl.n	800ae2a <_printf_i+0x1ca>
 800ae32:	8019      	strh	r1, [r3, #0]
 800ae34:	2300      	movs	r3, #0
 800ae36:	4615      	mov	r5, r2
 800ae38:	6123      	str	r3, [r4, #16]
 800ae3a:	e7ba      	b.n	800adb2 <_printf_i+0x152>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	2100      	movs	r1, #0
 800ae40:	1d1a      	adds	r2, r3, #4
 800ae42:	602a      	str	r2, [r5, #0]
 800ae44:	681d      	ldr	r5, [r3, #0]
 800ae46:	6862      	ldr	r2, [r4, #4]
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f000 fa07 	bl	800b25c <memchr>
 800ae4e:	b108      	cbz	r0, 800ae54 <_printf_i+0x1f4>
 800ae50:	1b40      	subs	r0, r0, r5
 800ae52:	6060      	str	r0, [r4, #4]
 800ae54:	6863      	ldr	r3, [r4, #4]
 800ae56:	6123      	str	r3, [r4, #16]
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae5e:	e7a8      	b.n	800adb2 <_printf_i+0x152>
 800ae60:	462a      	mov	r2, r5
 800ae62:	4649      	mov	r1, r9
 800ae64:	4640      	mov	r0, r8
 800ae66:	6923      	ldr	r3, [r4, #16]
 800ae68:	47d0      	blx	sl
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	d0ab      	beq.n	800adc6 <_printf_i+0x166>
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	079b      	lsls	r3, r3, #30
 800ae72:	d413      	bmi.n	800ae9c <_printf_i+0x23c>
 800ae74:	68e0      	ldr	r0, [r4, #12]
 800ae76:	9b03      	ldr	r3, [sp, #12]
 800ae78:	4298      	cmp	r0, r3
 800ae7a:	bfb8      	it	lt
 800ae7c:	4618      	movlt	r0, r3
 800ae7e:	e7a4      	b.n	800adca <_printf_i+0x16a>
 800ae80:	2301      	movs	r3, #1
 800ae82:	4632      	mov	r2, r6
 800ae84:	4649      	mov	r1, r9
 800ae86:	4640      	mov	r0, r8
 800ae88:	47d0      	blx	sl
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d09b      	beq.n	800adc6 <_printf_i+0x166>
 800ae8e:	3501      	adds	r5, #1
 800ae90:	68e3      	ldr	r3, [r4, #12]
 800ae92:	9903      	ldr	r1, [sp, #12]
 800ae94:	1a5b      	subs	r3, r3, r1
 800ae96:	42ab      	cmp	r3, r5
 800ae98:	dcf2      	bgt.n	800ae80 <_printf_i+0x220>
 800ae9a:	e7eb      	b.n	800ae74 <_printf_i+0x214>
 800ae9c:	2500      	movs	r5, #0
 800ae9e:	f104 0619 	add.w	r6, r4, #25
 800aea2:	e7f5      	b.n	800ae90 <_printf_i+0x230>
 800aea4:	0800c22e 	.word	0x0800c22e
 800aea8:	0800c23f 	.word	0x0800c23f

0800aeac <_read_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4604      	mov	r4, r0
 800aeb0:	4608      	mov	r0, r1
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	4d05      	ldr	r5, [pc, #20]	; (800aecc <_read_r+0x20>)
 800aeb8:	602a      	str	r2, [r5, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	f7fa f95a 	bl	8005174 <_read>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_read_r+0x1e>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_read_r+0x1e>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	20000710 	.word	0x20000710

0800aed0 <lflush>:
 800aed0:	8983      	ldrh	r3, [r0, #12]
 800aed2:	f003 0309 	and.w	r3, r3, #9
 800aed6:	2b09      	cmp	r3, #9
 800aed8:	d101      	bne.n	800aede <lflush+0xe>
 800aeda:	f7ff bc0b 	b.w	800a6f4 <fflush>
 800aede:	2000      	movs	r0, #0
 800aee0:	4770      	bx	lr
	...

0800aee4 <__srefill_r>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	460c      	mov	r4, r1
 800aee8:	4605      	mov	r5, r0
 800aeea:	b118      	cbz	r0, 800aef4 <__srefill_r+0x10>
 800aeec:	6983      	ldr	r3, [r0, #24]
 800aeee:	b90b      	cbnz	r3, 800aef4 <__srefill_r+0x10>
 800aef0:	f7fd fe22 	bl	8008b38 <__sinit>
 800aef4:	4b3c      	ldr	r3, [pc, #240]	; (800afe8 <__srefill_r+0x104>)
 800aef6:	429c      	cmp	r4, r3
 800aef8:	d10a      	bne.n	800af10 <__srefill_r+0x2c>
 800aefa:	686c      	ldr	r4, [r5, #4]
 800aefc:	2300      	movs	r3, #0
 800aefe:	6063      	str	r3, [r4, #4]
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af06:	069e      	lsls	r6, r3, #26
 800af08:	d50c      	bpl.n	800af24 <__srefill_r+0x40>
 800af0a:	f04f 30ff 	mov.w	r0, #4294967295
 800af0e:	e067      	b.n	800afe0 <__srefill_r+0xfc>
 800af10:	4b36      	ldr	r3, [pc, #216]	; (800afec <__srefill_r+0x108>)
 800af12:	429c      	cmp	r4, r3
 800af14:	d101      	bne.n	800af1a <__srefill_r+0x36>
 800af16:	68ac      	ldr	r4, [r5, #8]
 800af18:	e7f0      	b.n	800aefc <__srefill_r+0x18>
 800af1a:	4b35      	ldr	r3, [pc, #212]	; (800aff0 <__srefill_r+0x10c>)
 800af1c:	429c      	cmp	r4, r3
 800af1e:	bf08      	it	eq
 800af20:	68ec      	ldreq	r4, [r5, #12]
 800af22:	e7eb      	b.n	800aefc <__srefill_r+0x18>
 800af24:	0758      	lsls	r0, r3, #29
 800af26:	d449      	bmi.n	800afbc <__srefill_r+0xd8>
 800af28:	06d9      	lsls	r1, r3, #27
 800af2a:	d405      	bmi.n	800af38 <__srefill_r+0x54>
 800af2c:	2309      	movs	r3, #9
 800af2e:	602b      	str	r3, [r5, #0]
 800af30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	e7e8      	b.n	800af0a <__srefill_r+0x26>
 800af38:	071a      	lsls	r2, r3, #28
 800af3a:	d50b      	bpl.n	800af54 <__srefill_r+0x70>
 800af3c:	4621      	mov	r1, r4
 800af3e:	4628      	mov	r0, r5
 800af40:	f7ff fb9c 	bl	800a67c <_fflush_r>
 800af44:	2800      	cmp	r0, #0
 800af46:	d1e0      	bne.n	800af0a <__srefill_r+0x26>
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	60a0      	str	r0, [r4, #8]
 800af4c:	f023 0308 	bic.w	r3, r3, #8
 800af50:	81a3      	strh	r3, [r4, #12]
 800af52:	61a0      	str	r0, [r4, #24]
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	f043 0304 	orr.w	r3, r3, #4
 800af5a:	81a3      	strh	r3, [r4, #12]
 800af5c:	6923      	ldr	r3, [r4, #16]
 800af5e:	b91b      	cbnz	r3, 800af68 <__srefill_r+0x84>
 800af60:	4621      	mov	r1, r4
 800af62:	4628      	mov	r0, r5
 800af64:	f7fe f804 	bl	8008f70 <__smakebuf_r>
 800af68:	89a6      	ldrh	r6, [r4, #12]
 800af6a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800af6e:	07b3      	lsls	r3, r6, #30
 800af70:	d00f      	beq.n	800af92 <__srefill_r+0xae>
 800af72:	2301      	movs	r3, #1
 800af74:	81a3      	strh	r3, [r4, #12]
 800af76:	4b1f      	ldr	r3, [pc, #124]	; (800aff4 <__srefill_r+0x110>)
 800af78:	491f      	ldr	r1, [pc, #124]	; (800aff8 <__srefill_r+0x114>)
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	f006 0609 	and.w	r6, r6, #9
 800af80:	f7fd ff6a 	bl	8008e58 <_fwalk>
 800af84:	2e09      	cmp	r6, #9
 800af86:	81a7      	strh	r7, [r4, #12]
 800af88:	d103      	bne.n	800af92 <__srefill_r+0xae>
 800af8a:	4621      	mov	r1, r4
 800af8c:	4628      	mov	r0, r5
 800af8e:	f7ff faf3 	bl	800a578 <__sflush_r>
 800af92:	6922      	ldr	r2, [r4, #16]
 800af94:	4628      	mov	r0, r5
 800af96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af98:	6963      	ldr	r3, [r4, #20]
 800af9a:	6a21      	ldr	r1, [r4, #32]
 800af9c:	6022      	str	r2, [r4, #0]
 800af9e:	47b0      	blx	r6
 800afa0:	2800      	cmp	r0, #0
 800afa2:	6060      	str	r0, [r4, #4]
 800afa4:	dc1d      	bgt.n	800afe2 <__srefill_r+0xfe>
 800afa6:	bf18      	it	ne
 800afa8:	2200      	movne	r2, #0
 800afaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afae:	bf16      	itet	ne
 800afb0:	6062      	strne	r2, [r4, #4]
 800afb2:	f043 0320 	orreq.w	r3, r3, #32
 800afb6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800afba:	e7bb      	b.n	800af34 <__srefill_r+0x50>
 800afbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afbe:	2900      	cmp	r1, #0
 800afc0:	d0cc      	beq.n	800af5c <__srefill_r+0x78>
 800afc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afc6:	4299      	cmp	r1, r3
 800afc8:	d002      	beq.n	800afd0 <__srefill_r+0xec>
 800afca:	4628      	mov	r0, r5
 800afcc:	f7fe f818 	bl	8009000 <_free_r>
 800afd0:	2000      	movs	r0, #0
 800afd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afd4:	6360      	str	r0, [r4, #52]	; 0x34
 800afd6:	6063      	str	r3, [r4, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d0bf      	beq.n	800af5c <__srefill_r+0x78>
 800afdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800afde:	6023      	str	r3, [r4, #0]
 800afe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afe2:	2000      	movs	r0, #0
 800afe4:	e7fc      	b.n	800afe0 <__srefill_r+0xfc>
 800afe6:	bf00      	nop
 800afe8:	0800be1c 	.word	0x0800be1c
 800afec:	0800be3c 	.word	0x0800be3c
 800aff0:	0800bdfc 	.word	0x0800bdfc
 800aff4:	0800be5c 	.word	0x0800be5c
 800aff8:	0800aed1 	.word	0x0800aed1

0800affc <sniprintf>:
 800affc:	b40c      	push	{r2, r3}
 800affe:	b530      	push	{r4, r5, lr}
 800b000:	4b17      	ldr	r3, [pc, #92]	; (800b060 <sniprintf+0x64>)
 800b002:	1e0c      	subs	r4, r1, #0
 800b004:	681d      	ldr	r5, [r3, #0]
 800b006:	b09d      	sub	sp, #116	; 0x74
 800b008:	da08      	bge.n	800b01c <sniprintf+0x20>
 800b00a:	238b      	movs	r3, #139	; 0x8b
 800b00c:	f04f 30ff 	mov.w	r0, #4294967295
 800b010:	602b      	str	r3, [r5, #0]
 800b012:	b01d      	add	sp, #116	; 0x74
 800b014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b018:	b002      	add	sp, #8
 800b01a:	4770      	bx	lr
 800b01c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b020:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b024:	bf0c      	ite	eq
 800b026:	4623      	moveq	r3, r4
 800b028:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b02c:	9304      	str	r3, [sp, #16]
 800b02e:	9307      	str	r3, [sp, #28]
 800b030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b034:	9002      	str	r0, [sp, #8]
 800b036:	9006      	str	r0, [sp, #24]
 800b038:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b03c:	4628      	mov	r0, r5
 800b03e:	ab21      	add	r3, sp, #132	; 0x84
 800b040:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b042:	a902      	add	r1, sp, #8
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	f7ff fc9b 	bl	800a980 <_svfiprintf_r>
 800b04a:	1c43      	adds	r3, r0, #1
 800b04c:	bfbc      	itt	lt
 800b04e:	238b      	movlt	r3, #139	; 0x8b
 800b050:	602b      	strlt	r3, [r5, #0]
 800b052:	2c00      	cmp	r4, #0
 800b054:	d0dd      	beq.n	800b012 <sniprintf+0x16>
 800b056:	2200      	movs	r2, #0
 800b058:	9b02      	ldr	r3, [sp, #8]
 800b05a:	701a      	strb	r2, [r3, #0]
 800b05c:	e7d9      	b.n	800b012 <sniprintf+0x16>
 800b05e:	bf00      	nop
 800b060:	200000d8 	.word	0x200000d8

0800b064 <siscanf>:
 800b064:	b40e      	push	{r1, r2, r3}
 800b066:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b06a:	b530      	push	{r4, r5, lr}
 800b06c:	b09c      	sub	sp, #112	; 0x70
 800b06e:	ac1f      	add	r4, sp, #124	; 0x7c
 800b070:	f854 5b04 	ldr.w	r5, [r4], #4
 800b074:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b078:	9002      	str	r0, [sp, #8]
 800b07a:	9006      	str	r0, [sp, #24]
 800b07c:	f7f5 f866 	bl	800014c <strlen>
 800b080:	4b0b      	ldr	r3, [pc, #44]	; (800b0b0 <siscanf+0x4c>)
 800b082:	9003      	str	r0, [sp, #12]
 800b084:	930b      	str	r3, [sp, #44]	; 0x2c
 800b086:	2300      	movs	r3, #0
 800b088:	930f      	str	r3, [sp, #60]	; 0x3c
 800b08a:	9314      	str	r3, [sp, #80]	; 0x50
 800b08c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b090:	9007      	str	r0, [sp, #28]
 800b092:	4808      	ldr	r0, [pc, #32]	; (800b0b4 <siscanf+0x50>)
 800b094:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b098:	462a      	mov	r2, r5
 800b09a:	4623      	mov	r3, r4
 800b09c:	a902      	add	r1, sp, #8
 800b09e:	6800      	ldr	r0, [r0, #0]
 800b0a0:	9401      	str	r4, [sp, #4]
 800b0a2:	f000 f98d 	bl	800b3c0 <__ssvfiscanf_r>
 800b0a6:	b01c      	add	sp, #112	; 0x70
 800b0a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0ac:	b003      	add	sp, #12
 800b0ae:	4770      	bx	lr
 800b0b0:	080093a3 	.word	0x080093a3
 800b0b4:	200000d8 	.word	0x200000d8

0800b0b8 <strcpy>:
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0be:	f803 2b01 	strb.w	r2, [r3], #1
 800b0c2:	2a00      	cmp	r2, #0
 800b0c4:	d1f9      	bne.n	800b0ba <strcpy+0x2>
 800b0c6:	4770      	bx	lr

0800b0c8 <strncmp>:
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	b510      	push	{r4, lr}
 800b0cc:	b172      	cbz	r2, 800b0ec <strncmp+0x24>
 800b0ce:	3901      	subs	r1, #1
 800b0d0:	1884      	adds	r4, r0, r2
 800b0d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b0d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b0da:	4290      	cmp	r0, r2
 800b0dc:	d101      	bne.n	800b0e2 <strncmp+0x1a>
 800b0de:	42a3      	cmp	r3, r4
 800b0e0:	d101      	bne.n	800b0e6 <strncmp+0x1e>
 800b0e2:	1a80      	subs	r0, r0, r2
 800b0e4:	bd10      	pop	{r4, pc}
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d1f3      	bne.n	800b0d2 <strncmp+0xa>
 800b0ea:	e7fa      	b.n	800b0e2 <strncmp+0x1a>
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	e7f9      	b.n	800b0e4 <strncmp+0x1c>

0800b0f0 <__tzcalc_limits>:
 800b0f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	f7ff fb9b 	bl	800a830 <__gettzinfo>
 800b0fa:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800b0fe:	429d      	cmp	r5, r3
 800b100:	f340 809a 	ble.w	800b238 <__tzcalc_limits+0x148>
 800b104:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800b108:	18ac      	adds	r4, r5, r2
 800b10a:	f240 126d 	movw	r2, #365	; 0x16d
 800b10e:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800b112:	10a4      	asrs	r4, r4, #2
 800b114:	fb02 4403 	mla	r4, r2, r3, r4
 800b118:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800b11c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800b120:	fb93 f3f2 	sdiv	r3, r3, r2
 800b124:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800b128:	441c      	add	r4, r3
 800b12a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b12e:	186a      	adds	r2, r5, r1
 800b130:	fbb2 f2f3 	udiv	r2, r2, r3
 800b134:	fb95 fcf3 	sdiv	ip, r5, r3
 800b138:	4414      	add	r4, r2
 800b13a:	2264      	movs	r2, #100	; 0x64
 800b13c:	fb03 5c1c 	mls	ip, r3, ip, r5
 800b140:	fb95 f7f2 	sdiv	r7, r5, r2
 800b144:	fabc f68c 	clz	r6, ip
 800b148:	4601      	mov	r1, r0
 800b14a:	fb02 5717 	mls	r7, r2, r7, r5
 800b14e:	6045      	str	r5, [r0, #4]
 800b150:	0976      	lsrs	r6, r6, #5
 800b152:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800b156:	f005 0203 	and.w	r2, r5, #3
 800b15a:	7a0d      	ldrb	r5, [r1, #8]
 800b15c:	694b      	ldr	r3, [r1, #20]
 800b15e:	2d4a      	cmp	r5, #74	; 0x4a
 800b160:	d12d      	bne.n	800b1be <__tzcalc_limits+0xce>
 800b162:	eb04 0e03 	add.w	lr, r4, r3
 800b166:	b902      	cbnz	r2, 800b16a <__tzcalc_limits+0x7a>
 800b168:	b917      	cbnz	r7, 800b170 <__tzcalc_limits+0x80>
 800b16a:	f1bc 0f00 	cmp.w	ip, #0
 800b16e:	d124      	bne.n	800b1ba <__tzcalc_limits+0xca>
 800b170:	2b3b      	cmp	r3, #59	; 0x3b
 800b172:	bfd4      	ite	le
 800b174:	2300      	movle	r3, #0
 800b176:	2301      	movgt	r3, #1
 800b178:	4473      	add	r3, lr
 800b17a:	3b01      	subs	r3, #1
 800b17c:	698d      	ldr	r5, [r1, #24]
 800b17e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800b23c <__tzcalc_limits+0x14c>
 800b182:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800b186:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800b18a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b18c:	18ed      	adds	r5, r5, r3
 800b18e:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800b192:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800b196:	3128      	adds	r1, #40	; 0x28
 800b198:	458b      	cmp	fp, r1
 800b19a:	d1de      	bne.n	800b15a <__tzcalc_limits+0x6a>
 800b19c:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800b1a0:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800b1a4:	428c      	cmp	r4, r1
 800b1a6:	eb72 0303 	sbcs.w	r3, r2, r3
 800b1aa:	bfb4      	ite	lt
 800b1ac:	2301      	movlt	r3, #1
 800b1ae:	2300      	movge	r3, #0
 800b1b0:	6003      	str	r3, [r0, #0]
 800b1b2:	2001      	movs	r0, #1
 800b1b4:	b003      	add	sp, #12
 800b1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	e7dc      	b.n	800b178 <__tzcalc_limits+0x88>
 800b1be:	2d44      	cmp	r5, #68	; 0x44
 800b1c0:	d101      	bne.n	800b1c6 <__tzcalc_limits+0xd6>
 800b1c2:	4423      	add	r3, r4
 800b1c4:	e7da      	b.n	800b17c <__tzcalc_limits+0x8c>
 800b1c6:	bb8a      	cbnz	r2, 800b22c <__tzcalc_limits+0x13c>
 800b1c8:	2f00      	cmp	r7, #0
 800b1ca:	bf0c      	ite	eq
 800b1cc:	4635      	moveq	r5, r6
 800b1ce:	2501      	movne	r5, #1
 800b1d0:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800b1d4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800b1d8:	f04f 0800 	mov.w	r8, #0
 800b1dc:	f8cd e004 	str.w	lr, [sp, #4]
 800b1e0:	46a6      	mov	lr, r4
 800b1e2:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800b240 <__tzcalc_limits+0x150>
 800b1e6:	fb0a 9505 	mla	r5, sl, r5, r9
 800b1ea:	3d04      	subs	r5, #4
 800b1ec:	f8dd a004 	ldr.w	sl, [sp, #4]
 800b1f0:	f108 0801 	add.w	r8, r8, #1
 800b1f4:	45c2      	cmp	sl, r8
 800b1f6:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800b1fa:	dc19      	bgt.n	800b230 <__tzcalc_limits+0x140>
 800b1fc:	f04f 0807 	mov.w	r8, #7
 800b200:	f10e 0504 	add.w	r5, lr, #4
 800b204:	fb95 f8f8 	sdiv	r8, r5, r8
 800b208:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800b20c:	eba5 0808 	sub.w	r8, r5, r8
 800b210:	ebb3 0808 	subs.w	r8, r3, r8
 800b214:	690b      	ldr	r3, [r1, #16]
 800b216:	bf48      	it	mi
 800b218:	f108 0807 	addmi.w	r8, r8, #7
 800b21c:	3b01      	subs	r3, #1
 800b21e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b222:	4443      	add	r3, r8
 800b224:	454b      	cmp	r3, r9
 800b226:	da05      	bge.n	800b234 <__tzcalc_limits+0x144>
 800b228:	4473      	add	r3, lr
 800b22a:	e7a7      	b.n	800b17c <__tzcalc_limits+0x8c>
 800b22c:	4635      	mov	r5, r6
 800b22e:	e7cf      	b.n	800b1d0 <__tzcalc_limits+0xe0>
 800b230:	44ce      	add	lr, r9
 800b232:	e7db      	b.n	800b1ec <__tzcalc_limits+0xfc>
 800b234:	3b07      	subs	r3, #7
 800b236:	e7f5      	b.n	800b224 <__tzcalc_limits+0x134>
 800b238:	2000      	movs	r0, #0
 800b23a:	e7bb      	b.n	800b1b4 <__tzcalc_limits+0xc4>
 800b23c:	00015180 	.word	0x00015180
 800b240:	0800c250 	.word	0x0800c250

0800b244 <__env_lock>:
 800b244:	4801      	ldr	r0, [pc, #4]	; (800b24c <__env_lock+0x8>)
 800b246:	f7fd be6a 	b.w	8008f1e <__retarget_lock_acquire_recursive>
 800b24a:	bf00      	nop
 800b24c:	20000700 	.word	0x20000700

0800b250 <__env_unlock>:
 800b250:	4801      	ldr	r0, [pc, #4]	; (800b258 <__env_unlock+0x8>)
 800b252:	f7fd be66 	b.w	8008f22 <__retarget_lock_release_recursive>
 800b256:	bf00      	nop
 800b258:	20000700 	.word	0x20000700

0800b25c <memchr>:
 800b25c:	4603      	mov	r3, r0
 800b25e:	b510      	push	{r4, lr}
 800b260:	b2c9      	uxtb	r1, r1
 800b262:	4402      	add	r2, r0
 800b264:	4293      	cmp	r3, r2
 800b266:	4618      	mov	r0, r3
 800b268:	d101      	bne.n	800b26e <memchr+0x12>
 800b26a:	2000      	movs	r0, #0
 800b26c:	e003      	b.n	800b276 <memchr+0x1a>
 800b26e:	7804      	ldrb	r4, [r0, #0]
 800b270:	3301      	adds	r3, #1
 800b272:	428c      	cmp	r4, r1
 800b274:	d1f6      	bne.n	800b264 <memchr+0x8>
 800b276:	bd10      	pop	{r4, pc}

0800b278 <memmove>:
 800b278:	4288      	cmp	r0, r1
 800b27a:	b510      	push	{r4, lr}
 800b27c:	eb01 0402 	add.w	r4, r1, r2
 800b280:	d902      	bls.n	800b288 <memmove+0x10>
 800b282:	4284      	cmp	r4, r0
 800b284:	4623      	mov	r3, r4
 800b286:	d807      	bhi.n	800b298 <memmove+0x20>
 800b288:	1e43      	subs	r3, r0, #1
 800b28a:	42a1      	cmp	r1, r4
 800b28c:	d008      	beq.n	800b2a0 <memmove+0x28>
 800b28e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b292:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b296:	e7f8      	b.n	800b28a <memmove+0x12>
 800b298:	4601      	mov	r1, r0
 800b29a:	4402      	add	r2, r0
 800b29c:	428a      	cmp	r2, r1
 800b29e:	d100      	bne.n	800b2a2 <memmove+0x2a>
 800b2a0:	bd10      	pop	{r4, pc}
 800b2a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2aa:	e7f7      	b.n	800b29c <memmove+0x24>

0800b2ac <_realloc_r>:
 800b2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b0:	4680      	mov	r8, r0
 800b2b2:	4614      	mov	r4, r2
 800b2b4:	460e      	mov	r6, r1
 800b2b6:	b921      	cbnz	r1, 800b2c2 <_realloc_r+0x16>
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2be:	f7fd bf07 	b.w	80090d0 <_malloc_r>
 800b2c2:	b92a      	cbnz	r2, 800b2d0 <_realloc_r+0x24>
 800b2c4:	f7fd fe9c 	bl	8009000 <_free_r>
 800b2c8:	4625      	mov	r5, r4
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d0:	f000 fbb2 	bl	800ba38 <_malloc_usable_size_r>
 800b2d4:	4284      	cmp	r4, r0
 800b2d6:	4607      	mov	r7, r0
 800b2d8:	d802      	bhi.n	800b2e0 <_realloc_r+0x34>
 800b2da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2de:	d812      	bhi.n	800b306 <_realloc_r+0x5a>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4640      	mov	r0, r8
 800b2e4:	f7fd fef4 	bl	80090d0 <_malloc_r>
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d0ed      	beq.n	800b2ca <_realloc_r+0x1e>
 800b2ee:	42bc      	cmp	r4, r7
 800b2f0:	4622      	mov	r2, r4
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	bf28      	it	cs
 800b2f6:	463a      	movcs	r2, r7
 800b2f8:	f7ff facc 	bl	800a894 <memcpy>
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4640      	mov	r0, r8
 800b300:	f7fd fe7e 	bl	8009000 <_free_r>
 800b304:	e7e1      	b.n	800b2ca <_realloc_r+0x1e>
 800b306:	4635      	mov	r5, r6
 800b308:	e7df      	b.n	800b2ca <_realloc_r+0x1e>

0800b30a <_sungetc_r>:
 800b30a:	b538      	push	{r3, r4, r5, lr}
 800b30c:	1c4b      	adds	r3, r1, #1
 800b30e:	4614      	mov	r4, r2
 800b310:	d103      	bne.n	800b31a <_sungetc_r+0x10>
 800b312:	f04f 35ff 	mov.w	r5, #4294967295
 800b316:	4628      	mov	r0, r5
 800b318:	bd38      	pop	{r3, r4, r5, pc}
 800b31a:	8993      	ldrh	r3, [r2, #12]
 800b31c:	b2cd      	uxtb	r5, r1
 800b31e:	f023 0320 	bic.w	r3, r3, #32
 800b322:	8193      	strh	r3, [r2, #12]
 800b324:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b326:	6852      	ldr	r2, [r2, #4]
 800b328:	b18b      	cbz	r3, 800b34e <_sungetc_r+0x44>
 800b32a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b32c:	4293      	cmp	r3, r2
 800b32e:	dd08      	ble.n	800b342 <_sungetc_r+0x38>
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	1e5a      	subs	r2, r3, #1
 800b334:	6022      	str	r2, [r4, #0]
 800b336:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b33a:	6863      	ldr	r3, [r4, #4]
 800b33c:	3301      	adds	r3, #1
 800b33e:	6063      	str	r3, [r4, #4]
 800b340:	e7e9      	b.n	800b316 <_sungetc_r+0xc>
 800b342:	4621      	mov	r1, r4
 800b344:	f000 fb40 	bl	800b9c8 <__submore>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d0f1      	beq.n	800b330 <_sungetc_r+0x26>
 800b34c:	e7e1      	b.n	800b312 <_sungetc_r+0x8>
 800b34e:	6921      	ldr	r1, [r4, #16]
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	b151      	cbz	r1, 800b36a <_sungetc_r+0x60>
 800b354:	4299      	cmp	r1, r3
 800b356:	d208      	bcs.n	800b36a <_sungetc_r+0x60>
 800b358:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b35c:	42a9      	cmp	r1, r5
 800b35e:	d104      	bne.n	800b36a <_sungetc_r+0x60>
 800b360:	3b01      	subs	r3, #1
 800b362:	3201      	adds	r2, #1
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	6062      	str	r2, [r4, #4]
 800b368:	e7d5      	b.n	800b316 <_sungetc_r+0xc>
 800b36a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b36e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b372:	6363      	str	r3, [r4, #52]	; 0x34
 800b374:	2303      	movs	r3, #3
 800b376:	63a3      	str	r3, [r4, #56]	; 0x38
 800b378:	4623      	mov	r3, r4
 800b37a:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b37e:	6023      	str	r3, [r4, #0]
 800b380:	2301      	movs	r3, #1
 800b382:	e7dc      	b.n	800b33e <_sungetc_r+0x34>

0800b384 <__ssrefill_r>:
 800b384:	b510      	push	{r4, lr}
 800b386:	460c      	mov	r4, r1
 800b388:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b38a:	b169      	cbz	r1, 800b3a8 <__ssrefill_r+0x24>
 800b38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b390:	4299      	cmp	r1, r3
 800b392:	d001      	beq.n	800b398 <__ssrefill_r+0x14>
 800b394:	f7fd fe34 	bl	8009000 <_free_r>
 800b398:	2000      	movs	r0, #0
 800b39a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b39c:	6360      	str	r0, [r4, #52]	; 0x34
 800b39e:	6063      	str	r3, [r4, #4]
 800b3a0:	b113      	cbz	r3, 800b3a8 <__ssrefill_r+0x24>
 800b3a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	bd10      	pop	{r4, pc}
 800b3a8:	6923      	ldr	r3, [r4, #16]
 800b3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ae:	6023      	str	r3, [r4, #0]
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	6063      	str	r3, [r4, #4]
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	f043 0320 	orr.w	r3, r3, #32
 800b3ba:	81a3      	strh	r3, [r4, #12]
 800b3bc:	e7f3      	b.n	800b3a6 <__ssrefill_r+0x22>
	...

0800b3c0 <__ssvfiscanf_r>:
 800b3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b3ce:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b3d2:	49a7      	ldr	r1, [pc, #668]	; (800b670 <__ssvfiscanf_r+0x2b0>)
 800b3d4:	f10d 0804 	add.w	r8, sp, #4
 800b3d8:	91a0      	str	r1, [sp, #640]	; 0x280
 800b3da:	49a6      	ldr	r1, [pc, #664]	; (800b674 <__ssvfiscanf_r+0x2b4>)
 800b3dc:	4fa6      	ldr	r7, [pc, #664]	; (800b678 <__ssvfiscanf_r+0x2b8>)
 800b3de:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b67c <__ssvfiscanf_r+0x2bc>
 800b3e2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b3e6:	91a1      	str	r1, [sp, #644]	; 0x284
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	7813      	ldrb	r3, [r2, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f000 815c 	beq.w	800b6aa <__ssvfiscanf_r+0x2ea>
 800b3f2:	5dd9      	ldrb	r1, [r3, r7]
 800b3f4:	1c55      	adds	r5, r2, #1
 800b3f6:	f011 0108 	ands.w	r1, r1, #8
 800b3fa:	d019      	beq.n	800b430 <__ssvfiscanf_r+0x70>
 800b3fc:	6863      	ldr	r3, [r4, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	dd0f      	ble.n	800b422 <__ssvfiscanf_r+0x62>
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	781a      	ldrb	r2, [r3, #0]
 800b406:	5cba      	ldrb	r2, [r7, r2]
 800b408:	0712      	lsls	r2, r2, #28
 800b40a:	d401      	bmi.n	800b410 <__ssvfiscanf_r+0x50>
 800b40c:	462a      	mov	r2, r5
 800b40e:	e7ec      	b.n	800b3ea <__ssvfiscanf_r+0x2a>
 800b410:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b412:	3301      	adds	r3, #1
 800b414:	3201      	adds	r2, #1
 800b416:	9245      	str	r2, [sp, #276]	; 0x114
 800b418:	6862      	ldr	r2, [r4, #4]
 800b41a:	6023      	str	r3, [r4, #0]
 800b41c:	3a01      	subs	r2, #1
 800b41e:	6062      	str	r2, [r4, #4]
 800b420:	e7ec      	b.n	800b3fc <__ssvfiscanf_r+0x3c>
 800b422:	4621      	mov	r1, r4
 800b424:	4630      	mov	r0, r6
 800b426:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b428:	4798      	blx	r3
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d0e9      	beq.n	800b402 <__ssvfiscanf_r+0x42>
 800b42e:	e7ed      	b.n	800b40c <__ssvfiscanf_r+0x4c>
 800b430:	2b25      	cmp	r3, #37	; 0x25
 800b432:	d012      	beq.n	800b45a <__ssvfiscanf_r+0x9a>
 800b434:	469a      	mov	sl, r3
 800b436:	6863      	ldr	r3, [r4, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f340 8094 	ble.w	800b566 <__ssvfiscanf_r+0x1a6>
 800b43e:	6822      	ldr	r2, [r4, #0]
 800b440:	7813      	ldrb	r3, [r2, #0]
 800b442:	4553      	cmp	r3, sl
 800b444:	f040 8131 	bne.w	800b6aa <__ssvfiscanf_r+0x2ea>
 800b448:	6863      	ldr	r3, [r4, #4]
 800b44a:	3201      	adds	r2, #1
 800b44c:	3b01      	subs	r3, #1
 800b44e:	6063      	str	r3, [r4, #4]
 800b450:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b452:	6022      	str	r2, [r4, #0]
 800b454:	3301      	adds	r3, #1
 800b456:	9345      	str	r3, [sp, #276]	; 0x114
 800b458:	e7d8      	b.n	800b40c <__ssvfiscanf_r+0x4c>
 800b45a:	9141      	str	r1, [sp, #260]	; 0x104
 800b45c:	9143      	str	r1, [sp, #268]	; 0x10c
 800b45e:	7853      	ldrb	r3, [r2, #1]
 800b460:	2b2a      	cmp	r3, #42	; 0x2a
 800b462:	bf04      	itt	eq
 800b464:	2310      	moveq	r3, #16
 800b466:	1c95      	addeq	r5, r2, #2
 800b468:	f04f 020a 	mov.w	r2, #10
 800b46c:	bf08      	it	eq
 800b46e:	9341      	streq	r3, [sp, #260]	; 0x104
 800b470:	46aa      	mov	sl, r5
 800b472:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b476:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b47a:	2b09      	cmp	r3, #9
 800b47c:	d91d      	bls.n	800b4ba <__ssvfiscanf_r+0xfa>
 800b47e:	2203      	movs	r2, #3
 800b480:	487e      	ldr	r0, [pc, #504]	; (800b67c <__ssvfiscanf_r+0x2bc>)
 800b482:	f7ff feeb 	bl	800b25c <memchr>
 800b486:	b140      	cbz	r0, 800b49a <__ssvfiscanf_r+0xda>
 800b488:	2301      	movs	r3, #1
 800b48a:	4655      	mov	r5, sl
 800b48c:	eba0 0009 	sub.w	r0, r0, r9
 800b490:	fa03 f000 	lsl.w	r0, r3, r0
 800b494:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b496:	4318      	orrs	r0, r3
 800b498:	9041      	str	r0, [sp, #260]	; 0x104
 800b49a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b49e:	2b78      	cmp	r3, #120	; 0x78
 800b4a0:	d806      	bhi.n	800b4b0 <__ssvfiscanf_r+0xf0>
 800b4a2:	2b57      	cmp	r3, #87	; 0x57
 800b4a4:	d810      	bhi.n	800b4c8 <__ssvfiscanf_r+0x108>
 800b4a6:	2b25      	cmp	r3, #37	; 0x25
 800b4a8:	d0c4      	beq.n	800b434 <__ssvfiscanf_r+0x74>
 800b4aa:	d857      	bhi.n	800b55c <__ssvfiscanf_r+0x19c>
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d065      	beq.n	800b57c <__ssvfiscanf_r+0x1bc>
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	9347      	str	r3, [sp, #284]	; 0x11c
 800b4b4:	230a      	movs	r3, #10
 800b4b6:	9342      	str	r3, [sp, #264]	; 0x108
 800b4b8:	e072      	b.n	800b5a0 <__ssvfiscanf_r+0x1e0>
 800b4ba:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b4bc:	4655      	mov	r5, sl
 800b4be:	fb02 1103 	mla	r1, r2, r3, r1
 800b4c2:	3930      	subs	r1, #48	; 0x30
 800b4c4:	9143      	str	r1, [sp, #268]	; 0x10c
 800b4c6:	e7d3      	b.n	800b470 <__ssvfiscanf_r+0xb0>
 800b4c8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b4cc:	2a20      	cmp	r2, #32
 800b4ce:	d8ef      	bhi.n	800b4b0 <__ssvfiscanf_r+0xf0>
 800b4d0:	a101      	add	r1, pc, #4	; (adr r1, 800b4d8 <__ssvfiscanf_r+0x118>)
 800b4d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b4d6:	bf00      	nop
 800b4d8:	0800b58b 	.word	0x0800b58b
 800b4dc:	0800b4b1 	.word	0x0800b4b1
 800b4e0:	0800b4b1 	.word	0x0800b4b1
 800b4e4:	0800b5e9 	.word	0x0800b5e9
 800b4e8:	0800b4b1 	.word	0x0800b4b1
 800b4ec:	0800b4b1 	.word	0x0800b4b1
 800b4f0:	0800b4b1 	.word	0x0800b4b1
 800b4f4:	0800b4b1 	.word	0x0800b4b1
 800b4f8:	0800b4b1 	.word	0x0800b4b1
 800b4fc:	0800b4b1 	.word	0x0800b4b1
 800b500:	0800b4b1 	.word	0x0800b4b1
 800b504:	0800b5ff 	.word	0x0800b5ff
 800b508:	0800b5d5 	.word	0x0800b5d5
 800b50c:	0800b563 	.word	0x0800b563
 800b510:	0800b563 	.word	0x0800b563
 800b514:	0800b563 	.word	0x0800b563
 800b518:	0800b4b1 	.word	0x0800b4b1
 800b51c:	0800b5d9 	.word	0x0800b5d9
 800b520:	0800b4b1 	.word	0x0800b4b1
 800b524:	0800b4b1 	.word	0x0800b4b1
 800b528:	0800b4b1 	.word	0x0800b4b1
 800b52c:	0800b4b1 	.word	0x0800b4b1
 800b530:	0800b60f 	.word	0x0800b60f
 800b534:	0800b5e1 	.word	0x0800b5e1
 800b538:	0800b583 	.word	0x0800b583
 800b53c:	0800b4b1 	.word	0x0800b4b1
 800b540:	0800b4b1 	.word	0x0800b4b1
 800b544:	0800b60b 	.word	0x0800b60b
 800b548:	0800b4b1 	.word	0x0800b4b1
 800b54c:	0800b5d5 	.word	0x0800b5d5
 800b550:	0800b4b1 	.word	0x0800b4b1
 800b554:	0800b4b1 	.word	0x0800b4b1
 800b558:	0800b58b 	.word	0x0800b58b
 800b55c:	3b45      	subs	r3, #69	; 0x45
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d8a6      	bhi.n	800b4b0 <__ssvfiscanf_r+0xf0>
 800b562:	2305      	movs	r3, #5
 800b564:	e01b      	b.n	800b59e <__ssvfiscanf_r+0x1de>
 800b566:	4621      	mov	r1, r4
 800b568:	4630      	mov	r0, r6
 800b56a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b56c:	4798      	blx	r3
 800b56e:	2800      	cmp	r0, #0
 800b570:	f43f af65 	beq.w	800b43e <__ssvfiscanf_r+0x7e>
 800b574:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b576:	2800      	cmp	r0, #0
 800b578:	f040 808d 	bne.w	800b696 <__ssvfiscanf_r+0x2d6>
 800b57c:	f04f 30ff 	mov.w	r0, #4294967295
 800b580:	e08f      	b.n	800b6a2 <__ssvfiscanf_r+0x2e2>
 800b582:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b584:	f042 0220 	orr.w	r2, r2, #32
 800b588:	9241      	str	r2, [sp, #260]	; 0x104
 800b58a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b58c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b590:	9241      	str	r2, [sp, #260]	; 0x104
 800b592:	2210      	movs	r2, #16
 800b594:	2b6f      	cmp	r3, #111	; 0x6f
 800b596:	bf34      	ite	cc
 800b598:	2303      	movcc	r3, #3
 800b59a:	2304      	movcs	r3, #4
 800b59c:	9242      	str	r2, [sp, #264]	; 0x108
 800b59e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b5a0:	6863      	ldr	r3, [r4, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	dd42      	ble.n	800b62c <__ssvfiscanf_r+0x26c>
 800b5a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b5a8:	0659      	lsls	r1, r3, #25
 800b5aa:	d404      	bmi.n	800b5b6 <__ssvfiscanf_r+0x1f6>
 800b5ac:	6823      	ldr	r3, [r4, #0]
 800b5ae:	781a      	ldrb	r2, [r3, #0]
 800b5b0:	5cba      	ldrb	r2, [r7, r2]
 800b5b2:	0712      	lsls	r2, r2, #28
 800b5b4:	d441      	bmi.n	800b63a <__ssvfiscanf_r+0x27a>
 800b5b6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	dc50      	bgt.n	800b65e <__ssvfiscanf_r+0x29e>
 800b5bc:	466b      	mov	r3, sp
 800b5be:	4622      	mov	r2, r4
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	a941      	add	r1, sp, #260	; 0x104
 800b5c4:	f000 f876 	bl	800b6b4 <_scanf_chars>
 800b5c8:	2801      	cmp	r0, #1
 800b5ca:	d06e      	beq.n	800b6aa <__ssvfiscanf_r+0x2ea>
 800b5cc:	2802      	cmp	r0, #2
 800b5ce:	f47f af1d 	bne.w	800b40c <__ssvfiscanf_r+0x4c>
 800b5d2:	e7cf      	b.n	800b574 <__ssvfiscanf_r+0x1b4>
 800b5d4:	220a      	movs	r2, #10
 800b5d6:	e7dd      	b.n	800b594 <__ssvfiscanf_r+0x1d4>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	9342      	str	r3, [sp, #264]	; 0x108
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e7de      	b.n	800b59e <__ssvfiscanf_r+0x1de>
 800b5e0:	2308      	movs	r3, #8
 800b5e2:	9342      	str	r3, [sp, #264]	; 0x108
 800b5e4:	2304      	movs	r3, #4
 800b5e6:	e7da      	b.n	800b59e <__ssvfiscanf_r+0x1de>
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	4640      	mov	r0, r8
 800b5ec:	f000 f9b4 	bl	800b958 <__sccl>
 800b5f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5f8:	9341      	str	r3, [sp, #260]	; 0x104
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e7cf      	b.n	800b59e <__ssvfiscanf_r+0x1de>
 800b5fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b604:	9341      	str	r3, [sp, #260]	; 0x104
 800b606:	2300      	movs	r3, #0
 800b608:	e7c9      	b.n	800b59e <__ssvfiscanf_r+0x1de>
 800b60a:	2302      	movs	r3, #2
 800b60c:	e7c7      	b.n	800b59e <__ssvfiscanf_r+0x1de>
 800b60e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b610:	06c3      	lsls	r3, r0, #27
 800b612:	f53f aefb 	bmi.w	800b40c <__ssvfiscanf_r+0x4c>
 800b616:	9b00      	ldr	r3, [sp, #0]
 800b618:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b61a:	1d19      	adds	r1, r3, #4
 800b61c:	9100      	str	r1, [sp, #0]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f010 0f01 	tst.w	r0, #1
 800b624:	bf14      	ite	ne
 800b626:	801a      	strhne	r2, [r3, #0]
 800b628:	601a      	streq	r2, [r3, #0]
 800b62a:	e6ef      	b.n	800b40c <__ssvfiscanf_r+0x4c>
 800b62c:	4621      	mov	r1, r4
 800b62e:	4630      	mov	r0, r6
 800b630:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b632:	4798      	blx	r3
 800b634:	2800      	cmp	r0, #0
 800b636:	d0b6      	beq.n	800b5a6 <__ssvfiscanf_r+0x1e6>
 800b638:	e79c      	b.n	800b574 <__ssvfiscanf_r+0x1b4>
 800b63a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b63c:	3201      	adds	r2, #1
 800b63e:	9245      	str	r2, [sp, #276]	; 0x114
 800b640:	6862      	ldr	r2, [r4, #4]
 800b642:	3a01      	subs	r2, #1
 800b644:	2a00      	cmp	r2, #0
 800b646:	6062      	str	r2, [r4, #4]
 800b648:	dd02      	ble.n	800b650 <__ssvfiscanf_r+0x290>
 800b64a:	3301      	adds	r3, #1
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	e7ad      	b.n	800b5ac <__ssvfiscanf_r+0x1ec>
 800b650:	4621      	mov	r1, r4
 800b652:	4630      	mov	r0, r6
 800b654:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b656:	4798      	blx	r3
 800b658:	2800      	cmp	r0, #0
 800b65a:	d0a7      	beq.n	800b5ac <__ssvfiscanf_r+0x1ec>
 800b65c:	e78a      	b.n	800b574 <__ssvfiscanf_r+0x1b4>
 800b65e:	2b04      	cmp	r3, #4
 800b660:	dc0e      	bgt.n	800b680 <__ssvfiscanf_r+0x2c0>
 800b662:	466b      	mov	r3, sp
 800b664:	4622      	mov	r2, r4
 800b666:	4630      	mov	r0, r6
 800b668:	a941      	add	r1, sp, #260	; 0x104
 800b66a:	f000 f87d 	bl	800b768 <_scanf_i>
 800b66e:	e7ab      	b.n	800b5c8 <__ssvfiscanf_r+0x208>
 800b670:	0800b30b 	.word	0x0800b30b
 800b674:	0800b385 	.word	0x0800b385
 800b678:	0800c11d 	.word	0x0800c11d
 800b67c:	0800c223 	.word	0x0800c223
 800b680:	4b0b      	ldr	r3, [pc, #44]	; (800b6b0 <__ssvfiscanf_r+0x2f0>)
 800b682:	2b00      	cmp	r3, #0
 800b684:	f43f aec2 	beq.w	800b40c <__ssvfiscanf_r+0x4c>
 800b688:	466b      	mov	r3, sp
 800b68a:	4622      	mov	r2, r4
 800b68c:	4630      	mov	r0, r6
 800b68e:	a941      	add	r1, sp, #260	; 0x104
 800b690:	f3af 8000 	nop.w
 800b694:	e798      	b.n	800b5c8 <__ssvfiscanf_r+0x208>
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b69c:	bf18      	it	ne
 800b69e:	f04f 30ff 	movne.w	r0, #4294967295
 800b6a2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6aa:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b6ac:	e7f9      	b.n	800b6a2 <__ssvfiscanf_r+0x2e2>
 800b6ae:	bf00      	nop
 800b6b0:	00000000 	.word	0x00000000

0800b6b4 <_scanf_chars>:
 800b6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b8:	4615      	mov	r5, r2
 800b6ba:	688a      	ldr	r2, [r1, #8]
 800b6bc:	4680      	mov	r8, r0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	b932      	cbnz	r2, 800b6d0 <_scanf_chars+0x1c>
 800b6c2:	698a      	ldr	r2, [r1, #24]
 800b6c4:	2a00      	cmp	r2, #0
 800b6c6:	bf0c      	ite	eq
 800b6c8:	2201      	moveq	r2, #1
 800b6ca:	f04f 32ff 	movne.w	r2, #4294967295
 800b6ce:	608a      	str	r2, [r1, #8]
 800b6d0:	2700      	movs	r7, #0
 800b6d2:	6822      	ldr	r2, [r4, #0]
 800b6d4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b764 <_scanf_chars+0xb0>
 800b6d8:	06d1      	lsls	r1, r2, #27
 800b6da:	bf5f      	itttt	pl
 800b6dc:	681a      	ldrpl	r2, [r3, #0]
 800b6de:	1d11      	addpl	r1, r2, #4
 800b6e0:	6019      	strpl	r1, [r3, #0]
 800b6e2:	6816      	ldrpl	r6, [r2, #0]
 800b6e4:	69a0      	ldr	r0, [r4, #24]
 800b6e6:	b188      	cbz	r0, 800b70c <_scanf_chars+0x58>
 800b6e8:	2801      	cmp	r0, #1
 800b6ea:	d107      	bne.n	800b6fc <_scanf_chars+0x48>
 800b6ec:	682b      	ldr	r3, [r5, #0]
 800b6ee:	781a      	ldrb	r2, [r3, #0]
 800b6f0:	6963      	ldr	r3, [r4, #20]
 800b6f2:	5c9b      	ldrb	r3, [r3, r2]
 800b6f4:	b953      	cbnz	r3, 800b70c <_scanf_chars+0x58>
 800b6f6:	2f00      	cmp	r7, #0
 800b6f8:	d031      	beq.n	800b75e <_scanf_chars+0xaa>
 800b6fa:	e022      	b.n	800b742 <_scanf_chars+0x8e>
 800b6fc:	2802      	cmp	r0, #2
 800b6fe:	d120      	bne.n	800b742 <_scanf_chars+0x8e>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b708:	071b      	lsls	r3, r3, #28
 800b70a:	d41a      	bmi.n	800b742 <_scanf_chars+0x8e>
 800b70c:	6823      	ldr	r3, [r4, #0]
 800b70e:	3701      	adds	r7, #1
 800b710:	06da      	lsls	r2, r3, #27
 800b712:	bf5e      	ittt	pl
 800b714:	682b      	ldrpl	r3, [r5, #0]
 800b716:	781b      	ldrbpl	r3, [r3, #0]
 800b718:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b71c:	682a      	ldr	r2, [r5, #0]
 800b71e:	686b      	ldr	r3, [r5, #4]
 800b720:	3201      	adds	r2, #1
 800b722:	602a      	str	r2, [r5, #0]
 800b724:	68a2      	ldr	r2, [r4, #8]
 800b726:	3b01      	subs	r3, #1
 800b728:	3a01      	subs	r2, #1
 800b72a:	606b      	str	r3, [r5, #4]
 800b72c:	60a2      	str	r2, [r4, #8]
 800b72e:	b142      	cbz	r2, 800b742 <_scanf_chars+0x8e>
 800b730:	2b00      	cmp	r3, #0
 800b732:	dcd7      	bgt.n	800b6e4 <_scanf_chars+0x30>
 800b734:	4629      	mov	r1, r5
 800b736:	4640      	mov	r0, r8
 800b738:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b73c:	4798      	blx	r3
 800b73e:	2800      	cmp	r0, #0
 800b740:	d0d0      	beq.n	800b6e4 <_scanf_chars+0x30>
 800b742:	6823      	ldr	r3, [r4, #0]
 800b744:	f013 0310 	ands.w	r3, r3, #16
 800b748:	d105      	bne.n	800b756 <_scanf_chars+0xa2>
 800b74a:	68e2      	ldr	r2, [r4, #12]
 800b74c:	3201      	adds	r2, #1
 800b74e:	60e2      	str	r2, [r4, #12]
 800b750:	69a2      	ldr	r2, [r4, #24]
 800b752:	b102      	cbz	r2, 800b756 <_scanf_chars+0xa2>
 800b754:	7033      	strb	r3, [r6, #0]
 800b756:	2000      	movs	r0, #0
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	443b      	add	r3, r7
 800b75c:	6123      	str	r3, [r4, #16]
 800b75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b762:	bf00      	nop
 800b764:	0800c11d 	.word	0x0800c11d

0800b768 <_scanf_i>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	460c      	mov	r4, r1
 800b76e:	4698      	mov	r8, r3
 800b770:	4b75      	ldr	r3, [pc, #468]	; (800b948 <_scanf_i+0x1e0>)
 800b772:	b087      	sub	sp, #28
 800b774:	4682      	mov	sl, r0
 800b776:	4616      	mov	r6, r2
 800b778:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b77c:	ab03      	add	r3, sp, #12
 800b77e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b782:	4b72      	ldr	r3, [pc, #456]	; (800b94c <_scanf_i+0x1e4>)
 800b784:	69a1      	ldr	r1, [r4, #24]
 800b786:	4a72      	ldr	r2, [pc, #456]	; (800b950 <_scanf_i+0x1e8>)
 800b788:	4627      	mov	r7, r4
 800b78a:	2903      	cmp	r1, #3
 800b78c:	bf18      	it	ne
 800b78e:	461a      	movne	r2, r3
 800b790:	68a3      	ldr	r3, [r4, #8]
 800b792:	9201      	str	r2, [sp, #4]
 800b794:	1e5a      	subs	r2, r3, #1
 800b796:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b79a:	bf81      	itttt	hi
 800b79c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b7a0:	eb03 0905 	addhi.w	r9, r3, r5
 800b7a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b7a8:	60a3      	strhi	r3, [r4, #8]
 800b7aa:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b7ae:	bf98      	it	ls
 800b7b0:	f04f 0900 	movls.w	r9, #0
 800b7b4:	463d      	mov	r5, r7
 800b7b6:	f04f 0b00 	mov.w	fp, #0
 800b7ba:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b7be:	6023      	str	r3, [r4, #0]
 800b7c0:	6831      	ldr	r1, [r6, #0]
 800b7c2:	ab03      	add	r3, sp, #12
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	7809      	ldrb	r1, [r1, #0]
 800b7c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b7cc:	f7ff fd46 	bl	800b25c <memchr>
 800b7d0:	b328      	cbz	r0, 800b81e <_scanf_i+0xb6>
 800b7d2:	f1bb 0f01 	cmp.w	fp, #1
 800b7d6:	d159      	bne.n	800b88c <_scanf_i+0x124>
 800b7d8:	6862      	ldr	r2, [r4, #4]
 800b7da:	b92a      	cbnz	r2, 800b7e8 <_scanf_i+0x80>
 800b7dc:	2308      	movs	r3, #8
 800b7de:	6822      	ldr	r2, [r4, #0]
 800b7e0:	6063      	str	r3, [r4, #4]
 800b7e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7e6:	6022      	str	r2, [r4, #0]
 800b7e8:	6822      	ldr	r2, [r4, #0]
 800b7ea:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b7ee:	6022      	str	r2, [r4, #0]
 800b7f0:	68a2      	ldr	r2, [r4, #8]
 800b7f2:	1e51      	subs	r1, r2, #1
 800b7f4:	60a1      	str	r1, [r4, #8]
 800b7f6:	b192      	cbz	r2, 800b81e <_scanf_i+0xb6>
 800b7f8:	6832      	ldr	r2, [r6, #0]
 800b7fa:	1c51      	adds	r1, r2, #1
 800b7fc:	6031      	str	r1, [r6, #0]
 800b7fe:	7812      	ldrb	r2, [r2, #0]
 800b800:	f805 2b01 	strb.w	r2, [r5], #1
 800b804:	6872      	ldr	r2, [r6, #4]
 800b806:	3a01      	subs	r2, #1
 800b808:	2a00      	cmp	r2, #0
 800b80a:	6072      	str	r2, [r6, #4]
 800b80c:	dc07      	bgt.n	800b81e <_scanf_i+0xb6>
 800b80e:	4631      	mov	r1, r6
 800b810:	4650      	mov	r0, sl
 800b812:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b816:	4790      	blx	r2
 800b818:	2800      	cmp	r0, #0
 800b81a:	f040 8085 	bne.w	800b928 <_scanf_i+0x1c0>
 800b81e:	f10b 0b01 	add.w	fp, fp, #1
 800b822:	f1bb 0f03 	cmp.w	fp, #3
 800b826:	d1cb      	bne.n	800b7c0 <_scanf_i+0x58>
 800b828:	6863      	ldr	r3, [r4, #4]
 800b82a:	b90b      	cbnz	r3, 800b830 <_scanf_i+0xc8>
 800b82c:	230a      	movs	r3, #10
 800b82e:	6063      	str	r3, [r4, #4]
 800b830:	6863      	ldr	r3, [r4, #4]
 800b832:	4948      	ldr	r1, [pc, #288]	; (800b954 <_scanf_i+0x1ec>)
 800b834:	6960      	ldr	r0, [r4, #20]
 800b836:	1ac9      	subs	r1, r1, r3
 800b838:	f000 f88e 	bl	800b958 <__sccl>
 800b83c:	f04f 0b00 	mov.w	fp, #0
 800b840:	68a3      	ldr	r3, [r4, #8]
 800b842:	6822      	ldr	r2, [r4, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d03d      	beq.n	800b8c4 <_scanf_i+0x15c>
 800b848:	6831      	ldr	r1, [r6, #0]
 800b84a:	6960      	ldr	r0, [r4, #20]
 800b84c:	f891 c000 	ldrb.w	ip, [r1]
 800b850:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b854:	2800      	cmp	r0, #0
 800b856:	d035      	beq.n	800b8c4 <_scanf_i+0x15c>
 800b858:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b85c:	d124      	bne.n	800b8a8 <_scanf_i+0x140>
 800b85e:	0510      	lsls	r0, r2, #20
 800b860:	d522      	bpl.n	800b8a8 <_scanf_i+0x140>
 800b862:	f10b 0b01 	add.w	fp, fp, #1
 800b866:	f1b9 0f00 	cmp.w	r9, #0
 800b86a:	d003      	beq.n	800b874 <_scanf_i+0x10c>
 800b86c:	3301      	adds	r3, #1
 800b86e:	f109 39ff 	add.w	r9, r9, #4294967295
 800b872:	60a3      	str	r3, [r4, #8]
 800b874:	6873      	ldr	r3, [r6, #4]
 800b876:	3b01      	subs	r3, #1
 800b878:	2b00      	cmp	r3, #0
 800b87a:	6073      	str	r3, [r6, #4]
 800b87c:	dd1b      	ble.n	800b8b6 <_scanf_i+0x14e>
 800b87e:	6833      	ldr	r3, [r6, #0]
 800b880:	3301      	adds	r3, #1
 800b882:	6033      	str	r3, [r6, #0]
 800b884:	68a3      	ldr	r3, [r4, #8]
 800b886:	3b01      	subs	r3, #1
 800b888:	60a3      	str	r3, [r4, #8]
 800b88a:	e7d9      	b.n	800b840 <_scanf_i+0xd8>
 800b88c:	f1bb 0f02 	cmp.w	fp, #2
 800b890:	d1ae      	bne.n	800b7f0 <_scanf_i+0x88>
 800b892:	6822      	ldr	r2, [r4, #0]
 800b894:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b898:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b89c:	d1bf      	bne.n	800b81e <_scanf_i+0xb6>
 800b89e:	2310      	movs	r3, #16
 800b8a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8a4:	6063      	str	r3, [r4, #4]
 800b8a6:	e7a2      	b.n	800b7ee <_scanf_i+0x86>
 800b8a8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b8ac:	6022      	str	r2, [r4, #0]
 800b8ae:	780b      	ldrb	r3, [r1, #0]
 800b8b0:	f805 3b01 	strb.w	r3, [r5], #1
 800b8b4:	e7de      	b.n	800b874 <_scanf_i+0x10c>
 800b8b6:	4631      	mov	r1, r6
 800b8b8:	4650      	mov	r0, sl
 800b8ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b8be:	4798      	blx	r3
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	d0df      	beq.n	800b884 <_scanf_i+0x11c>
 800b8c4:	6823      	ldr	r3, [r4, #0]
 800b8c6:	05db      	lsls	r3, r3, #23
 800b8c8:	d50d      	bpl.n	800b8e6 <_scanf_i+0x17e>
 800b8ca:	42bd      	cmp	r5, r7
 800b8cc:	d909      	bls.n	800b8e2 <_scanf_i+0x17a>
 800b8ce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b8d2:	4632      	mov	r2, r6
 800b8d4:	4650      	mov	r0, sl
 800b8d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8da:	f105 39ff 	add.w	r9, r5, #4294967295
 800b8de:	4798      	blx	r3
 800b8e0:	464d      	mov	r5, r9
 800b8e2:	42bd      	cmp	r5, r7
 800b8e4:	d02d      	beq.n	800b942 <_scanf_i+0x1da>
 800b8e6:	6822      	ldr	r2, [r4, #0]
 800b8e8:	f012 0210 	ands.w	r2, r2, #16
 800b8ec:	d113      	bne.n	800b916 <_scanf_i+0x1ae>
 800b8ee:	702a      	strb	r2, [r5, #0]
 800b8f0:	4639      	mov	r1, r7
 800b8f2:	6863      	ldr	r3, [r4, #4]
 800b8f4:	4650      	mov	r0, sl
 800b8f6:	9e01      	ldr	r6, [sp, #4]
 800b8f8:	47b0      	blx	r6
 800b8fa:	6821      	ldr	r1, [r4, #0]
 800b8fc:	f8d8 3000 	ldr.w	r3, [r8]
 800b900:	f011 0f20 	tst.w	r1, #32
 800b904:	d013      	beq.n	800b92e <_scanf_i+0x1c6>
 800b906:	1d1a      	adds	r2, r3, #4
 800b908:	f8c8 2000 	str.w	r2, [r8]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6018      	str	r0, [r3, #0]
 800b910:	68e3      	ldr	r3, [r4, #12]
 800b912:	3301      	adds	r3, #1
 800b914:	60e3      	str	r3, [r4, #12]
 800b916:	2000      	movs	r0, #0
 800b918:	1bed      	subs	r5, r5, r7
 800b91a:	44ab      	add	fp, r5
 800b91c:	6925      	ldr	r5, [r4, #16]
 800b91e:	445d      	add	r5, fp
 800b920:	6125      	str	r5, [r4, #16]
 800b922:	b007      	add	sp, #28
 800b924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b928:	f04f 0b00 	mov.w	fp, #0
 800b92c:	e7ca      	b.n	800b8c4 <_scanf_i+0x15c>
 800b92e:	1d1a      	adds	r2, r3, #4
 800b930:	f8c8 2000 	str.w	r2, [r8]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f011 0f01 	tst.w	r1, #1
 800b93a:	bf14      	ite	ne
 800b93c:	8018      	strhne	r0, [r3, #0]
 800b93e:	6018      	streq	r0, [r3, #0]
 800b940:	e7e6      	b.n	800b910 <_scanf_i+0x1a8>
 800b942:	2001      	movs	r0, #1
 800b944:	e7ed      	b.n	800b922 <_scanf_i+0x1ba>
 800b946:	bf00      	nop
 800b948:	0800bdd8 	.word	0x0800bdd8
 800b94c:	0800a06d 	.word	0x0800a06d
 800b950:	08009f71 	.word	0x08009f71
 800b954:	0800c2c9 	.word	0x0800c2c9

0800b958 <__sccl>:
 800b958:	b570      	push	{r4, r5, r6, lr}
 800b95a:	780b      	ldrb	r3, [r1, #0]
 800b95c:	4604      	mov	r4, r0
 800b95e:	2b5e      	cmp	r3, #94	; 0x5e
 800b960:	bf13      	iteet	ne
 800b962:	2200      	movne	r2, #0
 800b964:	2201      	moveq	r2, #1
 800b966:	784b      	ldrbeq	r3, [r1, #1]
 800b968:	1c48      	addne	r0, r1, #1
 800b96a:	bf08      	it	eq
 800b96c:	1c88      	addeq	r0, r1, #2
 800b96e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b972:	1e61      	subs	r1, r4, #1
 800b974:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b978:	42a9      	cmp	r1, r5
 800b97a:	d1fb      	bne.n	800b974 <__sccl+0x1c>
 800b97c:	b90b      	cbnz	r3, 800b982 <__sccl+0x2a>
 800b97e:	3801      	subs	r0, #1
 800b980:	bd70      	pop	{r4, r5, r6, pc}
 800b982:	f082 0201 	eor.w	r2, r2, #1
 800b986:	4605      	mov	r5, r0
 800b988:	54e2      	strb	r2, [r4, r3]
 800b98a:	4628      	mov	r0, r5
 800b98c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b990:	292d      	cmp	r1, #45	; 0x2d
 800b992:	d006      	beq.n	800b9a2 <__sccl+0x4a>
 800b994:	295d      	cmp	r1, #93	; 0x5d
 800b996:	d0f3      	beq.n	800b980 <__sccl+0x28>
 800b998:	b909      	cbnz	r1, 800b99e <__sccl+0x46>
 800b99a:	4628      	mov	r0, r5
 800b99c:	e7f0      	b.n	800b980 <__sccl+0x28>
 800b99e:	460b      	mov	r3, r1
 800b9a0:	e7f1      	b.n	800b986 <__sccl+0x2e>
 800b9a2:	786e      	ldrb	r6, [r5, #1]
 800b9a4:	2e5d      	cmp	r6, #93	; 0x5d
 800b9a6:	d0fa      	beq.n	800b99e <__sccl+0x46>
 800b9a8:	42b3      	cmp	r3, r6
 800b9aa:	dcf8      	bgt.n	800b99e <__sccl+0x46>
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	3502      	adds	r5, #2
 800b9b0:	3101      	adds	r1, #1
 800b9b2:	428e      	cmp	r6, r1
 800b9b4:	5462      	strb	r2, [r4, r1]
 800b9b6:	dcfb      	bgt.n	800b9b0 <__sccl+0x58>
 800b9b8:	1af1      	subs	r1, r6, r3
 800b9ba:	3901      	subs	r1, #1
 800b9bc:	42b3      	cmp	r3, r6
 800b9be:	bfa8      	it	ge
 800b9c0:	2100      	movge	r1, #0
 800b9c2:	1c58      	adds	r0, r3, #1
 800b9c4:	1843      	adds	r3, r0, r1
 800b9c6:	e7e0      	b.n	800b98a <__sccl+0x32>

0800b9c8 <__submore>:
 800b9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b9d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9d4:	4299      	cmp	r1, r3
 800b9d6:	d11b      	bne.n	800ba10 <__submore+0x48>
 800b9d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b9dc:	f7fd fb78 	bl	80090d0 <_malloc_r>
 800b9e0:	b918      	cbnz	r0, 800b9ea <__submore+0x22>
 800b9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9ee:	63a3      	str	r3, [r4, #56]	; 0x38
 800b9f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b9f4:	6360      	str	r0, [r4, #52]	; 0x34
 800b9f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b9fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b9fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ba02:	7043      	strb	r3, [r0, #1]
 800ba04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ba08:	7003      	strb	r3, [r0, #0]
 800ba0a:	6020      	str	r0, [r4, #0]
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	e7ea      	b.n	800b9e6 <__submore+0x1e>
 800ba10:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ba12:	0077      	lsls	r7, r6, #1
 800ba14:	463a      	mov	r2, r7
 800ba16:	f7ff fc49 	bl	800b2ac <_realloc_r>
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d0e0      	beq.n	800b9e2 <__submore+0x1a>
 800ba20:	eb00 0806 	add.w	r8, r0, r6
 800ba24:	4601      	mov	r1, r0
 800ba26:	4632      	mov	r2, r6
 800ba28:	4640      	mov	r0, r8
 800ba2a:	f7fe ff33 	bl	800a894 <memcpy>
 800ba2e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ba32:	f8c4 8000 	str.w	r8, [r4]
 800ba36:	e7e9      	b.n	800ba0c <__submore+0x44>

0800ba38 <_malloc_usable_size_r>:
 800ba38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba3c:	1f18      	subs	r0, r3, #4
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	bfbc      	itt	lt
 800ba42:	580b      	ldrlt	r3, [r1, r0]
 800ba44:	18c0      	addlt	r0, r0, r3
 800ba46:	4770      	bx	lr

0800ba48 <_init>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	bf00      	nop
 800ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4e:	bc08      	pop	{r3}
 800ba50:	469e      	mov	lr, r3
 800ba52:	4770      	bx	lr

0800ba54 <_fini>:
 800ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba56:	bf00      	nop
 800ba58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba5a:	bc08      	pop	{r3}
 800ba5c:	469e      	mov	lr, r3
 800ba5e:	4770      	bx	lr
