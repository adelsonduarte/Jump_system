
JMP_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b68c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800b798  0800b798  0001b798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfe8  0800bfe8  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bfe8  0800bfe8  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bfe8  0800bfe8  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfe8  0800bfe8  0001bfe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfec  0800bfec  0001bfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800bff0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  200001a0  0800c190  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  0800c190  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016196  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000422e  00000000  00000000  0003635f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  0003a590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  0003bce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d676  00000000  00000000  0003d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c223  00000000  00000000  0005a886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009121e  00000000  00000000  00076aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107cc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cd0  00000000  00000000  00107d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a0 	.word	0x200001a0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b780 	.word	0x0800b780

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a4 	.word	0x200001a4
 8000148:	0800b780 	.word	0x0800b780

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <eraseStateMachine>:
        unsigned char menuState;
        struct dataInsert menuInsert;
    };

unsigned char eraseStateMachine(struct Menu* subMenu)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuErase = subMenu;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	613b      	str	r3, [r7, #16]
    unsigned char key = 0;
 800017c:	2300      	movs	r3, #0
 800017e:	75fb      	strb	r3, [r7, #23]
    unsigned char index = 0;
 8000180:	2300      	movs	r3, #0
 8000182:	72fb      	strb	r3, [r7, #11]
    unsigned char displayUpdateStatus = IDDLE;
 8000184:	2300      	movs	r3, #0
 8000186:	72bb      	strb	r3, [r7, #10]
    unsigned char* ptr_eraseString;
    while(key != MENU)
 8000188:	e07c      	b.n	8000284 <eraseStateMachine+0x114>
    {
        switch(subMenuErase->menuState)
 800018a:	693b      	ldr	r3, [r7, #16]
 800018c:	78db      	ldrb	r3, [r3, #3]
 800018e:	2b02      	cmp	r3, #2
 8000190:	d066      	beq.n	8000260 <eraseStateMachine+0xf0>
 8000192:	2b02      	cmp	r3, #2
 8000194:	dc76      	bgt.n	8000284 <eraseStateMachine+0x114>
 8000196:	2b00      	cmp	r3, #0
 8000198:	d002      	beq.n	80001a0 <eraseStateMachine+0x30>
 800019a:	2b01      	cmp	r3, #1
 800019c:	d008      	beq.n	80001b0 <eraseStateMachine+0x40>
 800019e:	e071      	b.n	8000284 <eraseStateMachine+0x114>
        {
            case IDDLE:
                subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 80001a0:	2001      	movs	r0, #1
 80001a2:	f003 fae9 	bl	8003778 <getNextSub>
 80001a6:	4603      	mov	r3, r0
 80001a8:	461a      	mov	r2, r3
 80001aa:	693b      	ldr	r3, [r7, #16]
 80001ac:	70da      	strb	r2, [r3, #3]
            break;
 80001ae:	e069      	b.n	8000284 <eraseStateMachine+0x114>

            case VERFICA_APAGAR:
                updateUserMsg(3,2,eraseselectUserMsg,&displayUpdateStatus);
 80001b0:	4b39      	ldr	r3, [pc, #228]	; (8000298 <eraseStateMachine+0x128>)
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	f107 030a 	add.w	r3, r7, #10
 80001b8:	2102      	movs	r1, #2
 80001ba:	2003      	movs	r0, #3
 80001bc:	f001 fe3c 	bl	8001e38 <updateUserMsg>
                ptr_eraseString = getEraseTestString();
 80001c0:	f001 fb58 	bl	8001874 <getEraseTestString>
 80001c4:	60f8      	str	r0, [r7, #12]
                printDataDisplay(0,0,ptr_eraseString);
 80001c6:	68fa      	ldr	r2, [r7, #12]
 80001c8:	2100      	movs	r1, #0
 80001ca:	2000      	movs	r0, #0
 80001cc:	f002 fd64 	bl	8002c98 <printDataDisplay>
                key = getKeyPressed();
 80001d0:	f004 f872 	bl	80042b8 <getKeyPressed>
 80001d4:	4603      	mov	r3, r0
 80001d6:	75fb      	strb	r3, [r7, #23]

                if(key == INSERIR)
 80001d8:	7dfb      	ldrb	r3, [r7, #23]
 80001da:	2b49      	cmp	r3, #73	; 0x49
 80001dc:	d10e      	bne.n	80001fc <eraseStateMachine+0x8c>
                {
                	resetKeyPressed();
 80001de:	f004 f877 	bl	80042d0 <resetKeyPressed>
                    setUserErase(&index);
 80001e2:	f107 030b 	add.w	r3, r7, #11
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fbbc 	bl	8001964 <setUserErase>
                    subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 80001ec:	2001      	movs	r0, #1
 80001ee:	f003 fac3 	bl	8003778 <getNextSub>
 80001f2:	4603      	mov	r3, r0
 80001f4:	461a      	mov	r2, r3
 80001f6:	693b      	ldr	r3, [r7, #16]
 80001f8:	70da      	strb	r2, [r3, #3]
 80001fa:	e043      	b.n	8000284 <eraseStateMachine+0x114>
                }
                else if(key == CONFIRMAR)
 80001fc:	7dfb      	ldrb	r3, [r7, #23]
 80001fe:	2b43      	cmp	r3, #67	; 0x43
 8000200:	d140      	bne.n	8000284 <eraseStateMachine+0x114>
                {
                	resetKeyPressed();
 8000202:	f004 f865 	bl	80042d0 <resetKeyPressed>
                    if(*ptr_eraseString == '5')
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b35      	cmp	r3, #53	; 0x35
 800020c:	d11a      	bne.n	8000244 <eraseStateMachine+0xd4>
                    {
                        updateUserMsg(3,2,erasingUserMsg,&displayUpdateStatus);
 800020e:	4b23      	ldr	r3, [pc, #140]	; (800029c <eraseStateMachine+0x12c>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	f107 030a 	add.w	r3, r7, #10
 8000216:	2102      	movs	r1, #2
 8000218:	2003      	movs	r0, #3
 800021a:	f001 fe0d 	bl	8001e38 <updateUserMsg>
                        resetMyResults();
 800021e:	f001 f8e9 	bl	80013f4 <resetMyResults>
                        subMenuErase->menuSelect = setSelectSub(&subMenuErase->menuState);
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	3303      	adds	r3, #3
 8000226:	4618      	mov	r0, r3
 8000228:	f003 fab8 	bl	800379c <setSelectSub>
 800022c:	4603      	mov	r3, r0
 800022e:	461a      	mov	r2, r3
 8000230:	693b      	ldr	r3, [r7, #16]
 8000232:	705a      	strb	r2, [r3, #1]
                        subMenuErase->menuState = getNextSub(CONFIRMA_APAGAR);
 8000234:	2002      	movs	r0, #2
 8000236:	f003 fa9f 	bl	8003778 <getNextSub>
 800023a:	4603      	mov	r3, r0
 800023c:	461a      	mov	r2, r3
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	70da      	strb	r2, [r3, #3]
 8000242:	e01f      	b.n	8000284 <eraseStateMachine+0x114>
                    }
                    else if(*ptr_eraseString == '2')
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b32      	cmp	r3, #50	; 0x32
 800024a:	d11b      	bne.n	8000284 <eraseStateMachine+0x114>
                    {
                     subMenuErase->menuState = getNextSub(IDDLE);
 800024c:	2000      	movs	r0, #0
 800024e:	f003 fa93 	bl	8003778 <getNextSub>
 8000252:	4603      	mov	r3, r0
 8000254:	461a      	mov	r2, r3
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	70da      	strb	r2, [r3, #3]
                      key = MENU;
 800025a:	234d      	movs	r3, #77	; 0x4d
 800025c:	75fb      	strb	r3, [r7, #23]
                    }
                }

            break;
 800025e:	e011      	b.n	8000284 <eraseStateMachine+0x114>

            case CONFIRMA_APAGAR:
                updateUserMsg(3,2,erasedUserMsg,&displayUpdateStatus);
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <eraseStateMachine+0x130>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	f107 030a 	add.w	r3, r7, #10
 8000268:	2102      	movs	r1, #2
 800026a:	2003      	movs	r0, #3
 800026c:	f001 fde4 	bl	8001e38 <updateUserMsg>
                subMenuErase->menuState = getNextSub(IDDLE);
 8000270:	2000      	movs	r0, #0
 8000272:	f003 fa81 	bl	8003778 <getNextSub>
 8000276:	4603      	mov	r3, r0
 8000278:	461a      	mov	r2, r3
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	70da      	strb	r2, [r3, #3]
                key = MENU;
 800027e:	234d      	movs	r3, #77	; 0x4d
 8000280:	75fb      	strb	r3, [r7, #23]
                break;
 8000282:	bf00      	nop
    while(key != MENU)
 8000284:	7dfb      	ldrb	r3, [r7, #23]
 8000286:	2b4d      	cmp	r3, #77	; 0x4d
 8000288:	f47f af7f 	bne.w	800018a <eraseStateMachine+0x1a>
        }
    }
}
 800028c:	bf00      	nop
 800028e:	4618      	mov	r0, r3
 8000290:	3718      	adds	r7, #24
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	200000a4 	.word	0x200000a4
 800029c:	200000a8 	.word	0x200000a8
 80002a0:	200000ac 	.word	0x200000ac

080002a4 <configStateMachine>:
//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
//verificar se vou usar o codigo abaixo


unsigned char configStateMachine(struct Menu* subMenu)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b0a8      	sub	sp, #160	; 0xa0
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
    unsigned char* ptr_numSeriesString;
    unsigned char* ptr_intervalSeriesString;

    unsigned char userIntervalSaltosTimeString[9];
    struct tm myTime;
	struct tm* configIntervalTimeStruct = &myTime;
 80002ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    struct Menu* subMenuTesteConfigurar = subMenu;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    unsigned char cursorPosition[2] = {0,0};
 80002ba:	2300      	movs	r3, #0
 80002bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    //verificar se vou usar
    struct dataInsert measurementSensor1;
    struct dataInsert measurementSensor2;
    //
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 80002c0:	f000 ff24 	bl	800110c <getUserConfigStruct>
 80002c4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    resetConfigStruct(ptr_userConfiguration);
 80002c8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80002cc:	f001 f858 	bl	8001380 <resetConfigStruct>

    //
    unsigned char key = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    unsigned char displayUpdateStatus = IDDLE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	73fb      	strb	r3, [r7, #15]
    short index = 2;
 80002da:	2302      	movs	r3, #2
 80002dc:	81bb      	strh	r3, [r7, #12]
    while(key != MENU)
 80002de:	bf00      	nop
 80002e0:	f000 bca9 	b.w	8000c36 <configStateMachine+0x992>
    {
        switch(subMenuTesteConfigurar->menuState)
 80002e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80002e8:	78db      	ldrb	r3, [r3, #3]
 80002ea:	2b0d      	cmp	r3, #13
 80002ec:	f200 84a3 	bhi.w	8000c36 <configStateMachine+0x992>
 80002f0:	a201      	add	r2, pc, #4	; (adr r2, 80002f8 <configStateMachine+0x54>)
 80002f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f6:	bf00      	nop
 80002f8:	08000331 	.word	0x08000331
 80002fc:	08000345 	.word	0x08000345
 8000300:	080003df 	.word	0x080003df
 8000304:	08000477 	.word	0x08000477
 8000308:	08000539 	.word	0x08000539
 800030c:	080005fb 	.word	0x080005fb
 8000310:	080006d1 	.word	0x080006d1
 8000314:	080007ab 	.word	0x080007ab
 8000318:	0800088d 	.word	0x0800088d
 800031c:	08000939 	.word	0x08000939
 8000320:	080009ff 	.word	0x080009ff
 8000324:	08000add 	.word	0x08000add
 8000328:	08000b73 	.word	0x08000b73
 800032c:	08000c07 	.word	0x08000c07
        {
        case IDDLE:
            subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000330:	2001      	movs	r0, #1
 8000332:	f003 fa21 	bl	8003778 <getNextSub>
 8000336:	4603      	mov	r3, r0
 8000338:	461a      	mov	r2, r3
 800033a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800033e:	70da      	strb	r2, [r3, #3]

            break;
 8000340:	f000 bc79 	b.w	8000c36 <configStateMachine+0x992>
            case CONFIG_SENSOR_1:
                updateUserMsg(0,0,sensor1UserMsg,&displayUpdateStatus);
 8000344:	4bdd      	ldr	r3, [pc, #884]	; (80006bc <configStateMachine+0x418>)
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	f107 030f 	add.w	r3, r7, #15
 800034c:	2100      	movs	r1, #0
 800034e:	2000      	movs	r0, #0
 8000350:	f001 fd72 	bl	8001e38 <updateUserMsg>
                key = getKeyPressed();
 8000354:	f003 ffb0 	bl	80042b8 <getKeyPressed>
 8000358:	4603      	mov	r3, r0
 800035a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == AVANCAR)
 800035e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000362:	2b41      	cmp	r3, #65	; 0x41
 8000364:	d113      	bne.n	800038e <configStateMachine+0xea>
                {
                	resetKeyPressed();
 8000366:	f003 ffb3 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800036a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800036e:	f107 030f 	add.w	r3, r7, #15
 8000372:	4611      	mov	r1, r2
 8000374:	4618      	mov	r0, r3
 8000376:	f001 fd7d 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_2);
 800037a:	2002      	movs	r0, #2
 800037c:	f003 f9fc 	bl	8003778 <getNextSub>
 8000380:	4603      	mov	r3, r0
 8000382:	461a      	mov	r2, r3
 8000384:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000388:	70da      	strb	r2, [r3, #3]
 800038a:	f000 bc54 	b.w	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 800038e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000392:	2b43      	cmp	r3, #67	; 0x43
 8000394:	f040 844f 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 8000398:	f003 ff9a 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800039c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80003a0:	f107 030f 	add.w	r3, r7, #15
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fd64 	bl	8001e74 <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 1;
 80003ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80003b0:	2201      	movs	r2, #1
 80003b2:	755a      	strb	r2, [r3, #21]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80003b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80003b8:	3303      	adds	r3, #3
 80003ba:	4618      	mov	r0, r3
 80003bc:	f003 f9ee 	bl	800379c <setSelectSub>
 80003c0:	4603      	mov	r3, r0
 80003c2:	461a      	mov	r2, r3
 80003c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80003c8:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 80003ca:	2003      	movs	r0, #3
 80003cc:	f003 f9d4 	bl	8003778 <getNextSub>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80003d8:	70da      	strb	r2, [r3, #3]
                }

                break;
 80003da:	f000 bc2c 	b.w	8000c36 <configStateMachine+0x992>

            case CONFIG_SENSOR_2:
                updateUserMsg(0,0,sensor2UserMsg,&displayUpdateStatus);
 80003de:	4bb8      	ldr	r3, [pc, #736]	; (80006c0 <configStateMachine+0x41c>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	f107 030f 	add.w	r3, r7, #15
 80003e6:	2100      	movs	r1, #0
 80003e8:	2000      	movs	r0, #0
 80003ea:	f001 fd25 	bl	8001e38 <updateUserMsg>
                key = getKeyPressed();
 80003ee:	f003 ff63 	bl	80042b8 <getKeyPressed>
 80003f2:	4603      	mov	r3, r0
 80003f4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == AVANCAR)
 80003f8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80003fc:	2b41      	cmp	r3, #65	; 0x41
 80003fe:	d113      	bne.n	8000428 <configStateMachine+0x184>
                {
                	resetKeyPressed();
 8000400:	f003 ff66 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000404:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000408:	f107 030f 	add.w	r3, r7, #15
 800040c:	4611      	mov	r1, r2
 800040e:	4618      	mov	r0, r3
 8000410:	f001 fd30 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000414:	2001      	movs	r0, #1
 8000416:	f003 f9af 	bl	8003778 <getNextSub>
 800041a:	4603      	mov	r3, r0
 800041c:	461a      	mov	r2, r3
 800041e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000422:	70da      	strb	r2, [r3, #3]
 8000424:	f000 bc07 	b.w	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 8000428:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800042c:	2b43      	cmp	r3, #67	; 0x43
 800042e:	f040 8402 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 8000432:	f003 ff4d 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000436:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800043a:	f107 030f 	add.w	r3, r7, #15
 800043e:	4611      	mov	r1, r2
 8000440:	4618      	mov	r0, r3
 8000442:	f001 fd17 	bl	8001e74 <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 2;
 8000446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800044a:	2202      	movs	r2, #2
 800044c:	755a      	strb	r2, [r3, #21]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 800044e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000452:	3303      	adds	r3, #3
 8000454:	4618      	mov	r0, r3
 8000456:	f003 f9a1 	bl	800379c <setSelectSub>
 800045a:	4603      	mov	r3, r0
 800045c:	461a      	mov	r2, r3
 800045e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000462:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8000464:	2003      	movs	r0, #3
 8000466:	f003 f987 	bl	8003778 <getNextSub>
 800046a:	4603      	mov	r3, r0
 800046c:	461a      	mov	r2, r3
 800046e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000472:	70da      	strb	r2, [r3, #3]
                }
                break;
 8000474:	e3df      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_ALTMIN:
                updateUserMsg(0,0,altminUserMsg,&displayUpdateStatus);
 8000476:	4b93      	ldr	r3, [pc, #588]	; (80006c4 <configStateMachine+0x420>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	f107 030f 	add.w	r3, r7, #15
 800047e:	2100      	movs	r1, #0
 8000480:	2000      	movs	r0, #0
 8000482:	f001 fcd9 	bl	8001e38 <updateUserMsg>
                ptr_altMinString = getAltMinString();
 8000486:	f001 f8b9 	bl	80015fc <getAltMinString>
 800048a:	6778      	str	r0, [r7, #116]	; 0x74
                printDataDisplay(0,1,ptr_altMinString);
 800048c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800048e:	2101      	movs	r1, #1
 8000490:	2000      	movs	r0, #0
 8000492:	f002 fc01 	bl	8002c98 <printDataDisplay>
                updateDataDisplay(index,1);
 8000496:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800049a:	2101      	movs	r1, #1
 800049c:	4618      	mov	r0, r3
 800049e:	f002 fc15 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 80004a2:	f003 ff09 	bl	80042b8 <getKeyPressed>
 80004a6:	4603      	mov	r3, r0
 80004a8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 80004ac:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80004b0:	2b49      	cmp	r3, #73	; 0x49
 80004b2:	d10f      	bne.n	80004d4 <configStateMachine+0x230>
                {
                	resetKeyPressed();
 80004b4:	f003 ff0c 	bl	80042d0 <resetKeyPressed>
                    setUserAltMin(&index);
 80004b8:	f107 030c 	add.w	r3, r7, #12
 80004bc:	4618      	mov	r0, r3
 80004be:	f001 fa2d 	bl	800191c <setUserAltMin>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 80004c2:	2003      	movs	r0, #3
 80004c4:	f003 f958 	bl	8003778 <getNextSub>
 80004c8:	4603      	mov	r3, r0
 80004ca:	461a      	mov	r2, r3
 80004cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80004d0:	70da      	strb	r2, [r3, #3]
 80004d2:	e3b0      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == AVANCAR)
 80004d4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80004d8:	2b41      	cmp	r3, #65	; 0x41
 80004da:	d108      	bne.n	80004ee <configStateMachine+0x24a>
                {
                	resetKeyPressed();
 80004dc:	f003 fef8 	bl	80042d0 <resetKeyPressed>
                    indexChange(&index,2);
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	2102      	movs	r1, #2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 f86a 	bl	80015c0 <indexChange>
 80004ec:	e3a3      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 80004ee:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80004f2:	2b43      	cmp	r3, #67	; 0x43
 80004f4:	f040 839f 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 80004f8:	f003 feea 	bl	80042d0 <resetKeyPressed>
                    index = 2;
 80004fc:	2302      	movs	r3, #2
 80004fe:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000500:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000504:	f107 030f 	add.w	r3, r7, #15
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fcb2 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 8000510:	2004      	movs	r0, #4
 8000512:	f003 f931 	bl	8003778 <getNextSub>
 8000516:	4603      	mov	r3, r0
 8000518:	461a      	mov	r2, r3
 800051a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800051e:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000520:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000524:	3303      	adds	r3, #3
 8000526:	4618      	mov	r0, r3
 8000528:	f003 f938 	bl	800379c <setSelectSub>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000534:	705a      	strb	r2, [r3, #1]
                }
                break;
 8000536:	e37e      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_ALTMAX:
                updateUserMsg(0,0,altmaxUserMsg,&displayUpdateStatus);
 8000538:	4b63      	ldr	r3, [pc, #396]	; (80006c8 <configStateMachine+0x424>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	f107 030f 	add.w	r3, r7, #15
 8000540:	2100      	movs	r1, #0
 8000542:	2000      	movs	r0, #0
 8000544:	f001 fc78 	bl	8001e38 <updateUserMsg>
                ptr_altMaxString = getAltMaxString();
 8000548:	f001 f878 	bl	800163c <getAltMaxString>
 800054c:	67b8      	str	r0, [r7, #120]	; 0x78
                printDataDisplay(0,1,ptr_altMaxString);
 800054e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000550:	2101      	movs	r1, #1
 8000552:	2000      	movs	r0, #0
 8000554:	f002 fba0 	bl	8002c98 <printDataDisplay>
                updateDataDisplay(index,1);
 8000558:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800055c:	2101      	movs	r1, #1
 800055e:	4618      	mov	r0, r3
 8000560:	f002 fbb4 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 8000564:	f003 fea8 	bl	80042b8 <getKeyPressed>
 8000568:	4603      	mov	r3, r0
 800056a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 800056e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000572:	2b49      	cmp	r3, #73	; 0x49
 8000574:	d10f      	bne.n	8000596 <configStateMachine+0x2f2>
                {
                	resetKeyPressed();
 8000576:	f003 feab 	bl	80042d0 <resetKeyPressed>
                    setUserAltMax(&index);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4618      	mov	r0, r3
 8000580:	f001 fa15 	bl	80019ae <setUserAltMax>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 8000584:	2004      	movs	r0, #4
 8000586:	f003 f8f7 	bl	8003778 <getNextSub>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000592:	70da      	strb	r2, [r3, #3]
 8000594:	e34f      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == AVANCAR)
 8000596:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800059a:	2b41      	cmp	r3, #65	; 0x41
 800059c:	d108      	bne.n	80005b0 <configStateMachine+0x30c>
                {
                	resetKeyPressed();
 800059e:	f003 fe97 	bl	80042d0 <resetKeyPressed>
                    indexChange(&index,2);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2102      	movs	r1, #2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 f809 	bl	80015c0 <indexChange>
 80005ae:	e342      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 80005b0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80005b4:	2b43      	cmp	r3, #67	; 0x43
 80005b6:	f040 833e 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 80005ba:	f003 fe89 	bl	80042d0 <resetKeyPressed>
                    index = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80005c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80005c6:	f107 030f 	add.w	r3, r7, #15
 80005ca:	4611      	mov	r1, r2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fc51 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 80005d2:	2005      	movs	r0, #5
 80005d4:	f003 f8d0 	bl	8003778 <getNextSub>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005e0:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80005e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005e6:	3303      	adds	r3, #3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 f8d7 	bl	800379c <setSelectSub>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005f6:	705a      	strb	r2, [r3, #1]
                }

                break;
 80005f8:	e31d      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_SALTOS:
                updateUserMsg(0,0,numsaltosUserMsg,&displayUpdateStatus);
 80005fa:	4b34      	ldr	r3, [pc, #208]	; (80006cc <configStateMachine+0x428>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f107 030f 	add.w	r3, r7, #15
 8000602:	2100      	movs	r1, #0
 8000604:	2000      	movs	r0, #0
 8000606:	f001 fc17 	bl	8001e38 <updateUserMsg>
                ptr_numSaltosString = getNumSaltosString();
 800060a:	f001 f837 	bl	800167c <getNumSaltosString>
 800060e:	67f8      	str	r0, [r7, #124]	; 0x7c
                printDataDisplay(0,1,ptr_numSaltosString);
 8000610:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000612:	2101      	movs	r1, #1
 8000614:	2000      	movs	r0, #0
 8000616:	f002 fb3f 	bl	8002c98 <printDataDisplay>
                updateDataDisplay(index,1);
 800061a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800061e:	2101      	movs	r1, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fb53 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 8000626:	f003 fe47 	bl	80042b8 <getKeyPressed>
 800062a:	4603      	mov	r3, r0
 800062c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 8000630:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000634:	2b49      	cmp	r3, #73	; 0x49
 8000636:	d10f      	bne.n	8000658 <configStateMachine+0x3b4>
                {
                	resetKeyPressed();
 8000638:	f003 fe4a 	bl	80042d0 <resetKeyPressed>
                    setUserNumSaltos(&index);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f9d8 	bl	80019f6 <setUserNumSaltos>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 8000646:	2005      	movs	r0, #5
 8000648:	f003 f896 	bl	8003778 <getNextSub>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000654:	70da      	strb	r2, [r3, #3]
 8000656:	e2ee      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == AVANCAR)
 8000658:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800065c:	2b41      	cmp	r3, #65	; 0x41
 800065e:	d108      	bne.n	8000672 <configStateMachine+0x3ce>
                {
                	resetKeyPressed();
 8000660:	f003 fe36 	bl	80042d0 <resetKeyPressed>
                    indexChange(&index,2);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2102      	movs	r1, #2
 800066a:	4618      	mov	r0, r3
 800066c:	f000 ffa8 	bl	80015c0 <indexChange>
 8000670:	e2e1      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 8000672:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000676:	2b43      	cmp	r3, #67	; 0x43
 8000678:	f040 82dd 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 800067c:	f003 fe28 	bl	80042d0 <resetKeyPressed>
                    index = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000684:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000688:	f107 030f 	add.w	r3, r7, #15
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fbf0 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 8000694:	2006      	movs	r0, #6
 8000696:	f003 f86f 	bl	8003778 <getNextSub>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006a2:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80006a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006a8:	3303      	adds	r3, #3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 f876 	bl	800379c <setSelectSub>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006b8:	705a      	strb	r2, [r3, #1]
                }
                break;
 80006ba:	e2bc      	b.n	8000c36 <configStateMachine+0x992>
 80006bc:	20000064 	.word	0x20000064
 80006c0:	20000068 	.word	0x20000068
 80006c4:	2000006c 	.word	0x2000006c
 80006c8:	20000070 	.word	0x20000070
 80006cc:	20000074 	.word	0x20000074

            case SENSOR_INT_SALTOS:
                updateUserMsg(0,0,intersaltosUserMsg,&displayUpdateStatus);
 80006d0:	4be3      	ldr	r3, [pc, #908]	; (8000a60 <configStateMachine+0x7bc>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	f107 030f 	add.w	r3, r7, #15
 80006d8:	2100      	movs	r1, #0
 80006da:	2000      	movs	r0, #0
 80006dc:	f001 fbac 	bl	8001e38 <updateUserMsg>
                configIntervalTimeStruct = getIntervalTimeStruct();
 80006e0:	f000 fc9c 	bl	800101c <getIntervalTimeStruct>
 80006e4:	4603      	mov	r3, r0
 80006e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                strftime(userIntervalSaltosTimeString, sizeof(userIntervalSaltosTimeString), "%M:%S", configIntervalTimeStruct);
 80006ea:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80006ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006f2:	4adc      	ldr	r2, [pc, #880]	; (8000a64 <configStateMachine+0x7c0>)
 80006f4:	2109      	movs	r1, #9
 80006f6:	f009 fa59 	bl	8009bac <strftime>
                printDataDisplay(0,1,userIntervalSaltosTimeString);
 80006fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	2000      	movs	r0, #0
 8000704:	f002 fac8 	bl	8002c98 <printDataDisplay>
                updateDataDisplay(index,1);
 8000708:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800070c:	2101      	movs	r1, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fadc 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 8000714:	f003 fdd0 	bl	80042b8 <getKeyPressed>
 8000718:	4603      	mov	r3, r0
 800071a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 800071e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000722:	2b49      	cmp	r3, #73	; 0x49
 8000724:	d10f      	bne.n	8000746 <configStateMachine+0x4a2>
                {
                	resetKeyPressed();
 8000726:	f003 fdd3 	bl	80042d0 <resetKeyPressed>
                	setIntervalSaltosTime(&index);
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fa82 	bl	8001c38 <setIntervalSaltosTime>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 8000734:	2006      	movs	r0, #6
 8000736:	f003 f81f 	bl	8003778 <getNextSub>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000742:	70da      	strb	r2, [r3, #3]
 8000744:	e277      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == AVANCAR)
 8000746:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800074a:	2b41      	cmp	r3, #65	; 0x41
 800074c:	d108      	bne.n	8000760 <configStateMachine+0x4bc>
				{
					resetKeyPressed();
 800074e:	f003 fdbf 	bl	80042d0 <resetKeyPressed>
					indexColumn(&index,4);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2104      	movs	r1, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fea9 	bl	80014b0 <indexColumn>
 800075e:	e26a      	b.n	8000c36 <configStateMachine+0x992>
				}
                else if(key == CONFIRMAR)
 8000760:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000764:	2b43      	cmp	r3, #67	; 0x43
 8000766:	f040 8266 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 800076a:	f003 fdb1 	bl	80042d0 <resetKeyPressed>
                    index = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000772:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000776:	f107 030f 	add.w	r3, r7, #15
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fb79 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 8000782:	2007      	movs	r0, #7
 8000784:	f002 fff8 	bl	8003778 <getNextSub>
 8000788:	4603      	mov	r3, r0
 800078a:	461a      	mov	r2, r3
 800078c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000790:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000792:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000796:	3303      	adds	r3, #3
 8000798:	4618      	mov	r0, r3
 800079a:	f002 ffff 	bl	800379c <setSelectSub>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007a6:	705a      	strb	r2, [r3, #1]
                }

                break;
 80007a8:	e245      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_JMP_SELECT:
                updateUserMsg(0,0,tiposaltoUserMsg,&displayUpdateStatus);
 80007aa:	4baf      	ldr	r3, [pc, #700]	; (8000a68 <configStateMachine+0x7c4>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	f107 030f 	add.w	r3, r7, #15
 80007b2:	2100      	movs	r1, #0
 80007b4:	2000      	movs	r0, #0
 80007b6:	f001 fb3f 	bl	8001e38 <updateUserMsg>
                ptr_jumpSelectString = getTypeJumpString();
 80007ba:	f000 ff7f 	bl	80016bc <getTypeJumpString>
 80007be:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                printDataDisplay(0,1,ptr_jumpSelectString);
 80007c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80007c6:	2101      	movs	r1, #1
 80007c8:	2000      	movs	r0, #0
 80007ca:	f002 fa65 	bl	8002c98 <printDataDisplay>
                updateDataDisplay(index,1);
 80007ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007d2:	2101      	movs	r1, #1
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fa79 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 80007da:	f003 fd6d 	bl	80042b8 <getKeyPressed>
 80007de:	4603      	mov	r3, r0
 80007e0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 80007e4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80007e8:	2b49      	cmp	r3, #73	; 0x49
 80007ea:	d10f      	bne.n	800080c <configStateMachine+0x568>
                {
                	resetKeyPressed();
 80007ec:	f003 fd70 	bl	80042d0 <resetKeyPressed>
                    setUserTypeJump(&index);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 f922 	bl	8001a3e <setUserTypeJump>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 80007fa:	2007      	movs	r0, #7
 80007fc:	f002 ffbc 	bl	8003778 <getNextSub>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000808:	70da      	strb	r2, [r3, #3]
 800080a:	e214      	b.n	8000c36 <configStateMachine+0x992>

                }
                else if(key == CONFIRMAR)
 800080c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000810:	2b43      	cmp	r3, #67	; 0x43
 8000812:	f040 8210 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 8000816:	f003 fd5b 	bl	80042d0 <resetKeyPressed>
                    if(*ptr_jumpSelectString == '3')
 800081a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b33      	cmp	r3, #51	; 0x33
 8000822:	d115      	bne.n	8000850 <configStateMachine+0x5ac>
                    {
                    	index = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 8000828:	2008      	movs	r0, #8
 800082a:	f002 ffa5 	bl	8003778 <getNextSub>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000836:	70da      	strb	r2, [r3, #3]
                        subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000838:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800083c:	3303      	adds	r3, #3
 800083e:	4618      	mov	r0, r3
 8000840:	f002 ffac 	bl	800379c <setSelectSub>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800084c:	705a      	strb	r2, [r3, #1]
 800084e:	e014      	b.n	800087a <configStateMachine+0x5d6>
                    }
                    else
                    {
                    	index = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8000854:	2009      	movs	r0, #9
 8000856:	f002 ff8f 	bl	8003778 <getNextSub>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000862:	70da      	strb	r2, [r3, #3]
                        subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000864:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000868:	3303      	adds	r3, #3
 800086a:	4618      	mov	r0, r3
 800086c:	f002 ff96 	bl	800379c <setSelectSub>
 8000870:	4603      	mov	r3, r0
 8000872:	461a      	mov	r2, r3
 8000874:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000878:	705a      	strb	r2, [r3, #1]
                    }
                    //TESTE trocar a variavel por uma local e o resultado enviar para ptr_userConfiguration->userCMJ.
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800087a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800087e:	f107 030f 	add.w	r3, r7, #15
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f001 faf5 	bl	8001e74 <readyUserInterface>

                }

                break;
 800088a:	e1d4      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_ALTDJ:
                updateUserMsg(0,0,altdjUserMsg,&displayUpdateStatus);
 800088c:	4b77      	ldr	r3, [pc, #476]	; (8000a6c <configStateMachine+0x7c8>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	f107 030f 	add.w	r3, r7, #15
 8000894:	2100      	movs	r1, #0
 8000896:	2000      	movs	r0, #0
 8000898:	f001 face 	bl	8001e38 <updateUserMsg>
                ptr_altDJString = getAltDJString();
 800089c:	f000 ff24 	bl	80016e8 <getAltDJString>
 80008a0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                printDataDisplay(0,1,ptr_altDJString);
 80008a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80008a8:	2101      	movs	r1, #1
 80008aa:	2000      	movs	r0, #0
 80008ac:	f002 f9f4 	bl	8002c98 <printDataDisplay>
                updateDataDisplay(index,1);
 80008b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008b4:	2101      	movs	r1, #1
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 fa08 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 80008bc:	f003 fcfc 	bl	80042b8 <getKeyPressed>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 80008c6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80008ca:	2b49      	cmp	r3, #73	; 0x49
 80008cc:	d10f      	bne.n	80008ee <configStateMachine+0x64a>
                {
                	resetKeyPressed();
 80008ce:	f003 fcff 	bl	80042d0 <resetKeyPressed>
                    setUserAltDJ(&index);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 f8d5 	bl	8001a86 <setUserAltDJ>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 80008dc:	2008      	movs	r0, #8
 80008de:	f002 ff4b 	bl	8003778 <getNextSub>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008ea:	70da      	strb	r2, [r3, #3]
 80008ec:	e1a3      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 80008ee:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80008f2:	2b43      	cmp	r3, #67	; 0x43
 80008f4:	f040 819f 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 80008f8:	f003 fcea 	bl	80042d0 <resetKeyPressed>
                    index = 2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000900:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000904:	f107 030f 	add.w	r3, r7, #15
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fab2 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8000910:	2009      	movs	r0, #9
 8000912:	f002 ff31 	bl	8003778 <getNextSub>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800091e:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000924:	3303      	adds	r3, #3
 8000926:	4618      	mov	r0, r3
 8000928:	f002 ff38 	bl	800379c <setSelectSub>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000934:	705a      	strb	r2, [r3, #1]
                }

                break;
 8000936:	e17e      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_SERIES:
                updateUserMsg(0,0,numserieUserMsg,&displayUpdateStatus);
 8000938:	4b4d      	ldr	r3, [pc, #308]	; (8000a70 <configStateMachine+0x7cc>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	f107 030f 	add.w	r3, r7, #15
 8000940:	2100      	movs	r1, #0
 8000942:	2000      	movs	r0, #0
 8000944:	f001 fa78 	bl	8001e38 <updateUserMsg>
                ptr_numSeriesString = getNumSeriesString();
 8000948:	f000 fee8 	bl	800171c <getNumSeriesString>
 800094c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                printDataDisplay(0,1,ptr_numSeriesString);
 8000950:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000954:	2101      	movs	r1, #1
 8000956:	2000      	movs	r0, #0
 8000958:	f002 f99e 	bl	8002c98 <printDataDisplay>
                updateDataDisplay(index,1);
 800095c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000960:	2101      	movs	r1, #1
 8000962:	4618      	mov	r0, r3
 8000964:	f002 f9b2 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 8000968:	f003 fca6 	bl	80042b8 <getKeyPressed>
 800096c:	4603      	mov	r3, r0
 800096e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 8000972:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000976:	2b49      	cmp	r3, #73	; 0x49
 8000978:	d10f      	bne.n	800099a <configStateMachine+0x6f6>
                {
                	resetKeyPressed();
 800097a:	f003 fca9 	bl	80042d0 <resetKeyPressed>
                    setUserNumSeries(&index);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f8a3 	bl	8001ace <setUserNumSeries>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8000988:	2009      	movs	r0, #9
 800098a:	f002 fef5 	bl	8003778 <getNextSub>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000996:	70da      	strb	r2, [r3, #3]
 8000998:	e14d      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == AVANCAR)
 800099a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800099e:	2b41      	cmp	r3, #65	; 0x41
 80009a0:	d108      	bne.n	80009b4 <configStateMachine+0x710>
				{
					resetKeyPressed();
 80009a2:	f003 fc95 	bl	80042d0 <resetKeyPressed>
					indexColumn(&index,2);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	2102      	movs	r1, #2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fd7f 	bl	80014b0 <indexColumn>
 80009b2:	e140      	b.n	8000c36 <configStateMachine+0x992>
				}
                else if(key == CONFIRMAR)
 80009b4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80009b8:	2b43      	cmp	r3, #67	; 0x43
 80009ba:	f040 813c 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 80009be:	f003 fc87 	bl	80042d0 <resetKeyPressed>
                    index = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80009c6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80009ca:	f107 030f 	add.w	r3, r7, #15
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fa4f 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 80009d6:	200a      	movs	r0, #10
 80009d8:	f002 fece 	bl	8003778 <getNextSub>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009e4:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80009e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009ea:	3303      	adds	r3, #3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 fed5 	bl	800379c <setSelectSub>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009fa:	705a      	strb	r2, [r3, #1]
                }

                break;
 80009fc:	e11b      	b.n	8000c36 <configStateMachine+0x992>

            case SENSOR_INT_SERIES:
                updateUserMsg(0,0,interseriesUserMsg,&displayUpdateStatus);
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <configStateMachine+0x7d0>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	f107 030f 	add.w	r3, r7, #15
 8000a06:	2100      	movs	r1, #0
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 fa15 	bl	8001e38 <updateUserMsg>
                ptr_intervalSeriesString = getIntervalSeriesString();
 8000a0e:	f000 fea5 	bl	800175c <getIntervalSeriesString>
 8000a12:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                printDataDisplay(0,1,ptr_intervalSeriesString);
 8000a16:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f002 f93b 	bl	8002c98 <printDataDisplay>
                updateDataDisplay(index,1);
 8000a22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a26:	2101      	movs	r1, #1
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 f94f 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 8000a2e:	f003 fc43 	bl	80042b8 <getKeyPressed>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == INSERIR)
 8000a38:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000a3c:	2b49      	cmp	r3, #73	; 0x49
 8000a3e:	d11b      	bne.n	8000a78 <configStateMachine+0x7d4>
                {
                	resetKeyPressed();
 8000a40:	f003 fc46 	bl	80042d0 <resetKeyPressed>
                    setUserIntervalSeries(&index);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 f864 	bl	8001b16 <setUserIntervalSeries>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f002 fe92 	bl	8003778 <getNextSub>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a5c:	70da      	strb	r2, [r3, #3]
 8000a5e:	e0ea      	b.n	8000c36 <configStateMachine+0x992>
 8000a60:	20000078 	.word	0x20000078
 8000a64:	0800b798 	.word	0x0800b798
 8000a68:	2000007c 	.word	0x2000007c
 8000a6c:	20000080 	.word	0x20000080
 8000a70:	20000084 	.word	0x20000084
 8000a74:	20000088 	.word	0x20000088
                }
                else if(key == AVANCAR)
 8000a78:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000a7c:	2b41      	cmp	r3, #65	; 0x41
 8000a7e:	d108      	bne.n	8000a92 <configStateMachine+0x7ee>
				{
					resetKeyPressed();
 8000a80:	f003 fc26 	bl	80042d0 <resetKeyPressed>
					indexColumn(&index,2);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fd10 	bl	80014b0 <indexColumn>
 8000a90:	e0d1      	b.n	8000c36 <configStateMachine+0x992>
				}
                else if(key == CONFIRMAR)
 8000a92:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000a96:	2b43      	cmp	r3, #67	; 0x43
 8000a98:	f040 80cd 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 8000a9c:	f003 fc18 	bl	80042d0 <resetKeyPressed>
                    index = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000aa4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000aa8:	f107 030f 	add.w	r3, r7, #15
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 f9e0 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8000ab4:	200b      	movs	r0, #11
 8000ab6:	f002 fe5f 	bl	8003778 <getNextSub>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ac2:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000ac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ac8:	3303      	adds	r3, #3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fe66 	bl	800379c <setSelectSub>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ad8:	705a      	strb	r2, [r3, #1]
                }

            break;
 8000ada:	e0ac      	b.n	8000c36 <configStateMachine+0x992>

            case TAPETE_ON:
                updateUserMsg(0,0,intapeteUserMsg,&displayUpdateStatus);
 8000adc:	4b5b      	ldr	r3, [pc, #364]	; (8000c4c <configStateMachine+0x9a8>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	f107 030f 	add.w	r3, r7, #15
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f001 f9a6 	bl	8001e38 <updateUserMsg>
                key = getKeyPressed();
 8000aec:	f003 fbe4 	bl	80042b8 <getKeyPressed>
 8000af0:	4603      	mov	r3, r0
 8000af2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == AVANCAR)
 8000af6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000afa:	2b41      	cmp	r3, #65	; 0x41
 8000afc:	d112      	bne.n	8000b24 <configStateMachine+0x880>
                {
                	resetKeyPressed();
 8000afe:	f003 fbe7 	bl	80042d0 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000b02:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b06:	f107 030f 	add.w	r3, r7, #15
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 f9b1 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_OFF);
 8000b12:	200c      	movs	r0, #12
 8000b14:	f002 fe30 	bl	8003778 <getNextSub>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b20:	70da      	strb	r2, [r3, #3]
 8000b22:	e088      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 8000b24:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000b28:	2b43      	cmp	r3, #67	; 0x43
 8000b2a:	f040 8084 	bne.w	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 8000b2e:	f003 fbcf 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000b32:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b36:	f107 030f 	add.w	r3, r7, #15
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 f999 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b46:	3303      	adds	r3, #3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fe27 	bl	800379c <setSelectSub>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b56:	705a      	strb	r2, [r3, #1]
                    ptr_userConfiguration->userSelectTapete = TRUE;
 8000b58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	751a      	strb	r2, [r3, #20]
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 8000b60:	200d      	movs	r0, #13
 8000b62:	f002 fe09 	bl	8003778 <getNextSub>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b6e:	70da      	strb	r2, [r3, #3]
                }
                break;
 8000b70:	e061      	b.n	8000c36 <configStateMachine+0x992>

            case TAPETE_OFF:
                updateUserMsg(0,0,outtapeteUserMsg,&displayUpdateStatus);
 8000b72:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <configStateMachine+0x9ac>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	f107 030f 	add.w	r3, r7, #15
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f001 f95b 	bl	8001e38 <updateUserMsg>
                key = getKeyPressed();
 8000b82:	f003 fb99 	bl	80042b8 <getKeyPressed>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                if(key == AVANCAR)
 8000b8c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000b90:	2b41      	cmp	r3, #65	; 0x41
 8000b92:	d112      	bne.n	8000bba <configStateMachine+0x916>
                {
                	resetKeyPressed();
 8000b94:	f003 fb9c 	bl	80042d0 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000b98:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b9c:	f107 030f 	add.w	r3, r7, #15
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 f966 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8000ba8:	200b      	movs	r0, #11
 8000baa:	f002 fde5 	bl	8003778 <getNextSub>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bb6:	70da      	strb	r2, [r3, #3]
 8000bb8:	e03d      	b.n	8000c36 <configStateMachine+0x992>
                }
                else if(key == CONFIRMAR)
 8000bba:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000bbe:	2b43      	cmp	r3, #67	; 0x43
 8000bc0:	d139      	bne.n	8000c36 <configStateMachine+0x992>
                {
                	resetKeyPressed();
 8000bc2:	f003 fb85 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000bc6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000bca:	f107 030f 	add.w	r3, r7, #15
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 f94f 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bda:	3303      	adds	r3, #3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fddd 	bl	800379c <setSelectSub>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bea:	705a      	strb	r2, [r3, #1]
                    ptr_userConfiguration->userSelectTapete = FALSE;
 8000bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	751a      	strb	r2, [r3, #20]
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 8000bf4:	200d      	movs	r0, #13
 8000bf6:	f002 fdbf 	bl	8003778 <getNextSub>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c02:	70da      	strb	r2, [r3, #3]
                }
                break;
 8000c04:	e017      	b.n	8000c36 <configStateMachine+0x992>

            case SAVE_CONFIGS:
                subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f002 fdb6 	bl	8003778 <getNextSub>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c14:	70da      	strb	r2, [r3, #3]
                setInsertData(ptr_userConfiguration);
 8000c16:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8000c1a:	f002 fdd3 	bl	80037c4 <setInsertData>
                readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000c1e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c22:	f107 030f 	add.w	r3, r7, #15
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 f923 	bl	8001e74 <readyUserInterface>
                key = MENU;
 8000c2e:	234d      	movs	r3, #77	; 0x4d
 8000c30:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                break;
 8000c34:	bf00      	nop
    while(key != MENU)
 8000c36:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000c3a:	2b4d      	cmp	r3, #77	; 0x4d
 8000c3c:	f47f ab52 	bne.w	80002e4 <configStateMachine+0x40>
        }
    }
}
 8000c40:	bf00      	nop
 8000c42:	4618      	mov	r0, r3
 8000c44:	37a0      	adds	r7, #160	; 0xa0
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000008c 	.word	0x2000008c
 8000c50:	20000090 	.word	0x20000090

08000c54 <consultStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char consultStateMachine(struct Menu* subMenu)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuTesteConsultar = subMenu;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char* ptr_consultTestString;
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    struct results* ptr_structConsultResult;
    unsigned char selectedUserTest = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char testSamples=0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    unsigned char cursorPosition[2] = {0,0};
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	81bb      	strh	r3, [r7, #12]
    short index = 2; //(000 MENU)
 8000c70:	2302      	movs	r3, #2
 8000c72:	817b      	strh	r3, [r7, #10]
    unsigned char key = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    static unsigned char results = 0;
    unsigned char displayUpdateStatus = IDDLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	727b      	strb	r3, [r7, #9]

    while(key != MENU)
 8000c7e:	bf00      	nop
 8000c80:	e1a0      	b.n	8000fc4 <consultStateMachine+0x370>
    {
        switch(subMenuTesteConsultar->menuState)
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	78db      	ldrb	r3, [r3, #3]
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	f200 819c 	bhi.w	8000fc4 <consultStateMachine+0x370>
 8000c8c:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <consultStateMachine+0x40>)
 8000c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000ca5 	.word	0x08000ca5
 8000c98:	08000cb5 	.word	0x08000cb5
 8000c9c:	08000d6b 	.word	0x08000d6b
 8000ca0:	08000f25 	.word	0x08000f25
        {
            case IDDLE:
                subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f002 fd67 	bl	8003778 <getNextSub>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	70da      	strb	r2, [r3, #3]
            break;
 8000cb2:	e187      	b.n	8000fc4 <consultStateMachine+0x370>

            case CONSULTA_TESTE:
                updateUserMsg(0,0,consultTestUserMsg,&displayUpdateStatus);
 8000cb4:	4bc8      	ldr	r3, [pc, #800]	; (8000fd8 <consultStateMachine+0x384>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	f107 0309 	add.w	r3, r7, #9
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f8ba 	bl	8001e38 <updateUserMsg>
                ptr_consultTestString = getNumTestString();
 8000cc4:	f000 fdb6 	bl	8001834 <getNumTestString>
 8000cc8:	62f8      	str	r0, [r7, #44]	; 0x2c
                printDataDisplay(0,1,ptr_consultTestString);
 8000cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ccc:	2101      	movs	r1, #1
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f001 ffe2 	bl	8002c98 <printDataDisplay>
                updateDataDisplay(index,1);
 8000cd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 fff6 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 8000ce0:	f003 faea 	bl	80042b8 <getKeyPressed>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if(key == INSERIR)
 8000cea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000cee:	2b49      	cmp	r3, #73	; 0x49
 8000cf0:	d10e      	bne.n	8000d10 <consultStateMachine+0xbc>
                {
                	resetKeyPressed();
 8000cf2:	f003 faed 	bl	80042d0 <resetKeyPressed>
                    setUserNumTest(&index);
 8000cf6:	f107 030a 	add.w	r3, r7, #10
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 ff77 	bl	8001bee <setUserNumTest>
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f002 fd39 	bl	8003778 <getNextSub>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	70da      	strb	r2, [r3, #3]
 8000d0e:	e159      	b.n	8000fc4 <consultStateMachine+0x370>
                }
                else if(key == AVANCAR)
 8000d10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d14:	2b41      	cmp	r3, #65	; 0x41
 8000d16:	d108      	bne.n	8000d2a <consultStateMachine+0xd6>
                {
                	resetKeyPressed();
 8000d18:	f003 fada 	bl	80042d0 <resetKeyPressed>
                    indexChange(&index,2);
 8000d1c:	f107 030a 	add.w	r3, r7, #10
 8000d20:	2102      	movs	r1, #2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fc4c 	bl	80015c0 <indexChange>
 8000d28:	e14c      	b.n	8000fc4 <consultStateMachine+0x370>
                }
                else if(key == CONFIRMAR)
 8000d2a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d2e:	2b43      	cmp	r3, #67	; 0x43
 8000d30:	f040 8148 	bne.w	8000fc4 <consultStateMachine+0x370>
                {
                	resetKeyPressed();
 8000d34:	f003 facc 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000d38:	f107 020c 	add.w	r2, r7, #12
 8000d3c:	f107 0309 	add.w	r3, r7, #9
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 f896 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f002 fd15 	bl	8003778 <getNextSub>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	3303      	adds	r3, #3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fd1e 	bl	800379c <setSelectSub>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	705a      	strb	r2, [r3, #1]
                }
            break;
 8000d68:	e12c      	b.n	8000fc4 <consultStateMachine+0x370>

            case RESULT_TESTE:
            	updateUserMsg(0,0,consultTestUserMsg,&displayUpdateStatus);
 8000d6a:	4b9b      	ldr	r3, [pc, #620]	; (8000fd8 <consultStateMachine+0x384>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	f107 0309 	add.w	r3, r7, #9
 8000d72:	2100      	movs	r1, #0
 8000d74:	2000      	movs	r0, #0
 8000d76:	f001 f85f 	bl	8001e38 <updateUserMsg>
                selectedUserTest = stringToInt(ptr_consultTestString);
 8000d7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d7c:	f000 fbe5 	bl	800154a <stringToInt>
 8000d80:	4603      	mov	r3, r0
 8000d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                ptr_structConsultResult = load_data(selectedUserTest);
 8000d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fb97 	bl	80034be <load_data>
 8000d90:	4603      	mov	r3, r0
 8000d92:	61fb      	str	r3, [r7, #28]

                if(testSamples<(ptr_structConsultResult->resultTestAcquiredSamples))
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f080 8085 	bcs.w	8000eac <consultStateMachine+0x258>
                {
                	resetKeyPressed();
 8000da2:	f003 fa95 	bl	80042d0 <resetKeyPressed>
                    updateUserMsg(0,0,"Amostra",&displayUpdateStatus);
 8000da6:	f107 0309 	add.w	r3, r7, #9
 8000daa:	4a8c      	ldr	r2, [pc, #560]	; (8000fdc <consultStateMachine+0x388>)
 8000dac:	2100      	movs	r1, #0
 8000dae:	2000      	movs	r0, #0
 8000db0:	f001 f842 	bl	8001e38 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000db4:	f107 020c 	add.w	r2, r7, #12
 8000db8:	f107 0309 	add.w	r3, r7, #9
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 f858 	bl	8001e74 <readyUserInterface>
                    ptr_sampleString = param_1_toString(&ptr_structConsultResult->Measurement[testSamples].sampleNum);
 8000dc4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	69fa      	ldr	r2, [r7, #28]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fd64 	bl	80018a4 <param_1_toString>
 8000ddc:	61b8      	str	r0, [r7, #24]
                    updateUserMsg(0,1,ptr_sampleString,&displayUpdateStatus);
 8000dde:	f107 0309 	add.w	r3, r7, #9
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	2101      	movs	r1, #1
 8000de6:	2000      	movs	r0, #0
 8000de8:	f001 f826 	bl	8001e38 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000dec:	f107 020c 	add.w	r2, r7, #12
 8000df0:	f107 0309 	add.w	r3, r7, #9
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 f83c 	bl	8001e74 <readyUserInterface>

                    updateUserMsg(0,0,"Tempo de Voo",&displayUpdateStatus);
 8000dfc:	f107 0309 	add.w	r3, r7, #9
 8000e00:	4a77      	ldr	r2, [pc, #476]	; (8000fe0 <consultStateMachine+0x38c>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	2000      	movs	r0, #0
 8000e06:	f001 f817 	bl	8001e38 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000e0a:	f107 020c 	add.w	r2, r7, #12
 8000e0e:	f107 0309 	add.w	r3, r7, #9
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 f82d 	bl	8001e74 <readyUserInterface>
                    ptr_vooTimeString = param_2_toString(&ptr_structConsultResult->Measurement[testSamples].uiVooTime);
 8000e1a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000e1e:	4613      	mov	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	4413      	add	r3, r2
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fd4d 	bl	80018cc <param_2_toString>
 8000e32:	6178      	str	r0, [r7, #20]
                    updateUserMsg(0,1,ptr_vooTimeString,&displayUpdateStatus);
 8000e34:	f107 0309 	add.w	r3, r7, #9
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f000 fffb 	bl	8001e38 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000e42:	f107 020c 	add.w	r2, r7, #12
 8000e46:	f107 0309 	add.w	r3, r7, #9
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 f811 	bl	8001e74 <readyUserInterface>

                    updateUserMsg(0,0,"Altura do salto",&displayUpdateStatus);
 8000e52:	f107 0309 	add.w	r3, r7, #9
 8000e56:	4a63      	ldr	r2, [pc, #396]	; (8000fe4 <consultStateMachine+0x390>)
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 ffec 	bl	8001e38 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000e60:	f107 020c 	add.w	r2, r7, #12
 8000e64:	f107 0309 	add.w	r3, r7, #9
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 f802 	bl	8001e74 <readyUserInterface>
                    ptr_alturaString = param_3_toString(&ptr_structConsultResult->Measurement[testSamples].uiSoloTime);
 8000e70:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000e74:	4613      	mov	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	3308      	adds	r3, #8
 8000e7e:	69fa      	ldr	r2, [r7, #28]
 8000e80:	4413      	add	r3, r2
 8000e82:	3304      	adds	r3, #4
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fd35 	bl	80018f4 <param_3_toString>
 8000e8a:	6138      	str	r0, [r7, #16]
                    updateUserMsg(0,1,ptr_alturaString,&displayUpdateStatus);
 8000e8c:	f107 0309 	add.w	r3, r7, #9
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	2101      	movs	r1, #1
 8000e94:	2000      	movs	r0, #0
 8000e96:	f000 ffcf 	bl	8001e38 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000e9a:	f107 020c 	add.w	r2, r7, #12
 8000e9e:	f107 0309 	add.w	r3, r7, #9
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 ffe5 	bl	8001e74 <readyUserInterface>
 8000eaa:	e004      	b.n	8000eb6 <consultStateMachine+0x262>
                }
                else  printDataDisplay(0,0,"VAZIO");
 8000eac:	4a4e      	ldr	r2, [pc, #312]	; (8000fe8 <consultStateMachine+0x394>)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f001 fef1 	bl	8002c98 <printDataDisplay>

                key = getKeyPressed();
 8000eb6:	f003 f9ff 	bl	80042b8 <getKeyPressed>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == AVANCAR)
 8000ec0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000ec4:	2b41      	cmp	r3, #65	; 0x41
 8000ec6:	d117      	bne.n	8000ef8 <consultStateMachine+0x2a4>
                {
                	resetKeyPressed();
 8000ec8:	f003 fa02 	bl	80042d0 <resetKeyPressed>
                    testSamples++;
 8000ecc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if(testSamples == ptr_structConsultResult->resultTestAcquiredSamples) testSamples = 0;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	785b      	ldrb	r3, [r3, #1]
 8000eda:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d102      	bne.n	8000ee8 <consultStateMachine+0x294>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8000ee8:	2002      	movs	r0, #2
 8000eea:	f002 fc45 	bl	8003778 <getNextSub>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	70da      	strb	r2, [r3, #3]
 8000ef6:	e065      	b.n	8000fc4 <consultStateMachine+0x370>
                }
                else if(key == PARAR)
 8000ef8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000efc:	2b50      	cmp	r3, #80	; 0x50
 8000efe:	d161      	bne.n	8000fc4 <consultStateMachine+0x370>
                {
                	resetKeyPressed();
 8000f00:	f003 f9e6 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000f04:	f107 020c 	add.w	r2, r7, #12
 8000f08:	f107 0309 	add.w	r3, r7, #9
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 ffb0 	bl	8001e74 <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(EXPORTAR);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f002 fc2f 	bl	8003778 <getNextSub>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	70da      	strb	r2, [r3, #3]
                }
                break;
 8000f22:	e04f      	b.n	8000fc4 <consultStateMachine+0x370>

            case EXPORTAR:
                updateUserMsg(0,0,consultExportUserMsg,&displayUpdateStatus);
 8000f24:	4b31      	ldr	r3, [pc, #196]	; (8000fec <consultStateMachine+0x398>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	f107 0309 	add.w	r3, r7, #9
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 ff82 	bl	8001e38 <updateUserMsg>
                key = getKeyPressed();
 8000f34:	f003 f9c0 	bl	80042b8 <getKeyPressed>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == PARAR)
 8000f3e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f42:	2b50      	cmp	r3, #80	; 0x50
 8000f44:	d114      	bne.n	8000f70 <consultStateMachine+0x31c>
                {
                	resetKeyPressed();
 8000f46:	f003 f9c3 	bl	80042d0 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000f4a:	f107 020c 	add.w	r2, r7, #12
 8000f4e:	f107 0309 	add.w	r3, r7, #9
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 ff8d 	bl	8001e74 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8000f5a:	234d      	movs	r3, #77	; 0x4d
 8000f5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f002 fc09 	bl	8003778 <getNextSub>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	70da      	strb	r2, [r3, #3]
 8000f6e:	e028      	b.n	8000fc2 <consultStateMachine+0x36e>
                }
                else if(key == CONFIRMAR)
 8000f70:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f74:	2b43      	cmp	r3, #67	; 0x43
 8000f76:	d124      	bne.n	8000fc2 <consultStateMachine+0x36e>
                {
                    //display
                	resetKeyPressed();
 8000f78:	f003 f9aa 	bl	80042d0 <resetKeyPressed>
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <consultStateMachine+0x39c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	f107 0309 	add.w	r3, r7, #9
 8000f84:	2100      	movs	r1, #0
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 ff56 	bl	8001e38 <updateUserMsg>
                    subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	3303      	adds	r3, #3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fc03 	bl	800379c <setSelectSub>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f002 fbea 	bl	8003778 <getNextSub>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	70da      	strb	r2, [r3, #3]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000fac:	f107 020c 	add.w	r2, r7, #12
 8000fb0:	f107 0309 	add.w	r3, r7, #9
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 ff5c 	bl	8001e74 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8000fbc:	234d      	movs	r3, #77	; 0x4d
 8000fbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                }
                break;
 8000fc2:	bf00      	nop
    while(key != MENU)
 8000fc4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fc8:	2b4d      	cmp	r3, #77	; 0x4d
 8000fca:	f47f ae5a 	bne.w	8000c82 <consultStateMachine+0x2e>
        }
    }
}
 8000fce:	bf00      	nop
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3730      	adds	r7, #48	; 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000054 	.word	0x20000054
 8000fdc:	0800b7a0 	.word	0x0800b7a0
 8000fe0:	0800b7a8 	.word	0x0800b7a8
 8000fe4:	0800b7b8 	.word	0x0800b7b8
 8000fe8:	0800b7c8 	.word	0x0800b7c8
 8000fec:	20000058 	.word	0x20000058
 8000ff0:	2000005c 	.word	0x2000005c

08000ff4 <getUserSelectTapete>:
{
    return myData.userSelectSensorChannel;
}

unsigned char getUserSelectTapete()
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
    return myData.userSelectTapete;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <getUserSelectTapete+0x10>)
 8000ffa:	7d1b      	ldrb	r3, [r3, #20]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	200001bc 	.word	0x200001bc

08001008 <getTimeStruct>:

unsigned char* getTimeStruct()
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
    return insertTime;
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <getTimeStruct+0x10>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000000 	.word	0x20000000

0800101c <getIntervalTimeStruct>:

unsigned char* getIntervalTimeStruct()
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
    return intervalTime;
 8001020:	4b02      	ldr	r3, [pc, #8]	; (800102c <getIntervalTimeStruct+0x10>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	20000004 	.word	0x20000004

08001030 <getMassArray>:

unsigned char* getMassArray()
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
    return massArray;
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <getMassArray+0x10>)
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	2000035c 	.word	0x2000035c

08001044 <getOverMassArray>:

unsigned char* getOverMassArray()
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
    return overMassArray;
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <getOverMassArray+0x10>)
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000364 	.word	0x20000364

08001058 <getAltMinArray>:

unsigned char* getAltMinArray()
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
    return altMinArray;
 800105c:	4b02      	ldr	r3, [pc, #8]	; (8001068 <getAltMinArray+0x10>)
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2000036c 	.word	0x2000036c

0800106c <getAltMaxArray>:

unsigned char* getAltMaxArray()
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
    return altMaxArray;
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <getAltMaxArray+0x10>)
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000370 	.word	0x20000370

08001080 <getNumSaltosArray>:

unsigned char* getNumSaltosArray()
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
    return numSaltosArray;
 8001084:	4b02      	ldr	r3, [pc, #8]	; (8001090 <getNumSaltosArray+0x10>)
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000374 	.word	0x20000374

08001094 <getTypeJumpArray>:
//{
//    return intervalSaltosArray;
//}

unsigned char* getTypeJumpArray()
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
    return JumpTypeArray;
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <getTypeJumpArray+0x10>)
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000037c 	.word	0x2000037c

080010a8 <getAltDJArray>:

unsigned char* getAltDJArray()
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
    return altDJArray;
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <getAltDJArray+0x10>)
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000378 	.word	0x20000378

080010bc <getNumSeriesArray>:

unsigned char* getNumSeriesArray()
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
    return numSeriesArray;
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <getNumSeriesArray+0x10>)
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000380 	.word	0x20000380

080010d0 <getIntervalSeriesArray>:

unsigned char* getIntervalSeriesArray()
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
    return intervalSeriesArray;
 80010d4:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <getIntervalSeriesArray+0x10>)
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000384 	.word	0x20000384

080010e4 <getNumTestArray>:

unsigned char* getNumTestArray()
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
    return numTestArray;
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <getNumTestArray+0x10>)
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008

080010f8 <getEraseTestArray>:

unsigned char* getEraseTestArray()
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
    return selectEraseArray;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <getEraseTestArray+0x10>)
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000388 	.word	0x20000388

0800110c <getUserConfigStruct>:

unsigned char* getUserConfigStruct() //VERIFICAR SE VOU USAR
{
 800110c:	b4b0      	push	{r4, r5, r7}
 800110e:	af00      	add	r7, sp, #0
    static struct dataInsert configStruct;
    configStruct = myData;
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <getUserConfigStruct+0x24>)
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <getUserConfigStruct+0x28>)
 8001114:	4614      	mov	r4, r2
 8001116:	461d      	mov	r5, r3
 8001118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001120:	e884 0003 	stmia.w	r4, {r0, r1}
    return &configStruct;
 8001124:	4b02      	ldr	r3, [pc, #8]	; (8001130 <getUserConfigStruct+0x24>)
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	bcb0      	pop	{r4, r5, r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000038c 	.word	0x2000038c
 8001134:	200001bc 	.word	0x200001bc

08001138 <setUserInputConfigData>:

unsigned char setUserInputConfigData(struct dataInsert* dataToInsert)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    myData.userTest = dataToInsert->userTest;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <setUserInputConfigData+0x94>)
 8001146:	701a      	strb	r2, [r3, #0]
    myData.userTime = dataToInsert->userTime;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <setUserInputConfigData+0x94>)
 800114e:	6053      	str	r3, [r2, #4]
    myData.userMass = dataToInsert->userMass;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7a1a      	ldrb	r2, [r3, #8]
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <setUserInputConfigData+0x94>)
 8001156:	721a      	strb	r2, [r3, #8]
    myData.userOverMass = dataToInsert->userOverMass;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7a5a      	ldrb	r2, [r3, #9]
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <setUserInputConfigData+0x94>)
 800115e:	725a      	strb	r2, [r3, #9]
    myData.userConsultTest = dataToInsert->userConsultTest;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7a9a      	ldrb	r2, [r3, #10]
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <setUserInputConfigData+0x94>)
 8001166:	729a      	strb	r2, [r3, #10]
    myData.userAlturaMin = dataToInsert->userAlturaMin;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7ada      	ldrb	r2, [r3, #11]
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <setUserInputConfigData+0x94>)
 800116e:	72da      	strb	r2, [r3, #11]
    myData.userAlturaMax = dataToInsert->userAlturaMax;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7b1a      	ldrb	r2, [r3, #12]
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <setUserInputConfigData+0x94>)
 8001176:	731a      	strb	r2, [r3, #12]
    myData.userNumSaltos = dataToInsert->userNumSaltos;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7b5a      	ldrb	r2, [r3, #13]
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <setUserInputConfigData+0x94>)
 800117e:	735a      	strb	r2, [r3, #13]
    myData.userIntervalSaltos = dataToInsert->userIntervalSaltos;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7b9a      	ldrb	r2, [r3, #14]
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <setUserInputConfigData+0x94>)
 8001186:	739a      	strb	r2, [r3, #14]
    myData.userCMJ = dataToInsert->userCMJ;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7bda      	ldrb	r2, [r3, #15]
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <setUserInputConfigData+0x94>)
 800118e:	73da      	strb	r2, [r3, #15]
    myData.userAlturaDJ = dataToInsert->userAlturaDJ;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7c1a      	ldrb	r2, [r3, #16]
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <setUserInputConfigData+0x94>)
 8001196:	741a      	strb	r2, [r3, #16]
    myData.userNumSeries = dataToInsert->userNumSeries;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7c5a      	ldrb	r2, [r3, #17]
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <setUserInputConfigData+0x94>)
 800119e:	745a      	strb	r2, [r3, #17]
    myData.userIntervalSeries = dataToInsert->userIntervalSeries;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7c9a      	ldrb	r2, [r3, #18]
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <setUserInputConfigData+0x94>)
 80011a6:	749a      	strb	r2, [r3, #18]
    myData.userCommConfig = dataToInsert->userCommConfig;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7cda      	ldrb	r2, [r3, #19]
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <setUserInputConfigData+0x94>)
 80011ae:	74da      	strb	r2, [r3, #19]
    myData.userSelectTapete = dataToInsert->userSelectTapete;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7d1a      	ldrb	r2, [r3, #20]
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <setUserInputConfigData+0x94>)
 80011b6:	751a      	strb	r2, [r3, #20]
    myData.userSelectSensorChannel = dataToInsert->userSelectSensorChannel;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7d5a      	ldrb	r2, [r3, #21]
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <setUserInputConfigData+0x94>)
 80011be:	755a      	strb	r2, [r3, #21]
}
 80011c0:	bf00      	nop
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	200001bc 	.word	0x200001bc

080011d0 <getUserResultData>:

unsigned char* getUserResultData(unsigned char numTest)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
    return &myResults[numTest-1];
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	3b01      	subs	r3, #1
 80011de:	019b      	lsls	r3, r3, #6
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <getUserResultData+0x20>)
 80011e2:	4413      	add	r3, r2
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	200001d4 	.word	0x200001d4

080011f4 <getResultTestNumber>:

unsigned char getResultTestNumber()
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
    return numberTest;
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <getResultTestNumber+0x10>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	20000389 	.word	0x20000389

08001208 <setResultTestNumber>:
{
     myResults[numTest].thereAreData = TRUE;
}

unsigned char setResultTestNumber()
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
     numberTest++;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <setResultTestNumber+0x1c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <setResultTestNumber+0x1c>)
 8001216:	701a      	strb	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000389 	.word	0x20000389

08001228 <setUserResultData>:

unsigned char setUserResultData(struct results* structDataResult, unsigned char numTest, unsigned char numSample)
{
 8001228:	b490      	push	{r4, r7}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
 8001234:	4613      	mov	r3, r2
 8001236:	70bb      	strb	r3, [r7, #2]
    myResults[numTest].resultTestNum = numTest+1;
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	3201      	adds	r2, #1
 800123e:	b2d1      	uxtb	r1, r2
 8001240:	4a31      	ldr	r2, [pc, #196]	; (8001308 <setUserResultData+0xe0>)
 8001242:	019b      	lsls	r3, r3, #6
 8001244:	4413      	add	r3, r2
 8001246:	460a      	mov	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
    myResults[numTest].resultTestAcquiredSamples = numSample;
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <setUserResultData+0xe0>)
 800124e:	019b      	lsls	r3, r3, #6
 8001250:	4413      	add	r3, r2
 8001252:	3301      	adds	r3, #1
 8001254:	78ba      	ldrb	r2, [r7, #2]
 8001256:	701a      	strb	r2, [r3, #0]
    myResults[numTest].thereAreData = TRUE;
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <setUserResultData+0xe0>)
 800125c:	019b      	lsls	r3, r3, #6
 800125e:	4413      	add	r3, r2
 8001260:	3302      	adds	r3, #2
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 8001266:	2300      	movs	r3, #0
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	e042      	b.n	80012f2 <setUserResultData+0xca>
    {
        myResults[numTest].Measurement[i].sampleNum = structDataResult->Measurement[i].sampleNum;
 800126c:	7bf9      	ldrb	r1, [r7, #15]
 800126e:	78f8      	ldrb	r0, [r7, #3]
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	687c      	ldr	r4, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	440b      	add	r3, r1
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4423      	add	r3, r4
 800127e:	3304      	adds	r3, #4
 8001280:	781c      	ldrb	r4, [r3, #0]
 8001282:	4921      	ldr	r1, [pc, #132]	; (8001308 <setUserResultData+0xe0>)
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	0182      	lsls	r2, r0, #6
 800128e:	4413      	add	r3, r2
 8001290:	440b      	add	r3, r1
 8001292:	3304      	adds	r3, #4
 8001294:	4622      	mov	r2, r4
 8001296:	701a      	strb	r2, [r3, #0]
        myResults[numTest].Measurement[i].uiVooTime = structDataResult->Measurement[i].uiVooTime;
 8001298:	7bf9      	ldrb	r1, [r7, #15]
 800129a:	78f8      	ldrb	r0, [r7, #3]
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	687c      	ldr	r4, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	440b      	add	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4423      	add	r3, r4
 80012aa:	3308      	adds	r3, #8
 80012ac:	6819      	ldr	r1, [r3, #0]
 80012ae:	4c16      	ldr	r4, [pc, #88]	; (8001308 <setUserResultData+0xe0>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	0182      	lsls	r2, r0, #6
 80012ba:	4413      	add	r3, r2
 80012bc:	4423      	add	r3, r4
 80012be:	3308      	adds	r3, #8
 80012c0:	6019      	str	r1, [r3, #0]
        myResults[numTest].Measurement[i].uiSoloTime = structDataResult->Measurement[i].uiSoloTime;
 80012c2:	7bf9      	ldrb	r1, [r7, #15]
 80012c4:	78f8      	ldrb	r0, [r7, #3]
 80012c6:	7bfa      	ldrb	r2, [r7, #15]
 80012c8:	687c      	ldr	r4, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	440b      	add	r3, r1
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4423      	add	r3, r4
 80012d4:	330c      	adds	r3, #12
 80012d6:	6819      	ldr	r1, [r3, #0]
 80012d8:	4c0b      	ldr	r4, [pc, #44]	; (8001308 <setUserResultData+0xe0>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	0182      	lsls	r2, r0, #6
 80012e4:	4413      	add	r3, r2
 80012e6:	4423      	add	r3, r4
 80012e8:	330c      	adds	r3, #12
 80012ea:	6019      	str	r1, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	3301      	adds	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	7bfa      	ldrb	r2, [r7, #15]
 80012f4:	78bb      	ldrb	r3, [r7, #2]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d3b8      	bcc.n	800126c <setUserResultData+0x44>
    }
}
 80012fa:	bf00      	nop
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bc90      	pop	{r4, r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200001d4 	.word	0x200001d4

0800130c <resetResultStruct>:

unsigned char resetResultStruct(struct results* structToReset) //verificar se vai precisar
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    structToReset->resultTestNum = 0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
    structToReset->resultTestAcquiredSamples = 0;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	705a      	strb	r2, [r3, #1]
    structToReset->thereAreData = FALSE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	709a      	strb	r2, [r3, #2]
    for(unsigned char i = 0;i<MEASUREMENT_SIZE;i++)
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	e020      	b.n	800136e <resetResultStruct+0x62>
    {
        structToReset->Measurement[i].sampleNum = 0;
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	3304      	adds	r3, #4
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
        structToReset->Measurement[i].uiVooTime = 0;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	3308      	adds	r3, #8
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
        structToReset->Measurement[i].uiSoloTime = 0;
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	330c      	adds	r3, #12
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
    for(unsigned char i = 0;i<MEASUREMENT_SIZE;i++)
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3301      	adds	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b04      	cmp	r3, #4
 8001372:	d9db      	bls.n	800132c <resetResultStruct+0x20>
    }

}
 8001374:	bf00      	nop
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <resetConfigStruct>:

unsigned char resetConfigStruct(struct dataInsert* structToReset)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    structToReset->userTest = 0;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
    structToReset->userAlturaDJ = 0;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	741a      	strb	r2, [r3, #16]
    structToReset->userAlturaMax = 0;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	731a      	strb	r2, [r3, #12]
    structToReset->userAlturaMin = 0;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	72da      	strb	r2, [r3, #11]
    structToReset->userCMJ = 0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	73da      	strb	r2, [r3, #15]
    structToReset->userCommConfig = 0;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	74da      	strb	r2, [r3, #19]
    structToReset->userConsultTest = 0;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	729a      	strb	r2, [r3, #10]
    structToReset->userIntervalSaltos = 0;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	739a      	strb	r2, [r3, #14]
    structToReset->userIntervalSeries = 0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	749a      	strb	r2, [r3, #18]
    structToReset->userMass = 0;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	721a      	strb	r2, [r3, #8]
    structToReset->userNumSaltos = 0;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	735a      	strb	r2, [r3, #13]
    structToReset->userNumSeries = 0;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	745a      	strb	r2, [r3, #17]
    structToReset->userOverMass = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	725a      	strb	r2, [r3, #9]
    structToReset->userSelectSensorChannel = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	755a      	strb	r2, [r3, #21]
    structToReset->userSelectTapete = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	751a      	strb	r2, [r3, #20]
    structToReset->userTime = 0;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]

}
 80013e8:	bf00      	nop
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <resetMyResults>:

void resetMyResults()
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
    numberTest = 0;
 80013fa:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <resetMyResults+0xb4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
    for(unsigned char test=0;test<TEST_SIZE;test++)
 8001400:	2300      	movs	r3, #0
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	e046      	b.n	8001494 <resetMyResults+0xa0>
    {
        myResults[test].resultTestNum = 0;
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a28      	ldr	r2, [pc, #160]	; (80014ac <resetMyResults+0xb8>)
 800140a:	019b      	lsls	r3, r3, #6
 800140c:	4413      	add	r3, r2
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
        myResults[test].resultTestAcquiredSamples = 0;
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4a25      	ldr	r2, [pc, #148]	; (80014ac <resetMyResults+0xb8>)
 8001416:	019b      	lsls	r3, r3, #6
 8001418:	4413      	add	r3, r2
 800141a:	3301      	adds	r3, #1
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
        myResults[test].thereAreData = FALSE;
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4a22      	ldr	r2, [pc, #136]	; (80014ac <resetMyResults+0xb8>)
 8001424:	019b      	lsls	r3, r3, #6
 8001426:	4413      	add	r3, r2
 8001428:	3302      	adds	r3, #2
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	e029      	b.n	8001488 <resetMyResults+0x94>
        {
            myResults[test].Measurement[sample].sampleNum = 0;
 8001434:	79f9      	ldrb	r1, [r7, #7]
 8001436:	481d      	ldr	r0, [pc, #116]	; (80014ac <resetMyResults+0xb8>)
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	018a      	lsls	r2, r1, #6
 8001444:	4413      	add	r3, r2
 8001446:	4403      	add	r3, r0
 8001448:	3304      	adds	r3, #4
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
            myResults[test].Measurement[sample].uiVooTime = 0;
 800144e:	79f9      	ldrb	r1, [r7, #7]
 8001450:	4816      	ldr	r0, [pc, #88]	; (80014ac <resetMyResults+0xb8>)
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	018a      	lsls	r2, r1, #6
 800145e:	4413      	add	r3, r2
 8001460:	4403      	add	r3, r0
 8001462:	3308      	adds	r3, #8
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
            myResults[test].Measurement[sample].uiSoloTime = 0;
 8001468:	79f9      	ldrb	r1, [r7, #7]
 800146a:	4810      	ldr	r0, [pc, #64]	; (80014ac <resetMyResults+0xb8>)
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	018a      	lsls	r2, r1, #6
 8001478:	4413      	add	r3, r2
 800147a:	4403      	add	r3, r0
 800147c:	330c      	adds	r3, #12
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b04      	cmp	r3, #4
 800148c:	d9d2      	bls.n	8001434 <resetMyResults+0x40>
    for(unsigned char test=0;test<TEST_SIZE;test++)
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	3301      	adds	r3, #1
 8001492:	71fb      	strb	r3, [r7, #7]
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b04      	cmp	r3, #4
 8001498:	d9b5      	bls.n	8001406 <resetMyResults+0x12>
        }

    }
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000389 	.word	0x20000389
 80014ac:	200001d4 	.word	0x200001d4

080014b0 <indexColumn>:
        *index = 0;
    }
}

unsigned char indexColumn(short* currentColumn, unsigned char size)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
    *currentColumn = *currentColumn -1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	3b01      	subs	r3, #1
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	801a      	strh	r2, [r3, #0]
    if(*currentColumn == 5) *currentColumn = *currentColumn -1;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d109      	bne.n	80014ec <indexColumn+0x3c>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	801a      	strh	r2, [r3, #0]
 80014ea:	e00d      	b.n	8001508 <indexColumn+0x58>
    else if(*currentColumn == 2) *currentColumn = *currentColumn -1;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d108      	bne.n	8001508 <indexColumn+0x58>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3b01      	subs	r3, #1
 8001500:	b29b      	uxth	r3, r3
 8001502:	b21a      	sxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	801a      	strh	r2, [r3, #0]
    if(*currentColumn <0)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150e:	2b00      	cmp	r3, #0
 8001510:	da03      	bge.n	800151a <indexColumn+0x6a>
    {
        *currentColumn = size;
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	801a      	strh	r2, [r3, #0]
    }
}
 800151a:	bf00      	nop
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <stringToLong>:

unsigned long stringToLong(unsigned char* string)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
    char *ptr;
    unsigned long int intTime = strtol(string,&ptr,10);
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	220a      	movs	r2, #10
 8001534:	4619      	mov	r1, r3
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f008 fbb8 	bl	8009cac <strtol>
 800153c:	4603      	mov	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]
    //fazer a convers�o de hhmmss para ms
    return intTime;
 8001540:	68fb      	ldr	r3, [r7, #12]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <stringToInt>:

unsigned int stringToInt(unsigned char* string)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
    char *ptr;
    unsigned int x = strtol(string,&ptr,10);
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	220a      	movs	r2, #10
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f008 fba6 	bl	8009cac <strtol>
 8001560:	4603      	mov	r3, r0
 8001562:	60fb      	str	r3, [r7, #12]
    return x;
 8001564:	68fb      	ldr	r3, [r7, #12]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <indexMass>:
    float x = strtof(string,NULL);
    return x;
}

unsigned char indexMass(short* index)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
    *index = *index -1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	b29b      	uxth	r3, r3
 800157e:	3b01      	subs	r3, #1
 8001580:	b29b      	uxth	r3, r3
 8001582:	b21a      	sxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	801a      	strh	r2, [r3, #0]
    if(*index == 3) *index = *index -1;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d108      	bne.n	80015a4 <indexMass+0x36>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b29b      	uxth	r3, r3
 800159e:	b21a      	sxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da02      	bge.n	80015b4 <indexMass+0x46>
    {
        *index = 4;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2204      	movs	r2, #4
 80015b2:	801a      	strh	r2, [r3, #0]
    }
}
 80015b4:	bf00      	nop
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <indexChange>:

unsigned char indexChange(short* index, unsigned char size)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
    *index = *index - 1;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b21a      	sxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da03      	bge.n	80015f0 <indexChange+0x30>
    {
        *index = size;
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	801a      	strh	r2, [r3, #0]
    }
}
 80015f0:	bf00      	nop
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <getAltMinString>:

unsigned char* getAltMinString()
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af02      	add	r7, sp, #8
    unsigned char* altMinArray = getAltMinArray();
 8001602:	f7ff fd29 	bl	8001058 <getAltMinArray>
 8001606:	6078      	str	r0, [r7, #4]
    sprintf(altMinString,"%d%d%d",altMinArray[0],altMinArray[1],altMinArray[2]);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3301      	adds	r3, #1
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3302      	adds	r3, #2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	460b      	mov	r3, r1
 8001620:	4904      	ldr	r1, [pc, #16]	; (8001634 <getAltMinString+0x38>)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <getAltMinString+0x3c>)
 8001624:	f007 fd28 	bl	8009078 <siprintf>
    return altMinString;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <getAltMinString+0x3c>)
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	0800b7d0 	.word	0x0800b7d0
 8001638:	200003bc 	.word	0x200003bc

0800163c <getAltMaxString>:

unsigned char* getAltMaxString()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af02      	add	r7, sp, #8
    unsigned char* altMaxArray = getAltMaxArray();
 8001642:	f7ff fd13 	bl	800106c <getAltMaxArray>
 8001646:	6078      	str	r0, [r7, #4]
    sprintf(altMaxString,"%d%d%d",altMaxArray[0],altMaxArray[1],altMaxArray[2]);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3301      	adds	r3, #1
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3302      	adds	r3, #2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	460b      	mov	r3, r1
 8001660:	4904      	ldr	r1, [pc, #16]	; (8001674 <getAltMaxString+0x38>)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <getAltMaxString+0x3c>)
 8001664:	f007 fd08 	bl	8009078 <siprintf>
    return altMaxString;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <getAltMaxString+0x3c>)
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	0800b7d0 	.word	0x0800b7d0
 8001678:	200003c8 	.word	0x200003c8

0800167c <getNumSaltosString>:

unsigned char* getNumSaltosString()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af02      	add	r7, sp, #8
    unsigned char* numSaltosArray = getNumSaltosArray();
 8001682:	f7ff fcfd 	bl	8001080 <getNumSaltosArray>
 8001686:	6078      	str	r0, [r7, #4]
    sprintf(numSaltosString,"%d%d%d",numSaltosArray[0],numSaltosArray[1],numSaltosArray[2]);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3301      	adds	r3, #1
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3302      	adds	r3, #2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	460b      	mov	r3, r1
 80016a0:	4904      	ldr	r1, [pc, #16]	; (80016b4 <getNumSaltosString+0x38>)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <getNumSaltosString+0x3c>)
 80016a4:	f007 fce8 	bl	8009078 <siprintf>
    return numSaltosString;
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <getNumSaltosString+0x3c>)
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	0800b7d0 	.word	0x0800b7d0
 80016b8:	200003d4 	.word	0x200003d4

080016bc <getTypeJumpString>:

unsigned char* getTypeJumpString()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
    unsigned char* typeJumpArray = getTypeJumpArray();
 80016c2:	f7ff fce7 	bl	8001094 <getTypeJumpArray>
 80016c6:	6078      	str	r0, [r7, #4]
    sprintf(tipoSaltoString,"%d",typeJumpArray[0]);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4904      	ldr	r1, [pc, #16]	; (80016e0 <getTypeJumpString+0x24>)
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <getTypeJumpString+0x28>)
 80016d2:	f007 fcd1 	bl	8009078 <siprintf>
    return tipoSaltoString;
 80016d6:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <getTypeJumpString+0x28>)
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	0800b7d8 	.word	0x0800b7d8
 80016e4:	200003e0 	.word	0x200003e0

080016e8 <getAltDJString>:

unsigned char* getAltDJString()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
    unsigned char* altDJArray = getAltDJArray();
 80016ee:	f7ff fcdb 	bl	80010a8 <getAltDJArray>
 80016f2:	6078      	str	r0, [r7, #4]
    sprintf(altDJString,"%d%d%",altDJArray[0],altDJArray[1]);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3301      	adds	r3, #1
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4904      	ldr	r1, [pc, #16]	; (8001714 <getAltDJString+0x2c>)
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <getAltDJString+0x30>)
 8001704:	f007 fcb8 	bl	8009078 <siprintf>
    return altDJString;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <getAltDJString+0x30>)
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	0800b7dc 	.word	0x0800b7dc
 8001718:	200003ec 	.word	0x200003ec

0800171c <getNumSeriesString>:

unsigned char* getNumSeriesString()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af02      	add	r7, sp, #8
    unsigned char* numSeriesArray = getNumSeriesArray();
 8001722:	f7ff fccb 	bl	80010bc <getNumSeriesArray>
 8001726:	6078      	str	r0, [r7, #4]
    sprintf(numSeriesString,"%d%d%d",numSeriesArray[0],numSeriesArray[1],numSeriesArray[2]);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3301      	adds	r3, #1
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3302      	adds	r3, #2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	460b      	mov	r3, r1
 8001740:	4904      	ldr	r1, [pc, #16]	; (8001754 <getNumSeriesString+0x38>)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <getNumSeriesString+0x3c>)
 8001744:	f007 fc98 	bl	8009078 <siprintf>
    return numSeriesString;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <getNumSeriesString+0x3c>)
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	0800b7d0 	.word	0x0800b7d0
 8001758:	200003f8 	.word	0x200003f8

0800175c <getIntervalSeriesString>:

unsigned char* getIntervalSeriesString()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af02      	add	r7, sp, #8
    unsigned char* intervalSeriesArray = getIntervalSeriesArray();
 8001762:	f7ff fcb5 	bl	80010d0 <getIntervalSeriesArray>
 8001766:	6078      	str	r0, [r7, #4]
    sprintf(interSeriesString,"%d%d%d",intervalSeriesArray[0],intervalSeriesArray[1],intervalSeriesArray[2]);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3301      	adds	r3, #1
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3302      	adds	r3, #2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	460b      	mov	r3, r1
 8001780:	4904      	ldr	r1, [pc, #16]	; (8001794 <getIntervalSeriesString+0x38>)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <getIntervalSeriesString+0x3c>)
 8001784:	f007 fc78 	bl	8009078 <siprintf>
    return interSeriesString;
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <getIntervalSeriesString+0x3c>)
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	0800b7d0 	.word	0x0800b7d0
 8001798:	20000404 	.word	0x20000404

0800179c <getMassString>:

unsigned char* getMassString()
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af02      	add	r7, sp, #8
    unsigned char* massArray = getMassArray();
 80017a2:	f7ff fc45 	bl	8001030 <getMassArray>
 80017a6:	6078      	str	r0, [r7, #4]
    sprintf(massString,"%d%d%d.%d",massArray[0],massArray[1],massArray[2],massArray[4]);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3302      	adds	r3, #2
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	9200      	str	r2, [sp, #0]
 80017c8:	4603      	mov	r3, r0
 80017ca:	460a      	mov	r2, r1
 80017cc:	4904      	ldr	r1, [pc, #16]	; (80017e0 <getMassString+0x44>)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <getMassString+0x48>)
 80017d0:	f007 fc52 	bl	8009078 <siprintf>
    //massArray[3] ficou representando o "." no display
    return massString;
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <getMassString+0x48>)
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	0800b7e4 	.word	0x0800b7e4
 80017e4:	200003a4 	.word	0x200003a4

080017e8 <getOverMassString>:

unsigned char* getOverMassString()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af02      	add	r7, sp, #8
    unsigned char* overMassArray = getOverMassArray();
 80017ee:	f7ff fc29 	bl	8001044 <getOverMassArray>
 80017f2:	6078      	str	r0, [r7, #4]
    sprintf(overMassString,"%d%d%d.%d",overMassArray[0],overMassArray[1],overMassArray[2],overMassArray[4]);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3301      	adds	r3, #1
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3302      	adds	r3, #2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3304      	adds	r3, #4
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	9200      	str	r2, [sp, #0]
 8001814:	4603      	mov	r3, r0
 8001816:	460a      	mov	r2, r1
 8001818:	4904      	ldr	r1, [pc, #16]	; (800182c <getOverMassString+0x44>)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <getOverMassString+0x48>)
 800181c:	f007 fc2c 	bl	8009078 <siprintf>
    return overMassString;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <getOverMassString+0x48>)
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	0800b7e4 	.word	0x0800b7e4
 8001830:	200003b0 	.word	0x200003b0

08001834 <getNumTestString>:

unsigned char* getNumTestString()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af02      	add	r7, sp, #8
    unsigned char* numTestArray = getNumTestArray();
 800183a:	f7ff fc53 	bl	80010e4 <getNumTestArray>
 800183e:	6078      	str	r0, [r7, #4]
    sprintf(numTestString,"%d%d%d",numTestArray[0],numTestArray[1],numTestArray[2]);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3301      	adds	r3, #1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3302      	adds	r3, #2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	460b      	mov	r3, r1
 8001858:	4904      	ldr	r1, [pc, #16]	; (800186c <getNumTestString+0x38>)
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <getNumTestString+0x3c>)
 800185c:	f007 fc0c 	bl	8009078 <siprintf>
    return numTestString;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <getNumTestString+0x3c>)
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	0800b7d0 	.word	0x0800b7d0
 8001870:	20000410 	.word	0x20000410

08001874 <getEraseTestString>:

unsigned char* getEraseTestString()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
    unsigned char* eraseTestArray = getEraseTestArray();
 800187a:	f7ff fc3d 	bl	80010f8 <getEraseTestArray>
 800187e:	4603      	mov	r3, r0
 8001880:	607b      	str	r3, [r7, #4]
    sprintf(eraseTestString,"%d",eraseTestArray[0]);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4904      	ldr	r1, [pc, #16]	; (800189c <getEraseTestString+0x28>)
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <getEraseTestString+0x2c>)
 800188c:	f007 fbf4 	bl	8009078 <siprintf>
    return eraseTestString;
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <getEraseTestString+0x2c>)
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	0800b7d8 	.word	0x0800b7d8
 80018a0:	2000041c 	.word	0x2000041c

080018a4 <param_1_toString>:
	static unsigned char saveResultString[50];
	return saveResultString;
}

unsigned int* param_1_toString(unsigned char* string)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    static unsigned char result[TEST_SIZE];
    sprintf(result,"%d",*string);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4904      	ldr	r1, [pc, #16]	; (80018c4 <param_1_toString+0x20>)
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <param_1_toString+0x24>)
 80018b6:	f007 fbdf 	bl	8009078 <siprintf>
    return result;
 80018ba:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <param_1_toString+0x24>)
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	0800b7d8 	.word	0x0800b7d8
 80018c8:	20000428 	.word	0x20000428

080018cc <param_2_toString>:

unsigned int* param_2_toString(unsigned char* string)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
    static unsigned char result[TEST_SIZE];
    sprintf(result,"%d",*string);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4904      	ldr	r1, [pc, #16]	; (80018ec <param_2_toString+0x20>)
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <param_2_toString+0x24>)
 80018de:	f007 fbcb 	bl	8009078 <siprintf>
    return result;
 80018e2:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <param_2_toString+0x24>)
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	0800b7d8 	.word	0x0800b7d8
 80018f0:	20000430 	.word	0x20000430

080018f4 <param_3_toString>:

unsigned int* param_3_toString(unsigned char* string)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    static unsigned char result[TEST_SIZE];
    sprintf(result,"%d",*string);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4904      	ldr	r1, [pc, #16]	; (8001914 <param_3_toString+0x20>)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <param_3_toString+0x24>)
 8001906:	f007 fbb7 	bl	8009078 <siprintf>
    return result;
 800190a:	4b03      	ldr	r3, [pc, #12]	; (8001918 <param_3_toString+0x24>)
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	0800b7d8 	.word	0x0800b7d8
 8001918:	20000438 	.word	0x20000438

0800191c <setUserAltMin>:

unsigned char setUserAltMin(unsigned char* idx)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    unsigned char* altMinArray = getAltMinArray();
 8001924:	f7ff fb98 	bl	8001058 <getAltMinArray>
 8001928:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	72fb      	strb	r3, [r7, #11]
    altMinArray[index] = altMinArray[index]+1;
 8001930:	7afb      	ldrb	r3, [r7, #11]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	68f9      	ldr	r1, [r7, #12]
 800193c:	440b      	add	r3, r1
 800193e:	3201      	adds	r2, #1
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	701a      	strb	r2, [r3, #0]
    if(altMinArray[index]>9) altMinArray[index]= 0;
 8001944:	7afb      	ldrb	r3, [r7, #11]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4413      	add	r3, r2
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b09      	cmp	r3, #9
 800194e:	d904      	bls.n	800195a <setUserAltMin+0x3e>
 8001950:	7afb      	ldrb	r3, [r7, #11]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4413      	add	r3, r2
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <setUserErase>:

unsigned char setUserErase(unsigned char* idx)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    unsigned char* eraseArray = getEraseTestArray();
 800196c:	f7ff fbc4 	bl	80010f8 <getEraseTestArray>
 8001970:	4603      	mov	r3, r0
 8001972:	60fb      	str	r3, [r7, #12]
    unsigned char index = *idx;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	72fb      	strb	r3, [r7, #11]
    eraseArray[index] = eraseArray[index]+1;
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	7afb      	ldrb	r3, [r7, #11]
 8001984:	68f9      	ldr	r1, [r7, #12]
 8001986:	440b      	add	r3, r1
 8001988:	3201      	adds	r2, #1
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]
    if(eraseArray[index]>9) eraseArray[index]= 0;
 800198e:	7afb      	ldrb	r3, [r7, #11]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b09      	cmp	r3, #9
 8001998:	d904      	bls.n	80019a4 <setUserErase+0x40>
 800199a:	7afb      	ldrb	r3, [r7, #11]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <setUserAltMax>:

unsigned char setUserAltMax(unsigned char* idx)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
    unsigned char* altMaxArray = getAltMaxArray();
 80019b6:	f7ff fb59 	bl	800106c <getAltMaxArray>
 80019ba:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	72fb      	strb	r3, [r7, #11]
    altMaxArray[index] = altMaxArray[index]+1;
 80019c2:	7afb      	ldrb	r3, [r7, #11]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	7afb      	ldrb	r3, [r7, #11]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	440b      	add	r3, r1
 80019d0:	3201      	adds	r2, #1
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]
    if(altMaxArray[index]>9) altMaxArray[index]= 0;
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b09      	cmp	r3, #9
 80019e0:	d904      	bls.n	80019ec <setUserAltMax+0x3e>
 80019e2:	7afb      	ldrb	r3, [r7, #11]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
}
 80019ec:	bf00      	nop
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <setUserNumSaltos>:

unsigned char setUserNumSaltos(unsigned char* idx)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
    unsigned char* numSaltosArray = getNumSaltosArray();
 80019fe:	f7ff fb3f 	bl	8001080 <getNumSaltosArray>
 8001a02:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	72fb      	strb	r3, [r7, #11]
    numSaltosArray[index] = numSaltosArray[index]+1;
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	7afb      	ldrb	r3, [r7, #11]
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	440b      	add	r3, r1
 8001a18:	3201      	adds	r2, #1
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]
    if(numSaltosArray[index]>9) numSaltosArray[index]= 0;
 8001a1e:	7afb      	ldrb	r3, [r7, #11]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b09      	cmp	r3, #9
 8001a28:	d904      	bls.n	8001a34 <setUserNumSaltos+0x3e>
 8001a2a:	7afb      	ldrb	r3, [r7, #11]
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
}
 8001a34:	bf00      	nop
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <setUserTypeJump>:

unsigned char setUserTypeJump(unsigned char* idx)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
    unsigned char* typeJumpArray = getTypeJumpArray();
 8001a46:	f7ff fb25 	bl	8001094 <getTypeJumpArray>
 8001a4a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	72fb      	strb	r3, [r7, #11]
    typeJumpArray[index] = typeJumpArray[index]+1;
 8001a52:	7afb      	ldrb	r3, [r7, #11]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	7afb      	ldrb	r3, [r7, #11]
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	440b      	add	r3, r1
 8001a60:	3201      	adds	r2, #1
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]
    if(typeJumpArray[index]>3) typeJumpArray[index]= 0;
 8001a66:	7afb      	ldrb	r3, [r7, #11]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d904      	bls.n	8001a7c <setUserTypeJump+0x3e>
 8001a72:	7afb      	ldrb	r3, [r7, #11]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <setUserAltDJ>:

unsigned char setUserAltDJ(unsigned char* idx)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
    unsigned char* AltDJArray = getAltDJArray();
 8001a8e:	f7ff fb0b 	bl	80010a8 <getAltDJArray>
 8001a92:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	72fb      	strb	r3, [r7, #11]
    AltDJArray[index] = AltDJArray[index]+1;
 8001a9a:	7afb      	ldrb	r3, [r7, #11]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	7afb      	ldrb	r3, [r7, #11]
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3201      	adds	r2, #1
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]
    if(AltDJArray[index]>9) AltDJArray[index]= 0;
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b09      	cmp	r3, #9
 8001ab8:	d904      	bls.n	8001ac4 <setUserAltDJ+0x3e>
 8001aba:	7afb      	ldrb	r3, [r7, #11]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <setUserNumSeries>:

unsigned char setUserNumSeries(unsigned char* idx)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
    unsigned char* numSeriesArray = getNumSeriesArray();
 8001ad6:	f7ff faf1 	bl	80010bc <getNumSeriesArray>
 8001ada:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	72fb      	strb	r3, [r7, #11]
    numSeriesArray[index] = numSeriesArray[index]+1;
 8001ae2:	7afb      	ldrb	r3, [r7, #11]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	7afb      	ldrb	r3, [r7, #11]
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	440b      	add	r3, r1
 8001af0:	3201      	adds	r2, #1
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]
    if(numSeriesArray[index]>9) numSeriesArray[index]= 0;
 8001af6:	7afb      	ldrb	r3, [r7, #11]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b09      	cmp	r3, #9
 8001b00:	d904      	bls.n	8001b0c <setUserNumSeries+0x3e>
 8001b02:	7afb      	ldrb	r3, [r7, #11]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <setUserIntervalSeries>:

unsigned char setUserIntervalSeries(unsigned char* idx)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
    unsigned char* IntervalSeriesArray = getIntervalSeriesArray();
 8001b1e:	f7ff fad7 	bl	80010d0 <getIntervalSeriesArray>
 8001b22:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	72fb      	strb	r3, [r7, #11]
    IntervalSeriesArray[index] = IntervalSeriesArray[index]+1;
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	7afb      	ldrb	r3, [r7, #11]
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	440b      	add	r3, r1
 8001b38:	3201      	adds	r2, #1
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]
    if(IntervalSeriesArray[index]>9) IntervalSeriesArray[index]= 0;
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b09      	cmp	r3, #9
 8001b48:	d904      	bls.n	8001b54 <setUserIntervalSeries+0x3e>
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
}
 8001b54:	bf00      	nop
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <setUserMass>:

unsigned char setUserMass(unsigned char* idx)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
    unsigned char* massArray = getMassArray();
 8001b66:	f7ff fa63 	bl	8001030 <getMassArray>
 8001b6a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	72fb      	strb	r3, [r7, #11]
    massArray[index] = massArray[index]+1;
 8001b72:	7afb      	ldrb	r3, [r7, #11]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
 8001b7c:	68f9      	ldr	r1, [r7, #12]
 8001b7e:	440b      	add	r3, r1
 8001b80:	3201      	adds	r2, #1
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]
    if(massArray[index]>9) massArray[index]= 0;
 8001b86:	7afb      	ldrb	r3, [r7, #11]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b09      	cmp	r3, #9
 8001b90:	d904      	bls.n	8001b9c <setUserMass+0x3e>
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <setUserOverMass>:

unsigned char setUserOverMass(unsigned char* idx)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
    unsigned char* overMassArray = getOverMassArray();
 8001bae:	f7ff fa49 	bl	8001044 <getOverMassArray>
 8001bb2:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	72fb      	strb	r3, [r7, #11]
    overMassArray[index] = overMassArray[index]+1;
 8001bba:	7afb      	ldrb	r3, [r7, #11]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
 8001bc4:	68f9      	ldr	r1, [r7, #12]
 8001bc6:	440b      	add	r3, r1
 8001bc8:	3201      	adds	r2, #1
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]
    if(overMassArray[index]>9) overMassArray[index]= 0;
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b09      	cmp	r3, #9
 8001bd8:	d904      	bls.n	8001be4 <setUserOverMass+0x3e>
 8001bda:	7afb      	ldrb	r3, [r7, #11]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
}
 8001be4:	bf00      	nop
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <setUserNumTest>:

unsigned char setUserNumTest(unsigned char* idx)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
    unsigned char* numTestArray = getNumTestArray();
 8001bf6:	f7ff fa75 	bl	80010e4 <getNumTestArray>
 8001bfa:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	72fb      	strb	r3, [r7, #11]
    numTestArray[index] = numTestArray[index]+1;
 8001c02:	7afb      	ldrb	r3, [r7, #11]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	440b      	add	r3, r1
 8001c10:	3201      	adds	r2, #1
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]
    if(numTestArray[index]>9) numTestArray[index]= 0;
 8001c16:	7afb      	ldrb	r3, [r7, #11]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b09      	cmp	r3, #9
 8001c20:	d904      	bls.n	8001c2c <setUserNumTest+0x3e>
 8001c22:	7afb      	ldrb	r3, [r7, #11]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <setIntervalSaltosTime>:

unsigned char* setIntervalSaltosTime(unsigned char* configInputTimer)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	unsigned char index = *configInputTimer + 3;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	3303      	adds	r3, #3
 8001c46:	73fb      	strb	r3, [r7, #15]
	struct tm* insertTime = getIntervalTimeStruct();
 8001c48:	f7ff f9e8 	bl	800101c <getIntervalTimeStruct>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	60bb      	str	r3, [r7, #8]

	switch(index)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	3b03      	subs	r3, #3
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d84a      	bhi.n	8001cee <setIntervalSaltosTime+0xb6>
 8001c58:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <setIntervalSaltosTime+0x28>)
 8001c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5e:	bf00      	nop
 8001c60:	08001c75 	.word	0x08001c75
 8001c64:	08001c91 	.word	0x08001c91
 8001c68:	08001cef 	.word	0x08001cef
 8001c6c:	08001cab 	.word	0x08001cab
 8001c70:	08001cc7 	.word	0x08001cc7
	{
		case DEZENA_M:
			insertTime->tm_min = insertTime->tm_min+10;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f103 020a 	add.w	r2, r3, #10
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b3c      	cmp	r3, #60	; 0x3c
 8001c86:	dd2b      	ble.n	8001ce0 <setIntervalSaltosTime+0xa8>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	605a      	str	r2, [r3, #4]
		break;
 8001c8e:	e027      	b.n	8001ce0 <setIntervalSaltosTime+0xa8>

		case UNIDADE_M:
			insertTime->tm_min = insertTime->tm_min+1;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b3c      	cmp	r3, #60	; 0x3c
 8001ca0:	dd20      	ble.n	8001ce4 <setIntervalSaltosTime+0xac>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
		break;
 8001ca8:	e01c      	b.n	8001ce4 <setIntervalSaltosTime+0xac>

		case DEZENA_S:
			insertTime->tm_sec =insertTime->tm_sec+10 ;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f103 020a 	add.w	r2, r3, #10
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b3c      	cmp	r3, #60	; 0x3c
 8001cbc:	dd14      	ble.n	8001ce8 <setIntervalSaltosTime+0xb0>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

		break;
 8001cc4:	e010      	b.n	8001ce8 <setIntervalSaltosTime+0xb0>

		case UNIDADE_S:
			insertTime->tm_sec =insertTime->tm_sec+1 ;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b3c      	cmp	r3, #60	; 0x3c
 8001cd6:	dd09      	ble.n	8001cec <setIntervalSaltosTime+0xb4>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
		break;
 8001cde:	e005      	b.n	8001cec <setIntervalSaltosTime+0xb4>
		break;
 8001ce0:	bf00      	nop
 8001ce2:	e004      	b.n	8001cee <setIntervalSaltosTime+0xb6>
		break;
 8001ce4:	bf00      	nop
 8001ce6:	e002      	b.n	8001cee <setIntervalSaltosTime+0xb6>
		break;
 8001ce8:	bf00      	nop
 8001cea:	e000      	b.n	8001cee <setIntervalSaltosTime+0xb6>
		break;
 8001cec:	bf00      	nop
	}

}
 8001cee:	bf00      	nop
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <setUserTime>:

unsigned char* setUserTime(unsigned char* inputUserTimer)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    unsigned char index = *inputUserTimer;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	73fb      	strb	r3, [r7, #15]
    struct tm* insertTime = getTimeStruct();
 8001d06:	f7ff f97f 	bl	8001008 <getTimeStruct>
 8001d0a:	60b8      	str	r0, [r7, #8]
    static unsigned char timeString[9];

    switch(index)
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b07      	cmp	r3, #7
 8001d10:	f200 8089 	bhi.w	8001e26 <setUserTime+0x12e>
 8001d14:	a201      	add	r2, pc, #4	; (adr r2, 8001d1c <setUserTime+0x24>)
 8001d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1a:	bf00      	nop
 8001d1c:	08001d3d 	.word	0x08001d3d
 8001d20:	08001d65 	.word	0x08001d65
 8001d24:	08001e27 	.word	0x08001e27
 8001d28:	08001d8b 	.word	0x08001d8b
 8001d2c:	08001db3 	.word	0x08001db3
 8001d30:	08001e27 	.word	0x08001e27
 8001d34:	08001dd9 	.word	0x08001dd9
 8001d38:	08001e01 	.word	0x08001e01
    {
        case DEZENA_H:
            insertTime->tm_hour = insertTime->tm_hour+10;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f103 020a 	add.w	r2, r3, #10
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b17      	cmp	r3, #23
 8001d4e:	dd02      	ble.n	8001d56 <setUserTime+0x5e>
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4a35      	ldr	r2, [pc, #212]	; (8001e30 <setUserTime+0x138>)
 8001d5a:	2109      	movs	r1, #9
 8001d5c:	4835      	ldr	r0, [pc, #212]	; (8001e34 <setUserTime+0x13c>)
 8001d5e:	f007 ff25 	bl	8009bac <strftime>
        break;
 8001d62:	e060      	b.n	8001e26 <setUserTime+0x12e>

        case UNIDADE_H:
            insertTime->tm_hour = insertTime->tm_hour+1;
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b17      	cmp	r3, #23
 8001d74:	dd02      	ble.n	8001d7c <setUserTime+0x84>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4a2c      	ldr	r2, [pc, #176]	; (8001e30 <setUserTime+0x138>)
 8001d80:	2109      	movs	r1, #9
 8001d82:	482c      	ldr	r0, [pc, #176]	; (8001e34 <setUserTime+0x13c>)
 8001d84:	f007 ff12 	bl	8009bac <strftime>
        break;
 8001d88:	e04d      	b.n	8001e26 <setUserTime+0x12e>

        case DEZENA_M:
            insertTime->tm_min = insertTime->tm_min+10;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f103 020a 	add.w	r2, r3, #10
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b3c      	cmp	r3, #60	; 0x3c
 8001d9c:	dd02      	ble.n	8001da4 <setUserTime+0xac>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2200      	movs	r2, #0
 8001da2:	605a      	str	r2, [r3, #4]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <setUserTime+0x138>)
 8001da8:	2109      	movs	r1, #9
 8001daa:	4822      	ldr	r0, [pc, #136]	; (8001e34 <setUserTime+0x13c>)
 8001dac:	f007 fefe 	bl	8009bac <strftime>
        break;
 8001db0:	e039      	b.n	8001e26 <setUserTime+0x12e>

        case UNIDADE_M:
        	insertTime->tm_min = insertTime->tm_min+1;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b3c      	cmp	r3, #60	; 0x3c
 8001dc2:	dd02      	ble.n	8001dca <setUserTime+0xd2>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4a18      	ldr	r2, [pc, #96]	; (8001e30 <setUserTime+0x138>)
 8001dce:	2109      	movs	r1, #9
 8001dd0:	4818      	ldr	r0, [pc, #96]	; (8001e34 <setUserTime+0x13c>)
 8001dd2:	f007 feeb 	bl	8009bac <strftime>
        break;
 8001dd6:	e026      	b.n	8001e26 <setUserTime+0x12e>

        case DEZENA_S:
            insertTime->tm_sec =insertTime->tm_sec+10 ;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f103 020a 	add.w	r2, r3, #10
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b3c      	cmp	r3, #60	; 0x3c
 8001dea:	dd02      	ble.n	8001df2 <setUserTime+0xfa>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <setUserTime+0x138>)
 8001df6:	2109      	movs	r1, #9
 8001df8:	480e      	ldr	r0, [pc, #56]	; (8001e34 <setUserTime+0x13c>)
 8001dfa:	f007 fed7 	bl	8009bac <strftime>
        break;
 8001dfe:	e012      	b.n	8001e26 <setUserTime+0x12e>

        case UNIDADE_S:
            insertTime->tm_sec =insertTime->tm_sec+1 ;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b3c      	cmp	r3, #60	; 0x3c
 8001e10:	dd02      	ble.n	8001e18 <setUserTime+0x120>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <setUserTime+0x138>)
 8001e1c:	2109      	movs	r1, #9
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <setUserTime+0x13c>)
 8001e20:	f007 fec4 	bl	8009bac <strftime>
        break;
 8001e24:	bf00      	nop
    }
}
 8001e26:	bf00      	nop
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	0800b7f0 	.word	0x0800b7f0
 8001e34:	20000440 	.word	0x20000440

08001e38 <updateUserMsg>:
#include "time.h"
#include "stdlib.h"


unsigned char updateUserMsg(unsigned char col, unsigned char linha, unsigned char *userMessage, unsigned char* status)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60ba      	str	r2, [r7, #8]
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	4603      	mov	r3, r0
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	460b      	mov	r3, r1
 8001e48:	73bb      	strb	r3, [r7, #14]
	if(*status == IDDLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10b      	bne.n	8001e6a <updateUserMsg+0x32>
	{
	    printDataDisplay(col,linha,userMessage);
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	7bb9      	ldrb	r1, [r7, #14]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 ff1d 	bl	8002c98 <printDataDisplay>
		*status = PRINTED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
		HAL_Delay(250);
 8001e64:	20fa      	movs	r0, #250	; 0xfa
 8001e66:	f003 fa37 	bl	80052d8 <HAL_Delay>
	}
}
 8001e6a:	bf00      	nop
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <readyUserInterface>:

unsigned char readyUserInterface(unsigned char* displayStatus,unsigned char* cursorPosition)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	statusUserInterface(displayStatus);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f80c 	bl	8001e9c <statusUserInterface>
	resetKeyPressed();
 8001e84:	f002 fa24 	bl	80042d0 <resetKeyPressed>
	resetCursorInterface(cursorPosition);
 8001e88:	6838      	ldr	r0, [r7, #0]
 8001e8a:	f000 f814 	bl	8001eb6 <resetCursorInterface>
	eraseDataDisplay();
 8001e8e:	f000 ff16 	bl	8002cbe <eraseDataDisplay>
}
 8001e92:	bf00      	nop
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <statusUserInterface>:

unsigned char statusUserInterface(unsigned char* displayStatus)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	*displayStatus = IDDLE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <resetCursorInterface>:
	HW_UPDATE_DATA(actualposition,linha);
	return actualposition;
}

unsigned char resetCursorInterface(unsigned char* cursorPosition)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
	cursorPosition[0] = 0;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
	cursorPosition[1] = 0;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <exportStateMachine>:
        struct dataInsert menuInsert;
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
unsigned char exportStateMachine(struct Menu* subMenu)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuExport = subMenu;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	623b      	str	r3, [r7, #32]
    unsigned char key = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    short index = 2;
 8001eea:	2302      	movs	r3, #2
 8001eec:	81fb      	strh	r3, [r7, #14]
    unsigned char indexTest = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	77fb      	strb	r3, [r7, #31]
    unsigned char testSamples = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    unsigned char selectedUserTest=0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77bb      	strb	r3, [r7, #30]
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    struct results* ptr_structExportResult;
    unsigned char dataVerify;
    unsigned char cursorPosition[2] = {0,0};
 8001efc:	2300      	movs	r3, #0
 8001efe:	81bb      	strh	r3, [r7, #12]
    unsigned char displayUpdateStatus = IDDLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	72fb      	strb	r3, [r7, #11]
    while(key != MENU)
 8001f04:	bf00      	nop
 8001f06:	e200      	b.n	800230a <exportStateMachine+0x432>
    {
        switch(subMenuExport->menuState)
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	78db      	ldrb	r3, [r3, #3]
 8001f0c:	2b06      	cmp	r3, #6
 8001f0e:	f200 81fc 	bhi.w	800230a <exportStateMachine+0x432>
 8001f12:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <exportStateMachine+0x40>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f35 	.word	0x08001f35
 8001f1c:	08001f45 	.word	0x08001f45
 8001f20:	08001f79 	.word	0x08001f79
 8001f24:	08002085 	.word	0x08002085
 8001f28:	0800213b 	.word	0x0800213b
 8001f2c:	08001fff 	.word	0x08001fff
 8001f30:	080022d5 	.word	0x080022d5
        {
            case IDDLE:
                subMenuExport->menuState = getNextSub(VERIFICA_COMM);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f001 fc1f 	bl	8003778 <getNextSub>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	70da      	strb	r2, [r3, #3]
            break;
 8001f42:	e1e2      	b.n	800230a <exportStateMachine+0x432>

            case VERIFICA_COMM:
                //funcao para habilitar comunicacao
            	startCOMM(); //verificar se nao preciso deixar uma flag de comm no data.c para acessar o valor dela
 8001f44:	f000 ff1c 	bl	8002d80 <startCOMM>
            	// e comparar para verificar se a comm já está ligada antes de liga-la novamente.
                updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 8001f48:	4bda      	ldr	r3, [pc, #872]	; (80022b4 <exportStateMachine+0x3dc>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	f107 030b 	add.w	r3, r7, #11
 8001f50:	2100      	movs	r1, #0
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff ff70 	bl	8001e38 <updateUserMsg>
                subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f001 fc0d 	bl	8003778 <getNextSub>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	70da      	strb	r2, [r3, #3]
                readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001f66:	f107 020c 	add.w	r2, r7, #12
 8001f6a:	f107 030b 	add.w	r3, r7, #11
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff7f 	bl	8001e74 <readyUserInterface>
            break;
 8001f76:	e1c8      	b.n	800230a <exportStateMachine+0x432>

            case EXPORTAR_UNITARIO:
                updateUserMsg(0,0,exportunitUserMsg,&displayUpdateStatus);
 8001f78:	4bcf      	ldr	r3, [pc, #828]	; (80022b8 <exportStateMachine+0x3e0>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	f107 030b 	add.w	r3, r7, #11
 8001f80:	2100      	movs	r1, #0
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7ff ff58 	bl	8001e38 <updateUserMsg>
                key = getKeyPressed();
 8001f88:	f002 f996 	bl	80042b8 <getKeyPressed>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if(key == AVANCAR)
 8001f92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f96:	2b41      	cmp	r3, #65	; 0x41
 8001f98:	d111      	bne.n	8001fbe <exportStateMachine+0xe6>
                {
                	resetKeyPressed();
 8001f9a:	f002 f999 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001f9e:	f107 020c 	add.w	r2, r7, #12
 8001fa2:	f107 030b 	add.w	r3, r7, #11
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff63 	bl	8001e74 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_TODOS);
 8001fae:	2005      	movs	r0, #5
 8001fb0:	f001 fbe2 	bl	8003778 <getNextSub>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	70da      	strb	r2, [r3, #3]
 8001fbc:	e1a5      	b.n	800230a <exportStateMachine+0x432>
                }

                else if(key == CONFIRMAR)
 8001fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fc2:	2b43      	cmp	r3, #67	; 0x43
 8001fc4:	f040 81a1 	bne.w	800230a <exportStateMachine+0x432>
                {
                	resetKeyPressed();
 8001fc8:	f002 f982 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001fcc:	f107 020c 	add.w	r2, r7, #12
 8001fd0:	f107 030b 	add.w	r3, r7, #11
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff4c 	bl	8001e74 <readyUserInterface>
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	3303      	adds	r3, #3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 fbdb 	bl	800379c <setSelectSub>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	705a      	strb	r2, [r3, #1]
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 8001fee:	2003      	movs	r0, #3
 8001ff0:	f001 fbc2 	bl	8003778 <getNextSub>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001ffc:	e185      	b.n	800230a <exportStateMachine+0x432>

            case EXPORTAR_TODOS:
                updateUserMsg(0,0,exportallUserMsg,&displayUpdateStatus);
 8001ffe:	4baf      	ldr	r3, [pc, #700]	; (80022bc <exportStateMachine+0x3e4>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	f107 030b 	add.w	r3, r7, #11
 8002006:	2100      	movs	r1, #0
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff ff15 	bl	8001e38 <updateUserMsg>
                key = getKeyPressed();
 800200e:	f002 f953 	bl	80042b8 <getKeyPressed>
 8002012:	4603      	mov	r3, r0
 8002014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if(key == AVANCAR)
 8002018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800201c:	2b41      	cmp	r3, #65	; 0x41
 800201e:	d111      	bne.n	8002044 <exportStateMachine+0x16c>
                {
                	resetKeyPressed();
 8002020:	f002 f956 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002024:	f107 020c 	add.w	r2, r7, #12
 8002028:	f107 030b 	add.w	r3, r7, #11
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff20 	bl	8001e74 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8002034:	2002      	movs	r0, #2
 8002036:	f001 fb9f 	bl	8003778 <getNextSub>
 800203a:	4603      	mov	r3, r0
 800203c:	461a      	mov	r2, r3
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	70da      	strb	r2, [r3, #3]
 8002042:	e162      	b.n	800230a <exportStateMachine+0x432>
                }

                else if(key == CONFIRMAR)
 8002044:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002048:	2b43      	cmp	r3, #67	; 0x43
 800204a:	f040 815e 	bne.w	800230a <exportStateMachine+0x432>
                {
                	resetKeyPressed();
 800204e:	f002 f93f 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002052:	f107 020c 	add.w	r2, r7, #12
 8002056:	f107 030b 	add.w	r3, r7, #11
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff09 	bl	8001e74 <readyUserInterface>
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	3303      	adds	r3, #3
 8002066:	4618      	mov	r0, r3
 8002068:	f001 fb98 	bl	800379c <setSelectSub>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	705a      	strb	r2, [r3, #1]
                    subMenuExport->menuState = getNextSub(PROCESS_TODOS);
 8002074:	2006      	movs	r0, #6
 8002076:	f001 fb7f 	bl	8003778 <getNextSub>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	70da      	strb	r2, [r3, #3]
                }
                break;
 8002082:	e142      	b.n	800230a <exportStateMachine+0x432>


            case NUM_TESTE_EXPORT:
                updateUserMsg(0,0,consultTestUserMsg,&displayUpdateStatus);
 8002084:	4b8e      	ldr	r3, [pc, #568]	; (80022c0 <exportStateMachine+0x3e8>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	f107 030b 	add.w	r3, r7, #11
 800208c:	2100      	movs	r1, #0
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff fed2 	bl	8001e38 <updateUserMsg>
                ptr_exportTestString = getNumTestString();
 8002094:	f7ff fbce 	bl	8001834 <getNumTestString>
 8002098:	62b8      	str	r0, [r7, #40]	; 0x28
                printDataDisplay(0,1,ptr_exportTestString);
 800209a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800209c:	2101      	movs	r1, #1
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 fdfa 	bl	8002c98 <printDataDisplay>
                updateDataDisplay(index,1);
 80020a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020a8:	2101      	movs	r1, #1
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fe0e 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 80020b0:	f002 f902 	bl	80042b8 <getKeyPressed>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if(key == INSERIR)
 80020ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020be:	2b49      	cmp	r3, #73	; 0x49
 80020c0:	d10e      	bne.n	80020e0 <exportStateMachine+0x208>
                {
                	resetKeyPressed();
 80020c2:	f002 f905 	bl	80042d0 <resetKeyPressed>
                    setUserNumTest(&index);
 80020c6:	f107 030e 	add.w	r3, r7, #14
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fd8f 	bl	8001bee <setUserNumTest>
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f001 fb51 	bl	8003778 <getNextSub>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	70da      	strb	r2, [r3, #3]
 80020de:	e114      	b.n	800230a <exportStateMachine+0x432>
                }
                else if(key == AVANCAR)
 80020e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020e4:	2b41      	cmp	r3, #65	; 0x41
 80020e6:	d108      	bne.n	80020fa <exportStateMachine+0x222>
                {
                	resetKeyPressed();
 80020e8:	f002 f8f2 	bl	80042d0 <resetKeyPressed>
                    indexChange(&index,2);
 80020ec:	f107 030e 	add.w	r3, r7, #14
 80020f0:	2102      	movs	r1, #2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fa64 	bl	80015c0 <indexChange>
 80020f8:	e107      	b.n	800230a <exportStateMachine+0x432>
                }
                else if(key == CONFIRMAR)
 80020fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020fe:	2b43      	cmp	r3, #67	; 0x43
 8002100:	f040 8103 	bne.w	800230a <exportStateMachine+0x432>
                {
                	resetKeyPressed();
 8002104:	f002 f8e4 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002108:	f107 020c 	add.w	r2, r7, #12
 800210c:	f107 030b 	add.w	r3, r7, #11
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff feae 	bl	8001e74 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(PROCESS_UNITARIO);
 8002118:	2004      	movs	r0, #4
 800211a:	f001 fb2d 	bl	8003778 <getNextSub>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	70da      	strb	r2, [r3, #3]
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	3303      	adds	r3, #3
 800212a:	4618      	mov	r0, r3
 800212c:	f001 fb36 	bl	800379c <setSelectSub>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	705a      	strb	r2, [r3, #1]
                }

                break;
 8002138:	e0e7      	b.n	800230a <exportStateMachine+0x432>

                case PROCESS_UNITARIO:
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 800213a:	4b62      	ldr	r3, [pc, #392]	; (80022c4 <exportStateMachine+0x3ec>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	f107 030b 	add.w	r3, r7, #11
 8002142:	2100      	movs	r1, #0
 8002144:	2000      	movs	r0, #0
 8002146:	f7ff fe77 	bl	8001e38 <updateUserMsg>
                    selectedUserTest = stringToInt(ptr_exportTestString);
 800214a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800214c:	f7ff f9fd 	bl	800154a <stringToInt>
 8002150:	4603      	mov	r3, r0
 8002152:	77bb      	strb	r3, [r7, #30]
                    ptr_structExportResult = getUserResultData(selectedUserTest);
 8002154:	7fbb      	ldrb	r3, [r7, #30]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f83a 	bl	80011d0 <getUserResultData>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24

                   //ESSE FOR � S� PARA TESTE NO CONSOLE, AO INVES DESSE MONTE DE "PRINT", COLOCAREI FU��O PARA ENVIAR BT

                    for(testSamples=0;testSamples<(ptr_structExportResult->resultTestAcquiredSamples);testSamples++)
 800215e:	2300      	movs	r3, #0
 8002160:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002164:	e093      	b.n	800228e <exportStateMachine+0x3b6>
                    {
                        ptr_structExportResult = getUserResultData(selectedUserTest);
 8002166:	7fbb      	ldrb	r3, [r7, #30]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f831 	bl	80011d0 <getUserResultData>
 800216e:	6278      	str	r0, [r7, #36]	; 0x24
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002170:	f107 020c 	add.w	r2, r7, #12
 8002174:	f107 030b 	add.w	r3, r7, #11
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fe7a 	bl	8001e74 <readyUserInterface>
                        updateUserMsg(0,0,"Amostra",&displayUpdateStatus);
 8002180:	f107 030b 	add.w	r3, r7, #11
 8002184:	4a50      	ldr	r2, [pc, #320]	; (80022c8 <exportStateMachine+0x3f0>)
 8002186:	2100      	movs	r1, #0
 8002188:	2000      	movs	r0, #0
 800218a:	f7ff fe55 	bl	8001e38 <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 800218e:	f107 020c 	add.w	r2, r7, #12
 8002192:	f107 030b 	add.w	r3, r7, #11
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fe6b 	bl	8001e74 <readyUserInterface>
                        ptr_sampleString = param_1_toString(&ptr_structExportResult->Measurement[testSamples].sampleNum);
 800219e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ac:	4413      	add	r3, r2
 80021ae:	3304      	adds	r3, #4
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fb77 	bl	80018a4 <param_1_toString>
 80021b6:	61b8      	str	r0, [r7, #24]
                        updateUserMsg(0,0,ptr_sampleString,&displayUpdateStatus);
 80021b8:	f107 030b 	add.w	r3, r7, #11
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	2100      	movs	r1, #0
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7ff fe39 	bl	8001e38 <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 80021c6:	f107 020c 	add.w	r2, r7, #12
 80021ca:	f107 030b 	add.w	r3, r7, #11
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fe4f 	bl	8001e74 <readyUserInterface>

                        updateUserMsg(0,0,"Tempo de Voo",&displayUpdateStatus);
 80021d6:	f107 030b 	add.w	r3, r7, #11
 80021da:	4a3c      	ldr	r2, [pc, #240]	; (80022cc <exportStateMachine+0x3f4>)
 80021dc:	2100      	movs	r1, #0
 80021de:	2000      	movs	r0, #0
 80021e0:	f7ff fe2a 	bl	8001e38 <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 80021e4:	f107 020c 	add.w	r2, r7, #12
 80021e8:	f107 030b 	add.w	r3, r7, #11
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fe40 	bl	8001e74 <readyUserInterface>
                        ptr_vooTimeString = param_2_toString(&ptr_structExportResult->Measurement[testSamples].uiVooTime);
 80021f4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002202:	4413      	add	r3, r2
 8002204:	3308      	adds	r3, #8
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fb60 	bl	80018cc <param_2_toString>
 800220c:	6178      	str	r0, [r7, #20]
                        updateUserMsg(0,0,ptr_vooTimeString,&displayUpdateStatus);
 800220e:	f107 030b 	add.w	r3, r7, #11
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	2100      	movs	r1, #0
 8002216:	2000      	movs	r0, #0
 8002218:	f7ff fe0e 	bl	8001e38 <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 800221c:	f107 020c 	add.w	r2, r7, #12
 8002220:	f107 030b 	add.w	r3, r7, #11
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fe24 	bl	8001e74 <readyUserInterface>

                        updateUserMsg(0,0,"Altura do salto",&displayUpdateStatus);
 800222c:	f107 030b 	add.w	r3, r7, #11
 8002230:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <exportStateMachine+0x3f8>)
 8002232:	2100      	movs	r1, #0
 8002234:	2000      	movs	r0, #0
 8002236:	f7ff fdff 	bl	8001e38 <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 800223a:	f107 020c 	add.w	r2, r7, #12
 800223e:	f107 030b 	add.w	r3, r7, #11
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fe15 	bl	8001e74 <readyUserInterface>
                        ptr_alturaString = param_3_toString(&ptr_structExportResult->Measurement[testSamples].uiSoloTime);
 800224a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	3308      	adds	r3, #8
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	4413      	add	r3, r2
 800225c:	3304      	adds	r3, #4
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fb48 	bl	80018f4 <param_3_toString>
 8002264:	6138      	str	r0, [r7, #16]
                        updateUserMsg(0,0,ptr_alturaString,&displayUpdateStatus);
 8002266:	f107 030b 	add.w	r3, r7, #11
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	2100      	movs	r1, #0
 800226e:	2000      	movs	r0, #0
 8002270:	f7ff fde2 	bl	8001e38 <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002274:	f107 020c 	add.w	r2, r7, #12
 8002278:	f107 030b 	add.w	r3, r7, #11
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fdf8 	bl	8001e74 <readyUserInterface>
                    for(testSamples=0;testSamples<(ptr_structExportResult->resultTestAcquiredSamples);testSamples++)
 8002284:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002288:	3301      	adds	r3, #1
 800228a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	785b      	ldrb	r3, [r3, #1]
 8002292:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002296:	429a      	cmp	r2, r3
 8002298:	f4ff af65 	bcc.w	8002166 <exportStateMachine+0x28e>
                    }
//                    transmissionCOMM();
                    //Acessa os dados referente ao Teste e envia apenas o selecionado por BT
                subMenuExport->menuState = getNextSub(IDDLE);
 800229c:	2000      	movs	r0, #0
 800229e:	f001 fa6b 	bl	8003778 <getNextSub>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	70da      	strb	r2, [r3, #3]
                key = MENU;
 80022aa:	234d      	movs	r3, #77	; 0x4d
 80022ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 80022b0:	e02b      	b.n	800230a <exportStateMachine+0x432>
 80022b2:	bf00      	nop
 80022b4:	20000024 	.word	0x20000024
 80022b8:	20000098 	.word	0x20000098
 80022bc:	2000009c 	.word	0x2000009c
 80022c0:	20000054 	.word	0x20000054
 80022c4:	2000005c 	.word	0x2000005c
 80022c8:	0800ba64 	.word	0x0800ba64
 80022cc:	0800ba6c 	.word	0x0800ba6c
 80022d0:	0800ba7c 	.word	0x0800ba7c

                case PROCESS_TODOS: //
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <exportStateMachine+0x448>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	f107 030b 	add.w	r3, r7, #11
 80022dc:	2100      	movs	r1, #0
 80022de:	2000      	movs	r0, #0
 80022e0:	f7ff fdaa 	bl	8001e38 <updateUserMsg>
//                            printf("Teste %d existe\n",i);
//                       }
//                       else printf("Teste %d nao existe\n",i);
//
//                    }
                    subMenuExport->menuState = getNextSub(IDDLE);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f001 fa47 	bl	8003778 <getNextSub>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461a      	mov	r2, r3
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	70da      	strb	r2, [r3, #3]
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80022f2:	f107 020c 	add.w	r2, r7, #12
 80022f6:	f107 030b 	add.w	r3, r7, #11
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fdb9 	bl	8001e74 <readyUserInterface>
                    key = MENU;
 8002302:	234d      	movs	r3, #77	; 0x4d
 8002304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    break;
 8002308:	bf00      	nop
    while(key != MENU)
 800230a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800230e:	2b4d      	cmp	r3, #77	; 0x4d
 8002310:	f47f adfa 	bne.w	8001f08 <exportStateMachine+0x30>
        }
    }
}
 8002314:	bf00      	nop
 8002316:	4618      	mov	r0, r3
 8002318:	3730      	adds	r7, #48	; 0x30
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2000005c 	.word	0x2000005c

08002324 <initStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char initStateMachine(struct Menu* subMenu)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0ea      	sub	sp, #424	; 0x1a8
 8002328:	af00      	add	r7, sp, #0
 800232a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800232e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002332:	6018      	str	r0, [r3, #0]
    struct Menu* subMenuIniciar = subMenu;
 8002334:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002338:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 8002342:	f7fe fee3 	bl	800110c <getUserConfigStruct>
 8002346:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
    unsigned char key = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
    short insertColumn = 7;
 8002350:	2307      	movs	r3, #7
 8002352:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a

    struct tm myTime;
    struct tm* userTimeStruct = &myTime;
 8002356:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800235a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    unsigned char userTimeString[9];
    unsigned char procTimeString[9];
    unsigned char* ptr_massString;
    unsigned char* ptr_overMassString;

    unsigned char displayUpdateStatus = IDDLE;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
    unsigned char cursorPosition[2] = {0,0};
 8002364:	2300      	movs	r3, #0
 8002366:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
    unsigned char* ptr_Sample;
    unsigned char* ptr_ulReadingTime;
    unsigned char* ptr_uiVooTime;
    unsigned char* ptr_ucAltDistance;
    struct results result[TEST_SIZE]; //verificar se vou usar o endere�o de data.c assim como fiz com a estrutura de configuracao
    unsigned char i = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
    unsigned char sampleCount=0;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
    unsigned char indexTest;

    //
    resetResultStruct(&result[0]);
 8002376:	f107 0308 	add.w	r3, r7, #8
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe ffc6 	bl	800130c <resetResultStruct>
    resetResultStruct(&result[1]);
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	3340      	adds	r3, #64	; 0x40
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe ffc0 	bl	800130c <resetResultStruct>
    resetResultStruct(&result[2]);
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	3380      	adds	r3, #128	; 0x80
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe ffba 	bl	800130c <resetResultStruct>
    resetResultStruct(&result[3]);
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	33c0      	adds	r3, #192	; 0xc0
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe ffb4 	bl	800130c <resetResultStruct>
    resetResultStruct(&result[4]);
 80023a4:	f107 0308 	add.w	r3, r7, #8
 80023a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe ffad 	bl	800130c <resetResultStruct>


    unsigned char startTapete,readingState;


    while(key != MENU)
 80023b2:	bf00      	nop
 80023b4:	f000 bc3e 	b.w	8002c34 <initStateMachine+0x910>
    {
        switch(subMenuIniciar->menuState)
 80023b8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80023bc:	78db      	ldrb	r3, [r3, #3]
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	f200 8438 	bhi.w	8002c34 <initStateMachine+0x910>
 80023c4:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <initStateMachine+0xa8>)
 80023c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ca:	bf00      	nop
 80023cc:	08002401 	.word	0x08002401
 80023d0:	08002415 	.word	0x08002415
 80023d4:	080024af 	.word	0x080024af
 80023d8:	08002569 	.word	0x08002569
 80023dc:	08002669 	.word	0x08002669
 80023e0:	08002745 	.word	0x08002745
 80023e4:	08002843 	.word	0x08002843
 80023e8:	080028e3 	.word	0x080028e3
 80023ec:	0800294d 	.word	0x0800294d
 80023f0:	080029b9 	.word	0x080029b9
 80023f4:	08002a47 	.word	0x08002a47
 80023f8:	08002a77 	.word	0x08002a77
 80023fc:	08002b51 	.word	0x08002b51
        {
            case IDDLE:
                subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8002400:	2001      	movs	r0, #1
 8002402:	f001 f9b9 	bl	8003778 <getNextSub>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800240e:	70da      	strb	r2, [r3, #3]
                //RESET
            break;
 8002410:	f000 bc10 	b.w	8002c34 <initStateMachine+0x910>

            case COMM_OFF:
                updateUserMsg(0,0,noTransmissionMsg,&displayUpdateStatus);
 8002414:	4be5      	ldr	r3, [pc, #916]	; (80027ac <initStateMachine+0x488>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800241c:	2100      	movs	r1, #0
 800241e:	2000      	movs	r0, #0
 8002420:	f7ff fd0a 	bl	8001e38 <updateUserMsg>
                key = getKeyPressed();
 8002424:	f001 ff48 	bl	80042b8 <getKeyPressed>
 8002428:	4603      	mov	r3, r0
 800242a:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                if(key == AVANCAR)
 800242e:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002432:	2b41      	cmp	r3, #65	; 0x41
 8002434:	d112      	bne.n	800245c <initStateMachine+0x138>
                {
                	resetKeyPressed();
 8002436:	f001 ff4b 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800243a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800243e:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fd15 	bl	8001e74 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(COMM_ON);
 800244a:	2002      	movs	r0, #2
 800244c:	f001 f994 	bl	8003778 <getNextSub>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002458:	70da      	strb	r2, [r3, #3]
 800245a:	e3eb      	b.n	8002c34 <initStateMachine+0x910>
                }
                else if(key == CONFIRMAR)
 800245c:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002460:	2b43      	cmp	r3, #67	; 0x43
 8002462:	f040 83e7 	bne.w	8002c34 <initStateMachine+0x910>
                {
                	resetKeyPressed();
 8002466:	f001 ff33 	bl	80042d0 <resetKeyPressed>
                    stopCOMM();
 800246a:	f000 fc98 	bl	8002d9e <stopCOMM>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800246e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002472:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fcfb 	bl	8001e74 <readyUserInterface>
                    ptr_userConfiguration->userCommConfig = COMM_OFF;
 800247e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002482:	2201      	movs	r2, #1
 8002484:	74da      	strb	r2, [r3, #19]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8002486:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800248a:	3303      	adds	r3, #3
 800248c:	4618      	mov	r0, r3
 800248e:	f001 f985 	bl	800379c <setSelectSub>
 8002492:	4603      	mov	r3, r0
 8002494:	461a      	mov	r2, r3
 8002496:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800249a:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 800249c:	2003      	movs	r0, #3
 800249e:	f001 f96b 	bl	8003778 <getNextSub>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024aa:	70da      	strb	r2, [r3, #3]
                }
            break;
 80024ac:	e3c2      	b.n	8002c34 <initStateMachine+0x910>

            case COMM_ON:
				updateUserMsg(0,0,yesTransmissionMsg,&displayUpdateStatus);
 80024ae:	4bc0      	ldr	r3, [pc, #768]	; (80027b0 <initStateMachine+0x48c>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80024b6:	2100      	movs	r1, #0
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7ff fcbd 	bl	8001e38 <updateUserMsg>
				key = getKeyPressed();
 80024be:	f001 fefb 	bl	80042b8 <getKeyPressed>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                if(key == AVANCAR)
 80024c8:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80024cc:	2b41      	cmp	r3, #65	; 0x41
 80024ce:	d112      	bne.n	80024f6 <initStateMachine+0x1d2>
				{
                	resetKeyPressed();
 80024d0:	f001 fefe 	bl	80042d0 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 80024d4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80024d8:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fcc8 	bl	8001e74 <readyUserInterface>
					subMenuIniciar->menuState = getNextSub(COMM_OFF);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f001 f947 	bl	8003778 <getNextSub>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461a      	mov	r2, r3
 80024ee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024f2:	70da      	strb	r2, [r3, #3]
 80024f4:	e39e      	b.n	8002c34 <initStateMachine+0x910>
				}
                else if(key == CONFIRMAR)
 80024f6:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80024fa:	2b43      	cmp	r3, #67	; 0x43
 80024fc:	f040 839a 	bne.w	8002c34 <initStateMachine+0x910>
                {
                	resetKeyPressed();
 8002500:	f001 fee6 	bl	80042d0 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002504:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002508:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fcb0 	bl	8001e74 <readyUserInterface>
                    startCOMM();
 8002514:	f000 fc34 	bl	8002d80 <startCOMM>
                	updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 8002518:	4ba6      	ldr	r3, [pc, #664]	; (80027b4 <initStateMachine+0x490>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002520:	2100      	movs	r1, #0
 8002522:	2000      	movs	r0, #0
 8002524:	f7ff fc88 	bl	8001e38 <updateUserMsg>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002528:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800252c:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fc9e 	bl	8001e74 <readyUserInterface>
                     ptr_userConfiguration->userCommConfig = COMM_ON;
 8002538:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800253c:	2202      	movs	r2, #2
 800253e:	74da      	strb	r2, [r3, #19]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8002540:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002544:	3303      	adds	r3, #3
 8002546:	4618      	mov	r0, r3
 8002548:	f001 f928 	bl	800379c <setSelectSub>
 800254c:	4603      	mov	r3, r0
 800254e:	461a      	mov	r2, r3
 8002550:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002554:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 8002556:	2003      	movs	r0, #3
 8002558:	f001 f90e 	bl	8003778 <getNextSub>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002564:	70da      	strb	r2, [r3, #3]
                }
                break;
 8002566:	e365      	b.n	8002c34 <initStateMachine+0x910>

            case TEMPO_READ:
                updateUserMsg(0,0,timeUserMsg,&displayUpdateStatus);
 8002568:	4b93      	ldr	r3, [pc, #588]	; (80027b8 <initStateMachine+0x494>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002570:	2100      	movs	r1, #0
 8002572:	2000      	movs	r0, #0
 8002574:	f7ff fc60 	bl	8001e38 <updateUserMsg>
                userTimeStruct = getTimeStruct();
 8002578:	f7fe fd46 	bl	8001008 <getTimeStruct>
 800257c:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
                strftime(userTimeString, sizeof(userTimeString), "%H:%M:%S", userTimeStruct);
 8002580:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8002584:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002588:	4a8c      	ldr	r2, [pc, #560]	; (80027bc <initStateMachine+0x498>)
 800258a:	2109      	movs	r1, #9
 800258c:	f007 fb0e 	bl	8009bac <strftime>
                printDataDisplay(0,1,userTimeString);
 8002590:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002594:	461a      	mov	r2, r3
 8002596:	2101      	movs	r1, #1
 8002598:	2000      	movs	r0, #0
 800259a:	f000 fb7d 	bl	8002c98 <printDataDisplay>
                updateDataDisplay(insertColumn,1);
 800259e:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	; 0x18a
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2101      	movs	r1, #1
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fb90 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 80025ac:	f001 fe84 	bl	80042b8 <getKeyPressed>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == INSERIR)
 80025b6:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80025ba:	2b49      	cmp	r3, #73	; 0x49
 80025bc:	d10f      	bne.n	80025de <initStateMachine+0x2ba>
                {
                	resetKeyPressed();
 80025be:	f001 fe87 	bl	80042d0 <resetKeyPressed>
                    setUserTime(&insertColumn);
 80025c2:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fb96 	bl	8001cf8 <setUserTime>
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 80025cc:	2003      	movs	r0, #3
 80025ce:	f001 f8d3 	bl	8003778 <getNextSub>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80025da:	70da      	strb	r2, [r3, #3]
 80025dc:	e32a      	b.n	8002c34 <initStateMachine+0x910>
                }
                else if (key == AVANCAR)
 80025de:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80025e2:	2b41      	cmp	r3, #65	; 0x41
 80025e4:	d108      	bne.n	80025f8 <initStateMachine+0x2d4>
                {
                	resetKeyPressed();
 80025e6:	f001 fe73 	bl	80042d0 <resetKeyPressed>
                    indexColumn(&insertColumn,7);
 80025ea:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 80025ee:	2107      	movs	r1, #7
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe ff5d 	bl	80014b0 <indexColumn>
 80025f6:	e31d      	b.n	8002c34 <initStateMachine+0x910>
                }
                else if(key == CONFIRMAR)
 80025f8:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80025fc:	2b43      	cmp	r3, #67	; 0x43
 80025fe:	f040 8319 	bne.w	8002c34 <initStateMachine+0x910>
                {
                	resetKeyPressed();
 8002602:	f001 fe65 	bl	80042d0 <resetKeyPressed>
                	insertColumn = 4; //colocar um define talvez -> definicao de caracteres no display massa e overmass
 8002606:	2304      	movs	r3, #4
 8002608:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800260c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002610:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fc2c 	bl	8001e74 <readyUserInterface>
                    strftime(procTimeString, sizeof(procTimeString), "%H%M%S", userTimeStruct);
 800261c:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8002620:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002624:	4a66      	ldr	r2, [pc, #408]	; (80027c0 <initStateMachine+0x49c>)
 8002626:	2109      	movs	r1, #9
 8002628:	f007 fac0 	bl	8009bac <strftime>
                    ptr_userConfiguration->userTime = stringToLong(procTimeString);
 800262c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe ff78 	bl	8001526 <stringToLong>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800263e:	605a      	str	r2, [r3, #4]
                    //Configurar TIMER
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 8002640:	2004      	movs	r0, #4
 8002642:	f001 f899 	bl	8003778 <getNextSub>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800264e:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8002650:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002654:	3303      	adds	r3, #3
 8002656:	4618      	mov	r0, r3
 8002658:	f001 f8a0 	bl	800379c <setSelectSub>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002664:	705a      	strb	r2, [r3, #1]
                }
                break;
 8002666:	e2e5      	b.n	8002c34 <initStateMachine+0x910>

            case MASSA_READ:
                 updateUserMsg(0,0,massUserMsg,&displayUpdateStatus);
 8002668:	4b56      	ldr	r3, [pc, #344]	; (80027c4 <initStateMachine+0x4a0>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002670:	2100      	movs	r1, #0
 8002672:	2000      	movs	r0, #0
 8002674:	f7ff fbe0 	bl	8001e38 <updateUserMsg>
                 ptr_massString = getMassString();
 8002678:	f7ff f890 	bl	800179c <getMassString>
 800267c:	4603      	mov	r3, r0
 800267e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
                 printDataDisplay(0,1,ptr_massString);
 8002682:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8002686:	2101      	movs	r1, #1
 8002688:	2000      	movs	r0, #0
 800268a:	f000 fb05 	bl	8002c98 <printDataDisplay>
                 updateDataDisplay(insertColumn,1);
 800268e:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	; 0x18a
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2101      	movs	r1, #1
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fb18 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 800269c:	f001 fe0c 	bl	80042b8 <getKeyPressed>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                if(key == INSERIR)
 80026a6:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80026aa:	2b49      	cmp	r3, #73	; 0x49
 80026ac:	d10f      	bne.n	80026ce <initStateMachine+0x3aa>
                {
                	resetKeyPressed();
 80026ae:	f001 fe0f 	bl	80042d0 <resetKeyPressed>
                    setUserMass(&insertColumn); //criar variavel adicional para separar insertcolumn
 80026b2:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fa51 	bl	8001b5e <setUserMass>
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 80026bc:	2004      	movs	r0, #4
 80026be:	f001 f85b 	bl	8003778 <getNextSub>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80026ca:	70da      	strb	r2, [r3, #3]
 80026cc:	e2b2      	b.n	8002c34 <initStateMachine+0x910>
                }
                else if(key == AVANCAR)
 80026ce:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80026d2:	2b41      	cmp	r3, #65	; 0x41
 80026d4:	d107      	bne.n	80026e6 <initStateMachine+0x3c2>
                {
                	resetKeyPressed();
 80026d6:	f001 fdfb 	bl	80042d0 <resetKeyPressed>
                    indexMass(&insertColumn);
 80026da:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe ff45 	bl	800156e <indexMass>
 80026e4:	e2a6      	b.n	8002c34 <initStateMachine+0x910>
                }
                else if(key == CONFIRMAR)
 80026e6:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80026ea:	2b43      	cmp	r3, #67	; 0x43
 80026ec:	f040 82a2 	bne.w	8002c34 <initStateMachine+0x910>
                {
                	resetKeyPressed();
 80026f0:	f001 fdee 	bl	80042d0 <resetKeyPressed>
                	insertColumn = 4;
 80026f4:	2304      	movs	r3, #4
 80026f6:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80026fa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80026fe:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fbb5 	bl	8001e74 <readyUserInterface>
                    ptr_userConfiguration->userMass= stringToInt(ptr_massString);
 800270a:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 800270e:	f7fe ff1c 	bl	800154a <stringToInt>
 8002712:	4603      	mov	r3, r0
 8002714:	b2da      	uxtb	r2, r3
 8002716:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800271a:	721a      	strb	r2, [r3, #8]
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 800271c:	2005      	movs	r0, #5
 800271e:	f001 f82b 	bl	8003778 <getNextSub>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800272a:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 800272c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002730:	3303      	adds	r3, #3
 8002732:	4618      	mov	r0, r3
 8002734:	f001 f832 	bl	800379c <setSelectSub>
 8002738:	4603      	mov	r3, r0
 800273a:	461a      	mov	r2, r3
 800273c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002740:	705a      	strb	r2, [r3, #1]
                }
                break;
 8002742:	e277      	b.n	8002c34 <initStateMachine+0x910>

            case SOBREC_READ:
                updateUserMsg(0,0,overmassUserMsg,&displayUpdateStatus);
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <initStateMachine+0x4a4>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800274c:	2100      	movs	r1, #0
 800274e:	2000      	movs	r0, #0
 8002750:	f7ff fb72 	bl	8001e38 <updateUserMsg>
                ptr_overMassString = getOverMassString();
 8002754:	f7ff f848 	bl	80017e8 <getOverMassString>
 8002758:	4603      	mov	r3, r0
 800275a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
                printDataDisplay(0,1,ptr_overMassString);
 800275e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002762:	2101      	movs	r1, #1
 8002764:	2000      	movs	r0, #0
 8002766:	f000 fa97 	bl	8002c98 <printDataDisplay>
                updateDataDisplay(insertColumn,1);
 800276a:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	; 0x18a
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2101      	movs	r1, #1
 8002772:	4618      	mov	r0, r3
 8002774:	f000 faaa 	bl	8002ccc <updateDataDisplay>
                key = getKeyPressed();
 8002778:	f001 fd9e 	bl	80042b8 <getKeyPressed>
 800277c:	4603      	mov	r3, r0
 800277e:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == INSERIR)
 8002782:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002786:	2b49      	cmp	r3, #73	; 0x49
 8002788:	d120      	bne.n	80027cc <initStateMachine+0x4a8>
                {
                	resetKeyPressed();
 800278a:	f001 fda1 	bl	80042d0 <resetKeyPressed>
                    setUserOverMass(&insertColumn);
 800278e:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fa07 	bl	8001ba6 <setUserOverMass>
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 8002798:	2005      	movs	r0, #5
 800279a:	f000 ffed 	bl	8003778 <getNextSub>
 800279e:	4603      	mov	r3, r0
 80027a0:	461a      	mov	r2, r3
 80027a2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80027a6:	70da      	strb	r2, [r3, #3]
 80027a8:	e244      	b.n	8002c34 <initStateMachine+0x910>
 80027aa:	bf00      	nop
 80027ac:	2000001c 	.word	0x2000001c
 80027b0:	20000020 	.word	0x20000020
 80027b4:	20000024 	.word	0x20000024
 80027b8:	20000028 	.word	0x20000028
 80027bc:	0800ba8c 	.word	0x0800ba8c
 80027c0:	0800ba98 	.word	0x0800ba98
 80027c4:	2000002c 	.word	0x2000002c
 80027c8:	20000030 	.word	0x20000030
                }
                else if(key == AVANCAR)
 80027cc:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80027d0:	2b41      	cmp	r3, #65	; 0x41
 80027d2:	d107      	bne.n	80027e4 <initStateMachine+0x4c0>
                {
                	resetKeyPressed();
 80027d4:	f001 fd7c 	bl	80042d0 <resetKeyPressed>
                    indexMass(&insertColumn);
 80027d8:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fec6 	bl	800156e <indexMass>
 80027e2:	e227      	b.n	8002c34 <initStateMachine+0x910>
                }
                else if(key == CONFIRMAR)
 80027e4:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80027e8:	2b43      	cmp	r3, #67	; 0x43
 80027ea:	f040 8223 	bne.w	8002c34 <initStateMachine+0x910>
                {
                	resetKeyPressed();
 80027ee:	f001 fd6f 	bl	80042d0 <resetKeyPressed>
                	insertColumn = 7; //definicao de caracteres para TIME
 80027f2:	2307      	movs	r3, #7
 80027f4:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80027f8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80027fc:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fb36 	bl	8001e74 <readyUserInterface>
                    ptr_userConfiguration->userOverMass= stringToInt(ptr_overMassString);
 8002808:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800280c:	f7fe fe9d 	bl	800154a <stringToInt>
 8002810:	4603      	mov	r3, r0
 8002812:	b2da      	uxtb	r2, r3
 8002814:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002818:	725a      	strb	r2, [r3, #9]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 800281a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800281e:	3303      	adds	r3, #3
 8002820:	4618      	mov	r0, r3
 8002822:	f000 ffbb 	bl	800379c <setSelectSub>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800282e:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(START);
 8002830:	2006      	movs	r0, #6
 8002832:	f000 ffa1 	bl	8003778 <getNextSub>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800283e:	70da      	strb	r2, [r3, #3]
                }
                break;
 8002840:	e1f8      	b.n	8002c34 <initStateMachine+0x910>

            case START:
                setInsertData(ptr_userConfiguration);
 8002842:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8002846:	f000 ffbd 	bl	80037c4 <setInsertData>
                updateUserMsg(0,0,startreadUserMsg,&displayUpdateStatus);
 800284a:	4bd3      	ldr	r3, [pc, #844]	; (8002b98 <initStateMachine+0x874>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002852:	2100      	movs	r1, #0
 8002854:	2000      	movs	r0, #0
 8002856:	f7ff faef 	bl	8001e38 <updateUserMsg>
                printDataDisplay(0,1,userTimeString);
 800285a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800285e:	461a      	mov	r2, r3
 8002860:	2101      	movs	r1, #1
 8002862:	2000      	movs	r0, #0
 8002864:	f000 fa18 	bl	8002c98 <printDataDisplay>
                key = getKeyPressed();
 8002868:	f001 fd26 	bl	80042b8 <getKeyPressed>
 800286c:	4603      	mov	r3, r0
 800286e:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == CONFIRMAR)
 8002872:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002876:	2b43      	cmp	r3, #67	; 0x43
 8002878:	f040 81dc 	bne.w	8002c34 <initStateMachine+0x910>
                {
                	resetKeyPressed();
 800287c:	f001 fd28 	bl	80042d0 <resetKeyPressed>
                	startTapete = getUserSelectTapete();
 8002880:	f7fe fbb8 	bl	8000ff4 <getUserSelectTapete>
 8002884:	4603      	mov	r3, r0
 8002886:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
                	if(startTapete == TRUE) readingState = DENTRO;
 800288a:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 800288e:	2b01      	cmp	r3, #1
 8002890:	d103      	bne.n	800289a <initStateMachine+0x576>
 8002892:	2331      	movs	r3, #49	; 0x31
 8002894:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5
 8002898:	e002      	b.n	80028a0 <initStateMachine+0x57c>
                	else readingState = FORA;
 800289a:	2330      	movs	r3, #48	; 0x30
 800289c:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5

                    indexTest = getResultTestNumber();
 80028a0:	f7fe fca8 	bl	80011f4 <getResultTestNumber>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80028aa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80028ae:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fadd 	bl	8001e74 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(READING);
 80028ba:	2007      	movs	r0, #7
 80028bc:	f000 ff5c 	bl	8003778 <getNextSub>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028c8:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80028ca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028ce:	3303      	adds	r3, #3
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 ff63 	bl	800379c <setSelectSub>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028de:	705a      	strb	r2, [r3, #1]
                }
            break;
 80028e0:	e1a8      	b.n	8002c34 <initStateMachine+0x910>

            case READING:
            	 updateUserMsg(0,0,"READING...",&displayUpdateStatus);
 80028e2:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80028e6:	4aad      	ldr	r2, [pc, #692]	; (8002b9c <initStateMachine+0x878>)
 80028e8:	2100      	movs	r1, #0
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7ff faa4 	bl	8001e38 <updateUserMsg>
            	 startTM2();
 80028f0:	f000 f9b6 	bl	8002c60 <startTM2>
				 startTM3();
 80028f4:	f000 f9c2 	bl	8002c7c <startTM3>
//
//            	 while(key != PARAR)
//            	 {
            		 switch(readingState)
 80028f8:	f897 31a5 	ldrb.w	r3, [r7, #421]	; 0x1a5
 80028fc:	2b30      	cmp	r3, #48	; 0x30
 80028fe:	d002      	beq.n	8002906 <initStateMachine+0x5e2>
 8002900:	2b31      	cmp	r3, #49	; 0x31
 8002902:	d003      	beq.n	800290c <initStateMachine+0x5e8>
 8002904:	e005      	b.n	8002912 <initStateMachine+0x5ee>
					 {
						 case FORA:
							startReadingOutsideSensor();
 8002906:	f000 fe8d 	bl	8003624 <startReadingOutsideSensor>
						 break;
 800290a:	e002      	b.n	8002912 <initStateMachine+0x5ee>
						 case DENTRO:
							startReadingInsideSensor();
 800290c:	f000 ff2e 	bl	800376c <startReadingInsideSensor>
						 break;
 8002910:	bf00      	nop
					 }
            		 key = getKeyPressed();
 8002912:	f001 fcd1 	bl	80042b8 <getKeyPressed>
 8002916:	4603      	mov	r3, r0
 8002918:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				 3 - PRESSIONAR O BOTAO PARAR

				 */


				if(key == PARAR)
 800291c:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002920:	2b50      	cmp	r3, #80	; 0x50
 8002922:	f040 8187 	bne.w	8002c34 <initStateMachine+0x910>
				{
					resetKeyPressed();
 8002926:	f001 fcd3 	bl	80042d0 <resetKeyPressed>
					readyUserInterface(&displayUpdateStatus,cursorPosition);
 800292a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800292e:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fa9d 	bl	8001e74 <readyUserInterface>
					subMenuIniciar->menuState = getNextSub(STOP);
 800293a:	2008      	movs	r0, #8
 800293c:	f000 ff1c 	bl	8003778 <getNextSub>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002948:	70da      	strb	r2, [r3, #3]
				}
            break;
 800294a:	e173      	b.n	8002c34 <initStateMachine+0x910>

            case STOP:
                updateUserMsg(0,0,stopreadUserMsg,&displayUpdateStatus);
 800294c:	4b94      	ldr	r3, [pc, #592]	; (8002ba0 <initStateMachine+0x87c>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002954:	2100      	movs	r1, #0
 8002956:	2000      	movs	r0, #0
 8002958:	f7ff fa6e 	bl	8001e38 <updateUserMsg>
                key = getKeyPressed();
 800295c:	f001 fcac 	bl	80042b8 <getKeyPressed>
 8002960:	4603      	mov	r3, r0
 8002962:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == CONFIRMAR)
 8002966:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800296a:	2b43      	cmp	r3, #67	; 0x43
 800296c:	f040 8162 	bne.w	8002c34 <initStateMachine+0x910>
                {
//                	transmissionCOMM(&timer3Data);
//                	transmissionCOMM();
                	resetKeyPressed();
 8002970:	f001 fcae 	bl	80042d0 <resetKeyPressed>
                    stopTM2();
 8002974:	f000 f97b 	bl	8002c6e <stopTM2>
                    stopTM3();
 8002978:	f000 f987 	bl	8002c8a <stopTM3>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800297c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002980:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fa74 	bl	8001e74 <readyUserInterface>
                    //PARA LEITURA, DESLIGA TIMER, ENCODER, O QUE FOR I0_INTERFACE
//                    setUserResultData(&result[indexTest],indexTest,sampleCount);
                    setResultTestNumber();
 800298c:	f7fe fc3c 	bl	8001208 <setResultTestNumber>
                    subMenuIniciar->menuState = getNextSub(DISP_RESULTS);
 8002990:	2009      	movs	r0, #9
 8002992:	f000 fef1 	bl	8003778 <getNextSub>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800299e:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80029a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80029a4:	3303      	adds	r3, #3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fef8 	bl	800379c <setSelectSub>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80029b4:	705a      	strb	r2, [r3, #1]

                }
                break;
 80029b6:	e13d      	b.n	8002c34 <initStateMachine+0x910>

            case DISP_RESULTS:
                updateUserMsg(0,0,resultsUserMsg,&displayUpdateStatus);
 80029b8:	4b7a      	ldr	r3, [pc, #488]	; (8002ba4 <initStateMachine+0x880>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80029c0:	2100      	movs	r1, #0
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7ff fa38 	bl	8001e38 <updateUserMsg>
                key = getKeyPressed();
 80029c8:	f001 fc76 	bl	80042b8 <getKeyPressed>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == PARAR)
 80029d2:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80029d6:	2b50      	cmp	r3, #80	; 0x50
 80029d8:	d112      	bne.n	8002a00 <initStateMachine+0x6dc>
                {
                	resetKeyPressed();
 80029da:	f001 fc79 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80029de:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80029e2:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fa43 	bl	8001e74 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 80029ee:	200b      	movs	r0, #11
 80029f0:	f000 fec2 	bl	8003778 <getNextSub>
 80029f4:	4603      	mov	r3, r0
 80029f6:	461a      	mov	r2, r3
 80029f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80029fc:	70da      	strb	r2, [r3, #3]
 80029fe:	e119      	b.n	8002c34 <initStateMachine+0x910>
                }
                else if(key == CONFIRMAR)
 8002a00:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002a04:	2b43      	cmp	r3, #67	; 0x43
 8002a06:	f040 8115 	bne.w	8002c34 <initStateMachine+0x910>
                {
                	resetKeyPressed();
 8002a0a:	f001 fc61 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002a0e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002a12:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fa2b 	bl	8001e74 <readyUserInterface>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8002a1e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a22:	3303      	adds	r3, #3
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 feb9 	bl	800379c <setSelectSub>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a32:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(RESULTS);
 8002a34:	200a      	movs	r0, #10
 8002a36:	f000 fe9f 	bl	8003778 <getNextSub>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a42:	70da      	strb	r2, [r3, #3]
                }
            break;
 8002a44:	e0f6      	b.n	8002c34 <initStateMachine+0x910>
//                        i=0;
//                    }
//                    //
//                    subMenuIniciar->menuState = getNextSub(RESULTS);
//                }
                if(key == PARAR)
 8002a46:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002a4a:	2b50      	cmp	r3, #80	; 0x50
 8002a4c:	f040 80f2 	bne.w	8002c34 <initStateMachine+0x910>
                {
                	resetKeyPressed();
 8002a50:	f001 fc3e 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002a54:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002a58:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fa08 	bl	8001e74 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8002a64:	200b      	movs	r0, #11
 8002a66:	f000 fe87 	bl	8003778 <getNextSub>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a72:	70da      	strb	r2, [r3, #3]
                }

            break;
 8002a74:	e0de      	b.n	8002c34 <initStateMachine+0x910>

            case SAVE_DATA:
                updateUserMsg(0,0,saveUserMsg,&displayUpdateStatus);
 8002a76:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <initStateMachine+0x884>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7ff f9d9 	bl	8001e38 <updateUserMsg>
                key = getKeyPressed();
 8002a86:	f001 fc17 	bl	80042b8 <getKeyPressed>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == AVANCAR)
 8002a90:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002a94:	2b41      	cmp	r3, #65	; 0x41
 8002a96:	d11a      	bne.n	8002ace <initStateMachine+0x7aa>
                {
                	resetKeyPressed();
 8002a98:	f001 fc1a 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002a9c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002aa0:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f9e4 	bl	8001e74 <readyUserInterface>
                    updateUserMsg(0,0,cancelUserMsg,&displayUpdateStatus);
 8002aac:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <initStateMachine+0x888>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7ff f9be 	bl	8001e38 <updateUserMsg>
                    subMenuIniciar->menuState = getNextSub(CANCEL_SAVE);
 8002abc:	200c      	movs	r0, #12
 8002abe:	f000 fe5b 	bl	8003778 <getNextSub>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002aca:	70da      	strb	r2, [r3, #3]
 8002acc:	e0b2      	b.n	8002c34 <initStateMachine+0x910>
                }
                else if(key == CONFIRMAR)
 8002ace:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002ad2:	2b43      	cmp	r3, #67	; 0x43
 8002ad4:	f040 80ae 	bne.w	8002c34 <initStateMachine+0x910>
                {
                	resetKeyPressed();
 8002ad8:	f001 fbfa 	bl	80042d0 <resetKeyPressed>
                    save_data(indexTest);
 8002adc:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fcc9 	bl	8003478 <save_data>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002ae6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002aea:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002aee:	4611      	mov	r1, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff f9bf 	bl	8001e74 <readyUserInterface>
                    updateUserMsg(0,0,savedUserMsg,&displayUpdateStatus);
 8002af6:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <initStateMachine+0x88c>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002afe:	2100      	movs	r1, #0
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7ff f999 	bl	8001e38 <updateUserMsg>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8002b06:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b0a:	3303      	adds	r3, #3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fe45 	bl	800379c <setSelectSub>
 8002b12:	4603      	mov	r3, r0
 8002b14:	461a      	mov	r2, r3
 8002b16:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b1a:	705a      	strb	r2, [r3, #1]
                    //display
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f000 fe2b 	bl	8003778 <getNextSub>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b2a:	70da      	strb	r2, [r3, #3]
                    sampleCount = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
                    i=0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002b38:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002b3c:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f996 	bl	8001e74 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8002b48:	234d      	movs	r3, #77	; 0x4d
 8002b4a:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                }
            break;
 8002b4e:	e071      	b.n	8002c34 <initStateMachine+0x910>

            case CANCEL_SAVE:
                updateUserMsg(0,0,cancelUserMsg,&displayUpdateStatus);
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <initStateMachine+0x888>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002b58:	2100      	movs	r1, #0
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7ff f96c 	bl	8001e38 <updateUserMsg>
                key = getKeyPressed();
 8002b60:	f001 fbaa 	bl	80042b8 <getKeyPressed>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == AVANCAR)
 8002b6a:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002b6e:	2b41      	cmp	r3, #65	; 0x41
 8002b70:	d120      	bne.n	8002bb4 <initStateMachine+0x890>
                {
                	resetKeyPressed();
 8002b72:	f001 fbad 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002b76:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002b7a:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff f977 	bl	8001e74 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8002b86:	200b      	movs	r0, #11
 8002b88:	f000 fdf6 	bl	8003778 <getNextSub>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b94:	70da      	strb	r2, [r3, #3]
 8002b96:	e04c      	b.n	8002c32 <initStateMachine+0x90e>
 8002b98:	20000034 	.word	0x20000034
 8002b9c:	0800baa0 	.word	0x0800baa0
 8002ba0:	20000038 	.word	0x20000038
 8002ba4:	2000003c 	.word	0x2000003c
 8002ba8:	20000040 	.word	0x20000040
 8002bac:	20000048 	.word	0x20000048
 8002bb0:	20000044 	.word	0x20000044
                }
                else if(key == CONFIRMAR)
 8002bb4:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002bb8:	2b43      	cmp	r3, #67	; 0x43
 8002bba:	d13a      	bne.n	8002c32 <initStateMachine+0x90e>
                {
                	resetKeyPressed();
 8002bbc:	f001 fb88 	bl	80042d0 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002bc0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002bc4:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f952 	bl	8001e74 <readyUserInterface>
                    updateUserMsg(0,0,canceledUserMsg,&displayUpdateStatus);
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <initStateMachine+0x938>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002bd8:	2100      	movs	r1, #0
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7ff f92c 	bl	8001e38 <updateUserMsg>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8002be0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002be4:	3303      	adds	r3, #3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fdd8 	bl	800379c <setSelectSub>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002bf4:	705a      	strb	r2, [r3, #1]
                    sampleCount = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
                    i=0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
                    indexTest++;
 8002c02:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8002c06:	3301      	adds	r3, #1
 8002c08:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
                    //
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f000 fdb3 	bl	8003778 <getNextSub>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c1a:	70da      	strb	r2, [r3, #3]
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002c1c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002c20:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f924 	bl	8001e74 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8002c2c:	234d      	movs	r3, #77	; 0x4d
 8002c2e:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                }
            break;
 8002c32:	bf00      	nop
    while(key != MENU)
 8002c34:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002c38:	2b4d      	cmp	r3, #77	; 0x4d
 8002c3a:	f47f abbd 	bne.w	80023b8 <initStateMachine+0x94>
        }
    }
    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002c3e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002c42:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f913 	bl	8001e74 <readyUserInterface>
}
 8002c4e:	bf00      	nop
 8002c50:	4618      	mov	r0, r3
 8002c52:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000004c 	.word	0x2000004c

08002c60 <startTM2>:
    unsigned char thereAreData;
    struct samples Measurement[MEASUREMENT_SIZE];
};

unsigned char startTM2(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
        SET_HW_TIMER2();
 8002c64:	f000 fdbc 	bl	80037e0 <SET_HW_TIMER2>
}
 8002c68:	bf00      	nop
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <stopTM2>:

unsigned char stopTM2(void)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	af00      	add	r7, sp, #0
    RESET_HW_TIMER2();
 8002c72:	f000 fdd7 	bl	8003824 <RESET_HW_TIMER2>
}
 8002c76:	bf00      	nop
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <startTM3>:

unsigned char startTM3(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
        SET_HW_TIMER3();
 8002c80:	f000 fdee 	bl	8003860 <SET_HW_TIMER3>
}
 8002c84:	bf00      	nop
 8002c86:	4618      	mov	r0, r3
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <stopTM3>:

unsigned char stopTM3(void)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	af00      	add	r7, sp, #0
    RESET_HW_TIMER3();
 8002c8e:	f000 fe09 	bl	80038a4 <RESET_HW_TIMER3>
}
 8002c92:	bf00      	nop
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <printDataDisplay>:
{
//    RESET_HARDWARE();
}

unsigned char printDataDisplay(unsigned char col, unsigned char linha,unsigned char* userData)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	603a      	str	r2, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	71bb      	strb	r3, [r7, #6]
    HW_PRINT_DATA(col, linha,userData);
 8002ca8:	79b9      	ldrb	r1, [r7, #6]
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f884 	bl	8002dbc <HW_PRINT_DATA>
}
 8002cb4:	bf00      	nop
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <eraseDataDisplay>:
	HW_INSERT_DATA(col, linha,userData);
}


unsigned char eraseDataDisplay()
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	af00      	add	r7, sp, #0
    HW_ERASE_DATA();
 8002cc2:	f000 f897 	bl	8002df4 <HW_ERASE_DATA>
}
 8002cc6:	bf00      	nop
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <updateDataDisplay>:

unsigned char updateDataDisplay(unsigned char col, unsigned char linha)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460a      	mov	r2, r1
 8002cd6:	71fb      	strb	r3, [r7, #7]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71bb      	strb	r3, [r7, #6]
	HW_UPDATE_DATA(col,linha);
 8002cdc:	79ba      	ldrb	r2, [r7, #6]
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f890 	bl	8002e08 <HW_UPDATE_DATA>
}
 8002ce8:	bf00      	nop
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <homeDataDisplay>:

unsigned char homeDataDisplay(unsigned char* appName,unsigned char* companyName,unsigned char* appVersion)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
//    printf("%s\n",appName);
//    printf("%s\n",companyName);
//    printf("%s\n",appVersion);
    HW_HOME_DISP(appName,companyName,appVersion);
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f8a0 	bl	8002e48 <HW_HOME_DISP>

}
 8002d08:	bf00      	nop
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <load_SD_card>:
{
//    HW_EXT_MEMORY_CHECK();
}

unsigned char* load_SD_card(unsigned char numTeste)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71fb      	strb	r3, [r7, #7]
     unsigned char (*ptr_loadStringResult)[MAX_LINES][MAX_LEN];
     unsigned char loadStringResult;
     unsigned char line = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	75fb      	strb	r3, [r7, #23]
     unsigned char column = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	75bb      	strb	r3, [r7, #22]
     unsigned char count = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	72fb      	strb	r3, [r7, #11]
     unsigned char* ptr_loadName = getArqName(numTeste);
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fc38 	bl	80035a0 <getArqName>
 8002d30:	4603      	mov	r3, r0
 8002d32:	613b      	str	r3, [r7, #16]
     count = lineCounter(numTeste);
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fc46 	bl	80035c8 <lineCounter>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	72fb      	strb	r3, [r7, #11]
     setFileLineCounter(&count);
 8002d42:	f107 030b 	add.w	r3, r7, #11
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fb7c 	bl	8003444 <setFileLineCounter>
//        }
//    }
//
////
//    fclose(ptr_file);
    return ptr_loadStringResult;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <save_SD_card>:

unsigned char save_SD_card(unsigned char* dataToSave, unsigned char numTeste)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	70fb      	strb	r3, [r7, #3]
    unsigned char* ptr_saveName = getArqName(numTeste);
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fc1b 	bl	80035a0 <getArqName>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	617b      	str	r3, [r7, #20]
    struct results* saveStruct = dataToSave;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	613b      	str	r3, [r7, #16]
    unsigned char sampleToSave = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
//    }
//    fclose(ptr_file);



}
 8002d76:	bf00      	nop
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <startCOMM>:

unsigned char startCOMM()
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
//    printf("SET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8002d86:	f001 fab1 	bl	80042ec <getUARTInstance>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	607b      	str	r3, [r7, #4]
	SET_HW_UART(uartInstance);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fda4 	bl	80038dc <SET_HW_UART>
}
 8002d94:	bf00      	nop
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <stopCOMM>:

unsigned char stopCOMM()
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
//    printf("RESET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8002da4:	f001 faa2 	bl	80042ec <getUARTInstance>
 8002da8:	4603      	mov	r3, r0
 8002daa:	607b      	str	r3, [r7, #4]
	RESET_HW_UART(uartInstance);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fda9 	bl	8003904 <RESET_HW_UART>
}
 8002db2:	bf00      	nop
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HW_PRINT_DATA>:
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	603a      	str	r2, [r7, #0]
 8002dc6:	71fb      	strb	r3, [r7, #7]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	71bb      	strb	r3, [r7, #6]
 8002dcc:	79ba      	ldrb	r2, [r7, #6]
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4807      	ldr	r0, [pc, #28]	; (8002df0 <HW_PRINT_DATA+0x34>)
 8002dd4:	f000 fb06 	bl	80033e4 <setCursor>
 8002dd8:	20fa      	movs	r0, #250	; 0xfa
 8002dda:	f002 fa7d 	bl	80052d8 <HAL_Delay>
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	4803      	ldr	r0, [pc, #12]	; (8002df0 <HW_PRINT_DATA+0x34>)
 8002de2:	f000 f95b 	bl	800309c <print>
 8002de6:	bf00      	nop
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	2000044c 	.word	0x2000044c

08002df4 <HW_ERASE_DATA>:
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <HW_ERASE_DATA+0x10>)
 8002dfa:	f000 f971 	bl	80030e0 <clear>
 8002dfe:	bf00      	nop
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000044c 	.word	0x2000044c

08002e08 <HW_UPDATE_DATA>:
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	460a      	mov	r2, r1
 8002e12:	71fb      	strb	r3, [r7, #7]
 8002e14:	4613      	mov	r3, r2
 8002e16:	71bb      	strb	r3, [r7, #6]
 8002e18:	79ba      	ldrb	r2, [r7, #6]
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4809      	ldr	r0, [pc, #36]	; (8002e44 <HW_UPDATE_DATA+0x3c>)
 8002e20:	f000 fae0 	bl	80033e4 <setCursor>
 8002e24:	4807      	ldr	r0, [pc, #28]	; (8002e44 <HW_UPDATE_DATA+0x3c>)
 8002e26:	f000 f99a 	bl	800315e <cursor>
 8002e2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e2e:	f002 fa53 	bl	80052d8 <HAL_Delay>
 8002e32:	4804      	ldr	r0, [pc, #16]	; (8002e44 <HW_UPDATE_DATA+0x3c>)
 8002e34:	f000 f97b 	bl	800312e <noCursor>
 8002e38:	bf00      	nop
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	2000044c 	.word	0x2000044c

08002e48 <HW_HOME_DISP>:
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	2304      	movs	r3, #4
 8002e56:	2204      	movs	r2, #4
 8002e58:	2110      	movs	r1, #16
 8002e5a:	4812      	ldr	r0, [pc, #72]	; (8002ea4 <HW_HOME_DISP+0x5c>)
 8002e5c:	f000 f824 	bl	8002ea8 <begin>
 8002e60:	2200      	movs	r2, #0
 8002e62:	2100      	movs	r1, #0
 8002e64:	480f      	ldr	r0, [pc, #60]	; (8002ea4 <HW_HOME_DISP+0x5c>)
 8002e66:	f000 fabd 	bl	80033e4 <setCursor>
 8002e6a:	68f9      	ldr	r1, [r7, #12]
 8002e6c:	480d      	ldr	r0, [pc, #52]	; (8002ea4 <HW_HOME_DISP+0x5c>)
 8002e6e:	f000 f915 	bl	800309c <print>
 8002e72:	2201      	movs	r2, #1
 8002e74:	2100      	movs	r1, #0
 8002e76:	480b      	ldr	r0, [pc, #44]	; (8002ea4 <HW_HOME_DISP+0x5c>)
 8002e78:	f000 fab4 	bl	80033e4 <setCursor>
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	4809      	ldr	r0, [pc, #36]	; (8002ea4 <HW_HOME_DISP+0x5c>)
 8002e80:	f000 f90c 	bl	800309c <print>
 8002e84:	2203      	movs	r2, #3
 8002e86:	2100      	movs	r1, #0
 8002e88:	4806      	ldr	r0, [pc, #24]	; (8002ea4 <HW_HOME_DISP+0x5c>)
 8002e8a:	f000 faab 	bl	80033e4 <setCursor>
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <HW_HOME_DISP+0x5c>)
 8002e92:	f000 f903 	bl	800309c <print>
 8002e96:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <HW_HOME_DISP+0x5c>)
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	2000044c 	.word	0x2000044c

08002ea8 <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	4608      	mov	r0, r1
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	70fb      	strb	r3, [r7, #3]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	70bb      	strb	r3, [r7, #2]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 8002ec2:	f107 0308 	add.w	r3, r7, #8
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f107 0308 	add.w	r3, r7, #8
 8002ed4:	cb03      	ldmia	r3!, {r0, r1}
 8002ed6:	6010      	str	r0, [r2, #0]
 8002ed8:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8002eda:	2200      	movs	r2, #0
 8002edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee0:	486c      	ldr	r0, [pc, #432]	; (8003094 <begin+0x1ec>)
 8002ee2:	f002 ff4d 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002eec:	4869      	ldr	r0, [pc, #420]	; (8003094 <begin+0x1ec>)
 8002eee:	f002 ff47 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ef8:	4866      	ldr	r0, [pc, #408]	; (8003094 <begin+0x1ec>)
 8002efa:	f002 ff41 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8002efe:	2200      	movs	r2, #0
 8002f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f04:	4863      	ldr	r0, [pc, #396]	; (8003094 <begin+0x1ec>)
 8002f06:	f002 ff3b 	bl	8005d80 <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2108      	movs	r1, #8
 8002f0e:	4861      	ldr	r0, [pc, #388]	; (8003094 <begin+0x1ec>)
 8002f10:	f002 ff36 	bl	8005d80 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8002f14:	2200      	movs	r2, #0
 8002f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f1a:	485f      	ldr	r0, [pc, #380]	; (8003098 <begin+0x1f0>)
 8002f1c:	f002 ff30 	bl	8005d80 <HAL_GPIO_WritePin>

	#if defined(LCD_8BITMODE)
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,GPIO_PIN_RESET);
 8002f20:	2200      	movs	r2, #0
 8002f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f26:	485c      	ldr	r0, [pc, #368]	; (8003098 <begin+0x1f0>)
 8002f28:	f002 ff2a 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,GPIO_PIN_RESET);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f32:	4859      	ldr	r0, [pc, #356]	; (8003098 <begin+0x1f0>)
 8002f34:	f002 ff24 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,GPIO_PIN_RESET);
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f3e:	4856      	ldr	r0, [pc, #344]	; (8003098 <begin+0x1f0>)
 8002f40:	f002 ff1e 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,GPIO_PIN_RESET);
 8002f44:	2200      	movs	r2, #0
 8002f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f4a:	4853      	ldr	r0, [pc, #332]	; (8003098 <begin+0x1f0>)
 8002f4c:	f002 ff18 	bl	8005d80 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8002f50:	2200      	movs	r2, #0
 8002f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f56:	4850      	ldr	r0, [pc, #320]	; (8003098 <begin+0x1f0>)
 8002f58:	f002 ff12 	bl	8005d80 <HAL_GPIO_WritePin>
	#endif

	if (lines > 1) {
 8002f5c:	78bb      	ldrb	r3, [r7, #2]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d906      	bls.n	8002f70 <begin+0xc8>
		lcd->_displayfunction |= LCD_2LINE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	f043 0308 	orr.w	r3, r3, #8
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	78ba      	ldrb	r2, [r7, #2]
 8002f74:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	3340      	adds	r3, #64	; 0x40
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	2240      	movs	r2, #64	; 0x40
 8002f82:	2100      	movs	r1, #0
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fa11 	bl	80033ac <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8002f8a:	787b      	ldrb	r3, [r7, #1]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d009      	beq.n	8002fa4 <begin+0xfc>
 8002f90:	78bb      	ldrb	r3, [r7, #2]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d106      	bne.n	8002fa4 <begin+0xfc>
		lcd->_displayfunction |= LCD_5x10DOTS;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 8002fa4:	2032      	movs	r0, #50	; 0x32
 8002fa6:	f002 f997 	bl	80052d8 <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2108      	movs	r1, #8
 8002fae:	4839      	ldr	r0, [pc, #228]	; (8003094 <begin+0x1ec>)
 8002fb0:	f002 fee6 	bl	8005d80 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fba:	4837      	ldr	r0, [pc, #220]	; (8003098 <begin+0x1f0>)
 8002fbc:	f002 fee0 	bl	8005d80 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fc6:	4834      	ldr	r0, [pc, #208]	; (8003098 <begin+0x1f0>)
 8002fc8:	f002 feda 	bl	8005d80 <HAL_GPIO_WritePin>
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <begin+0x158>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	f000 f933 	bl	8003240 <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 8002fda:	2005      	movs	r0, #5
 8002fdc:	f002 f97c 	bl	80052d8 <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 8002fe0:	2003      	movs	r0, #3
 8002fe2:	f000 f92d 	bl	8003240 <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 8002fe6:	2005      	movs	r0, #5
 8002fe8:	f002 f976 	bl	80052d8 <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 8002fec:	2003      	movs	r0, #3
 8002fee:	f000 f927 	bl	8003240 <write4bits>
		HAL_Delay(5);
 8002ff2:	2005      	movs	r0, #5
 8002ff4:	f002 f970 	bl	80052d8 <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 8002ff8:	2002      	movs	r0, #2
 8002ffa:	f000 f921 	bl	8003240 <write4bits>
 8002ffe:	e023      	b.n	8003048 <begin+0x1a0>

		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 23, pg 45 

		// Envia sequência de comando
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	f043 0320 	orr.w	r3, r3, #32
 8003008:	b2db      	uxtb	r3, r3
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f9bd 	bl	800338c <command>
		HAL_Delay(6);  // wait more than 4.1 ms
 8003012:	2006      	movs	r0, #6
 8003014:	f002 f960 	bl	80052d8 <HAL_Delay>

		// Segundo envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	f043 0320 	orr.w	r3, r3, #32
 8003020:	b2db      	uxtb	r3, r3
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f9b1 	bl	800338c <command>
		HAL_Delay(1);
 800302a:	2001      	movs	r0, #1
 800302c:	f002 f954 	bl	80052d8 <HAL_Delay>

		// Terceiro envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	f043 0320 	orr.w	r3, r3, #32
 8003038:	b2db      	uxtb	r3, r3
 800303a:	4619      	mov	r1, r3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f9a5 	bl	800338c <command>
		HAL_Delay(1);
 8003042:	2001      	movs	r0, #1
 8003044:	f002 f948 	bl	80052d8 <HAL_Delay>
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	f043 0320 	orr.w	r3, r3, #32
 8003050:	b2db      	uxtb	r3, r3
 8003052:	4619      	mov	r1, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f999 	bl	800338c <command>
    HAL_Delay(1);
 800305a:	2001      	movs	r0, #1
 800305c:	f002 f93c 	bl	80052d8 <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2204      	movs	r2, #4
 8003064:	705a      	strb	r2, [r3, #1]
    display(lcd);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f849 	bl	80030fe <display>

    // Limpa display
    clear(lcd);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f837 	bl	80030e0 <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	789b      	ldrb	r3, [r3, #2]
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f981 	bl	800338c <command>
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40010c00 	.word	0x40010c00
 8003098:	40010800 	.word	0x40010800

0800309c <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 80030a6:	6838      	ldr	r0, [r7, #0]
 80030a8:	f7fd f850 	bl	800014c <strlen>
 80030ac:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]
 80030b2:	e00c      	b.n	80030ce <print+0x32>
		write(lcd ,*(value+i));
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	4413      	add	r3, r2
 80030ba:	f993 3000 	ldrsb.w	r3, [r3]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	4619      	mov	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f863 	bl	800318e <write>
	for (uint8_t i = 0; i < Lengh; i++){
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	3301      	adds	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d8ee      	bhi.n	80030b4 <print+0x18>
	}
}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 80030e8:	2101      	movs	r1, #1
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f94e 	bl	800338c <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 80030f0:	2002      	movs	r0, #2
 80030f2:	f002 f8f1 	bl	80052d8 <HAL_Delay>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	785b      	ldrb	r3, [r3, #1]
 800310a:	f043 0304 	orr.w	r3, r3, #4
 800310e:	b2da      	uxtb	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	785b      	ldrb	r3, [r3, #1]
 8003118:	f043 0308 	orr.w	r3, r3, #8
 800311c:	b2db      	uxtb	r3, r3
 800311e:	4619      	mov	r1, r3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f933 	bl	800338c <command>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <noCursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void noCursor(LiquidCrystal *lcd){
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol &= ~LCD_CURSORON;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	785b      	ldrb	r3, [r3, #1]
 800313a:	f023 0302 	bic.w	r3, r3, #2
 800313e:	b2da      	uxtb	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	785b      	ldrb	r3, [r3, #1]
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	b2db      	uxtb	r3, r3
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f91b 	bl	800338c <command>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <cursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void cursor(LiquidCrystal *lcd){
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol |= LCD_CURSORON;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	785b      	ldrb	r3, [r3, #1]
 800316a:	f043 0302 	orr.w	r3, r3, #2
 800316e:	b2da      	uxtb	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	f043 0308 	orr.w	r3, r3, #8
 800317c:	b2db      	uxtb	r3, r3
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f903 	bl	800338c <command>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	2201      	movs	r2, #1
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f805 	bl	80031b0 <send>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	70fb      	strb	r3, [r7, #3]
 80031bc:	4613      	mov	r3, r2
 80031be:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 80031c0:	78bb      	ldrb	r3, [r7, #2]
 80031c2:	461a      	mov	r2, r3
 80031c4:	2108      	movs	r1, #8
 80031c6:	4811      	ldr	r0, [pc, #68]	; (800320c <send+0x5c>)
 80031c8:	f002 fdda 	bl	8005d80 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 80031cc:	2200      	movs	r2, #0
 80031ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031d2:	480f      	ldr	r0, [pc, #60]	; (8003210 <send+0x60>)
 80031d4:	f002 fdd4 	bl	8005d80 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <send+0x3e>
	    write8bits(value);
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f866 	bl	80032b8 <write8bits>
	    write4bits(value);
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 80031ec:	e009      	b.n	8003202 <send+0x52>
	    write4bits(value>>4);
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 f823 	bl	8003240 <write4bits>
	    write4bits(value);
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f81f 	bl	8003240 <write4bits>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40010c00 	.word	0x40010c00
 8003210:	40010800 	.word	0x40010800

08003214 <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8003218:	2201      	movs	r2, #1
 800321a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800321e:	4807      	ldr	r0, [pc, #28]	; (800323c <pulseEnable+0x28>)
 8003220:	f002 fdae 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003224:	2001      	movs	r0, #1
 8003226:	f002 f857 	bl	80052d8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 800322a:	2200      	movs	r2, #0
 800322c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003230:	4802      	ldr	r0, [pc, #8]	; (800323c <pulseEnable+0x28>)
 8003232:	f002 fda5 	bl	8005d80 <HAL_GPIO_WritePin>
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40010800 	.word	0x40010800

08003240 <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003258:	4816      	ldr	r0, [pc, #88]	; (80032b4 <write4bits+0x74>)
 800325a:	f002 fd91 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003270:	4810      	ldr	r0, [pc, #64]	; (80032b4 <write4bits+0x74>)
 8003272:	f002 fd85 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003288:	480a      	ldr	r0, [pc, #40]	; (80032b4 <write4bits+0x74>)
 800328a:	f002 fd79 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	08db      	lsrs	r3, r3, #3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032a0:	4804      	ldr	r0, [pc, #16]	; (80032b4 <write4bits+0x74>)
 80032a2:	f002 fd6d 	bl	8005d80 <HAL_GPIO_WritePin>

	pulseEnable();
 80032a6:	f7ff ffb5 	bl	8003214 <pulseEnable>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40010c00 	.word	0x40010c00

080032b8 <write8bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write8bits(uint8_t value){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,(value >> 0) & 0x01);
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032d0:	482c      	ldr	r0, [pc, #176]	; (8003384 <write8bits+0xcc>)
 80032d2:	f002 fd55 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,(value >> 1) & 0x01);
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032e8:	4826      	ldr	r0, [pc, #152]	; (8003384 <write8bits+0xcc>)
 80032ea:	f002 fd49 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,(value >> 2) & 0x01);
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003300:	4820      	ldr	r0, [pc, #128]	; (8003384 <write8bits+0xcc>)
 8003302:	f002 fd3d 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,(value >> 3) & 0x01);
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	08db      	lsrs	r3, r3, #3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003318:	481a      	ldr	r0, [pc, #104]	; (8003384 <write8bits+0xcc>)
 800331a:	f002 fd31 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 4) & 0x01);
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003330:	4815      	ldr	r0, [pc, #84]	; (8003388 <write8bits+0xd0>)
 8003332:	f002 fd25 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 5) & 0x01);
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003348:	480f      	ldr	r0, [pc, #60]	; (8003388 <write8bits+0xd0>)
 800334a:	f002 fd19 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 6) & 0x01);
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003360:	4809      	ldr	r0, [pc, #36]	; (8003388 <write8bits+0xd0>)
 8003362:	f002 fd0d 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 7) & 0x01);
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	09db      	lsrs	r3, r3, #7
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003372:	4805      	ldr	r0, [pc, #20]	; (8003388 <write8bits+0xd0>)
 8003374:	f002 fd04 	bl	8005d80 <HAL_GPIO_WritePin>

	pulseEnable();
 8003378:	f7ff ff4c 	bl	8003214 <pulseEnable>

}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40010800 	.word	0x40010800
 8003388:	40010c00 	.word	0x40010c00

0800338c <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	2200      	movs	r2, #0
 800339c:	4619      	mov	r1, r3
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ff06 	bl	80031b0 <send>
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	71da      	strb	r2, [r3, #7]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	70fb      	strb	r3, [r7, #3]
 80033f0:	4613      	mov	r3, r2
 80033f2:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 80033f4:	2304      	movs	r3, #4
 80033f6:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 80033f8:	78bb      	ldrb	r3, [r7, #2]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d803      	bhi.n	8003408 <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	78db      	ldrb	r3, [r3, #3]
 800340c:	78ba      	ldrb	r2, [r7, #2]
 800340e:	429a      	cmp	r2, r3
 8003410:	d303      	bcc.n	800341a <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	78db      	ldrb	r3, [r3, #3]
 8003416:	3b01      	subs	r3, #1
 8003418:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 800341a:	78bb      	ldrb	r3, [r7, #2]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4413      	add	r3, r2
 8003420:	791a      	ldrb	r2, [r3, #4]
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	4413      	add	r3, r2
 8003426:	b2db      	uxtb	r3, r3
 8003428:	b25b      	sxtb	r3, r3
 800342a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800342e:	b25b      	sxtb	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ffa9 	bl	800338c <command>
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <setFileLineCounter>:
            dataToSave->sampleMeasurement[sample].uiSoloTime);
    return stringToSave;
}

unsigned char setFileLineCounter(unsigned char* count)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
    loadFileLineCounter = *count;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	781a      	ldrb	r2, [r3, #0]
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <setFileLineCounter+0x1c>)
 8003452:	701a      	strb	r2, [r3, #0]
}
 8003454:	bf00      	nop
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	20000454 	.word	0x20000454

08003464 <getFileLineCounter>:

unsigned char getFileLineCounter()
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
    return loadFileLineCounter;
 8003468:	4b02      	ldr	r3, [pc, #8]	; (8003474 <getFileLineCounter+0x10>)
 800346a:	781b      	ldrb	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	20000454 	.word	0x20000454

08003478 <save_data>:

unsigned char save_data(unsigned char numTest)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
    numTest++;
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	3301      	adds	r3, #1
 8003486:	71fb      	strb	r3, [r7, #7]
    struct results* ptr_resultDataSave;
    ptr_resultDataSave = getUserResultData(numTest);
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd fea0 	bl	80011d0 <getUserResultData>
 8003490:	60f8      	str	r0, [r7, #12]
    //TESTE SD
    ptr_resultDataSave->resultTestAcquiredSamples = 1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	705a      	strb	r2, [r3, #1]
    ptr_resultDataSave->sampleMeasurement[0].sampleNum = 1;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	711a      	strb	r2, [r3, #4]
    ptr_resultDataSave->sampleMeasurement[0].uiVooTime = 3;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2203      	movs	r2, #3
 80034a2:	609a      	str	r2, [r3, #8]
    ptr_resultDataSave->sampleMeasurement[0].uiSoloTime = 4;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2204      	movs	r2, #4
 80034a8:	60da      	str	r2, [r3, #12]
    //TESTE SD
    save_SD_card(ptr_resultDataSave,numTest);
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	4619      	mov	r1, r3
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff fc51 	bl	8002d56 <save_SD_card>
}
 80034b4:	bf00      	nop
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <load_data>:

unsigned char* load_data(unsigned char numTest)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	71fb      	strb	r3, [r7, #7]
    unsigned char* ptr_dataLoad;
    struct results* ptr_resultLoadStruct;
    ptr_dataLoad = load_SD_card(numTest);
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fc21 	bl	8002d12 <load_SD_card>
 80034d0:	4603      	mov	r3, r0
 80034d2:	60fb      	str	r3, [r7, #12]
    ptr_resultLoadStruct = loadDataArrayToStruct(ptr_dataLoad);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f807 	bl	80034e8 <loadDataArrayToStruct>
 80034da:	60b8      	str	r0, [r7, #8]
    return ptr_resultLoadStruct;
 80034dc:	68bb      	ldr	r3, [r7, #8]

}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <loadDataArrayToStruct>:

unsigned char* loadDataArrayToStruct(unsigned char* data)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
    static struct results loadedResults; //
    struct results* ptr_loadedResults = &loadedResults;
 80034f0:	4b2a      	ldr	r3, [pc, #168]	; (800359c <loadDataArrayToStruct+0xb4>)
 80034f2:	613b      	str	r3, [r7, #16]

    unsigned char (*loadData)[MAX_LINES][MAX_LEN] = data;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	60fb      	str	r3, [r7, #12]
    unsigned char numTeste = getResultTestNumber();
 80034f8:	f7fd fe7c 	bl	80011f4 <getResultTestNumber>
 80034fc:	4603      	mov	r3, r0
 80034fe:	72fb      	strb	r3, [r7, #11]
    unsigned char samplesCounter = getFileLineCounter();
 8003500:	f7ff ffb0 	bl	8003464 <getFileLineCounter>
 8003504:	4603      	mov	r3, r0
 8003506:	72bb      	strb	r3, [r7, #10]

    ptr_loadedResults->resultTestNum = numTeste;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	7afa      	ldrb	r2, [r7, #11]
 800350c:	701a      	strb	r2, [r3, #0]
    ptr_loadedResults->resultTestAcquiredSamples = samplesCounter;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	7aba      	ldrb	r2, [r7, #10]
 8003512:	705a      	strb	r2, [r3, #1]

    for(unsigned char samples = 0; samples<samplesCounter;samples++)
 8003514:	2300      	movs	r3, #0
 8003516:	75fb      	strb	r3, [r7, #23]
 8003518:	e037      	b.n	800358a <loadDataArrayToStruct+0xa2>
    {
        ptr_loadedResults->sampleMeasurement[samples].sampleNum = (*loadData)[samples][0];
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	7dfa      	ldrb	r2, [r7, #23]
 800351e:	68f9      	ldr	r1, [r7, #12]
 8003520:	2064      	movs	r0, #100	; 0x64
 8003522:	fb00 f303 	mul.w	r3, r0, r3
 8003526:	440b      	add	r3, r1
 8003528:	7818      	ldrb	r0, [r3, #0]
 800352a:	6939      	ldr	r1, [r7, #16]
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	3304      	adds	r3, #4
 8003538:	4602      	mov	r2, r0
 800353a:	701a      	strb	r2, [r3, #0]
        ptr_loadedResults->sampleMeasurement[samples].uiVooTime = (*loadData)[samples][1];
 800353c:	7dfb      	ldrb	r3, [r7, #23]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	2164      	movs	r1, #100	; 0x64
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	3301      	adds	r3, #1
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	7dfa      	ldrb	r2, [r7, #23]
 800354e:	4618      	mov	r0, r3
 8003550:	6939      	ldr	r1, [r7, #16]
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3308      	adds	r3, #8
 800355e:	6018      	str	r0, [r3, #0]
        ptr_loadedResults->sampleMeasurement[samples].uiSoloTime = (*loadData)[samples][2];
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	2164      	movs	r1, #100	; 0x64
 8003566:	fb01 f303 	mul.w	r3, r1, r3
 800356a:	4413      	add	r3, r2
 800356c:	3302      	adds	r3, #2
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	7dfa      	ldrb	r2, [r7, #23]
 8003572:	4618      	mov	r0, r3
 8003574:	6939      	ldr	r1, [r7, #16]
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	330c      	adds	r3, #12
 8003582:	6018      	str	r0, [r3, #0]
    for(unsigned char samples = 0; samples<samplesCounter;samples++)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	3301      	adds	r3, #1
 8003588:	75fb      	strb	r3, [r7, #23]
 800358a:	7dfa      	ldrb	r2, [r7, #23]
 800358c:	7abb      	ldrb	r3, [r7, #10]
 800358e:	429a      	cmp	r2, r3
 8003590:	d3c3      	bcc.n	800351a <loadDataArrayToStruct+0x32>
    }

    return ptr_loadedResults;
 8003592:	693b      	ldr	r3, [r7, #16]

}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000458 	.word	0x20000458

080035a0 <getArqName>:

unsigned char* getArqName(unsigned char numTeste)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
    static unsigned char arqName[15]; //VERIFICAR SE VOU FAZER UM GET NISSO
    sprintf(arqName,"Teste %d.txt",numTeste);
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	461a      	mov	r2, r3
 80035ae:	4904      	ldr	r1, [pc, #16]	; (80035c0 <getArqName+0x20>)
 80035b0:	4804      	ldr	r0, [pc, #16]	; (80035c4 <getArqName+0x24>)
 80035b2:	f005 fd61 	bl	8009078 <siprintf>
    return arqName;
 80035b6:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <getArqName+0x24>)
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	0800bac0 	.word	0x0800bac0
 80035c4:	20000498 	.word	0x20000498

080035c8 <lineCounter>:

unsigned char lineCounter(unsigned char numTeste)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
    unsigned char* arqName = getArqName(numTeste);
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ffe3 	bl	80035a0 <getArqName>
 80035da:	6138      	str	r0, [r7, #16]
    char c = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	75fb      	strb	r3, [r7, #23]
    unsigned char count = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	75bb      	strb	r3, [r7, #22]
    FILE* ptr_file;
    ptr_file = fopen(arqName,"r");
 80035e4:	490d      	ldr	r1, [pc, #52]	; (800361c <lineCounter+0x54>)
 80035e6:	6938      	ldr	r0, [r7, #16]
 80035e8:	f005 fa14 	bl	8008a14 <fopen>
 80035ec:	60f8      	str	r0, [r7, #12]
    if (ptr_file == NULL )
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <lineCounter+0x32>
    {
        printf( "error ao abrir\n");
 80035f4:	480a      	ldr	r0, [pc, #40]	; (8003620 <lineCounter+0x58>)
 80035f6:	f005 fcfb 	bl	8008ff0 <puts>
    }
    for(c = fgetc(ptr_file); c != EOF; c = fgetc(ptr_file))
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f005 f8d8 	bl	80087b0 <fgetc>
 8003600:	4603      	mov	r3, r0
 8003602:	75fb      	strb	r3, [r7, #23]
    {
        if (c == '\n') // Increment count if this character is newline
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	2b0a      	cmp	r3, #10
 8003608:	d102      	bne.n	8003610 <lineCounter+0x48>
        {
          count = count + 1;
 800360a:	7dbb      	ldrb	r3, [r7, #22]
 800360c:	3301      	adds	r3, #1
 800360e:	75bb      	strb	r3, [r7, #22]
    for(c = fgetc(ptr_file); c != EOF; c = fgetc(ptr_file))
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f005 f8cd 	bl	80087b0 <fgetc>
 8003616:	4603      	mov	r3, r0
 8003618:	75fb      	strb	r3, [r7, #23]
        if (c == '\n') // Increment count if this character is newline
 800361a:	e7f3      	b.n	8003604 <lineCounter+0x3c>
 800361c:	0800bad0 	.word	0x0800bad0
 8003620:	0800bad4 	.word	0x0800bad4

08003624 <startReadingOutsideSensor>:
};

static struct results measuredData;

void startReadingOutsideSensor()
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
	unsigned char userState = REPOUSO;
 800362a:	2332      	movs	r3, #50	; 0x32
 800362c:	75fb      	strb	r3, [r7, #23]
	unsigned char sensorFlag;
	unsigned int referenceTime,currentTime,contatoTime,vooTime,totalTime = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
	unsigned char key = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
	unsigned char samples = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	73bb      	strb	r3, [r7, #14]

	key = getKeyPressed();
 800363a:	f000 fe3d 	bl	80042b8 <getKeyPressed>
 800363e:	4603      	mov	r3, r0
 8003640:	73fb      	strb	r3, [r7, #15]
	unsigned char indexTest = getResultTestNumber();
 8003642:	f7fd fdd7 	bl	80011f4 <getResultTestNumber>
 8003646:	4603      	mov	r3, r0
 8003648:	71fb      	strb	r3, [r7, #7]

	while(key != PARAR) //&& totalTime != COLOCAR O VALOR DE TEMPO DE ENTRADA
 800364a:	e07c      	b.n	8003746 <startReadingOutsideSensor+0x122>
	{
		totalTime = getTimer2Variable();
 800364c:	f000 fe6c 	bl	8004328 <getTimer2Variable>
 8003650:	4603      	mov	r3, r0
 8003652:	60bb      	str	r3, [r7, #8]
		key = getKeyPressed();
 8003654:	f000 fe30 	bl	80042b8 <getKeyPressed>
 8003658:	4603      	mov	r3, r0
 800365a:	73fb      	strb	r3, [r7, #15]
		switch(userState)
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	2b34      	cmp	r3, #52	; 0x34
 8003660:	d049      	beq.n	80036f6 <startReadingOutsideSensor+0xd2>
 8003662:	2b34      	cmp	r3, #52	; 0x34
 8003664:	dc6f      	bgt.n	8003746 <startReadingOutsideSensor+0x122>
 8003666:	2b32      	cmp	r3, #50	; 0x32
 8003668:	d002      	beq.n	8003670 <startReadingOutsideSensor+0x4c>
 800366a:	2b33      	cmp	r3, #51	; 0x33
 800366c:	d011      	beq.n	8003692 <startReadingOutsideSensor+0x6e>
 800366e:	e06a      	b.n	8003746 <startReadingOutsideSensor+0x122>
		{
			case REPOUSO:
				sensorFlag = getTimer2Variable();
 8003670:	f000 fe5a 	bl	8004328 <getTimer2Variable>
 8003674:	4603      	mov	r3, r0
 8003676:	71bb      	strb	r3, [r7, #6]
				if(sensorFlag == 0)
 8003678:	79bb      	ldrb	r3, [r7, #6]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <startReadingOutsideSensor+0x68>
				{
					userState = CONTATO;
 800367e:	2333      	movs	r3, #51	; 0x33
 8003680:	75fb      	strb	r3, [r7, #23]
					referenceTime = getTimer3Variable();
 8003682:	f000 fe5d 	bl	8004340 <getTimer3Variable>
 8003686:	4603      	mov	r3, r0
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	e05c      	b.n	8003746 <startReadingOutsideSensor+0x122>
				}

				else userState = REPOUSO;
 800368c:	2332      	movs	r3, #50	; 0x32
 800368e:	75fb      	strb	r3, [r7, #23]


			break;
 8003690:	e059      	b.n	8003746 <startReadingOutsideSensor+0x122>

			case CONTATO:
				sensorFlag = getTimer2Variable();
 8003692:	f000 fe49 	bl	8004328 <getTimer2Variable>
 8003696:	4603      	mov	r3, r0
 8003698:	71bb      	strb	r3, [r7, #6]
				if(sensorFlag == 1)
 800369a:	79bb      	ldrb	r3, [r7, #6]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d121      	bne.n	80036e4 <startReadingOutsideSensor+0xc0>
				{
					userState = VOO;
 80036a0:	2334      	movs	r3, #52	; 0x34
 80036a2:	75fb      	strb	r3, [r7, #23]
					currentTime = getTimer3Variable();
 80036a4:	f000 fe4c 	bl	8004340 <getTimer3Variable>
 80036a8:	4603      	mov	r3, r0
 80036aa:	603b      	str	r3, [r7, #0]
					measuredData.Measurement[samples].uiSoloTime = currentTime-referenceTime;
 80036ac:	7bba      	ldrb	r2, [r7, #14]
 80036ae:	6839      	ldr	r1, [r7, #0]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ac9      	subs	r1, r1, r3
 80036b4:	482b      	ldr	r0, [pc, #172]	; (8003764 <startReadingOutsideSensor+0x140>)
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4403      	add	r3, r0
 80036c0:	330c      	adds	r3, #12
 80036c2:	6019      	str	r1, [r3, #0]
					measuredData.Measurement[samples].sampleNum = samples+1;
 80036c4:	7bba      	ldrb	r2, [r7, #14]
 80036c6:	7bbb      	ldrb	r3, [r7, #14]
 80036c8:	3301      	adds	r3, #1
 80036ca:	b2d8      	uxtb	r0, r3
 80036cc:	4925      	ldr	r1, [pc, #148]	; (8003764 <startReadingOutsideSensor+0x140>)
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	3304      	adds	r3, #4
 80036da:	4602      	mov	r2, r0
 80036dc:	701a      	strb	r2, [r3, #0]
//					contatoTime[samples] = currentTime-referenceTime;
					referenceTime = currentTime;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	e030      	b.n	8003746 <startReadingOutsideSensor+0x122>
				}
				else
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80036e4:	2200      	movs	r2, #0
 80036e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036ea:	481f      	ldr	r0, [pc, #124]	; (8003768 <startReadingOutsideSensor+0x144>)
 80036ec:	f002 fb48 	bl	8005d80 <HAL_GPIO_WritePin>
					userState = CONTATO;
 80036f0:	2333      	movs	r3, #51	; 0x33
 80036f2:	75fb      	strb	r3, [r7, #23]
				}

			break;
 80036f4:	e027      	b.n	8003746 <startReadingOutsideSensor+0x122>

			case VOO:
				sensorFlag = getTimer2Variable();
 80036f6:	f000 fe17 	bl	8004328 <getTimer2Variable>
 80036fa:	4603      	mov	r3, r0
 80036fc:	71bb      	strb	r3, [r7, #6]
				if(sensorFlag == 0)
 80036fe:	79bb      	ldrb	r3, [r7, #6]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d117      	bne.n	8003734 <startReadingOutsideSensor+0x110>
				{
					userState = CONTATO;
 8003704:	2333      	movs	r3, #51	; 0x33
 8003706:	75fb      	strb	r3, [r7, #23]
					currentTime = getTimer3Variable();
 8003708:	f000 fe1a 	bl	8004340 <getTimer3Variable>
 800370c:	4603      	mov	r3, r0
 800370e:	603b      	str	r3, [r7, #0]
					measuredData.Measurement[samples].uiVooTime = currentTime - referenceTime;
 8003710:	7bba      	ldrb	r2, [r7, #14]
 8003712:	6839      	ldr	r1, [r7, #0]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ac9      	subs	r1, r1, r3
 8003718:	4812      	ldr	r0, [pc, #72]	; (8003764 <startReadingOutsideSensor+0x140>)
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4403      	add	r3, r0
 8003724:	3308      	adds	r3, #8
 8003726:	6019      	str	r1, [r3, #0]
//					vooTime[samples] = currentTime - referenceTime;
					referenceTime = currentTime;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	613b      	str	r3, [r7, #16]
					samples++;
 800372c:	7bbb      	ldrb	r3, [r7, #14]
 800372e:	3301      	adds	r3, #1
 8003730:	73bb      	strb	r3, [r7, #14]
 8003732:	e007      	b.n	8003744 <startReadingOutsideSensor+0x120>
				}
				else
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8003734:	2201      	movs	r2, #1
 8003736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800373a:	480b      	ldr	r0, [pc, #44]	; (8003768 <startReadingOutsideSensor+0x144>)
 800373c:	f002 fb20 	bl	8005d80 <HAL_GPIO_WritePin>
					userState = VOO;
 8003740:	2334      	movs	r3, #52	; 0x34
 8003742:	75fb      	strb	r3, [r7, #23]
				}
			break;
 8003744:	bf00      	nop
	while(key != PARAR) //&& totalTime != COLOCAR O VALOR DE TEMPO DE ENTRADA
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b50      	cmp	r3, #80	; 0x50
 800374a:	f47f af7f 	bne.w	800364c <startReadingOutsideSensor+0x28>

		}
	}

    setUserResultData(&measuredData,indexTest,samples);
 800374e:	7bba      	ldrb	r2, [r7, #14]
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	4619      	mov	r1, r3
 8003754:	4803      	ldr	r0, [pc, #12]	; (8003764 <startReadingOutsideSensor+0x140>)
 8003756:	f7fd fd67 	bl	8001228 <setUserResultData>



}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200004a8 	.word	0x200004a8
 8003768:	40011000 	.word	0x40011000

0800376c <startReadingInsideSensor>:
void startReadingInsideSensor()
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
//
//			start_dentro_state = CONTATO;
//		break;
//	}

}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <getNextSub>:

struct Menu menuSub ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextSub(unsigned char nextState)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
    menuSub.menuNext = nextState;
 8003782:	4a05      	ldr	r2, [pc, #20]	; (8003798 <getNextSub+0x20>)
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	7013      	strb	r3, [r2, #0]
    return menuSub.menuNext;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <getNextSub+0x20>)
 800378a:	781b      	ldrb	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	200004e8 	.word	0x200004e8

0800379c <setSelectSub>:

unsigned char setSelectSub(unsigned char *selectedState)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
    unsigned char state = *selectedState;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	73fb      	strb	r3, [r7, #15]
    menuSub.menuSelect = state;
 80037aa:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <setSelectSub+0x24>)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	7053      	strb	r3, [r2, #1]
    return menuSub.menuSelect;
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <setSelectSub+0x24>)
 80037b2:	785b      	ldrb	r3, [r3, #1]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	200004e8 	.word	0x200004e8

080037c4 <setInsertData>:

unsigned char setInsertData(struct dataInsert* dataToInsert)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
    struct dataInsert* userDataInput = dataToInsert;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60fb      	str	r3, [r7, #12]
    setUserInputConfigData(userDataInput);
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7fd fcb1 	bl	8001138 <setUserInputConfigData>
}
 80037d6:	bf00      	nop
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <SET_HW_TIMER2>:

static unsigned char encoderStatus;
static unsigned char timerStatus;

unsigned char SET_HW_TIMER2(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
	encoderStatus = 0;
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <SET_HW_TIMER2+0x40>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
//	TIM_HandleTypeDef* htim2 =  getTimer2Instance();
	unsigned char* htim2 =  getTimer2Instance();
 80037ec:	f000 fd88 	bl	8004300 <getTimer2Instance>
 80037f0:	4603      	mov	r3, r0
 80037f2:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Start_IT(htim2, TIM_CHANNEL_ALL);
 80037f4:	213c      	movs	r1, #60	; 0x3c
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f003 fc86 	bl	8007108 <HAL_TIM_Encoder_Start_IT>
 80037fc:	4603      	mov	r3, r0
 80037fe:	461a      	mov	r2, r3
 8003800:	4b07      	ldr	r3, [pc, #28]	; (8003820 <SET_HW_TIMER2+0x40>)
 8003802:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8003804:	2064      	movs	r0, #100	; 0x64
 8003806:	f001 fd67 	bl	80052d8 <HAL_Delay>
	return !encoderStatus;
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <SET_HW_TIMER2+0x40>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000504 	.word	0x20000504

08003824 <RESET_HW_TIMER2>:

unsigned char RESET_HW_TIMER2(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
    encoderStatus = 1;
 800382a:	4b0c      	ldr	r3, [pc, #48]	; (800385c <RESET_HW_TIMER2+0x38>)
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
//    TIM_HandleTypeDef* htim2 =  getTimer2Instance();
    unsigned char* htim2 =  getTimer2Instance();
 8003830:	f000 fd66 	bl	8004300 <getTimer2Instance>
 8003834:	4603      	mov	r3, r0
 8003836:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Stop_IT(htim2, TIM_CHANNEL_ALL);
 8003838:	213c      	movs	r1, #60	; 0x3c
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f003 fd12 	bl	8007264 <HAL_TIM_Encoder_Stop_IT>
 8003840:	4603      	mov	r3, r0
 8003842:	461a      	mov	r2, r3
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <RESET_HW_TIMER2+0x38>)
 8003846:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8003848:	2064      	movs	r0, #100	; 0x64
 800384a:	f001 fd45 	bl	80052d8 <HAL_Delay>
	return encoderStatus;
 800384e:	4b03      	ldr	r3, [pc, #12]	; (800385c <RESET_HW_TIMER2+0x38>)
 8003850:	781b      	ldrb	r3, [r3, #0]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000504 	.word	0x20000504

08003860 <SET_HW_TIMER3>:

unsigned char SET_HW_TIMER3(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
    timerStatus = 0;
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <SET_HW_TIMER3+0x40>)
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 800386c:	f000 fd52 	bl	8004314 <getTimer3Instance>
 8003870:	4603      	mov	r3, r0
 8003872:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Start_IT(htim3);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f003 fb25 	bl	8006ec4 <HAL_TIM_Base_Start_IT>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <SET_HW_TIMER3+0x40>)
 8003880:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 8003882:	2064      	movs	r0, #100	; 0x64
 8003884:	f001 fd28 	bl	80052d8 <HAL_Delay>
    return !timerStatus;
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <SET_HW_TIMER3+0x40>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000505 	.word	0x20000505

080038a4 <RESET_HW_TIMER3>:

unsigned char RESET_HW_TIMER3(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
    timerStatus = 1;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <RESET_HW_TIMER3+0x34>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 80038b0:	f000 fd30 	bl	8004314 <getTimer3Instance>
 80038b4:	4603      	mov	r3, r0
 80038b6:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Stop_IT(htim3);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f003 fb55 	bl	8006f68 <HAL_TIM_Base_Stop_IT>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <RESET_HW_TIMER3+0x34>)
 80038c4:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 80038c6:	2064      	movs	r0, #100	; 0x64
 80038c8:	f001 fd06 	bl	80052d8 <HAL_Delay>
    return timerStatus;
 80038cc:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <RESET_HW_TIMER3+0x34>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000505 	.word	0x20000505

080038dc <SET_HW_UART>:
#include "UARTHW.h"
#include "main.h"


unsigned char SET_HW_UART(unsigned char* addr)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	60fb      	str	r3, [r7, #12]
    __HAL_UART_ENABLE(instance);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f6:	60da      	str	r2, [r3, #12]
}
 80038f8:	bf00      	nop
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <RESET_HW_UART>:

unsigned char RESET_HW_UART(unsigned char* addr)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	60fb      	str	r3, [r7, #12]
    __HAL_UART_DISABLE(instance);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800391e:	60da      	str	r2, [r3, #12]
}
 8003920:	bf00      	nop
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003930:	2200      	movs	r2, #0
 8003932:	2110      	movs	r1, #16
 8003934:	4803      	ldr	r0, [pc, #12]	; (8003944 <SELECT+0x18>)
 8003936:	f002 fa23 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800393a:	2001      	movs	r0, #1
 800393c:	f001 fccc 	bl	80052d8 <HAL_Delay>
}
 8003940:	bf00      	nop
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40010800 	.word	0x40010800

08003948 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800394c:	2201      	movs	r2, #1
 800394e:	2110      	movs	r1, #16
 8003950:	4803      	ldr	r0, [pc, #12]	; (8003960 <DESELECT+0x18>)
 8003952:	f002 fa15 	bl	8005d80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003956:	2001      	movs	r0, #1
 8003958:	f001 fcbe 	bl	80052d8 <HAL_Delay>
}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40010800 	.word	0x40010800

08003964 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800396e:	bf00      	nop
 8003970:	4b08      	ldr	r3, [pc, #32]	; (8003994 <SPI_TxByte+0x30>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d1f8      	bne.n	8003970 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800397e:	1df9      	adds	r1, r7, #7
 8003980:	2364      	movs	r3, #100	; 0x64
 8003982:	2201      	movs	r2, #1
 8003984:	4803      	ldr	r0, [pc, #12]	; (8003994 <SPI_TxByte+0x30>)
 8003986:	f002 fec9 	bl	800671c <HAL_SPI_Transmit>
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000508 	.word	0x20000508

08003998 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80039a4:	bf00      	nop
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <SPI_TxBuffer+0x30>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d1f8      	bne.n	80039a6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80039b4:	887a      	ldrh	r2, [r7, #2]
 80039b6:	2364      	movs	r3, #100	; 0x64
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4803      	ldr	r0, [pc, #12]	; (80039c8 <SPI_TxBuffer+0x30>)
 80039bc:	f002 feae 	bl	800671c <HAL_SPI_Transmit>
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000508 	.word	0x20000508

080039cc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80039d2:	23ff      	movs	r3, #255	; 0xff
 80039d4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80039d6:	bf00      	nop
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <SPI_RxByte+0x34>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d1f8      	bne.n	80039d8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80039e6:	1dba      	adds	r2, r7, #6
 80039e8:	1df9      	adds	r1, r7, #7
 80039ea:	2364      	movs	r3, #100	; 0x64
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2301      	movs	r3, #1
 80039f0:	4803      	ldr	r0, [pc, #12]	; (8003a00 <SPI_RxByte+0x34>)
 80039f2:	f002 ffcf 	bl	8006994 <HAL_SPI_TransmitReceive>

	return data;
 80039f6:	79bb      	ldrb	r3, [r7, #6]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000508 	.word	0x20000508

08003a04 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003a0c:	f7ff ffde 	bl	80039cc <SPI_RxByte>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	701a      	strb	r2, [r3, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <SD_ReadyWait+0x30>)
 8003a28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a2c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003a2e:	f7ff ffcd 	bl	80039cc <SPI_RxByte>
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	2bff      	cmp	r3, #255	; 0xff
 8003a3a:	d003      	beq.n	8003a44 <SD_ReadyWait+0x24>
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <SD_ReadyWait+0x30>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f4      	bne.n	8003a2e <SD_ReadyWait+0xe>

	return res;
 8003a44:	79fb      	ldrb	r3, [r7, #7]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000692 	.word	0x20000692

08003a54 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8003a5a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003a5e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8003a60:	f7ff ff72 	bl	8003948 <DESELECT>
	for(int i = 0; i < 10; i++)
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	e005      	b.n	8003a76 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8003a6a:	20ff      	movs	r0, #255	; 0xff
 8003a6c:	f7ff ff7a 	bl	8003964 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	3301      	adds	r3, #1
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b09      	cmp	r3, #9
 8003a7a:	ddf6      	ble.n	8003a6a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8003a7c:	f7ff ff56 	bl	800392c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8003a80:	2340      	movs	r3, #64	; 0x40
 8003a82:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8003a94:	2395      	movs	r3, #149	; 0x95
 8003a96:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8003a98:	463b      	mov	r3, r7
 8003a9a:	2106      	movs	r1, #6
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff7b 	bl	8003998 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003aa2:	e002      	b.n	8003aaa <SD_PowerOn+0x56>
	{
		cnt--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003aaa:	f7ff ff8f 	bl	80039cc <SPI_RxByte>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d002      	beq.n	8003aba <SD_PowerOn+0x66>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f4      	bne.n	8003aa4 <SD_PowerOn+0x50>
	}

	DESELECT();
 8003aba:	f7ff ff45 	bl	8003948 <DESELECT>
	SPI_TxByte(0XFF);
 8003abe:	20ff      	movs	r0, #255	; 0xff
 8003ac0:	f7ff ff50 	bl	8003964 <SPI_TxByte>

	PowerFlag = 1;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <SD_PowerOn+0x80>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000507 	.word	0x20000507

08003ad8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <SD_PowerOff+0x14>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000507 	.word	0x20000507

08003af0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003af4:	4b02      	ldr	r3, [pc, #8]	; (8003b00 <SD_CheckPower+0x10>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr
 8003b00:	20000507 	.word	0x20000507

08003b04 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <SD_RxDataBlock+0x58>)
 8003b10:	22c8      	movs	r2, #200	; 0xc8
 8003b12:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003b14:	f7ff ff5a 	bl	80039cc <SPI_RxByte>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2bff      	cmp	r3, #255	; 0xff
 8003b20:	d103      	bne.n	8003b2a <SD_RxDataBlock+0x26>
 8003b22:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <SD_RxDataBlock+0x58>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f4      	bne.n	8003b14 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
 8003b2c:	2bfe      	cmp	r3, #254	; 0xfe
 8003b2e:	d001      	beq.n	8003b34 <SD_RxDataBlock+0x30>
 8003b30:	2300      	movs	r3, #0
 8003b32:	e00f      	b.n	8003b54 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff62 	bl	8003a04 <SPI_RxBytePtr>
	} while(len--);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	1e5a      	subs	r2, r3, #1
 8003b44:	603a      	str	r2, [r7, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f4      	bne.n	8003b34 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8003b4a:	f7ff ff3f 	bl	80039cc <SPI_RxByte>
	SPI_RxByte();
 8003b4e:	f7ff ff3d 	bl	80039cc <SPI_RxByte>

	return TRUE;
 8003b52:	2301      	movs	r3, #1
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000691 	.word	0x20000691

08003b60 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003b70:	f7ff ff56 	bl	8003a20 <SD_ReadyWait>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2bff      	cmp	r3, #255	; 0xff
 8003b78:	d001      	beq.n	8003b7e <SD_TxDataBlock+0x1e>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e02f      	b.n	8003bde <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff feef 	bl	8003964 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	2bfd      	cmp	r3, #253	; 0xfd
 8003b8a:	d020      	beq.n	8003bce <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff01 	bl	8003998 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003b96:	f7ff ff19 	bl	80039cc <SPI_RxByte>
		SPI_RxByte();
 8003b9a:	f7ff ff17 	bl	80039cc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003b9e:	e00b      	b.n	8003bb8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003ba0:	f7ff ff14 	bl	80039cc <SPI_RxByte>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2b05      	cmp	r3, #5
 8003bb0:	d006      	beq.n	8003bc0 <SD_TxDataBlock+0x60>
			i++;
 8003bb2:	7bbb      	ldrb	r3, [r7, #14]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8003bb8:	7bbb      	ldrb	r3, [r7, #14]
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d9f0      	bls.n	8003ba0 <SD_TxDataBlock+0x40>
 8003bbe:	e000      	b.n	8003bc2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003bc0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003bc2:	bf00      	nop
 8003bc4:	f7ff ff02 	bl	80039cc <SPI_RxByte>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0fa      	beq.n	8003bc4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	2b05      	cmp	r3, #5
 8003bd6:	d101      	bne.n	8003bdc <SD_TxDataBlock+0x7c>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <SD_TxDataBlock+0x7e>

	return FALSE;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	4603      	mov	r3, r0
 8003bee:	6039      	str	r1, [r7, #0]
 8003bf0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003bf2:	f7ff ff15 	bl	8003a20 <SD_ReadyWait>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2bff      	cmp	r3, #255	; 0xff
 8003bfa:	d001      	beq.n	8003c00 <SD_SendCmd+0x1a>
 8003bfc:	23ff      	movs	r3, #255	; 0xff
 8003bfe:	e042      	b.n	8003c86 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff feae 	bl	8003964 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	0e1b      	lsrs	r3, r3, #24
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff fea8 	bl	8003964 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	0c1b      	lsrs	r3, r3, #16
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fea2 	bl	8003964 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fe9c 	bl	8003964 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff fe97 	bl	8003964 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d102      	bne.n	8003c42 <SD_SendCmd+0x5c>
 8003c3c:	2395      	movs	r3, #149	; 0x95
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e007      	b.n	8003c52 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	2b48      	cmp	r3, #72	; 0x48
 8003c46:	d102      	bne.n	8003c4e <SD_SendCmd+0x68>
 8003c48:	2387      	movs	r3, #135	; 0x87
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e001      	b.n	8003c52 <SD_SendCmd+0x6c>
	else crc = 1;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fe85 	bl	8003964 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	2b4c      	cmp	r3, #76	; 0x4c
 8003c5e:	d101      	bne.n	8003c64 <SD_SendCmd+0x7e>
 8003c60:	f7ff feb4 	bl	80039cc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8003c64:	230a      	movs	r3, #10
 8003c66:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8003c68:	f7ff feb0 	bl	80039cc <SPI_RxByte>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8003c70:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	da05      	bge.n	8003c84 <SD_SendCmd+0x9e>
 8003c78:	7bbb      	ldrb	r3, [r7, #14]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	73bb      	strb	r3, [r7, #14]
 8003c7e:	7bbb      	ldrb	r3, [r7, #14]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f1      	bne.n	8003c68 <SD_SendCmd+0x82>

	return res;
 8003c84:	7b7b      	ldrb	r3, [r7, #13]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <SD_disk_initialize+0x14>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0d1      	b.n	8003e48 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003ca4:	4b6a      	ldr	r3, [pc, #424]	; (8003e50 <SD_disk_initialize+0x1c0>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <SD_disk_initialize+0x2a>
 8003cb2:	4b67      	ldr	r3, [pc, #412]	; (8003e50 <SD_disk_initialize+0x1c0>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	e0c6      	b.n	8003e48 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8003cba:	f7ff fecb 	bl	8003a54 <SD_PowerOn>

	/* slave select */
	SELECT();
 8003cbe:	f7ff fe35 	bl	800392c <SELECT>

	/* check disk type */
	type = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	2040      	movs	r0, #64	; 0x40
 8003cca:	f7ff ff8c 	bl	8003be6 <SD_SendCmd>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	f040 80a1 	bne.w	8003e18 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8003cd6:	4b5f      	ldr	r3, [pc, #380]	; (8003e54 <SD_disk_initialize+0x1c4>)
 8003cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cdc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003cde:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003ce2:	2048      	movs	r0, #72	; 0x48
 8003ce4:	f7ff ff7f 	bl	8003be6 <SD_SendCmd>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d155      	bne.n	8003d9a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]
 8003cf2:	e00c      	b.n	8003d0e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8003cf4:	7bfc      	ldrb	r4, [r7, #15]
 8003cf6:	f7ff fe69 	bl	80039cc <SPI_RxByte>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f104 0310 	add.w	r3, r4, #16
 8003d02:	443b      	add	r3, r7
 8003d04:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d9ef      	bls.n	8003cf4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003d14:	7abb      	ldrb	r3, [r7, #10]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d17e      	bne.n	8003e18 <SD_disk_initialize+0x188>
 8003d1a:	7afb      	ldrb	r3, [r7, #11]
 8003d1c:	2baa      	cmp	r3, #170	; 0xaa
 8003d1e:	d17b      	bne.n	8003e18 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003d20:	2100      	movs	r1, #0
 8003d22:	2077      	movs	r0, #119	; 0x77
 8003d24:	f7ff ff5f 	bl	8003be6 <SD_SendCmd>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d807      	bhi.n	8003d3e <SD_disk_initialize+0xae>
 8003d2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003d32:	2069      	movs	r0, #105	; 0x69
 8003d34:	f7ff ff57 	bl	8003be6 <SD_SendCmd>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8003d3e:	4b45      	ldr	r3, [pc, #276]	; (8003e54 <SD_disk_initialize+0x1c4>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1ec      	bne.n	8003d20 <SD_disk_initialize+0x90>
 8003d46:	e000      	b.n	8003d4a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003d48:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003d4a:	4b42      	ldr	r3, [pc, #264]	; (8003e54 <SD_disk_initialize+0x1c4>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d062      	beq.n	8003e18 <SD_disk_initialize+0x188>
 8003d52:	2100      	movs	r1, #0
 8003d54:	207a      	movs	r0, #122	; 0x7a
 8003d56:	f7ff ff46 	bl	8003be6 <SD_SendCmd>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d15b      	bne.n	8003e18 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]
 8003d64:	e00c      	b.n	8003d80 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8003d66:	7bfc      	ldrb	r4, [r7, #15]
 8003d68:	f7ff fe30 	bl	80039cc <SPI_RxByte>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f104 0310 	add.w	r3, r4, #16
 8003d74:	443b      	add	r3, r7
 8003d76:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d9ef      	bls.n	8003d66 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003d86:	7a3b      	ldrb	r3, [r7, #8]
 8003d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <SD_disk_initialize+0x104>
 8003d90:	230c      	movs	r3, #12
 8003d92:	e000      	b.n	8003d96 <SD_disk_initialize+0x106>
 8003d94:	2304      	movs	r3, #4
 8003d96:	73bb      	strb	r3, [r7, #14]
 8003d98:	e03e      	b.n	8003e18 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	2077      	movs	r0, #119	; 0x77
 8003d9e:	f7ff ff22 	bl	8003be6 <SD_SendCmd>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d808      	bhi.n	8003dba <SD_disk_initialize+0x12a>
 8003da8:	2100      	movs	r1, #0
 8003daa:	2069      	movs	r0, #105	; 0x69
 8003dac:	f7ff ff1b 	bl	8003be6 <SD_SendCmd>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d801      	bhi.n	8003dba <SD_disk_initialize+0x12a>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e000      	b.n	8003dbc <SD_disk_initialize+0x12c>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8003dbe:	7bbb      	ldrb	r3, [r7, #14]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d10e      	bne.n	8003de2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	2077      	movs	r0, #119	; 0x77
 8003dc8:	f7ff ff0d 	bl	8003be6 <SD_SendCmd>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d80e      	bhi.n	8003df0 <SD_disk_initialize+0x160>
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	2069      	movs	r0, #105	; 0x69
 8003dd6:	f7ff ff06 	bl	8003be6 <SD_SendCmd>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d107      	bne.n	8003df0 <SD_disk_initialize+0x160>
 8003de0:	e00c      	b.n	8003dfc <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003de2:	2100      	movs	r1, #0
 8003de4:	2041      	movs	r0, #65	; 0x41
 8003de6:	f7ff fefe 	bl	8003be6 <SD_SendCmd>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8003df0:	4b18      	ldr	r3, [pc, #96]	; (8003e54 <SD_disk_initialize+0x1c4>)
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e2      	bne.n	8003dbe <SD_disk_initialize+0x12e>
 8003df8:	e000      	b.n	8003dfc <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003dfa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003dfc:	4b15      	ldr	r3, [pc, #84]	; (8003e54 <SD_disk_initialize+0x1c4>)
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <SD_disk_initialize+0x184>
 8003e04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e08:	2050      	movs	r0, #80	; 0x50
 8003e0a:	f7ff feec 	bl	8003be6 <SD_SendCmd>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <SD_disk_initialize+0x188>
 8003e14:	2300      	movs	r3, #0
 8003e16:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8003e18:	4a0f      	ldr	r2, [pc, #60]	; (8003e58 <SD_disk_initialize+0x1c8>)
 8003e1a:	7bbb      	ldrb	r3, [r7, #14]
 8003e1c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8003e1e:	f7ff fd93 	bl	8003948 <DESELECT>
	SPI_RxByte();
 8003e22:	f7ff fdd3 	bl	80039cc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8003e26:	7bbb      	ldrb	r3, [r7, #14]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8003e2c:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <SD_disk_initialize+0x1c0>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <SD_disk_initialize+0x1c0>)
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	e001      	b.n	8003e42 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8003e3e:	f7ff fe4b 	bl	8003ad8 <SD_PowerOff>
	}

	return Stat;
 8003e42:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <SD_disk_initialize+0x1c0>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	b2db      	uxtb	r3, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd90      	pop	{r4, r7, pc}
 8003e50:	200000b0 	.word	0x200000b0
 8003e54:	20000691 	.word	0x20000691
 8003e58:	20000506 	.word	0x20000506

08003e5c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <SD_disk_status+0x14>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e002      	b.n	8003e76 <SD_disk_status+0x1a>
	return Stat;
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <SD_disk_status+0x24>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	b2db      	uxtb	r3, r3
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr
 8003e80:	200000b0 	.word	0x200000b0

08003e84 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d102      	bne.n	8003ea0 <SD_disk_read+0x1c>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <SD_disk_read+0x20>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	e051      	b.n	8003f48 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003ea4:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <SD_disk_read+0xcc>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <SD_disk_read+0x32>
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e048      	b.n	8003f48 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003eb6:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <SD_disk_read+0xd0>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <SD_disk_read+0x44>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	025b      	lsls	r3, r3, #9
 8003ec6:	607b      	str	r3, [r7, #4]

	SELECT();
 8003ec8:	f7ff fd30 	bl	800392c <SELECT>

	if (count == 1)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d111      	bne.n	8003ef6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	2051      	movs	r0, #81	; 0x51
 8003ed6:	f7ff fe86 	bl	8003be6 <SD_SendCmd>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d129      	bne.n	8003f34 <SD_disk_read+0xb0>
 8003ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ee4:	68b8      	ldr	r0, [r7, #8]
 8003ee6:	f7ff fe0d 	bl	8003b04 <SD_RxDataBlock>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d021      	beq.n	8003f34 <SD_disk_read+0xb0>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	e01e      	b.n	8003f34 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	2052      	movs	r0, #82	; 0x52
 8003efa:	f7ff fe74 	bl	8003be6 <SD_SendCmd>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d117      	bne.n	8003f34 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f08:	68b8      	ldr	r0, [r7, #8]
 8003f0a:	f7ff fdfb 	bl	8003b04 <SD_RxDataBlock>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <SD_disk_read+0xa6>
				buff += 512;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f1a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ed      	bne.n	8003f04 <SD_disk_read+0x80>
 8003f28:	e000      	b.n	8003f2c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8003f2a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	204c      	movs	r0, #76	; 0x4c
 8003f30:	f7ff fe59 	bl	8003be6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003f34:	f7ff fd08 	bl	8003948 <DESELECT>
	SPI_RxByte();
 8003f38:	f7ff fd48 	bl	80039cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bf14      	ite	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	2300      	moveq	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200000b0 	.word	0x200000b0
 8003f54:	20000506 	.word	0x20000506

08003f58 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	4603      	mov	r3, r0
 8003f66:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <SD_disk_write+0x1c>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <SD_disk_write+0x20>
 8003f74:	2304      	movs	r3, #4
 8003f76:	e06b      	b.n	8004050 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003f78:	4b37      	ldr	r3, [pc, #220]	; (8004058 <SD_disk_write+0x100>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <SD_disk_write+0x32>
 8003f86:	2303      	movs	r3, #3
 8003f88:	e062      	b.n	8004050 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8003f8a:	4b33      	ldr	r3, [pc, #204]	; (8004058 <SD_disk_write+0x100>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <SD_disk_write+0x44>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e059      	b.n	8004050 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003f9c:	4b2f      	ldr	r3, [pc, #188]	; (800405c <SD_disk_write+0x104>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <SD_disk_write+0x56>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	025b      	lsls	r3, r3, #9
 8003fac:	607b      	str	r3, [r7, #4]

	SELECT();
 8003fae:	f7ff fcbd 	bl	800392c <SELECT>

	if (count == 1)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d110      	bne.n	8003fda <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	2058      	movs	r0, #88	; 0x58
 8003fbc:	f7ff fe13 	bl	8003be6 <SD_SendCmd>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d13a      	bne.n	800403c <SD_disk_write+0xe4>
 8003fc6:	21fe      	movs	r1, #254	; 0xfe
 8003fc8:	68b8      	ldr	r0, [r7, #8]
 8003fca:	f7ff fdc9 	bl	8003b60 <SD_TxDataBlock>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d033      	beq.n	800403c <SD_disk_write+0xe4>
			count = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	e030      	b.n	800403c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <SD_disk_write+0x104>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d007      	beq.n	8003ff6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	2077      	movs	r0, #119	; 0x77
 8003fea:	f7ff fdfc 	bl	8003be6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003fee:	6839      	ldr	r1, [r7, #0]
 8003ff0:	2057      	movs	r0, #87	; 0x57
 8003ff2:	f7ff fdf8 	bl	8003be6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	2059      	movs	r0, #89	; 0x59
 8003ffa:	f7ff fdf4 	bl	8003be6 <SD_SendCmd>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11b      	bne.n	800403c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004004:	21fc      	movs	r1, #252	; 0xfc
 8004006:	68b8      	ldr	r0, [r7, #8]
 8004008:	f7ff fdaa 	bl	8003b60 <SD_TxDataBlock>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <SD_disk_write+0xd0>
				buff += 512;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004018:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	3b01      	subs	r3, #1
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1ee      	bne.n	8004004 <SD_disk_write+0xac>
 8004026:	e000      	b.n	800402a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004028:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800402a:	21fd      	movs	r1, #253	; 0xfd
 800402c:	2000      	movs	r0, #0
 800402e:	f7ff fd97 	bl	8003b60 <SD_TxDataBlock>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <SD_disk_write+0xe4>
			{
				count = 1;
 8004038:	2301      	movs	r3, #1
 800403a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800403c:	f7ff fc84 	bl	8003948 <DESELECT>
	SPI_RxByte();
 8004040:	f7ff fcc4 	bl	80039cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	200000b0 	.word	0x200000b0
 800405c:	20000506 	.word	0x20000506

08004060 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004060:	b590      	push	{r4, r7, lr}
 8004062:	b08b      	sub	sp, #44	; 0x2c
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	603a      	str	r2, [r7, #0]
 800406a:	71fb      	strb	r3, [r7, #7]
 800406c:	460b      	mov	r3, r1
 800406e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <SD_disk_ioctl+0x1e>
 800407a:	2304      	movs	r3, #4
 800407c:	e115      	b.n	80042aa <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8004084:	79bb      	ldrb	r3, [r7, #6]
 8004086:	2b05      	cmp	r3, #5
 8004088:	d124      	bne.n	80040d4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d012      	beq.n	80040b8 <SD_disk_ioctl+0x58>
 8004092:	2b02      	cmp	r3, #2
 8004094:	dc1a      	bgt.n	80040cc <SD_disk_ioctl+0x6c>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <SD_disk_ioctl+0x40>
 800409a:	2b01      	cmp	r3, #1
 800409c:	d006      	beq.n	80040ac <SD_disk_ioctl+0x4c>
 800409e:	e015      	b.n	80040cc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80040a0:	f7ff fd1a 	bl	8003ad8 <SD_PowerOff>
			res = RES_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80040aa:	e0fc      	b.n	80042a6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80040ac:	f7ff fcd2 	bl	8003a54 <SD_PowerOn>
			res = RES_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80040b6:	e0f6      	b.n	80042a6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	1c5c      	adds	r4, r3, #1
 80040bc:	f7ff fd18 	bl	8003af0 <SD_CheckPower>
 80040c0:	4603      	mov	r3, r0
 80040c2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80040c4:	2300      	movs	r3, #0
 80040c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80040ca:	e0ec      	b.n	80042a6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80040cc:	2304      	movs	r3, #4
 80040ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040d2:	e0e8      	b.n	80042a6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80040d4:	4b77      	ldr	r3, [pc, #476]	; (80042b4 <SD_disk_ioctl+0x254>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <SD_disk_ioctl+0x86>
 80040e2:	2303      	movs	r3, #3
 80040e4:	e0e1      	b.n	80042aa <SD_disk_ioctl+0x24a>

		SELECT();
 80040e6:	f7ff fc21 	bl	800392c <SELECT>

		switch (ctrl)
 80040ea:	79bb      	ldrb	r3, [r7, #6]
 80040ec:	2b0d      	cmp	r3, #13
 80040ee:	f200 80cb 	bhi.w	8004288 <SD_disk_ioctl+0x228>
 80040f2:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <SD_disk_ioctl+0x98>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	080041f3 	.word	0x080041f3
 80040fc:	08004131 	.word	0x08004131
 8004100:	080041e3 	.word	0x080041e3
 8004104:	08004289 	.word	0x08004289
 8004108:	08004289 	.word	0x08004289
 800410c:	08004289 	.word	0x08004289
 8004110:	08004289 	.word	0x08004289
 8004114:	08004289 	.word	0x08004289
 8004118:	08004289 	.word	0x08004289
 800411c:	08004289 	.word	0x08004289
 8004120:	08004289 	.word	0x08004289
 8004124:	08004205 	.word	0x08004205
 8004128:	08004229 	.word	0x08004229
 800412c:	0800424d 	.word	0x0800424d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004130:	2100      	movs	r1, #0
 8004132:	2049      	movs	r0, #73	; 0x49
 8004134:	f7ff fd57 	bl	8003be6 <SD_SendCmd>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	f040 80a8 	bne.w	8004290 <SD_disk_ioctl+0x230>
 8004140:	f107 030c 	add.w	r3, r7, #12
 8004144:	2110      	movs	r1, #16
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fcdc 	bl	8003b04 <SD_RxDataBlock>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 809e 	beq.w	8004290 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8004154:	7b3b      	ldrb	r3, [r7, #12]
 8004156:	099b      	lsrs	r3, r3, #6
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b01      	cmp	r3, #1
 800415c:	d10e      	bne.n	800417c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800415e:	7d7b      	ldrb	r3, [r7, #21]
 8004160:	b29a      	uxth	r2, r3
 8004162:	7d3b      	ldrb	r3, [r7, #20]
 8004164:	b29b      	uxth	r3, r3
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	b29b      	uxth	r3, r3
 800416a:	4413      	add	r3, r2
 800416c:	b29b      	uxth	r3, r3
 800416e:	3301      	adds	r3, #1
 8004170:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004172:	8bfb      	ldrh	r3, [r7, #30]
 8004174:	029a      	lsls	r2, r3, #10
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e02e      	b.n	80041da <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800417c:	7c7b      	ldrb	r3, [r7, #17]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	b2da      	uxtb	r2, r3
 8004184:	7dbb      	ldrb	r3, [r7, #22]
 8004186:	09db      	lsrs	r3, r3, #7
 8004188:	b2db      	uxtb	r3, r3
 800418a:	4413      	add	r3, r2
 800418c:	b2da      	uxtb	r2, r3
 800418e:	7d7b      	ldrb	r3, [r7, #21]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f003 0306 	and.w	r3, r3, #6
 8004198:	b2db      	uxtb	r3, r3
 800419a:	4413      	add	r3, r2
 800419c:	b2db      	uxtb	r3, r3
 800419e:	3302      	adds	r3, #2
 80041a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80041a4:	7d3b      	ldrb	r3, [r7, #20]
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	7cfb      	ldrb	r3, [r7, #19]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	4413      	add	r3, r2
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	7cbb      	ldrb	r3, [r7, #18]
 80041ba:	029b      	lsls	r3, r3, #10
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3301      	adds	r3, #1
 80041ca:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80041cc:	8bfa      	ldrh	r2, [r7, #30]
 80041ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80041d2:	3b09      	subs	r3, #9
 80041d4:	409a      	lsls	r2, r3
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80041e0:	e056      	b.n	8004290 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80041f0:	e055      	b.n	800429e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80041f2:	f7ff fc15 	bl	8003a20 <SD_ReadyWait>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2bff      	cmp	r3, #255	; 0xff
 80041fa:	d14b      	bne.n	8004294 <SD_disk_ioctl+0x234>
 80041fc:	2300      	movs	r3, #0
 80041fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004202:	e047      	b.n	8004294 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004204:	2100      	movs	r1, #0
 8004206:	2049      	movs	r0, #73	; 0x49
 8004208:	f7ff fced 	bl	8003be6 <SD_SendCmd>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d142      	bne.n	8004298 <SD_disk_ioctl+0x238>
 8004212:	2110      	movs	r1, #16
 8004214:	6a38      	ldr	r0, [r7, #32]
 8004216:	f7ff fc75 	bl	8003b04 <SD_RxDataBlock>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d03b      	beq.n	8004298 <SD_disk_ioctl+0x238>
 8004220:	2300      	movs	r3, #0
 8004222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004226:	e037      	b.n	8004298 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004228:	2100      	movs	r1, #0
 800422a:	204a      	movs	r0, #74	; 0x4a
 800422c:	f7ff fcdb 	bl	8003be6 <SD_SendCmd>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d132      	bne.n	800429c <SD_disk_ioctl+0x23c>
 8004236:	2110      	movs	r1, #16
 8004238:	6a38      	ldr	r0, [r7, #32]
 800423a:	f7ff fc63 	bl	8003b04 <SD_RxDataBlock>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d02b      	beq.n	800429c <SD_disk_ioctl+0x23c>
 8004244:	2300      	movs	r3, #0
 8004246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800424a:	e027      	b.n	800429c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800424c:	2100      	movs	r1, #0
 800424e:	207a      	movs	r0, #122	; 0x7a
 8004250:	f7ff fcc9 	bl	8003be6 <SD_SendCmd>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d116      	bne.n	8004288 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800425a:	2300      	movs	r3, #0
 800425c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004260:	e00b      	b.n	800427a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8004262:	6a3c      	ldr	r4, [r7, #32]
 8004264:	1c63      	adds	r3, r4, #1
 8004266:	623b      	str	r3, [r7, #32]
 8004268:	f7ff fbb0 	bl	80039cc <SPI_RxByte>
 800426c:	4603      	mov	r3, r0
 800426e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004270:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004274:	3301      	adds	r3, #1
 8004276:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800427a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800427e:	2b03      	cmp	r3, #3
 8004280:	d9ef      	bls.n	8004262 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8004288:	2304      	movs	r3, #4
 800428a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800428e:	e006      	b.n	800429e <SD_disk_ioctl+0x23e>
			break;
 8004290:	bf00      	nop
 8004292:	e004      	b.n	800429e <SD_disk_ioctl+0x23e>
			break;
 8004294:	bf00      	nop
 8004296:	e002      	b.n	800429e <SD_disk_ioctl+0x23e>
			break;
 8004298:	bf00      	nop
 800429a:	e000      	b.n	800429e <SD_disk_ioctl+0x23e>
			break;
 800429c:	bf00      	nop
		}

		DESELECT();
 800429e:	f7ff fb53 	bl	8003948 <DESELECT>
		SPI_RxByte();
 80042a2:	f7ff fb93 	bl	80039cc <SPI_RxByte>
	}

	return res;
 80042a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	372c      	adds	r7, #44	; 0x2c
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd90      	pop	{r4, r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200000b0 	.word	0x200000b0

080042b8 <getKeyPressed>:
	timer3Data = 0;
}


unsigned char getKeyPressed()
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
	return key;
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <getKeyPressed+0x14>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000678 	.word	0x20000678

080042d0 <resetKeyPressed>:

unsigned char resetKeyPressed()
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
	key = IDDLE;
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <resetKeyPressed+0x18>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(250);
 80042da:	20fa      	movs	r0, #250	; 0xfa
 80042dc:	f000 fffc 	bl	80052d8 <HAL_Delay>
}
 80042e0:	bf00      	nop
 80042e2:	4618      	mov	r0, r3
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000678 	.word	0x20000678

080042ec <getUARTInstance>:

unsigned char* getUARTInstance()
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
	return &huart2;
 80042f0:	4b02      	ldr	r3, [pc, #8]	; (80042fc <getUARTInstance+0x10>)
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	200005f0 	.word	0x200005f0

08004300 <getTimer2Instance>:

unsigned char* getTimer2Instance()
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
	return &htim2;
 8004304:	4b02      	ldr	r3, [pc, #8]	; (8004310 <getTimer2Instance+0x10>)
}
 8004306:	4618      	mov	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000560 	.word	0x20000560

08004314 <getTimer3Instance>:

unsigned char* getTimer3Instance()
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
	return &htim3;
 8004318:	4b02      	ldr	r3, [pc, #8]	; (8004324 <getTimer3Instance+0x10>)
}
 800431a:	4618      	mov	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	200005a8 	.word	0x200005a8

08004328 <getTimer2Variable>:

unsigned char getTimer2Variable()
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
	return sensorFlag;
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <getTimer2Variable+0x14>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b2db      	uxtb	r3, r3
}
 8004332:	4618      	mov	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	200000b1 	.word	0x200000b1

08004340 <getTimer3Variable>:

unsigned char getTimer3Variable()
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
	return timer3Data;
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <getTimer3Variable+0x14>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	b2db      	uxtb	r3, r3
}
 800434a:	4618      	mov	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	2000067c 	.word	0x2000067c

08004358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800435e:	f000 ff59 	bl	8005214 <HAL_Init>
	  unsigned char menuSelect;
	  unsigned char menuDisplay;
	  unsigned char menuState;
  };

  struct Menu menuTesteMain = {IDDLE,IDDLE,IDDLE,IDDLE};
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
  struct Menu menuTesteSub = {IDDLE,IDDLE,IDDLE,IDDLE};
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
  unsigned char displayUpdateStatus = IDDLE;
 800436a:	2300      	movs	r3, #0
 800436c:	71fb      	strb	r3, [r7, #7]
  unsigned char cursorPosition[2] = {0,0};
 800436e:	2300      	movs	r3, #0
 8004370:	80bb      	strh	r3, [r7, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004372:	f000 f9ad 	bl	80046d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004376:	f000 fb11 	bl	800499c <MX_GPIO_Init>
  MX_DMA_Init();
 800437a:	f000 faf1 	bl	8004960 <MX_DMA_Init>
  MX_TIM2_Init();
 800437e:	f000 fa23 	bl	80047c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004382:	f000 fa75 	bl	8004870 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8004386:	f000 fac1 	bl	800490c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800438a:	f004 f905 	bl	8008598 <MX_FATFS_Init>
  MX_SPI1_Init();
 800438e:	f000 f9e5 	bl	800475c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, 1);
 8004392:	2201      	movs	r2, #1
 8004394:	49c1      	ldr	r1, [pc, #772]	; (800469c <main+0x344>)
 8004396:	48c2      	ldr	r0, [pc, #776]	; (80046a0 <main+0x348>)
 8004398:	f003 fbd9 	bl	8007b4e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800439c:	4bc1      	ldr	r3, [pc, #772]	; (80046a4 <main+0x34c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4bc0      	ldr	r3, [pc, #768]	; (80046a4 <main+0x34c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0204 	bic.w	r2, r2, #4
 80043aa:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80043ac:	2201      	movs	r2, #1
 80043ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043b2:	48bd      	ldr	r0, [pc, #756]	; (80046a8 <main+0x350>)
 80043b4:	f001 fce4 	bl	8005d80 <HAL_GPIO_WritePin>
  homeDataDisplay(appNameMsg,companyNameMsg,appVersionMsg);
 80043b8:	4bbc      	ldr	r3, [pc, #752]	; (80046ac <main+0x354>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4abc      	ldr	r2, [pc, #752]	; (80046b0 <main+0x358>)
 80043be:	6811      	ldr	r1, [r2, #0]
 80043c0:	4abc      	ldr	r2, [pc, #752]	; (80046b4 <main+0x35c>)
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe fc94 	bl	8002cf2 <homeDataDisplay>
  while(1)
  {
	  switch(menuTesteMain.menuState)
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	2b05      	cmp	r3, #5
 80043ce:	d8fc      	bhi.n	80043ca <main+0x72>
 80043d0:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <main+0x80>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	080043f1 	.word	0x080043f1
 80043dc:	08004419 	.word	0x08004419
 80043e0:	08004491 	.word	0x08004491
 80043e4:	0800450f 	.word	0x0800450f
 80043e8:	0800458d 	.word	0x0800458d
 80043ec:	08004609 	.word	0x08004609
	  {
		  case IDDLE:
			  if(key == AVANCAR)
 80043f0:	4bb1      	ldr	r3, [pc, #708]	; (80046b8 <main+0x360>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b41      	cmp	r3, #65	; 0x41
 80043f8:	f040 8144 	bne.w	8004684 <main+0x32c>
			  {
				  resetKeyPressed();
 80043fc:	f7ff ff68 	bl	80042d0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004400:	1d3a      	adds	r2, r7, #4
 8004402:	1dfb      	adds	r3, r7, #7
 8004404:	4611      	mov	r1, r2
 8004406:	4618      	mov	r0, r3
 8004408:	f7fd fd34 	bl	8001e74 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(START_TEST);
 800440c:	2001      	movs	r0, #1
 800440e:	f000 fc01 	bl	8004c14 <getNextMain>
 8004412:	4603      	mov	r3, r0
 8004414:	73fb      	strb	r3, [r7, #15]
			  }
		  break;
 8004416:	e135      	b.n	8004684 <main+0x32c>

		  case START_TEST:
			  updateUserMsg(0,0,startUserMsg,&displayUpdateStatus);
 8004418:	4ba8      	ldr	r3, [pc, #672]	; (80046bc <main+0x364>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	1dfb      	adds	r3, r7, #7
 800441e:	2100      	movs	r1, #0
 8004420:	2000      	movs	r0, #0
 8004422:	f7fd fd09 	bl	8001e38 <updateUserMsg>
			  if(key == AVANCAR)
 8004426:	4ba4      	ldr	r3, [pc, #656]	; (80046b8 <main+0x360>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b41      	cmp	r3, #65	; 0x41
 800442e:	d10d      	bne.n	800444c <main+0xf4>
			  {
				  resetKeyPressed();
 8004430:	f7ff ff4e 	bl	80042d0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004434:	1d3a      	adds	r2, r7, #4
 8004436:	1dfb      	adds	r3, r7, #7
 8004438:	4611      	mov	r1, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f7fd fd1a 	bl	8001e74 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(CONSULT_DATA);
 8004440:	2002      	movs	r0, #2
 8004442:	f000 fbe7 	bl	8004c14 <getNextMain>
 8004446:	4603      	mov	r3, r0
 8004448:	73fb      	strb	r3, [r7, #15]
				  menuTesteMain.menuSelect = menuTesteMain.menuState;
				  initStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
			  }
		  break;
 800444a:	e11d      	b.n	8004688 <main+0x330>
			  else if(key == CONFIRMAR)
 800444c:	4b9a      	ldr	r3, [pc, #616]	; (80046b8 <main+0x360>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b43      	cmp	r3, #67	; 0x43
 8004454:	f040 8118 	bne.w	8004688 <main+0x330>
				  resetKeyPressed();
 8004458:	f7ff ff3a 	bl	80042d0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800445c:	1d3a      	adds	r2, r7, #4
 800445e:	1dfb      	adds	r3, r7, #7
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f7fd fd06 	bl	8001e74 <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 8004468:	f107 030c 	add.w	r3, r7, #12
 800446c:	3303      	adds	r3, #3
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fbe2 	bl	8004c38 <setSelectMain>
 8004474:	4603      	mov	r3, r0
 8004476:	73fb      	strb	r3, [r7, #15]
				  menuTesteMain.menuSelect = menuTesteMain.menuState;
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	737b      	strb	r3, [r7, #13]
				  initStateMachine(&menuTesteSub);
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	4618      	mov	r0, r3
 8004482:	f7fd ff4f 	bl	8002324 <initStateMachine>
				  menuTesteSub.menuState = IDDLE;
 8004486:	2300      	movs	r3, #0
 8004488:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 800448a:	2300      	movs	r3, #0
 800448c:	727b      	strb	r3, [r7, #9]
		  break;
 800448e:	e0fb      	b.n	8004688 <main+0x330>

		  case CONSULT_DATA:
			  updateUserMsg(0,0,consultUserMsg,&displayUpdateStatus);
 8004490:	4b8b      	ldr	r3, [pc, #556]	; (80046c0 <main+0x368>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	1dfb      	adds	r3, r7, #7
 8004496:	2100      	movs	r1, #0
 8004498:	2000      	movs	r0, #0
 800449a:	f7fd fccd 	bl	8001e38 <updateUserMsg>
			  if(key == AVANCAR)
 800449e:	4b86      	ldr	r3, [pc, #536]	; (80046b8 <main+0x360>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b41      	cmp	r3, #65	; 0x41
 80044a6:	d10d      	bne.n	80044c4 <main+0x16c>
			  {
				  resetKeyPressed();
 80044a8:	f7ff ff12 	bl	80042d0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80044ac:	1d3a      	adds	r2, r7, #4
 80044ae:	1dfb      	adds	r3, r7, #7
 80044b0:	4611      	mov	r1, r2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd fcde 	bl	8001e74 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(CONFIG_SENSOR);
 80044b8:	2003      	movs	r0, #3
 80044ba:	f000 fbab 	bl	8004c14 <getNextMain>
 80044be:	4603      	mov	r3, r0
 80044c0:	73fb      	strb	r3, [r7, #15]
				 consultStateMachine(&menuTesteSub);
				 menuTesteMain.menuState = getNextMain(START_TEST);
				 menuTesteSub.menuState = IDDLE;
				 menuTesteSub.menuSelect = IDDLE;
			  }
		  break;
 80044c2:	e0e3      	b.n	800468c <main+0x334>
			  else if(key == CONFIRMAR)
 80044c4:	4b7c      	ldr	r3, [pc, #496]	; (80046b8 <main+0x360>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b43      	cmp	r3, #67	; 0x43
 80044cc:	f040 80de 	bne.w	800468c <main+0x334>
				  resetKeyPressed();
 80044d0:	f7ff fefe 	bl	80042d0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80044d4:	1d3a      	adds	r2, r7, #4
 80044d6:	1dfb      	adds	r3, r7, #7
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd fcca 	bl	8001e74 <readyUserInterface>
				 menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 80044e0:	f107 030c 	add.w	r3, r7, #12
 80044e4:	3303      	adds	r3, #3
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fba6 	bl	8004c38 <setSelectMain>
 80044ec:	4603      	mov	r3, r0
 80044ee:	73fb      	strb	r3, [r7, #15]
				 consultStateMachine(&menuTesteSub);
 80044f0:	f107 0308 	add.w	r3, r7, #8
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fc fbad 	bl	8000c54 <consultStateMachine>
				 menuTesteMain.menuState = getNextMain(START_TEST);
 80044fa:	2001      	movs	r0, #1
 80044fc:	f000 fb8a 	bl	8004c14 <getNextMain>
 8004500:	4603      	mov	r3, r0
 8004502:	73fb      	strb	r3, [r7, #15]
				 menuTesteSub.menuState = IDDLE;
 8004504:	2300      	movs	r3, #0
 8004506:	72fb      	strb	r3, [r7, #11]
				 menuTesteSub.menuSelect = IDDLE;
 8004508:	2300      	movs	r3, #0
 800450a:	727b      	strb	r3, [r7, #9]
		  break;
 800450c:	e0be      	b.n	800468c <main+0x334>

		  case CONFIG_SENSOR:
			  updateUserMsg(0,0,configUserMsg,&displayUpdateStatus);
 800450e:	4b6d      	ldr	r3, [pc, #436]	; (80046c4 <main+0x36c>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	1dfb      	adds	r3, r7, #7
 8004514:	2100      	movs	r1, #0
 8004516:	2000      	movs	r0, #0
 8004518:	f7fd fc8e 	bl	8001e38 <updateUserMsg>
			  if(key == AVANCAR)
 800451c:	4b66      	ldr	r3, [pc, #408]	; (80046b8 <main+0x360>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b41      	cmp	r3, #65	; 0x41
 8004524:	d10d      	bne.n	8004542 <main+0x1ea>
			  {
				  resetKeyPressed();
 8004526:	f7ff fed3 	bl	80042d0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800452a:	1d3a      	adds	r2, r7, #4
 800452c:	1dfb      	adds	r3, r7, #7
 800452e:	4611      	mov	r1, r2
 8004530:	4618      	mov	r0, r3
 8004532:	f7fd fc9f 	bl	8001e74 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(EXPORT_DATA);
 8004536:	2004      	movs	r0, #4
 8004538:	f000 fb6c 	bl	8004c14 <getNextMain>
 800453c:	4603      	mov	r3, r0
 800453e:	73fb      	strb	r3, [r7, #15]
				  configStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 8004540:	e0a6      	b.n	8004690 <main+0x338>
			  else if(key == CONFIRMAR)
 8004542:	4b5d      	ldr	r3, [pc, #372]	; (80046b8 <main+0x360>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b43      	cmp	r3, #67	; 0x43
 800454a:	f040 80a1 	bne.w	8004690 <main+0x338>
				  resetKeyPressed();
 800454e:	f7ff febf 	bl	80042d0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004552:	1d3a      	adds	r2, r7, #4
 8004554:	1dfb      	adds	r3, r7, #7
 8004556:	4611      	mov	r1, r2
 8004558:	4618      	mov	r0, r3
 800455a:	f7fd fc8b 	bl	8001e74 <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 800455e:	f107 030c 	add.w	r3, r7, #12
 8004562:	3303      	adds	r3, #3
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fb67 	bl	8004c38 <setSelectMain>
 800456a:	4603      	mov	r3, r0
 800456c:	73fb      	strb	r3, [r7, #15]
				  configStateMachine(&menuTesteSub);
 800456e:	f107 0308 	add.w	r3, r7, #8
 8004572:	4618      	mov	r0, r3
 8004574:	f7fb fe96 	bl	80002a4 <configStateMachine>
				  menuTesteSub.menuState = IDDLE;
 8004578:	2300      	movs	r3, #0
 800457a:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 800457c:	2300      	movs	r3, #0
 800457e:	727b      	strb	r3, [r7, #9]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8004580:	2001      	movs	r0, #1
 8004582:	f000 fb47 	bl	8004c14 <getNextMain>
 8004586:	4603      	mov	r3, r0
 8004588:	73fb      	strb	r3, [r7, #15]
		  break;
 800458a:	e081      	b.n	8004690 <main+0x338>

		  case EXPORT_DATA:
			  updateUserMsg(0,0,exportUserMsg,&displayUpdateStatus);
 800458c:	4b4e      	ldr	r3, [pc, #312]	; (80046c8 <main+0x370>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	1dfb      	adds	r3, r7, #7
 8004592:	2100      	movs	r1, #0
 8004594:	2000      	movs	r0, #0
 8004596:	f7fd fc4f 	bl	8001e38 <updateUserMsg>
			  if(key == AVANCAR)
 800459a:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <main+0x360>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b41      	cmp	r3, #65	; 0x41
 80045a2:	d10d      	bne.n	80045c0 <main+0x268>
			  {
				  resetKeyPressed();
 80045a4:	f7ff fe94 	bl	80042d0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80045a8:	1d3a      	adds	r2, r7, #4
 80045aa:	1dfb      	adds	r3, r7, #7
 80045ac:	4611      	mov	r1, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fd fc60 	bl	8001e74 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(ERASE_DATA);
 80045b4:	2005      	movs	r0, #5
 80045b6:	f000 fb2d 	bl	8004c14 <getNextMain>
 80045ba:	4603      	mov	r3, r0
 80045bc:	73fb      	strb	r3, [r7, #15]
				  exportStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 80045be:	e069      	b.n	8004694 <main+0x33c>
			  else if(key == CONFIRMAR)
 80045c0:	4b3d      	ldr	r3, [pc, #244]	; (80046b8 <main+0x360>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b43      	cmp	r3, #67	; 0x43
 80045c8:	d164      	bne.n	8004694 <main+0x33c>
				  resetKeyPressed();
 80045ca:	f7ff fe81 	bl	80042d0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80045ce:	1d3a      	adds	r2, r7, #4
 80045d0:	1dfb      	adds	r3, r7, #7
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fd fc4d 	bl	8001e74 <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 80045da:	f107 030c 	add.w	r3, r7, #12
 80045de:	3303      	adds	r3, #3
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fb29 	bl	8004c38 <setSelectMain>
 80045e6:	4603      	mov	r3, r0
 80045e8:	73fb      	strb	r3, [r7, #15]
				  exportStateMachine(&menuTesteSub);
 80045ea:	f107 0308 	add.w	r3, r7, #8
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fd fc72 	bl	8001ed8 <exportStateMachine>
				  menuTesteSub.menuState = IDDLE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	727b      	strb	r3, [r7, #9]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 80045fc:	2001      	movs	r0, #1
 80045fe:	f000 fb09 	bl	8004c14 <getNextMain>
 8004602:	4603      	mov	r3, r0
 8004604:	73fb      	strb	r3, [r7, #15]
		  break;
 8004606:	e045      	b.n	8004694 <main+0x33c>

		  case ERASE_DATA:
			  updateUserMsg(0,0,eraseUserMsg,&displayUpdateStatus);
 8004608:	4b30      	ldr	r3, [pc, #192]	; (80046cc <main+0x374>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	1dfb      	adds	r3, r7, #7
 800460e:	2100      	movs	r1, #0
 8004610:	2000      	movs	r0, #0
 8004612:	f7fd fc11 	bl	8001e38 <updateUserMsg>
			  if(key == AVANCAR)
 8004616:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <main+0x360>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b41      	cmp	r3, #65	; 0x41
 800461e:	d10d      	bne.n	800463c <main+0x2e4>
			  {
				  resetKeyPressed();
 8004620:	f7ff fe56 	bl	80042d0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004624:	1d3a      	adds	r2, r7, #4
 8004626:	1dfb      	adds	r3, r7, #7
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f7fd fc22 	bl	8001e74 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8004630:	2001      	movs	r0, #1
 8004632:	f000 faef 	bl	8004c14 <getNextMain>
 8004636:	4603      	mov	r3, r0
 8004638:	73fb      	strb	r3, [r7, #15]
				  eraseStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 800463a:	e02d      	b.n	8004698 <main+0x340>
			  else if(key == CONFIRMAR)
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <main+0x360>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b43      	cmp	r3, #67	; 0x43
 8004644:	d128      	bne.n	8004698 <main+0x340>
				  resetKeyPressed();
 8004646:	f7ff fe43 	bl	80042d0 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800464a:	1d3a      	adds	r2, r7, #4
 800464c:	1dfb      	adds	r3, r7, #7
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f7fd fc0f 	bl	8001e74 <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 8004656:	f107 030c 	add.w	r3, r7, #12
 800465a:	3303      	adds	r3, #3
 800465c:	4618      	mov	r0, r3
 800465e:	f000 faeb 	bl	8004c38 <setSelectMain>
 8004662:	4603      	mov	r3, r0
 8004664:	73fb      	strb	r3, [r7, #15]
				  eraseStateMachine(&menuTesteSub);
 8004666:	f107 0308 	add.w	r3, r7, #8
 800466a:	4618      	mov	r0, r3
 800466c:	f7fb fd80 	bl	8000170 <eraseStateMachine>
				  menuTesteSub.menuState = IDDLE;
 8004670:	2300      	movs	r3, #0
 8004672:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 8004674:	2300      	movs	r3, #0
 8004676:	727b      	strb	r3, [r7, #9]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8004678:	2001      	movs	r0, #1
 800467a:	f000 facb 	bl	8004c14 <getNextMain>
 800467e:	4603      	mov	r3, r0
 8004680:	73fb      	strb	r3, [r7, #15]
		  break;
 8004682:	e009      	b.n	8004698 <main+0x340>
		  break;
 8004684:	bf00      	nop
 8004686:	e6a0      	b.n	80043ca <main+0x72>
		  break;
 8004688:	bf00      	nop
 800468a:	e69e      	b.n	80043ca <main+0x72>
		  break;
 800468c:	bf00      	nop
 800468e:	e69c      	b.n	80043ca <main+0x72>
		  break;
 8004690:	bf00      	nop
 8004692:	e69a      	b.n	80043ca <main+0x72>
		  break;
 8004694:	bf00      	nop
 8004696:	e698      	b.n	80043ca <main+0x72>
		  break;
 8004698:	bf00      	nop
	  switch(menuTesteMain.menuState)
 800469a:	e696      	b.n	80043ca <main+0x72>
 800469c:	20000684 	.word	0x20000684
 80046a0:	200005f0 	.word	0x200005f0
 80046a4:	20000634 	.word	0x20000634
 80046a8:	40011000 	.word	0x40011000
 80046ac:	2000000c 	.word	0x2000000c
 80046b0:	20000010 	.word	0x20000010
 80046b4:	20000014 	.word	0x20000014
 80046b8:	20000678 	.word	0x20000678
 80046bc:	20000018 	.word	0x20000018
 80046c0:	20000050 	.word	0x20000050
 80046c4:	20000060 	.word	0x20000060
 80046c8:	20000094 	.word	0x20000094
 80046cc:	200000a0 	.word	0x200000a0

080046d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b090      	sub	sp, #64	; 0x40
 80046d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046d6:	f107 0318 	add.w	r3, r7, #24
 80046da:	2228      	movs	r2, #40	; 0x28
 80046dc:	2100      	movs	r1, #0
 80046de:	4618      	mov	r0, r3
 80046e0:	f004 fb22 	bl	8008d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046e4:	1d3b      	adds	r3, r7, #4
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	605a      	str	r2, [r3, #4]
 80046ec:	609a      	str	r2, [r3, #8]
 80046ee:	60da      	str	r2, [r3, #12]
 80046f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046f2:	2301      	movs	r3, #1
 80046f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80046fc:	2300      	movs	r3, #0
 80046fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004700:	2301      	movs	r3, #1
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004704:	2302      	movs	r3, #2
 8004706:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800470c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800470e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004712:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004714:	f107 0318 	add.w	r3, r7, #24
 8004718:	4618      	mov	r0, r3
 800471a:	f001 fb61 	bl	8005de0 <HAL_RCC_OscConfig>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004724:	f000 fa70 	bl	8004c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004728:	230f      	movs	r3, #15
 800472a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800472c:	2302      	movs	r3, #2
 800472e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	2102      	movs	r1, #2
 8004742:	4618      	mov	r0, r3
 8004744:	f001 fdce 	bl	80062e4 <HAL_RCC_ClockConfig>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800474e:	f000 fa5b 	bl	8004c08 <Error_Handler>
  }
}
 8004752:	bf00      	nop
 8004754:	3740      	adds	r7, #64	; 0x40
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004760:	4b17      	ldr	r3, [pc, #92]	; (80047c0 <MX_SPI1_Init+0x64>)
 8004762:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <MX_SPI1_Init+0x68>)
 8004764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004766:	4b16      	ldr	r3, [pc, #88]	; (80047c0 <MX_SPI1_Init+0x64>)
 8004768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800476c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800476e:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <MX_SPI1_Init+0x64>)
 8004770:	2200      	movs	r2, #0
 8004772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004774:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <MX_SPI1_Init+0x64>)
 8004776:	2200      	movs	r2, #0
 8004778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800477a:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <MX_SPI1_Init+0x64>)
 800477c:	2200      	movs	r2, #0
 800477e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <MX_SPI1_Init+0x64>)
 8004782:	2200      	movs	r2, #0
 8004784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004786:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <MX_SPI1_Init+0x64>)
 8004788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800478c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800478e:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <MX_SPI1_Init+0x64>)
 8004790:	2208      	movs	r2, #8
 8004792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <MX_SPI1_Init+0x64>)
 8004796:	2200      	movs	r2, #0
 8004798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800479a:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <MX_SPI1_Init+0x64>)
 800479c:	2200      	movs	r2, #0
 800479e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <MX_SPI1_Init+0x64>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <MX_SPI1_Init+0x64>)
 80047a8:	220a      	movs	r2, #10
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80047ac:	4804      	ldr	r0, [pc, #16]	; (80047c0 <MX_SPI1_Init+0x64>)
 80047ae:	f001 ff31 	bl	8006614 <HAL_SPI_Init>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80047b8:	f000 fa26 	bl	8004c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80047bc:	bf00      	nop
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000508 	.word	0x20000508
 80047c4:	40013000 	.word	0x40013000

080047c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08c      	sub	sp, #48	; 0x30
 80047cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80047ce:	f107 030c 	add.w	r3, r7, #12
 80047d2:	2224      	movs	r2, #36	; 0x24
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f004 faa6 	bl	8008d28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047dc:	1d3b      	adds	r3, r7, #4
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80047e4:	4b21      	ldr	r3, [pc, #132]	; (800486c <MX_TIM2_Init+0xa4>)
 80047e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80047ec:	4b1f      	ldr	r3, [pc, #124]	; (800486c <MX_TIM2_Init+0xa4>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047f2:	4b1e      	ldr	r3, [pc, #120]	; (800486c <MX_TIM2_Init+0xa4>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80047f8:	4b1c      	ldr	r3, [pc, #112]	; (800486c <MX_TIM2_Init+0xa4>)
 80047fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <MX_TIM2_Init+0xa4>)
 8004802:	2200      	movs	r2, #0
 8004804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004806:	4b19      	ldr	r3, [pc, #100]	; (800486c <MX_TIM2_Init+0xa4>)
 8004808:	2200      	movs	r2, #0
 800480a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800480c:	2303      	movs	r3, #3
 800480e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004810:	2302      	movs	r3, #2
 8004812:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004814:	2301      	movs	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004818:	2300      	movs	r3, #0
 800481a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800481c:	230f      	movs	r3, #15
 800481e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004820:	2300      	movs	r3, #0
 8004822:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004824:	2301      	movs	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004828:	2300      	movs	r3, #0
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800482c:	230f      	movs	r3, #15
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004830:	f107 030c 	add.w	r3, r7, #12
 8004834:	4619      	mov	r1, r3
 8004836:	480d      	ldr	r0, [pc, #52]	; (800486c <MX_TIM2_Init+0xa4>)
 8004838:	f002 fbc4 	bl	8006fc4 <HAL_TIM_Encoder_Init>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004842:	f000 f9e1 	bl	8004c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004846:	2300      	movs	r3, #0
 8004848:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800484a:	2300      	movs	r3, #0
 800484c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4806      	ldr	r0, [pc, #24]	; (800486c <MX_TIM2_Init+0xa4>)
 8004854:	f003 f8be 	bl	80079d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800485e:	f000 f9d3 	bl	8004c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004862:	bf00      	nop
 8004864:	3730      	adds	r7, #48	; 0x30
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000560 	.word	0x20000560

08004870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004876:	f107 0308 	add.w	r3, r7, #8
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	609a      	str	r2, [r3, #8]
 8004882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004884:	463b      	mov	r3, r7
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800488c:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <MX_TIM3_Init+0x94>)
 800488e:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <MX_TIM3_Init+0x98>)
 8004890:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8004892:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <MX_TIM3_Init+0x94>)
 8004894:	2247      	movs	r2, #71	; 0x47
 8004896:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004898:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <MX_TIM3_Init+0x94>)
 800489a:	2200      	movs	r2, #0
 800489c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800489e:	4b19      	ldr	r3, [pc, #100]	; (8004904 <MX_TIM3_Init+0x94>)
 80048a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80048a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048a6:	4b17      	ldr	r3, [pc, #92]	; (8004904 <MX_TIM3_Init+0x94>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048ac:	4b15      	ldr	r3, [pc, #84]	; (8004904 <MX_TIM3_Init+0x94>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80048b2:	4814      	ldr	r0, [pc, #80]	; (8004904 <MX_TIM3_Init+0x94>)
 80048b4:	f002 fab6 	bl	8006e24 <HAL_TIM_Base_Init>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80048be:	f000 f9a3 	bl	8004c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80048c8:	f107 0308 	add.w	r3, r7, #8
 80048cc:	4619      	mov	r1, r3
 80048ce:	480d      	ldr	r0, [pc, #52]	; (8004904 <MX_TIM3_Init+0x94>)
 80048d0:	f002 fe85 	bl	80075de <HAL_TIM_ConfigClockSource>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80048da:	f000 f995 	bl	8004c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048de:	2300      	movs	r3, #0
 80048e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80048e6:	463b      	mov	r3, r7
 80048e8:	4619      	mov	r1, r3
 80048ea:	4806      	ldr	r0, [pc, #24]	; (8004904 <MX_TIM3_Init+0x94>)
 80048ec:	f003 f872 	bl	80079d4 <HAL_TIMEx_MasterConfigSynchronization>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80048f6:	f000 f987 	bl	8004c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80048fa:	bf00      	nop
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	200005a8 	.word	0x200005a8
 8004908:	40000400 	.word	0x40000400

0800490c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004910:	4b11      	ldr	r3, [pc, #68]	; (8004958 <MX_USART2_UART_Init+0x4c>)
 8004912:	4a12      	ldr	r2, [pc, #72]	; (800495c <MX_USART2_UART_Init+0x50>)
 8004914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004916:	4b10      	ldr	r3, [pc, #64]	; (8004958 <MX_USART2_UART_Init+0x4c>)
 8004918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800491c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800491e:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <MX_USART2_UART_Init+0x4c>)
 8004920:	2200      	movs	r2, #0
 8004922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <MX_USART2_UART_Init+0x4c>)
 8004926:	2200      	movs	r2, #0
 8004928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800492a:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <MX_USART2_UART_Init+0x4c>)
 800492c:	2200      	movs	r2, #0
 800492e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <MX_USART2_UART_Init+0x4c>)
 8004932:	220c      	movs	r2, #12
 8004934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004936:	4b08      	ldr	r3, [pc, #32]	; (8004958 <MX_USART2_UART_Init+0x4c>)
 8004938:	2200      	movs	r2, #0
 800493a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <MX_USART2_UART_Init+0x4c>)
 800493e:	2200      	movs	r2, #0
 8004940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004942:	4805      	ldr	r0, [pc, #20]	; (8004958 <MX_USART2_UART_Init+0x4c>)
 8004944:	f003 f8b6 	bl	8007ab4 <HAL_UART_Init>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800494e:	f000 f95b 	bl	8004c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004952:	bf00      	nop
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	200005f0 	.word	0x200005f0
 800495c:	40004400 	.word	0x40004400

08004960 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004966:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <MX_DMA_Init+0x38>)
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <MX_DMA_Init+0x38>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6153      	str	r3, [r2, #20]
 8004972:	4b09      	ldr	r3, [pc, #36]	; (8004998 <MX_DMA_Init+0x38>)
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800497e:	2200      	movs	r2, #0
 8004980:	2100      	movs	r1, #0
 8004982:	2010      	movs	r0, #16
 8004984:	f000 fda3 	bl	80054ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004988:	2010      	movs	r0, #16
 800498a:	f000 fdbc 	bl	8005506 <HAL_NVIC_EnableIRQ>

}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000

0800499c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a2:	f107 0310 	add.w	r3, r7, #16
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049b0:	4b47      	ldr	r3, [pc, #284]	; (8004ad0 <MX_GPIO_Init+0x134>)
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	4a46      	ldr	r2, [pc, #280]	; (8004ad0 <MX_GPIO_Init+0x134>)
 80049b6:	f043 0310 	orr.w	r3, r3, #16
 80049ba:	6193      	str	r3, [r2, #24]
 80049bc:	4b44      	ldr	r3, [pc, #272]	; (8004ad0 <MX_GPIO_Init+0x134>)
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049c8:	4b41      	ldr	r3, [pc, #260]	; (8004ad0 <MX_GPIO_Init+0x134>)
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	4a40      	ldr	r2, [pc, #256]	; (8004ad0 <MX_GPIO_Init+0x134>)
 80049ce:	f043 0320 	orr.w	r3, r3, #32
 80049d2:	6193      	str	r3, [r2, #24]
 80049d4:	4b3e      	ldr	r3, [pc, #248]	; (8004ad0 <MX_GPIO_Init+0x134>)
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e0:	4b3b      	ldr	r3, [pc, #236]	; (8004ad0 <MX_GPIO_Init+0x134>)
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	4a3a      	ldr	r2, [pc, #232]	; (8004ad0 <MX_GPIO_Init+0x134>)
 80049e6:	f043 0304 	orr.w	r3, r3, #4
 80049ea:	6193      	str	r3, [r2, #24]
 80049ec:	4b38      	ldr	r3, [pc, #224]	; (8004ad0 <MX_GPIO_Init+0x134>)
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f8:	4b35      	ldr	r3, [pc, #212]	; (8004ad0 <MX_GPIO_Init+0x134>)
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	4a34      	ldr	r2, [pc, #208]	; (8004ad0 <MX_GPIO_Init+0x134>)
 80049fe:	f043 0308 	orr.w	r3, r3, #8
 8004a02:	6193      	str	r3, [r2, #24]
 8004a04:	4b32      	ldr	r3, [pc, #200]	; (8004ad0 <MX_GPIO_Init+0x134>)
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004a10:	2200      	movs	r2, #0
 8004a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a16:	482f      	ldr	r0, [pc, #188]	; (8004ad4 <MX_GPIO_Init+0x138>)
 8004a18:	f001 f9b2 	bl	8005d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f649 7110 	movw	r1, #40720	; 0x9f10
 8004a22:	482d      	ldr	r0, [pc, #180]	; (8004ad8 <MX_GPIO_Init+0x13c>)
 8004a24:	f001 f9ac 	bl	8005d80 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f24f 2108 	movw	r1, #61960	; 0xf208
 8004a2e:	482b      	ldr	r0, [pc, #172]	; (8004adc <MX_GPIO_Init+0x140>)
 8004a30:	f001 f9a6 	bl	8005d80 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a42:	2302      	movs	r3, #2
 8004a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004a46:	f107 0310 	add.w	r3, r7, #16
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4821      	ldr	r0, [pc, #132]	; (8004ad4 <MX_GPIO_Init+0x138>)
 8004a4e:	f001 f813 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LCD_D3_Pin LCD_D2_Pin LCD_D1_Pin
                           LCD_D0_Pin LCD_EN_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8004a52:	f649 7310 	movw	r3, #40720	; 0x9f10
 8004a56:	613b      	str	r3, [r7, #16]
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a60:	2302      	movs	r3, #2
 8004a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a64:	f107 0310 	add.w	r3, r7, #16
 8004a68:	4619      	mov	r1, r3
 8004a6a:	481b      	ldr	r0, [pc, #108]	; (8004ad8 <MX_GPIO_Init+0x13c>)
 8004a6c:	f001 f804 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_RS_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8004a70:	f24f 2308 	movw	r3, #61960	; 0xf208
 8004a74:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a76:	2301      	movs	r3, #1
 8004a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a82:	f107 0310 	add.w	r3, r7, #16
 8004a86:	4619      	mov	r1, r3
 8004a88:	4814      	ldr	r0, [pc, #80]	; (8004adc <MX_GPIO_Init+0x140>)
 8004a8a:	f000 fff5 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_MENU_Pin BT_AVANCA_Pin BT_SELECT_Pin BT_STOP_Pin
                           BT_INSERT_Pin */
  GPIO_InitStruct.Pin = BT_MENU_Pin|BT_AVANCA_Pin|BT_SELECT_Pin|BT_STOP_Pin
 8004a8e:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8004a92:	613b      	str	r3, [r7, #16]
                          |BT_INSERT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a94:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <MX_GPIO_Init+0x144>)
 8004a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9c:	f107 0310 	add.w	r3, r7, #16
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	480e      	ldr	r0, [pc, #56]	; (8004adc <MX_GPIO_Init+0x140>)
 8004aa4:	f000 ffe8 	bl	8005a78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2100      	movs	r1, #0
 8004aac:	200a      	movs	r0, #10
 8004aae:	f000 fd0e 	bl	80054ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004ab2:	200a      	movs	r0, #10
 8004ab4:	f000 fd27 	bl	8005506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2100      	movs	r1, #0
 8004abc:	2017      	movs	r0, #23
 8004abe:	f000 fd06 	bl	80054ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004ac2:	2017      	movs	r0, #23
 8004ac4:	f000 fd1f 	bl	8005506 <HAL_NVIC_EnableIRQ>

}
 8004ac8:	bf00      	nop
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40011000 	.word	0x40011000
 8004ad8:	40010800 	.word	0x40010800
 8004adc:	40010c00 	.word	0x40010c00
 8004ae0:	10210000 	.word	0x10210000

08004ae4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	timer3Count+=1;  //1ms
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3301      	adds	r3, #1
 8004af2:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004af4:	6013      	str	r3, [r2, #0]
	if(timer3Count == 1000)
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004afe:	d107      	bne.n	8004b10 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		timer3Data += 1;
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	4a06      	ldr	r2, [pc, #24]	; (8004b20 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004b08:	6013      	str	r3, [r2, #0]
		timer3Count = 0;
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]

	}

}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000680 	.word	0x20000680
 8004b20:	2000067c 	.word	0x2000067c

08004b24 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	807b      	strh	r3, [r7, #2]

	uartBuffer[0]+=1;
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_UARTEx_RxEventCallback+0x3c>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	3301      	adds	r3, #1
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <HAL_UARTEx_RxEventCallback+0x3c>)
 8004b3c:	701a      	strb	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 8004b3e:	2205      	movs	r2, #5
 8004b40:	4907      	ldr	r1, [pc, #28]	; (8004b60 <HAL_UARTEx_RxEventCallback+0x3c>)
 8004b42:	4808      	ldr	r0, [pc, #32]	; (8004b64 <HAL_UARTEx_RxEventCallback+0x40>)
 8004b44:	f003 f803 	bl	8007b4e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8004b48:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <HAL_UARTEx_RxEventCallback+0x44>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_UARTEx_RxEventCallback+0x44>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0204 	bic.w	r2, r2, #4
 8004b56:	601a      	str	r2, [r3, #0]

}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20000684 	.word	0x20000684
 8004b64:	200005f0 	.word	0x200005f0
 8004b68:	20000634 	.word	0x20000634

08004b6c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	if(htim->Channel == 2) sensorFlag = 1;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	7f1b      	ldrb	r3, [r3, #28]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d103      	bne.n	8004b84 <HAL_TIM_IC_CaptureCallback+0x18>
 8004b7c:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <HAL_TIM_IC_CaptureCallback+0x30>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	701a      	strb	r2, [r3, #0]
//	arraySample[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].sampleNum;
//	arrayAltDistance[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].ucAltDistance;
//	arrayVooTime[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].uiVooTime;
//	arrayReadingTime[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].ulReadingTime;
//	sampleCount++;
}
 8004b82:	e006      	b.n	8004b92 <HAL_TIM_IC_CaptureCallback+0x26>
	else if(htim->Channel == 1) sensorFlag = 0;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	7f1b      	ldrb	r3, [r3, #28]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d102      	bne.n	8004b92 <HAL_TIM_IC_CaptureCallback+0x26>
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_TIM_IC_CaptureCallback+0x30>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	701a      	strb	r2, [r3, #0]
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr
 8004b9c:	200000b1 	.word	0x200000b1

08004ba0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb0:	d012      	beq.n	8004bd8 <HAL_GPIO_EXTI_Callback+0x38>
 8004bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb6:	dc1f      	bgt.n	8004bf8 <HAL_GPIO_EXTI_Callback+0x58>
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	d019      	beq.n	8004bf0 <HAL_GPIO_EXTI_Callback+0x50>
 8004bbc:	2b80      	cmp	r3, #128	; 0x80
 8004bbe:	dc1b      	bgt.n	8004bf8 <HAL_GPIO_EXTI_Callback+0x58>
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d011      	beq.n	8004be8 <HAL_GPIO_EXTI_Callback+0x48>
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	dc17      	bgt.n	8004bf8 <HAL_GPIO_EXTI_Callback+0x58>
 8004bc8:	2b10      	cmp	r3, #16
 8004bca:	d009      	beq.n	8004be0 <HAL_GPIO_EXTI_Callback+0x40>
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d113      	bne.n	8004bf8 <HAL_GPIO_EXTI_Callback+0x58>
	{
		case BT_AVANCA_Pin:
			key = AVANCAR;
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <HAL_GPIO_EXTI_Callback+0x64>)
 8004bd2:	2241      	movs	r2, #65	; 0x41
 8004bd4:	701a      	strb	r2, [r3, #0]
		break;
 8004bd6:	e00f      	b.n	8004bf8 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_INSERT_Pin:
			key = INSERIR;
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <HAL_GPIO_EXTI_Callback+0x64>)
 8004bda:	2249      	movs	r2, #73	; 0x49
 8004bdc:	701a      	strb	r2, [r3, #0]
		break;
 8004bde:	e00b      	b.n	8004bf8 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_MENU_Pin:
			key = MENU;
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <HAL_GPIO_EXTI_Callback+0x64>)
 8004be2:	224d      	movs	r2, #77	; 0x4d
 8004be4:	701a      	strb	r2, [r3, #0]
		break;
 8004be6:	e007      	b.n	8004bf8 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_SELECT_Pin:
			key = CONFIRMAR;
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_GPIO_EXTI_Callback+0x64>)
 8004bea:	2243      	movs	r2, #67	; 0x43
 8004bec:	701a      	strb	r2, [r3, #0]
		break;
 8004bee:	e003      	b.n	8004bf8 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_STOP_Pin:
			key = PARAR;
 8004bf0:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <HAL_GPIO_EXTI_Callback+0x64>)
 8004bf2:	2250      	movs	r2, #80	; 0x50
 8004bf4:	701a      	strb	r2, [r3, #0]
		break;
 8004bf6:	bf00      	nop
	}

}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000678 	.word	0x20000678

08004c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c0c:	b672      	cpsid	i
}
 8004c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c10:	e7fe      	b.n	8004c10 <Error_Handler+0x8>
	...

08004c14 <getNextMain>:

struct Menu menuMain ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextMain(unsigned char nextState)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]

    menuMain.menuNext = nextState;
 8004c1e:	4a05      	ldr	r2, [pc, #20]	; (8004c34 <getNextMain+0x20>)
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	7013      	strb	r3, [r2, #0]
    return menuMain.menuNext;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <getNextMain+0x20>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	2000068c 	.word	0x2000068c

08004c38 <setSelectMain>:

unsigned char setSelectMain(unsigned char *selectedState)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
    unsigned char state = *selectedState;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	73fb      	strb	r3, [r7, #15]
    menuMain.menuSelect = state;
 8004c46:	4a05      	ldr	r2, [pc, #20]	; (8004c5c <setSelectMain+0x24>)
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	7053      	strb	r3, [r2, #1]
    return menuMain.menuSelect;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <setSelectMain+0x24>)
 8004c4e:	785b      	ldrb	r3, [r3, #1]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	2000068c 	.word	0x2000068c

08004c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004c66:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <HAL_MspInit+0x5c>)
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <HAL_MspInit+0x5c>)
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	6193      	str	r3, [r2, #24]
 8004c72:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <HAL_MspInit+0x5c>)
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c7e:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <HAL_MspInit+0x5c>)
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <HAL_MspInit+0x5c>)
 8004c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c88:	61d3      	str	r3, [r2, #28]
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <HAL_MspInit+0x5c>)
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c92:	607b      	str	r3, [r7, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004c96:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <HAL_MspInit+0x60>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <HAL_MspInit+0x60>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cb2:	bf00      	nop
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	40010000 	.word	0x40010000

08004cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ccc:	f107 0310 	add.w	r3, r7, #16
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1b      	ldr	r2, [pc, #108]	; (8004d4c <HAL_SPI_MspInit+0x88>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d12f      	bne.n	8004d44 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ce4:	4b1a      	ldr	r3, [pc, #104]	; (8004d50 <HAL_SPI_MspInit+0x8c>)
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	; (8004d50 <HAL_SPI_MspInit+0x8c>)
 8004cea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cee:	6193      	str	r3, [r2, #24]
 8004cf0:	4b17      	ldr	r3, [pc, #92]	; (8004d50 <HAL_SPI_MspInit+0x8c>)
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cfc:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <HAL_SPI_MspInit+0x8c>)
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <HAL_SPI_MspInit+0x8c>)
 8004d02:	f043 0304 	orr.w	r3, r3, #4
 8004d06:	6193      	str	r3, [r2, #24]
 8004d08:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <HAL_SPI_MspInit+0x8c>)
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004d14:	23a0      	movs	r3, #160	; 0xa0
 8004d16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d20:	f107 0310 	add.w	r3, r7, #16
 8004d24:	4619      	mov	r1, r3
 8004d26:	480b      	ldr	r0, [pc, #44]	; (8004d54 <HAL_SPI_MspInit+0x90>)
 8004d28:	f000 fea6 	bl	8005a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004d2c:	2340      	movs	r3, #64	; 0x40
 8004d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d38:	f107 0310 	add.w	r3, r7, #16
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4805      	ldr	r0, [pc, #20]	; (8004d54 <HAL_SPI_MspInit+0x90>)
 8004d40:	f000 fe9a 	bl	8005a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004d44:	bf00      	nop
 8004d46:	3720      	adds	r7, #32
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40013000 	.word	0x40013000
 8004d50:	40021000 	.word	0x40021000
 8004d54:	40010800 	.word	0x40010800

08004d58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d60:	f107 0310 	add.w	r3, r7, #16
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d76:	d12b      	bne.n	8004dd0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d78:	4b17      	ldr	r3, [pc, #92]	; (8004dd8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	4a16      	ldr	r2, [pc, #88]	; (8004dd8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	61d3      	str	r3, [r2, #28]
 8004d84:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d90:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	4a10      	ldr	r2, [pc, #64]	; (8004dd8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004d96:	f043 0304 	orr.w	r3, r3, #4
 8004d9a:	6193      	str	r3, [r2, #24]
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004da8:	2303      	movs	r3, #3
 8004daa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db4:	f107 0310 	add.w	r3, r7, #16
 8004db8:	4619      	mov	r1, r3
 8004dba:	4808      	ldr	r0, [pc, #32]	; (8004ddc <HAL_TIM_Encoder_MspInit+0x84>)
 8004dbc:	f000 fe5c 	bl	8005a78 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	201c      	movs	r0, #28
 8004dc6:	f000 fb82 	bl	80054ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004dca:	201c      	movs	r0, #28
 8004dcc:	f000 fb9b 	bl	8005506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004dd0:	bf00      	nop
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	40010800 	.word	0x40010800

08004de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a0d      	ldr	r2, [pc, #52]	; (8004e24 <HAL_TIM_Base_MspInit+0x44>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d113      	bne.n	8004e1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004df2:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <HAL_TIM_Base_MspInit+0x48>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	4a0c      	ldr	r2, [pc, #48]	; (8004e28 <HAL_TIM_Base_MspInit+0x48>)
 8004df8:	f043 0302 	orr.w	r3, r3, #2
 8004dfc:	61d3      	str	r3, [r2, #28]
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <HAL_TIM_Base_MspInit+0x48>)
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	201d      	movs	r0, #29
 8004e10:	f000 fb5d 	bl	80054ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e14:	201d      	movs	r0, #29
 8004e16:	f000 fb76 	bl	8005506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40021000 	.word	0x40021000

08004e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e34:	f107 0310 	add.w	r3, r7, #16
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
 8004e40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a32      	ldr	r2, [pc, #200]	; (8004f10 <HAL_UART_MspInit+0xe4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d15d      	bne.n	8004f08 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e4c:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <HAL_UART_MspInit+0xe8>)
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	4a30      	ldr	r2, [pc, #192]	; (8004f14 <HAL_UART_MspInit+0xe8>)
 8004e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e56:	61d3      	str	r3, [r2, #28]
 8004e58:	4b2e      	ldr	r3, [pc, #184]	; (8004f14 <HAL_UART_MspInit+0xe8>)
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e64:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <HAL_UART_MspInit+0xe8>)
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	4a2a      	ldr	r2, [pc, #168]	; (8004f14 <HAL_UART_MspInit+0xe8>)
 8004e6a:	f043 0304 	orr.w	r3, r3, #4
 8004e6e:	6193      	str	r3, [r2, #24]
 8004e70:	4b28      	ldr	r3, [pc, #160]	; (8004f14 <HAL_UART_MspInit+0xe8>)
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e80:	2302      	movs	r3, #2
 8004e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e84:	2303      	movs	r3, #3
 8004e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e88:	f107 0310 	add.w	r3, r7, #16
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4822      	ldr	r0, [pc, #136]	; (8004f18 <HAL_UART_MspInit+0xec>)
 8004e90:	f000 fdf2 	bl	8005a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004e94:	2308      	movs	r3, #8
 8004e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea0:	f107 0310 	add.w	r3, r7, #16
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	481c      	ldr	r0, [pc, #112]	; (8004f18 <HAL_UART_MspInit+0xec>)
 8004ea8:	f000 fde6 	bl	8005a78 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <HAL_UART_MspInit+0xf0>)
 8004eae:	4a1c      	ldr	r2, [pc, #112]	; (8004f20 <HAL_UART_MspInit+0xf4>)
 8004eb0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004eb2:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <HAL_UART_MspInit+0xf0>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eb8:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <HAL_UART_MspInit+0xf0>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ebe:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <HAL_UART_MspInit+0xf0>)
 8004ec0:	2280      	movs	r2, #128	; 0x80
 8004ec2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ec4:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <HAL_UART_MspInit+0xf0>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <HAL_UART_MspInit+0xf0>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <HAL_UART_MspInit+0xf0>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ed6:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <HAL_UART_MspInit+0xf0>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004edc:	480f      	ldr	r0, [pc, #60]	; (8004f1c <HAL_UART_MspInit+0xf0>)
 8004ede:	f000 fb2d 	bl	800553c <HAL_DMA_Init>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8004ee8:	f7ff fe8e 	bl	8004c08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a0b      	ldr	r2, [pc, #44]	; (8004f1c <HAL_UART_MspInit+0xf0>)
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ef2:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <HAL_UART_MspInit+0xf0>)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2100      	movs	r1, #0
 8004efc:	2026      	movs	r0, #38	; 0x26
 8004efe:	f000 fae6 	bl	80054ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004f02:	2026      	movs	r0, #38	; 0x26
 8004f04:	f000 faff 	bl	8005506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004f08:	bf00      	nop
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40004400 	.word	0x40004400
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40010800 	.word	0x40010800
 8004f1c:	20000634 	.word	0x20000634
 8004f20:	4002006c 	.word	0x4002006c

08004f24 <SDTimerHandler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1,Timer2;

void SDTimerHandler(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
	if(Timer1>0)
 8004f28:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <SDTimerHandler+0x3c>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d006      	beq.n	8004f40 <SDTimerHandler+0x1c>
		Timer1--;
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <SDTimerHandler+0x3c>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <SDTimerHandler+0x3c>)
 8004f3e:	701a      	strb	r2, [r3, #0]

	if(Timer2>0)
 8004f40:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <SDTimerHandler+0x40>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d006      	beq.n	8004f58 <SDTimerHandler+0x34>
		Timer2--;
 8004f4a:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <SDTimerHandler+0x40>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	4b03      	ldr	r3, [pc, #12]	; (8004f64 <SDTimerHandler+0x40>)
 8004f56:	701a      	strb	r2, [r3, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr
 8004f60:	20000691 	.word	0x20000691
 8004f64:	20000692 	.word	0x20000692

08004f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f6c:	e7fe      	b.n	8004f6c <NMI_Handler+0x4>

08004f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f72:	e7fe      	b.n	8004f72 <HardFault_Handler+0x4>

08004f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f78:	e7fe      	b.n	8004f78 <MemManage_Handler+0x4>

08004f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f7e:	e7fe      	b.n	8004f7e <BusFault_Handler+0x4>

08004f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f84:	e7fe      	b.n	8004f84 <UsageFault_Handler+0x4>

08004f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f86:	b480      	push	{r7}
 8004f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f8a:	bf00      	nop
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr

08004f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f92:	b480      	push	{r7}
 8004f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f96:	bf00      	nop
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fa2:	bf00      	nop
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr
	...

08004fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <SysTick_Handler+0x30>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <SysTick_Handler+0x30>)
 8004fbc:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt >=10)
 8004fbe:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <SysTick_Handler+0x30>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b09      	cmp	r3, #9
 8004fc6:	d904      	bls.n	8004fd2 <SysTick_Handler+0x26>
		{
			FatFsCnt = 0;
 8004fc8:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <SysTick_Handler+0x30>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
			SDTimerHandler();
 8004fce:	f7ff ffa9 	bl	8004f24 <SDTimerHandler>
		}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fd2:	f000 f965 	bl	80052a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004fd6:	bf00      	nop
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000690 	.word	0x20000690

08004fe0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_MENU_Pin);
 8004fe4:	2010      	movs	r0, #16
 8004fe6:	f000 fee3 	bl	8005db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004fea:	bf00      	nop
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004ff4:	4802      	ldr	r0, [pc, #8]	; (8005000 <DMA1_Channel6_IRQHandler+0x10>)
 8004ff6:	f000 fc0b 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000634 	.word	0x20000634

08005004 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_AVANCA_Pin);
 8005008:	2020      	movs	r0, #32
 800500a:	f000 fed1 	bl	8005db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_SELECT_Pin);
 800500e:	2040      	movs	r0, #64	; 0x40
 8005010:	f000 fece 	bl	8005db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_STOP_Pin);
 8005014:	2080      	movs	r0, #128	; 0x80
 8005016:	f000 fecb 	bl	8005db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_INSERT_Pin);
 800501a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800501e:	f000 fec7 	bl	8005db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800502c:	4802      	ldr	r0, [pc, #8]	; (8005038 <TIM2_IRQHandler+0x10>)
 800502e:	f002 f9ce 	bl	80073ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000560 	.word	0x20000560

0800503c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005040:	4802      	ldr	r0, [pc, #8]	; (800504c <TIM3_IRQHandler+0x10>)
 8005042:	f002 f9c4 	bl	80073ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	200005a8 	.word	0x200005a8

08005050 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005054:	4802      	ldr	r0, [pc, #8]	; (8005060 <USART2_IRQHandler+0x10>)
 8005056:	f002 fdc9 	bl	8007bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800505a:	bf00      	nop
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	200005f0 	.word	0x200005f0

08005064 <_read>:
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	e00a      	b.n	800508c <_read+0x28>
 8005076:	f3af 8000 	nop.w
 800507a:	4601      	mov	r1, r0
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	60ba      	str	r2, [r7, #8]
 8005082:	b2ca      	uxtb	r2, r1
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	3301      	adds	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	dbf0      	blt.n	8005076 <_read+0x12>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <_write>:
 800509e:	b580      	push	{r7, lr}
 80050a0:	b086      	sub	sp, #24
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	e009      	b.n	80050c4 <_write+0x26>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	60ba      	str	r2, [r7, #8]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f3af 8000 	nop.w
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	3301      	adds	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	dbf1      	blt.n	80050b0 <_write+0x12>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <_close>:
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	f04f 33ff 	mov.w	r3, #4294967295
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr

080050ec <_fstat>:
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	2300      	movs	r3, #0
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr

0800510a <_isatty>:
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	2301      	movs	r3, #1
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr

0800511e <_lseek>:
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	2300      	movs	r3, #0
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr

08005136 <_open>:
 8005136:	b40e      	push	{r1, r2, r3}
 8005138:	b480      	push	{r7}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	f04f 33ff 	mov.w	r3, #4294967295
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	b003      	add	sp, #12
 800514e:	4770      	bx	lr

08005150 <_sbrk>:
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	4a14      	ldr	r2, [pc, #80]	; (80051ac <_sbrk+0x5c>)
 800515a:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <_sbrk+0x60>)
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <_sbrk+0x64>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d102      	bne.n	8005172 <_sbrk+0x22>
 800516c:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <_sbrk+0x64>)
 800516e:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <_sbrk+0x68>)
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <_sbrk+0x64>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4413      	add	r3, r2
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	429a      	cmp	r2, r3
 800517e:	d207      	bcs.n	8005190 <_sbrk+0x40>
 8005180:	f003 fad0 	bl	8008724 <__errno>
 8005184:	4603      	mov	r3, r0
 8005186:	220c      	movs	r2, #12
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	f04f 33ff 	mov.w	r3, #4294967295
 800518e:	e009      	b.n	80051a4 <_sbrk+0x54>
 8005190:	4b08      	ldr	r3, [pc, #32]	; (80051b4 <_sbrk+0x64>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <_sbrk+0x64>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	4a05      	ldr	r2, [pc, #20]	; (80051b4 <_sbrk+0x64>)
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20005000 	.word	0x20005000
 80051b0:	00000400 	.word	0x00000400
 80051b4:	20000698 	.word	0x20000698
 80051b8:	200006f0 	.word	0x200006f0

080051bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr

080051c8 <Reset_Handler>:
 80051c8:	480c      	ldr	r0, [pc, #48]	; (80051fc <LoopFillZerobss+0x12>)
 80051ca:	490d      	ldr	r1, [pc, #52]	; (8005200 <LoopFillZerobss+0x16>)
 80051cc:	4a0d      	ldr	r2, [pc, #52]	; (8005204 <LoopFillZerobss+0x1a>)
 80051ce:	2300      	movs	r3, #0
 80051d0:	e002      	b.n	80051d8 <LoopCopyDataInit>

080051d2 <CopyDataInit>:
 80051d2:	58d4      	ldr	r4, [r2, r3]
 80051d4:	50c4      	str	r4, [r0, r3]
 80051d6:	3304      	adds	r3, #4

080051d8 <LoopCopyDataInit>:
 80051d8:	18c4      	adds	r4, r0, r3
 80051da:	428c      	cmp	r4, r1
 80051dc:	d3f9      	bcc.n	80051d2 <CopyDataInit>
 80051de:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <LoopFillZerobss+0x1e>)
 80051e0:	4c0a      	ldr	r4, [pc, #40]	; (800520c <LoopFillZerobss+0x22>)
 80051e2:	2300      	movs	r3, #0
 80051e4:	e001      	b.n	80051ea <LoopFillZerobss>

080051e6 <FillZerobss>:
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	3204      	adds	r2, #4

080051ea <LoopFillZerobss>:
 80051ea:	42a2      	cmp	r2, r4
 80051ec:	d3fb      	bcc.n	80051e6 <FillZerobss>
 80051ee:	f7ff ffe5 	bl	80051bc <SystemInit>
 80051f2:	f003 fd09 	bl	8008c08 <__libc_init_array>
 80051f6:	f7ff f8af 	bl	8004358 <main>
 80051fa:	4770      	bx	lr
 80051fc:	20000000 	.word	0x20000000
 8005200:	200001a0 	.word	0x200001a0
 8005204:	0800bff0 	.word	0x0800bff0
 8005208:	200001a0 	.word	0x200001a0
 800520c:	200006ec 	.word	0x200006ec

08005210 <ADC1_2_IRQHandler>:
 8005210:	e7fe      	b.n	8005210 <ADC1_2_IRQHandler>
	...

08005214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005218:	4b08      	ldr	r3, [pc, #32]	; (800523c <HAL_Init+0x28>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a07      	ldr	r2, [pc, #28]	; (800523c <HAL_Init+0x28>)
 800521e:	f043 0310 	orr.w	r3, r3, #16
 8005222:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005224:	2003      	movs	r0, #3
 8005226:	f000 f947 	bl	80054b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800522a:	200f      	movs	r0, #15
 800522c:	f000 f808 	bl	8005240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005230:	f7ff fd16 	bl	8004c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40022000 	.word	0x40022000

08005240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005248:	4b12      	ldr	r3, [pc, #72]	; (8005294 <HAL_InitTick+0x54>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b12      	ldr	r3, [pc, #72]	; (8005298 <HAL_InitTick+0x58>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	4619      	mov	r1, r3
 8005252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005256:	fbb3 f3f1 	udiv	r3, r3, r1
 800525a:	fbb2 f3f3 	udiv	r3, r2, r3
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f95f 	bl	8005522 <HAL_SYSTICK_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e00e      	b.n	800528c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b0f      	cmp	r3, #15
 8005272:	d80a      	bhi.n	800528a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005274:	2200      	movs	r2, #0
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	f000 f927 	bl	80054ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005280:	4a06      	ldr	r2, [pc, #24]	; (800529c <HAL_InitTick+0x5c>)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	e000      	b.n	800528c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	200000b8 	.word	0x200000b8
 8005298:	200000c0 	.word	0x200000c0
 800529c:	200000bc 	.word	0x200000bc

080052a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052a4:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_IncTick+0x1c>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <HAL_IncTick+0x20>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4413      	add	r3, r2
 80052b0:	4a03      	ldr	r2, [pc, #12]	; (80052c0 <HAL_IncTick+0x20>)
 80052b2:	6013      	str	r3, [r2, #0]
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	200000c0 	.word	0x200000c0
 80052c0:	2000069c 	.word	0x2000069c

080052c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  return uwTick;
 80052c8:	4b02      	ldr	r3, [pc, #8]	; (80052d4 <HAL_GetTick+0x10>)
 80052ca:	681b      	ldr	r3, [r3, #0]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr
 80052d4:	2000069c 	.word	0x2000069c

080052d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052e0:	f7ff fff0 	bl	80052c4 <HAL_GetTick>
 80052e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d005      	beq.n	80052fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052f2:	4b0a      	ldr	r3, [pc, #40]	; (800531c <HAL_Delay+0x44>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052fe:	bf00      	nop
 8005300:	f7ff ffe0 	bl	80052c4 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	429a      	cmp	r2, r3
 800530e:	d8f7      	bhi.n	8005300 <HAL_Delay+0x28>
  {
  }
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	200000c0 	.word	0x200000c0

08005320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005330:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <__NVIC_SetPriorityGrouping+0x44>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800533c:	4013      	ands	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800534c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005352:	4a04      	ldr	r2, [pc, #16]	; (8005364 <__NVIC_SetPriorityGrouping+0x44>)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	60d3      	str	r3, [r2, #12]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	e000ed00 	.word	0xe000ed00

08005368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800536c:	4b04      	ldr	r3, [pc, #16]	; (8005380 <__NVIC_GetPriorityGrouping+0x18>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	0a1b      	lsrs	r3, r3, #8
 8005372:	f003 0307 	and.w	r3, r3, #7
}
 8005376:	4618      	mov	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	e000ed00 	.word	0xe000ed00

08005384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800538e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005392:	2b00      	cmp	r3, #0
 8005394:	db0b      	blt.n	80053ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	f003 021f 	and.w	r2, r3, #31
 800539c:	4906      	ldr	r1, [pc, #24]	; (80053b8 <__NVIC_EnableIRQ+0x34>)
 800539e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	2001      	movs	r0, #1
 80053a6:	fa00 f202 	lsl.w	r2, r0, r2
 80053aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr
 80053b8:	e000e100 	.word	0xe000e100

080053bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	6039      	str	r1, [r7, #0]
 80053c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	db0a      	blt.n	80053e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	490c      	ldr	r1, [pc, #48]	; (8005408 <__NVIC_SetPriority+0x4c>)
 80053d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053da:	0112      	lsls	r2, r2, #4
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	440b      	add	r3, r1
 80053e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053e4:	e00a      	b.n	80053fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4908      	ldr	r1, [pc, #32]	; (800540c <__NVIC_SetPriority+0x50>)
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	3b04      	subs	r3, #4
 80053f4:	0112      	lsls	r2, r2, #4
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	440b      	add	r3, r1
 80053fa:	761a      	strb	r2, [r3, #24]
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	e000e100 	.word	0xe000e100
 800540c:	e000ed00 	.word	0xe000ed00

08005410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005410:	b480      	push	{r7}
 8005412:	b089      	sub	sp, #36	; 0x24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f1c3 0307 	rsb	r3, r3, #7
 800542a:	2b04      	cmp	r3, #4
 800542c:	bf28      	it	cs
 800542e:	2304      	movcs	r3, #4
 8005430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3304      	adds	r3, #4
 8005436:	2b06      	cmp	r3, #6
 8005438:	d902      	bls.n	8005440 <NVIC_EncodePriority+0x30>
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3b03      	subs	r3, #3
 800543e:	e000      	b.n	8005442 <NVIC_EncodePriority+0x32>
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005444:	f04f 32ff 	mov.w	r2, #4294967295
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43da      	mvns	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	401a      	ands	r2, r3
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005458:	f04f 31ff 	mov.w	r1, #4294967295
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	43d9      	mvns	r1, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005468:	4313      	orrs	r3, r2
         );
}
 800546a:	4618      	mov	r0, r3
 800546c:	3724      	adds	r7, #36	; 0x24
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr

08005474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3b01      	subs	r3, #1
 8005480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005484:	d301      	bcc.n	800548a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005486:	2301      	movs	r3, #1
 8005488:	e00f      	b.n	80054aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800548a:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <SysTick_Config+0x40>)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3b01      	subs	r3, #1
 8005490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005492:	210f      	movs	r1, #15
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	f7ff ff90 	bl	80053bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <SysTick_Config+0x40>)
 800549e:	2200      	movs	r2, #0
 80054a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054a2:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <SysTick_Config+0x40>)
 80054a4:	2207      	movs	r2, #7
 80054a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	e000e010 	.word	0xe000e010

080054b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7ff ff2d 	bl	8005320 <__NVIC_SetPriorityGrouping>
}
 80054c6:	bf00      	nop
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b086      	sub	sp, #24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	4603      	mov	r3, r0
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	607a      	str	r2, [r7, #4]
 80054da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054e0:	f7ff ff42 	bl	8005368 <__NVIC_GetPriorityGrouping>
 80054e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	6978      	ldr	r0, [r7, #20]
 80054ec:	f7ff ff90 	bl	8005410 <NVIC_EncodePriority>
 80054f0:	4602      	mov	r2, r0
 80054f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054f6:	4611      	mov	r1, r2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff ff5f 	bl	80053bc <__NVIC_SetPriority>
}
 80054fe:	bf00      	nop
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	4603      	mov	r3, r0
 800550e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff ff35 	bl	8005384 <__NVIC_EnableIRQ>
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff ffa2 	bl	8005474 <SysTick_Config>
 8005530:	4603      	mov	r3, r0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e043      	b.n	80055da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	4b22      	ldr	r3, [pc, #136]	; (80055e4 <HAL_DMA_Init+0xa8>)
 800555a:	4413      	add	r3, r2
 800555c:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <HAL_DMA_Init+0xac>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	009a      	lsls	r2, r3, #2
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1f      	ldr	r2, [pc, #124]	; (80055ec <HAL_DMA_Init+0xb0>)
 800556e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005586:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800558a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr
 80055e4:	bffdfff8 	.word	0xbffdfff8
 80055e8:	cccccccd 	.word	0xcccccccd
 80055ec:	40020000 	.word	0x40020000

080055f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_DMA_Start_IT+0x20>
 800560c:	2302      	movs	r3, #2
 800560e:	e04a      	b.n	80056a6 <HAL_DMA_Start_IT+0xb6>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800561e:	2b01      	cmp	r3, #1
 8005620:	d13a      	bne.n	8005698 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f9e8 	bl	8005a1c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 020e 	orr.w	r2, r2, #14
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	e00f      	b.n	8005686 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0204 	bic.w	r2, r2, #4
 8005674:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 020a 	orr.w	r2, r2, #10
 8005684:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0201 	orr.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	e005      	b.n	80056a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80056a0:	2302      	movs	r3, #2
 80056a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d008      	beq.n	80056d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2204      	movs	r2, #4
 80056c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e020      	b.n	8005718 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 020e 	bic.w	r2, r2, #14
 80056e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0201 	bic.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	2101      	movs	r1, #1
 8005700:	fa01 f202 	lsl.w	r2, r1, r2
 8005704:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005716:	7bfb      	ldrb	r3, [r7, #15]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	bc80      	pop	{r7}
 8005720:	4770      	bx	lr
	...

08005724 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005736:	2b02      	cmp	r3, #2
 8005738:	d005      	beq.n	8005746 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2204      	movs	r2, #4
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	73fb      	strb	r3, [r7, #15]
 8005744:	e051      	b.n	80057ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 020e 	bic.w	r2, r2, #14
 8005754:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <HAL_DMA_Abort_IT+0xd0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d029      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xa0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <HAL_DMA_Abort_IT+0xd4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d022      	beq.n	80057c0 <HAL_DMA_Abort_IT+0x9c>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <HAL_DMA_Abort_IT+0xd8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d01a      	beq.n	80057ba <HAL_DMA_Abort_IT+0x96>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1d      	ldr	r2, [pc, #116]	; (8005800 <HAL_DMA_Abort_IT+0xdc>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d012      	beq.n	80057b4 <HAL_DMA_Abort_IT+0x90>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <HAL_DMA_Abort_IT+0xe0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00a      	beq.n	80057ae <HAL_DMA_Abort_IT+0x8a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1a      	ldr	r2, [pc, #104]	; (8005808 <HAL_DMA_Abort_IT+0xe4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d102      	bne.n	80057a8 <HAL_DMA_Abort_IT+0x84>
 80057a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80057a6:	e00e      	b.n	80057c6 <HAL_DMA_Abort_IT+0xa2>
 80057a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057ac:	e00b      	b.n	80057c6 <HAL_DMA_Abort_IT+0xa2>
 80057ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057b2:	e008      	b.n	80057c6 <HAL_DMA_Abort_IT+0xa2>
 80057b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057b8:	e005      	b.n	80057c6 <HAL_DMA_Abort_IT+0xa2>
 80057ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057be:	e002      	b.n	80057c6 <HAL_DMA_Abort_IT+0xa2>
 80057c0:	2310      	movs	r3, #16
 80057c2:	e000      	b.n	80057c6 <HAL_DMA_Abort_IT+0xa2>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4a11      	ldr	r2, [pc, #68]	; (800580c <HAL_DMA_Abort_IT+0xe8>)
 80057c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	4798      	blx	r3
    } 
  }
  return status;
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40020008 	.word	0x40020008
 80057f8:	4002001c 	.word	0x4002001c
 80057fc:	40020030 	.word	0x40020030
 8005800:	40020044 	.word	0x40020044
 8005804:	40020058 	.word	0x40020058
 8005808:	4002006c 	.word	0x4002006c
 800580c:	40020000 	.word	0x40020000

08005810 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	2204      	movs	r2, #4
 800582e:	409a      	lsls	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4013      	ands	r3, r2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d04f      	beq.n	80058d8 <HAL_DMA_IRQHandler+0xc8>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b00      	cmp	r3, #0
 8005840:	d04a      	beq.n	80058d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d107      	bne.n	8005860 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0204 	bic.w	r2, r2, #4
 800585e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a66      	ldr	r2, [pc, #408]	; (8005a00 <HAL_DMA_IRQHandler+0x1f0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d029      	beq.n	80058be <HAL_DMA_IRQHandler+0xae>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a65      	ldr	r2, [pc, #404]	; (8005a04 <HAL_DMA_IRQHandler+0x1f4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d022      	beq.n	80058ba <HAL_DMA_IRQHandler+0xaa>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a63      	ldr	r2, [pc, #396]	; (8005a08 <HAL_DMA_IRQHandler+0x1f8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d01a      	beq.n	80058b4 <HAL_DMA_IRQHandler+0xa4>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a62      	ldr	r2, [pc, #392]	; (8005a0c <HAL_DMA_IRQHandler+0x1fc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d012      	beq.n	80058ae <HAL_DMA_IRQHandler+0x9e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a60      	ldr	r2, [pc, #384]	; (8005a10 <HAL_DMA_IRQHandler+0x200>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00a      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x98>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a5f      	ldr	r2, [pc, #380]	; (8005a14 <HAL_DMA_IRQHandler+0x204>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d102      	bne.n	80058a2 <HAL_DMA_IRQHandler+0x92>
 800589c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058a0:	e00e      	b.n	80058c0 <HAL_DMA_IRQHandler+0xb0>
 80058a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80058a6:	e00b      	b.n	80058c0 <HAL_DMA_IRQHandler+0xb0>
 80058a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80058ac:	e008      	b.n	80058c0 <HAL_DMA_IRQHandler+0xb0>
 80058ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058b2:	e005      	b.n	80058c0 <HAL_DMA_IRQHandler+0xb0>
 80058b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b8:	e002      	b.n	80058c0 <HAL_DMA_IRQHandler+0xb0>
 80058ba:	2340      	movs	r3, #64	; 0x40
 80058bc:	e000      	b.n	80058c0 <HAL_DMA_IRQHandler+0xb0>
 80058be:	2304      	movs	r3, #4
 80058c0:	4a55      	ldr	r2, [pc, #340]	; (8005a18 <HAL_DMA_IRQHandler+0x208>)
 80058c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8094 	beq.w	80059f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80058d6:	e08e      	b.n	80059f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	2202      	movs	r2, #2
 80058de:	409a      	lsls	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4013      	ands	r3, r2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d056      	beq.n	8005996 <HAL_DMA_IRQHandler+0x186>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d051      	beq.n	8005996 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10b      	bne.n	8005918 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 020a 	bic.w	r2, r2, #10
 800590e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a38      	ldr	r2, [pc, #224]	; (8005a00 <HAL_DMA_IRQHandler+0x1f0>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d029      	beq.n	8005976 <HAL_DMA_IRQHandler+0x166>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a37      	ldr	r2, [pc, #220]	; (8005a04 <HAL_DMA_IRQHandler+0x1f4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d022      	beq.n	8005972 <HAL_DMA_IRQHandler+0x162>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a35      	ldr	r2, [pc, #212]	; (8005a08 <HAL_DMA_IRQHandler+0x1f8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d01a      	beq.n	800596c <HAL_DMA_IRQHandler+0x15c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a34      	ldr	r2, [pc, #208]	; (8005a0c <HAL_DMA_IRQHandler+0x1fc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d012      	beq.n	8005966 <HAL_DMA_IRQHandler+0x156>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a32      	ldr	r2, [pc, #200]	; (8005a10 <HAL_DMA_IRQHandler+0x200>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00a      	beq.n	8005960 <HAL_DMA_IRQHandler+0x150>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a31      	ldr	r2, [pc, #196]	; (8005a14 <HAL_DMA_IRQHandler+0x204>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d102      	bne.n	800595a <HAL_DMA_IRQHandler+0x14a>
 8005954:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005958:	e00e      	b.n	8005978 <HAL_DMA_IRQHandler+0x168>
 800595a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800595e:	e00b      	b.n	8005978 <HAL_DMA_IRQHandler+0x168>
 8005960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005964:	e008      	b.n	8005978 <HAL_DMA_IRQHandler+0x168>
 8005966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800596a:	e005      	b.n	8005978 <HAL_DMA_IRQHandler+0x168>
 800596c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005970:	e002      	b.n	8005978 <HAL_DMA_IRQHandler+0x168>
 8005972:	2320      	movs	r3, #32
 8005974:	e000      	b.n	8005978 <HAL_DMA_IRQHandler+0x168>
 8005976:	2302      	movs	r3, #2
 8005978:	4a27      	ldr	r2, [pc, #156]	; (8005a18 <HAL_DMA_IRQHandler+0x208>)
 800597a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005988:	2b00      	cmp	r3, #0
 800598a:	d034      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005994:	e02f      	b.n	80059f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2208      	movs	r2, #8
 800599c:	409a      	lsls	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4013      	ands	r3, r2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d028      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x1e8>
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d023      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 020e 	bic.w	r2, r2, #14
 80059be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c8:	2101      	movs	r1, #1
 80059ca:	fa01 f202 	lsl.w	r2, r1, r2
 80059ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	4798      	blx	r3
    }
  }
  return;
 80059f6:	bf00      	nop
 80059f8:	bf00      	nop
}
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40020008 	.word	0x40020008
 8005a04:	4002001c 	.word	0x4002001c
 8005a08:	40020030 	.word	0x40020030
 8005a0c:	40020044 	.word	0x40020044
 8005a10:	40020058 	.word	0x40020058
 8005a14:	4002006c 	.word	0x4002006c
 8005a18:	40020000 	.word	0x40020000

08005a1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a32:	2101      	movs	r1, #1
 8005a34:	fa01 f202 	lsl.w	r2, r1, r2
 8005a38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b10      	cmp	r3, #16
 8005a48:	d108      	bne.n	8005a5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a5a:	e007      	b.n	8005a6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	60da      	str	r2, [r3, #12]
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr
	...

08005a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b08b      	sub	sp, #44	; 0x2c
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a82:	2300      	movs	r3, #0
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005a86:	2300      	movs	r3, #0
 8005a88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a8a:	e169      	b.n	8005d60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	f040 8158 	bne.w	8005d5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4a9a      	ldr	r2, [pc, #616]	; (8005d18 <HAL_GPIO_Init+0x2a0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d05e      	beq.n	8005b72 <HAL_GPIO_Init+0xfa>
 8005ab4:	4a98      	ldr	r2, [pc, #608]	; (8005d18 <HAL_GPIO_Init+0x2a0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d875      	bhi.n	8005ba6 <HAL_GPIO_Init+0x12e>
 8005aba:	4a98      	ldr	r2, [pc, #608]	; (8005d1c <HAL_GPIO_Init+0x2a4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d058      	beq.n	8005b72 <HAL_GPIO_Init+0xfa>
 8005ac0:	4a96      	ldr	r2, [pc, #600]	; (8005d1c <HAL_GPIO_Init+0x2a4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d86f      	bhi.n	8005ba6 <HAL_GPIO_Init+0x12e>
 8005ac6:	4a96      	ldr	r2, [pc, #600]	; (8005d20 <HAL_GPIO_Init+0x2a8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d052      	beq.n	8005b72 <HAL_GPIO_Init+0xfa>
 8005acc:	4a94      	ldr	r2, [pc, #592]	; (8005d20 <HAL_GPIO_Init+0x2a8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d869      	bhi.n	8005ba6 <HAL_GPIO_Init+0x12e>
 8005ad2:	4a94      	ldr	r2, [pc, #592]	; (8005d24 <HAL_GPIO_Init+0x2ac>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d04c      	beq.n	8005b72 <HAL_GPIO_Init+0xfa>
 8005ad8:	4a92      	ldr	r2, [pc, #584]	; (8005d24 <HAL_GPIO_Init+0x2ac>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d863      	bhi.n	8005ba6 <HAL_GPIO_Init+0x12e>
 8005ade:	4a92      	ldr	r2, [pc, #584]	; (8005d28 <HAL_GPIO_Init+0x2b0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d046      	beq.n	8005b72 <HAL_GPIO_Init+0xfa>
 8005ae4:	4a90      	ldr	r2, [pc, #576]	; (8005d28 <HAL_GPIO_Init+0x2b0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d85d      	bhi.n	8005ba6 <HAL_GPIO_Init+0x12e>
 8005aea:	2b12      	cmp	r3, #18
 8005aec:	d82a      	bhi.n	8005b44 <HAL_GPIO_Init+0xcc>
 8005aee:	2b12      	cmp	r3, #18
 8005af0:	d859      	bhi.n	8005ba6 <HAL_GPIO_Init+0x12e>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <HAL_GPIO_Init+0x80>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b73 	.word	0x08005b73
 8005afc:	08005b4d 	.word	0x08005b4d
 8005b00:	08005b5f 	.word	0x08005b5f
 8005b04:	08005ba1 	.word	0x08005ba1
 8005b08:	08005ba7 	.word	0x08005ba7
 8005b0c:	08005ba7 	.word	0x08005ba7
 8005b10:	08005ba7 	.word	0x08005ba7
 8005b14:	08005ba7 	.word	0x08005ba7
 8005b18:	08005ba7 	.word	0x08005ba7
 8005b1c:	08005ba7 	.word	0x08005ba7
 8005b20:	08005ba7 	.word	0x08005ba7
 8005b24:	08005ba7 	.word	0x08005ba7
 8005b28:	08005ba7 	.word	0x08005ba7
 8005b2c:	08005ba7 	.word	0x08005ba7
 8005b30:	08005ba7 	.word	0x08005ba7
 8005b34:	08005ba7 	.word	0x08005ba7
 8005b38:	08005ba7 	.word	0x08005ba7
 8005b3c:	08005b55 	.word	0x08005b55
 8005b40:	08005b69 	.word	0x08005b69
 8005b44:	4a79      	ldr	r2, [pc, #484]	; (8005d2c <HAL_GPIO_Init+0x2b4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005b4a:	e02c      	b.n	8005ba6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	623b      	str	r3, [r7, #32]
          break;
 8005b52:	e029      	b.n	8005ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	623b      	str	r3, [r7, #32]
          break;
 8005b5c:	e024      	b.n	8005ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	3308      	adds	r3, #8
 8005b64:	623b      	str	r3, [r7, #32]
          break;
 8005b66:	e01f      	b.n	8005ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	623b      	str	r3, [r7, #32]
          break;
 8005b70:	e01a      	b.n	8005ba8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005b7a:	2304      	movs	r3, #4
 8005b7c:	623b      	str	r3, [r7, #32]
          break;
 8005b7e:	e013      	b.n	8005ba8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d105      	bne.n	8005b94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b88:	2308      	movs	r3, #8
 8005b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	611a      	str	r2, [r3, #16]
          break;
 8005b92:	e009      	b.n	8005ba8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b94:	2308      	movs	r3, #8
 8005b96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	615a      	str	r2, [r3, #20]
          break;
 8005b9e:	e003      	b.n	8005ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	623b      	str	r3, [r7, #32]
          break;
 8005ba4:	e000      	b.n	8005ba8 <HAL_GPIO_Init+0x130>
          break;
 8005ba6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2bff      	cmp	r3, #255	; 0xff
 8005bac:	d801      	bhi.n	8005bb2 <HAL_GPIO_Init+0x13a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	e001      	b.n	8005bb6 <HAL_GPIO_Init+0x13e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2bff      	cmp	r3, #255	; 0xff
 8005bbc:	d802      	bhi.n	8005bc4 <HAL_GPIO_Init+0x14c>
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	e002      	b.n	8005bca <HAL_GPIO_Init+0x152>
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	3b08      	subs	r3, #8
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	210f      	movs	r1, #15
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	401a      	ands	r2, r3
 8005bdc:	6a39      	ldr	r1, [r7, #32]
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	fa01 f303 	lsl.w	r3, r1, r3
 8005be4:	431a      	orrs	r2, r3
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80b1 	beq.w	8005d5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005bf8:	4b4d      	ldr	r3, [pc, #308]	; (8005d30 <HAL_GPIO_Init+0x2b8>)
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	4a4c      	ldr	r2, [pc, #304]	; (8005d30 <HAL_GPIO_Init+0x2b8>)
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	6193      	str	r3, [r2, #24]
 8005c04:	4b4a      	ldr	r3, [pc, #296]	; (8005d30 <HAL_GPIO_Init+0x2b8>)
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005c10:	4a48      	ldr	r2, [pc, #288]	; (8005d34 <HAL_GPIO_Init+0x2bc>)
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	089b      	lsrs	r3, r3, #2
 8005c16:	3302      	adds	r3, #2
 8005c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	220f      	movs	r2, #15
 8005c28:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4013      	ands	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a40      	ldr	r2, [pc, #256]	; (8005d38 <HAL_GPIO_Init+0x2c0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <HAL_GPIO_Init+0x1ec>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a3f      	ldr	r2, [pc, #252]	; (8005d3c <HAL_GPIO_Init+0x2c4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00d      	beq.n	8005c60 <HAL_GPIO_Init+0x1e8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3e      	ldr	r2, [pc, #248]	; (8005d40 <HAL_GPIO_Init+0x2c8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d007      	beq.n	8005c5c <HAL_GPIO_Init+0x1e4>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3d      	ldr	r2, [pc, #244]	; (8005d44 <HAL_GPIO_Init+0x2cc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d101      	bne.n	8005c58 <HAL_GPIO_Init+0x1e0>
 8005c54:	2303      	movs	r3, #3
 8005c56:	e006      	b.n	8005c66 <HAL_GPIO_Init+0x1ee>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	e004      	b.n	8005c66 <HAL_GPIO_Init+0x1ee>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e002      	b.n	8005c66 <HAL_GPIO_Init+0x1ee>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <HAL_GPIO_Init+0x1ee>
 8005c64:	2300      	movs	r3, #0
 8005c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c68:	f002 0203 	and.w	r2, r2, #3
 8005c6c:	0092      	lsls	r2, r2, #2
 8005c6e:	4093      	lsls	r3, r2
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005c76:	492f      	ldr	r1, [pc, #188]	; (8005d34 <HAL_GPIO_Init+0x2bc>)
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	089b      	lsrs	r3, r3, #2
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d006      	beq.n	8005c9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005c90:	4b2d      	ldr	r3, [pc, #180]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	492c      	ldr	r1, [pc, #176]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	600b      	str	r3, [r1, #0]
 8005c9c:	e006      	b.n	8005cac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005c9e:	4b2a      	ldr	r3, [pc, #168]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	4928      	ldr	r1, [pc, #160]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d006      	beq.n	8005cc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005cb8:	4b23      	ldr	r3, [pc, #140]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	4922      	ldr	r1, [pc, #136]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	604b      	str	r3, [r1, #4]
 8005cc4:	e006      	b.n	8005cd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005cc6:	4b20      	ldr	r3, [pc, #128]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	491e      	ldr	r1, [pc, #120]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d006      	beq.n	8005cee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005ce0:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	4918      	ldr	r1, [pc, #96]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	608b      	str	r3, [r1, #8]
 8005cec:	e006      	b.n	8005cfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005cee:	4b16      	ldr	r3, [pc, #88]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	4914      	ldr	r1, [pc, #80]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d021      	beq.n	8005d4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005d08:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	490e      	ldr	r1, [pc, #56]	; (8005d48 <HAL_GPIO_Init+0x2d0>)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60cb      	str	r3, [r1, #12]
 8005d14:	e021      	b.n	8005d5a <HAL_GPIO_Init+0x2e2>
 8005d16:	bf00      	nop
 8005d18:	10320000 	.word	0x10320000
 8005d1c:	10310000 	.word	0x10310000
 8005d20:	10220000 	.word	0x10220000
 8005d24:	10210000 	.word	0x10210000
 8005d28:	10120000 	.word	0x10120000
 8005d2c:	10110000 	.word	0x10110000
 8005d30:	40021000 	.word	0x40021000
 8005d34:	40010000 	.word	0x40010000
 8005d38:	40010800 	.word	0x40010800
 8005d3c:	40010c00 	.word	0x40010c00
 8005d40:	40011000 	.word	0x40011000
 8005d44:	40011400 	.word	0x40011400
 8005d48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_GPIO_Init+0x304>)
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	43db      	mvns	r3, r3
 8005d54:	4909      	ldr	r1, [pc, #36]	; (8005d7c <HAL_GPIO_Init+0x304>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f47f ae8e 	bne.w	8005a8c <HAL_GPIO_Init+0x14>
  }
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	372c      	adds	r7, #44	; 0x2c
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	40010400 	.word	0x40010400

08005d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	807b      	strh	r3, [r7, #2]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d90:	787b      	ldrb	r3, [r7, #1]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d96:	887a      	ldrh	r2, [r7, #2]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005d9c:	e003      	b.n	8005da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005d9e:	887b      	ldrh	r3, [r7, #2]
 8005da0:	041a      	lsls	r2, r3, #16
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	611a      	str	r2, [r3, #16]
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr

08005db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005dba:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d006      	beq.n	8005dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005dc6:	4a05      	ldr	r2, [pc, #20]	; (8005ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dc8:	88fb      	ldrh	r3, [r7, #6]
 8005dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005dcc:	88fb      	ldrh	r3, [r7, #6]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fe fee6 	bl	8004ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40010400 	.word	0x40010400

08005de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e272      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8087 	beq.w	8005f0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e00:	4b92      	ldr	r3, [pc, #584]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f003 030c 	and.w	r3, r3, #12
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d00c      	beq.n	8005e26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e0c:	4b8f      	ldr	r3, [pc, #572]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f003 030c 	and.w	r3, r3, #12
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d112      	bne.n	8005e3e <HAL_RCC_OscConfig+0x5e>
 8005e18:	4b8c      	ldr	r3, [pc, #560]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e24:	d10b      	bne.n	8005e3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e26:	4b89      	ldr	r3, [pc, #548]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d06c      	beq.n	8005f0c <HAL_RCC_OscConfig+0x12c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d168      	bne.n	8005f0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e24c      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e46:	d106      	bne.n	8005e56 <HAL_RCC_OscConfig+0x76>
 8005e48:	4b80      	ldr	r3, [pc, #512]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a7f      	ldr	r2, [pc, #508]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	e02e      	b.n	8005eb4 <HAL_RCC_OscConfig+0xd4>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x98>
 8005e5e:	4b7b      	ldr	r3, [pc, #492]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a7a      	ldr	r2, [pc, #488]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4b78      	ldr	r3, [pc, #480]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a77      	ldr	r2, [pc, #476]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e01d      	b.n	8005eb4 <HAL_RCC_OscConfig+0xd4>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e80:	d10c      	bne.n	8005e9c <HAL_RCC_OscConfig+0xbc>
 8005e82:	4b72      	ldr	r3, [pc, #456]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a71      	ldr	r2, [pc, #452]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4b6f      	ldr	r3, [pc, #444]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6e      	ldr	r2, [pc, #440]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e00b      	b.n	8005eb4 <HAL_RCC_OscConfig+0xd4>
 8005e9c:	4b6b      	ldr	r3, [pc, #428]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a6a      	ldr	r2, [pc, #424]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	4b68      	ldr	r3, [pc, #416]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a67      	ldr	r2, [pc, #412]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d013      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ebc:	f7ff fa02 	bl	80052c4 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7ff f9fe 	bl	80052c4 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	; 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e200      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ed6:	4b5d      	ldr	r3, [pc, #372]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0xe4>
 8005ee2:	e014      	b.n	8005f0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7ff f9ee 	bl	80052c4 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eec:	f7ff f9ea 	bl	80052c4 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	; 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e1ec      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005efe:	4b53      	ldr	r3, [pc, #332]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0x10c>
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d063      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f1a:	4b4c      	ldr	r3, [pc, #304]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00b      	beq.n	8005f3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005f26:	4b49      	ldr	r3, [pc, #292]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d11c      	bne.n	8005f6c <HAL_RCC_OscConfig+0x18c>
 8005f32:	4b46      	ldr	r3, [pc, #280]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d116      	bne.n	8005f6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3e:	4b43      	ldr	r3, [pc, #268]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_RCC_OscConfig+0x176>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d001      	beq.n	8005f56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e1c0      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f56:	4b3d      	ldr	r3, [pc, #244]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4939      	ldr	r1, [pc, #228]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6a:	e03a      	b.n	8005fe2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d020      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f74:	4b36      	ldr	r3, [pc, #216]	; (8006050 <HAL_RCC_OscConfig+0x270>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7a:	f7ff f9a3 	bl	80052c4 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f82:	f7ff f99f 	bl	80052c4 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e1a1      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f94:	4b2d      	ldr	r3, [pc, #180]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0f0      	beq.n	8005f82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa0:	4b2a      	ldr	r3, [pc, #168]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4927      	ldr	r1, [pc, #156]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]
 8005fb4:	e015      	b.n	8005fe2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fb6:	4b26      	ldr	r3, [pc, #152]	; (8006050 <HAL_RCC_OscConfig+0x270>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbc:	f7ff f982 	bl	80052c4 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc4:	f7ff f97e 	bl	80052c4 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e180      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fd6:	4b1d      	ldr	r3, [pc, #116]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1f0      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d03a      	beq.n	8006064 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d019      	beq.n	800602a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ff6:	4b17      	ldr	r3, [pc, #92]	; (8006054 <HAL_RCC_OscConfig+0x274>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ffc:	f7ff f962 	bl	80052c4 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006004:	f7ff f95e 	bl	80052c4 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e160      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006016:	4b0d      	ldr	r3, [pc, #52]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006022:	2001      	movs	r0, #1
 8006024:	f000 fad8 	bl	80065d8 <RCC_Delay>
 8006028:	e01c      	b.n	8006064 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <HAL_RCC_OscConfig+0x274>)
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006030:	f7ff f948 	bl	80052c4 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006036:	e00f      	b.n	8006058 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006038:	f7ff f944 	bl	80052c4 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d908      	bls.n	8006058 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e146      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000
 8006050:	42420000 	.word	0x42420000
 8006054:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006058:	4b92      	ldr	r3, [pc, #584]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e9      	bne.n	8006038 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80a6 	beq.w	80061be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006072:	2300      	movs	r3, #0
 8006074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006076:	4b8b      	ldr	r3, [pc, #556]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10d      	bne.n	800609e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006082:	4b88      	ldr	r3, [pc, #544]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	4a87      	ldr	r2, [pc, #540]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608c:	61d3      	str	r3, [r2, #28]
 800608e:	4b85      	ldr	r3, [pc, #532]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006096:	60bb      	str	r3, [r7, #8]
 8006098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800609a:	2301      	movs	r3, #1
 800609c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609e:	4b82      	ldr	r3, [pc, #520]	; (80062a8 <HAL_RCC_OscConfig+0x4c8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d118      	bne.n	80060dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060aa:	4b7f      	ldr	r3, [pc, #508]	; (80062a8 <HAL_RCC_OscConfig+0x4c8>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a7e      	ldr	r2, [pc, #504]	; (80062a8 <HAL_RCC_OscConfig+0x4c8>)
 80060b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060b6:	f7ff f905 	bl	80052c4 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060be:	f7ff f901 	bl	80052c4 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b64      	cmp	r3, #100	; 0x64
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e103      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d0:	4b75      	ldr	r3, [pc, #468]	; (80062a8 <HAL_RCC_OscConfig+0x4c8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d106      	bne.n	80060f2 <HAL_RCC_OscConfig+0x312>
 80060e4:	4b6f      	ldr	r3, [pc, #444]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	4a6e      	ldr	r2, [pc, #440]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	6213      	str	r3, [r2, #32]
 80060f0:	e02d      	b.n	800614e <HAL_RCC_OscConfig+0x36e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10c      	bne.n	8006114 <HAL_RCC_OscConfig+0x334>
 80060fa:	4b6a      	ldr	r3, [pc, #424]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	4a69      	ldr	r2, [pc, #420]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	6213      	str	r3, [r2, #32]
 8006106:	4b67      	ldr	r3, [pc, #412]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	4a66      	ldr	r2, [pc, #408]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800610c:	f023 0304 	bic.w	r3, r3, #4
 8006110:	6213      	str	r3, [r2, #32]
 8006112:	e01c      	b.n	800614e <HAL_RCC_OscConfig+0x36e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b05      	cmp	r3, #5
 800611a:	d10c      	bne.n	8006136 <HAL_RCC_OscConfig+0x356>
 800611c:	4b61      	ldr	r3, [pc, #388]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	4a60      	ldr	r2, [pc, #384]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006122:	f043 0304 	orr.w	r3, r3, #4
 8006126:	6213      	str	r3, [r2, #32]
 8006128:	4b5e      	ldr	r3, [pc, #376]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	4a5d      	ldr	r2, [pc, #372]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	6213      	str	r3, [r2, #32]
 8006134:	e00b      	b.n	800614e <HAL_RCC_OscConfig+0x36e>
 8006136:	4b5b      	ldr	r3, [pc, #364]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	4a5a      	ldr	r2, [pc, #360]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	6213      	str	r3, [r2, #32]
 8006142:	4b58      	ldr	r3, [pc, #352]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	4a57      	ldr	r2, [pc, #348]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006148:	f023 0304 	bic.w	r3, r3, #4
 800614c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d015      	beq.n	8006182 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006156:	f7ff f8b5 	bl	80052c4 <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800615c:	e00a      	b.n	8006174 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615e:	f7ff f8b1 	bl	80052c4 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f241 3288 	movw	r2, #5000	; 0x1388
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e0b1      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006174:	4b4b      	ldr	r3, [pc, #300]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ee      	beq.n	800615e <HAL_RCC_OscConfig+0x37e>
 8006180:	e014      	b.n	80061ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006182:	f7ff f89f 	bl	80052c4 <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006188:	e00a      	b.n	80061a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800618a:	f7ff f89b 	bl	80052c4 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	f241 3288 	movw	r2, #5000	; 0x1388
 8006198:	4293      	cmp	r3, r2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e09b      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a0:	4b40      	ldr	r3, [pc, #256]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1ee      	bne.n	800618a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80061ac:	7dfb      	ldrb	r3, [r7, #23]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d105      	bne.n	80061be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b2:	4b3c      	ldr	r3, [pc, #240]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	4a3b      	ldr	r2, [pc, #236]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8087 	beq.w	80062d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061c8:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 030c 	and.w	r3, r3, #12
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d061      	beq.n	8006298 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d146      	bne.n	800626a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061dc:	4b33      	ldr	r3, [pc, #204]	; (80062ac <HAL_RCC_OscConfig+0x4cc>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e2:	f7ff f86f 	bl	80052c4 <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ea:	f7ff f86b 	bl	80052c4 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e06d      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061fc:	4b29      	ldr	r3, [pc, #164]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f0      	bne.n	80061ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006210:	d108      	bne.n	8006224 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006212:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	4921      	ldr	r1, [pc, #132]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006220:	4313      	orrs	r3, r2
 8006222:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006224:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a19      	ldr	r1, [r3, #32]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	430b      	orrs	r3, r1
 8006236:	491b      	ldr	r1, [pc, #108]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006238:	4313      	orrs	r3, r2
 800623a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800623c:	4b1b      	ldr	r3, [pc, #108]	; (80062ac <HAL_RCC_OscConfig+0x4cc>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006242:	f7ff f83f 	bl	80052c4 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006248:	e008      	b.n	800625c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800624a:	f7ff f83b 	bl	80052c4 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e03d      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800625c:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0f0      	beq.n	800624a <HAL_RCC_OscConfig+0x46a>
 8006268:	e035      	b.n	80062d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800626a:	4b10      	ldr	r3, [pc, #64]	; (80062ac <HAL_RCC_OscConfig+0x4cc>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006270:	f7ff f828 	bl	80052c4 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006278:	f7ff f824 	bl	80052c4 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e026      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800628a:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x498>
 8006296:	e01e      	b.n	80062d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d107      	bne.n	80062b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e019      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
 80062a4:	40021000 	.word	0x40021000
 80062a8:	40007000 	.word	0x40007000
 80062ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80062b0:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d106      	bne.n	80062d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d001      	beq.n	80062d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40021000 	.word	0x40021000

080062e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0d0      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062f8:	4b6a      	ldr	r3, [pc, #424]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d910      	bls.n	8006328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006306:	4b67      	ldr	r3, [pc, #412]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f023 0207 	bic.w	r2, r3, #7
 800630e:	4965      	ldr	r1, [pc, #404]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	4313      	orrs	r3, r2
 8006314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006316:	4b63      	ldr	r3, [pc, #396]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d001      	beq.n	8006328 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0b8      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d020      	beq.n	8006376 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006340:	4b59      	ldr	r3, [pc, #356]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	4a58      	ldr	r2, [pc, #352]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006346:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800634a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006358:	4b53      	ldr	r3, [pc, #332]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	4a52      	ldr	r2, [pc, #328]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800635e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006362:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006364:	4b50      	ldr	r3, [pc, #320]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	494d      	ldr	r1, [pc, #308]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006372:	4313      	orrs	r3, r2
 8006374:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d040      	beq.n	8006404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d107      	bne.n	800639a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638a:	4b47      	ldr	r3, [pc, #284]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d115      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e07f      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d107      	bne.n	80063b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a2:	4b41      	ldr	r3, [pc, #260]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e073      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063b2:	4b3d      	ldr	r3, [pc, #244]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e06b      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063c2:	4b39      	ldr	r3, [pc, #228]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f023 0203 	bic.w	r2, r3, #3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	4936      	ldr	r1, [pc, #216]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063d4:	f7fe ff76 	bl	80052c4 <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063da:	e00a      	b.n	80063f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063dc:	f7fe ff72 	bl	80052c4 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e053      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f2:	4b2d      	ldr	r3, [pc, #180]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f003 020c 	and.w	r2, r3, #12
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	429a      	cmp	r2, r3
 8006402:	d1eb      	bne.n	80063dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006404:	4b27      	ldr	r3, [pc, #156]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d210      	bcs.n	8006434 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006412:	4b24      	ldr	r3, [pc, #144]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f023 0207 	bic.w	r2, r3, #7
 800641a:	4922      	ldr	r1, [pc, #136]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	4313      	orrs	r3, r2
 8006420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006422:	4b20      	ldr	r3, [pc, #128]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e032      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006440:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	4916      	ldr	r1, [pc, #88]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	490e      	ldr	r1, [pc, #56]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800646e:	4313      	orrs	r3, r2
 8006470:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006472:	f000 f821 	bl	80064b8 <HAL_RCC_GetSysClockFreq>
 8006476:	4602      	mov	r2, r0
 8006478:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	490a      	ldr	r1, [pc, #40]	; (80064ac <HAL_RCC_ClockConfig+0x1c8>)
 8006484:	5ccb      	ldrb	r3, [r1, r3]
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <HAL_RCC_ClockConfig+0x1cc>)
 800648c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <HAL_RCC_ClockConfig+0x1d0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fed4 	bl	8005240 <HAL_InitTick>

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40022000 	.word	0x40022000
 80064a8:	40021000 	.word	0x40021000
 80064ac:	0800bb00 	.word	0x0800bb00
 80064b0:	200000b8 	.word	0x200000b8
 80064b4:	200000bc 	.word	0x200000bc

080064b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064b8:	b490      	push	{r4, r7}
 80064ba:	b08a      	sub	sp, #40	; 0x28
 80064bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80064be:	4b29      	ldr	r3, [pc, #164]	; (8006564 <HAL_RCC_GetSysClockFreq+0xac>)
 80064c0:	1d3c      	adds	r4, r7, #4
 80064c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80064c8:	f240 2301 	movw	r3, #513	; 0x201
 80064cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	2300      	movs	r3, #0
 80064d4:	61bb      	str	r3, [r7, #24]
 80064d6:	2300      	movs	r3, #0
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064e2:	4b21      	ldr	r3, [pc, #132]	; (8006568 <HAL_RCC_GetSysClockFreq+0xb0>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f003 030c 	and.w	r3, r3, #12
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d002      	beq.n	80064f8 <HAL_RCC_GetSysClockFreq+0x40>
 80064f2:	2b08      	cmp	r3, #8
 80064f4:	d003      	beq.n	80064fe <HAL_RCC_GetSysClockFreq+0x46>
 80064f6:	e02b      	b.n	8006550 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064f8:	4b1c      	ldr	r3, [pc, #112]	; (800656c <HAL_RCC_GetSysClockFreq+0xb4>)
 80064fa:	623b      	str	r3, [r7, #32]
      break;
 80064fc:	e02b      	b.n	8006556 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	0c9b      	lsrs	r3, r3, #18
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	3328      	adds	r3, #40	; 0x28
 8006508:	443b      	add	r3, r7
 800650a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800650e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d012      	beq.n	8006540 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800651a:	4b13      	ldr	r3, [pc, #76]	; (8006568 <HAL_RCC_GetSysClockFreq+0xb0>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	0c5b      	lsrs	r3, r3, #17
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	3328      	adds	r3, #40	; 0x28
 8006526:	443b      	add	r3, r7
 8006528:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800652c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	4a0e      	ldr	r2, [pc, #56]	; (800656c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006532:	fb03 f202 	mul.w	r2, r3, r2
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	fbb2 f3f3 	udiv	r3, r2, r3
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
 800653e:	e004      	b.n	800654a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	4a0b      	ldr	r2, [pc, #44]	; (8006570 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006544:	fb02 f303 	mul.w	r3, r2, r3
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	623b      	str	r3, [r7, #32]
      break;
 800654e:	e002      	b.n	8006556 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006550:	4b06      	ldr	r3, [pc, #24]	; (800656c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006552:	623b      	str	r3, [r7, #32]
      break;
 8006554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006556:	6a3b      	ldr	r3, [r7, #32]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3728      	adds	r7, #40	; 0x28
 800655c:	46bd      	mov	sp, r7
 800655e:	bc90      	pop	{r4, r7}
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	0800bae4 	.word	0x0800bae4
 8006568:	40021000 	.word	0x40021000
 800656c:	007a1200 	.word	0x007a1200
 8006570:	003d0900 	.word	0x003d0900

08006574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006578:	4b02      	ldr	r3, [pc, #8]	; (8006584 <HAL_RCC_GetHCLKFreq+0x10>)
 800657a:	681b      	ldr	r3, [r3, #0]
}
 800657c:	4618      	mov	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	bc80      	pop	{r7}
 8006582:	4770      	bx	lr
 8006584:	200000b8 	.word	0x200000b8

08006588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800658c:	f7ff fff2 	bl	8006574 <HAL_RCC_GetHCLKFreq>
 8006590:	4602      	mov	r2, r0
 8006592:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	4903      	ldr	r1, [pc, #12]	; (80065ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800659e:	5ccb      	ldrb	r3, [r1, r3]
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40021000 	.word	0x40021000
 80065ac:	0800bb10 	.word	0x0800bb10

080065b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065b4:	f7ff ffde 	bl	8006574 <HAL_RCC_GetHCLKFreq>
 80065b8:	4602      	mov	r2, r0
 80065ba:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	0adb      	lsrs	r3, r3, #11
 80065c0:	f003 0307 	and.w	r3, r3, #7
 80065c4:	4903      	ldr	r1, [pc, #12]	; (80065d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065c6:	5ccb      	ldrb	r3, [r1, r3]
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	40021000 	.word	0x40021000
 80065d4:	0800bb10 	.word	0x0800bb10

080065d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065e0:	4b0a      	ldr	r3, [pc, #40]	; (800660c <RCC_Delay+0x34>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a0a      	ldr	r2, [pc, #40]	; (8006610 <RCC_Delay+0x38>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	0a5b      	lsrs	r3, r3, #9
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	fb02 f303 	mul.w	r3, r2, r3
 80065f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065f4:	bf00      	nop
  }
  while (Delay --);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1e5a      	subs	r2, r3, #1
 80065fa:	60fa      	str	r2, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1f9      	bne.n	80065f4 <RCC_Delay+0x1c>
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr
 800660c:	200000b8 	.word	0x200000b8
 8006610:	10624dd3 	.word	0x10624dd3

08006614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e076      	b.n	8006714 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	2b00      	cmp	r3, #0
 800662c:	d108      	bne.n	8006640 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006636:	d009      	beq.n	800664c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	61da      	str	r2, [r3, #28]
 800663e:	e005      	b.n	800664c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7fe fb2c 	bl	8004cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006682:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d0:	ea42 0103 	orr.w	r1, r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	0c1a      	lsrs	r2, r3, #16
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f002 0204 	and.w	r2, r2, #4
 80066f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69da      	ldr	r2, [r3, #28]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006702:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	4613      	mov	r3, r2
 800672a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_SPI_Transmit+0x22>
 800673a:	2302      	movs	r3, #2
 800673c:	e126      	b.n	800698c <HAL_SPI_Transmit+0x270>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006746:	f7fe fdbd 	bl	80052c4 <HAL_GetTick>
 800674a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800674c:	88fb      	ldrh	r3, [r7, #6]
 800674e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	d002      	beq.n	8006762 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800675c:	2302      	movs	r3, #2
 800675e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006760:	e10b      	b.n	800697a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <HAL_SPI_Transmit+0x52>
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006772:	e102      	b.n	800697a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2203      	movs	r2, #3
 8006778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	88fa      	ldrh	r2, [r7, #6]
 800678c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	88fa      	ldrh	r2, [r7, #6]
 8006792:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ba:	d10f      	bne.n	80067dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d007      	beq.n	80067fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006802:	d14b      	bne.n	800689c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <HAL_SPI_Transmit+0xf6>
 800680c:	8afb      	ldrh	r3, [r7, #22]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d13e      	bne.n	8006890 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	881a      	ldrh	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	1c9a      	adds	r2, r3, #2
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006836:	e02b      	b.n	8006890 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b02      	cmp	r3, #2
 8006844:	d112      	bne.n	800686c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	881a      	ldrh	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	1c9a      	adds	r2, r3, #2
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	86da      	strh	r2, [r3, #54]	; 0x36
 800686a:	e011      	b.n	8006890 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800686c:	f7fe fd2a 	bl	80052c4 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d803      	bhi.n	8006884 <HAL_SPI_Transmit+0x168>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006882:	d102      	bne.n	800688a <HAL_SPI_Transmit+0x16e>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d102      	bne.n	8006890 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800688e:	e074      	b.n	800697a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1ce      	bne.n	8006838 <HAL_SPI_Transmit+0x11c>
 800689a:	e04c      	b.n	8006936 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <HAL_SPI_Transmit+0x18e>
 80068a4:	8afb      	ldrh	r3, [r7, #22]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d140      	bne.n	800692c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	330c      	adds	r3, #12
 80068b4:	7812      	ldrb	r2, [r2, #0]
 80068b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80068d0:	e02c      	b.n	800692c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d113      	bne.n	8006908 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	330c      	adds	r3, #12
 80068ea:	7812      	ldrb	r2, [r2, #0]
 80068ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	86da      	strh	r2, [r3, #54]	; 0x36
 8006906:	e011      	b.n	800692c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006908:	f7fe fcdc 	bl	80052c4 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d803      	bhi.n	8006920 <HAL_SPI_Transmit+0x204>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691e:	d102      	bne.n	8006926 <HAL_SPI_Transmit+0x20a>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d102      	bne.n	800692c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	77fb      	strb	r3, [r7, #31]
          goto error;
 800692a:	e026      	b.n	800697a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1cd      	bne.n	80068d2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 fa54 	bl	8006de8 <SPI_EndRxTxTransaction>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	77fb      	strb	r3, [r7, #31]
 8006976:	e000      	b.n	800697a <HAL_SPI_Transmit+0x25e>
  }

error:
 8006978:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800698a:	7ffb      	ldrb	r3, [r7, #31]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3720      	adds	r7, #32
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08c      	sub	sp, #48	; 0x30
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069a2:	2301      	movs	r3, #1
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d101      	bne.n	80069ba <HAL_SPI_TransmitReceive+0x26>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e18a      	b.n	8006cd0 <HAL_SPI_TransmitReceive+0x33c>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c2:	f7fe fc7f 	bl	80052c4 <HAL_GetTick>
 80069c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80069d8:	887b      	ldrh	r3, [r7, #2]
 80069da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d00f      	beq.n	8006a04 <HAL_SPI_TransmitReceive+0x70>
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069ea:	d107      	bne.n	80069fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d103      	bne.n	80069fc <HAL_SPI_TransmitReceive+0x68>
 80069f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d003      	beq.n	8006a04 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80069fc:	2302      	movs	r3, #2
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a02:	e15b      	b.n	8006cbc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d005      	beq.n	8006a16 <HAL_SPI_TransmitReceive+0x82>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <HAL_SPI_TransmitReceive+0x82>
 8006a10:	887b      	ldrh	r3, [r7, #2]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a1c:	e14e      	b.n	8006cbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d003      	beq.n	8006a32 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2205      	movs	r2, #5
 8006a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	887a      	ldrh	r2, [r7, #2]
 8006a42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	887a      	ldrh	r2, [r7, #2]
 8006a48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	887a      	ldrh	r2, [r7, #2]
 8006a54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	887a      	ldrh	r2, [r7, #2]
 8006a5a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d007      	beq.n	8006a86 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a8e:	d178      	bne.n	8006b82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <HAL_SPI_TransmitReceive+0x10a>
 8006a98:	8b7b      	ldrh	r3, [r7, #26]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d166      	bne.n	8006b6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	881a      	ldrh	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	1c9a      	adds	r2, r3, #2
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b01      	subs	r3, #1
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ac2:	e053      	b.n	8006b6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d11b      	bne.n	8006b0a <HAL_SPI_TransmitReceive+0x176>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d016      	beq.n	8006b0a <HAL_SPI_TransmitReceive+0x176>
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d113      	bne.n	8006b0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	881a      	ldrh	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	1c9a      	adds	r2, r3, #2
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d119      	bne.n	8006b4c <HAL_SPI_TransmitReceive+0x1b8>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d014      	beq.n	8006b4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68da      	ldr	r2, [r3, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	b292      	uxth	r2, r2
 8006b2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	1c9a      	adds	r2, r3, #2
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b4c:	f7fe fbba 	bl	80052c4 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d807      	bhi.n	8006b6c <HAL_SPI_TransmitReceive+0x1d8>
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b62:	d003      	beq.n	8006b6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b6a:	e0a7      	b.n	8006cbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1a6      	bne.n	8006ac4 <HAL_SPI_TransmitReceive+0x130>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1a1      	bne.n	8006ac4 <HAL_SPI_TransmitReceive+0x130>
 8006b80:	e07c      	b.n	8006c7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <HAL_SPI_TransmitReceive+0x1fc>
 8006b8a:	8b7b      	ldrh	r3, [r7, #26]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d16b      	bne.n	8006c68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	7812      	ldrb	r2, [r2, #0]
 8006b9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bb6:	e057      	b.n	8006c68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d11c      	bne.n	8006c00 <HAL_SPI_TransmitReceive+0x26c>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d017      	beq.n	8006c00 <HAL_SPI_TransmitReceive+0x26c>
 8006bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d114      	bne.n	8006c00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	330c      	adds	r3, #12
 8006be0:	7812      	ldrb	r2, [r2, #0]
 8006be2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d119      	bne.n	8006c42 <HAL_SPI_TransmitReceive+0x2ae>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d014      	beq.n	8006c42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c42:	f7fe fb3f 	bl	80052c4 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d803      	bhi.n	8006c5a <HAL_SPI_TransmitReceive+0x2c6>
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c58:	d102      	bne.n	8006c60 <HAL_SPI_TransmitReceive+0x2cc>
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d103      	bne.n	8006c68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c66:	e029      	b.n	8006cbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1a2      	bne.n	8006bb8 <HAL_SPI_TransmitReceive+0x224>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d19d      	bne.n	8006bb8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 f8b1 	bl	8006de8 <SPI_EndRxTxTransaction>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d006      	beq.n	8006c9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2220      	movs	r2, #32
 8006c96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c98:	e010      	b.n	8006cbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	617b      	str	r3, [r7, #20]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	e000      	b.n	8006cbc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006cba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ccc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3730      	adds	r7, #48	; 0x30
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ce8:	f7fe faec 	bl	80052c4 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006cf8:	f7fe fae4 	bl	80052c4 <HAL_GetTick>
 8006cfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cfe:	4b39      	ldr	r3, [pc, #228]	; (8006de4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	015b      	lsls	r3, r3, #5
 8006d04:	0d1b      	lsrs	r3, r3, #20
 8006d06:	69fa      	ldr	r2, [r7, #28]
 8006d08:	fb02 f303 	mul.w	r3, r2, r3
 8006d0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d0e:	e054      	b.n	8006dba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d16:	d050      	beq.n	8006dba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d18:	f7fe fad4 	bl	80052c4 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d902      	bls.n	8006d2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d13d      	bne.n	8006daa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d46:	d111      	bne.n	8006d6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d50:	d004      	beq.n	8006d5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d5a:	d107      	bne.n	8006d6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d74:	d10f      	bne.n	8006d96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e017      	b.n	8006dda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	bf0c      	ite	eq
 8006dca:	2301      	moveq	r3, #1
 8006dcc:	2300      	movne	r3, #0
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	79fb      	ldrb	r3, [r7, #7]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d19b      	bne.n	8006d10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3720      	adds	r7, #32
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	200000b8 	.word	0x200000b8

08006de8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2180      	movs	r1, #128	; 0x80
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f7ff ff6a 	bl	8006cd8 <SPI_WaitFlagStateUntilTimeout>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0e:	f043 0220 	orr.w	r2, r3, #32
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e000      	b.n	8006e1c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e041      	b.n	8006eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d106      	bne.n	8006e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fd ffc8 	bl	8004de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3304      	adds	r3, #4
 8006e60:	4619      	mov	r1, r3
 8006e62:	4610      	mov	r0, r2
 8006e64:	f000 fc9a 	bl	800779c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d001      	beq.n	8006edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e03a      	b.n	8006f52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0201 	orr.w	r2, r2, #1
 8006ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <HAL_TIM_Base_Start_IT+0x98>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00e      	beq.n	8006f1c <HAL_TIM_Base_Start_IT+0x58>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f06:	d009      	beq.n	8006f1c <HAL_TIM_Base_Start_IT+0x58>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a14      	ldr	r2, [pc, #80]	; (8006f60 <HAL_TIM_Base_Start_IT+0x9c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_TIM_Base_Start_IT+0x58>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a13      	ldr	r2, [pc, #76]	; (8006f64 <HAL_TIM_Base_Start_IT+0xa0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d111      	bne.n	8006f40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b06      	cmp	r3, #6
 8006f2c:	d010      	beq.n	8006f50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 0201 	orr.w	r2, r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3e:	e007      	b.n	8006f50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0201 	orr.w	r2, r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr
 8006f5c:	40012c00 	.word	0x40012c00
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800

08006f68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6a1a      	ldr	r2, [r3, #32]
 8006f86:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10f      	bne.n	8006fb0 <HAL_TIM_Base_Stop_IT+0x48>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6a1a      	ldr	r2, [r3, #32]
 8006f96:	f240 4344 	movw	r3, #1092	; 0x444
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d107      	bne.n	8006fb0 <HAL_TIM_Base_Stop_IT+0x48>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0201 	bic.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bc80      	pop	{r7}
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e093      	b.n	8007100 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d106      	bne.n	8006ff2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7fd feb3 	bl	8004d58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007008:	f023 0307 	bic.w	r3, r3, #7
 800700c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3304      	adds	r3, #4
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f000 fbbf 	bl	800779c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	021b      	lsls	r3, r3, #8
 8007056:	4313      	orrs	r3, r2
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007064:	f023 030c 	bic.w	r3, r3, #12
 8007068:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007074:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	4313      	orrs	r3, r2
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	011a      	lsls	r2, r3, #4
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	031b      	lsls	r3, r3, #12
 8007094:	4313      	orrs	r3, r2
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80070a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	4313      	orrs	r3, r2
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007118:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007120:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007128:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007130:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d110      	bne.n	800715a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d102      	bne.n	8007144 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800713e:	7b7b      	ldrb	r3, [r7, #13]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d001      	beq.n	8007148 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e089      	b.n	800725c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007158:	e031      	b.n	80071be <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b04      	cmp	r3, #4
 800715e:	d110      	bne.n	8007182 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d102      	bne.n	800716c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007166:	7b3b      	ldrb	r3, [r7, #12]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d001      	beq.n	8007170 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e075      	b.n	800725c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007180:	e01d      	b.n	80071be <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d108      	bne.n	800719a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d105      	bne.n	800719a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800718e:	7b7b      	ldrb	r3, [r7, #13]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d102      	bne.n	800719a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007194:	7b3b      	ldrb	r3, [r7, #12]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d001      	beq.n	800719e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e05e      	b.n	800725c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2202      	movs	r2, #2
 80071a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2202      	movs	r2, #2
 80071aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2202      	movs	r2, #2
 80071b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2202      	movs	r2, #2
 80071ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <HAL_TIM_Encoder_Start_IT+0xc4>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d010      	beq.n	80071ec <HAL_TIM_Encoder_Start_IT+0xe4>
 80071ca:	e01f      	b.n	800720c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2201      	movs	r2, #1
 80071d2:	2100      	movs	r1, #0
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 fbd9 	bl	800798c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f042 0202 	orr.w	r2, r2, #2
 80071e8:	60da      	str	r2, [r3, #12]
      break;
 80071ea:	e02e      	b.n	800724a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2201      	movs	r2, #1
 80071f2:	2104      	movs	r1, #4
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fbc9 	bl	800798c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0204 	orr.w	r2, r2, #4
 8007208:	60da      	str	r2, [r3, #12]
      break;
 800720a:	e01e      	b.n	800724a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2201      	movs	r2, #1
 8007212:	2100      	movs	r1, #0
 8007214:	4618      	mov	r0, r3
 8007216:	f000 fbb9 	bl	800798c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2201      	movs	r2, #1
 8007220:	2104      	movs	r1, #4
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fbb2 	bl	800798c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0202 	orr.w	r2, r2, #2
 8007236:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0204 	orr.w	r2, r2, #4
 8007246:	60da      	str	r2, [r3, #12]
      break;
 8007248:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0201 	orr.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10f      	bne.n	8007294 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2200      	movs	r2, #0
 800727a:	2100      	movs	r1, #0
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fb85 	bl	800798c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0202 	bic.w	r2, r2, #2
 8007290:	60da      	str	r2, [r3, #12]
 8007292:	e030      	b.n	80072f6 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b04      	cmp	r3, #4
 8007298:	d10f      	bne.n	80072ba <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2200      	movs	r2, #0
 80072a0:	2104      	movs	r1, #4
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fb72 	bl	800798c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68da      	ldr	r2, [r3, #12]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0204 	bic.w	r2, r2, #4
 80072b6:	60da      	str	r2, [r3, #12]
 80072b8:	e01d      	b.n	80072f6 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2200      	movs	r2, #0
 80072c0:	2100      	movs	r1, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 fb62 	bl	800798c <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2200      	movs	r2, #0
 80072ce:	2104      	movs	r1, #4
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fb5b 	bl	800798c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0202 	bic.w	r2, r2, #2
 80072e4:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0204 	bic.w	r2, r2, #4
 80072f4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8007300:	4013      	ands	r3, r2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10f      	bne.n	8007326 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6a1a      	ldr	r2, [r3, #32]
 800730c:	f240 4344 	movw	r3, #1092	; 0x444
 8007310:	4013      	ands	r3, r2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d107      	bne.n	8007326 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0201 	bic.w	r2, r2, #1
 8007324:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <HAL_TIM_Encoder_Stop_IT+0xce>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	2b04      	cmp	r3, #4
 8007330:	d138      	bne.n	80073a4 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d104      	bne.n	8007342 <HAL_TIM_Encoder_Stop_IT+0xde>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007340:	e013      	b.n	800736a <HAL_TIM_Encoder_Stop_IT+0x106>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b04      	cmp	r3, #4
 8007346:	d104      	bne.n	8007352 <HAL_TIM_Encoder_Stop_IT+0xee>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007350:	e00b      	b.n	800736a <HAL_TIM_Encoder_Stop_IT+0x106>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b08      	cmp	r3, #8
 8007356:	d104      	bne.n	8007362 <HAL_TIM_Encoder_Stop_IT+0xfe>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007360:	e003      	b.n	800736a <HAL_TIM_Encoder_Stop_IT+0x106>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d104      	bne.n	800737a <HAL_TIM_Encoder_Stop_IT+0x116>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007378:	e024      	b.n	80073c4 <HAL_TIM_Encoder_Stop_IT+0x160>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b04      	cmp	r3, #4
 800737e:	d104      	bne.n	800738a <HAL_TIM_Encoder_Stop_IT+0x126>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007388:	e01c      	b.n	80073c4 <HAL_TIM_Encoder_Stop_IT+0x160>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b08      	cmp	r3, #8
 800738e:	d104      	bne.n	800739a <HAL_TIM_Encoder_Stop_IT+0x136>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007398:	e014      	b.n	80073c4 <HAL_TIM_Encoder_Stop_IT+0x160>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073a2:	e00f      	b.n	80073c4 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d122      	bne.n	800742a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d11b      	bne.n	800742a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f06f 0202 	mvn.w	r2, #2
 80073fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	f003 0303 	and.w	r3, r3, #3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7fd fbab 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8007416:	e005      	b.n	8007424 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f9a4 	bl	8007766 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f9aa 	bl	8007778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b04      	cmp	r3, #4
 8007436:	d122      	bne.n	800747e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b04      	cmp	r3, #4
 8007444:	d11b      	bne.n	800747e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f06f 0204 	mvn.w	r2, #4
 800744e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7fd fb81 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 800746a:	e005      	b.n	8007478 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f97a 	bl	8007766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f980 	bl	8007778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b08      	cmp	r3, #8
 800748a:	d122      	bne.n	80074d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b08      	cmp	r3, #8
 8007498:	d11b      	bne.n	80074d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f06f 0208 	mvn.w	r2, #8
 80074a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2204      	movs	r2, #4
 80074a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	f003 0303 	and.w	r3, r3, #3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7fd fb57 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 80074be:	e005      	b.n	80074cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f950 	bl	8007766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f956 	bl	8007778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f003 0310 	and.w	r3, r3, #16
 80074dc:	2b10      	cmp	r3, #16
 80074de:	d122      	bne.n	8007526 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	f003 0310 	and.w	r3, r3, #16
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d11b      	bne.n	8007526 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f06f 0210 	mvn.w	r2, #16
 80074f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2208      	movs	r2, #8
 80074fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fd fb2d 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8007512:	e005      	b.n	8007520 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f926 	bl	8007766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f92c 	bl	8007778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b01      	cmp	r3, #1
 8007532:	d10e      	bne.n	8007552 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b01      	cmp	r3, #1
 8007540:	d107      	bne.n	8007552 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f06f 0201 	mvn.w	r2, #1
 800754a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7fd fac9 	bl	8004ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755c:	2b80      	cmp	r3, #128	; 0x80
 800755e:	d10e      	bne.n	800757e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756a:	2b80      	cmp	r3, #128	; 0x80
 800756c:	d107      	bne.n	800757e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fa92 	bl	8007aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d10e      	bne.n	80075aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	d107      	bne.n	80075aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f8f0 	bl	800778a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d10e      	bne.n	80075d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	d107      	bne.n	80075d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f06f 0220 	mvn.w	r2, #32
 80075ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fa5d 	bl	8007a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d101      	bne.n	80075f6 <HAL_TIM_ConfigClockSource+0x18>
 80075f2:	2302      	movs	r3, #2
 80075f4:	e0b3      	b.n	800775e <HAL_TIM_ConfigClockSource+0x180>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2202      	movs	r2, #2
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007614:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800761c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762e:	d03e      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0xd0>
 8007630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007634:	f200 8087 	bhi.w	8007746 <HAL_TIM_ConfigClockSource+0x168>
 8007638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763c:	f000 8085 	beq.w	800774a <HAL_TIM_ConfigClockSource+0x16c>
 8007640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007644:	d87f      	bhi.n	8007746 <HAL_TIM_ConfigClockSource+0x168>
 8007646:	2b70      	cmp	r3, #112	; 0x70
 8007648:	d01a      	beq.n	8007680 <HAL_TIM_ConfigClockSource+0xa2>
 800764a:	2b70      	cmp	r3, #112	; 0x70
 800764c:	d87b      	bhi.n	8007746 <HAL_TIM_ConfigClockSource+0x168>
 800764e:	2b60      	cmp	r3, #96	; 0x60
 8007650:	d050      	beq.n	80076f4 <HAL_TIM_ConfigClockSource+0x116>
 8007652:	2b60      	cmp	r3, #96	; 0x60
 8007654:	d877      	bhi.n	8007746 <HAL_TIM_ConfigClockSource+0x168>
 8007656:	2b50      	cmp	r3, #80	; 0x50
 8007658:	d03c      	beq.n	80076d4 <HAL_TIM_ConfigClockSource+0xf6>
 800765a:	2b50      	cmp	r3, #80	; 0x50
 800765c:	d873      	bhi.n	8007746 <HAL_TIM_ConfigClockSource+0x168>
 800765e:	2b40      	cmp	r3, #64	; 0x40
 8007660:	d058      	beq.n	8007714 <HAL_TIM_ConfigClockSource+0x136>
 8007662:	2b40      	cmp	r3, #64	; 0x40
 8007664:	d86f      	bhi.n	8007746 <HAL_TIM_ConfigClockSource+0x168>
 8007666:	2b30      	cmp	r3, #48	; 0x30
 8007668:	d064      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x156>
 800766a:	2b30      	cmp	r3, #48	; 0x30
 800766c:	d86b      	bhi.n	8007746 <HAL_TIM_ConfigClockSource+0x168>
 800766e:	2b20      	cmp	r3, #32
 8007670:	d060      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x156>
 8007672:	2b20      	cmp	r3, #32
 8007674:	d867      	bhi.n	8007746 <HAL_TIM_ConfigClockSource+0x168>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d05c      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x156>
 800767a:	2b10      	cmp	r3, #16
 800767c:	d05a      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800767e:	e062      	b.n	8007746 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	6899      	ldr	r1, [r3, #8]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f000 f95d 	bl	800794e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	609a      	str	r2, [r3, #8]
      break;
 80076ac:	e04e      	b.n	800774c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	6899      	ldr	r1, [r3, #8]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f000 f946 	bl	800794e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076d0:	609a      	str	r2, [r3, #8]
      break;
 80076d2:	e03b      	b.n	800774c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6818      	ldr	r0, [r3, #0]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	6859      	ldr	r1, [r3, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	461a      	mov	r2, r3
 80076e2:	f000 f8bd 	bl	8007860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2150      	movs	r1, #80	; 0x50
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 f914 	bl	800791a <TIM_ITRx_SetConfig>
      break;
 80076f2:	e02b      	b.n	800774c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6818      	ldr	r0, [r3, #0]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	6859      	ldr	r1, [r3, #4]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	461a      	mov	r2, r3
 8007702:	f000 f8db 	bl	80078bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2160      	movs	r1, #96	; 0x60
 800770c:	4618      	mov	r0, r3
 800770e:	f000 f904 	bl	800791a <TIM_ITRx_SetConfig>
      break;
 8007712:	e01b      	b.n	800774c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	6859      	ldr	r1, [r3, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	461a      	mov	r2, r3
 8007722:	f000 f89d 	bl	8007860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2140      	movs	r1, #64	; 0x40
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f8f4 	bl	800791a <TIM_ITRx_SetConfig>
      break;
 8007732:	e00b      	b.n	800774c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4619      	mov	r1, r3
 800773e:	4610      	mov	r0, r2
 8007740:	f000 f8eb 	bl	800791a <TIM_ITRx_SetConfig>
        break;
 8007744:	e002      	b.n	800774c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007746:	bf00      	nop
 8007748:	e000      	b.n	800774c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800774a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800776e:	bf00      	nop
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	bc80      	pop	{r7}
 8007776:	4770      	bx	lr

08007778 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	bc80      	pop	{r7}
 8007788:	4770      	bx	lr

0800778a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr

0800779c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a29      	ldr	r2, [pc, #164]	; (8007854 <TIM_Base_SetConfig+0xb8>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d00b      	beq.n	80077cc <TIM_Base_SetConfig+0x30>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ba:	d007      	beq.n	80077cc <TIM_Base_SetConfig+0x30>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a26      	ldr	r2, [pc, #152]	; (8007858 <TIM_Base_SetConfig+0xbc>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_Base_SetConfig+0x30>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a25      	ldr	r2, [pc, #148]	; (800785c <TIM_Base_SetConfig+0xc0>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d108      	bne.n	80077de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a1c      	ldr	r2, [pc, #112]	; (8007854 <TIM_Base_SetConfig+0xb8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_Base_SetConfig+0x62>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ec:	d007      	beq.n	80077fe <TIM_Base_SetConfig+0x62>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a19      	ldr	r2, [pc, #100]	; (8007858 <TIM_Base_SetConfig+0xbc>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_Base_SetConfig+0x62>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a18      	ldr	r2, [pc, #96]	; (800785c <TIM_Base_SetConfig+0xc0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d108      	bne.n	8007810 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a07      	ldr	r2, [pc, #28]	; (8007854 <TIM_Base_SetConfig+0xb8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d103      	bne.n	8007844 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	615a      	str	r2, [r3, #20]
}
 800784a:	bf00      	nop
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	bc80      	pop	{r7}
 8007852:	4770      	bx	lr
 8007854:	40012c00 	.word	0x40012c00
 8007858:	40000400 	.word	0x40000400
 800785c:	40000800 	.word	0x40000800

08007860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	f023 0201 	bic.w	r2, r3, #1
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800788a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	011b      	lsls	r3, r3, #4
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f023 030a 	bic.w	r3, r3, #10
 800789c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	621a      	str	r2, [r3, #32]
}
 80078b2:	bf00      	nop
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bc80      	pop	{r7}
 80078ba:	4770      	bx	lr

080078bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	f023 0210 	bic.w	r2, r3, #16
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	031b      	lsls	r3, r3, #12
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	621a      	str	r2, [r3, #32]
}
 8007910:	bf00      	nop
 8007912:	371c      	adds	r7, #28
 8007914:	46bd      	mov	sp, r7
 8007916:	bc80      	pop	{r7}
 8007918:	4770      	bx	lr

0800791a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800791a:	b480      	push	{r7}
 800791c:	b085      	sub	sp, #20
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4313      	orrs	r3, r2
 8007938:	f043 0307 	orr.w	r3, r3, #7
 800793c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	609a      	str	r2, [r3, #8]
}
 8007944:	bf00      	nop
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr

0800794e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800794e:	b480      	push	{r7}
 8007950:	b087      	sub	sp, #28
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
 800795a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007968:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	021a      	lsls	r2, r3, #8
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	431a      	orrs	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	4313      	orrs	r3, r2
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	609a      	str	r2, [r3, #8]
}
 8007982:	bf00      	nop
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	bc80      	pop	{r7}
 800798a:	4770      	bx	lr

0800798c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f003 031f 	and.w	r3, r3, #31
 800799e:	2201      	movs	r2, #1
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6a1a      	ldr	r2, [r3, #32]
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	43db      	mvns	r3, r3
 80079ae:	401a      	ands	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a1a      	ldr	r2, [r3, #32]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f003 031f 	and.w	r3, r3, #31
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	fa01 f303 	lsl.w	r3, r1, r3
 80079c4:	431a      	orrs	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	621a      	str	r2, [r3, #32]
}
 80079ca:	bf00      	nop
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e046      	b.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a16      	ldr	r2, [pc, #88]	; (8007a84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00e      	beq.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a38:	d009      	beq.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a12      	ldr	r2, [pc, #72]	; (8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d004      	beq.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a10      	ldr	r2, [pc, #64]	; (8007a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d10c      	bne.n	8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc80      	pop	{r7}
 8007a82:	4770      	bx	lr
 8007a84:	40012c00 	.word	0x40012c00
 8007a88:	40000400 	.word	0x40000400
 8007a8c:	40000800 	.word	0x40000800

08007a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr

08007aa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bc80      	pop	{r7}
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e03f      	b.n	8007b46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d106      	bne.n	8007ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7fd f9a6 	bl	8004e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2224      	movs	r2, #36	; 0x24
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fcbf 	bl	800847c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	691a      	ldr	r2, [r3, #16]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	695a      	ldr	r2, [r3, #20]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b086      	sub	sp, #24
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b20      	cmp	r3, #32
 8007b66:	d13c      	bne.n	8007be2 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e035      	b.n	8007be4 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d101      	bne.n	8007b86 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007b82:	2302      	movs	r3, #2
 8007b84:	e02e      	b.n	8007be4 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007b94:	88fb      	ldrh	r3, [r7, #6]
 8007b96:	461a      	mov	r2, r3
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 faa4 	bl	80080e8 <UART_Start_Receive_DMA>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d119      	bne.n	8007bde <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d113      	bne.n	8007bda <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	613b      	str	r3, [r7, #16]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f042 0210 	orr.w	r2, r2, #16
 8007bd6:	60da      	str	r2, [r3, #12]
 8007bd8:	e001      	b.n	8007bde <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	e000      	b.n	8007be4 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8007be2:	2302      	movs	r3, #2
  }
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08a      	sub	sp, #40	; 0x28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	f003 030f 	and.w	r3, r3, #15
 8007c1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10d      	bne.n	8007c3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	f003 0320 	and.w	r3, r3, #32
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_UART_IRQHandler+0x52>
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fb76 	bl	8008328 <UART_Receive_IT>
      return;
 8007c3c:	e17b      	b.n	8007f36 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80b1 	beq.w	8007da8 <HAL_UART_IRQHandler+0x1bc>
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d105      	bne.n	8007c5c <HAL_UART_IRQHandler+0x70>
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 80a6 	beq.w	8007da8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <HAL_UART_IRQHandler+0x90>
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d005      	beq.n	8007c7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c74:	f043 0201 	orr.w	r2, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	f003 0304 	and.w	r3, r3, #4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_UART_IRQHandler+0xb0>
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d005      	beq.n	8007c9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c94:	f043 0202 	orr.w	r2, r3, #2
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <HAL_UART_IRQHandler+0xd0>
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb4:	f043 0204 	orr.w	r2, r3, #4
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	f003 0308 	and.w	r3, r3, #8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00f      	beq.n	8007ce6 <HAL_UART_IRQHandler+0xfa>
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	f003 0320 	and.w	r3, r3, #32
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d104      	bne.n	8007cda <HAL_UART_IRQHandler+0xee>
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	f043 0208 	orr.w	r2, r3, #8
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 811e 	beq.w	8007f2c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <HAL_UART_IRQHandler+0x11e>
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fb0f 	bl	8008328 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bf14      	ite	ne
 8007d18:	2301      	movne	r3, #1
 8007d1a:	2300      	moveq	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d102      	bne.n	8007d32 <HAL_UART_IRQHandler+0x146>
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d031      	beq.n	8007d96 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa51 	bl	80081da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d023      	beq.n	8007d8e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	695a      	ldr	r2, [r3, #20]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d013      	beq.n	8007d86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	4a76      	ldr	r2, [pc, #472]	; (8007f3c <HAL_UART_IRQHandler+0x350>)
 8007d64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fd fcda 	bl	8005724 <HAL_DMA_Abort_IT>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d016      	beq.n	8007da4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d84:	e00e      	b.n	8007da4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f8f5 	bl	8007f76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d8c:	e00a      	b.n	8007da4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f8f1 	bl	8007f76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d94:	e006      	b.n	8007da4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f8ed 	bl	8007f76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007da2:	e0c3      	b.n	8007f2c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da4:	bf00      	nop
    return;
 8007da6:	e0c1      	b.n	8007f2c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	f040 80a1 	bne.w	8007ef4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	f003 0310 	and.w	r3, r3, #16
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 809b 	beq.w	8007ef4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 8095 	beq.w	8007ef4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	60fb      	str	r3, [r7, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d04e      	beq.n	8007e8c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007df8:	8a3b      	ldrh	r3, [r7, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 8098 	beq.w	8007f30 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e04:	8a3a      	ldrh	r2, [r7, #16]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	f080 8092 	bcs.w	8007f30 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	8a3a      	ldrh	r2, [r7, #16]
 8007e10:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	2b20      	cmp	r3, #32
 8007e1a:	d02b      	beq.n	8007e74 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e2a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695a      	ldr	r2, [r3, #20]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0201 	bic.w	r2, r2, #1
 8007e3a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	695a      	ldr	r2, [r3, #20]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e4a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 0210 	bic.w	r2, r2, #16
 8007e68:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fd fc1d 	bl	80056ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7fc fe4d 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007e8a:	e051      	b.n	8007f30 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d047      	beq.n	8007f34 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007ea4:	8a7b      	ldrh	r3, [r7, #18]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d044      	beq.n	8007f34 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68da      	ldr	r2, [r3, #12]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007eb8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	695a      	ldr	r2, [r3, #20]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0201 	bic.w	r2, r2, #1
 8007ec8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 0210 	bic.w	r2, r2, #16
 8007ee6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ee8:	8a7b      	ldrh	r3, [r7, #18]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7fc fe19 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007ef2:	e01f      	b.n	8007f34 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d008      	beq.n	8007f10 <HAL_UART_IRQHandler+0x324>
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f9a6 	bl	800825a <UART_Transmit_IT>
    return;
 8007f0e:	e012      	b.n	8007f36 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00d      	beq.n	8007f36 <HAL_UART_IRQHandler+0x34a>
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d008      	beq.n	8007f36 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f9e7 	bl	80082f8 <UART_EndTransmit_IT>
    return;
 8007f2a:	e004      	b.n	8007f36 <HAL_UART_IRQHandler+0x34a>
    return;
 8007f2c:	bf00      	nop
 8007f2e:	e002      	b.n	8007f36 <HAL_UART_IRQHandler+0x34a>
      return;
 8007f30:	bf00      	nop
 8007f32:	e000      	b.n	8007f36 <HAL_UART_IRQHandler+0x34a>
      return;
 8007f34:	bf00      	nop
  }
}
 8007f36:	3728      	adds	r7, #40	; 0x28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	08008233 	.word	0x08008233

08007f40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc80      	pop	{r7}
 8007f50:	4770      	bx	lr

08007f52 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bc80      	pop	{r7}
 8007f62:	4770      	bx	lr

08007f64 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr

08007f76 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bc80      	pop	{r7}
 8007f86:	4770      	bx	lr

08007f88 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0320 	and.w	r3, r3, #32
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d12a      	bne.n	8007ffa <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fb8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	695a      	ldr	r2, [r3, #20]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0201 	bic.w	r2, r2, #1
 8007fc8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	695a      	ldr	r2, [r3, #20]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d107      	bne.n	8007ffa <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68da      	ldr	r2, [r3, #12]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0210 	bic.w	r2, r2, #16
 8007ff8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d106      	bne.n	8008010 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008006:	4619      	mov	r1, r3
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f7fc fd8b 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800800e:	e002      	b.n	8008016 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f7ff ff9e 	bl	8007f52 <HAL_UART_RxCpltCallback>
}
 8008016:	bf00      	nop
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	2b01      	cmp	r3, #1
 8008032:	d108      	bne.n	8008046 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	b29b      	uxth	r3, r3
 800803c:	4619      	mov	r1, r3
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f7fc fd70 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008044:	e002      	b.n	800804c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f7ff ff8c 	bl	8007f64 <HAL_UART_RxHalfCpltCallback>
}
 800804c:	bf00      	nop
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800805c:	2300      	movs	r3, #0
 800805e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008070:	2b00      	cmp	r3, #0
 8008072:	bf14      	ite	ne
 8008074:	2301      	movne	r3, #1
 8008076:	2300      	moveq	r3, #0
 8008078:	b2db      	uxtb	r3, r3
 800807a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b21      	cmp	r3, #33	; 0x21
 8008086:	d108      	bne.n	800809a <UART_DMAError+0x46>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d005      	beq.n	800809a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2200      	movs	r2, #0
 8008092:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008094:	68b8      	ldr	r0, [r7, #8]
 8008096:	f000 f88b 	bl	80081b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bf14      	ite	ne
 80080a8:	2301      	movne	r3, #1
 80080aa:	2300      	moveq	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b22      	cmp	r3, #34	; 0x22
 80080ba:	d108      	bne.n	80080ce <UART_DMAError+0x7a>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d005      	beq.n	80080ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2200      	movs	r2, #0
 80080c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80080c8:	68b8      	ldr	r0, [r7, #8]
 80080ca:	f000 f886 	bl	80081da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	f043 0210 	orr.w	r2, r3, #16
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080da:	68b8      	ldr	r0, [r7, #8]
 80080dc:	f7ff ff4b 	bl	8007f76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e0:	bf00      	nop
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4613      	mov	r3, r2
 80080f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	88fa      	ldrh	r2, [r7, #6]
 8008100:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2222      	movs	r2, #34	; 0x22
 800810c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008114:	4a23      	ldr	r2, [pc, #140]	; (80081a4 <UART_Start_Receive_DMA+0xbc>)
 8008116:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	4a22      	ldr	r2, [pc, #136]	; (80081a8 <UART_Start_Receive_DMA+0xc0>)
 800811e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	4a21      	ldr	r2, [pc, #132]	; (80081ac <UART_Start_Receive_DMA+0xc4>)
 8008126:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	2200      	movs	r2, #0
 800812e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008130:	f107 0308 	add.w	r3, r7, #8
 8008134:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	f7fd fa52 	bl	80055f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800814c:	2300      	movs	r3, #0
 800814e:	613b      	str	r3, [r7, #16]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	613b      	str	r3, [r7, #16]
 8008160:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008178:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	695a      	ldr	r2, [r3, #20]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f042 0201 	orr.w	r2, r2, #1
 8008188:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	695a      	ldr	r2, [r3, #20]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008198:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	08007f89 	.word	0x08007f89
 80081a8:	0800801f 	.word	0x0800801f
 80081ac:	08008055 	.word	0x08008055

080081b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80081c6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bc80      	pop	{r7}
 80081d8:	4770      	bx	lr

080081da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081f0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	695a      	ldr	r2, [r3, #20]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f022 0201 	bic.w	r2, r2, #1
 8008200:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008206:	2b01      	cmp	r3, #1
 8008208:	d107      	bne.n	800821a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68da      	ldr	r2, [r3, #12]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0210 	bic.w	r2, r2, #16
 8008218:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	bc80      	pop	{r7}
 8008230:	4770      	bx	lr

08008232 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f7ff fe92 	bl	8007f76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800825a:	b480      	push	{r7}
 800825c:	b085      	sub	sp, #20
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b21      	cmp	r3, #33	; 0x21
 800826c:	d13e      	bne.n	80082ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008276:	d114      	bne.n	80082a2 <UART_Transmit_IT+0x48>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d110      	bne.n	80082a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008294:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	1c9a      	adds	r2, r3, #2
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	621a      	str	r2, [r3, #32]
 80082a0:	e008      	b.n	80082b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	1c59      	adds	r1, r3, #1
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6211      	str	r1, [r2, #32]
 80082ac:	781a      	ldrb	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b29b      	uxth	r3, r3
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	4619      	mov	r1, r3
 80082c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10f      	bne.n	80082e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68da      	ldr	r2, [r3, #12]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	e000      	b.n	80082ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082ec:	2302      	movs	r3, #2
  }
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bc80      	pop	{r7}
 80082f6:	4770      	bx	lr

080082f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68da      	ldr	r2, [r3, #12]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800830e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2220      	movs	r2, #32
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7ff fe11 	bl	8007f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b22      	cmp	r3, #34	; 0x22
 800833a:	f040 8099 	bne.w	8008470 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008346:	d117      	bne.n	8008378 <UART_Receive_IT+0x50>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d113      	bne.n	8008378 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008358:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	b29b      	uxth	r3, r3
 8008362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008366:	b29a      	uxth	r2, r3
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	1c9a      	adds	r2, r3, #2
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	629a      	str	r2, [r3, #40]	; 0x28
 8008376:	e026      	b.n	80083c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800837e:	2300      	movs	r3, #0
 8008380:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838a:	d007      	beq.n	800839c <UART_Receive_IT+0x74>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10a      	bne.n	80083aa <UART_Receive_IT+0x82>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d106      	bne.n	80083aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	701a      	strb	r2, [r3, #0]
 80083a8:	e008      	b.n	80083bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	3b01      	subs	r3, #1
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	4619      	mov	r1, r3
 80083d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d148      	bne.n	800846c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68da      	ldr	r2, [r3, #12]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0220 	bic.w	r2, r2, #32
 80083e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68da      	ldr	r2, [r3, #12]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	695a      	ldr	r2, [r3, #20]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0201 	bic.w	r2, r2, #1
 8008408:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008416:	2b01      	cmp	r3, #1
 8008418:	d123      	bne.n	8008462 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68da      	ldr	r2, [r3, #12]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 0210 	bic.w	r2, r2, #16
 800842e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0310 	and.w	r3, r3, #16
 800843a:	2b10      	cmp	r3, #16
 800843c:	d10a      	bne.n	8008454 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7fc fb62 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
 8008460:	e002      	b.n	8008468 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff fd75 	bl	8007f52 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	e002      	b.n	8008472 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	e000      	b.n	8008472 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008470:	2302      	movs	r3, #2
  }
}
 8008472:	4618      	mov	r0, r3
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
	...

0800847c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	430a      	orrs	r2, r1
 8008498:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	689a      	ldr	r2, [r3, #8]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	431a      	orrs	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80084b6:	f023 030c 	bic.w	r3, r3, #12
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6812      	ldr	r2, [r2, #0]
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	430b      	orrs	r3, r1
 80084c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	699a      	ldr	r2, [r3, #24]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a2c      	ldr	r2, [pc, #176]	; (8008590 <UART_SetConfig+0x114>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d103      	bne.n	80084ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80084e4:	f7fe f864 	bl	80065b0 <HAL_RCC_GetPCLK2Freq>
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	e002      	b.n	80084f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80084ec:	f7fe f84c 	bl	8006588 <HAL_RCC_GetPCLK1Freq>
 80084f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	009a      	lsls	r2, r3, #2
 80084fc:	441a      	add	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	fbb2 f3f3 	udiv	r3, r2, r3
 8008508:	4a22      	ldr	r2, [pc, #136]	; (8008594 <UART_SetConfig+0x118>)
 800850a:	fba2 2303 	umull	r2, r3, r2, r3
 800850e:	095b      	lsrs	r3, r3, #5
 8008510:	0119      	lsls	r1, r3, #4
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009a      	lsls	r2, r3, #2
 800851c:	441a      	add	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	fbb2 f2f3 	udiv	r2, r2, r3
 8008528:	4b1a      	ldr	r3, [pc, #104]	; (8008594 <UART_SetConfig+0x118>)
 800852a:	fba3 0302 	umull	r0, r3, r3, r2
 800852e:	095b      	lsrs	r3, r3, #5
 8008530:	2064      	movs	r0, #100	; 0x64
 8008532:	fb00 f303 	mul.w	r3, r0, r3
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	011b      	lsls	r3, r3, #4
 800853a:	3332      	adds	r3, #50	; 0x32
 800853c:	4a15      	ldr	r2, [pc, #84]	; (8008594 <UART_SetConfig+0x118>)
 800853e:	fba2 2303 	umull	r2, r3, r2, r3
 8008542:	095b      	lsrs	r3, r3, #5
 8008544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008548:	4419      	add	r1, r3
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009a      	lsls	r2, r3, #2
 8008554:	441a      	add	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008560:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <UART_SetConfig+0x118>)
 8008562:	fba3 0302 	umull	r0, r3, r3, r2
 8008566:	095b      	lsrs	r3, r3, #5
 8008568:	2064      	movs	r0, #100	; 0x64
 800856a:	fb00 f303 	mul.w	r3, r0, r3
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	3332      	adds	r3, #50	; 0x32
 8008574:	4a07      	ldr	r2, [pc, #28]	; (8008594 <UART_SetConfig+0x118>)
 8008576:	fba2 2303 	umull	r2, r3, r2, r3
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	f003 020f 	and.w	r2, r3, #15
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	440a      	add	r2, r1
 8008586:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008588:	bf00      	nop
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	40013800 	.word	0x40013800
 8008594:	51eb851f 	.word	0x51eb851f

08008598 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800859c:	4904      	ldr	r1, [pc, #16]	; (80085b0 <MX_FATFS_Init+0x18>)
 800859e:	4805      	ldr	r0, [pc, #20]	; (80085b4 <MX_FATFS_Init+0x1c>)
 80085a0:	f000 f8b0 	bl	8008704 <FATFS_LinkDriver>
 80085a4:	4603      	mov	r3, r0
 80085a6:	461a      	mov	r2, r3
 80085a8:	4b03      	ldr	r3, [pc, #12]	; (80085b8 <MX_FATFS_Init+0x20>)
 80085aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80085ac:	bf00      	nop
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	200006a4 	.word	0x200006a4
 80085b4:	200000c4 	.word	0x200000c4
 80085b8:	200006a0 	.word	0x200006a0

080085bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_initialize(pdrv);
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fb fb61 	bl	8003c90 <SD_disk_initialize>
 80085ce:	4603      	mov	r3, r0
 80085d0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	4603      	mov	r3, r0
 80085e2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 80085e4:	79fb      	ldrb	r3, [r7, #7]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fb fc38 	bl	8003e5c <SD_disk_status>
 80085ec:	4603      	mov	r3, r0
 80085ee:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8008608:	7bf8      	ldrb	r0, [r7, #15]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	68b9      	ldr	r1, [r7, #8]
 8008610:	f7fb fc38 	bl	8003e84 <SD_disk_read>
 8008614:	4603      	mov	r3, r0
 8008616:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8008630:	7bf8      	ldrb	r0, [r7, #15]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	f7fb fc8e 	bl	8003f58 <SD_disk_write>
 800863c:	4603      	mov	r3, r0
 800863e:	b2db      	uxtb	r3, r3
//    return RES_OK;
  /* USER CODE END WRITE */
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	4603      	mov	r3, r0
 8008650:	603a      	str	r2, [r7, #0]
 8008652:	71fb      	strb	r3, [r7, #7]
 8008654:	460b      	mov	r3, r1
 8008656:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8008658:	79fb      	ldrb	r3, [r7, #7]
 800865a:	79b9      	ldrb	r1, [r7, #6]
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	4618      	mov	r0, r3
 8008660:	f7fb fcfe 	bl	8004060 <SD_disk_ioctl>
 8008664:	4603      	mov	r3, r0
 8008666:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	4613      	mov	r3, r2
 800867c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800867e:	2301      	movs	r3, #1
 8008680:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008686:	4b1e      	ldr	r3, [pc, #120]	; (8008700 <FATFS_LinkDriverEx+0x90>)
 8008688:	7a5b      	ldrb	r3, [r3, #9]
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b01      	cmp	r3, #1
 800868e:	d831      	bhi.n	80086f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008690:	4b1b      	ldr	r3, [pc, #108]	; (8008700 <FATFS_LinkDriverEx+0x90>)
 8008692:	7a5b      	ldrb	r3, [r3, #9]
 8008694:	b2db      	uxtb	r3, r3
 8008696:	461a      	mov	r2, r3
 8008698:	4b19      	ldr	r3, [pc, #100]	; (8008700 <FATFS_LinkDriverEx+0x90>)
 800869a:	2100      	movs	r1, #0
 800869c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800869e:	4b18      	ldr	r3, [pc, #96]	; (8008700 <FATFS_LinkDriverEx+0x90>)
 80086a0:	7a5b      	ldrb	r3, [r3, #9]
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	4a16      	ldr	r2, [pc, #88]	; (8008700 <FATFS_LinkDriverEx+0x90>)
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80086ae:	4b14      	ldr	r3, [pc, #80]	; (8008700 <FATFS_LinkDriverEx+0x90>)
 80086b0:	7a5b      	ldrb	r3, [r3, #9]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	461a      	mov	r2, r3
 80086b6:	4b12      	ldr	r3, [pc, #72]	; (8008700 <FATFS_LinkDriverEx+0x90>)
 80086b8:	4413      	add	r3, r2
 80086ba:	79fa      	ldrb	r2, [r7, #7]
 80086bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80086be:	4b10      	ldr	r3, [pc, #64]	; (8008700 <FATFS_LinkDriverEx+0x90>)
 80086c0:	7a5b      	ldrb	r3, [r3, #9]
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	1c5a      	adds	r2, r3, #1
 80086c6:	b2d1      	uxtb	r1, r2
 80086c8:	4a0d      	ldr	r2, [pc, #52]	; (8008700 <FATFS_LinkDriverEx+0x90>)
 80086ca:	7251      	strb	r1, [r2, #9]
 80086cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80086ce:	7dbb      	ldrb	r3, [r7, #22]
 80086d0:	3330      	adds	r3, #48	; 0x30
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	3301      	adds	r3, #1
 80086dc:	223a      	movs	r2, #58	; 0x3a
 80086de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	3302      	adds	r3, #2
 80086e4:	222f      	movs	r2, #47	; 0x2f
 80086e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	3303      	adds	r3, #3
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr
 8008700:	200006a8 	.word	0x200006a8

08008704 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800870e:	2200      	movs	r2, #0
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff ffac 	bl	8008670 <FATFS_LinkDriverEx>
 8008718:	4603      	mov	r3, r0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <__errno>:
 8008724:	4b01      	ldr	r3, [pc, #4]	; (800872c <__errno+0x8>)
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	200000d8 	.word	0x200000d8

08008730 <_fgetc_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	460c      	mov	r4, r1
 8008734:	4605      	mov	r5, r0
 8008736:	b118      	cbz	r0, 8008740 <_fgetc_r+0x10>
 8008738:	6983      	ldr	r3, [r0, #24]
 800873a:	b90b      	cbnz	r3, 8008740 <_fgetc_r+0x10>
 800873c:	f000 f898 	bl	8008870 <__sinit>
 8008740:	4b18      	ldr	r3, [pc, #96]	; (80087a4 <_fgetc_r+0x74>)
 8008742:	429c      	cmp	r4, r3
 8008744:	d11e      	bne.n	8008784 <_fgetc_r+0x54>
 8008746:	686c      	ldr	r4, [r5, #4]
 8008748:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800874a:	07d8      	lsls	r0, r3, #31
 800874c:	d405      	bmi.n	800875a <_fgetc_r+0x2a>
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	0599      	lsls	r1, r3, #22
 8008752:	d402      	bmi.n	800875a <_fgetc_r+0x2a>
 8008754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008756:	f000 fa7e 	bl	8008c56 <__retarget_lock_acquire_recursive>
 800875a:	6863      	ldr	r3, [r4, #4]
 800875c:	3b01      	subs	r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	6063      	str	r3, [r4, #4]
 8008762:	da19      	bge.n	8008798 <_fgetc_r+0x68>
 8008764:	4628      	mov	r0, r5
 8008766:	4621      	mov	r1, r4
 8008768:	f000 fc4a 	bl	8009000 <__srget_r>
 800876c:	4605      	mov	r5, r0
 800876e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008770:	07da      	lsls	r2, r3, #31
 8008772:	d405      	bmi.n	8008780 <_fgetc_r+0x50>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	059b      	lsls	r3, r3, #22
 8008778:	d402      	bmi.n	8008780 <_fgetc_r+0x50>
 800877a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800877c:	f000 fa6d 	bl	8008c5a <__retarget_lock_release_recursive>
 8008780:	4628      	mov	r0, r5
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	4b08      	ldr	r3, [pc, #32]	; (80087a8 <_fgetc_r+0x78>)
 8008786:	429c      	cmp	r4, r3
 8008788:	d101      	bne.n	800878e <_fgetc_r+0x5e>
 800878a:	68ac      	ldr	r4, [r5, #8]
 800878c:	e7dc      	b.n	8008748 <_fgetc_r+0x18>
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <_fgetc_r+0x7c>)
 8008790:	429c      	cmp	r4, r3
 8008792:	bf08      	it	eq
 8008794:	68ec      	ldreq	r4, [r5, #12]
 8008796:	e7d7      	b.n	8008748 <_fgetc_r+0x18>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	6022      	str	r2, [r4, #0]
 800879e:	781d      	ldrb	r5, [r3, #0]
 80087a0:	e7e5      	b.n	800876e <_fgetc_r+0x3e>
 80087a2:	bf00      	nop
 80087a4:	0800bb38 	.word	0x0800bb38
 80087a8:	0800bb58 	.word	0x0800bb58
 80087ac:	0800bb18 	.word	0x0800bb18

080087b0 <fgetc>:
 80087b0:	4b02      	ldr	r3, [pc, #8]	; (80087bc <fgetc+0xc>)
 80087b2:	4601      	mov	r1, r0
 80087b4:	6818      	ldr	r0, [r3, #0]
 80087b6:	f7ff bfbb 	b.w	8008730 <_fgetc_r>
 80087ba:	bf00      	nop
 80087bc:	200000d8 	.word	0x200000d8

080087c0 <std>:
 80087c0:	2300      	movs	r3, #0
 80087c2:	b510      	push	{r4, lr}
 80087c4:	4604      	mov	r4, r0
 80087c6:	e9c0 3300 	strd	r3, r3, [r0]
 80087ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087ce:	6083      	str	r3, [r0, #8]
 80087d0:	8181      	strh	r1, [r0, #12]
 80087d2:	6643      	str	r3, [r0, #100]	; 0x64
 80087d4:	81c2      	strh	r2, [r0, #14]
 80087d6:	6183      	str	r3, [r0, #24]
 80087d8:	4619      	mov	r1, r3
 80087da:	2208      	movs	r2, #8
 80087dc:	305c      	adds	r0, #92	; 0x5c
 80087de:	f000 faa3 	bl	8008d28 <memset>
 80087e2:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <std+0x38>)
 80087e4:	6224      	str	r4, [r4, #32]
 80087e6:	6263      	str	r3, [r4, #36]	; 0x24
 80087e8:	4b04      	ldr	r3, [pc, #16]	; (80087fc <std+0x3c>)
 80087ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80087ec:	4b04      	ldr	r3, [pc, #16]	; (8008800 <std+0x40>)
 80087ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087f0:	4b04      	ldr	r3, [pc, #16]	; (8008804 <std+0x44>)
 80087f2:	6323      	str	r3, [r4, #48]	; 0x30
 80087f4:	bd10      	pop	{r4, pc}
 80087f6:	bf00      	nop
 80087f8:	080090b9 	.word	0x080090b9
 80087fc:	080090df 	.word	0x080090df
 8008800:	08009117 	.word	0x08009117
 8008804:	0800913b 	.word	0x0800913b

08008808 <_cleanup_r>:
 8008808:	4901      	ldr	r1, [pc, #4]	; (8008810 <_cleanup_r+0x8>)
 800880a:	f000 b9de 	b.w	8008bca <_fwalk_reent>
 800880e:	bf00      	nop
 8008810:	0800a3b5 	.word	0x0800a3b5

08008814 <__sfmoreglue>:
 8008814:	2268      	movs	r2, #104	; 0x68
 8008816:	b570      	push	{r4, r5, r6, lr}
 8008818:	1e4d      	subs	r5, r1, #1
 800881a:	4355      	muls	r5, r2
 800881c:	460e      	mov	r6, r1
 800881e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008822:	f000 faf1 	bl	8008e08 <_malloc_r>
 8008826:	4604      	mov	r4, r0
 8008828:	b140      	cbz	r0, 800883c <__sfmoreglue+0x28>
 800882a:	2100      	movs	r1, #0
 800882c:	e9c0 1600 	strd	r1, r6, [r0]
 8008830:	300c      	adds	r0, #12
 8008832:	60a0      	str	r0, [r4, #8]
 8008834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008838:	f000 fa76 	bl	8008d28 <memset>
 800883c:	4620      	mov	r0, r4
 800883e:	bd70      	pop	{r4, r5, r6, pc}

08008840 <__sfp_lock_acquire>:
 8008840:	4801      	ldr	r0, [pc, #4]	; (8008848 <__sfp_lock_acquire+0x8>)
 8008842:	f000 ba08 	b.w	8008c56 <__retarget_lock_acquire_recursive>
 8008846:	bf00      	nop
 8008848:	200006b6 	.word	0x200006b6

0800884c <__sfp_lock_release>:
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <__sfp_lock_release+0x8>)
 800884e:	f000 ba04 	b.w	8008c5a <__retarget_lock_release_recursive>
 8008852:	bf00      	nop
 8008854:	200006b6 	.word	0x200006b6

08008858 <__sinit_lock_acquire>:
 8008858:	4801      	ldr	r0, [pc, #4]	; (8008860 <__sinit_lock_acquire+0x8>)
 800885a:	f000 b9fc 	b.w	8008c56 <__retarget_lock_acquire_recursive>
 800885e:	bf00      	nop
 8008860:	200006b7 	.word	0x200006b7

08008864 <__sinit_lock_release>:
 8008864:	4801      	ldr	r0, [pc, #4]	; (800886c <__sinit_lock_release+0x8>)
 8008866:	f000 b9f8 	b.w	8008c5a <__retarget_lock_release_recursive>
 800886a:	bf00      	nop
 800886c:	200006b7 	.word	0x200006b7

08008870 <__sinit>:
 8008870:	b510      	push	{r4, lr}
 8008872:	4604      	mov	r4, r0
 8008874:	f7ff fff0 	bl	8008858 <__sinit_lock_acquire>
 8008878:	69a3      	ldr	r3, [r4, #24]
 800887a:	b11b      	cbz	r3, 8008884 <__sinit+0x14>
 800887c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008880:	f7ff bff0 	b.w	8008864 <__sinit_lock_release>
 8008884:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008888:	6523      	str	r3, [r4, #80]	; 0x50
 800888a:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <__sinit+0x68>)
 800888c:	4a13      	ldr	r2, [pc, #76]	; (80088dc <__sinit+0x6c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	62a2      	str	r2, [r4, #40]	; 0x28
 8008892:	42a3      	cmp	r3, r4
 8008894:	bf08      	it	eq
 8008896:	2301      	moveq	r3, #1
 8008898:	4620      	mov	r0, r4
 800889a:	bf08      	it	eq
 800889c:	61a3      	streq	r3, [r4, #24]
 800889e:	f000 f81f 	bl	80088e0 <__sfp>
 80088a2:	6060      	str	r0, [r4, #4]
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 f81b 	bl	80088e0 <__sfp>
 80088aa:	60a0      	str	r0, [r4, #8]
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 f817 	bl	80088e0 <__sfp>
 80088b2:	2200      	movs	r2, #0
 80088b4:	2104      	movs	r1, #4
 80088b6:	60e0      	str	r0, [r4, #12]
 80088b8:	6860      	ldr	r0, [r4, #4]
 80088ba:	f7ff ff81 	bl	80087c0 <std>
 80088be:	2201      	movs	r2, #1
 80088c0:	2109      	movs	r1, #9
 80088c2:	68a0      	ldr	r0, [r4, #8]
 80088c4:	f7ff ff7c 	bl	80087c0 <std>
 80088c8:	2202      	movs	r2, #2
 80088ca:	2112      	movs	r1, #18
 80088cc:	68e0      	ldr	r0, [r4, #12]
 80088ce:	f7ff ff77 	bl	80087c0 <std>
 80088d2:	2301      	movs	r3, #1
 80088d4:	61a3      	str	r3, [r4, #24]
 80088d6:	e7d1      	b.n	800887c <__sinit+0xc>
 80088d8:	0800bb78 	.word	0x0800bb78
 80088dc:	08008809 	.word	0x08008809

080088e0 <__sfp>:
 80088e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e2:	4607      	mov	r7, r0
 80088e4:	f7ff ffac 	bl	8008840 <__sfp_lock_acquire>
 80088e8:	4b1e      	ldr	r3, [pc, #120]	; (8008964 <__sfp+0x84>)
 80088ea:	681e      	ldr	r6, [r3, #0]
 80088ec:	69b3      	ldr	r3, [r6, #24]
 80088ee:	b913      	cbnz	r3, 80088f6 <__sfp+0x16>
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7ff ffbd 	bl	8008870 <__sinit>
 80088f6:	3648      	adds	r6, #72	; 0x48
 80088f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	d503      	bpl.n	8008908 <__sfp+0x28>
 8008900:	6833      	ldr	r3, [r6, #0]
 8008902:	b30b      	cbz	r3, 8008948 <__sfp+0x68>
 8008904:	6836      	ldr	r6, [r6, #0]
 8008906:	e7f7      	b.n	80088f8 <__sfp+0x18>
 8008908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800890c:	b9d5      	cbnz	r5, 8008944 <__sfp+0x64>
 800890e:	4b16      	ldr	r3, [pc, #88]	; (8008968 <__sfp+0x88>)
 8008910:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008914:	60e3      	str	r3, [r4, #12]
 8008916:	6665      	str	r5, [r4, #100]	; 0x64
 8008918:	f000 f99a 	bl	8008c50 <__retarget_lock_init_recursive>
 800891c:	f7ff ff96 	bl	800884c <__sfp_lock_release>
 8008920:	2208      	movs	r2, #8
 8008922:	4629      	mov	r1, r5
 8008924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800892c:	6025      	str	r5, [r4, #0]
 800892e:	61a5      	str	r5, [r4, #24]
 8008930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008934:	f000 f9f8 	bl	8008d28 <memset>
 8008938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800893c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008940:	4620      	mov	r0, r4
 8008942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008944:	3468      	adds	r4, #104	; 0x68
 8008946:	e7d9      	b.n	80088fc <__sfp+0x1c>
 8008948:	2104      	movs	r1, #4
 800894a:	4638      	mov	r0, r7
 800894c:	f7ff ff62 	bl	8008814 <__sfmoreglue>
 8008950:	4604      	mov	r4, r0
 8008952:	6030      	str	r0, [r6, #0]
 8008954:	2800      	cmp	r0, #0
 8008956:	d1d5      	bne.n	8008904 <__sfp+0x24>
 8008958:	f7ff ff78 	bl	800884c <__sfp_lock_release>
 800895c:	230c      	movs	r3, #12
 800895e:	603b      	str	r3, [r7, #0]
 8008960:	e7ee      	b.n	8008940 <__sfp+0x60>
 8008962:	bf00      	nop
 8008964:	0800bb78 	.word	0x0800bb78
 8008968:	ffff0001 	.word	0xffff0001

0800896c <_fopen_r>:
 800896c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800896e:	460f      	mov	r7, r1
 8008970:	4611      	mov	r1, r2
 8008972:	aa01      	add	r2, sp, #4
 8008974:	4605      	mov	r5, r0
 8008976:	f001 fd6b 	bl	800a450 <__sflags>
 800897a:	4606      	mov	r6, r0
 800897c:	b918      	cbnz	r0, 8008986 <_fopen_r+0x1a>
 800897e:	2400      	movs	r4, #0
 8008980:	4620      	mov	r0, r4
 8008982:	b003      	add	sp, #12
 8008984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008986:	4628      	mov	r0, r5
 8008988:	f7ff ffaa 	bl	80088e0 <__sfp>
 800898c:	4604      	mov	r4, r0
 800898e:	2800      	cmp	r0, #0
 8008990:	d0f5      	beq.n	800897e <_fopen_r+0x12>
 8008992:	4639      	mov	r1, r7
 8008994:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8008998:	4628      	mov	r0, r5
 800899a:	9a01      	ldr	r2, [sp, #4]
 800899c:	f000 faa8 	bl	8008ef0 <_open_r>
 80089a0:	1e07      	subs	r7, r0, #0
 80089a2:	da09      	bge.n	80089b8 <_fopen_r+0x4c>
 80089a4:	2500      	movs	r5, #0
 80089a6:	f7ff ff4b 	bl	8008840 <__sfp_lock_acquire>
 80089aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ac:	81a5      	strh	r5, [r4, #12]
 80089ae:	f000 f950 	bl	8008c52 <__retarget_lock_close_recursive>
 80089b2:	f7ff ff4b 	bl	800884c <__sfp_lock_release>
 80089b6:	e7e2      	b.n	800897e <_fopen_r+0x12>
 80089b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ba:	07db      	lsls	r3, r3, #31
 80089bc:	d405      	bmi.n	80089ca <_fopen_r+0x5e>
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	0598      	lsls	r0, r3, #22
 80089c2:	d402      	bmi.n	80089ca <_fopen_r+0x5e>
 80089c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c6:	f000 f946 	bl	8008c56 <__retarget_lock_acquire_recursive>
 80089ca:	4b0e      	ldr	r3, [pc, #56]	; (8008a04 <_fopen_r+0x98>)
 80089cc:	05f1      	lsls	r1, r6, #23
 80089ce:	6263      	str	r3, [r4, #36]	; 0x24
 80089d0:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <_fopen_r+0x9c>)
 80089d2:	81e7      	strh	r7, [r4, #14]
 80089d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80089d6:	4b0d      	ldr	r3, [pc, #52]	; (8008a0c <_fopen_r+0xa0>)
 80089d8:	81a6      	strh	r6, [r4, #12]
 80089da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089dc:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <_fopen_r+0xa4>)
 80089de:	6224      	str	r4, [r4, #32]
 80089e0:	6323      	str	r3, [r4, #48]	; 0x30
 80089e2:	d505      	bpl.n	80089f0 <_fopen_r+0x84>
 80089e4:	2302      	movs	r3, #2
 80089e6:	2200      	movs	r2, #0
 80089e8:	4621      	mov	r1, r4
 80089ea:	4628      	mov	r0, r5
 80089ec:	f000 f81a 	bl	8008a24 <_fseek_r>
 80089f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f2:	07da      	lsls	r2, r3, #31
 80089f4:	d4c4      	bmi.n	8008980 <_fopen_r+0x14>
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	059b      	lsls	r3, r3, #22
 80089fa:	d4c1      	bmi.n	8008980 <_fopen_r+0x14>
 80089fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089fe:	f000 f92c 	bl	8008c5a <__retarget_lock_release_recursive>
 8008a02:	e7bd      	b.n	8008980 <_fopen_r+0x14>
 8008a04:	080090b9 	.word	0x080090b9
 8008a08:	080090df 	.word	0x080090df
 8008a0c:	08009117 	.word	0x08009117
 8008a10:	0800913b 	.word	0x0800913b

08008a14 <fopen>:
 8008a14:	4b02      	ldr	r3, [pc, #8]	; (8008a20 <fopen+0xc>)
 8008a16:	460a      	mov	r2, r1
 8008a18:	4601      	mov	r1, r0
 8008a1a:	6818      	ldr	r0, [r3, #0]
 8008a1c:	f7ff bfa6 	b.w	800896c <_fopen_r>
 8008a20:	200000d8 	.word	0x200000d8

08008a24 <_fseek_r>:
 8008a24:	f000 b800 	b.w	8008a28 <_fseeko_r>

08008a28 <_fseeko_r>:
 8008a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	4617      	mov	r7, r2
 8008a30:	461d      	mov	r5, r3
 8008a32:	4606      	mov	r6, r0
 8008a34:	b118      	cbz	r0, 8008a3e <_fseeko_r+0x16>
 8008a36:	6983      	ldr	r3, [r0, #24]
 8008a38:	b90b      	cbnz	r3, 8008a3e <_fseeko_r+0x16>
 8008a3a:	f7ff ff19 	bl	8008870 <__sinit>
 8008a3e:	4b51      	ldr	r3, [pc, #324]	; (8008b84 <_fseeko_r+0x15c>)
 8008a40:	429c      	cmp	r4, r3
 8008a42:	d122      	bne.n	8008a8a <_fseeko_r+0x62>
 8008a44:	6874      	ldr	r4, [r6, #4]
 8008a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a48:	07d9      	lsls	r1, r3, #31
 8008a4a:	d405      	bmi.n	8008a58 <_fseeko_r+0x30>
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	059a      	lsls	r2, r3, #22
 8008a50:	d402      	bmi.n	8008a58 <_fseeko_r+0x30>
 8008a52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a54:	f000 f8ff 	bl	8008c56 <__retarget_lock_acquire_recursive>
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8008a5e:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8008a62:	d103      	bne.n	8008a6c <_fseeko_r+0x44>
 8008a64:	4621      	mov	r1, r4
 8008a66:	4630      	mov	r0, r6
 8008a68:	f001 fca4 	bl	800a3b4 <_fflush_r>
 8008a6c:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8008a70:	f1b8 0f00 	cmp.w	r8, #0
 8008a74:	d113      	bne.n	8008a9e <_fseeko_r+0x76>
 8008a76:	231d      	movs	r3, #29
 8008a78:	6033      	str	r3, [r6, #0]
 8008a7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a7c:	07d9      	lsls	r1, r3, #31
 8008a7e:	d578      	bpl.n	8008b72 <_fseeko_r+0x14a>
 8008a80:	f04f 35ff 	mov.w	r5, #4294967295
 8008a84:	4628      	mov	r0, r5
 8008a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8a:	4b3f      	ldr	r3, [pc, #252]	; (8008b88 <_fseeko_r+0x160>)
 8008a8c:	429c      	cmp	r4, r3
 8008a8e:	d101      	bne.n	8008a94 <_fseeko_r+0x6c>
 8008a90:	68b4      	ldr	r4, [r6, #8]
 8008a92:	e7d8      	b.n	8008a46 <_fseeko_r+0x1e>
 8008a94:	4b3d      	ldr	r3, [pc, #244]	; (8008b8c <_fseeko_r+0x164>)
 8008a96:	429c      	cmp	r4, r3
 8008a98:	bf08      	it	eq
 8008a9a:	68f4      	ldreq	r4, [r6, #12]
 8008a9c:	e7d3      	b.n	8008a46 <_fseeko_r+0x1e>
 8008a9e:	2d01      	cmp	r5, #1
 8008aa0:	d036      	beq.n	8008b10 <_fseeko_r+0xe8>
 8008aa2:	f035 0302 	bics.w	r3, r5, #2
 8008aa6:	d162      	bne.n	8008b6e <_fseeko_r+0x146>
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	b91b      	cbnz	r3, 8008ab4 <_fseeko_r+0x8c>
 8008aac:	4621      	mov	r1, r4
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f000 f8fa 	bl	8008ca8 <__smakebuf_r>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f001 fc7c 	bl	800a3b4 <_fflush_r>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d1dc      	bne.n	8008a7a <_fseeko_r+0x52>
 8008ac0:	462b      	mov	r3, r5
 8008ac2:	463a      	mov	r2, r7
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	6a21      	ldr	r1, [r4, #32]
 8008ac8:	47c0      	blx	r8
 8008aca:	3001      	adds	r0, #1
 8008acc:	d0d5      	beq.n	8008a7a <_fseeko_r+0x52>
 8008ace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ad0:	b141      	cbz	r1, 8008ae4 <_fseeko_r+0xbc>
 8008ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ad6:	4299      	cmp	r1, r3
 8008ad8:	d002      	beq.n	8008ae0 <_fseeko_r+0xb8>
 8008ada:	4630      	mov	r0, r6
 8008adc:	f000 f92c 	bl	8008d38 <_free_r>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	6363      	str	r3, [r4, #52]	; 0x34
 8008ae4:	2600      	movs	r6, #0
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	2208      	movs	r2, #8
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	4631      	mov	r1, r6
 8008af0:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8008af4:	6066      	str	r6, [r4, #4]
 8008af6:	81a3      	strh	r3, [r4, #12]
 8008af8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008afc:	f000 f914 	bl	8008d28 <memset>
 8008b00:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008b02:	f015 0501 	ands.w	r5, r5, #1
 8008b06:	d13b      	bne.n	8008b80 <_fseeko_r+0x158>
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	059b      	lsls	r3, r3, #22
 8008b0c:	d4ba      	bmi.n	8008a84 <_fseeko_r+0x5c>
 8008b0e:	e021      	b.n	8008b54 <_fseeko_r+0x12c>
 8008b10:	4621      	mov	r1, r4
 8008b12:	4630      	mov	r0, r6
 8008b14:	f001 fc4e 	bl	800a3b4 <_fflush_r>
 8008b18:	89a2      	ldrh	r2, [r4, #12]
 8008b1a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b1e:	d00c      	beq.n	8008b3a <_fseeko_r+0x112>
 8008b20:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	075a      	lsls	r2, r3, #29
 8008b26:	d519      	bpl.n	8008b5c <_fseeko_r+0x134>
 8008b28:	6863      	ldr	r3, [r4, #4]
 8008b2a:	1aed      	subs	r5, r5, r3
 8008b2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b2e:	b10b      	cbz	r3, 8008b34 <_fseeko_r+0x10c>
 8008b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b32:	1aed      	subs	r5, r5, r3
 8008b34:	442f      	add	r7, r5
 8008b36:	2500      	movs	r5, #0
 8008b38:	e7b6      	b.n	8008aa8 <_fseeko_r+0x80>
 8008b3a:	462b      	mov	r3, r5
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	6a21      	ldr	r1, [r4, #32]
 8008b40:	47c0      	blx	r8
 8008b42:	1c43      	adds	r3, r0, #1
 8008b44:	4605      	mov	r5, r0
 8008b46:	d1ec      	bne.n	8008b22 <_fseeko_r+0xfa>
 8008b48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b4a:	07d8      	lsls	r0, r3, #31
 8008b4c:	d498      	bmi.n	8008a80 <_fseeko_r+0x58>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	0599      	lsls	r1, r3, #22
 8008b52:	d495      	bmi.n	8008a80 <_fseeko_r+0x58>
 8008b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b56:	f000 f880 	bl	8008c5a <__retarget_lock_release_recursive>
 8008b5a:	e793      	b.n	8008a84 <_fseeko_r+0x5c>
 8008b5c:	0718      	lsls	r0, r3, #28
 8008b5e:	d5e9      	bpl.n	8008b34 <_fseeko_r+0x10c>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	6922      	ldr	r2, [r4, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d0e5      	beq.n	8008b34 <_fseeko_r+0x10c>
 8008b68:	1a9b      	subs	r3, r3, r2
 8008b6a:	441d      	add	r5, r3
 8008b6c:	e7e2      	b.n	8008b34 <_fseeko_r+0x10c>
 8008b6e:	2316      	movs	r3, #22
 8008b70:	e782      	b.n	8008a78 <_fseeko_r+0x50>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	059a      	lsls	r2, r3, #22
 8008b76:	d483      	bmi.n	8008a80 <_fseeko_r+0x58>
 8008b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b7a:	f000 f86e 	bl	8008c5a <__retarget_lock_release_recursive>
 8008b7e:	e77f      	b.n	8008a80 <_fseeko_r+0x58>
 8008b80:	4635      	mov	r5, r6
 8008b82:	e77f      	b.n	8008a84 <_fseeko_r+0x5c>
 8008b84:	0800bb38 	.word	0x0800bb38
 8008b88:	0800bb58 	.word	0x0800bb58
 8008b8c:	0800bb18 	.word	0x0800bb18

08008b90 <_fwalk>:
 8008b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b94:	460f      	mov	r7, r1
 8008b96:	2600      	movs	r6, #0
 8008b98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b9c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8008ba0:	f1b8 0801 	subs.w	r8, r8, #1
 8008ba4:	d505      	bpl.n	8008bb2 <_fwalk+0x22>
 8008ba6:	6824      	ldr	r4, [r4, #0]
 8008ba8:	2c00      	cmp	r4, #0
 8008baa:	d1f7      	bne.n	8008b9c <_fwalk+0xc>
 8008bac:	4630      	mov	r0, r6
 8008bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb2:	89ab      	ldrh	r3, [r5, #12]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d906      	bls.n	8008bc6 <_fwalk+0x36>
 8008bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	d002      	beq.n	8008bc6 <_fwalk+0x36>
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	47b8      	blx	r7
 8008bc4:	4306      	orrs	r6, r0
 8008bc6:	3568      	adds	r5, #104	; 0x68
 8008bc8:	e7ea      	b.n	8008ba0 <_fwalk+0x10>

08008bca <_fwalk_reent>:
 8008bca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bce:	4606      	mov	r6, r0
 8008bd0:	4688      	mov	r8, r1
 8008bd2:	2700      	movs	r7, #0
 8008bd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8008be0:	d505      	bpl.n	8008bee <_fwalk_reent+0x24>
 8008be2:	6824      	ldr	r4, [r4, #0]
 8008be4:	2c00      	cmp	r4, #0
 8008be6:	d1f7      	bne.n	8008bd8 <_fwalk_reent+0xe>
 8008be8:	4638      	mov	r0, r7
 8008bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bee:	89ab      	ldrh	r3, [r5, #12]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d907      	bls.n	8008c04 <_fwalk_reent+0x3a>
 8008bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	d003      	beq.n	8008c04 <_fwalk_reent+0x3a>
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4630      	mov	r0, r6
 8008c00:	47c0      	blx	r8
 8008c02:	4307      	orrs	r7, r0
 8008c04:	3568      	adds	r5, #104	; 0x68
 8008c06:	e7e9      	b.n	8008bdc <_fwalk_reent+0x12>

08008c08 <__libc_init_array>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	2600      	movs	r6, #0
 8008c0c:	4d0c      	ldr	r5, [pc, #48]	; (8008c40 <__libc_init_array+0x38>)
 8008c0e:	4c0d      	ldr	r4, [pc, #52]	; (8008c44 <__libc_init_array+0x3c>)
 8008c10:	1b64      	subs	r4, r4, r5
 8008c12:	10a4      	asrs	r4, r4, #2
 8008c14:	42a6      	cmp	r6, r4
 8008c16:	d109      	bne.n	8008c2c <__libc_init_array+0x24>
 8008c18:	f002 fdb2 	bl	800b780 <_init>
 8008c1c:	2600      	movs	r6, #0
 8008c1e:	4d0a      	ldr	r5, [pc, #40]	; (8008c48 <__libc_init_array+0x40>)
 8008c20:	4c0a      	ldr	r4, [pc, #40]	; (8008c4c <__libc_init_array+0x44>)
 8008c22:	1b64      	subs	r4, r4, r5
 8008c24:	10a4      	asrs	r4, r4, #2
 8008c26:	42a6      	cmp	r6, r4
 8008c28:	d105      	bne.n	8008c36 <__libc_init_array+0x2e>
 8008c2a:	bd70      	pop	{r4, r5, r6, pc}
 8008c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c30:	4798      	blx	r3
 8008c32:	3601      	adds	r6, #1
 8008c34:	e7ee      	b.n	8008c14 <__libc_init_array+0xc>
 8008c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3a:	4798      	blx	r3
 8008c3c:	3601      	adds	r6, #1
 8008c3e:	e7f2      	b.n	8008c26 <__libc_init_array+0x1e>
 8008c40:	0800bfe8 	.word	0x0800bfe8
 8008c44:	0800bfe8 	.word	0x0800bfe8
 8008c48:	0800bfe8 	.word	0x0800bfe8
 8008c4c:	0800bfec 	.word	0x0800bfec

08008c50 <__retarget_lock_init_recursive>:
 8008c50:	4770      	bx	lr

08008c52 <__retarget_lock_close_recursive>:
 8008c52:	4770      	bx	lr

08008c54 <__retarget_lock_acquire>:
 8008c54:	4770      	bx	lr

08008c56 <__retarget_lock_acquire_recursive>:
 8008c56:	4770      	bx	lr

08008c58 <__retarget_lock_release>:
 8008c58:	4770      	bx	lr

08008c5a <__retarget_lock_release_recursive>:
 8008c5a:	4770      	bx	lr

08008c5c <__swhatbuf_r>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	460e      	mov	r6, r1
 8008c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c64:	4614      	mov	r4, r2
 8008c66:	2900      	cmp	r1, #0
 8008c68:	461d      	mov	r5, r3
 8008c6a:	b096      	sub	sp, #88	; 0x58
 8008c6c:	da08      	bge.n	8008c80 <__swhatbuf_r+0x24>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c74:	602a      	str	r2, [r5, #0]
 8008c76:	061a      	lsls	r2, r3, #24
 8008c78:	d410      	bmi.n	8008c9c <__swhatbuf_r+0x40>
 8008c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c7e:	e00e      	b.n	8008c9e <__swhatbuf_r+0x42>
 8008c80:	466a      	mov	r2, sp
 8008c82:	f001 fc1b 	bl	800a4bc <_fstat_r>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	dbf1      	blt.n	8008c6e <__swhatbuf_r+0x12>
 8008c8a:	9a01      	ldr	r2, [sp, #4]
 8008c8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c94:	425a      	negs	r2, r3
 8008c96:	415a      	adcs	r2, r3
 8008c98:	602a      	str	r2, [r5, #0]
 8008c9a:	e7ee      	b.n	8008c7a <__swhatbuf_r+0x1e>
 8008c9c:	2340      	movs	r3, #64	; 0x40
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	b016      	add	sp, #88	; 0x58
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ca8 <__smakebuf_r>:
 8008ca8:	898b      	ldrh	r3, [r1, #12]
 8008caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cac:	079d      	lsls	r5, r3, #30
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	d507      	bpl.n	8008cc4 <__smakebuf_r+0x1c>
 8008cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	6163      	str	r3, [r4, #20]
 8008cc0:	b002      	add	sp, #8
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	466a      	mov	r2, sp
 8008cc6:	ab01      	add	r3, sp, #4
 8008cc8:	f7ff ffc8 	bl	8008c5c <__swhatbuf_r>
 8008ccc:	9900      	ldr	r1, [sp, #0]
 8008cce:	4605      	mov	r5, r0
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f000 f899 	bl	8008e08 <_malloc_r>
 8008cd6:	b948      	cbnz	r0, 8008cec <__smakebuf_r+0x44>
 8008cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cdc:	059a      	lsls	r2, r3, #22
 8008cde:	d4ef      	bmi.n	8008cc0 <__smakebuf_r+0x18>
 8008ce0:	f023 0303 	bic.w	r3, r3, #3
 8008ce4:	f043 0302 	orr.w	r3, r3, #2
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	e7e3      	b.n	8008cb4 <__smakebuf_r+0xc>
 8008cec:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <__smakebuf_r+0x7c>)
 8008cee:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	6020      	str	r0, [r4, #0]
 8008cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	9b00      	ldr	r3, [sp, #0]
 8008cfc:	6120      	str	r0, [r4, #16]
 8008cfe:	6163      	str	r3, [r4, #20]
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	b15b      	cbz	r3, 8008d1c <__smakebuf_r+0x74>
 8008d04:	4630      	mov	r0, r6
 8008d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d0a:	f001 fc31 	bl	800a570 <_isatty_r>
 8008d0e:	b128      	cbz	r0, 8008d1c <__smakebuf_r+0x74>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f023 0303 	bic.w	r3, r3, #3
 8008d16:	f043 0301 	orr.w	r3, r3, #1
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	89a0      	ldrh	r0, [r4, #12]
 8008d1e:	4305      	orrs	r5, r0
 8008d20:	81a5      	strh	r5, [r4, #12]
 8008d22:	e7cd      	b.n	8008cc0 <__smakebuf_r+0x18>
 8008d24:	08008809 	.word	0x08008809

08008d28 <memset>:
 8008d28:	4603      	mov	r3, r0
 8008d2a:	4402      	add	r2, r0
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d100      	bne.n	8008d32 <memset+0xa>
 8008d30:	4770      	bx	lr
 8008d32:	f803 1b01 	strb.w	r1, [r3], #1
 8008d36:	e7f9      	b.n	8008d2c <memset+0x4>

08008d38 <_free_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	d040      	beq.n	8008dc2 <_free_r+0x8a>
 8008d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d44:	1f0c      	subs	r4, r1, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bfb8      	it	lt
 8008d4a:	18e4      	addlt	r4, r4, r3
 8008d4c:	f001 fc4c 	bl	800a5e8 <__malloc_lock>
 8008d50:	4a1c      	ldr	r2, [pc, #112]	; (8008dc4 <_free_r+0x8c>)
 8008d52:	6813      	ldr	r3, [r2, #0]
 8008d54:	b933      	cbnz	r3, 8008d64 <_free_r+0x2c>
 8008d56:	6063      	str	r3, [r4, #4]
 8008d58:	6014      	str	r4, [r2, #0]
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d60:	f001 bc48 	b.w	800a5f4 <__malloc_unlock>
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d908      	bls.n	8008d7a <_free_r+0x42>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	1821      	adds	r1, r4, r0
 8008d6c:	428b      	cmp	r3, r1
 8008d6e:	bf01      	itttt	eq
 8008d70:	6819      	ldreq	r1, [r3, #0]
 8008d72:	685b      	ldreq	r3, [r3, #4]
 8008d74:	1809      	addeq	r1, r1, r0
 8008d76:	6021      	streq	r1, [r4, #0]
 8008d78:	e7ed      	b.n	8008d56 <_free_r+0x1e>
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	b10b      	cbz	r3, 8008d84 <_free_r+0x4c>
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d9fa      	bls.n	8008d7a <_free_r+0x42>
 8008d84:	6811      	ldr	r1, [r2, #0]
 8008d86:	1850      	adds	r0, r2, r1
 8008d88:	42a0      	cmp	r0, r4
 8008d8a:	d10b      	bne.n	8008da4 <_free_r+0x6c>
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	4401      	add	r1, r0
 8008d90:	1850      	adds	r0, r2, r1
 8008d92:	4283      	cmp	r3, r0
 8008d94:	6011      	str	r1, [r2, #0]
 8008d96:	d1e0      	bne.n	8008d5a <_free_r+0x22>
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	4401      	add	r1, r0
 8008d9e:	6011      	str	r1, [r2, #0]
 8008da0:	6053      	str	r3, [r2, #4]
 8008da2:	e7da      	b.n	8008d5a <_free_r+0x22>
 8008da4:	d902      	bls.n	8008dac <_free_r+0x74>
 8008da6:	230c      	movs	r3, #12
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	e7d6      	b.n	8008d5a <_free_r+0x22>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	1821      	adds	r1, r4, r0
 8008db0:	428b      	cmp	r3, r1
 8008db2:	bf01      	itttt	eq
 8008db4:	6819      	ldreq	r1, [r3, #0]
 8008db6:	685b      	ldreq	r3, [r3, #4]
 8008db8:	1809      	addeq	r1, r1, r0
 8008dba:	6021      	streq	r1, [r4, #0]
 8008dbc:	6063      	str	r3, [r4, #4]
 8008dbe:	6054      	str	r4, [r2, #4]
 8008dc0:	e7cb      	b.n	8008d5a <_free_r+0x22>
 8008dc2:	bd38      	pop	{r3, r4, r5, pc}
 8008dc4:	200006bc 	.word	0x200006bc

08008dc8 <sbrk_aligned>:
 8008dc8:	b570      	push	{r4, r5, r6, lr}
 8008dca:	4e0e      	ldr	r6, [pc, #56]	; (8008e04 <sbrk_aligned+0x3c>)
 8008dcc:	460c      	mov	r4, r1
 8008dce:	6831      	ldr	r1, [r6, #0]
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	b911      	cbnz	r1, 8008dda <sbrk_aligned+0x12>
 8008dd4:	f000 f940 	bl	8009058 <_sbrk_r>
 8008dd8:	6030      	str	r0, [r6, #0]
 8008dda:	4621      	mov	r1, r4
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f000 f93b 	bl	8009058 <_sbrk_r>
 8008de2:	1c43      	adds	r3, r0, #1
 8008de4:	d00a      	beq.n	8008dfc <sbrk_aligned+0x34>
 8008de6:	1cc4      	adds	r4, r0, #3
 8008de8:	f024 0403 	bic.w	r4, r4, #3
 8008dec:	42a0      	cmp	r0, r4
 8008dee:	d007      	beq.n	8008e00 <sbrk_aligned+0x38>
 8008df0:	1a21      	subs	r1, r4, r0
 8008df2:	4628      	mov	r0, r5
 8008df4:	f000 f930 	bl	8009058 <_sbrk_r>
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d101      	bne.n	8008e00 <sbrk_aligned+0x38>
 8008dfc:	f04f 34ff 	mov.w	r4, #4294967295
 8008e00:	4620      	mov	r0, r4
 8008e02:	bd70      	pop	{r4, r5, r6, pc}
 8008e04:	200006c0 	.word	0x200006c0

08008e08 <_malloc_r>:
 8008e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0c:	1ccd      	adds	r5, r1, #3
 8008e0e:	f025 0503 	bic.w	r5, r5, #3
 8008e12:	3508      	adds	r5, #8
 8008e14:	2d0c      	cmp	r5, #12
 8008e16:	bf38      	it	cc
 8008e18:	250c      	movcc	r5, #12
 8008e1a:	2d00      	cmp	r5, #0
 8008e1c:	4607      	mov	r7, r0
 8008e1e:	db01      	blt.n	8008e24 <_malloc_r+0x1c>
 8008e20:	42a9      	cmp	r1, r5
 8008e22:	d905      	bls.n	8008e30 <_malloc_r+0x28>
 8008e24:	230c      	movs	r3, #12
 8008e26:	2600      	movs	r6, #0
 8008e28:	603b      	str	r3, [r7, #0]
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e30:	4e2e      	ldr	r6, [pc, #184]	; (8008eec <_malloc_r+0xe4>)
 8008e32:	f001 fbd9 	bl	800a5e8 <__malloc_lock>
 8008e36:	6833      	ldr	r3, [r6, #0]
 8008e38:	461c      	mov	r4, r3
 8008e3a:	bb34      	cbnz	r4, 8008e8a <_malloc_r+0x82>
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	4638      	mov	r0, r7
 8008e40:	f7ff ffc2 	bl	8008dc8 <sbrk_aligned>
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	4604      	mov	r4, r0
 8008e48:	d14d      	bne.n	8008ee6 <_malloc_r+0xde>
 8008e4a:	6834      	ldr	r4, [r6, #0]
 8008e4c:	4626      	mov	r6, r4
 8008e4e:	2e00      	cmp	r6, #0
 8008e50:	d140      	bne.n	8008ed4 <_malloc_r+0xcc>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	4631      	mov	r1, r6
 8008e56:	4638      	mov	r0, r7
 8008e58:	eb04 0803 	add.w	r8, r4, r3
 8008e5c:	f000 f8fc 	bl	8009058 <_sbrk_r>
 8008e60:	4580      	cmp	r8, r0
 8008e62:	d13a      	bne.n	8008eda <_malloc_r+0xd2>
 8008e64:	6821      	ldr	r1, [r4, #0]
 8008e66:	3503      	adds	r5, #3
 8008e68:	1a6d      	subs	r5, r5, r1
 8008e6a:	f025 0503 	bic.w	r5, r5, #3
 8008e6e:	3508      	adds	r5, #8
 8008e70:	2d0c      	cmp	r5, #12
 8008e72:	bf38      	it	cc
 8008e74:	250c      	movcc	r5, #12
 8008e76:	4638      	mov	r0, r7
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7ff ffa5 	bl	8008dc8 <sbrk_aligned>
 8008e7e:	3001      	adds	r0, #1
 8008e80:	d02b      	beq.n	8008eda <_malloc_r+0xd2>
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	442b      	add	r3, r5
 8008e86:	6023      	str	r3, [r4, #0]
 8008e88:	e00e      	b.n	8008ea8 <_malloc_r+0xa0>
 8008e8a:	6822      	ldr	r2, [r4, #0]
 8008e8c:	1b52      	subs	r2, r2, r5
 8008e8e:	d41e      	bmi.n	8008ece <_malloc_r+0xc6>
 8008e90:	2a0b      	cmp	r2, #11
 8008e92:	d916      	bls.n	8008ec2 <_malloc_r+0xba>
 8008e94:	1961      	adds	r1, r4, r5
 8008e96:	42a3      	cmp	r3, r4
 8008e98:	6025      	str	r5, [r4, #0]
 8008e9a:	bf18      	it	ne
 8008e9c:	6059      	strne	r1, [r3, #4]
 8008e9e:	6863      	ldr	r3, [r4, #4]
 8008ea0:	bf08      	it	eq
 8008ea2:	6031      	streq	r1, [r6, #0]
 8008ea4:	5162      	str	r2, [r4, r5]
 8008ea6:	604b      	str	r3, [r1, #4]
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	f104 060b 	add.w	r6, r4, #11
 8008eae:	f001 fba1 	bl	800a5f4 <__malloc_unlock>
 8008eb2:	f026 0607 	bic.w	r6, r6, #7
 8008eb6:	1d23      	adds	r3, r4, #4
 8008eb8:	1af2      	subs	r2, r6, r3
 8008eba:	d0b6      	beq.n	8008e2a <_malloc_r+0x22>
 8008ebc:	1b9b      	subs	r3, r3, r6
 8008ebe:	50a3      	str	r3, [r4, r2]
 8008ec0:	e7b3      	b.n	8008e2a <_malloc_r+0x22>
 8008ec2:	6862      	ldr	r2, [r4, #4]
 8008ec4:	42a3      	cmp	r3, r4
 8008ec6:	bf0c      	ite	eq
 8008ec8:	6032      	streq	r2, [r6, #0]
 8008eca:	605a      	strne	r2, [r3, #4]
 8008ecc:	e7ec      	b.n	8008ea8 <_malloc_r+0xa0>
 8008ece:	4623      	mov	r3, r4
 8008ed0:	6864      	ldr	r4, [r4, #4]
 8008ed2:	e7b2      	b.n	8008e3a <_malloc_r+0x32>
 8008ed4:	4634      	mov	r4, r6
 8008ed6:	6876      	ldr	r6, [r6, #4]
 8008ed8:	e7b9      	b.n	8008e4e <_malloc_r+0x46>
 8008eda:	230c      	movs	r3, #12
 8008edc:	4638      	mov	r0, r7
 8008ede:	603b      	str	r3, [r7, #0]
 8008ee0:	f001 fb88 	bl	800a5f4 <__malloc_unlock>
 8008ee4:	e7a1      	b.n	8008e2a <_malloc_r+0x22>
 8008ee6:	6025      	str	r5, [r4, #0]
 8008ee8:	e7de      	b.n	8008ea8 <_malloc_r+0xa0>
 8008eea:	bf00      	nop
 8008eec:	200006bc 	.word	0x200006bc

08008ef0 <_open_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	2200      	movs	r2, #0
 8008efa:	4d05      	ldr	r5, [pc, #20]	; (8008f10 <_open_r+0x20>)
 8008efc:	602a      	str	r2, [r5, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	f7fc f919 	bl	8005136 <_open>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_open_r+0x1e>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_open_r+0x1e>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	200006c4 	.word	0x200006c4

08008f14 <_puts_r>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	460e      	mov	r6, r1
 8008f18:	4605      	mov	r5, r0
 8008f1a:	b118      	cbz	r0, 8008f24 <_puts_r+0x10>
 8008f1c:	6983      	ldr	r3, [r0, #24]
 8008f1e:	b90b      	cbnz	r3, 8008f24 <_puts_r+0x10>
 8008f20:	f7ff fca6 	bl	8008870 <__sinit>
 8008f24:	69ab      	ldr	r3, [r5, #24]
 8008f26:	68ac      	ldr	r4, [r5, #8]
 8008f28:	b913      	cbnz	r3, 8008f30 <_puts_r+0x1c>
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f7ff fca0 	bl	8008870 <__sinit>
 8008f30:	4b2c      	ldr	r3, [pc, #176]	; (8008fe4 <_puts_r+0xd0>)
 8008f32:	429c      	cmp	r4, r3
 8008f34:	d120      	bne.n	8008f78 <_puts_r+0x64>
 8008f36:	686c      	ldr	r4, [r5, #4]
 8008f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f3a:	07db      	lsls	r3, r3, #31
 8008f3c:	d405      	bmi.n	8008f4a <_puts_r+0x36>
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	0598      	lsls	r0, r3, #22
 8008f42:	d402      	bmi.n	8008f4a <_puts_r+0x36>
 8008f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f46:	f7ff fe86 	bl	8008c56 <__retarget_lock_acquire_recursive>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	0719      	lsls	r1, r3, #28
 8008f4e:	d51d      	bpl.n	8008f8c <_puts_r+0x78>
 8008f50:	6923      	ldr	r3, [r4, #16]
 8008f52:	b1db      	cbz	r3, 8008f8c <_puts_r+0x78>
 8008f54:	3e01      	subs	r6, #1
 8008f56:	68a3      	ldr	r3, [r4, #8]
 8008f58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	60a3      	str	r3, [r4, #8]
 8008f60:	bb39      	cbnz	r1, 8008fb2 <_puts_r+0x9e>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da38      	bge.n	8008fd8 <_puts_r+0xc4>
 8008f66:	4622      	mov	r2, r4
 8008f68:	210a      	movs	r1, #10
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f001 f8ba 	bl	800a0e4 <__swbuf_r>
 8008f70:	3001      	adds	r0, #1
 8008f72:	d011      	beq.n	8008f98 <_puts_r+0x84>
 8008f74:	250a      	movs	r5, #10
 8008f76:	e011      	b.n	8008f9c <_puts_r+0x88>
 8008f78:	4b1b      	ldr	r3, [pc, #108]	; (8008fe8 <_puts_r+0xd4>)
 8008f7a:	429c      	cmp	r4, r3
 8008f7c:	d101      	bne.n	8008f82 <_puts_r+0x6e>
 8008f7e:	68ac      	ldr	r4, [r5, #8]
 8008f80:	e7da      	b.n	8008f38 <_puts_r+0x24>
 8008f82:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <_puts_r+0xd8>)
 8008f84:	429c      	cmp	r4, r3
 8008f86:	bf08      	it	eq
 8008f88:	68ec      	ldreq	r4, [r5, #12]
 8008f8a:	e7d5      	b.n	8008f38 <_puts_r+0x24>
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f001 f90c 	bl	800a1ac <__swsetup_r>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d0dd      	beq.n	8008f54 <_puts_r+0x40>
 8008f98:	f04f 35ff 	mov.w	r5, #4294967295
 8008f9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f9e:	07da      	lsls	r2, r3, #31
 8008fa0:	d405      	bmi.n	8008fae <_puts_r+0x9a>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	059b      	lsls	r3, r3, #22
 8008fa6:	d402      	bmi.n	8008fae <_puts_r+0x9a>
 8008fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008faa:	f7ff fe56 	bl	8008c5a <__retarget_lock_release_recursive>
 8008fae:	4628      	mov	r0, r5
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	da04      	bge.n	8008fc0 <_puts_r+0xac>
 8008fb6:	69a2      	ldr	r2, [r4, #24]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	dc06      	bgt.n	8008fca <_puts_r+0xb6>
 8008fbc:	290a      	cmp	r1, #10
 8008fbe:	d004      	beq.n	8008fca <_puts_r+0xb6>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	6022      	str	r2, [r4, #0]
 8008fc6:	7019      	strb	r1, [r3, #0]
 8008fc8:	e7c5      	b.n	8008f56 <_puts_r+0x42>
 8008fca:	4622      	mov	r2, r4
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f001 f889 	bl	800a0e4 <__swbuf_r>
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	d1bf      	bne.n	8008f56 <_puts_r+0x42>
 8008fd6:	e7df      	b.n	8008f98 <_puts_r+0x84>
 8008fd8:	250a      	movs	r5, #10
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	6022      	str	r2, [r4, #0]
 8008fe0:	701d      	strb	r5, [r3, #0]
 8008fe2:	e7db      	b.n	8008f9c <_puts_r+0x88>
 8008fe4:	0800bb38 	.word	0x0800bb38
 8008fe8:	0800bb58 	.word	0x0800bb58
 8008fec:	0800bb18 	.word	0x0800bb18

08008ff0 <puts>:
 8008ff0:	4b02      	ldr	r3, [pc, #8]	; (8008ffc <puts+0xc>)
 8008ff2:	4601      	mov	r1, r0
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	f7ff bf8d 	b.w	8008f14 <_puts_r>
 8008ffa:	bf00      	nop
 8008ffc:	200000d8 	.word	0x200000d8

08009000 <__srget_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	460c      	mov	r4, r1
 8009004:	4605      	mov	r5, r0
 8009006:	b118      	cbz	r0, 8009010 <__srget_r+0x10>
 8009008:	6983      	ldr	r3, [r0, #24]
 800900a:	b90b      	cbnz	r3, 8009010 <__srget_r+0x10>
 800900c:	f7ff fc30 	bl	8008870 <__sinit>
 8009010:	4b0e      	ldr	r3, [pc, #56]	; (800904c <__srget_r+0x4c>)
 8009012:	429c      	cmp	r4, r3
 8009014:	d10d      	bne.n	8009032 <__srget_r+0x32>
 8009016:	686c      	ldr	r4, [r5, #4]
 8009018:	4621      	mov	r1, r4
 800901a:	4628      	mov	r0, r5
 800901c:	f001 fdfe 	bl	800ac1c <__srefill_r>
 8009020:	b988      	cbnz	r0, 8009046 <__srget_r+0x46>
 8009022:	6863      	ldr	r3, [r4, #4]
 8009024:	3b01      	subs	r3, #1
 8009026:	6063      	str	r3, [r4, #4]
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	6022      	str	r2, [r4, #0]
 800902e:	7818      	ldrb	r0, [r3, #0]
 8009030:	bd38      	pop	{r3, r4, r5, pc}
 8009032:	4b07      	ldr	r3, [pc, #28]	; (8009050 <__srget_r+0x50>)
 8009034:	429c      	cmp	r4, r3
 8009036:	d101      	bne.n	800903c <__srget_r+0x3c>
 8009038:	68ac      	ldr	r4, [r5, #8]
 800903a:	e7ed      	b.n	8009018 <__srget_r+0x18>
 800903c:	4b05      	ldr	r3, [pc, #20]	; (8009054 <__srget_r+0x54>)
 800903e:	429c      	cmp	r4, r3
 8009040:	bf08      	it	eq
 8009042:	68ec      	ldreq	r4, [r5, #12]
 8009044:	e7e8      	b.n	8009018 <__srget_r+0x18>
 8009046:	f04f 30ff 	mov.w	r0, #4294967295
 800904a:	e7f1      	b.n	8009030 <__srget_r+0x30>
 800904c:	0800bb38 	.word	0x0800bb38
 8009050:	0800bb58 	.word	0x0800bb58
 8009054:	0800bb18 	.word	0x0800bb18

08009058 <_sbrk_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	2300      	movs	r3, #0
 800905c:	4d05      	ldr	r5, [pc, #20]	; (8009074 <_sbrk_r+0x1c>)
 800905e:	4604      	mov	r4, r0
 8009060:	4608      	mov	r0, r1
 8009062:	602b      	str	r3, [r5, #0]
 8009064:	f7fc f874 	bl	8005150 <_sbrk>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d102      	bne.n	8009072 <_sbrk_r+0x1a>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	b103      	cbz	r3, 8009072 <_sbrk_r+0x1a>
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	200006c4 	.word	0x200006c4

08009078 <siprintf>:
 8009078:	b40e      	push	{r1, r2, r3}
 800907a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800907e:	b500      	push	{lr}
 8009080:	b09c      	sub	sp, #112	; 0x70
 8009082:	ab1d      	add	r3, sp, #116	; 0x74
 8009084:	9002      	str	r0, [sp, #8]
 8009086:	9006      	str	r0, [sp, #24]
 8009088:	9107      	str	r1, [sp, #28]
 800908a:	9104      	str	r1, [sp, #16]
 800908c:	4808      	ldr	r0, [pc, #32]	; (80090b0 <siprintf+0x38>)
 800908e:	4909      	ldr	r1, [pc, #36]	; (80090b4 <siprintf+0x3c>)
 8009090:	f853 2b04 	ldr.w	r2, [r3], #4
 8009094:	9105      	str	r1, [sp, #20]
 8009096:	6800      	ldr	r0, [r0, #0]
 8009098:	a902      	add	r1, sp, #8
 800909a:	9301      	str	r3, [sp, #4]
 800909c:	f001 fb0c 	bl	800a6b8 <_svfiprintf_r>
 80090a0:	2200      	movs	r2, #0
 80090a2:	9b02      	ldr	r3, [sp, #8]
 80090a4:	701a      	strb	r2, [r3, #0]
 80090a6:	b01c      	add	sp, #112	; 0x70
 80090a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090ac:	b003      	add	sp, #12
 80090ae:	4770      	bx	lr
 80090b0:	200000d8 	.word	0x200000d8
 80090b4:	ffff0208 	.word	0xffff0208

080090b8 <__sread>:
 80090b8:	b510      	push	{r4, lr}
 80090ba:	460c      	mov	r4, r1
 80090bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c0:	f001 fd90 	bl	800abe4 <_read_r>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	bfab      	itete	ge
 80090c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090ca:	89a3      	ldrhlt	r3, [r4, #12]
 80090cc:	181b      	addge	r3, r3, r0
 80090ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090d2:	bfac      	ite	ge
 80090d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80090d6:	81a3      	strhlt	r3, [r4, #12]
 80090d8:	bd10      	pop	{r4, pc}

080090da <__seofread>:
 80090da:	2000      	movs	r0, #0
 80090dc:	4770      	bx	lr

080090de <__swrite>:
 80090de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e2:	461f      	mov	r7, r3
 80090e4:	898b      	ldrh	r3, [r1, #12]
 80090e6:	4605      	mov	r5, r0
 80090e8:	05db      	lsls	r3, r3, #23
 80090ea:	460c      	mov	r4, r1
 80090ec:	4616      	mov	r6, r2
 80090ee:	d505      	bpl.n	80090fc <__swrite+0x1e>
 80090f0:	2302      	movs	r3, #2
 80090f2:	2200      	movs	r2, #0
 80090f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f8:	f001 fa4e 	bl	800a598 <_lseek_r>
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	4632      	mov	r2, r6
 8009100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	4628      	mov	r0, r5
 8009108:	463b      	mov	r3, r7
 800910a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800910e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009112:	f001 b839 	b.w	800a188 <_write_r>

08009116 <__sseek>:
 8009116:	b510      	push	{r4, lr}
 8009118:	460c      	mov	r4, r1
 800911a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911e:	f001 fa3b 	bl	800a598 <_lseek_r>
 8009122:	1c43      	adds	r3, r0, #1
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	bf15      	itete	ne
 8009128:	6560      	strne	r0, [r4, #84]	; 0x54
 800912a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800912e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009132:	81a3      	strheq	r3, [r4, #12]
 8009134:	bf18      	it	ne
 8009136:	81a3      	strhne	r3, [r4, #12]
 8009138:	bd10      	pop	{r4, pc}

0800913a <__sclose>:
 800913a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800913e:	f001 b8a7 	b.w	800a290 <_close_r>
	...

08009144 <iso_year_adjust>:
 8009144:	6942      	ldr	r2, [r0, #20]
 8009146:	f240 736c 	movw	r3, #1900	; 0x76c
 800914a:	2a00      	cmp	r2, #0
 800914c:	bfa8      	it	ge
 800914e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8009152:	4413      	add	r3, r2
 8009154:	0792      	lsls	r2, r2, #30
 8009156:	d105      	bne.n	8009164 <iso_year_adjust+0x20>
 8009158:	2164      	movs	r1, #100	; 0x64
 800915a:	fb93 f2f1 	sdiv	r2, r3, r1
 800915e:	fb01 3212 	mls	r2, r1, r2, r3
 8009162:	b9da      	cbnz	r2, 800919c <iso_year_adjust+0x58>
 8009164:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009168:	fb93 f1f2 	sdiv	r1, r3, r2
 800916c:	fb02 3311 	mls	r3, r2, r1, r3
 8009170:	fab3 f383 	clz	r3, r3
 8009174:	095b      	lsrs	r3, r3, #5
 8009176:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800917a:	0040      	lsls	r0, r0, #1
 800917c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8009180:	4418      	add	r0, r3
 8009182:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8009186:	4298      	cmp	r0, r3
 8009188:	d03a      	beq.n	8009200 <iso_year_adjust+0xbc>
 800918a:	dc21      	bgt.n	80091d0 <iso_year_adjust+0x8c>
 800918c:	2801      	cmp	r0, #1
 800918e:	dc1a      	bgt.n	80091c6 <iso_year_adjust+0x82>
 8009190:	2800      	cmp	r0, #0
 8009192:	bfb4      	ite	lt
 8009194:	2000      	movlt	r0, #0
 8009196:	f04f 30ff 	movge.w	r0, #4294967295
 800919a:	4770      	bx	lr
 800919c:	2301      	movs	r3, #1
 800919e:	e7ea      	b.n	8009176 <iso_year_adjust+0x32>
 80091a0:	2817      	cmp	r0, #23
 80091a2:	d813      	bhi.n	80091cc <iso_year_adjust+0x88>
 80091a4:	e8df f000 	tbb	[pc, r0]
 80091a8:	0c0c0c0c 	.word	0x0c0c0c0c
 80091ac:	0c0c1212 	.word	0x0c0c1212
 80091b0:	12121212 	.word	0x12121212
 80091b4:	12121212 	.word	0x12121212
 80091b8:	0c0c1212 	.word	0x0c0c1212
 80091bc:	0c0c1212 	.word	0x0c0c1212
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295
 80091c4:	4770      	bx	lr
 80091c6:	380a      	subs	r0, #10
 80091c8:	2817      	cmp	r0, #23
 80091ca:	d9e9      	bls.n	80091a0 <iso_year_adjust+0x5c>
 80091cc:	2000      	movs	r0, #0
 80091ce:	4770      	bx	lr
 80091d0:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80091d4:	4298      	cmp	r0, r3
 80091d6:	dc06      	bgt.n	80091e6 <iso_year_adjust+0xa2>
 80091d8:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80091dc:	4298      	cmp	r0, r3
 80091de:	bfd4      	ite	le
 80091e0:	2000      	movle	r0, #0
 80091e2:	2001      	movgt	r0, #1
 80091e4:	4770      	bx	lr
 80091e6:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80091ea:	3802      	subs	r0, #2
 80091ec:	2815      	cmp	r0, #21
 80091ee:	d8ed      	bhi.n	80091cc <iso_year_adjust+0x88>
 80091f0:	2301      	movs	r3, #1
 80091f2:	4083      	lsls	r3, r0
 80091f4:	4803      	ldr	r0, [pc, #12]	; (8009204 <iso_year_adjust+0xc0>)
 80091f6:	4018      	ands	r0, r3
 80091f8:	3800      	subs	r0, #0
 80091fa:	bf18      	it	ne
 80091fc:	2001      	movne	r0, #1
 80091fe:	4770      	bx	lr
 8009200:	2001      	movs	r0, #1
 8009202:	4770      	bx	lr
 8009204:	002a001f 	.word	0x002a001f

08009208 <__strftime.isra.0>:
 8009208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920c:	461e      	mov	r6, r3
 800920e:	2300      	movs	r3, #0
 8009210:	4607      	mov	r7, r0
 8009212:	460d      	mov	r5, r1
 8009214:	461c      	mov	r4, r3
 8009216:	b08f      	sub	sp, #60	; 0x3c
 8009218:	9302      	str	r3, [sp, #8]
 800921a:	7813      	ldrb	r3, [r2, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 84b5 	beq.w	8009b8c <__strftime.isra.0+0x984>
 8009222:	2b25      	cmp	r3, #37	; 0x25
 8009224:	d11f      	bne.n	8009266 <__strftime.isra.0+0x5e>
 8009226:	f892 b001 	ldrb.w	fp, [r2, #1]
 800922a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800922e:	d024      	beq.n	800927a <__strftime.isra.0+0x72>
 8009230:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8009234:	d021      	beq.n	800927a <__strftime.isra.0+0x72>
 8009236:	f04f 0b00 	mov.w	fp, #0
 800923a:	f102 0801 	add.w	r8, r2, #1
 800923e:	f898 2000 	ldrb.w	r2, [r8]
 8009242:	3a31      	subs	r2, #49	; 0x31
 8009244:	2a08      	cmp	r2, #8
 8009246:	d81b      	bhi.n	8009280 <__strftime.isra.0+0x78>
 8009248:	4640      	mov	r0, r8
 800924a:	220a      	movs	r2, #10
 800924c:	a906      	add	r1, sp, #24
 800924e:	f000 fdab 	bl	8009da8 <strtoul>
 8009252:	4681      	mov	r9, r0
 8009254:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009258:	f898 2000 	ldrb.w	r2, [r8]
 800925c:	2a45      	cmp	r2, #69	; 0x45
 800925e:	d112      	bne.n	8009286 <__strftime.isra.0+0x7e>
 8009260:	f108 0801 	add.w	r8, r8, #1
 8009264:	e011      	b.n	800928a <__strftime.isra.0+0x82>
 8009266:	1e69      	subs	r1, r5, #1
 8009268:	42a1      	cmp	r1, r4
 800926a:	d802      	bhi.n	8009272 <__strftime.isra.0+0x6a>
 800926c:	2400      	movs	r4, #0
 800926e:	f000 bc90 	b.w	8009b92 <__strftime.isra.0+0x98a>
 8009272:	553b      	strb	r3, [r7, r4]
 8009274:	3201      	adds	r2, #1
 8009276:	3401      	adds	r4, #1
 8009278:	e7cf      	b.n	800921a <__strftime.isra.0+0x12>
 800927a:	f102 0802 	add.w	r8, r2, #2
 800927e:	e7de      	b.n	800923e <__strftime.isra.0+0x36>
 8009280:	f04f 0900 	mov.w	r9, #0
 8009284:	e7e8      	b.n	8009258 <__strftime.isra.0+0x50>
 8009286:	2a4f      	cmp	r2, #79	; 0x4f
 8009288:	d0ea      	beq.n	8009260 <__strftime.isra.0+0x58>
 800928a:	f898 0000 	ldrb.w	r0, [r8]
 800928e:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8009292:	2a55      	cmp	r2, #85	; 0x55
 8009294:	d8ea      	bhi.n	800926c <__strftime.isra.0+0x64>
 8009296:	a301      	add	r3, pc, #4	; (adr r3, 800929c <__strftime.isra.0+0x94>)
 8009298:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800929c:	08009b81 	.word	0x08009b81
 80092a0:	0800926d 	.word	0x0800926d
 80092a4:	0800926d 	.word	0x0800926d
 80092a8:	0800926d 	.word	0x0800926d
 80092ac:	0800926d 	.word	0x0800926d
 80092b0:	0800926d 	.word	0x0800926d
 80092b4:	0800926d 	.word	0x0800926d
 80092b8:	0800926d 	.word	0x0800926d
 80092bc:	0800926d 	.word	0x0800926d
 80092c0:	0800926d 	.word	0x0800926d
 80092c4:	0800926d 	.word	0x0800926d
 80092c8:	0800926d 	.word	0x0800926d
 80092cc:	0800926d 	.word	0x0800926d
 80092d0:	0800926d 	.word	0x0800926d
 80092d4:	0800926d 	.word	0x0800926d
 80092d8:	0800926d 	.word	0x0800926d
 80092dc:	0800926d 	.word	0x0800926d
 80092e0:	0800926d 	.word	0x0800926d
 80092e4:	0800926d 	.word	0x0800926d
 80092e8:	0800926d 	.word	0x0800926d
 80092ec:	0800926d 	.word	0x0800926d
 80092f0:	0800926d 	.word	0x0800926d
 80092f4:	0800926d 	.word	0x0800926d
 80092f8:	0800926d 	.word	0x0800926d
 80092fc:	0800926d 	.word	0x0800926d
 8009300:	0800926d 	.word	0x0800926d
 8009304:	0800926d 	.word	0x0800926d
 8009308:	0800926d 	.word	0x0800926d
 800930c:	08009431 	.word	0x08009431
 8009310:	08009489 	.word	0x08009489
 8009314:	080094f7 	.word	0x080094f7
 8009318:	08009595 	.word	0x08009595
 800931c:	0800926d 	.word	0x0800926d
 8009320:	080095df 	.word	0x080095df
 8009324:	080096cd 	.word	0x080096cd
 8009328:	080097a3 	.word	0x080097a3
 800932c:	080097b1 	.word	0x080097b1
 8009330:	0800926d 	.word	0x0800926d
 8009334:	0800926d 	.word	0x0800926d
 8009338:	0800926d 	.word	0x0800926d
 800933c:	080097e1 	.word	0x080097e1
 8009340:	0800926d 	.word	0x0800926d
 8009344:	0800926d 	.word	0x0800926d
 8009348:	080097f5 	.word	0x080097f5
 800934c:	0800926d 	.word	0x0800926d
 8009350:	08009847 	.word	0x08009847
 8009354:	08009959 	.word	0x08009959
 8009358:	08009969 	.word	0x08009969
 800935c:	08009991 	.word	0x08009991
 8009360:	080099a1 	.word	0x080099a1
 8009364:	08009a3b 	.word	0x08009a3b
 8009368:	080094ef 	.word	0x080094ef
 800936c:	08009a67 	.word	0x08009a67
 8009370:	08009b2f 	.word	0x08009b2f
 8009374:	0800926d 	.word	0x0800926d
 8009378:	0800926d 	.word	0x0800926d
 800937c:	0800926d 	.word	0x0800926d
 8009380:	0800926d 	.word	0x0800926d
 8009384:	0800926d 	.word	0x0800926d
 8009388:	0800926d 	.word	0x0800926d
 800938c:	080093f5 	.word	0x080093f5
 8009390:	0800945f 	.word	0x0800945f
 8009394:	080094b5 	.word	0x080094b5
 8009398:	08009571 	.word	0x08009571
 800939c:	08009571 	.word	0x08009571
 80093a0:	0800926d 	.word	0x0800926d
 80093a4:	08009631 	.word	0x08009631
 80093a8:	0800945f 	.word	0x0800945f
 80093ac:	0800926d 	.word	0x0800926d
 80093b0:	080097d3 	.word	0x080097d3
 80093b4:	080097a3 	.word	0x080097a3
 80093b8:	080097b1 	.word	0x080097b1
 80093bc:	080097db 	.word	0x080097db
 80093c0:	080097e5 	.word	0x080097e5
 80093c4:	0800926d 	.word	0x0800926d
 80093c8:	080097f5 	.word	0x080097f5
 80093cc:	0800926d 	.word	0x0800926d
 80093d0:	080094df 	.word	0x080094df
 80093d4:	08009859 	.word	0x08009859
 80093d8:	0800995d 	.word	0x0800995d
 80093dc:	08009977 	.word	0x08009977
 80093e0:	0800926d 	.word	0x0800926d
 80093e4:	08009a2d 	.word	0x08009a2d
 80093e8:	080094e7 	.word	0x080094e7
 80093ec:	08009a4b 	.word	0x08009a4b
 80093f0:	08009ab9 	.word	0x08009ab9
 80093f4:	69b3      	ldr	r3, [r6, #24]
 80093f6:	4aa9      	ldr	r2, [pc, #676]	; (800969c <__strftime.isra.0+0x494>)
 80093f8:	3318      	adds	r3, #24
 80093fa:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80093fe:	4648      	mov	r0, r9
 8009400:	f7f6 fea4 	bl	800014c <strlen>
 8009404:	f109 39ff 	add.w	r9, r9, #4294967295
 8009408:	4420      	add	r0, r4
 800940a:	1e6b      	subs	r3, r5, #1
 800940c:	42a0      	cmp	r0, r4
 800940e:	d107      	bne.n	8009420 <__strftime.isra.0+0x218>
 8009410:	f898 3000 	ldrb.w	r3, [r8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 83b9 	beq.w	8009b8c <__strftime.isra.0+0x984>
 800941a:	f108 0201 	add.w	r2, r8, #1
 800941e:	e6fc      	b.n	800921a <__strftime.isra.0+0x12>
 8009420:	42a3      	cmp	r3, r4
 8009422:	f67f af23 	bls.w	800926c <__strftime.isra.0+0x64>
 8009426:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800942a:	553a      	strb	r2, [r7, r4]
 800942c:	3401      	adds	r4, #1
 800942e:	e7ed      	b.n	800940c <__strftime.isra.0+0x204>
 8009430:	69b2      	ldr	r2, [r6, #24]
 8009432:	4b9a      	ldr	r3, [pc, #616]	; (800969c <__strftime.isra.0+0x494>)
 8009434:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009438:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800943c:	4648      	mov	r0, r9
 800943e:	f7f6 fe85 	bl	800014c <strlen>
 8009442:	f109 39ff 	add.w	r9, r9, #4294967295
 8009446:	4420      	add	r0, r4
 8009448:	1e6b      	subs	r3, r5, #1
 800944a:	42a0      	cmp	r0, r4
 800944c:	d0e0      	beq.n	8009410 <__strftime.isra.0+0x208>
 800944e:	42a3      	cmp	r3, r4
 8009450:	f67f af0c 	bls.w	800926c <__strftime.isra.0+0x64>
 8009454:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009458:	553a      	strb	r2, [r7, r4]
 800945a:	3401      	adds	r4, #1
 800945c:	e7f5      	b.n	800944a <__strftime.isra.0+0x242>
 800945e:	4b8f      	ldr	r3, [pc, #572]	; (800969c <__strftime.isra.0+0x494>)
 8009460:	6932      	ldr	r2, [r6, #16]
 8009462:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8009466:	4648      	mov	r0, r9
 8009468:	f7f6 fe70 	bl	800014c <strlen>
 800946c:	f109 39ff 	add.w	r9, r9, #4294967295
 8009470:	4420      	add	r0, r4
 8009472:	1e6b      	subs	r3, r5, #1
 8009474:	42a0      	cmp	r0, r4
 8009476:	d0cb      	beq.n	8009410 <__strftime.isra.0+0x208>
 8009478:	42a3      	cmp	r3, r4
 800947a:	f67f aef7 	bls.w	800926c <__strftime.isra.0+0x64>
 800947e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009482:	553a      	strb	r2, [r7, r4]
 8009484:	3401      	adds	r4, #1
 8009486:	e7f5      	b.n	8009474 <__strftime.isra.0+0x26c>
 8009488:	6933      	ldr	r3, [r6, #16]
 800948a:	4a84      	ldr	r2, [pc, #528]	; (800969c <__strftime.isra.0+0x494>)
 800948c:	330c      	adds	r3, #12
 800948e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8009492:	4648      	mov	r0, r9
 8009494:	f7f6 fe5a 	bl	800014c <strlen>
 8009498:	f109 39ff 	add.w	r9, r9, #4294967295
 800949c:	4420      	add	r0, r4
 800949e:	1e6b      	subs	r3, r5, #1
 80094a0:	42a0      	cmp	r0, r4
 80094a2:	d0b5      	beq.n	8009410 <__strftime.isra.0+0x208>
 80094a4:	42a3      	cmp	r3, r4
 80094a6:	f67f aee1 	bls.w	800926c <__strftime.isra.0+0x64>
 80094aa:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80094ae:	553a      	strb	r2, [r7, r4]
 80094b0:	3401      	adds	r4, #1
 80094b2:	e7f5      	b.n	80094a0 <__strftime.isra.0+0x298>
 80094b4:	4b79      	ldr	r3, [pc, #484]	; (800969c <__strftime.isra.0+0x494>)
 80094b6:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 80094ba:	4648      	mov	r0, r9
 80094bc:	f7f6 fe46 	bl	800014c <strlen>
 80094c0:	f899 3000 	ldrb.w	r3, [r9]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d0a3      	beq.n	8009410 <__strftime.isra.0+0x208>
 80094c8:	4633      	mov	r3, r6
 80094ca:	464a      	mov	r2, r9
 80094cc:	1b29      	subs	r1, r5, r4
 80094ce:	1938      	adds	r0, r7, r4
 80094d0:	f7ff fe9a 	bl	8009208 <__strftime.isra.0>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f77f aec9 	ble.w	800926c <__strftime.isra.0+0x64>
 80094da:	4404      	add	r4, r0
 80094dc:	e798      	b.n	8009410 <__strftime.isra.0+0x208>
 80094de:	4b6f      	ldr	r3, [pc, #444]	; (800969c <__strftime.isra.0+0x494>)
 80094e0:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 80094e4:	e7e9      	b.n	80094ba <__strftime.isra.0+0x2b2>
 80094e6:	4b6d      	ldr	r3, [pc, #436]	; (800969c <__strftime.isra.0+0x494>)
 80094e8:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 80094ec:	e7e5      	b.n	80094ba <__strftime.isra.0+0x2b2>
 80094ee:	4b6b      	ldr	r3, [pc, #428]	; (800969c <__strftime.isra.0+0x494>)
 80094f0:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80094f4:	e7e1      	b.n	80094ba <__strftime.isra.0+0x2b2>
 80094f6:	496a      	ldr	r1, [pc, #424]	; (80096a0 <__strftime.isra.0+0x498>)
 80094f8:	f8d6 a014 	ldr.w	sl, [r6, #20]
 80094fc:	458a      	cmp	sl, r1
 80094fe:	bfac      	ite	ge
 8009500:	2100      	movge	r1, #0
 8009502:	2101      	movlt	r1, #1
 8009504:	f1ba 0f00 	cmp.w	sl, #0
 8009508:	db11      	blt.n	800952e <__strftime.isra.0+0x326>
 800950a:	2064      	movs	r0, #100	; 0x64
 800950c:	fb9a f0f0 	sdiv	r0, sl, r0
 8009510:	3013      	adds	r0, #19
 8009512:	f1bb 0f00 	cmp.w	fp, #0
 8009516:	d014      	beq.n	8009542 <__strftime.isra.0+0x33a>
 8009518:	2863      	cmp	r0, #99	; 0x63
 800951a:	dd27      	ble.n	800956c <__strftime.isra.0+0x364>
 800951c:	4b61      	ldr	r3, [pc, #388]	; (80096a4 <__strftime.isra.0+0x49c>)
 800951e:	4a62      	ldr	r2, [pc, #392]	; (80096a8 <__strftime.isra.0+0x4a0>)
 8009520:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8009524:	bf18      	it	ne
 8009526:	461a      	movne	r2, r3
 8009528:	f8df c180 	ldr.w	ip, [pc, #384]	; 80096ac <__strftime.isra.0+0x4a4>
 800952c:	e00c      	b.n	8009548 <__strftime.isra.0+0x340>
 800952e:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8009532:	9103      	str	r1, [sp, #12]
 8009534:	f000 fea8 	bl	800a288 <abs>
 8009538:	2264      	movs	r2, #100	; 0x64
 800953a:	9903      	ldr	r1, [sp, #12]
 800953c:	fb90 f0f2 	sdiv	r0, r0, r2
 8009540:	e7e7      	b.n	8009512 <__strftime.isra.0+0x30a>
 8009542:	4a58      	ldr	r2, [pc, #352]	; (80096a4 <__strftime.isra.0+0x49c>)
 8009544:	f8df c168 	ldr.w	ip, [pc, #360]	; 80096b0 <__strftime.isra.0+0x4a8>
 8009548:	f1b9 0f02 	cmp.w	r9, #2
 800954c:	bf2c      	ite	cs
 800954e:	ebc1 0109 	rsbcs	r1, r1, r9
 8009552:	f1c1 0102 	rsbcc	r1, r1, #2
 8009556:	4b57      	ldr	r3, [pc, #348]	; (80096b4 <__strftime.isra.0+0x4ac>)
 8009558:	9100      	str	r1, [sp, #0]
 800955a:	4951      	ldr	r1, [pc, #324]	; (80096a0 <__strftime.isra.0+0x498>)
 800955c:	9001      	str	r0, [sp, #4]
 800955e:	458a      	cmp	sl, r1
 8009560:	bfa8      	it	ge
 8009562:	4613      	movge	r3, r2
 8009564:	4662      	mov	r2, ip
 8009566:	1b29      	subs	r1, r5, r4
 8009568:	1938      	adds	r0, r7, r4
 800956a:	e029      	b.n	80095c0 <__strftime.isra.0+0x3b8>
 800956c:	4a4d      	ldr	r2, [pc, #308]	; (80096a4 <__strftime.isra.0+0x49c>)
 800956e:	e7db      	b.n	8009528 <__strftime.isra.0+0x320>
 8009570:	4951      	ldr	r1, [pc, #324]	; (80096b8 <__strftime.isra.0+0x4b0>)
 8009572:	4a52      	ldr	r2, [pc, #328]	; (80096bc <__strftime.isra.0+0x4b4>)
 8009574:	68f3      	ldr	r3, [r6, #12]
 8009576:	2864      	cmp	r0, #100	; 0x64
 8009578:	bf08      	it	eq
 800957a:	460a      	moveq	r2, r1
 800957c:	1b29      	subs	r1, r5, r4
 800957e:	1938      	adds	r0, r7, r4
 8009580:	f001 fbd8 	bl	800ad34 <sniprintf>
 8009584:	2800      	cmp	r0, #0
 8009586:	f6ff ae71 	blt.w	800926c <__strftime.isra.0+0x64>
 800958a:	4404      	add	r4, r0
 800958c:	42a5      	cmp	r5, r4
 800958e:	f63f af3f 	bhi.w	8009410 <__strftime.isra.0+0x208>
 8009592:	e66b      	b.n	800926c <__strftime.isra.0+0x64>
 8009594:	6970      	ldr	r0, [r6, #20]
 8009596:	6933      	ldr	r3, [r6, #16]
 8009598:	2800      	cmp	r0, #0
 800959a:	68f2      	ldr	r2, [r6, #12]
 800959c:	eb07 0904 	add.w	r9, r7, r4
 80095a0:	eba5 0a04 	sub.w	sl, r5, r4
 80095a4:	f103 0b01 	add.w	fp, r3, #1
 80095a8:	db0d      	blt.n	80095c6 <__strftime.isra.0+0x3be>
 80095aa:	2164      	movs	r1, #100	; 0x64
 80095ac:	fb90 fcf1 	sdiv	ip, r0, r1
 80095b0:	fb01 001c 	mls	r0, r1, ip, r0
 80095b4:	e9cd 2000 	strd	r2, r0, [sp]
 80095b8:	465b      	mov	r3, fp
 80095ba:	4651      	mov	r1, sl
 80095bc:	4648      	mov	r0, r9
 80095be:	4a40      	ldr	r2, [pc, #256]	; (80096c0 <__strftime.isra.0+0x4b8>)
 80095c0:	f001 fbb8 	bl	800ad34 <sniprintf>
 80095c4:	e7de      	b.n	8009584 <__strftime.isra.0+0x37c>
 80095c6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80095ca:	9203      	str	r2, [sp, #12]
 80095cc:	f000 fe5c 	bl	800a288 <abs>
 80095d0:	2164      	movs	r1, #100	; 0x64
 80095d2:	fb90 fcf1 	sdiv	ip, r0, r1
 80095d6:	9a03      	ldr	r2, [sp, #12]
 80095d8:	fb0c 0011 	mls	r0, ip, r1, r0
 80095dc:	e7ea      	b.n	80095b4 <__strftime.isra.0+0x3ac>
 80095de:	2225      	movs	r2, #37	; 0x25
 80095e0:	f88d 2018 	strb.w	r2, [sp, #24]
 80095e4:	f1bb 0f00 	cmp.w	fp, #0
 80095e8:	d011      	beq.n	800960e <__strftime.isra.0+0x406>
 80095ea:	f1b9 0f06 	cmp.w	r9, #6
 80095ee:	bf38      	it	cc
 80095f0:	f04f 0906 	movcc.w	r9, #6
 80095f4:	f1b9 0306 	subs.w	r3, r9, #6
 80095f8:	f88d b019 	strb.w	fp, [sp, #25]
 80095fc:	d10c      	bne.n	8009618 <__strftime.isra.0+0x410>
 80095fe:	f10d 001a 	add.w	r0, sp, #26
 8009602:	4930      	ldr	r1, [pc, #192]	; (80096c4 <__strftime.isra.0+0x4bc>)
 8009604:	f001 fbf4 	bl	800adf0 <strcpy>
 8009608:	4633      	mov	r3, r6
 800960a:	aa06      	add	r2, sp, #24
 800960c:	e75e      	b.n	80094cc <__strftime.isra.0+0x2c4>
 800960e:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8009612:	f04f 090a 	mov.w	r9, #10
 8009616:	e7ed      	b.n	80095f4 <__strftime.isra.0+0x3ec>
 8009618:	211e      	movs	r1, #30
 800961a:	4a2b      	ldr	r2, [pc, #172]	; (80096c8 <__strftime.isra.0+0x4c0>)
 800961c:	f10d 001a 	add.w	r0, sp, #26
 8009620:	f001 fb88 	bl	800ad34 <sniprintf>
 8009624:	2800      	cmp	r0, #0
 8009626:	ddea      	ble.n	80095fe <__strftime.isra.0+0x3f6>
 8009628:	f10d 031a 	add.w	r3, sp, #26
 800962c:	4418      	add	r0, r3
 800962e:	e7e8      	b.n	8009602 <__strftime.isra.0+0x3fa>
 8009630:	4630      	mov	r0, r6
 8009632:	f7ff fd87 	bl	8009144 <iso_year_adjust>
 8009636:	4681      	mov	r9, r0
 8009638:	6970      	ldr	r0, [r6, #20]
 800963a:	2800      	cmp	r0, #0
 800963c:	db11      	blt.n	8009662 <__strftime.isra.0+0x45a>
 800963e:	2364      	movs	r3, #100	; 0x64
 8009640:	fb90 f2f3 	sdiv	r2, r0, r3
 8009644:	fb03 0012 	mls	r0, r3, r2, r0
 8009648:	2264      	movs	r2, #100	; 0x64
 800964a:	4481      	add	r9, r0
 800964c:	fb99 f3f2 	sdiv	r3, r9, r2
 8009650:	fb02 9913 	mls	r9, r2, r3, r9
 8009654:	4491      	add	r9, r2
 8009656:	fbb9 f3f2 	udiv	r3, r9, r2
 800965a:	fb02 9313 	mls	r3, r2, r3, r9
 800965e:	4a16      	ldr	r2, [pc, #88]	; (80096b8 <__strftime.isra.0+0x4b0>)
 8009660:	e78c      	b.n	800957c <__strftime.isra.0+0x374>
 8009662:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009666:	f000 fe0f 	bl	800a288 <abs>
 800966a:	2364      	movs	r3, #100	; 0x64
 800966c:	fb90 f2f3 	sdiv	r2, r0, r3
 8009670:	f1b9 0f00 	cmp.w	r9, #0
 8009674:	fb02 0013 	mls	r0, r2, r3, r0
 8009678:	da07      	bge.n	800968a <__strftime.isra.0+0x482>
 800967a:	6972      	ldr	r2, [r6, #20]
 800967c:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8009680:	429a      	cmp	r2, r3
 8009682:	bfb8      	it	lt
 8009684:	f04f 0901 	movlt.w	r9, #1
 8009688:	e7de      	b.n	8009648 <__strftime.isra.0+0x440>
 800968a:	d0dd      	beq.n	8009648 <__strftime.isra.0+0x440>
 800968c:	6972      	ldr	r2, [r6, #20]
 800968e:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <__strftime.isra.0+0x498>)
 8009690:	429a      	cmp	r2, r3
 8009692:	bfb8      	it	lt
 8009694:	f04f 39ff 	movlt.w	r9, #4294967295
 8009698:	e7d6      	b.n	8009648 <__strftime.isra.0+0x440>
 800969a:	bf00      	nop
 800969c:	0800bd00 	.word	0x0800bd00
 80096a0:	fffff894 	.word	0xfffff894
 80096a4:	0800bf3e 	.word	0x0800bf3e
 80096a8:	0800bb8b 	.word	0x0800bb8b
 80096ac:	0800bb83 	.word	0x0800bb83
 80096b0:	0800bb7c 	.word	0x0800bb7c
 80096b4:	0800bfcd 	.word	0x0800bfcd
 80096b8:	0800bb9b 	.word	0x0800bb9b
 80096bc:	0800bb8d 	.word	0x0800bb8d
 80096c0:	0800bb91 	.word	0x0800bb91
 80096c4:	0800bba4 	.word	0x0800bba4
 80096c8:	0800bba0 	.word	0x0800bba0
 80096cc:	6971      	ldr	r1, [r6, #20]
 80096ce:	4aba      	ldr	r2, [pc, #744]	; (80099b8 <__strftime.isra.0+0x7b0>)
 80096d0:	4630      	mov	r0, r6
 80096d2:	4291      	cmp	r1, r2
 80096d4:	bfac      	ite	ge
 80096d6:	2300      	movge	r3, #0
 80096d8:	2301      	movlt	r3, #1
 80096da:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80096de:	f7ff fd31 	bl	8009144 <iso_year_adjust>
 80096e2:	9904      	ldr	r1, [sp, #16]
 80096e4:	4682      	mov	sl, r0
 80096e6:	2900      	cmp	r1, #0
 80096e8:	db2c      	blt.n	8009744 <__strftime.isra.0+0x53c>
 80096ea:	2264      	movs	r2, #100	; 0x64
 80096ec:	fb91 f2f2 	sdiv	r2, r1, r2
 80096f0:	3213      	adds	r2, #19
 80096f2:	6970      	ldr	r0, [r6, #20]
 80096f4:	2800      	cmp	r0, #0
 80096f6:	db2f      	blt.n	8009758 <__strftime.isra.0+0x550>
 80096f8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80096fc:	fb90 fefc 	sdiv	lr, r0, ip
 8009700:	fb0c 001e 	mls	r0, ip, lr, r0
 8009704:	f1ba 0f00 	cmp.w	sl, #0
 8009708:	da35      	bge.n	8009776 <__strftime.isra.0+0x56e>
 800970a:	6971      	ldr	r1, [r6, #20]
 800970c:	4bab      	ldr	r3, [pc, #684]	; (80099bc <__strftime.isra.0+0x7b4>)
 800970e:	4299      	cmp	r1, r3
 8009710:	db3b      	blt.n	800978a <__strftime.isra.0+0x582>
 8009712:	4482      	add	sl, r0
 8009714:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009718:	d13c      	bne.n	8009794 <__strftime.isra.0+0x58c>
 800971a:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800971e:	3a01      	subs	r2, #1
 8009720:	2064      	movs	r0, #100	; 0x64
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	fb00 aa02 	mla	sl, r0, r2, sl
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 81a8 	beq.w	8009a7e <__strftime.isra.0+0x876>
 800972e:	222d      	movs	r2, #45	; 0x2d
 8009730:	f88d 2018 	strb.w	r2, [sp, #24]
 8009734:	f1b9 0f00 	cmp.w	r9, #0
 8009738:	d001      	beq.n	800973e <__strftime.isra.0+0x536>
 800973a:	f109 39ff 	add.w	r9, r9, #4294967295
 800973e:	f10d 0219 	add.w	r2, sp, #25
 8009742:	e1a7      	b.n	8009a94 <__strftime.isra.0+0x88c>
 8009744:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8009748:	9104      	str	r1, [sp, #16]
 800974a:	f000 fd9d 	bl	800a288 <abs>
 800974e:	2264      	movs	r2, #100	; 0x64
 8009750:	9904      	ldr	r1, [sp, #16]
 8009752:	fb90 f2f2 	sdiv	r2, r0, r2
 8009756:	e7cc      	b.n	80096f2 <__strftime.isra.0+0x4ea>
 8009758:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800975c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009760:	f000 fd92 	bl	800a288 <abs>
 8009764:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009768:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800976c:	fb90 fefc 	sdiv	lr, r0, ip
 8009770:	fb0e 001c 	mls	r0, lr, ip, r0
 8009774:	e7c6      	b.n	8009704 <__strftime.isra.0+0x4fc>
 8009776:	d0cc      	beq.n	8009712 <__strftime.isra.0+0x50a>
 8009778:	4b8f      	ldr	r3, [pc, #572]	; (80099b8 <__strftime.isra.0+0x7b0>)
 800977a:	4299      	cmp	r1, r3
 800977c:	bfb6      	itet	lt
 800977e:	2301      	movlt	r3, #1
 8009780:	2300      	movge	r3, #0
 8009782:	f04f 3aff 	movlt.w	sl, #4294967295
 8009786:	9303      	str	r3, [sp, #12]
 8009788:	e7c3      	b.n	8009712 <__strftime.isra.0+0x50a>
 800978a:	f04f 0a01 	mov.w	sl, #1
 800978e:	f8cd a00c 	str.w	sl, [sp, #12]
 8009792:	e7be      	b.n	8009712 <__strftime.isra.0+0x50a>
 8009794:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8009798:	bf04      	itt	eq
 800979a:	f04f 0a00 	moveq.w	sl, #0
 800979e:	3201      	addeq	r2, #1
 80097a0:	e7be      	b.n	8009720 <__strftime.isra.0+0x518>
 80097a2:	4987      	ldr	r1, [pc, #540]	; (80099c0 <__strftime.isra.0+0x7b8>)
 80097a4:	4a87      	ldr	r2, [pc, #540]	; (80099c4 <__strftime.isra.0+0x7bc>)
 80097a6:	68b3      	ldr	r3, [r6, #8]
 80097a8:	286b      	cmp	r0, #107	; 0x6b
 80097aa:	bf08      	it	eq
 80097ac:	460a      	moveq	r2, r1
 80097ae:	e6e5      	b.n	800957c <__strftime.isra.0+0x374>
 80097b0:	68b3      	ldr	r3, [r6, #8]
 80097b2:	b163      	cbz	r3, 80097ce <__strftime.isra.0+0x5c6>
 80097b4:	2b0c      	cmp	r3, #12
 80097b6:	d004      	beq.n	80097c2 <__strftime.isra.0+0x5ba>
 80097b8:	210c      	movs	r1, #12
 80097ba:	fb93 f2f1 	sdiv	r2, r3, r1
 80097be:	fb01 3312 	mls	r3, r1, r2, r3
 80097c2:	4980      	ldr	r1, [pc, #512]	; (80099c4 <__strftime.isra.0+0x7bc>)
 80097c4:	4a7e      	ldr	r2, [pc, #504]	; (80099c0 <__strftime.isra.0+0x7b8>)
 80097c6:	2849      	cmp	r0, #73	; 0x49
 80097c8:	bf08      	it	eq
 80097ca:	460a      	moveq	r2, r1
 80097cc:	e6d6      	b.n	800957c <__strftime.isra.0+0x374>
 80097ce:	230c      	movs	r3, #12
 80097d0:	e7f7      	b.n	80097c2 <__strftime.isra.0+0x5ba>
 80097d2:	69f3      	ldr	r3, [r6, #28]
 80097d4:	4a7c      	ldr	r2, [pc, #496]	; (80099c8 <__strftime.isra.0+0x7c0>)
 80097d6:	3301      	adds	r3, #1
 80097d8:	e6d0      	b.n	800957c <__strftime.isra.0+0x374>
 80097da:	6933      	ldr	r3, [r6, #16]
 80097dc:	3301      	adds	r3, #1
 80097de:	e73e      	b.n	800965e <__strftime.isra.0+0x456>
 80097e0:	6873      	ldr	r3, [r6, #4]
 80097e2:	e73c      	b.n	800965e <__strftime.isra.0+0x456>
 80097e4:	1e6b      	subs	r3, r5, #1
 80097e6:	429c      	cmp	r4, r3
 80097e8:	f4bf ad40 	bcs.w	800926c <__strftime.isra.0+0x64>
 80097ec:	230a      	movs	r3, #10
 80097ee:	553b      	strb	r3, [r7, r4]
 80097f0:	3401      	adds	r4, #1
 80097f2:	e60d      	b.n	8009410 <__strftime.isra.0+0x208>
 80097f4:	68b3      	ldr	r3, [r6, #8]
 80097f6:	2b0b      	cmp	r3, #11
 80097f8:	bfd4      	ite	le
 80097fa:	2200      	movle	r2, #0
 80097fc:	2201      	movgt	r2, #1
 80097fe:	4b73      	ldr	r3, [pc, #460]	; (80099cc <__strftime.isra.0+0x7c4>)
 8009800:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009804:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8009808:	4648      	mov	r0, r9
 800980a:	f7f6 fc9f 	bl	800014c <strlen>
 800980e:	f109 32ff 	add.w	r2, r9, #4294967295
 8009812:	4420      	add	r0, r4
 8009814:	f105 3cff 	add.w	ip, r5, #4294967295
 8009818:	42a0      	cmp	r0, r4
 800981a:	f43f adf9 	beq.w	8009410 <__strftime.isra.0+0x208>
 800981e:	45a4      	cmp	ip, r4
 8009820:	f67f ad24 	bls.w	800926c <__strftime.isra.0+0x64>
 8009824:	f898 1000 	ldrb.w	r1, [r8]
 8009828:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800982c:	2950      	cmp	r1, #80	; 0x50
 800982e:	d107      	bne.n	8009840 <__strftime.isra.0+0x638>
 8009830:	4967      	ldr	r1, [pc, #412]	; (80099d0 <__strftime.isra.0+0x7c8>)
 8009832:	5cc9      	ldrb	r1, [r1, r3]
 8009834:	f001 0103 	and.w	r1, r1, #3
 8009838:	2901      	cmp	r1, #1
 800983a:	bf08      	it	eq
 800983c:	3320      	addeq	r3, #32
 800983e:	b2db      	uxtb	r3, r3
 8009840:	553b      	strb	r3, [r7, r4]
 8009842:	3401      	adds	r4, #1
 8009844:	e7e8      	b.n	8009818 <__strftime.isra.0+0x610>
 8009846:	6873      	ldr	r3, [r6, #4]
 8009848:	4a62      	ldr	r2, [pc, #392]	; (80099d4 <__strftime.isra.0+0x7cc>)
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	68b3      	ldr	r3, [r6, #8]
 800984e:	1b29      	subs	r1, r5, r4
 8009850:	1938      	adds	r0, r7, r4
 8009852:	f001 fa6f 	bl	800ad34 <sniprintf>
 8009856:	e695      	b.n	8009584 <__strftime.isra.0+0x37c>
 8009858:	6a33      	ldr	r3, [r6, #32]
 800985a:	2b00      	cmp	r3, #0
 800985c:	db79      	blt.n	8009952 <__strftime.isra.0+0x74a>
 800985e:	f000 faad 	bl	8009dbc <__tz_lock>
 8009862:	9b02      	ldr	r3, [sp, #8]
 8009864:	b90b      	cbnz	r3, 800986a <__strftime.isra.0+0x662>
 8009866:	f000 fab5 	bl	8009dd4 <_tzset_unlocked>
 800986a:	f000 fe7d 	bl	800a568 <__gettzinfo>
 800986e:	6a33      	ldr	r3, [r6, #32]
 8009870:	2b00      	cmp	r3, #0
 8009872:	bfd4      	ite	le
 8009874:	2200      	movle	r2, #0
 8009876:	2201      	movgt	r2, #1
 8009878:	2328      	movs	r3, #40	; 0x28
 800987a:	fb02 3303 	mla	r3, r2, r3, r3
 800987e:	58c3      	ldr	r3, [r0, r3]
 8009880:	f1c3 0900 	rsb	r9, r3, #0
 8009884:	f000 faa0 	bl	8009dc8 <__tz_unlock>
 8009888:	2301      	movs	r3, #1
 800988a:	9302      	str	r3, [sp, #8]
 800988c:	6972      	ldr	r2, [r6, #20]
 800988e:	1b29      	subs	r1, r5, r4
 8009890:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8009894:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8009898:	f16c 0c00 	sbc.w	ip, ip, #0
 800989c:	f1bc 0f00 	cmp.w	ip, #0
 80098a0:	eb07 0004 	add.w	r0, r7, r4
 80098a4:	da02      	bge.n	80098ac <__strftime.isra.0+0x6a4>
 80098a6:	3303      	adds	r3, #3
 80098a8:	f14c 0c00 	adc.w	ip, ip, #0
 80098ac:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80098b0:	f102 3aff 	add.w	sl, r2, #4294967295
 80098b4:	fb9a fefe 	sdiv	lr, sl, lr
 80098b8:	089b      	lsrs	r3, r3, #2
 80098ba:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 80098be:	ebb3 030e 	subs.w	r3, r3, lr
 80098c2:	ea4f 0cac 	mov.w	ip, ip, asr #2
 80098c6:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 80098ca:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 80098ce:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 80098d2:	fb9a fefe 	sdiv	lr, sl, lr
 80098d6:	eb13 030e 	adds.w	r3, r3, lr
 80098da:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 80098de:	f240 1c6d 	movw	ip, #365	; 0x16d
 80098e2:	3a46      	subs	r2, #70	; 0x46
 80098e4:	fb0c f202 	mul.w	r2, ip, r2
 80098e8:	f04f 0c18 	mov.w	ip, #24
 80098ec:	189b      	adds	r3, r3, r2
 80098ee:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 80098f2:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 80098f6:	eb13 030e 	adds.w	r3, r3, lr
 80098fa:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80098fe:	fba3 3e0c 	umull	r3, lr, r3, ip
 8009902:	fb0c e202 	mla	r2, ip, r2, lr
 8009906:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800990a:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800990e:	eb13 030e 	adds.w	r3, r3, lr
 8009912:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8009916:	fba3 320c 	umull	r3, r2, r3, ip
 800991a:	fb0c 220e 	mla	r2, ip, lr, r2
 800991e:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8009922:	eb13 030e 	adds.w	r3, r3, lr
 8009926:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800992a:	fba3 3e0c 	umull	r3, lr, r3, ip
 800992e:	fb0c e202 	mla	r2, ip, r2, lr
 8009932:	f8d6 e000 	ldr.w	lr, [r6]
 8009936:	eb13 030e 	adds.w	r3, r3, lr
 800993a:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800993e:	ebb3 0309 	subs.w	r3, r3, r9
 8009942:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8009946:	e9cd 3200 	strd	r3, r2, [sp]
 800994a:	4a23      	ldr	r2, [pc, #140]	; (80099d8 <__strftime.isra.0+0x7d0>)
 800994c:	f001 f9f2 	bl	800ad34 <sniprintf>
 8009950:	e618      	b.n	8009584 <__strftime.isra.0+0x37c>
 8009952:	f04f 0900 	mov.w	r9, #0
 8009956:	e799      	b.n	800988c <__strftime.isra.0+0x684>
 8009958:	6833      	ldr	r3, [r6, #0]
 800995a:	e680      	b.n	800965e <__strftime.isra.0+0x456>
 800995c:	1e6b      	subs	r3, r5, #1
 800995e:	429c      	cmp	r4, r3
 8009960:	f4bf ac84 	bcs.w	800926c <__strftime.isra.0+0x64>
 8009964:	2309      	movs	r3, #9
 8009966:	e742      	b.n	80097ee <__strftime.isra.0+0x5e6>
 8009968:	6833      	ldr	r3, [r6, #0]
 800996a:	4a1c      	ldr	r2, [pc, #112]	; (80099dc <__strftime.isra.0+0x7d4>)
 800996c:	9301      	str	r3, [sp, #4]
 800996e:	6873      	ldr	r3, [r6, #4]
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	68b3      	ldr	r3, [r6, #8]
 8009974:	e5f7      	b.n	8009566 <__strftime.isra.0+0x35e>
 8009976:	1e6b      	subs	r3, r5, #1
 8009978:	429c      	cmp	r4, r3
 800997a:	f4bf ac77 	bcs.w	800926c <__strftime.isra.0+0x64>
 800997e:	69b3      	ldr	r3, [r6, #24]
 8009980:	1c62      	adds	r2, r4, #1
 8009982:	b91b      	cbnz	r3, 800998c <__strftime.isra.0+0x784>
 8009984:	2337      	movs	r3, #55	; 0x37
 8009986:	553b      	strb	r3, [r7, r4]
 8009988:	4614      	mov	r4, r2
 800998a:	e541      	b.n	8009410 <__strftime.isra.0+0x208>
 800998c:	3330      	adds	r3, #48	; 0x30
 800998e:	e7fa      	b.n	8009986 <__strftime.isra.0+0x77e>
 8009990:	69f3      	ldr	r3, [r6, #28]
 8009992:	69b2      	ldr	r2, [r6, #24]
 8009994:	3307      	adds	r3, #7
 8009996:	1a9b      	subs	r3, r3, r2
 8009998:	2207      	movs	r2, #7
 800999a:	fb93 f3f2 	sdiv	r3, r3, r2
 800999e:	e65e      	b.n	800965e <__strftime.isra.0+0x456>
 80099a0:	4630      	mov	r0, r6
 80099a2:	f7ff fbcf 	bl	8009144 <iso_year_adjust>
 80099a6:	69b2      	ldr	r2, [r6, #24]
 80099a8:	b1d2      	cbz	r2, 80099e0 <__strftime.isra.0+0x7d8>
 80099aa:	3a01      	subs	r2, #1
 80099ac:	2800      	cmp	r0, #0
 80099ae:	dc3b      	bgt.n	8009a28 <__strftime.isra.0+0x820>
 80099b0:	69f3      	ldr	r3, [r6, #28]
 80099b2:	d117      	bne.n	80099e4 <__strftime.isra.0+0x7dc>
 80099b4:	330a      	adds	r3, #10
 80099b6:	e7ee      	b.n	8009996 <__strftime.isra.0+0x78e>
 80099b8:	fffff894 	.word	0xfffff894
 80099bc:	fffff895 	.word	0xfffff895
 80099c0:	0800bb8d 	.word	0x0800bb8d
 80099c4:	0800bb9b 	.word	0x0800bb9b
 80099c8:	0800bbb0 	.word	0x0800bbb0
 80099cc:	0800bd00 	.word	0x0800bd00
 80099d0:	0800be39 	.word	0x0800be39
 80099d4:	0800bbbf 	.word	0x0800bbbf
 80099d8:	0800bbb5 	.word	0x0800bbb5
 80099dc:	0800bbba 	.word	0x0800bbba
 80099e0:	2206      	movs	r2, #6
 80099e2:	e7e3      	b.n	80099ac <__strftime.isra.0+0x7a4>
 80099e4:	6971      	ldr	r1, [r6, #20]
 80099e6:	1ad2      	subs	r2, r2, r3
 80099e8:	2900      	cmp	r1, #0
 80099ea:	f240 736b 	movw	r3, #1899	; 0x76b
 80099ee:	bfa8      	it	ge
 80099f0:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 80099f4:	440b      	add	r3, r1
 80099f6:	0799      	lsls	r1, r3, #30
 80099f8:	d105      	bne.n	8009a06 <__strftime.isra.0+0x7fe>
 80099fa:	2064      	movs	r0, #100	; 0x64
 80099fc:	fb93 f1f0 	sdiv	r1, r3, r0
 8009a00:	fb00 3111 	mls	r1, r0, r1, r3
 8009a04:	b971      	cbnz	r1, 8009a24 <__strftime.isra.0+0x81c>
 8009a06:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009a0a:	fb93 f0f1 	sdiv	r0, r3, r1
 8009a0e:	fb01 3310 	mls	r3, r1, r0, r3
 8009a12:	fab3 f383 	clz	r3, r3
 8009a16:	095b      	lsrs	r3, r3, #5
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	2b05      	cmp	r3, #5
 8009a1c:	bfb4      	ite	lt
 8009a1e:	2335      	movlt	r3, #53	; 0x35
 8009a20:	2334      	movge	r3, #52	; 0x34
 8009a22:	e61c      	b.n	800965e <__strftime.isra.0+0x456>
 8009a24:	2301      	movs	r3, #1
 8009a26:	e7f7      	b.n	8009a18 <__strftime.isra.0+0x810>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e618      	b.n	800965e <__strftime.isra.0+0x456>
 8009a2c:	1e6b      	subs	r3, r5, #1
 8009a2e:	429c      	cmp	r4, r3
 8009a30:	f4bf ac1c 	bcs.w	800926c <__strftime.isra.0+0x64>
 8009a34:	69b3      	ldr	r3, [r6, #24]
 8009a36:	3330      	adds	r3, #48	; 0x30
 8009a38:	e6d9      	b.n	80097ee <__strftime.isra.0+0x5e6>
 8009a3a:	69b2      	ldr	r2, [r6, #24]
 8009a3c:	b11a      	cbz	r2, 8009a46 <__strftime.isra.0+0x83e>
 8009a3e:	3a01      	subs	r2, #1
 8009a40:	69f3      	ldr	r3, [r6, #28]
 8009a42:	3307      	adds	r3, #7
 8009a44:	e7a7      	b.n	8009996 <__strftime.isra.0+0x78e>
 8009a46:	2206      	movs	r2, #6
 8009a48:	e7fa      	b.n	8009a40 <__strftime.isra.0+0x838>
 8009a4a:	6970      	ldr	r0, [r6, #20]
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	db05      	blt.n	8009a5c <__strftime.isra.0+0x854>
 8009a50:	2364      	movs	r3, #100	; 0x64
 8009a52:	fb90 f2f3 	sdiv	r2, r0, r3
 8009a56:	fb02 0313 	mls	r3, r2, r3, r0
 8009a5a:	e600      	b.n	800965e <__strftime.isra.0+0x456>
 8009a5c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009a60:	f000 fc12 	bl	800a288 <abs>
 8009a64:	e7f4      	b.n	8009a50 <__strftime.isra.0+0x848>
 8009a66:	6972      	ldr	r2, [r6, #20]
 8009a68:	494c      	ldr	r1, [pc, #304]	; (8009b9c <__strftime.isra.0+0x994>)
 8009a6a:	428a      	cmp	r2, r1
 8009a6c:	da05      	bge.n	8009a7a <__strftime.isra.0+0x872>
 8009a6e:	202d      	movs	r0, #45	; 0x2d
 8009a70:	eba1 0a02 	sub.w	sl, r1, r2
 8009a74:	f88d 0018 	strb.w	r0, [sp, #24]
 8009a78:	e65c      	b.n	8009734 <__strftime.isra.0+0x52c>
 8009a7a:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8009a7e:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8009a82:	d106      	bne.n	8009a92 <__strftime.isra.0+0x88a>
 8009a84:	f242 720f 	movw	r2, #9999	; 0x270f
 8009a88:	4592      	cmp	sl, r2
 8009a8a:	d902      	bls.n	8009a92 <__strftime.isra.0+0x88a>
 8009a8c:	f88d b018 	strb.w	fp, [sp, #24]
 8009a90:	e650      	b.n	8009734 <__strftime.isra.0+0x52c>
 8009a92:	aa06      	add	r2, sp, #24
 8009a94:	2125      	movs	r1, #37	; 0x25
 8009a96:	7011      	strb	r1, [r2, #0]
 8009a98:	f1bb 0f00 	cmp.w	fp, #0
 8009a9c:	d108      	bne.n	8009ab0 <__strftime.isra.0+0x8a8>
 8009a9e:	1c50      	adds	r0, r2, #1
 8009aa0:	493f      	ldr	r1, [pc, #252]	; (8009ba0 <__strftime.isra.0+0x998>)
 8009aa2:	f001 f9a5 	bl	800adf0 <strcpy>
 8009aa6:	464b      	mov	r3, r9
 8009aa8:	f8cd a000 	str.w	sl, [sp]
 8009aac:	aa06      	add	r2, sp, #24
 8009aae:	e6ce      	b.n	800984e <__strftime.isra.0+0x646>
 8009ab0:	2330      	movs	r3, #48	; 0x30
 8009ab2:	1c90      	adds	r0, r2, #2
 8009ab4:	7053      	strb	r3, [r2, #1]
 8009ab6:	e7f3      	b.n	8009aa0 <__strftime.isra.0+0x898>
 8009ab8:	6a33      	ldr	r3, [r6, #32]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f6ff aca8 	blt.w	8009410 <__strftime.isra.0+0x208>
 8009ac0:	f000 f97c 	bl	8009dbc <__tz_lock>
 8009ac4:	9b02      	ldr	r3, [sp, #8]
 8009ac6:	b90b      	cbnz	r3, 8009acc <__strftime.isra.0+0x8c4>
 8009ac8:	f000 f984 	bl	8009dd4 <_tzset_unlocked>
 8009acc:	f000 fd4c 	bl	800a568 <__gettzinfo>
 8009ad0:	6a33      	ldr	r3, [r6, #32]
 8009ad2:	eb07 0a04 	add.w	sl, r7, r4
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	bfd4      	ite	le
 8009ada:	2200      	movle	r2, #0
 8009adc:	2201      	movgt	r2, #1
 8009ade:	2328      	movs	r3, #40	; 0x28
 8009ae0:	fb02 3303 	mla	r3, r2, r3, r3
 8009ae4:	58c3      	ldr	r3, [r0, r3]
 8009ae6:	eba5 0b04 	sub.w	fp, r5, r4
 8009aea:	f1c3 0900 	rsb	r9, r3, #0
 8009aee:	f000 f96b 	bl	8009dc8 <__tz_unlock>
 8009af2:	233c      	movs	r3, #60	; 0x3c
 8009af4:	fb99 f0f3 	sdiv	r0, r9, r3
 8009af8:	f000 fd4a 	bl	800a590 <labs>
 8009afc:	233c      	movs	r3, #60	; 0x3c
 8009afe:	fb90 f2f3 	sdiv	r2, r0, r3
 8009b02:	fb02 0013 	mls	r0, r2, r3, r0
 8009b06:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009b0a:	9000      	str	r0, [sp, #0]
 8009b0c:	fb99 f3f3 	sdiv	r3, r9, r3
 8009b10:	4659      	mov	r1, fp
 8009b12:	4650      	mov	r0, sl
 8009b14:	4a23      	ldr	r2, [pc, #140]	; (8009ba4 <__strftime.isra.0+0x99c>)
 8009b16:	f001 f90d 	bl	800ad34 <sniprintf>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f6ff aba6 	blt.w	800926c <__strftime.isra.0+0x64>
 8009b20:	4404      	add	r4, r0
 8009b22:	42a5      	cmp	r5, r4
 8009b24:	f67f aba2 	bls.w	800926c <__strftime.isra.0+0x64>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	9302      	str	r3, [sp, #8]
 8009b2c:	e470      	b.n	8009410 <__strftime.isra.0+0x208>
 8009b2e:	6a33      	ldr	r3, [r6, #32]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f6ff ac6d 	blt.w	8009410 <__strftime.isra.0+0x208>
 8009b36:	f000 f941 	bl	8009dbc <__tz_lock>
 8009b3a:	9b02      	ldr	r3, [sp, #8]
 8009b3c:	b90b      	cbnz	r3, 8009b42 <__strftime.isra.0+0x93a>
 8009b3e:	f000 f949 	bl	8009dd4 <_tzset_unlocked>
 8009b42:	6a33      	ldr	r3, [r6, #32]
 8009b44:	4a18      	ldr	r2, [pc, #96]	; (8009ba8 <__strftime.isra.0+0x9a0>)
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfd4      	ite	le
 8009b4a:	2300      	movle	r3, #0
 8009b4c:	2301      	movgt	r3, #1
 8009b4e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8009b52:	4648      	mov	r0, r9
 8009b54:	f7f6 fafa 	bl	800014c <strlen>
 8009b58:	f109 39ff 	add.w	r9, r9, #4294967295
 8009b5c:	4420      	add	r0, r4
 8009b5e:	1e6b      	subs	r3, r5, #1
 8009b60:	42a0      	cmp	r0, r4
 8009b62:	d102      	bne.n	8009b6a <__strftime.isra.0+0x962>
 8009b64:	f000 f930 	bl	8009dc8 <__tz_unlock>
 8009b68:	e7de      	b.n	8009b28 <__strftime.isra.0+0x920>
 8009b6a:	42a3      	cmp	r3, r4
 8009b6c:	d904      	bls.n	8009b78 <__strftime.isra.0+0x970>
 8009b6e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009b72:	553a      	strb	r2, [r7, r4]
 8009b74:	3401      	adds	r4, #1
 8009b76:	e7f3      	b.n	8009b60 <__strftime.isra.0+0x958>
 8009b78:	f000 f926 	bl	8009dc8 <__tz_unlock>
 8009b7c:	f7ff bb76 	b.w	800926c <__strftime.isra.0+0x64>
 8009b80:	1e6b      	subs	r3, r5, #1
 8009b82:	429c      	cmp	r4, r3
 8009b84:	f4bf ab72 	bcs.w	800926c <__strftime.isra.0+0x64>
 8009b88:	2325      	movs	r3, #37	; 0x25
 8009b8a:	e630      	b.n	80097ee <__strftime.isra.0+0x5e6>
 8009b8c:	b10d      	cbz	r5, 8009b92 <__strftime.isra.0+0x98a>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	553b      	strb	r3, [r7, r4]
 8009b92:	4620      	mov	r0, r4
 8009b94:	b00f      	add	sp, #60	; 0x3c
 8009b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9a:	bf00      	nop
 8009b9c:	fffff894 	.word	0xfffff894
 8009ba0:	0800bbac 	.word	0x0800bbac
 8009ba4:	0800bbc9 	.word	0x0800bbc9
 8009ba8:	2000013c 	.word	0x2000013c

08009bac <strftime>:
 8009bac:	f7ff bb2c 	b.w	8009208 <__strftime.isra.0>

08009bb0 <_strtol_l.constprop.0>:
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb6:	4680      	mov	r8, r0
 8009bb8:	d001      	beq.n	8009bbe <_strtol_l.constprop.0+0xe>
 8009bba:	2b24      	cmp	r3, #36	; 0x24
 8009bbc:	d906      	bls.n	8009bcc <_strtol_l.constprop.0+0x1c>
 8009bbe:	f7fe fdb1 	bl	8008724 <__errno>
 8009bc2:	2316      	movs	r3, #22
 8009bc4:	6003      	str	r3, [r0, #0]
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bcc:	460d      	mov	r5, r1
 8009bce:	4f35      	ldr	r7, [pc, #212]	; (8009ca4 <_strtol_l.constprop.0+0xf4>)
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bd6:	5de6      	ldrb	r6, [r4, r7]
 8009bd8:	f016 0608 	ands.w	r6, r6, #8
 8009bdc:	d1f8      	bne.n	8009bd0 <_strtol_l.constprop.0+0x20>
 8009bde:	2c2d      	cmp	r4, #45	; 0x2d
 8009be0:	d12f      	bne.n	8009c42 <_strtol_l.constprop.0+0x92>
 8009be2:	2601      	movs	r6, #1
 8009be4:	782c      	ldrb	r4, [r5, #0]
 8009be6:	1c85      	adds	r5, r0, #2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d057      	beq.n	8009c9c <_strtol_l.constprop.0+0xec>
 8009bec:	2b10      	cmp	r3, #16
 8009bee:	d109      	bne.n	8009c04 <_strtol_l.constprop.0+0x54>
 8009bf0:	2c30      	cmp	r4, #48	; 0x30
 8009bf2:	d107      	bne.n	8009c04 <_strtol_l.constprop.0+0x54>
 8009bf4:	7828      	ldrb	r0, [r5, #0]
 8009bf6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009bfa:	2858      	cmp	r0, #88	; 0x58
 8009bfc:	d149      	bne.n	8009c92 <_strtol_l.constprop.0+0xe2>
 8009bfe:	2310      	movs	r3, #16
 8009c00:	786c      	ldrb	r4, [r5, #1]
 8009c02:	3502      	adds	r5, #2
 8009c04:	2700      	movs	r7, #0
 8009c06:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009c0a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009c0e:	fbbe f9f3 	udiv	r9, lr, r3
 8009c12:	4638      	mov	r0, r7
 8009c14:	fb03 ea19 	mls	sl, r3, r9, lr
 8009c18:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009c1c:	f1bc 0f09 	cmp.w	ip, #9
 8009c20:	d814      	bhi.n	8009c4c <_strtol_l.constprop.0+0x9c>
 8009c22:	4664      	mov	r4, ip
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	dd22      	ble.n	8009c6e <_strtol_l.constprop.0+0xbe>
 8009c28:	2f00      	cmp	r7, #0
 8009c2a:	db1d      	blt.n	8009c68 <_strtol_l.constprop.0+0xb8>
 8009c2c:	4581      	cmp	r9, r0
 8009c2e:	d31b      	bcc.n	8009c68 <_strtol_l.constprop.0+0xb8>
 8009c30:	d101      	bne.n	8009c36 <_strtol_l.constprop.0+0x86>
 8009c32:	45a2      	cmp	sl, r4
 8009c34:	db18      	blt.n	8009c68 <_strtol_l.constprop.0+0xb8>
 8009c36:	2701      	movs	r7, #1
 8009c38:	fb00 4003 	mla	r0, r0, r3, r4
 8009c3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c40:	e7ea      	b.n	8009c18 <_strtol_l.constprop.0+0x68>
 8009c42:	2c2b      	cmp	r4, #43	; 0x2b
 8009c44:	bf04      	itt	eq
 8009c46:	782c      	ldrbeq	r4, [r5, #0]
 8009c48:	1c85      	addeq	r5, r0, #2
 8009c4a:	e7cd      	b.n	8009be8 <_strtol_l.constprop.0+0x38>
 8009c4c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009c50:	f1bc 0f19 	cmp.w	ip, #25
 8009c54:	d801      	bhi.n	8009c5a <_strtol_l.constprop.0+0xaa>
 8009c56:	3c37      	subs	r4, #55	; 0x37
 8009c58:	e7e4      	b.n	8009c24 <_strtol_l.constprop.0+0x74>
 8009c5a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009c5e:	f1bc 0f19 	cmp.w	ip, #25
 8009c62:	d804      	bhi.n	8009c6e <_strtol_l.constprop.0+0xbe>
 8009c64:	3c57      	subs	r4, #87	; 0x57
 8009c66:	e7dd      	b.n	8009c24 <_strtol_l.constprop.0+0x74>
 8009c68:	f04f 37ff 	mov.w	r7, #4294967295
 8009c6c:	e7e6      	b.n	8009c3c <_strtol_l.constprop.0+0x8c>
 8009c6e:	2f00      	cmp	r7, #0
 8009c70:	da07      	bge.n	8009c82 <_strtol_l.constprop.0+0xd2>
 8009c72:	2322      	movs	r3, #34	; 0x22
 8009c74:	4670      	mov	r0, lr
 8009c76:	f8c8 3000 	str.w	r3, [r8]
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	d0a4      	beq.n	8009bc8 <_strtol_l.constprop.0+0x18>
 8009c7e:	1e69      	subs	r1, r5, #1
 8009c80:	e005      	b.n	8009c8e <_strtol_l.constprop.0+0xde>
 8009c82:	b106      	cbz	r6, 8009c86 <_strtol_l.constprop.0+0xd6>
 8009c84:	4240      	negs	r0, r0
 8009c86:	2a00      	cmp	r2, #0
 8009c88:	d09e      	beq.n	8009bc8 <_strtol_l.constprop.0+0x18>
 8009c8a:	2f00      	cmp	r7, #0
 8009c8c:	d1f7      	bne.n	8009c7e <_strtol_l.constprop.0+0xce>
 8009c8e:	6011      	str	r1, [r2, #0]
 8009c90:	e79a      	b.n	8009bc8 <_strtol_l.constprop.0+0x18>
 8009c92:	2430      	movs	r4, #48	; 0x30
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1b5      	bne.n	8009c04 <_strtol_l.constprop.0+0x54>
 8009c98:	2308      	movs	r3, #8
 8009c9a:	e7b3      	b.n	8009c04 <_strtol_l.constprop.0+0x54>
 8009c9c:	2c30      	cmp	r4, #48	; 0x30
 8009c9e:	d0a9      	beq.n	8009bf4 <_strtol_l.constprop.0+0x44>
 8009ca0:	230a      	movs	r3, #10
 8009ca2:	e7af      	b.n	8009c04 <_strtol_l.constprop.0+0x54>
 8009ca4:	0800be39 	.word	0x0800be39

08009ca8 <_strtol_r>:
 8009ca8:	f7ff bf82 	b.w	8009bb0 <_strtol_l.constprop.0>

08009cac <strtol>:
 8009cac:	4613      	mov	r3, r2
 8009cae:	460a      	mov	r2, r1
 8009cb0:	4601      	mov	r1, r0
 8009cb2:	4802      	ldr	r0, [pc, #8]	; (8009cbc <strtol+0x10>)
 8009cb4:	6800      	ldr	r0, [r0, #0]
 8009cb6:	f7ff bf7b 	b.w	8009bb0 <_strtol_l.constprop.0>
 8009cba:	bf00      	nop
 8009cbc:	200000d8 	.word	0x200000d8

08009cc0 <_strtoul_l.constprop.0>:
 8009cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cc4:	4686      	mov	lr, r0
 8009cc6:	460d      	mov	r5, r1
 8009cc8:	4f35      	ldr	r7, [pc, #212]	; (8009da0 <_strtoul_l.constprop.0+0xe0>)
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cd0:	5de6      	ldrb	r6, [r4, r7]
 8009cd2:	f016 0608 	ands.w	r6, r6, #8
 8009cd6:	d1f8      	bne.n	8009cca <_strtoul_l.constprop.0+0xa>
 8009cd8:	2c2d      	cmp	r4, #45	; 0x2d
 8009cda:	d12f      	bne.n	8009d3c <_strtoul_l.constprop.0+0x7c>
 8009cdc:	2601      	movs	r6, #1
 8009cde:	782c      	ldrb	r4, [r5, #0]
 8009ce0:	1c85      	adds	r5, r0, #2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d057      	beq.n	8009d96 <_strtoul_l.constprop.0+0xd6>
 8009ce6:	2b10      	cmp	r3, #16
 8009ce8:	d109      	bne.n	8009cfe <_strtoul_l.constprop.0+0x3e>
 8009cea:	2c30      	cmp	r4, #48	; 0x30
 8009cec:	d107      	bne.n	8009cfe <_strtoul_l.constprop.0+0x3e>
 8009cee:	7828      	ldrb	r0, [r5, #0]
 8009cf0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009cf4:	2858      	cmp	r0, #88	; 0x58
 8009cf6:	d149      	bne.n	8009d8c <_strtoul_l.constprop.0+0xcc>
 8009cf8:	2310      	movs	r3, #16
 8009cfa:	786c      	ldrb	r4, [r5, #1]
 8009cfc:	3502      	adds	r5, #2
 8009cfe:	f04f 38ff 	mov.w	r8, #4294967295
 8009d02:	fbb8 f8f3 	udiv	r8, r8, r3
 8009d06:	2700      	movs	r7, #0
 8009d08:	fb03 f908 	mul.w	r9, r3, r8
 8009d0c:	4638      	mov	r0, r7
 8009d0e:	ea6f 0909 	mvn.w	r9, r9
 8009d12:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009d16:	f1bc 0f09 	cmp.w	ip, #9
 8009d1a:	d814      	bhi.n	8009d46 <_strtoul_l.constprop.0+0x86>
 8009d1c:	4664      	mov	r4, ip
 8009d1e:	42a3      	cmp	r3, r4
 8009d20:	dd22      	ble.n	8009d68 <_strtoul_l.constprop.0+0xa8>
 8009d22:	2f00      	cmp	r7, #0
 8009d24:	db1d      	blt.n	8009d62 <_strtoul_l.constprop.0+0xa2>
 8009d26:	4580      	cmp	r8, r0
 8009d28:	d31b      	bcc.n	8009d62 <_strtoul_l.constprop.0+0xa2>
 8009d2a:	d101      	bne.n	8009d30 <_strtoul_l.constprop.0+0x70>
 8009d2c:	45a1      	cmp	r9, r4
 8009d2e:	db18      	blt.n	8009d62 <_strtoul_l.constprop.0+0xa2>
 8009d30:	2701      	movs	r7, #1
 8009d32:	fb00 4003 	mla	r0, r0, r3, r4
 8009d36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d3a:	e7ea      	b.n	8009d12 <_strtoul_l.constprop.0+0x52>
 8009d3c:	2c2b      	cmp	r4, #43	; 0x2b
 8009d3e:	bf04      	itt	eq
 8009d40:	782c      	ldrbeq	r4, [r5, #0]
 8009d42:	1c85      	addeq	r5, r0, #2
 8009d44:	e7cd      	b.n	8009ce2 <_strtoul_l.constprop.0+0x22>
 8009d46:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009d4a:	f1bc 0f19 	cmp.w	ip, #25
 8009d4e:	d801      	bhi.n	8009d54 <_strtoul_l.constprop.0+0x94>
 8009d50:	3c37      	subs	r4, #55	; 0x37
 8009d52:	e7e4      	b.n	8009d1e <_strtoul_l.constprop.0+0x5e>
 8009d54:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009d58:	f1bc 0f19 	cmp.w	ip, #25
 8009d5c:	d804      	bhi.n	8009d68 <_strtoul_l.constprop.0+0xa8>
 8009d5e:	3c57      	subs	r4, #87	; 0x57
 8009d60:	e7dd      	b.n	8009d1e <_strtoul_l.constprop.0+0x5e>
 8009d62:	f04f 37ff 	mov.w	r7, #4294967295
 8009d66:	e7e6      	b.n	8009d36 <_strtoul_l.constprop.0+0x76>
 8009d68:	2f00      	cmp	r7, #0
 8009d6a:	da07      	bge.n	8009d7c <_strtoul_l.constprop.0+0xbc>
 8009d6c:	2322      	movs	r3, #34	; 0x22
 8009d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d72:	f8ce 3000 	str.w	r3, [lr]
 8009d76:	b932      	cbnz	r2, 8009d86 <_strtoul_l.constprop.0+0xc6>
 8009d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d7c:	b106      	cbz	r6, 8009d80 <_strtoul_l.constprop.0+0xc0>
 8009d7e:	4240      	negs	r0, r0
 8009d80:	2a00      	cmp	r2, #0
 8009d82:	d0f9      	beq.n	8009d78 <_strtoul_l.constprop.0+0xb8>
 8009d84:	b107      	cbz	r7, 8009d88 <_strtoul_l.constprop.0+0xc8>
 8009d86:	1e69      	subs	r1, r5, #1
 8009d88:	6011      	str	r1, [r2, #0]
 8009d8a:	e7f5      	b.n	8009d78 <_strtoul_l.constprop.0+0xb8>
 8009d8c:	2430      	movs	r4, #48	; 0x30
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1b5      	bne.n	8009cfe <_strtoul_l.constprop.0+0x3e>
 8009d92:	2308      	movs	r3, #8
 8009d94:	e7b3      	b.n	8009cfe <_strtoul_l.constprop.0+0x3e>
 8009d96:	2c30      	cmp	r4, #48	; 0x30
 8009d98:	d0a9      	beq.n	8009cee <_strtoul_l.constprop.0+0x2e>
 8009d9a:	230a      	movs	r3, #10
 8009d9c:	e7af      	b.n	8009cfe <_strtoul_l.constprop.0+0x3e>
 8009d9e:	bf00      	nop
 8009da0:	0800be39 	.word	0x0800be39

08009da4 <_strtoul_r>:
 8009da4:	f7ff bf8c 	b.w	8009cc0 <_strtoul_l.constprop.0>

08009da8 <strtoul>:
 8009da8:	4613      	mov	r3, r2
 8009daa:	460a      	mov	r2, r1
 8009dac:	4601      	mov	r1, r0
 8009dae:	4802      	ldr	r0, [pc, #8]	; (8009db8 <strtoul+0x10>)
 8009db0:	6800      	ldr	r0, [r0, #0]
 8009db2:	f7ff bf85 	b.w	8009cc0 <_strtoul_l.constprop.0>
 8009db6:	bf00      	nop
 8009db8:	200000d8 	.word	0x200000d8

08009dbc <__tz_lock>:
 8009dbc:	4801      	ldr	r0, [pc, #4]	; (8009dc4 <__tz_lock+0x8>)
 8009dbe:	f7fe bf49 	b.w	8008c54 <__retarget_lock_acquire>
 8009dc2:	bf00      	nop
 8009dc4:	200006b8 	.word	0x200006b8

08009dc8 <__tz_unlock>:
 8009dc8:	4801      	ldr	r0, [pc, #4]	; (8009dd0 <__tz_unlock+0x8>)
 8009dca:	f7fe bf45 	b.w	8008c58 <__retarget_lock_release>
 8009dce:	bf00      	nop
 8009dd0:	200006b8 	.word	0x200006b8

08009dd4 <_tzset_unlocked>:
 8009dd4:	4b01      	ldr	r3, [pc, #4]	; (8009ddc <_tzset_unlocked+0x8>)
 8009dd6:	6818      	ldr	r0, [r3, #0]
 8009dd8:	f000 b802 	b.w	8009de0 <_tzset_unlocked_r>
 8009ddc:	200000d8 	.word	0x200000d8

08009de0 <_tzset_unlocked_r>:
 8009de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	b08d      	sub	sp, #52	; 0x34
 8009de6:	4607      	mov	r7, r0
 8009de8:	f000 fbbe 	bl	800a568 <__gettzinfo>
 8009dec:	49b1      	ldr	r1, [pc, #708]	; (800a0b4 <_tzset_unlocked_r+0x2d4>)
 8009dee:	4605      	mov	r5, r0
 8009df0:	4638      	mov	r0, r7
 8009df2:	f000 fbb1 	bl	800a558 <_getenv_r>
 8009df6:	4eb0      	ldr	r6, [pc, #704]	; (800a0b8 <_tzset_unlocked_r+0x2d8>)
 8009df8:	4604      	mov	r4, r0
 8009dfa:	b970      	cbnz	r0, 8009e1a <_tzset_unlocked_r+0x3a>
 8009dfc:	4baf      	ldr	r3, [pc, #700]	; (800a0bc <_tzset_unlocked_r+0x2dc>)
 8009dfe:	4ab0      	ldr	r2, [pc, #704]	; (800a0c0 <_tzset_unlocked_r+0x2e0>)
 8009e00:	6018      	str	r0, [r3, #0]
 8009e02:	4bb0      	ldr	r3, [pc, #704]	; (800a0c4 <_tzset_unlocked_r+0x2e4>)
 8009e04:	6018      	str	r0, [r3, #0]
 8009e06:	4bb0      	ldr	r3, [pc, #704]	; (800a0c8 <_tzset_unlocked_r+0x2e8>)
 8009e08:	6830      	ldr	r0, [r6, #0]
 8009e0a:	e9c3 2200 	strd	r2, r2, [r3]
 8009e0e:	f000 fbd5 	bl	800a5bc <free>
 8009e12:	6034      	str	r4, [r6, #0]
 8009e14:	b00d      	add	sp, #52	; 0x34
 8009e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1a:	6831      	ldr	r1, [r6, #0]
 8009e1c:	2900      	cmp	r1, #0
 8009e1e:	d162      	bne.n	8009ee6 <_tzset_unlocked_r+0x106>
 8009e20:	6830      	ldr	r0, [r6, #0]
 8009e22:	f000 fbcb 	bl	800a5bc <free>
 8009e26:	4620      	mov	r0, r4
 8009e28:	f7f6 f990 	bl	800014c <strlen>
 8009e2c:	1c41      	adds	r1, r0, #1
 8009e2e:	4638      	mov	r0, r7
 8009e30:	f7fe ffea 	bl	8008e08 <_malloc_r>
 8009e34:	6030      	str	r0, [r6, #0]
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d15a      	bne.n	8009ef0 <_tzset_unlocked_r+0x110>
 8009e3a:	7823      	ldrb	r3, [r4, #0]
 8009e3c:	ae0a      	add	r6, sp, #40	; 0x28
 8009e3e:	2b3a      	cmp	r3, #58	; 0x3a
 8009e40:	bf08      	it	eq
 8009e42:	3401      	addeq	r4, #1
 8009e44:	4633      	mov	r3, r6
 8009e46:	4620      	mov	r0, r4
 8009e48:	4aa0      	ldr	r2, [pc, #640]	; (800a0cc <_tzset_unlocked_r+0x2ec>)
 8009e4a:	49a1      	ldr	r1, [pc, #644]	; (800a0d0 <_tzset_unlocked_r+0x2f0>)
 8009e4c:	f000 ffa6 	bl	800ad9c <siscanf>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	dddf      	ble.n	8009e14 <_tzset_unlocked_r+0x34>
 8009e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e56:	18e7      	adds	r7, r4, r3
 8009e58:	5ce3      	ldrb	r3, [r4, r3]
 8009e5a:	2b2d      	cmp	r3, #45	; 0x2d
 8009e5c:	d14c      	bne.n	8009ef8 <_tzset_unlocked_r+0x118>
 8009e5e:	f04f 38ff 	mov.w	r8, #4294967295
 8009e62:	3701      	adds	r7, #1
 8009e64:	2400      	movs	r4, #0
 8009e66:	f10d 0a20 	add.w	sl, sp, #32
 8009e6a:	f10d 0b1e 	add.w	fp, sp, #30
 8009e6e:	4633      	mov	r3, r6
 8009e70:	4638      	mov	r0, r7
 8009e72:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8009e76:	4997      	ldr	r1, [pc, #604]	; (800a0d4 <_tzset_unlocked_r+0x2f4>)
 8009e78:	9603      	str	r6, [sp, #12]
 8009e7a:	f8cd b000 	str.w	fp, [sp]
 8009e7e:	aa07      	add	r2, sp, #28
 8009e80:	f8ad 401e 	strh.w	r4, [sp, #30]
 8009e84:	f8ad 4020 	strh.w	r4, [sp, #32]
 8009e88:	f000 ff88 	bl	800ad9c <siscanf>
 8009e8c:	42a0      	cmp	r0, r4
 8009e8e:	ddc1      	ble.n	8009e14 <_tzset_unlocked_r+0x34>
 8009e90:	213c      	movs	r1, #60	; 0x3c
 8009e92:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009e96:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009e9a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800a0d8 <_tzset_unlocked_r+0x2f8>
 8009e9e:	fb01 3302 	mla	r3, r1, r2, r3
 8009ea2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009ea6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009eaa:	fb01 3302 	mla	r3, r1, r2, r3
 8009eae:	fb08 f303 	mul.w	r3, r8, r3
 8009eb2:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800a0c8 <_tzset_unlocked_r+0x2e8>
 8009eb6:	62ab      	str	r3, [r5, #40]	; 0x28
 8009eb8:	4b84      	ldr	r3, [pc, #528]	; (800a0cc <_tzset_unlocked_r+0x2ec>)
 8009eba:	464a      	mov	r2, r9
 8009ebc:	f8c8 3000 	str.w	r3, [r8]
 8009ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ec2:	4983      	ldr	r1, [pc, #524]	; (800a0d0 <_tzset_unlocked_r+0x2f0>)
 8009ec4:	441f      	add	r7, r3
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	4633      	mov	r3, r6
 8009eca:	f000 ff67 	bl	800ad9c <siscanf>
 8009ece:	42a0      	cmp	r0, r4
 8009ed0:	dc18      	bgt.n	8009f04 <_tzset_unlocked_r+0x124>
 8009ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ed6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009ed8:	f8c8 3004 	str.w	r3, [r8, #4]
 8009edc:	4b77      	ldr	r3, [pc, #476]	; (800a0bc <_tzset_unlocked_r+0x2dc>)
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	4b78      	ldr	r3, [pc, #480]	; (800a0c4 <_tzset_unlocked_r+0x2e4>)
 8009ee2:	601c      	str	r4, [r3, #0]
 8009ee4:	e796      	b.n	8009e14 <_tzset_unlocked_r+0x34>
 8009ee6:	f7f6 f939 	bl	800015c <strcmp>
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d198      	bne.n	8009e20 <_tzset_unlocked_r+0x40>
 8009eee:	e791      	b.n	8009e14 <_tzset_unlocked_r+0x34>
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	f000 ff7d 	bl	800adf0 <strcpy>
 8009ef6:	e7a0      	b.n	8009e3a <_tzset_unlocked_r+0x5a>
 8009ef8:	2b2b      	cmp	r3, #43	; 0x2b
 8009efa:	f04f 0801 	mov.w	r8, #1
 8009efe:	bf08      	it	eq
 8009f00:	3701      	addeq	r7, #1
 8009f02:	e7af      	b.n	8009e64 <_tzset_unlocked_r+0x84>
 8009f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f06:	f8c8 9004 	str.w	r9, [r8, #4]
 8009f0a:	18fc      	adds	r4, r7, r3
 8009f0c:	5cfb      	ldrb	r3, [r7, r3]
 8009f0e:	2b2d      	cmp	r3, #45	; 0x2d
 8009f10:	f040 808c 	bne.w	800a02c <_tzset_unlocked_r+0x24c>
 8009f14:	f04f 37ff 	mov.w	r7, #4294967295
 8009f18:	3401      	adds	r4, #1
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009f22:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009f26:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f2c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009f30:	4633      	mov	r3, r6
 8009f32:	e9cd b600 	strd	fp, r6, [sp]
 8009f36:	4967      	ldr	r1, [pc, #412]	; (800a0d4 <_tzset_unlocked_r+0x2f4>)
 8009f38:	aa07      	add	r2, sp, #28
 8009f3a:	f000 ff2f 	bl	800ad9c <siscanf>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	dc7a      	bgt.n	800a038 <_tzset_unlocked_r+0x258>
 8009f42:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009f44:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8009f48:	462f      	mov	r7, r5
 8009f4a:	f04f 0900 	mov.w	r9, #0
 8009f4e:	652b      	str	r3, [r5, #80]	; 0x50
 8009f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f52:	441c      	add	r4, r3
 8009f54:	7823      	ldrb	r3, [r4, #0]
 8009f56:	2b2c      	cmp	r3, #44	; 0x2c
 8009f58:	bf08      	it	eq
 8009f5a:	3401      	addeq	r4, #1
 8009f5c:	f894 8000 	ldrb.w	r8, [r4]
 8009f60:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009f64:	d17a      	bne.n	800a05c <_tzset_unlocked_r+0x27c>
 8009f66:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009f6a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8009f6e:	ab09      	add	r3, sp, #36	; 0x24
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	4620      	mov	r0, r4
 8009f74:	4633      	mov	r3, r6
 8009f76:	4959      	ldr	r1, [pc, #356]	; (800a0dc <_tzset_unlocked_r+0x2fc>)
 8009f78:	9603      	str	r6, [sp, #12]
 8009f7a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8009f7e:	f000 ff0d 	bl	800ad9c <siscanf>
 8009f82:	2803      	cmp	r0, #3
 8009f84:	f47f af46 	bne.w	8009e14 <_tzset_unlocked_r+0x34>
 8009f88:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8009f8c:	1e4b      	subs	r3, r1, #1
 8009f8e:	2b0b      	cmp	r3, #11
 8009f90:	f63f af40 	bhi.w	8009e14 <_tzset_unlocked_r+0x34>
 8009f94:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009f98:	1e53      	subs	r3, r2, #1
 8009f9a:	2b04      	cmp	r3, #4
 8009f9c:	f63f af3a 	bhi.w	8009e14 <_tzset_unlocked_r+0x34>
 8009fa0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009fa4:	2b06      	cmp	r3, #6
 8009fa6:	f63f af35 	bhi.w	8009e14 <_tzset_unlocked_r+0x34>
 8009faa:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009fae:	f887 8008 	strb.w	r8, [r7, #8]
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb6:	eb04 0803 	add.w	r8, r4, r3
 8009fba:	2302      	movs	r3, #2
 8009fbc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009fc6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009fca:	930a      	str	r3, [sp, #40]	; 0x28
 8009fcc:	f898 3000 	ldrb.w	r3, [r8]
 8009fd0:	2b2f      	cmp	r3, #47	; 0x2f
 8009fd2:	d109      	bne.n	8009fe8 <_tzset_unlocked_r+0x208>
 8009fd4:	4633      	mov	r3, r6
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009fdc:	e9cd b600 	strd	fp, r6, [sp]
 8009fe0:	493f      	ldr	r1, [pc, #252]	; (800a0e0 <_tzset_unlocked_r+0x300>)
 8009fe2:	aa07      	add	r2, sp, #28
 8009fe4:	f000 feda 	bl	800ad9c <siscanf>
 8009fe8:	213c      	movs	r1, #60	; 0x3c
 8009fea:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009fee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009ff2:	3728      	adds	r7, #40	; 0x28
 8009ff4:	fb01 3302 	mla	r3, r1, r2, r3
 8009ff8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009ffc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a000:	fb01 3302 	mla	r3, r1, r2, r3
 800a004:	f847 3c10 	str.w	r3, [r7, #-16]
 800a008:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a00a:	4444      	add	r4, r8
 800a00c:	f1b9 0f00 	cmp.w	r9, #0
 800a010:	d021      	beq.n	800a056 <_tzset_unlocked_r+0x276>
 800a012:	6868      	ldr	r0, [r5, #4]
 800a014:	f000 ff08 	bl	800ae28 <__tzcalc_limits>
 800a018:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a01a:	4b28      	ldr	r3, [pc, #160]	; (800a0bc <_tzset_unlocked_r+0x2dc>)
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a020:	1a9b      	subs	r3, r3, r2
 800a022:	bf18      	it	ne
 800a024:	2301      	movne	r3, #1
 800a026:	4a27      	ldr	r2, [pc, #156]	; (800a0c4 <_tzset_unlocked_r+0x2e4>)
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	e6f3      	b.n	8009e14 <_tzset_unlocked_r+0x34>
 800a02c:	2b2b      	cmp	r3, #43	; 0x2b
 800a02e:	f04f 0701 	mov.w	r7, #1
 800a032:	bf08      	it	eq
 800a034:	3401      	addeq	r4, #1
 800a036:	e770      	b.n	8009f1a <_tzset_unlocked_r+0x13a>
 800a038:	213c      	movs	r1, #60	; 0x3c
 800a03a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a03e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a042:	fb01 3302 	mla	r3, r1, r2, r3
 800a046:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a04a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a04e:	fb01 3302 	mla	r3, r1, r2, r3
 800a052:	437b      	muls	r3, r7
 800a054:	e778      	b.n	8009f48 <_tzset_unlocked_r+0x168>
 800a056:	f04f 0901 	mov.w	r9, #1
 800a05a:	e77b      	b.n	8009f54 <_tzset_unlocked_r+0x174>
 800a05c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a060:	bf0a      	itet	eq
 800a062:	4643      	moveq	r3, r8
 800a064:	2344      	movne	r3, #68	; 0x44
 800a066:	3401      	addeq	r4, #1
 800a068:	220a      	movs	r2, #10
 800a06a:	4620      	mov	r0, r4
 800a06c:	a90b      	add	r1, sp, #44	; 0x2c
 800a06e:	9305      	str	r3, [sp, #20]
 800a070:	f7ff fe9a 	bl	8009da8 <strtoul>
 800a074:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a078:	9b05      	ldr	r3, [sp, #20]
 800a07a:	45a0      	cmp	r8, r4
 800a07c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a080:	d114      	bne.n	800a0ac <_tzset_unlocked_r+0x2cc>
 800a082:	234d      	movs	r3, #77	; 0x4d
 800a084:	f1b9 0f00 	cmp.w	r9, #0
 800a088:	d107      	bne.n	800a09a <_tzset_unlocked_r+0x2ba>
 800a08a:	2103      	movs	r1, #3
 800a08c:	722b      	strb	r3, [r5, #8]
 800a08e:	2302      	movs	r3, #2
 800a090:	f8c5 9014 	str.w	r9, [r5, #20]
 800a094:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a098:	e78f      	b.n	8009fba <_tzset_unlocked_r+0x1da>
 800a09a:	220b      	movs	r2, #11
 800a09c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a0aa:	e786      	b.n	8009fba <_tzset_unlocked_r+0x1da>
 800a0ac:	b280      	uxth	r0, r0
 800a0ae:	723b      	strb	r3, [r7, #8]
 800a0b0:	6178      	str	r0, [r7, #20]
 800a0b2:	e782      	b.n	8009fba <_tzset_unlocked_r+0x1da>
 800a0b4:	0800bdfc 	.word	0x0800bdfc
 800a0b8:	200006e0 	.word	0x200006e0
 800a0bc:	200006e8 	.word	0x200006e8
 800a0c0:	0800bdff 	.word	0x0800bdff
 800a0c4:	200006e4 	.word	0x200006e4
 800a0c8:	2000013c 	.word	0x2000013c
 800a0cc:	200006d3 	.word	0x200006d3
 800a0d0:	0800be03 	.word	0x0800be03
 800a0d4:	0800be26 	.word	0x0800be26
 800a0d8:	200006c8 	.word	0x200006c8
 800a0dc:	0800be12 	.word	0x0800be12
 800a0e0:	0800be25 	.word	0x0800be25

0800a0e4 <__swbuf_r>:
 800a0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e6:	460e      	mov	r6, r1
 800a0e8:	4614      	mov	r4, r2
 800a0ea:	4605      	mov	r5, r0
 800a0ec:	b118      	cbz	r0, 800a0f6 <__swbuf_r+0x12>
 800a0ee:	6983      	ldr	r3, [r0, #24]
 800a0f0:	b90b      	cbnz	r3, 800a0f6 <__swbuf_r+0x12>
 800a0f2:	f7fe fbbd 	bl	8008870 <__sinit>
 800a0f6:	4b21      	ldr	r3, [pc, #132]	; (800a17c <__swbuf_r+0x98>)
 800a0f8:	429c      	cmp	r4, r3
 800a0fa:	d12b      	bne.n	800a154 <__swbuf_r+0x70>
 800a0fc:	686c      	ldr	r4, [r5, #4]
 800a0fe:	69a3      	ldr	r3, [r4, #24]
 800a100:	60a3      	str	r3, [r4, #8]
 800a102:	89a3      	ldrh	r3, [r4, #12]
 800a104:	071a      	lsls	r2, r3, #28
 800a106:	d52f      	bpl.n	800a168 <__swbuf_r+0x84>
 800a108:	6923      	ldr	r3, [r4, #16]
 800a10a:	b36b      	cbz	r3, 800a168 <__swbuf_r+0x84>
 800a10c:	6923      	ldr	r3, [r4, #16]
 800a10e:	6820      	ldr	r0, [r4, #0]
 800a110:	b2f6      	uxtb	r6, r6
 800a112:	1ac0      	subs	r0, r0, r3
 800a114:	6963      	ldr	r3, [r4, #20]
 800a116:	4637      	mov	r7, r6
 800a118:	4283      	cmp	r3, r0
 800a11a:	dc04      	bgt.n	800a126 <__swbuf_r+0x42>
 800a11c:	4621      	mov	r1, r4
 800a11e:	4628      	mov	r0, r5
 800a120:	f000 f948 	bl	800a3b4 <_fflush_r>
 800a124:	bb30      	cbnz	r0, 800a174 <__swbuf_r+0x90>
 800a126:	68a3      	ldr	r3, [r4, #8]
 800a128:	3001      	adds	r0, #1
 800a12a:	3b01      	subs	r3, #1
 800a12c:	60a3      	str	r3, [r4, #8]
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	6022      	str	r2, [r4, #0]
 800a134:	701e      	strb	r6, [r3, #0]
 800a136:	6963      	ldr	r3, [r4, #20]
 800a138:	4283      	cmp	r3, r0
 800a13a:	d004      	beq.n	800a146 <__swbuf_r+0x62>
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	07db      	lsls	r3, r3, #31
 800a140:	d506      	bpl.n	800a150 <__swbuf_r+0x6c>
 800a142:	2e0a      	cmp	r6, #10
 800a144:	d104      	bne.n	800a150 <__swbuf_r+0x6c>
 800a146:	4621      	mov	r1, r4
 800a148:	4628      	mov	r0, r5
 800a14a:	f000 f933 	bl	800a3b4 <_fflush_r>
 800a14e:	b988      	cbnz	r0, 800a174 <__swbuf_r+0x90>
 800a150:	4638      	mov	r0, r7
 800a152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a154:	4b0a      	ldr	r3, [pc, #40]	; (800a180 <__swbuf_r+0x9c>)
 800a156:	429c      	cmp	r4, r3
 800a158:	d101      	bne.n	800a15e <__swbuf_r+0x7a>
 800a15a:	68ac      	ldr	r4, [r5, #8]
 800a15c:	e7cf      	b.n	800a0fe <__swbuf_r+0x1a>
 800a15e:	4b09      	ldr	r3, [pc, #36]	; (800a184 <__swbuf_r+0xa0>)
 800a160:	429c      	cmp	r4, r3
 800a162:	bf08      	it	eq
 800a164:	68ec      	ldreq	r4, [r5, #12]
 800a166:	e7ca      	b.n	800a0fe <__swbuf_r+0x1a>
 800a168:	4621      	mov	r1, r4
 800a16a:	4628      	mov	r0, r5
 800a16c:	f000 f81e 	bl	800a1ac <__swsetup_r>
 800a170:	2800      	cmp	r0, #0
 800a172:	d0cb      	beq.n	800a10c <__swbuf_r+0x28>
 800a174:	f04f 37ff 	mov.w	r7, #4294967295
 800a178:	e7ea      	b.n	800a150 <__swbuf_r+0x6c>
 800a17a:	bf00      	nop
 800a17c:	0800bb38 	.word	0x0800bb38
 800a180:	0800bb58 	.word	0x0800bb58
 800a184:	0800bb18 	.word	0x0800bb18

0800a188 <_write_r>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	4611      	mov	r1, r2
 800a190:	2200      	movs	r2, #0
 800a192:	4d05      	ldr	r5, [pc, #20]	; (800a1a8 <_write_r+0x20>)
 800a194:	602a      	str	r2, [r5, #0]
 800a196:	461a      	mov	r2, r3
 800a198:	f7fa ff81 	bl	800509e <_write>
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	d102      	bne.n	800a1a6 <_write_r+0x1e>
 800a1a0:	682b      	ldr	r3, [r5, #0]
 800a1a2:	b103      	cbz	r3, 800a1a6 <_write_r+0x1e>
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}
 800a1a8:	200006c4 	.word	0x200006c4

0800a1ac <__swsetup_r>:
 800a1ac:	4b32      	ldr	r3, [pc, #200]	; (800a278 <__swsetup_r+0xcc>)
 800a1ae:	b570      	push	{r4, r5, r6, lr}
 800a1b0:	681d      	ldr	r5, [r3, #0]
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	b125      	cbz	r5, 800a1c2 <__swsetup_r+0x16>
 800a1b8:	69ab      	ldr	r3, [r5, #24]
 800a1ba:	b913      	cbnz	r3, 800a1c2 <__swsetup_r+0x16>
 800a1bc:	4628      	mov	r0, r5
 800a1be:	f7fe fb57 	bl	8008870 <__sinit>
 800a1c2:	4b2e      	ldr	r3, [pc, #184]	; (800a27c <__swsetup_r+0xd0>)
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	d10f      	bne.n	800a1e8 <__swsetup_r+0x3c>
 800a1c8:	686c      	ldr	r4, [r5, #4]
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1d0:	0719      	lsls	r1, r3, #28
 800a1d2:	d42c      	bmi.n	800a22e <__swsetup_r+0x82>
 800a1d4:	06dd      	lsls	r5, r3, #27
 800a1d6:	d411      	bmi.n	800a1fc <__swsetup_r+0x50>
 800a1d8:	2309      	movs	r3, #9
 800a1da:	6033      	str	r3, [r6, #0]
 800a1dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e4:	81a3      	strh	r3, [r4, #12]
 800a1e6:	e03e      	b.n	800a266 <__swsetup_r+0xba>
 800a1e8:	4b25      	ldr	r3, [pc, #148]	; (800a280 <__swsetup_r+0xd4>)
 800a1ea:	429c      	cmp	r4, r3
 800a1ec:	d101      	bne.n	800a1f2 <__swsetup_r+0x46>
 800a1ee:	68ac      	ldr	r4, [r5, #8]
 800a1f0:	e7eb      	b.n	800a1ca <__swsetup_r+0x1e>
 800a1f2:	4b24      	ldr	r3, [pc, #144]	; (800a284 <__swsetup_r+0xd8>)
 800a1f4:	429c      	cmp	r4, r3
 800a1f6:	bf08      	it	eq
 800a1f8:	68ec      	ldreq	r4, [r5, #12]
 800a1fa:	e7e6      	b.n	800a1ca <__swsetup_r+0x1e>
 800a1fc:	0758      	lsls	r0, r3, #29
 800a1fe:	d512      	bpl.n	800a226 <__swsetup_r+0x7a>
 800a200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a202:	b141      	cbz	r1, 800a216 <__swsetup_r+0x6a>
 800a204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a208:	4299      	cmp	r1, r3
 800a20a:	d002      	beq.n	800a212 <__swsetup_r+0x66>
 800a20c:	4630      	mov	r0, r6
 800a20e:	f7fe fd93 	bl	8008d38 <_free_r>
 800a212:	2300      	movs	r3, #0
 800a214:	6363      	str	r3, [r4, #52]	; 0x34
 800a216:	89a3      	ldrh	r3, [r4, #12]
 800a218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a21c:	81a3      	strh	r3, [r4, #12]
 800a21e:	2300      	movs	r3, #0
 800a220:	6063      	str	r3, [r4, #4]
 800a222:	6923      	ldr	r3, [r4, #16]
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	f043 0308 	orr.w	r3, r3, #8
 800a22c:	81a3      	strh	r3, [r4, #12]
 800a22e:	6923      	ldr	r3, [r4, #16]
 800a230:	b94b      	cbnz	r3, 800a246 <__swsetup_r+0x9a>
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a23c:	d003      	beq.n	800a246 <__swsetup_r+0x9a>
 800a23e:	4621      	mov	r1, r4
 800a240:	4630      	mov	r0, r6
 800a242:	f7fe fd31 	bl	8008ca8 <__smakebuf_r>
 800a246:	89a0      	ldrh	r0, [r4, #12]
 800a248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a24c:	f010 0301 	ands.w	r3, r0, #1
 800a250:	d00a      	beq.n	800a268 <__swsetup_r+0xbc>
 800a252:	2300      	movs	r3, #0
 800a254:	60a3      	str	r3, [r4, #8]
 800a256:	6963      	ldr	r3, [r4, #20]
 800a258:	425b      	negs	r3, r3
 800a25a:	61a3      	str	r3, [r4, #24]
 800a25c:	6923      	ldr	r3, [r4, #16]
 800a25e:	b943      	cbnz	r3, 800a272 <__swsetup_r+0xc6>
 800a260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a264:	d1ba      	bne.n	800a1dc <__swsetup_r+0x30>
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	0781      	lsls	r1, r0, #30
 800a26a:	bf58      	it	pl
 800a26c:	6963      	ldrpl	r3, [r4, #20]
 800a26e:	60a3      	str	r3, [r4, #8]
 800a270:	e7f4      	b.n	800a25c <__swsetup_r+0xb0>
 800a272:	2000      	movs	r0, #0
 800a274:	e7f7      	b.n	800a266 <__swsetup_r+0xba>
 800a276:	bf00      	nop
 800a278:	200000d8 	.word	0x200000d8
 800a27c:	0800bb38 	.word	0x0800bb38
 800a280:	0800bb58 	.word	0x0800bb58
 800a284:	0800bb18 	.word	0x0800bb18

0800a288 <abs>:
 800a288:	2800      	cmp	r0, #0
 800a28a:	bfb8      	it	lt
 800a28c:	4240      	neglt	r0, r0
 800a28e:	4770      	bx	lr

0800a290 <_close_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	2300      	movs	r3, #0
 800a294:	4d05      	ldr	r5, [pc, #20]	; (800a2ac <_close_r+0x1c>)
 800a296:	4604      	mov	r4, r0
 800a298:	4608      	mov	r0, r1
 800a29a:	602b      	str	r3, [r5, #0]
 800a29c:	f7fa ff1b 	bl	80050d6 <_close>
 800a2a0:	1c43      	adds	r3, r0, #1
 800a2a2:	d102      	bne.n	800a2aa <_close_r+0x1a>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	b103      	cbz	r3, 800a2aa <_close_r+0x1a>
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	200006c4 	.word	0x200006c4

0800a2b0 <__sflush_r>:
 800a2b0:	898a      	ldrh	r2, [r1, #12]
 800a2b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	0710      	lsls	r0, r2, #28
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	d457      	bmi.n	800a36c <__sflush_r+0xbc>
 800a2bc:	684b      	ldr	r3, [r1, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dc04      	bgt.n	800a2cc <__sflush_r+0x1c>
 800a2c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	dc01      	bgt.n	800a2cc <__sflush_r+0x1c>
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2ce:	2e00      	cmp	r6, #0
 800a2d0:	d0fa      	beq.n	800a2c8 <__sflush_r+0x18>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2d8:	682f      	ldr	r7, [r5, #0]
 800a2da:	602b      	str	r3, [r5, #0]
 800a2dc:	d032      	beq.n	800a344 <__sflush_r+0x94>
 800a2de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2e0:	89a3      	ldrh	r3, [r4, #12]
 800a2e2:	075a      	lsls	r2, r3, #29
 800a2e4:	d505      	bpl.n	800a2f2 <__sflush_r+0x42>
 800a2e6:	6863      	ldr	r3, [r4, #4]
 800a2e8:	1ac0      	subs	r0, r0, r3
 800a2ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2ec:	b10b      	cbz	r3, 800a2f2 <__sflush_r+0x42>
 800a2ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2f0:	1ac0      	subs	r0, r0, r3
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	6a21      	ldr	r1, [r4, #32]
 800a2fc:	47b0      	blx	r6
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	d106      	bne.n	800a312 <__sflush_r+0x62>
 800a304:	6829      	ldr	r1, [r5, #0]
 800a306:	291d      	cmp	r1, #29
 800a308:	d82c      	bhi.n	800a364 <__sflush_r+0xb4>
 800a30a:	4a29      	ldr	r2, [pc, #164]	; (800a3b0 <__sflush_r+0x100>)
 800a30c:	40ca      	lsrs	r2, r1
 800a30e:	07d6      	lsls	r6, r2, #31
 800a310:	d528      	bpl.n	800a364 <__sflush_r+0xb4>
 800a312:	2200      	movs	r2, #0
 800a314:	6062      	str	r2, [r4, #4]
 800a316:	6922      	ldr	r2, [r4, #16]
 800a318:	04d9      	lsls	r1, r3, #19
 800a31a:	6022      	str	r2, [r4, #0]
 800a31c:	d504      	bpl.n	800a328 <__sflush_r+0x78>
 800a31e:	1c42      	adds	r2, r0, #1
 800a320:	d101      	bne.n	800a326 <__sflush_r+0x76>
 800a322:	682b      	ldr	r3, [r5, #0]
 800a324:	b903      	cbnz	r3, 800a328 <__sflush_r+0x78>
 800a326:	6560      	str	r0, [r4, #84]	; 0x54
 800a328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a32a:	602f      	str	r7, [r5, #0]
 800a32c:	2900      	cmp	r1, #0
 800a32e:	d0cb      	beq.n	800a2c8 <__sflush_r+0x18>
 800a330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a334:	4299      	cmp	r1, r3
 800a336:	d002      	beq.n	800a33e <__sflush_r+0x8e>
 800a338:	4628      	mov	r0, r5
 800a33a:	f7fe fcfd 	bl	8008d38 <_free_r>
 800a33e:	2000      	movs	r0, #0
 800a340:	6360      	str	r0, [r4, #52]	; 0x34
 800a342:	e7c2      	b.n	800a2ca <__sflush_r+0x1a>
 800a344:	6a21      	ldr	r1, [r4, #32]
 800a346:	2301      	movs	r3, #1
 800a348:	4628      	mov	r0, r5
 800a34a:	47b0      	blx	r6
 800a34c:	1c41      	adds	r1, r0, #1
 800a34e:	d1c7      	bne.n	800a2e0 <__sflush_r+0x30>
 800a350:	682b      	ldr	r3, [r5, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0c4      	beq.n	800a2e0 <__sflush_r+0x30>
 800a356:	2b1d      	cmp	r3, #29
 800a358:	d001      	beq.n	800a35e <__sflush_r+0xae>
 800a35a:	2b16      	cmp	r3, #22
 800a35c:	d101      	bne.n	800a362 <__sflush_r+0xb2>
 800a35e:	602f      	str	r7, [r5, #0]
 800a360:	e7b2      	b.n	800a2c8 <__sflush_r+0x18>
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a368:	81a3      	strh	r3, [r4, #12]
 800a36a:	e7ae      	b.n	800a2ca <__sflush_r+0x1a>
 800a36c:	690f      	ldr	r7, [r1, #16]
 800a36e:	2f00      	cmp	r7, #0
 800a370:	d0aa      	beq.n	800a2c8 <__sflush_r+0x18>
 800a372:	0793      	lsls	r3, r2, #30
 800a374:	bf18      	it	ne
 800a376:	2300      	movne	r3, #0
 800a378:	680e      	ldr	r6, [r1, #0]
 800a37a:	bf08      	it	eq
 800a37c:	694b      	ldreq	r3, [r1, #20]
 800a37e:	1bf6      	subs	r6, r6, r7
 800a380:	600f      	str	r7, [r1, #0]
 800a382:	608b      	str	r3, [r1, #8]
 800a384:	2e00      	cmp	r6, #0
 800a386:	dd9f      	ble.n	800a2c8 <__sflush_r+0x18>
 800a388:	4633      	mov	r3, r6
 800a38a:	463a      	mov	r2, r7
 800a38c:	4628      	mov	r0, r5
 800a38e:	6a21      	ldr	r1, [r4, #32]
 800a390:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a394:	47e0      	blx	ip
 800a396:	2800      	cmp	r0, #0
 800a398:	dc06      	bgt.n	800a3a8 <__sflush_r+0xf8>
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a4:	81a3      	strh	r3, [r4, #12]
 800a3a6:	e790      	b.n	800a2ca <__sflush_r+0x1a>
 800a3a8:	4407      	add	r7, r0
 800a3aa:	1a36      	subs	r6, r6, r0
 800a3ac:	e7ea      	b.n	800a384 <__sflush_r+0xd4>
 800a3ae:	bf00      	nop
 800a3b0:	20400001 	.word	0x20400001

0800a3b4 <_fflush_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	690b      	ldr	r3, [r1, #16]
 800a3b8:	4605      	mov	r5, r0
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	b913      	cbnz	r3, 800a3c4 <_fflush_r+0x10>
 800a3be:	2500      	movs	r5, #0
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}
 800a3c4:	b118      	cbz	r0, 800a3ce <_fflush_r+0x1a>
 800a3c6:	6983      	ldr	r3, [r0, #24]
 800a3c8:	b90b      	cbnz	r3, 800a3ce <_fflush_r+0x1a>
 800a3ca:	f7fe fa51 	bl	8008870 <__sinit>
 800a3ce:	4b14      	ldr	r3, [pc, #80]	; (800a420 <_fflush_r+0x6c>)
 800a3d0:	429c      	cmp	r4, r3
 800a3d2:	d11b      	bne.n	800a40c <_fflush_r+0x58>
 800a3d4:	686c      	ldr	r4, [r5, #4]
 800a3d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d0ef      	beq.n	800a3be <_fflush_r+0xa>
 800a3de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3e0:	07d0      	lsls	r0, r2, #31
 800a3e2:	d404      	bmi.n	800a3ee <_fflush_r+0x3a>
 800a3e4:	0599      	lsls	r1, r3, #22
 800a3e6:	d402      	bmi.n	800a3ee <_fflush_r+0x3a>
 800a3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ea:	f7fe fc34 	bl	8008c56 <__retarget_lock_acquire_recursive>
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	f7ff ff5d 	bl	800a2b0 <__sflush_r>
 800a3f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	07da      	lsls	r2, r3, #31
 800a3fc:	d4e0      	bmi.n	800a3c0 <_fflush_r+0xc>
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	059b      	lsls	r3, r3, #22
 800a402:	d4dd      	bmi.n	800a3c0 <_fflush_r+0xc>
 800a404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a406:	f7fe fc28 	bl	8008c5a <__retarget_lock_release_recursive>
 800a40a:	e7d9      	b.n	800a3c0 <_fflush_r+0xc>
 800a40c:	4b05      	ldr	r3, [pc, #20]	; (800a424 <_fflush_r+0x70>)
 800a40e:	429c      	cmp	r4, r3
 800a410:	d101      	bne.n	800a416 <_fflush_r+0x62>
 800a412:	68ac      	ldr	r4, [r5, #8]
 800a414:	e7df      	b.n	800a3d6 <_fflush_r+0x22>
 800a416:	4b04      	ldr	r3, [pc, #16]	; (800a428 <_fflush_r+0x74>)
 800a418:	429c      	cmp	r4, r3
 800a41a:	bf08      	it	eq
 800a41c:	68ec      	ldreq	r4, [r5, #12]
 800a41e:	e7da      	b.n	800a3d6 <_fflush_r+0x22>
 800a420:	0800bb38 	.word	0x0800bb38
 800a424:	0800bb58 	.word	0x0800bb58
 800a428:	0800bb18 	.word	0x0800bb18

0800a42c <fflush>:
 800a42c:	4601      	mov	r1, r0
 800a42e:	b920      	cbnz	r0, 800a43a <fflush+0xe>
 800a430:	4b04      	ldr	r3, [pc, #16]	; (800a444 <fflush+0x18>)
 800a432:	4905      	ldr	r1, [pc, #20]	; (800a448 <fflush+0x1c>)
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	f7fe bbc8 	b.w	8008bca <_fwalk_reent>
 800a43a:	4b04      	ldr	r3, [pc, #16]	; (800a44c <fflush+0x20>)
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	f7ff bfb9 	b.w	800a3b4 <_fflush_r>
 800a442:	bf00      	nop
 800a444:	0800bb78 	.word	0x0800bb78
 800a448:	0800a3b5 	.word	0x0800a3b5
 800a44c:	200000d8 	.word	0x200000d8

0800a450 <__sflags>:
 800a450:	780b      	ldrb	r3, [r1, #0]
 800a452:	b530      	push	{r4, r5, lr}
 800a454:	2b72      	cmp	r3, #114	; 0x72
 800a456:	d022      	beq.n	800a49e <__sflags+0x4e>
 800a458:	2b77      	cmp	r3, #119	; 0x77
 800a45a:	d024      	beq.n	800a4a6 <__sflags+0x56>
 800a45c:	2b61      	cmp	r3, #97	; 0x61
 800a45e:	d027      	beq.n	800a4b0 <__sflags+0x60>
 800a460:	2316      	movs	r3, #22
 800a462:	6003      	str	r3, [r0, #0]
 800a464:	2000      	movs	r0, #0
 800a466:	bd30      	pop	{r4, r5, pc}
 800a468:	2d62      	cmp	r5, #98	; 0x62
 800a46a:	d012      	beq.n	800a492 <__sflags+0x42>
 800a46c:	2d78      	cmp	r5, #120	; 0x78
 800a46e:	d013      	beq.n	800a498 <__sflags+0x48>
 800a470:	2d2b      	cmp	r5, #43	; 0x2b
 800a472:	d107      	bne.n	800a484 <__sflags+0x34>
 800a474:	f020 001c 	bic.w	r0, r0, #28
 800a478:	f023 0303 	bic.w	r3, r3, #3
 800a47c:	f040 0010 	orr.w	r0, r0, #16
 800a480:	f043 0302 	orr.w	r3, r3, #2
 800a484:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a488:	2d00      	cmp	r5, #0
 800a48a:	d1ed      	bne.n	800a468 <__sflags+0x18>
 800a48c:	4323      	orrs	r3, r4
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	e7e9      	b.n	800a466 <__sflags+0x16>
 800a492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a496:	e7f5      	b.n	800a484 <__sflags+0x34>
 800a498:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a49c:	e7f2      	b.n	800a484 <__sflags+0x34>
 800a49e:	2400      	movs	r4, #0
 800a4a0:	2004      	movs	r0, #4
 800a4a2:	4623      	mov	r3, r4
 800a4a4:	e7ee      	b.n	800a484 <__sflags+0x34>
 800a4a6:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	2008      	movs	r0, #8
 800a4ae:	e7e9      	b.n	800a484 <__sflags+0x34>
 800a4b0:	f44f 7402 	mov.w	r4, #520	; 0x208
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a4ba:	e7e3      	b.n	800a484 <__sflags+0x34>

0800a4bc <_fstat_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	2300      	movs	r3, #0
 800a4c0:	4d06      	ldr	r5, [pc, #24]	; (800a4dc <_fstat_r+0x20>)
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	4608      	mov	r0, r1
 800a4c6:	4611      	mov	r1, r2
 800a4c8:	602b      	str	r3, [r5, #0]
 800a4ca:	f7fa fe0f 	bl	80050ec <_fstat>
 800a4ce:	1c43      	adds	r3, r0, #1
 800a4d0:	d102      	bne.n	800a4d8 <_fstat_r+0x1c>
 800a4d2:	682b      	ldr	r3, [r5, #0]
 800a4d4:	b103      	cbz	r3, 800a4d8 <_fstat_r+0x1c>
 800a4d6:	6023      	str	r3, [r4, #0]
 800a4d8:	bd38      	pop	{r3, r4, r5, pc}
 800a4da:	bf00      	nop
 800a4dc:	200006c4 	.word	0x200006c4

0800a4e0 <_findenv_r>:
 800a4e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800a554 <_findenv_r+0x74>
 800a4e8:	4607      	mov	r7, r0
 800a4ea:	4689      	mov	r9, r1
 800a4ec:	4616      	mov	r6, r2
 800a4ee:	f000 fd45 	bl	800af7c <__env_lock>
 800a4f2:	f8da 4000 	ldr.w	r4, [sl]
 800a4f6:	b134      	cbz	r4, 800a506 <_findenv_r+0x26>
 800a4f8:	464b      	mov	r3, r9
 800a4fa:	4698      	mov	r8, r3
 800a4fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a500:	b13a      	cbz	r2, 800a512 <_findenv_r+0x32>
 800a502:	2a3d      	cmp	r2, #61	; 0x3d
 800a504:	d1f9      	bne.n	800a4fa <_findenv_r+0x1a>
 800a506:	4638      	mov	r0, r7
 800a508:	f000 fd3e 	bl	800af88 <__env_unlock>
 800a50c:	2000      	movs	r0, #0
 800a50e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a512:	eba8 0809 	sub.w	r8, r8, r9
 800a516:	46a3      	mov	fp, r4
 800a518:	f854 0b04 	ldr.w	r0, [r4], #4
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d0f2      	beq.n	800a506 <_findenv_r+0x26>
 800a520:	4642      	mov	r2, r8
 800a522:	4649      	mov	r1, r9
 800a524:	f000 fc6c 	bl	800ae00 <strncmp>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d1f4      	bne.n	800a516 <_findenv_r+0x36>
 800a52c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a530:	eb03 0508 	add.w	r5, r3, r8
 800a534:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a538:	2b3d      	cmp	r3, #61	; 0x3d
 800a53a:	d1ec      	bne.n	800a516 <_findenv_r+0x36>
 800a53c:	f8da 3000 	ldr.w	r3, [sl]
 800a540:	4638      	mov	r0, r7
 800a542:	ebab 0303 	sub.w	r3, fp, r3
 800a546:	109b      	asrs	r3, r3, #2
 800a548:	6033      	str	r3, [r6, #0]
 800a54a:	f000 fd1d 	bl	800af88 <__env_unlock>
 800a54e:	1c68      	adds	r0, r5, #1
 800a550:	e7dd      	b.n	800a50e <_findenv_r+0x2e>
 800a552:	bf00      	nop
 800a554:	200000b4 	.word	0x200000b4

0800a558 <_getenv_r>:
 800a558:	b507      	push	{r0, r1, r2, lr}
 800a55a:	aa01      	add	r2, sp, #4
 800a55c:	f7ff ffc0 	bl	800a4e0 <_findenv_r>
 800a560:	b003      	add	sp, #12
 800a562:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a568 <__gettzinfo>:
 800a568:	4800      	ldr	r0, [pc, #0]	; (800a56c <__gettzinfo+0x4>)
 800a56a:	4770      	bx	lr
 800a56c:	20000148 	.word	0x20000148

0800a570 <_isatty_r>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	2300      	movs	r3, #0
 800a574:	4d05      	ldr	r5, [pc, #20]	; (800a58c <_isatty_r+0x1c>)
 800a576:	4604      	mov	r4, r0
 800a578:	4608      	mov	r0, r1
 800a57a:	602b      	str	r3, [r5, #0]
 800a57c:	f7fa fdc5 	bl	800510a <_isatty>
 800a580:	1c43      	adds	r3, r0, #1
 800a582:	d102      	bne.n	800a58a <_isatty_r+0x1a>
 800a584:	682b      	ldr	r3, [r5, #0]
 800a586:	b103      	cbz	r3, 800a58a <_isatty_r+0x1a>
 800a588:	6023      	str	r3, [r4, #0]
 800a58a:	bd38      	pop	{r3, r4, r5, pc}
 800a58c:	200006c4 	.word	0x200006c4

0800a590 <labs>:
 800a590:	2800      	cmp	r0, #0
 800a592:	bfb8      	it	lt
 800a594:	4240      	neglt	r0, r0
 800a596:	4770      	bx	lr

0800a598 <_lseek_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4604      	mov	r4, r0
 800a59c:	4608      	mov	r0, r1
 800a59e:	4611      	mov	r1, r2
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4d05      	ldr	r5, [pc, #20]	; (800a5b8 <_lseek_r+0x20>)
 800a5a4:	602a      	str	r2, [r5, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	f7fa fdb9 	bl	800511e <_lseek>
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	d102      	bne.n	800a5b6 <_lseek_r+0x1e>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	b103      	cbz	r3, 800a5b6 <_lseek_r+0x1e>
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	200006c4 	.word	0x200006c4

0800a5bc <free>:
 800a5bc:	4b02      	ldr	r3, [pc, #8]	; (800a5c8 <free+0xc>)
 800a5be:	4601      	mov	r1, r0
 800a5c0:	6818      	ldr	r0, [r3, #0]
 800a5c2:	f7fe bbb9 	b.w	8008d38 <_free_r>
 800a5c6:	bf00      	nop
 800a5c8:	200000d8 	.word	0x200000d8

0800a5cc <memcpy>:
 800a5cc:	440a      	add	r2, r1
 800a5ce:	4291      	cmp	r1, r2
 800a5d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5d4:	d100      	bne.n	800a5d8 <memcpy+0xc>
 800a5d6:	4770      	bx	lr
 800a5d8:	b510      	push	{r4, lr}
 800a5da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5de:	4291      	cmp	r1, r2
 800a5e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5e4:	d1f9      	bne.n	800a5da <memcpy+0xe>
 800a5e6:	bd10      	pop	{r4, pc}

0800a5e8 <__malloc_lock>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	; (800a5f0 <__malloc_lock+0x8>)
 800a5ea:	f7fe bb34 	b.w	8008c56 <__retarget_lock_acquire_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	200006b5 	.word	0x200006b5

0800a5f4 <__malloc_unlock>:
 800a5f4:	4801      	ldr	r0, [pc, #4]	; (800a5fc <__malloc_unlock+0x8>)
 800a5f6:	f7fe bb30 	b.w	8008c5a <__retarget_lock_release_recursive>
 800a5fa:	bf00      	nop
 800a5fc:	200006b5 	.word	0x200006b5

0800a600 <__ssputs_r>:
 800a600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a604:	688e      	ldr	r6, [r1, #8]
 800a606:	4682      	mov	sl, r0
 800a608:	429e      	cmp	r6, r3
 800a60a:	460c      	mov	r4, r1
 800a60c:	4690      	mov	r8, r2
 800a60e:	461f      	mov	r7, r3
 800a610:	d838      	bhi.n	800a684 <__ssputs_r+0x84>
 800a612:	898a      	ldrh	r2, [r1, #12]
 800a614:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a618:	d032      	beq.n	800a680 <__ssputs_r+0x80>
 800a61a:	6825      	ldr	r5, [r4, #0]
 800a61c:	6909      	ldr	r1, [r1, #16]
 800a61e:	3301      	adds	r3, #1
 800a620:	eba5 0901 	sub.w	r9, r5, r1
 800a624:	6965      	ldr	r5, [r4, #20]
 800a626:	444b      	add	r3, r9
 800a628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a62c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a630:	106d      	asrs	r5, r5, #1
 800a632:	429d      	cmp	r5, r3
 800a634:	bf38      	it	cc
 800a636:	461d      	movcc	r5, r3
 800a638:	0553      	lsls	r3, r2, #21
 800a63a:	d531      	bpl.n	800a6a0 <__ssputs_r+0xa0>
 800a63c:	4629      	mov	r1, r5
 800a63e:	f7fe fbe3 	bl	8008e08 <_malloc_r>
 800a642:	4606      	mov	r6, r0
 800a644:	b950      	cbnz	r0, 800a65c <__ssputs_r+0x5c>
 800a646:	230c      	movs	r3, #12
 800a648:	f04f 30ff 	mov.w	r0, #4294967295
 800a64c:	f8ca 3000 	str.w	r3, [sl]
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a656:	81a3      	strh	r3, [r4, #12]
 800a658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65c:	464a      	mov	r2, r9
 800a65e:	6921      	ldr	r1, [r4, #16]
 800a660:	f7ff ffb4 	bl	800a5cc <memcpy>
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a66a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a66e:	81a3      	strh	r3, [r4, #12]
 800a670:	6126      	str	r6, [r4, #16]
 800a672:	444e      	add	r6, r9
 800a674:	6026      	str	r6, [r4, #0]
 800a676:	463e      	mov	r6, r7
 800a678:	6165      	str	r5, [r4, #20]
 800a67a:	eba5 0509 	sub.w	r5, r5, r9
 800a67e:	60a5      	str	r5, [r4, #8]
 800a680:	42be      	cmp	r6, r7
 800a682:	d900      	bls.n	800a686 <__ssputs_r+0x86>
 800a684:	463e      	mov	r6, r7
 800a686:	4632      	mov	r2, r6
 800a688:	4641      	mov	r1, r8
 800a68a:	6820      	ldr	r0, [r4, #0]
 800a68c:	f000 fc90 	bl	800afb0 <memmove>
 800a690:	68a3      	ldr	r3, [r4, #8]
 800a692:	2000      	movs	r0, #0
 800a694:	1b9b      	subs	r3, r3, r6
 800a696:	60a3      	str	r3, [r4, #8]
 800a698:	6823      	ldr	r3, [r4, #0]
 800a69a:	4433      	add	r3, r6
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	e7db      	b.n	800a658 <__ssputs_r+0x58>
 800a6a0:	462a      	mov	r2, r5
 800a6a2:	f000 fc9f 	bl	800afe4 <_realloc_r>
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d1e1      	bne.n	800a670 <__ssputs_r+0x70>
 800a6ac:	4650      	mov	r0, sl
 800a6ae:	6921      	ldr	r1, [r4, #16]
 800a6b0:	f7fe fb42 	bl	8008d38 <_free_r>
 800a6b4:	e7c7      	b.n	800a646 <__ssputs_r+0x46>
	...

0800a6b8 <_svfiprintf_r>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	4698      	mov	r8, r3
 800a6be:	898b      	ldrh	r3, [r1, #12]
 800a6c0:	4607      	mov	r7, r0
 800a6c2:	061b      	lsls	r3, r3, #24
 800a6c4:	460d      	mov	r5, r1
 800a6c6:	4614      	mov	r4, r2
 800a6c8:	b09d      	sub	sp, #116	; 0x74
 800a6ca:	d50e      	bpl.n	800a6ea <_svfiprintf_r+0x32>
 800a6cc:	690b      	ldr	r3, [r1, #16]
 800a6ce:	b963      	cbnz	r3, 800a6ea <_svfiprintf_r+0x32>
 800a6d0:	2140      	movs	r1, #64	; 0x40
 800a6d2:	f7fe fb99 	bl	8008e08 <_malloc_r>
 800a6d6:	6028      	str	r0, [r5, #0]
 800a6d8:	6128      	str	r0, [r5, #16]
 800a6da:	b920      	cbnz	r0, 800a6e6 <_svfiprintf_r+0x2e>
 800a6dc:	230c      	movs	r3, #12
 800a6de:	603b      	str	r3, [r7, #0]
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e4:	e0d1      	b.n	800a88a <_svfiprintf_r+0x1d2>
 800a6e6:	2340      	movs	r3, #64	; 0x40
 800a6e8:	616b      	str	r3, [r5, #20]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ee:	2320      	movs	r3, #32
 800a6f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6f4:	2330      	movs	r3, #48	; 0x30
 800a6f6:	f04f 0901 	mov.w	r9, #1
 800a6fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a8a4 <_svfiprintf_r+0x1ec>
 800a702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a706:	4623      	mov	r3, r4
 800a708:	469a      	mov	sl, r3
 800a70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a70e:	b10a      	cbz	r2, 800a714 <_svfiprintf_r+0x5c>
 800a710:	2a25      	cmp	r2, #37	; 0x25
 800a712:	d1f9      	bne.n	800a708 <_svfiprintf_r+0x50>
 800a714:	ebba 0b04 	subs.w	fp, sl, r4
 800a718:	d00b      	beq.n	800a732 <_svfiprintf_r+0x7a>
 800a71a:	465b      	mov	r3, fp
 800a71c:	4622      	mov	r2, r4
 800a71e:	4629      	mov	r1, r5
 800a720:	4638      	mov	r0, r7
 800a722:	f7ff ff6d 	bl	800a600 <__ssputs_r>
 800a726:	3001      	adds	r0, #1
 800a728:	f000 80aa 	beq.w	800a880 <_svfiprintf_r+0x1c8>
 800a72c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a72e:	445a      	add	r2, fp
 800a730:	9209      	str	r2, [sp, #36]	; 0x24
 800a732:	f89a 3000 	ldrb.w	r3, [sl]
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 80a2 	beq.w	800a880 <_svfiprintf_r+0x1c8>
 800a73c:	2300      	movs	r3, #0
 800a73e:	f04f 32ff 	mov.w	r2, #4294967295
 800a742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a746:	f10a 0a01 	add.w	sl, sl, #1
 800a74a:	9304      	str	r3, [sp, #16]
 800a74c:	9307      	str	r3, [sp, #28]
 800a74e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a752:	931a      	str	r3, [sp, #104]	; 0x68
 800a754:	4654      	mov	r4, sl
 800a756:	2205      	movs	r2, #5
 800a758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75c:	4851      	ldr	r0, [pc, #324]	; (800a8a4 <_svfiprintf_r+0x1ec>)
 800a75e:	f000 fc19 	bl	800af94 <memchr>
 800a762:	9a04      	ldr	r2, [sp, #16]
 800a764:	b9d8      	cbnz	r0, 800a79e <_svfiprintf_r+0xe6>
 800a766:	06d0      	lsls	r0, r2, #27
 800a768:	bf44      	itt	mi
 800a76a:	2320      	movmi	r3, #32
 800a76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a770:	0711      	lsls	r1, r2, #28
 800a772:	bf44      	itt	mi
 800a774:	232b      	movmi	r3, #43	; 0x2b
 800a776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a77a:	f89a 3000 	ldrb.w	r3, [sl]
 800a77e:	2b2a      	cmp	r3, #42	; 0x2a
 800a780:	d015      	beq.n	800a7ae <_svfiprintf_r+0xf6>
 800a782:	4654      	mov	r4, sl
 800a784:	2000      	movs	r0, #0
 800a786:	f04f 0c0a 	mov.w	ip, #10
 800a78a:	9a07      	ldr	r2, [sp, #28]
 800a78c:	4621      	mov	r1, r4
 800a78e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a792:	3b30      	subs	r3, #48	; 0x30
 800a794:	2b09      	cmp	r3, #9
 800a796:	d94e      	bls.n	800a836 <_svfiprintf_r+0x17e>
 800a798:	b1b0      	cbz	r0, 800a7c8 <_svfiprintf_r+0x110>
 800a79a:	9207      	str	r2, [sp, #28]
 800a79c:	e014      	b.n	800a7c8 <_svfiprintf_r+0x110>
 800a79e:	eba0 0308 	sub.w	r3, r0, r8
 800a7a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	46a2      	mov	sl, r4
 800a7aa:	9304      	str	r3, [sp, #16]
 800a7ac:	e7d2      	b.n	800a754 <_svfiprintf_r+0x9c>
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	1d19      	adds	r1, r3, #4
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	9103      	str	r1, [sp, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	bfbb      	ittet	lt
 800a7ba:	425b      	neglt	r3, r3
 800a7bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a7c0:	9307      	strge	r3, [sp, #28]
 800a7c2:	9307      	strlt	r3, [sp, #28]
 800a7c4:	bfb8      	it	lt
 800a7c6:	9204      	strlt	r2, [sp, #16]
 800a7c8:	7823      	ldrb	r3, [r4, #0]
 800a7ca:	2b2e      	cmp	r3, #46	; 0x2e
 800a7cc:	d10c      	bne.n	800a7e8 <_svfiprintf_r+0x130>
 800a7ce:	7863      	ldrb	r3, [r4, #1]
 800a7d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d2:	d135      	bne.n	800a840 <_svfiprintf_r+0x188>
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	3402      	adds	r4, #2
 800a7d8:	1d1a      	adds	r2, r3, #4
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	9203      	str	r2, [sp, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	bfb8      	it	lt
 800a7e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7e6:	9305      	str	r3, [sp, #20]
 800a7e8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a8a8 <_svfiprintf_r+0x1f0>
 800a7ec:	2203      	movs	r2, #3
 800a7ee:	4650      	mov	r0, sl
 800a7f0:	7821      	ldrb	r1, [r4, #0]
 800a7f2:	f000 fbcf 	bl	800af94 <memchr>
 800a7f6:	b140      	cbz	r0, 800a80a <_svfiprintf_r+0x152>
 800a7f8:	2340      	movs	r3, #64	; 0x40
 800a7fa:	eba0 000a 	sub.w	r0, r0, sl
 800a7fe:	fa03 f000 	lsl.w	r0, r3, r0
 800a802:	9b04      	ldr	r3, [sp, #16]
 800a804:	3401      	adds	r4, #1
 800a806:	4303      	orrs	r3, r0
 800a808:	9304      	str	r3, [sp, #16]
 800a80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a80e:	2206      	movs	r2, #6
 800a810:	4826      	ldr	r0, [pc, #152]	; (800a8ac <_svfiprintf_r+0x1f4>)
 800a812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a816:	f000 fbbd 	bl	800af94 <memchr>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d038      	beq.n	800a890 <_svfiprintf_r+0x1d8>
 800a81e:	4b24      	ldr	r3, [pc, #144]	; (800a8b0 <_svfiprintf_r+0x1f8>)
 800a820:	bb1b      	cbnz	r3, 800a86a <_svfiprintf_r+0x1b2>
 800a822:	9b03      	ldr	r3, [sp, #12]
 800a824:	3307      	adds	r3, #7
 800a826:	f023 0307 	bic.w	r3, r3, #7
 800a82a:	3308      	adds	r3, #8
 800a82c:	9303      	str	r3, [sp, #12]
 800a82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a830:	4433      	add	r3, r6
 800a832:	9309      	str	r3, [sp, #36]	; 0x24
 800a834:	e767      	b.n	800a706 <_svfiprintf_r+0x4e>
 800a836:	460c      	mov	r4, r1
 800a838:	2001      	movs	r0, #1
 800a83a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a83e:	e7a5      	b.n	800a78c <_svfiprintf_r+0xd4>
 800a840:	2300      	movs	r3, #0
 800a842:	f04f 0c0a 	mov.w	ip, #10
 800a846:	4619      	mov	r1, r3
 800a848:	3401      	adds	r4, #1
 800a84a:	9305      	str	r3, [sp, #20]
 800a84c:	4620      	mov	r0, r4
 800a84e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a852:	3a30      	subs	r2, #48	; 0x30
 800a854:	2a09      	cmp	r2, #9
 800a856:	d903      	bls.n	800a860 <_svfiprintf_r+0x1a8>
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d0c5      	beq.n	800a7e8 <_svfiprintf_r+0x130>
 800a85c:	9105      	str	r1, [sp, #20]
 800a85e:	e7c3      	b.n	800a7e8 <_svfiprintf_r+0x130>
 800a860:	4604      	mov	r4, r0
 800a862:	2301      	movs	r3, #1
 800a864:	fb0c 2101 	mla	r1, ip, r1, r2
 800a868:	e7f0      	b.n	800a84c <_svfiprintf_r+0x194>
 800a86a:	ab03      	add	r3, sp, #12
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	462a      	mov	r2, r5
 800a870:	4638      	mov	r0, r7
 800a872:	4b10      	ldr	r3, [pc, #64]	; (800a8b4 <_svfiprintf_r+0x1fc>)
 800a874:	a904      	add	r1, sp, #16
 800a876:	f3af 8000 	nop.w
 800a87a:	1c42      	adds	r2, r0, #1
 800a87c:	4606      	mov	r6, r0
 800a87e:	d1d6      	bne.n	800a82e <_svfiprintf_r+0x176>
 800a880:	89ab      	ldrh	r3, [r5, #12]
 800a882:	065b      	lsls	r3, r3, #25
 800a884:	f53f af2c 	bmi.w	800a6e0 <_svfiprintf_r+0x28>
 800a888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a88a:	b01d      	add	sp, #116	; 0x74
 800a88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a890:	ab03      	add	r3, sp, #12
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	462a      	mov	r2, r5
 800a896:	4638      	mov	r0, r7
 800a898:	4b06      	ldr	r3, [pc, #24]	; (800a8b4 <_svfiprintf_r+0x1fc>)
 800a89a:	a904      	add	r1, sp, #16
 800a89c:	f000 f87c 	bl	800a998 <_printf_i>
 800a8a0:	e7eb      	b.n	800a87a <_svfiprintf_r+0x1c2>
 800a8a2:	bf00      	nop
 800a8a4:	0800bf39 	.word	0x0800bf39
 800a8a8:	0800bf3f 	.word	0x0800bf3f
 800a8ac:	0800bf43 	.word	0x0800bf43
 800a8b0:	00000000 	.word	0x00000000
 800a8b4:	0800a601 	.word	0x0800a601

0800a8b8 <_printf_common>:
 800a8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8bc:	4616      	mov	r6, r2
 800a8be:	4699      	mov	r9, r3
 800a8c0:	688a      	ldr	r2, [r1, #8]
 800a8c2:	690b      	ldr	r3, [r1, #16]
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	bfb8      	it	lt
 800a8ca:	4613      	movlt	r3, r2
 800a8cc:	6033      	str	r3, [r6, #0]
 800a8ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8d8:	b10a      	cbz	r2, 800a8de <_printf_common+0x26>
 800a8da:	3301      	adds	r3, #1
 800a8dc:	6033      	str	r3, [r6, #0]
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	0699      	lsls	r1, r3, #26
 800a8e2:	bf42      	ittt	mi
 800a8e4:	6833      	ldrmi	r3, [r6, #0]
 800a8e6:	3302      	addmi	r3, #2
 800a8e8:	6033      	strmi	r3, [r6, #0]
 800a8ea:	6825      	ldr	r5, [r4, #0]
 800a8ec:	f015 0506 	ands.w	r5, r5, #6
 800a8f0:	d106      	bne.n	800a900 <_printf_common+0x48>
 800a8f2:	f104 0a19 	add.w	sl, r4, #25
 800a8f6:	68e3      	ldr	r3, [r4, #12]
 800a8f8:	6832      	ldr	r2, [r6, #0]
 800a8fa:	1a9b      	subs	r3, r3, r2
 800a8fc:	42ab      	cmp	r3, r5
 800a8fe:	dc28      	bgt.n	800a952 <_printf_common+0x9a>
 800a900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a904:	1e13      	subs	r3, r2, #0
 800a906:	6822      	ldr	r2, [r4, #0]
 800a908:	bf18      	it	ne
 800a90a:	2301      	movne	r3, #1
 800a90c:	0692      	lsls	r2, r2, #26
 800a90e:	d42d      	bmi.n	800a96c <_printf_common+0xb4>
 800a910:	4649      	mov	r1, r9
 800a912:	4638      	mov	r0, r7
 800a914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a918:	47c0      	blx	r8
 800a91a:	3001      	adds	r0, #1
 800a91c:	d020      	beq.n	800a960 <_printf_common+0xa8>
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	68e5      	ldr	r5, [r4, #12]
 800a922:	f003 0306 	and.w	r3, r3, #6
 800a926:	2b04      	cmp	r3, #4
 800a928:	bf18      	it	ne
 800a92a:	2500      	movne	r5, #0
 800a92c:	6832      	ldr	r2, [r6, #0]
 800a92e:	f04f 0600 	mov.w	r6, #0
 800a932:	68a3      	ldr	r3, [r4, #8]
 800a934:	bf08      	it	eq
 800a936:	1aad      	subeq	r5, r5, r2
 800a938:	6922      	ldr	r2, [r4, #16]
 800a93a:	bf08      	it	eq
 800a93c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a940:	4293      	cmp	r3, r2
 800a942:	bfc4      	itt	gt
 800a944:	1a9b      	subgt	r3, r3, r2
 800a946:	18ed      	addgt	r5, r5, r3
 800a948:	341a      	adds	r4, #26
 800a94a:	42b5      	cmp	r5, r6
 800a94c:	d11a      	bne.n	800a984 <_printf_common+0xcc>
 800a94e:	2000      	movs	r0, #0
 800a950:	e008      	b.n	800a964 <_printf_common+0xac>
 800a952:	2301      	movs	r3, #1
 800a954:	4652      	mov	r2, sl
 800a956:	4649      	mov	r1, r9
 800a958:	4638      	mov	r0, r7
 800a95a:	47c0      	blx	r8
 800a95c:	3001      	adds	r0, #1
 800a95e:	d103      	bne.n	800a968 <_printf_common+0xb0>
 800a960:	f04f 30ff 	mov.w	r0, #4294967295
 800a964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a968:	3501      	adds	r5, #1
 800a96a:	e7c4      	b.n	800a8f6 <_printf_common+0x3e>
 800a96c:	2030      	movs	r0, #48	; 0x30
 800a96e:	18e1      	adds	r1, r4, r3
 800a970:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a97a:	4422      	add	r2, r4
 800a97c:	3302      	adds	r3, #2
 800a97e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a982:	e7c5      	b.n	800a910 <_printf_common+0x58>
 800a984:	2301      	movs	r3, #1
 800a986:	4622      	mov	r2, r4
 800a988:	4649      	mov	r1, r9
 800a98a:	4638      	mov	r0, r7
 800a98c:	47c0      	blx	r8
 800a98e:	3001      	adds	r0, #1
 800a990:	d0e6      	beq.n	800a960 <_printf_common+0xa8>
 800a992:	3601      	adds	r6, #1
 800a994:	e7d9      	b.n	800a94a <_printf_common+0x92>
	...

0800a998 <_printf_i>:
 800a998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a99c:	7e0f      	ldrb	r7, [r1, #24]
 800a99e:	4691      	mov	r9, r2
 800a9a0:	2f78      	cmp	r7, #120	; 0x78
 800a9a2:	4680      	mov	r8, r0
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	469a      	mov	sl, r3
 800a9a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9ae:	d807      	bhi.n	800a9c0 <_printf_i+0x28>
 800a9b0:	2f62      	cmp	r7, #98	; 0x62
 800a9b2:	d80a      	bhi.n	800a9ca <_printf_i+0x32>
 800a9b4:	2f00      	cmp	r7, #0
 800a9b6:	f000 80d9 	beq.w	800ab6c <_printf_i+0x1d4>
 800a9ba:	2f58      	cmp	r7, #88	; 0x58
 800a9bc:	f000 80a4 	beq.w	800ab08 <_printf_i+0x170>
 800a9c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9c8:	e03a      	b.n	800aa40 <_printf_i+0xa8>
 800a9ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9ce:	2b15      	cmp	r3, #21
 800a9d0:	d8f6      	bhi.n	800a9c0 <_printf_i+0x28>
 800a9d2:	a101      	add	r1, pc, #4	; (adr r1, 800a9d8 <_printf_i+0x40>)
 800a9d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9d8:	0800aa31 	.word	0x0800aa31
 800a9dc:	0800aa45 	.word	0x0800aa45
 800a9e0:	0800a9c1 	.word	0x0800a9c1
 800a9e4:	0800a9c1 	.word	0x0800a9c1
 800a9e8:	0800a9c1 	.word	0x0800a9c1
 800a9ec:	0800a9c1 	.word	0x0800a9c1
 800a9f0:	0800aa45 	.word	0x0800aa45
 800a9f4:	0800a9c1 	.word	0x0800a9c1
 800a9f8:	0800a9c1 	.word	0x0800a9c1
 800a9fc:	0800a9c1 	.word	0x0800a9c1
 800aa00:	0800a9c1 	.word	0x0800a9c1
 800aa04:	0800ab53 	.word	0x0800ab53
 800aa08:	0800aa75 	.word	0x0800aa75
 800aa0c:	0800ab35 	.word	0x0800ab35
 800aa10:	0800a9c1 	.word	0x0800a9c1
 800aa14:	0800a9c1 	.word	0x0800a9c1
 800aa18:	0800ab75 	.word	0x0800ab75
 800aa1c:	0800a9c1 	.word	0x0800a9c1
 800aa20:	0800aa75 	.word	0x0800aa75
 800aa24:	0800a9c1 	.word	0x0800a9c1
 800aa28:	0800a9c1 	.word	0x0800a9c1
 800aa2c:	0800ab3d 	.word	0x0800ab3d
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	1d1a      	adds	r2, r3, #4
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	602a      	str	r2, [r5, #0]
 800aa38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa40:	2301      	movs	r3, #1
 800aa42:	e0a4      	b.n	800ab8e <_printf_i+0x1f6>
 800aa44:	6820      	ldr	r0, [r4, #0]
 800aa46:	6829      	ldr	r1, [r5, #0]
 800aa48:	0606      	lsls	r6, r0, #24
 800aa4a:	f101 0304 	add.w	r3, r1, #4
 800aa4e:	d50a      	bpl.n	800aa66 <_printf_i+0xce>
 800aa50:	680e      	ldr	r6, [r1, #0]
 800aa52:	602b      	str	r3, [r5, #0]
 800aa54:	2e00      	cmp	r6, #0
 800aa56:	da03      	bge.n	800aa60 <_printf_i+0xc8>
 800aa58:	232d      	movs	r3, #45	; 0x2d
 800aa5a:	4276      	negs	r6, r6
 800aa5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa60:	230a      	movs	r3, #10
 800aa62:	485e      	ldr	r0, [pc, #376]	; (800abdc <_printf_i+0x244>)
 800aa64:	e019      	b.n	800aa9a <_printf_i+0x102>
 800aa66:	680e      	ldr	r6, [r1, #0]
 800aa68:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa6c:	602b      	str	r3, [r5, #0]
 800aa6e:	bf18      	it	ne
 800aa70:	b236      	sxthne	r6, r6
 800aa72:	e7ef      	b.n	800aa54 <_printf_i+0xbc>
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	6820      	ldr	r0, [r4, #0]
 800aa78:	1d19      	adds	r1, r3, #4
 800aa7a:	6029      	str	r1, [r5, #0]
 800aa7c:	0601      	lsls	r1, r0, #24
 800aa7e:	d501      	bpl.n	800aa84 <_printf_i+0xec>
 800aa80:	681e      	ldr	r6, [r3, #0]
 800aa82:	e002      	b.n	800aa8a <_printf_i+0xf2>
 800aa84:	0646      	lsls	r6, r0, #25
 800aa86:	d5fb      	bpl.n	800aa80 <_printf_i+0xe8>
 800aa88:	881e      	ldrh	r6, [r3, #0]
 800aa8a:	2f6f      	cmp	r7, #111	; 0x6f
 800aa8c:	bf0c      	ite	eq
 800aa8e:	2308      	moveq	r3, #8
 800aa90:	230a      	movne	r3, #10
 800aa92:	4852      	ldr	r0, [pc, #328]	; (800abdc <_printf_i+0x244>)
 800aa94:	2100      	movs	r1, #0
 800aa96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa9a:	6865      	ldr	r5, [r4, #4]
 800aa9c:	2d00      	cmp	r5, #0
 800aa9e:	bfa8      	it	ge
 800aaa0:	6821      	ldrge	r1, [r4, #0]
 800aaa2:	60a5      	str	r5, [r4, #8]
 800aaa4:	bfa4      	itt	ge
 800aaa6:	f021 0104 	bicge.w	r1, r1, #4
 800aaaa:	6021      	strge	r1, [r4, #0]
 800aaac:	b90e      	cbnz	r6, 800aab2 <_printf_i+0x11a>
 800aaae:	2d00      	cmp	r5, #0
 800aab0:	d04d      	beq.n	800ab4e <_printf_i+0x1b6>
 800aab2:	4615      	mov	r5, r2
 800aab4:	fbb6 f1f3 	udiv	r1, r6, r3
 800aab8:	fb03 6711 	mls	r7, r3, r1, r6
 800aabc:	5dc7      	ldrb	r7, [r0, r7]
 800aabe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aac2:	4637      	mov	r7, r6
 800aac4:	42bb      	cmp	r3, r7
 800aac6:	460e      	mov	r6, r1
 800aac8:	d9f4      	bls.n	800aab4 <_printf_i+0x11c>
 800aaca:	2b08      	cmp	r3, #8
 800aacc:	d10b      	bne.n	800aae6 <_printf_i+0x14e>
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	07de      	lsls	r6, r3, #31
 800aad2:	d508      	bpl.n	800aae6 <_printf_i+0x14e>
 800aad4:	6923      	ldr	r3, [r4, #16]
 800aad6:	6861      	ldr	r1, [r4, #4]
 800aad8:	4299      	cmp	r1, r3
 800aada:	bfde      	ittt	le
 800aadc:	2330      	movle	r3, #48	; 0x30
 800aade:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aae2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aae6:	1b52      	subs	r2, r2, r5
 800aae8:	6122      	str	r2, [r4, #16]
 800aaea:	464b      	mov	r3, r9
 800aaec:	4621      	mov	r1, r4
 800aaee:	4640      	mov	r0, r8
 800aaf0:	f8cd a000 	str.w	sl, [sp]
 800aaf4:	aa03      	add	r2, sp, #12
 800aaf6:	f7ff fedf 	bl	800a8b8 <_printf_common>
 800aafa:	3001      	adds	r0, #1
 800aafc:	d14c      	bne.n	800ab98 <_printf_i+0x200>
 800aafe:	f04f 30ff 	mov.w	r0, #4294967295
 800ab02:	b004      	add	sp, #16
 800ab04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab08:	4834      	ldr	r0, [pc, #208]	; (800abdc <_printf_i+0x244>)
 800ab0a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab0e:	6829      	ldr	r1, [r5, #0]
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab16:	6029      	str	r1, [r5, #0]
 800ab18:	061d      	lsls	r5, r3, #24
 800ab1a:	d514      	bpl.n	800ab46 <_printf_i+0x1ae>
 800ab1c:	07df      	lsls	r7, r3, #31
 800ab1e:	bf44      	itt	mi
 800ab20:	f043 0320 	orrmi.w	r3, r3, #32
 800ab24:	6023      	strmi	r3, [r4, #0]
 800ab26:	b91e      	cbnz	r6, 800ab30 <_printf_i+0x198>
 800ab28:	6823      	ldr	r3, [r4, #0]
 800ab2a:	f023 0320 	bic.w	r3, r3, #32
 800ab2e:	6023      	str	r3, [r4, #0]
 800ab30:	2310      	movs	r3, #16
 800ab32:	e7af      	b.n	800aa94 <_printf_i+0xfc>
 800ab34:	6823      	ldr	r3, [r4, #0]
 800ab36:	f043 0320 	orr.w	r3, r3, #32
 800ab3a:	6023      	str	r3, [r4, #0]
 800ab3c:	2378      	movs	r3, #120	; 0x78
 800ab3e:	4828      	ldr	r0, [pc, #160]	; (800abe0 <_printf_i+0x248>)
 800ab40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab44:	e7e3      	b.n	800ab0e <_printf_i+0x176>
 800ab46:	0659      	lsls	r1, r3, #25
 800ab48:	bf48      	it	mi
 800ab4a:	b2b6      	uxthmi	r6, r6
 800ab4c:	e7e6      	b.n	800ab1c <_printf_i+0x184>
 800ab4e:	4615      	mov	r5, r2
 800ab50:	e7bb      	b.n	800aaca <_printf_i+0x132>
 800ab52:	682b      	ldr	r3, [r5, #0]
 800ab54:	6826      	ldr	r6, [r4, #0]
 800ab56:	1d18      	adds	r0, r3, #4
 800ab58:	6961      	ldr	r1, [r4, #20]
 800ab5a:	6028      	str	r0, [r5, #0]
 800ab5c:	0635      	lsls	r5, r6, #24
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	d501      	bpl.n	800ab66 <_printf_i+0x1ce>
 800ab62:	6019      	str	r1, [r3, #0]
 800ab64:	e002      	b.n	800ab6c <_printf_i+0x1d4>
 800ab66:	0670      	lsls	r0, r6, #25
 800ab68:	d5fb      	bpl.n	800ab62 <_printf_i+0x1ca>
 800ab6a:	8019      	strh	r1, [r3, #0]
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	4615      	mov	r5, r2
 800ab70:	6123      	str	r3, [r4, #16]
 800ab72:	e7ba      	b.n	800aaea <_printf_i+0x152>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	2100      	movs	r1, #0
 800ab78:	1d1a      	adds	r2, r3, #4
 800ab7a:	602a      	str	r2, [r5, #0]
 800ab7c:	681d      	ldr	r5, [r3, #0]
 800ab7e:	6862      	ldr	r2, [r4, #4]
 800ab80:	4628      	mov	r0, r5
 800ab82:	f000 fa07 	bl	800af94 <memchr>
 800ab86:	b108      	cbz	r0, 800ab8c <_printf_i+0x1f4>
 800ab88:	1b40      	subs	r0, r0, r5
 800ab8a:	6060      	str	r0, [r4, #4]
 800ab8c:	6863      	ldr	r3, [r4, #4]
 800ab8e:	6123      	str	r3, [r4, #16]
 800ab90:	2300      	movs	r3, #0
 800ab92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab96:	e7a8      	b.n	800aaea <_printf_i+0x152>
 800ab98:	462a      	mov	r2, r5
 800ab9a:	4649      	mov	r1, r9
 800ab9c:	4640      	mov	r0, r8
 800ab9e:	6923      	ldr	r3, [r4, #16]
 800aba0:	47d0      	blx	sl
 800aba2:	3001      	adds	r0, #1
 800aba4:	d0ab      	beq.n	800aafe <_printf_i+0x166>
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	079b      	lsls	r3, r3, #30
 800abaa:	d413      	bmi.n	800abd4 <_printf_i+0x23c>
 800abac:	68e0      	ldr	r0, [r4, #12]
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	4298      	cmp	r0, r3
 800abb2:	bfb8      	it	lt
 800abb4:	4618      	movlt	r0, r3
 800abb6:	e7a4      	b.n	800ab02 <_printf_i+0x16a>
 800abb8:	2301      	movs	r3, #1
 800abba:	4632      	mov	r2, r6
 800abbc:	4649      	mov	r1, r9
 800abbe:	4640      	mov	r0, r8
 800abc0:	47d0      	blx	sl
 800abc2:	3001      	adds	r0, #1
 800abc4:	d09b      	beq.n	800aafe <_printf_i+0x166>
 800abc6:	3501      	adds	r5, #1
 800abc8:	68e3      	ldr	r3, [r4, #12]
 800abca:	9903      	ldr	r1, [sp, #12]
 800abcc:	1a5b      	subs	r3, r3, r1
 800abce:	42ab      	cmp	r3, r5
 800abd0:	dcf2      	bgt.n	800abb8 <_printf_i+0x220>
 800abd2:	e7eb      	b.n	800abac <_printf_i+0x214>
 800abd4:	2500      	movs	r5, #0
 800abd6:	f104 0619 	add.w	r6, r4, #25
 800abda:	e7f5      	b.n	800abc8 <_printf_i+0x230>
 800abdc:	0800bf4a 	.word	0x0800bf4a
 800abe0:	0800bf5b 	.word	0x0800bf5b

0800abe4 <_read_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	4604      	mov	r4, r0
 800abe8:	4608      	mov	r0, r1
 800abea:	4611      	mov	r1, r2
 800abec:	2200      	movs	r2, #0
 800abee:	4d05      	ldr	r5, [pc, #20]	; (800ac04 <_read_r+0x20>)
 800abf0:	602a      	str	r2, [r5, #0]
 800abf2:	461a      	mov	r2, r3
 800abf4:	f7fa fa36 	bl	8005064 <_read>
 800abf8:	1c43      	adds	r3, r0, #1
 800abfa:	d102      	bne.n	800ac02 <_read_r+0x1e>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	b103      	cbz	r3, 800ac02 <_read_r+0x1e>
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	bd38      	pop	{r3, r4, r5, pc}
 800ac04:	200006c4 	.word	0x200006c4

0800ac08 <lflush>:
 800ac08:	8983      	ldrh	r3, [r0, #12]
 800ac0a:	f003 0309 	and.w	r3, r3, #9
 800ac0e:	2b09      	cmp	r3, #9
 800ac10:	d101      	bne.n	800ac16 <lflush+0xe>
 800ac12:	f7ff bc0b 	b.w	800a42c <fflush>
 800ac16:	2000      	movs	r0, #0
 800ac18:	4770      	bx	lr
	...

0800ac1c <__srefill_r>:
 800ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1e:	460c      	mov	r4, r1
 800ac20:	4605      	mov	r5, r0
 800ac22:	b118      	cbz	r0, 800ac2c <__srefill_r+0x10>
 800ac24:	6983      	ldr	r3, [r0, #24]
 800ac26:	b90b      	cbnz	r3, 800ac2c <__srefill_r+0x10>
 800ac28:	f7fd fe22 	bl	8008870 <__sinit>
 800ac2c:	4b3c      	ldr	r3, [pc, #240]	; (800ad20 <__srefill_r+0x104>)
 800ac2e:	429c      	cmp	r4, r3
 800ac30:	d10a      	bne.n	800ac48 <__srefill_r+0x2c>
 800ac32:	686c      	ldr	r4, [r5, #4]
 800ac34:	2300      	movs	r3, #0
 800ac36:	6063      	str	r3, [r4, #4]
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac3e:	069e      	lsls	r6, r3, #26
 800ac40:	d50c      	bpl.n	800ac5c <__srefill_r+0x40>
 800ac42:	f04f 30ff 	mov.w	r0, #4294967295
 800ac46:	e067      	b.n	800ad18 <__srefill_r+0xfc>
 800ac48:	4b36      	ldr	r3, [pc, #216]	; (800ad24 <__srefill_r+0x108>)
 800ac4a:	429c      	cmp	r4, r3
 800ac4c:	d101      	bne.n	800ac52 <__srefill_r+0x36>
 800ac4e:	68ac      	ldr	r4, [r5, #8]
 800ac50:	e7f0      	b.n	800ac34 <__srefill_r+0x18>
 800ac52:	4b35      	ldr	r3, [pc, #212]	; (800ad28 <__srefill_r+0x10c>)
 800ac54:	429c      	cmp	r4, r3
 800ac56:	bf08      	it	eq
 800ac58:	68ec      	ldreq	r4, [r5, #12]
 800ac5a:	e7eb      	b.n	800ac34 <__srefill_r+0x18>
 800ac5c:	0758      	lsls	r0, r3, #29
 800ac5e:	d449      	bmi.n	800acf4 <__srefill_r+0xd8>
 800ac60:	06d9      	lsls	r1, r3, #27
 800ac62:	d405      	bmi.n	800ac70 <__srefill_r+0x54>
 800ac64:	2309      	movs	r3, #9
 800ac66:	602b      	str	r3, [r5, #0]
 800ac68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac6c:	81a3      	strh	r3, [r4, #12]
 800ac6e:	e7e8      	b.n	800ac42 <__srefill_r+0x26>
 800ac70:	071a      	lsls	r2, r3, #28
 800ac72:	d50b      	bpl.n	800ac8c <__srefill_r+0x70>
 800ac74:	4621      	mov	r1, r4
 800ac76:	4628      	mov	r0, r5
 800ac78:	f7ff fb9c 	bl	800a3b4 <_fflush_r>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d1e0      	bne.n	800ac42 <__srefill_r+0x26>
 800ac80:	89a3      	ldrh	r3, [r4, #12]
 800ac82:	60a0      	str	r0, [r4, #8]
 800ac84:	f023 0308 	bic.w	r3, r3, #8
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	61a0      	str	r0, [r4, #24]
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	f043 0304 	orr.w	r3, r3, #4
 800ac92:	81a3      	strh	r3, [r4, #12]
 800ac94:	6923      	ldr	r3, [r4, #16]
 800ac96:	b91b      	cbnz	r3, 800aca0 <__srefill_r+0x84>
 800ac98:	4621      	mov	r1, r4
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	f7fe f804 	bl	8008ca8 <__smakebuf_r>
 800aca0:	89a6      	ldrh	r6, [r4, #12]
 800aca2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800aca6:	07b3      	lsls	r3, r6, #30
 800aca8:	d00f      	beq.n	800acca <__srefill_r+0xae>
 800acaa:	2301      	movs	r3, #1
 800acac:	81a3      	strh	r3, [r4, #12]
 800acae:	4b1f      	ldr	r3, [pc, #124]	; (800ad2c <__srefill_r+0x110>)
 800acb0:	491f      	ldr	r1, [pc, #124]	; (800ad30 <__srefill_r+0x114>)
 800acb2:	6818      	ldr	r0, [r3, #0]
 800acb4:	f006 0609 	and.w	r6, r6, #9
 800acb8:	f7fd ff6a 	bl	8008b90 <_fwalk>
 800acbc:	2e09      	cmp	r6, #9
 800acbe:	81a7      	strh	r7, [r4, #12]
 800acc0:	d103      	bne.n	800acca <__srefill_r+0xae>
 800acc2:	4621      	mov	r1, r4
 800acc4:	4628      	mov	r0, r5
 800acc6:	f7ff faf3 	bl	800a2b0 <__sflush_r>
 800acca:	6922      	ldr	r2, [r4, #16]
 800accc:	4628      	mov	r0, r5
 800acce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800acd0:	6963      	ldr	r3, [r4, #20]
 800acd2:	6a21      	ldr	r1, [r4, #32]
 800acd4:	6022      	str	r2, [r4, #0]
 800acd6:	47b0      	blx	r6
 800acd8:	2800      	cmp	r0, #0
 800acda:	6060      	str	r0, [r4, #4]
 800acdc:	dc1d      	bgt.n	800ad1a <__srefill_r+0xfe>
 800acde:	bf18      	it	ne
 800ace0:	2200      	movne	r2, #0
 800ace2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ace6:	bf16      	itet	ne
 800ace8:	6062      	strne	r2, [r4, #4]
 800acea:	f043 0320 	orreq.w	r3, r3, #32
 800acee:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800acf2:	e7bb      	b.n	800ac6c <__srefill_r+0x50>
 800acf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acf6:	2900      	cmp	r1, #0
 800acf8:	d0cc      	beq.n	800ac94 <__srefill_r+0x78>
 800acfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acfe:	4299      	cmp	r1, r3
 800ad00:	d002      	beq.n	800ad08 <__srefill_r+0xec>
 800ad02:	4628      	mov	r0, r5
 800ad04:	f7fe f818 	bl	8008d38 <_free_r>
 800ad08:	2000      	movs	r0, #0
 800ad0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad0c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad0e:	6063      	str	r3, [r4, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d0bf      	beq.n	800ac94 <__srefill_r+0x78>
 800ad14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ad16:	6023      	str	r3, [r4, #0]
 800ad18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	e7fc      	b.n	800ad18 <__srefill_r+0xfc>
 800ad1e:	bf00      	nop
 800ad20:	0800bb38 	.word	0x0800bb38
 800ad24:	0800bb58 	.word	0x0800bb58
 800ad28:	0800bb18 	.word	0x0800bb18
 800ad2c:	0800bb78 	.word	0x0800bb78
 800ad30:	0800ac09 	.word	0x0800ac09

0800ad34 <sniprintf>:
 800ad34:	b40c      	push	{r2, r3}
 800ad36:	b530      	push	{r4, r5, lr}
 800ad38:	4b17      	ldr	r3, [pc, #92]	; (800ad98 <sniprintf+0x64>)
 800ad3a:	1e0c      	subs	r4, r1, #0
 800ad3c:	681d      	ldr	r5, [r3, #0]
 800ad3e:	b09d      	sub	sp, #116	; 0x74
 800ad40:	da08      	bge.n	800ad54 <sniprintf+0x20>
 800ad42:	238b      	movs	r3, #139	; 0x8b
 800ad44:	f04f 30ff 	mov.w	r0, #4294967295
 800ad48:	602b      	str	r3, [r5, #0]
 800ad4a:	b01d      	add	sp, #116	; 0x74
 800ad4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad50:	b002      	add	sp, #8
 800ad52:	4770      	bx	lr
 800ad54:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ad58:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad5c:	bf0c      	ite	eq
 800ad5e:	4623      	moveq	r3, r4
 800ad60:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad64:	9304      	str	r3, [sp, #16]
 800ad66:	9307      	str	r3, [sp, #28]
 800ad68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad6c:	9002      	str	r0, [sp, #8]
 800ad6e:	9006      	str	r0, [sp, #24]
 800ad70:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad74:	4628      	mov	r0, r5
 800ad76:	ab21      	add	r3, sp, #132	; 0x84
 800ad78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad7a:	a902      	add	r1, sp, #8
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	f7ff fc9b 	bl	800a6b8 <_svfiprintf_r>
 800ad82:	1c43      	adds	r3, r0, #1
 800ad84:	bfbc      	itt	lt
 800ad86:	238b      	movlt	r3, #139	; 0x8b
 800ad88:	602b      	strlt	r3, [r5, #0]
 800ad8a:	2c00      	cmp	r4, #0
 800ad8c:	d0dd      	beq.n	800ad4a <sniprintf+0x16>
 800ad8e:	2200      	movs	r2, #0
 800ad90:	9b02      	ldr	r3, [sp, #8]
 800ad92:	701a      	strb	r2, [r3, #0]
 800ad94:	e7d9      	b.n	800ad4a <sniprintf+0x16>
 800ad96:	bf00      	nop
 800ad98:	200000d8 	.word	0x200000d8

0800ad9c <siscanf>:
 800ad9c:	b40e      	push	{r1, r2, r3}
 800ad9e:	f44f 7201 	mov.w	r2, #516	; 0x204
 800ada2:	b530      	push	{r4, r5, lr}
 800ada4:	b09c      	sub	sp, #112	; 0x70
 800ada6:	ac1f      	add	r4, sp, #124	; 0x7c
 800ada8:	f854 5b04 	ldr.w	r5, [r4], #4
 800adac:	f8ad 2014 	strh.w	r2, [sp, #20]
 800adb0:	9002      	str	r0, [sp, #8]
 800adb2:	9006      	str	r0, [sp, #24]
 800adb4:	f7f5 f9ca 	bl	800014c <strlen>
 800adb8:	4b0b      	ldr	r3, [pc, #44]	; (800ade8 <siscanf+0x4c>)
 800adba:	9003      	str	r0, [sp, #12]
 800adbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800adbe:	2300      	movs	r3, #0
 800adc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800adc2:	9314      	str	r3, [sp, #80]	; 0x50
 800adc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800adc8:	9007      	str	r0, [sp, #28]
 800adca:	4808      	ldr	r0, [pc, #32]	; (800adec <siscanf+0x50>)
 800adcc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800add0:	462a      	mov	r2, r5
 800add2:	4623      	mov	r3, r4
 800add4:	a902      	add	r1, sp, #8
 800add6:	6800      	ldr	r0, [r0, #0]
 800add8:	9401      	str	r4, [sp, #4]
 800adda:	f000 f98d 	bl	800b0f8 <__ssvfiscanf_r>
 800adde:	b01c      	add	sp, #112	; 0x70
 800ade0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ade4:	b003      	add	sp, #12
 800ade6:	4770      	bx	lr
 800ade8:	080090db 	.word	0x080090db
 800adec:	200000d8 	.word	0x200000d8

0800adf0 <strcpy>:
 800adf0:	4603      	mov	r3, r0
 800adf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adf6:	f803 2b01 	strb.w	r2, [r3], #1
 800adfa:	2a00      	cmp	r2, #0
 800adfc:	d1f9      	bne.n	800adf2 <strcpy+0x2>
 800adfe:	4770      	bx	lr

0800ae00 <strncmp>:
 800ae00:	4603      	mov	r3, r0
 800ae02:	b510      	push	{r4, lr}
 800ae04:	b172      	cbz	r2, 800ae24 <strncmp+0x24>
 800ae06:	3901      	subs	r1, #1
 800ae08:	1884      	adds	r4, r0, r2
 800ae0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae12:	4290      	cmp	r0, r2
 800ae14:	d101      	bne.n	800ae1a <strncmp+0x1a>
 800ae16:	42a3      	cmp	r3, r4
 800ae18:	d101      	bne.n	800ae1e <strncmp+0x1e>
 800ae1a:	1a80      	subs	r0, r0, r2
 800ae1c:	bd10      	pop	{r4, pc}
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d1f3      	bne.n	800ae0a <strncmp+0xa>
 800ae22:	e7fa      	b.n	800ae1a <strncmp+0x1a>
 800ae24:	4610      	mov	r0, r2
 800ae26:	e7f9      	b.n	800ae1c <strncmp+0x1c>

0800ae28 <__tzcalc_limits>:
 800ae28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	f7ff fb9b 	bl	800a568 <__gettzinfo>
 800ae32:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800ae36:	429d      	cmp	r5, r3
 800ae38:	f340 809a 	ble.w	800af70 <__tzcalc_limits+0x148>
 800ae3c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800ae40:	18ac      	adds	r4, r5, r2
 800ae42:	f240 126d 	movw	r2, #365	; 0x16d
 800ae46:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800ae4a:	10a4      	asrs	r4, r4, #2
 800ae4c:	fb02 4403 	mla	r4, r2, r3, r4
 800ae50:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800ae54:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800ae58:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae5c:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800ae60:	441c      	add	r4, r3
 800ae62:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ae66:	186a      	adds	r2, r5, r1
 800ae68:	fbb2 f2f3 	udiv	r2, r2, r3
 800ae6c:	fb95 fcf3 	sdiv	ip, r5, r3
 800ae70:	4414      	add	r4, r2
 800ae72:	2264      	movs	r2, #100	; 0x64
 800ae74:	fb03 5c1c 	mls	ip, r3, ip, r5
 800ae78:	fb95 f7f2 	sdiv	r7, r5, r2
 800ae7c:	fabc f68c 	clz	r6, ip
 800ae80:	4601      	mov	r1, r0
 800ae82:	fb02 5717 	mls	r7, r2, r7, r5
 800ae86:	6045      	str	r5, [r0, #4]
 800ae88:	0976      	lsrs	r6, r6, #5
 800ae8a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800ae8e:	f005 0203 	and.w	r2, r5, #3
 800ae92:	7a0d      	ldrb	r5, [r1, #8]
 800ae94:	694b      	ldr	r3, [r1, #20]
 800ae96:	2d4a      	cmp	r5, #74	; 0x4a
 800ae98:	d12d      	bne.n	800aef6 <__tzcalc_limits+0xce>
 800ae9a:	eb04 0e03 	add.w	lr, r4, r3
 800ae9e:	b902      	cbnz	r2, 800aea2 <__tzcalc_limits+0x7a>
 800aea0:	b917      	cbnz	r7, 800aea8 <__tzcalc_limits+0x80>
 800aea2:	f1bc 0f00 	cmp.w	ip, #0
 800aea6:	d124      	bne.n	800aef2 <__tzcalc_limits+0xca>
 800aea8:	2b3b      	cmp	r3, #59	; 0x3b
 800aeaa:	bfd4      	ite	le
 800aeac:	2300      	movle	r3, #0
 800aeae:	2301      	movgt	r3, #1
 800aeb0:	4473      	add	r3, lr
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	698d      	ldr	r5, [r1, #24]
 800aeb6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800af74 <__tzcalc_limits+0x14c>
 800aeba:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800aebe:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800aec2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800aec4:	18ed      	adds	r5, r5, r3
 800aec6:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800aeca:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800aece:	3128      	adds	r1, #40	; 0x28
 800aed0:	458b      	cmp	fp, r1
 800aed2:	d1de      	bne.n	800ae92 <__tzcalc_limits+0x6a>
 800aed4:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800aed8:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800aedc:	428c      	cmp	r4, r1
 800aede:	eb72 0303 	sbcs.w	r3, r2, r3
 800aee2:	bfb4      	ite	lt
 800aee4:	2301      	movlt	r3, #1
 800aee6:	2300      	movge	r3, #0
 800aee8:	6003      	str	r3, [r0, #0]
 800aeea:	2001      	movs	r0, #1
 800aeec:	b003      	add	sp, #12
 800aeee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef2:	2300      	movs	r3, #0
 800aef4:	e7dc      	b.n	800aeb0 <__tzcalc_limits+0x88>
 800aef6:	2d44      	cmp	r5, #68	; 0x44
 800aef8:	d101      	bne.n	800aefe <__tzcalc_limits+0xd6>
 800aefa:	4423      	add	r3, r4
 800aefc:	e7da      	b.n	800aeb4 <__tzcalc_limits+0x8c>
 800aefe:	bb8a      	cbnz	r2, 800af64 <__tzcalc_limits+0x13c>
 800af00:	2f00      	cmp	r7, #0
 800af02:	bf0c      	ite	eq
 800af04:	4635      	moveq	r5, r6
 800af06:	2501      	movne	r5, #1
 800af08:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800af0c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800af10:	f04f 0800 	mov.w	r8, #0
 800af14:	f8cd e004 	str.w	lr, [sp, #4]
 800af18:	46a6      	mov	lr, r4
 800af1a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800af78 <__tzcalc_limits+0x150>
 800af1e:	fb0a 9505 	mla	r5, sl, r5, r9
 800af22:	3d04      	subs	r5, #4
 800af24:	f8dd a004 	ldr.w	sl, [sp, #4]
 800af28:	f108 0801 	add.w	r8, r8, #1
 800af2c:	45c2      	cmp	sl, r8
 800af2e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800af32:	dc19      	bgt.n	800af68 <__tzcalc_limits+0x140>
 800af34:	f04f 0807 	mov.w	r8, #7
 800af38:	f10e 0504 	add.w	r5, lr, #4
 800af3c:	fb95 f8f8 	sdiv	r8, r5, r8
 800af40:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800af44:	eba5 0808 	sub.w	r8, r5, r8
 800af48:	ebb3 0808 	subs.w	r8, r3, r8
 800af4c:	690b      	ldr	r3, [r1, #16]
 800af4e:	bf48      	it	mi
 800af50:	f108 0807 	addmi.w	r8, r8, #7
 800af54:	3b01      	subs	r3, #1
 800af56:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800af5a:	4443      	add	r3, r8
 800af5c:	454b      	cmp	r3, r9
 800af5e:	da05      	bge.n	800af6c <__tzcalc_limits+0x144>
 800af60:	4473      	add	r3, lr
 800af62:	e7a7      	b.n	800aeb4 <__tzcalc_limits+0x8c>
 800af64:	4635      	mov	r5, r6
 800af66:	e7cf      	b.n	800af08 <__tzcalc_limits+0xe0>
 800af68:	44ce      	add	lr, r9
 800af6a:	e7db      	b.n	800af24 <__tzcalc_limits+0xfc>
 800af6c:	3b07      	subs	r3, #7
 800af6e:	e7f5      	b.n	800af5c <__tzcalc_limits+0x134>
 800af70:	2000      	movs	r0, #0
 800af72:	e7bb      	b.n	800aeec <__tzcalc_limits+0xc4>
 800af74:	00015180 	.word	0x00015180
 800af78:	0800bf6c 	.word	0x0800bf6c

0800af7c <__env_lock>:
 800af7c:	4801      	ldr	r0, [pc, #4]	; (800af84 <__env_lock+0x8>)
 800af7e:	f7fd be6a 	b.w	8008c56 <__retarget_lock_acquire_recursive>
 800af82:	bf00      	nop
 800af84:	200006b4 	.word	0x200006b4

0800af88 <__env_unlock>:
 800af88:	4801      	ldr	r0, [pc, #4]	; (800af90 <__env_unlock+0x8>)
 800af8a:	f7fd be66 	b.w	8008c5a <__retarget_lock_release_recursive>
 800af8e:	bf00      	nop
 800af90:	200006b4 	.word	0x200006b4

0800af94 <memchr>:
 800af94:	4603      	mov	r3, r0
 800af96:	b510      	push	{r4, lr}
 800af98:	b2c9      	uxtb	r1, r1
 800af9a:	4402      	add	r2, r0
 800af9c:	4293      	cmp	r3, r2
 800af9e:	4618      	mov	r0, r3
 800afa0:	d101      	bne.n	800afa6 <memchr+0x12>
 800afa2:	2000      	movs	r0, #0
 800afa4:	e003      	b.n	800afae <memchr+0x1a>
 800afa6:	7804      	ldrb	r4, [r0, #0]
 800afa8:	3301      	adds	r3, #1
 800afaa:	428c      	cmp	r4, r1
 800afac:	d1f6      	bne.n	800af9c <memchr+0x8>
 800afae:	bd10      	pop	{r4, pc}

0800afb0 <memmove>:
 800afb0:	4288      	cmp	r0, r1
 800afb2:	b510      	push	{r4, lr}
 800afb4:	eb01 0402 	add.w	r4, r1, r2
 800afb8:	d902      	bls.n	800afc0 <memmove+0x10>
 800afba:	4284      	cmp	r4, r0
 800afbc:	4623      	mov	r3, r4
 800afbe:	d807      	bhi.n	800afd0 <memmove+0x20>
 800afc0:	1e43      	subs	r3, r0, #1
 800afc2:	42a1      	cmp	r1, r4
 800afc4:	d008      	beq.n	800afd8 <memmove+0x28>
 800afc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afce:	e7f8      	b.n	800afc2 <memmove+0x12>
 800afd0:	4601      	mov	r1, r0
 800afd2:	4402      	add	r2, r0
 800afd4:	428a      	cmp	r2, r1
 800afd6:	d100      	bne.n	800afda <memmove+0x2a>
 800afd8:	bd10      	pop	{r4, pc}
 800afda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afe2:	e7f7      	b.n	800afd4 <memmove+0x24>

0800afe4 <_realloc_r>:
 800afe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe8:	4680      	mov	r8, r0
 800afea:	4614      	mov	r4, r2
 800afec:	460e      	mov	r6, r1
 800afee:	b921      	cbnz	r1, 800affa <_realloc_r+0x16>
 800aff0:	4611      	mov	r1, r2
 800aff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aff6:	f7fd bf07 	b.w	8008e08 <_malloc_r>
 800affa:	b92a      	cbnz	r2, 800b008 <_realloc_r+0x24>
 800affc:	f7fd fe9c 	bl	8008d38 <_free_r>
 800b000:	4625      	mov	r5, r4
 800b002:	4628      	mov	r0, r5
 800b004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b008:	f000 fbb2 	bl	800b770 <_malloc_usable_size_r>
 800b00c:	4284      	cmp	r4, r0
 800b00e:	4607      	mov	r7, r0
 800b010:	d802      	bhi.n	800b018 <_realloc_r+0x34>
 800b012:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b016:	d812      	bhi.n	800b03e <_realloc_r+0x5a>
 800b018:	4621      	mov	r1, r4
 800b01a:	4640      	mov	r0, r8
 800b01c:	f7fd fef4 	bl	8008e08 <_malloc_r>
 800b020:	4605      	mov	r5, r0
 800b022:	2800      	cmp	r0, #0
 800b024:	d0ed      	beq.n	800b002 <_realloc_r+0x1e>
 800b026:	42bc      	cmp	r4, r7
 800b028:	4622      	mov	r2, r4
 800b02a:	4631      	mov	r1, r6
 800b02c:	bf28      	it	cs
 800b02e:	463a      	movcs	r2, r7
 800b030:	f7ff facc 	bl	800a5cc <memcpy>
 800b034:	4631      	mov	r1, r6
 800b036:	4640      	mov	r0, r8
 800b038:	f7fd fe7e 	bl	8008d38 <_free_r>
 800b03c:	e7e1      	b.n	800b002 <_realloc_r+0x1e>
 800b03e:	4635      	mov	r5, r6
 800b040:	e7df      	b.n	800b002 <_realloc_r+0x1e>

0800b042 <_sungetc_r>:
 800b042:	b538      	push	{r3, r4, r5, lr}
 800b044:	1c4b      	adds	r3, r1, #1
 800b046:	4614      	mov	r4, r2
 800b048:	d103      	bne.n	800b052 <_sungetc_r+0x10>
 800b04a:	f04f 35ff 	mov.w	r5, #4294967295
 800b04e:	4628      	mov	r0, r5
 800b050:	bd38      	pop	{r3, r4, r5, pc}
 800b052:	8993      	ldrh	r3, [r2, #12]
 800b054:	b2cd      	uxtb	r5, r1
 800b056:	f023 0320 	bic.w	r3, r3, #32
 800b05a:	8193      	strh	r3, [r2, #12]
 800b05c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b05e:	6852      	ldr	r2, [r2, #4]
 800b060:	b18b      	cbz	r3, 800b086 <_sungetc_r+0x44>
 800b062:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b064:	4293      	cmp	r3, r2
 800b066:	dd08      	ble.n	800b07a <_sungetc_r+0x38>
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	1e5a      	subs	r2, r3, #1
 800b06c:	6022      	str	r2, [r4, #0]
 800b06e:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b072:	6863      	ldr	r3, [r4, #4]
 800b074:	3301      	adds	r3, #1
 800b076:	6063      	str	r3, [r4, #4]
 800b078:	e7e9      	b.n	800b04e <_sungetc_r+0xc>
 800b07a:	4621      	mov	r1, r4
 800b07c:	f000 fb40 	bl	800b700 <__submore>
 800b080:	2800      	cmp	r0, #0
 800b082:	d0f1      	beq.n	800b068 <_sungetc_r+0x26>
 800b084:	e7e1      	b.n	800b04a <_sungetc_r+0x8>
 800b086:	6921      	ldr	r1, [r4, #16]
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	b151      	cbz	r1, 800b0a2 <_sungetc_r+0x60>
 800b08c:	4299      	cmp	r1, r3
 800b08e:	d208      	bcs.n	800b0a2 <_sungetc_r+0x60>
 800b090:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b094:	42a9      	cmp	r1, r5
 800b096:	d104      	bne.n	800b0a2 <_sungetc_r+0x60>
 800b098:	3b01      	subs	r3, #1
 800b09a:	3201      	adds	r2, #1
 800b09c:	6023      	str	r3, [r4, #0]
 800b09e:	6062      	str	r2, [r4, #4]
 800b0a0:	e7d5      	b.n	800b04e <_sungetc_r+0xc>
 800b0a2:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b0a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0aa:	6363      	str	r3, [r4, #52]	; 0x34
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	63a3      	str	r3, [r4, #56]	; 0x38
 800b0b0:	4623      	mov	r3, r4
 800b0b2:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e7dc      	b.n	800b076 <_sungetc_r+0x34>

0800b0bc <__ssrefill_r>:
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	460c      	mov	r4, r1
 800b0c0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b0c2:	b169      	cbz	r1, 800b0e0 <__ssrefill_r+0x24>
 800b0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	d001      	beq.n	800b0d0 <__ssrefill_r+0x14>
 800b0cc:	f7fd fe34 	bl	8008d38 <_free_r>
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0d4:	6360      	str	r0, [r4, #52]	; 0x34
 800b0d6:	6063      	str	r3, [r4, #4]
 800b0d8:	b113      	cbz	r3, 800b0e0 <__ssrefill_r+0x24>
 800b0da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	bd10      	pop	{r4, pc}
 800b0e0:	6923      	ldr	r3, [r4, #16]
 800b0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e6:	6023      	str	r3, [r4, #0]
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	6063      	str	r3, [r4, #4]
 800b0ec:	89a3      	ldrh	r3, [r4, #12]
 800b0ee:	f043 0320 	orr.w	r3, r3, #32
 800b0f2:	81a3      	strh	r3, [r4, #12]
 800b0f4:	e7f3      	b.n	800b0de <__ssrefill_r+0x22>
	...

0800b0f8 <__ssvfiscanf_r>:
 800b0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	2100      	movs	r1, #0
 800b100:	4606      	mov	r6, r0
 800b102:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b106:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b10a:	49a7      	ldr	r1, [pc, #668]	; (800b3a8 <__ssvfiscanf_r+0x2b0>)
 800b10c:	f10d 0804 	add.w	r8, sp, #4
 800b110:	91a0      	str	r1, [sp, #640]	; 0x280
 800b112:	49a6      	ldr	r1, [pc, #664]	; (800b3ac <__ssvfiscanf_r+0x2b4>)
 800b114:	4fa6      	ldr	r7, [pc, #664]	; (800b3b0 <__ssvfiscanf_r+0x2b8>)
 800b116:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b3b4 <__ssvfiscanf_r+0x2bc>
 800b11a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b11e:	91a1      	str	r1, [sp, #644]	; 0x284
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	7813      	ldrb	r3, [r2, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	f000 815c 	beq.w	800b3e2 <__ssvfiscanf_r+0x2ea>
 800b12a:	5dd9      	ldrb	r1, [r3, r7]
 800b12c:	1c55      	adds	r5, r2, #1
 800b12e:	f011 0108 	ands.w	r1, r1, #8
 800b132:	d019      	beq.n	800b168 <__ssvfiscanf_r+0x70>
 800b134:	6863      	ldr	r3, [r4, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	dd0f      	ble.n	800b15a <__ssvfiscanf_r+0x62>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	781a      	ldrb	r2, [r3, #0]
 800b13e:	5cba      	ldrb	r2, [r7, r2]
 800b140:	0712      	lsls	r2, r2, #28
 800b142:	d401      	bmi.n	800b148 <__ssvfiscanf_r+0x50>
 800b144:	462a      	mov	r2, r5
 800b146:	e7ec      	b.n	800b122 <__ssvfiscanf_r+0x2a>
 800b148:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b14a:	3301      	adds	r3, #1
 800b14c:	3201      	adds	r2, #1
 800b14e:	9245      	str	r2, [sp, #276]	; 0x114
 800b150:	6862      	ldr	r2, [r4, #4]
 800b152:	6023      	str	r3, [r4, #0]
 800b154:	3a01      	subs	r2, #1
 800b156:	6062      	str	r2, [r4, #4]
 800b158:	e7ec      	b.n	800b134 <__ssvfiscanf_r+0x3c>
 800b15a:	4621      	mov	r1, r4
 800b15c:	4630      	mov	r0, r6
 800b15e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b160:	4798      	blx	r3
 800b162:	2800      	cmp	r0, #0
 800b164:	d0e9      	beq.n	800b13a <__ssvfiscanf_r+0x42>
 800b166:	e7ed      	b.n	800b144 <__ssvfiscanf_r+0x4c>
 800b168:	2b25      	cmp	r3, #37	; 0x25
 800b16a:	d012      	beq.n	800b192 <__ssvfiscanf_r+0x9a>
 800b16c:	469a      	mov	sl, r3
 800b16e:	6863      	ldr	r3, [r4, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	f340 8094 	ble.w	800b29e <__ssvfiscanf_r+0x1a6>
 800b176:	6822      	ldr	r2, [r4, #0]
 800b178:	7813      	ldrb	r3, [r2, #0]
 800b17a:	4553      	cmp	r3, sl
 800b17c:	f040 8131 	bne.w	800b3e2 <__ssvfiscanf_r+0x2ea>
 800b180:	6863      	ldr	r3, [r4, #4]
 800b182:	3201      	adds	r2, #1
 800b184:	3b01      	subs	r3, #1
 800b186:	6063      	str	r3, [r4, #4]
 800b188:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b18a:	6022      	str	r2, [r4, #0]
 800b18c:	3301      	adds	r3, #1
 800b18e:	9345      	str	r3, [sp, #276]	; 0x114
 800b190:	e7d8      	b.n	800b144 <__ssvfiscanf_r+0x4c>
 800b192:	9141      	str	r1, [sp, #260]	; 0x104
 800b194:	9143      	str	r1, [sp, #268]	; 0x10c
 800b196:	7853      	ldrb	r3, [r2, #1]
 800b198:	2b2a      	cmp	r3, #42	; 0x2a
 800b19a:	bf04      	itt	eq
 800b19c:	2310      	moveq	r3, #16
 800b19e:	1c95      	addeq	r5, r2, #2
 800b1a0:	f04f 020a 	mov.w	r2, #10
 800b1a4:	bf08      	it	eq
 800b1a6:	9341      	streq	r3, [sp, #260]	; 0x104
 800b1a8:	46aa      	mov	sl, r5
 800b1aa:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b1ae:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b1b2:	2b09      	cmp	r3, #9
 800b1b4:	d91d      	bls.n	800b1f2 <__ssvfiscanf_r+0xfa>
 800b1b6:	2203      	movs	r2, #3
 800b1b8:	487e      	ldr	r0, [pc, #504]	; (800b3b4 <__ssvfiscanf_r+0x2bc>)
 800b1ba:	f7ff feeb 	bl	800af94 <memchr>
 800b1be:	b140      	cbz	r0, 800b1d2 <__ssvfiscanf_r+0xda>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	4655      	mov	r5, sl
 800b1c4:	eba0 0009 	sub.w	r0, r0, r9
 800b1c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b1cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b1ce:	4318      	orrs	r0, r3
 800b1d0:	9041      	str	r0, [sp, #260]	; 0x104
 800b1d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b1d6:	2b78      	cmp	r3, #120	; 0x78
 800b1d8:	d806      	bhi.n	800b1e8 <__ssvfiscanf_r+0xf0>
 800b1da:	2b57      	cmp	r3, #87	; 0x57
 800b1dc:	d810      	bhi.n	800b200 <__ssvfiscanf_r+0x108>
 800b1de:	2b25      	cmp	r3, #37	; 0x25
 800b1e0:	d0c4      	beq.n	800b16c <__ssvfiscanf_r+0x74>
 800b1e2:	d857      	bhi.n	800b294 <__ssvfiscanf_r+0x19c>
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d065      	beq.n	800b2b4 <__ssvfiscanf_r+0x1bc>
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	9347      	str	r3, [sp, #284]	; 0x11c
 800b1ec:	230a      	movs	r3, #10
 800b1ee:	9342      	str	r3, [sp, #264]	; 0x108
 800b1f0:	e072      	b.n	800b2d8 <__ssvfiscanf_r+0x1e0>
 800b1f2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b1f4:	4655      	mov	r5, sl
 800b1f6:	fb02 1103 	mla	r1, r2, r3, r1
 800b1fa:	3930      	subs	r1, #48	; 0x30
 800b1fc:	9143      	str	r1, [sp, #268]	; 0x10c
 800b1fe:	e7d3      	b.n	800b1a8 <__ssvfiscanf_r+0xb0>
 800b200:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b204:	2a20      	cmp	r2, #32
 800b206:	d8ef      	bhi.n	800b1e8 <__ssvfiscanf_r+0xf0>
 800b208:	a101      	add	r1, pc, #4	; (adr r1, 800b210 <__ssvfiscanf_r+0x118>)
 800b20a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b20e:	bf00      	nop
 800b210:	0800b2c3 	.word	0x0800b2c3
 800b214:	0800b1e9 	.word	0x0800b1e9
 800b218:	0800b1e9 	.word	0x0800b1e9
 800b21c:	0800b321 	.word	0x0800b321
 800b220:	0800b1e9 	.word	0x0800b1e9
 800b224:	0800b1e9 	.word	0x0800b1e9
 800b228:	0800b1e9 	.word	0x0800b1e9
 800b22c:	0800b1e9 	.word	0x0800b1e9
 800b230:	0800b1e9 	.word	0x0800b1e9
 800b234:	0800b1e9 	.word	0x0800b1e9
 800b238:	0800b1e9 	.word	0x0800b1e9
 800b23c:	0800b337 	.word	0x0800b337
 800b240:	0800b30d 	.word	0x0800b30d
 800b244:	0800b29b 	.word	0x0800b29b
 800b248:	0800b29b 	.word	0x0800b29b
 800b24c:	0800b29b 	.word	0x0800b29b
 800b250:	0800b1e9 	.word	0x0800b1e9
 800b254:	0800b311 	.word	0x0800b311
 800b258:	0800b1e9 	.word	0x0800b1e9
 800b25c:	0800b1e9 	.word	0x0800b1e9
 800b260:	0800b1e9 	.word	0x0800b1e9
 800b264:	0800b1e9 	.word	0x0800b1e9
 800b268:	0800b347 	.word	0x0800b347
 800b26c:	0800b319 	.word	0x0800b319
 800b270:	0800b2bb 	.word	0x0800b2bb
 800b274:	0800b1e9 	.word	0x0800b1e9
 800b278:	0800b1e9 	.word	0x0800b1e9
 800b27c:	0800b343 	.word	0x0800b343
 800b280:	0800b1e9 	.word	0x0800b1e9
 800b284:	0800b30d 	.word	0x0800b30d
 800b288:	0800b1e9 	.word	0x0800b1e9
 800b28c:	0800b1e9 	.word	0x0800b1e9
 800b290:	0800b2c3 	.word	0x0800b2c3
 800b294:	3b45      	subs	r3, #69	; 0x45
 800b296:	2b02      	cmp	r3, #2
 800b298:	d8a6      	bhi.n	800b1e8 <__ssvfiscanf_r+0xf0>
 800b29a:	2305      	movs	r3, #5
 800b29c:	e01b      	b.n	800b2d6 <__ssvfiscanf_r+0x1de>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2a4:	4798      	blx	r3
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	f43f af65 	beq.w	800b176 <__ssvfiscanf_r+0x7e>
 800b2ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	f040 808d 	bne.w	800b3ce <__ssvfiscanf_r+0x2d6>
 800b2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b8:	e08f      	b.n	800b3da <__ssvfiscanf_r+0x2e2>
 800b2ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b2bc:	f042 0220 	orr.w	r2, r2, #32
 800b2c0:	9241      	str	r2, [sp, #260]	; 0x104
 800b2c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b2c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2c8:	9241      	str	r2, [sp, #260]	; 0x104
 800b2ca:	2210      	movs	r2, #16
 800b2cc:	2b6f      	cmp	r3, #111	; 0x6f
 800b2ce:	bf34      	ite	cc
 800b2d0:	2303      	movcc	r3, #3
 800b2d2:	2304      	movcs	r3, #4
 800b2d4:	9242      	str	r2, [sp, #264]	; 0x108
 800b2d6:	9347      	str	r3, [sp, #284]	; 0x11c
 800b2d8:	6863      	ldr	r3, [r4, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	dd42      	ble.n	800b364 <__ssvfiscanf_r+0x26c>
 800b2de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2e0:	0659      	lsls	r1, r3, #25
 800b2e2:	d404      	bmi.n	800b2ee <__ssvfiscanf_r+0x1f6>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	781a      	ldrb	r2, [r3, #0]
 800b2e8:	5cba      	ldrb	r2, [r7, r2]
 800b2ea:	0712      	lsls	r2, r2, #28
 800b2ec:	d441      	bmi.n	800b372 <__ssvfiscanf_r+0x27a>
 800b2ee:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	dc50      	bgt.n	800b396 <__ssvfiscanf_r+0x29e>
 800b2f4:	466b      	mov	r3, sp
 800b2f6:	4622      	mov	r2, r4
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	a941      	add	r1, sp, #260	; 0x104
 800b2fc:	f000 f876 	bl	800b3ec <_scanf_chars>
 800b300:	2801      	cmp	r0, #1
 800b302:	d06e      	beq.n	800b3e2 <__ssvfiscanf_r+0x2ea>
 800b304:	2802      	cmp	r0, #2
 800b306:	f47f af1d 	bne.w	800b144 <__ssvfiscanf_r+0x4c>
 800b30a:	e7cf      	b.n	800b2ac <__ssvfiscanf_r+0x1b4>
 800b30c:	220a      	movs	r2, #10
 800b30e:	e7dd      	b.n	800b2cc <__ssvfiscanf_r+0x1d4>
 800b310:	2300      	movs	r3, #0
 800b312:	9342      	str	r3, [sp, #264]	; 0x108
 800b314:	2303      	movs	r3, #3
 800b316:	e7de      	b.n	800b2d6 <__ssvfiscanf_r+0x1de>
 800b318:	2308      	movs	r3, #8
 800b31a:	9342      	str	r3, [sp, #264]	; 0x108
 800b31c:	2304      	movs	r3, #4
 800b31e:	e7da      	b.n	800b2d6 <__ssvfiscanf_r+0x1de>
 800b320:	4629      	mov	r1, r5
 800b322:	4640      	mov	r0, r8
 800b324:	f000 f9b4 	bl	800b690 <__sccl>
 800b328:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b32a:	4605      	mov	r5, r0
 800b32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b330:	9341      	str	r3, [sp, #260]	; 0x104
 800b332:	2301      	movs	r3, #1
 800b334:	e7cf      	b.n	800b2d6 <__ssvfiscanf_r+0x1de>
 800b336:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b33c:	9341      	str	r3, [sp, #260]	; 0x104
 800b33e:	2300      	movs	r3, #0
 800b340:	e7c9      	b.n	800b2d6 <__ssvfiscanf_r+0x1de>
 800b342:	2302      	movs	r3, #2
 800b344:	e7c7      	b.n	800b2d6 <__ssvfiscanf_r+0x1de>
 800b346:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b348:	06c3      	lsls	r3, r0, #27
 800b34a:	f53f aefb 	bmi.w	800b144 <__ssvfiscanf_r+0x4c>
 800b34e:	9b00      	ldr	r3, [sp, #0]
 800b350:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b352:	1d19      	adds	r1, r3, #4
 800b354:	9100      	str	r1, [sp, #0]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f010 0f01 	tst.w	r0, #1
 800b35c:	bf14      	ite	ne
 800b35e:	801a      	strhne	r2, [r3, #0]
 800b360:	601a      	streq	r2, [r3, #0]
 800b362:	e6ef      	b.n	800b144 <__ssvfiscanf_r+0x4c>
 800b364:	4621      	mov	r1, r4
 800b366:	4630      	mov	r0, r6
 800b368:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b36a:	4798      	blx	r3
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d0b6      	beq.n	800b2de <__ssvfiscanf_r+0x1e6>
 800b370:	e79c      	b.n	800b2ac <__ssvfiscanf_r+0x1b4>
 800b372:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b374:	3201      	adds	r2, #1
 800b376:	9245      	str	r2, [sp, #276]	; 0x114
 800b378:	6862      	ldr	r2, [r4, #4]
 800b37a:	3a01      	subs	r2, #1
 800b37c:	2a00      	cmp	r2, #0
 800b37e:	6062      	str	r2, [r4, #4]
 800b380:	dd02      	ble.n	800b388 <__ssvfiscanf_r+0x290>
 800b382:	3301      	adds	r3, #1
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	e7ad      	b.n	800b2e4 <__ssvfiscanf_r+0x1ec>
 800b388:	4621      	mov	r1, r4
 800b38a:	4630      	mov	r0, r6
 800b38c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b38e:	4798      	blx	r3
 800b390:	2800      	cmp	r0, #0
 800b392:	d0a7      	beq.n	800b2e4 <__ssvfiscanf_r+0x1ec>
 800b394:	e78a      	b.n	800b2ac <__ssvfiscanf_r+0x1b4>
 800b396:	2b04      	cmp	r3, #4
 800b398:	dc0e      	bgt.n	800b3b8 <__ssvfiscanf_r+0x2c0>
 800b39a:	466b      	mov	r3, sp
 800b39c:	4622      	mov	r2, r4
 800b39e:	4630      	mov	r0, r6
 800b3a0:	a941      	add	r1, sp, #260	; 0x104
 800b3a2:	f000 f87d 	bl	800b4a0 <_scanf_i>
 800b3a6:	e7ab      	b.n	800b300 <__ssvfiscanf_r+0x208>
 800b3a8:	0800b043 	.word	0x0800b043
 800b3ac:	0800b0bd 	.word	0x0800b0bd
 800b3b0:	0800be39 	.word	0x0800be39
 800b3b4:	0800bf3f 	.word	0x0800bf3f
 800b3b8:	4b0b      	ldr	r3, [pc, #44]	; (800b3e8 <__ssvfiscanf_r+0x2f0>)
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f43f aec2 	beq.w	800b144 <__ssvfiscanf_r+0x4c>
 800b3c0:	466b      	mov	r3, sp
 800b3c2:	4622      	mov	r2, r4
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	a941      	add	r1, sp, #260	; 0x104
 800b3c8:	f3af 8000 	nop.w
 800b3cc:	e798      	b.n	800b300 <__ssvfiscanf_r+0x208>
 800b3ce:	89a3      	ldrh	r3, [r4, #12]
 800b3d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b3d4:	bf18      	it	ne
 800b3d6:	f04f 30ff 	movne.w	r0, #4294967295
 800b3da:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b3e4:	e7f9      	b.n	800b3da <__ssvfiscanf_r+0x2e2>
 800b3e6:	bf00      	nop
 800b3e8:	00000000 	.word	0x00000000

0800b3ec <_scanf_chars>:
 800b3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f0:	4615      	mov	r5, r2
 800b3f2:	688a      	ldr	r2, [r1, #8]
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	b932      	cbnz	r2, 800b408 <_scanf_chars+0x1c>
 800b3fa:	698a      	ldr	r2, [r1, #24]
 800b3fc:	2a00      	cmp	r2, #0
 800b3fe:	bf0c      	ite	eq
 800b400:	2201      	moveq	r2, #1
 800b402:	f04f 32ff 	movne.w	r2, #4294967295
 800b406:	608a      	str	r2, [r1, #8]
 800b408:	2700      	movs	r7, #0
 800b40a:	6822      	ldr	r2, [r4, #0]
 800b40c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b49c <_scanf_chars+0xb0>
 800b410:	06d1      	lsls	r1, r2, #27
 800b412:	bf5f      	itttt	pl
 800b414:	681a      	ldrpl	r2, [r3, #0]
 800b416:	1d11      	addpl	r1, r2, #4
 800b418:	6019      	strpl	r1, [r3, #0]
 800b41a:	6816      	ldrpl	r6, [r2, #0]
 800b41c:	69a0      	ldr	r0, [r4, #24]
 800b41e:	b188      	cbz	r0, 800b444 <_scanf_chars+0x58>
 800b420:	2801      	cmp	r0, #1
 800b422:	d107      	bne.n	800b434 <_scanf_chars+0x48>
 800b424:	682b      	ldr	r3, [r5, #0]
 800b426:	781a      	ldrb	r2, [r3, #0]
 800b428:	6963      	ldr	r3, [r4, #20]
 800b42a:	5c9b      	ldrb	r3, [r3, r2]
 800b42c:	b953      	cbnz	r3, 800b444 <_scanf_chars+0x58>
 800b42e:	2f00      	cmp	r7, #0
 800b430:	d031      	beq.n	800b496 <_scanf_chars+0xaa>
 800b432:	e022      	b.n	800b47a <_scanf_chars+0x8e>
 800b434:	2802      	cmp	r0, #2
 800b436:	d120      	bne.n	800b47a <_scanf_chars+0x8e>
 800b438:	682b      	ldr	r3, [r5, #0]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b440:	071b      	lsls	r3, r3, #28
 800b442:	d41a      	bmi.n	800b47a <_scanf_chars+0x8e>
 800b444:	6823      	ldr	r3, [r4, #0]
 800b446:	3701      	adds	r7, #1
 800b448:	06da      	lsls	r2, r3, #27
 800b44a:	bf5e      	ittt	pl
 800b44c:	682b      	ldrpl	r3, [r5, #0]
 800b44e:	781b      	ldrbpl	r3, [r3, #0]
 800b450:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b454:	682a      	ldr	r2, [r5, #0]
 800b456:	686b      	ldr	r3, [r5, #4]
 800b458:	3201      	adds	r2, #1
 800b45a:	602a      	str	r2, [r5, #0]
 800b45c:	68a2      	ldr	r2, [r4, #8]
 800b45e:	3b01      	subs	r3, #1
 800b460:	3a01      	subs	r2, #1
 800b462:	606b      	str	r3, [r5, #4]
 800b464:	60a2      	str	r2, [r4, #8]
 800b466:	b142      	cbz	r2, 800b47a <_scanf_chars+0x8e>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	dcd7      	bgt.n	800b41c <_scanf_chars+0x30>
 800b46c:	4629      	mov	r1, r5
 800b46e:	4640      	mov	r0, r8
 800b470:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b474:	4798      	blx	r3
 800b476:	2800      	cmp	r0, #0
 800b478:	d0d0      	beq.n	800b41c <_scanf_chars+0x30>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	f013 0310 	ands.w	r3, r3, #16
 800b480:	d105      	bne.n	800b48e <_scanf_chars+0xa2>
 800b482:	68e2      	ldr	r2, [r4, #12]
 800b484:	3201      	adds	r2, #1
 800b486:	60e2      	str	r2, [r4, #12]
 800b488:	69a2      	ldr	r2, [r4, #24]
 800b48a:	b102      	cbz	r2, 800b48e <_scanf_chars+0xa2>
 800b48c:	7033      	strb	r3, [r6, #0]
 800b48e:	2000      	movs	r0, #0
 800b490:	6923      	ldr	r3, [r4, #16]
 800b492:	443b      	add	r3, r7
 800b494:	6123      	str	r3, [r4, #16]
 800b496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b49a:	bf00      	nop
 800b49c:	0800be39 	.word	0x0800be39

0800b4a0 <_scanf_i>:
 800b4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	4698      	mov	r8, r3
 800b4a8:	4b75      	ldr	r3, [pc, #468]	; (800b680 <_scanf_i+0x1e0>)
 800b4aa:	b087      	sub	sp, #28
 800b4ac:	4682      	mov	sl, r0
 800b4ae:	4616      	mov	r6, r2
 800b4b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b4b4:	ab03      	add	r3, sp, #12
 800b4b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b4ba:	4b72      	ldr	r3, [pc, #456]	; (800b684 <_scanf_i+0x1e4>)
 800b4bc:	69a1      	ldr	r1, [r4, #24]
 800b4be:	4a72      	ldr	r2, [pc, #456]	; (800b688 <_scanf_i+0x1e8>)
 800b4c0:	4627      	mov	r7, r4
 800b4c2:	2903      	cmp	r1, #3
 800b4c4:	bf18      	it	ne
 800b4c6:	461a      	movne	r2, r3
 800b4c8:	68a3      	ldr	r3, [r4, #8]
 800b4ca:	9201      	str	r2, [sp, #4]
 800b4cc:	1e5a      	subs	r2, r3, #1
 800b4ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b4d2:	bf81      	itttt	hi
 800b4d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b4d8:	eb03 0905 	addhi.w	r9, r3, r5
 800b4dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b4e0:	60a3      	strhi	r3, [r4, #8]
 800b4e2:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b4e6:	bf98      	it	ls
 800b4e8:	f04f 0900 	movls.w	r9, #0
 800b4ec:	463d      	mov	r5, r7
 800b4ee:	f04f 0b00 	mov.w	fp, #0
 800b4f2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b4f6:	6023      	str	r3, [r4, #0]
 800b4f8:	6831      	ldr	r1, [r6, #0]
 800b4fa:	ab03      	add	r3, sp, #12
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	7809      	ldrb	r1, [r1, #0]
 800b500:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b504:	f7ff fd46 	bl	800af94 <memchr>
 800b508:	b328      	cbz	r0, 800b556 <_scanf_i+0xb6>
 800b50a:	f1bb 0f01 	cmp.w	fp, #1
 800b50e:	d159      	bne.n	800b5c4 <_scanf_i+0x124>
 800b510:	6862      	ldr	r2, [r4, #4]
 800b512:	b92a      	cbnz	r2, 800b520 <_scanf_i+0x80>
 800b514:	2308      	movs	r3, #8
 800b516:	6822      	ldr	r2, [r4, #0]
 800b518:	6063      	str	r3, [r4, #4]
 800b51a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b51e:	6022      	str	r2, [r4, #0]
 800b520:	6822      	ldr	r2, [r4, #0]
 800b522:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b526:	6022      	str	r2, [r4, #0]
 800b528:	68a2      	ldr	r2, [r4, #8]
 800b52a:	1e51      	subs	r1, r2, #1
 800b52c:	60a1      	str	r1, [r4, #8]
 800b52e:	b192      	cbz	r2, 800b556 <_scanf_i+0xb6>
 800b530:	6832      	ldr	r2, [r6, #0]
 800b532:	1c51      	adds	r1, r2, #1
 800b534:	6031      	str	r1, [r6, #0]
 800b536:	7812      	ldrb	r2, [r2, #0]
 800b538:	f805 2b01 	strb.w	r2, [r5], #1
 800b53c:	6872      	ldr	r2, [r6, #4]
 800b53e:	3a01      	subs	r2, #1
 800b540:	2a00      	cmp	r2, #0
 800b542:	6072      	str	r2, [r6, #4]
 800b544:	dc07      	bgt.n	800b556 <_scanf_i+0xb6>
 800b546:	4631      	mov	r1, r6
 800b548:	4650      	mov	r0, sl
 800b54a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b54e:	4790      	blx	r2
 800b550:	2800      	cmp	r0, #0
 800b552:	f040 8085 	bne.w	800b660 <_scanf_i+0x1c0>
 800b556:	f10b 0b01 	add.w	fp, fp, #1
 800b55a:	f1bb 0f03 	cmp.w	fp, #3
 800b55e:	d1cb      	bne.n	800b4f8 <_scanf_i+0x58>
 800b560:	6863      	ldr	r3, [r4, #4]
 800b562:	b90b      	cbnz	r3, 800b568 <_scanf_i+0xc8>
 800b564:	230a      	movs	r3, #10
 800b566:	6063      	str	r3, [r4, #4]
 800b568:	6863      	ldr	r3, [r4, #4]
 800b56a:	4948      	ldr	r1, [pc, #288]	; (800b68c <_scanf_i+0x1ec>)
 800b56c:	6960      	ldr	r0, [r4, #20]
 800b56e:	1ac9      	subs	r1, r1, r3
 800b570:	f000 f88e 	bl	800b690 <__sccl>
 800b574:	f04f 0b00 	mov.w	fp, #0
 800b578:	68a3      	ldr	r3, [r4, #8]
 800b57a:	6822      	ldr	r2, [r4, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d03d      	beq.n	800b5fc <_scanf_i+0x15c>
 800b580:	6831      	ldr	r1, [r6, #0]
 800b582:	6960      	ldr	r0, [r4, #20]
 800b584:	f891 c000 	ldrb.w	ip, [r1]
 800b588:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d035      	beq.n	800b5fc <_scanf_i+0x15c>
 800b590:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b594:	d124      	bne.n	800b5e0 <_scanf_i+0x140>
 800b596:	0510      	lsls	r0, r2, #20
 800b598:	d522      	bpl.n	800b5e0 <_scanf_i+0x140>
 800b59a:	f10b 0b01 	add.w	fp, fp, #1
 800b59e:	f1b9 0f00 	cmp.w	r9, #0
 800b5a2:	d003      	beq.n	800b5ac <_scanf_i+0x10c>
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	f109 39ff 	add.w	r9, r9, #4294967295
 800b5aa:	60a3      	str	r3, [r4, #8]
 800b5ac:	6873      	ldr	r3, [r6, #4]
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	6073      	str	r3, [r6, #4]
 800b5b4:	dd1b      	ble.n	800b5ee <_scanf_i+0x14e>
 800b5b6:	6833      	ldr	r3, [r6, #0]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	6033      	str	r3, [r6, #0]
 800b5bc:	68a3      	ldr	r3, [r4, #8]
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	60a3      	str	r3, [r4, #8]
 800b5c2:	e7d9      	b.n	800b578 <_scanf_i+0xd8>
 800b5c4:	f1bb 0f02 	cmp.w	fp, #2
 800b5c8:	d1ae      	bne.n	800b528 <_scanf_i+0x88>
 800b5ca:	6822      	ldr	r2, [r4, #0]
 800b5cc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b5d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b5d4:	d1bf      	bne.n	800b556 <_scanf_i+0xb6>
 800b5d6:	2310      	movs	r3, #16
 800b5d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5dc:	6063      	str	r3, [r4, #4]
 800b5de:	e7a2      	b.n	800b526 <_scanf_i+0x86>
 800b5e0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b5e4:	6022      	str	r2, [r4, #0]
 800b5e6:	780b      	ldrb	r3, [r1, #0]
 800b5e8:	f805 3b01 	strb.w	r3, [r5], #1
 800b5ec:	e7de      	b.n	800b5ac <_scanf_i+0x10c>
 800b5ee:	4631      	mov	r1, r6
 800b5f0:	4650      	mov	r0, sl
 800b5f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b5f6:	4798      	blx	r3
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d0df      	beq.n	800b5bc <_scanf_i+0x11c>
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	05db      	lsls	r3, r3, #23
 800b600:	d50d      	bpl.n	800b61e <_scanf_i+0x17e>
 800b602:	42bd      	cmp	r5, r7
 800b604:	d909      	bls.n	800b61a <_scanf_i+0x17a>
 800b606:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b60a:	4632      	mov	r2, r6
 800b60c:	4650      	mov	r0, sl
 800b60e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b612:	f105 39ff 	add.w	r9, r5, #4294967295
 800b616:	4798      	blx	r3
 800b618:	464d      	mov	r5, r9
 800b61a:	42bd      	cmp	r5, r7
 800b61c:	d02d      	beq.n	800b67a <_scanf_i+0x1da>
 800b61e:	6822      	ldr	r2, [r4, #0]
 800b620:	f012 0210 	ands.w	r2, r2, #16
 800b624:	d113      	bne.n	800b64e <_scanf_i+0x1ae>
 800b626:	702a      	strb	r2, [r5, #0]
 800b628:	4639      	mov	r1, r7
 800b62a:	6863      	ldr	r3, [r4, #4]
 800b62c:	4650      	mov	r0, sl
 800b62e:	9e01      	ldr	r6, [sp, #4]
 800b630:	47b0      	blx	r6
 800b632:	6821      	ldr	r1, [r4, #0]
 800b634:	f8d8 3000 	ldr.w	r3, [r8]
 800b638:	f011 0f20 	tst.w	r1, #32
 800b63c:	d013      	beq.n	800b666 <_scanf_i+0x1c6>
 800b63e:	1d1a      	adds	r2, r3, #4
 800b640:	f8c8 2000 	str.w	r2, [r8]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6018      	str	r0, [r3, #0]
 800b648:	68e3      	ldr	r3, [r4, #12]
 800b64a:	3301      	adds	r3, #1
 800b64c:	60e3      	str	r3, [r4, #12]
 800b64e:	2000      	movs	r0, #0
 800b650:	1bed      	subs	r5, r5, r7
 800b652:	44ab      	add	fp, r5
 800b654:	6925      	ldr	r5, [r4, #16]
 800b656:	445d      	add	r5, fp
 800b658:	6125      	str	r5, [r4, #16]
 800b65a:	b007      	add	sp, #28
 800b65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b660:	f04f 0b00 	mov.w	fp, #0
 800b664:	e7ca      	b.n	800b5fc <_scanf_i+0x15c>
 800b666:	1d1a      	adds	r2, r3, #4
 800b668:	f8c8 2000 	str.w	r2, [r8]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f011 0f01 	tst.w	r1, #1
 800b672:	bf14      	ite	ne
 800b674:	8018      	strhne	r0, [r3, #0]
 800b676:	6018      	streq	r0, [r3, #0]
 800b678:	e7e6      	b.n	800b648 <_scanf_i+0x1a8>
 800b67a:	2001      	movs	r0, #1
 800b67c:	e7ed      	b.n	800b65a <_scanf_i+0x1ba>
 800b67e:	bf00      	nop
 800b680:	0800baf4 	.word	0x0800baf4
 800b684:	08009da5 	.word	0x08009da5
 800b688:	08009ca9 	.word	0x08009ca9
 800b68c:	0800bfe5 	.word	0x0800bfe5

0800b690 <__sccl>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	780b      	ldrb	r3, [r1, #0]
 800b694:	4604      	mov	r4, r0
 800b696:	2b5e      	cmp	r3, #94	; 0x5e
 800b698:	bf13      	iteet	ne
 800b69a:	2200      	movne	r2, #0
 800b69c:	2201      	moveq	r2, #1
 800b69e:	784b      	ldrbeq	r3, [r1, #1]
 800b6a0:	1c48      	addne	r0, r1, #1
 800b6a2:	bf08      	it	eq
 800b6a4:	1c88      	addeq	r0, r1, #2
 800b6a6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b6aa:	1e61      	subs	r1, r4, #1
 800b6ac:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b6b0:	42a9      	cmp	r1, r5
 800b6b2:	d1fb      	bne.n	800b6ac <__sccl+0x1c>
 800b6b4:	b90b      	cbnz	r3, 800b6ba <__sccl+0x2a>
 800b6b6:	3801      	subs	r0, #1
 800b6b8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ba:	f082 0201 	eor.w	r2, r2, #1
 800b6be:	4605      	mov	r5, r0
 800b6c0:	54e2      	strb	r2, [r4, r3]
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b6c8:	292d      	cmp	r1, #45	; 0x2d
 800b6ca:	d006      	beq.n	800b6da <__sccl+0x4a>
 800b6cc:	295d      	cmp	r1, #93	; 0x5d
 800b6ce:	d0f3      	beq.n	800b6b8 <__sccl+0x28>
 800b6d0:	b909      	cbnz	r1, 800b6d6 <__sccl+0x46>
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	e7f0      	b.n	800b6b8 <__sccl+0x28>
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	e7f1      	b.n	800b6be <__sccl+0x2e>
 800b6da:	786e      	ldrb	r6, [r5, #1]
 800b6dc:	2e5d      	cmp	r6, #93	; 0x5d
 800b6de:	d0fa      	beq.n	800b6d6 <__sccl+0x46>
 800b6e0:	42b3      	cmp	r3, r6
 800b6e2:	dcf8      	bgt.n	800b6d6 <__sccl+0x46>
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	3502      	adds	r5, #2
 800b6e8:	3101      	adds	r1, #1
 800b6ea:	428e      	cmp	r6, r1
 800b6ec:	5462      	strb	r2, [r4, r1]
 800b6ee:	dcfb      	bgt.n	800b6e8 <__sccl+0x58>
 800b6f0:	1af1      	subs	r1, r6, r3
 800b6f2:	3901      	subs	r1, #1
 800b6f4:	42b3      	cmp	r3, r6
 800b6f6:	bfa8      	it	ge
 800b6f8:	2100      	movge	r1, #0
 800b6fa:	1c58      	adds	r0, r3, #1
 800b6fc:	1843      	adds	r3, r0, r1
 800b6fe:	e7e0      	b.n	800b6c2 <__sccl+0x32>

0800b700 <__submore>:
 800b700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b704:	460c      	mov	r4, r1
 800b706:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b70c:	4299      	cmp	r1, r3
 800b70e:	d11b      	bne.n	800b748 <__submore+0x48>
 800b710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b714:	f7fd fb78 	bl	8008e08 <_malloc_r>
 800b718:	b918      	cbnz	r0, 800b722 <__submore+0x22>
 800b71a:	f04f 30ff 	mov.w	r0, #4294967295
 800b71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b726:	63a3      	str	r3, [r4, #56]	; 0x38
 800b728:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b72c:	6360      	str	r0, [r4, #52]	; 0x34
 800b72e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b732:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b736:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b73a:	7043      	strb	r3, [r0, #1]
 800b73c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b740:	7003      	strb	r3, [r0, #0]
 800b742:	6020      	str	r0, [r4, #0]
 800b744:	2000      	movs	r0, #0
 800b746:	e7ea      	b.n	800b71e <__submore+0x1e>
 800b748:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b74a:	0077      	lsls	r7, r6, #1
 800b74c:	463a      	mov	r2, r7
 800b74e:	f7ff fc49 	bl	800afe4 <_realloc_r>
 800b752:	4605      	mov	r5, r0
 800b754:	2800      	cmp	r0, #0
 800b756:	d0e0      	beq.n	800b71a <__submore+0x1a>
 800b758:	eb00 0806 	add.w	r8, r0, r6
 800b75c:	4601      	mov	r1, r0
 800b75e:	4632      	mov	r2, r6
 800b760:	4640      	mov	r0, r8
 800b762:	f7fe ff33 	bl	800a5cc <memcpy>
 800b766:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b76a:	f8c4 8000 	str.w	r8, [r4]
 800b76e:	e7e9      	b.n	800b744 <__submore+0x44>

0800b770 <_malloc_usable_size_r>:
 800b770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b774:	1f18      	subs	r0, r3, #4
 800b776:	2b00      	cmp	r3, #0
 800b778:	bfbc      	itt	lt
 800b77a:	580b      	ldrlt	r3, [r1, r0]
 800b77c:	18c0      	addlt	r0, r0, r3
 800b77e:	4770      	bx	lr

0800b780 <_init>:
 800b780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b782:	bf00      	nop
 800b784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b786:	bc08      	pop	{r3}
 800b788:	469e      	mov	lr, r3
 800b78a:	4770      	bx	lr

0800b78c <_fini>:
 800b78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78e:	bf00      	nop
 800b790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b792:	bc08      	pop	{r3}
 800b794:	469e      	mov	lr, r3
 800b796:	4770      	bx	lr
