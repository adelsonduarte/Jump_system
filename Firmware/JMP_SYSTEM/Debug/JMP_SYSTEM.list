
JMP_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  0800bd7c  0800bd7c  0001bd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5a4  0800c5a4  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c5a4  0800c5a4  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c5a4  0800c5a4  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5a4  0800c5a4  0001c5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5a8  0800c5a8  0001c5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800c5ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  200001d0  0800c77c  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  0800c77c  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ee6  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d9  00000000  00000000  000360df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0003a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  0003b8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d2fa  00000000  00000000  0003ce18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb44  00000000  00000000  0005a112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091077  00000000  00000000  00075c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106ccd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ae4  00000000  00000000  00106d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d0 	.word	0x200001d0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bd64 	.word	0x0800bd64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d4 	.word	0x200001d4
 8000148:	0800bd64 	.word	0x0800bd64

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2uiz>:
 8000a48:	004a      	lsls	r2, r1, #1
 8000a4a:	d211      	bcs.n	8000a70 <__aeabi_d2uiz+0x28>
 8000a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a50:	d211      	bcs.n	8000a76 <__aeabi_d2uiz+0x2e>
 8000a52:	d50d      	bpl.n	8000a70 <__aeabi_d2uiz+0x28>
 8000a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a5c:	d40e      	bmi.n	8000a7c <__aeabi_d2uiz+0x34>
 8000a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7a:	d102      	bne.n	8000a82 <__aeabi_d2uiz+0x3a>
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	4770      	bx	lr
 8000a82:	f04f 0000 	mov.w	r0, #0
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <eraseStateMachine>:
        unsigned char menuState;
        struct dataInsert menuInsert;
    };

unsigned char eraseStateMachine(struct Menu* subMenu)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuErase = subMenu;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	613b      	str	r3, [r7, #16]
    unsigned char key = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	75fb      	strb	r3, [r7, #23]
    unsigned char index = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	72fb      	strb	r3, [r7, #11]
    unsigned char displayUpdateStatus = IDDLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	72bb      	strb	r3, [r7, #10]
    unsigned char cursorPosition[2] = {0,0};
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	813b      	strh	r3, [r7, #8]
    unsigned char* ptr_eraseString;
    while(key != MENU)
 8000cc0:	e098      	b.n	8000df4 <eraseStateMachine+0x150>
    {
        switch(subMenuErase->menuState)
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	78db      	ldrb	r3, [r3, #3]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	f000 8082 	beq.w	8000dd0 <eraseStateMachine+0x12c>
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	f300 8091 	bgt.w	8000df4 <eraseStateMachine+0x150>
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <eraseStateMachine+0x38>
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d008      	beq.n	8000cec <eraseStateMachine+0x48>
 8000cda:	e08b      	b.n	8000df4 <eraseStateMachine+0x150>
        {
            case IDDLE:
                subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f003 fe0b 	bl	80048f8 <getNextSub>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	70da      	strb	r2, [r3, #3]
            break;
 8000cea:	e083      	b.n	8000df4 <eraseStateMachine+0x150>

            case VERFICA_APAGAR:
                updateUserMsg(0,USERMSG1,eraseselectUserMsg,&displayUpdateStatus);
 8000cec:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <eraseStateMachine+0x164>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	f107 030a 	add.w	r3, r7, #10
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f002 f879 	bl	8002dee <updateUserMsg>
                ptr_eraseString = getEraseTestString();
 8000cfc:	f001 fd9c 	bl	8002838 <getEraseTestString>
 8000d00:	60f8      	str	r0, [r7, #12]
                printDataDisplay(0,INSERTMSG,ptr_eraseString);
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	2102      	movs	r1, #2
 8000d06:	2000      	movs	r0, #0
 8000d08:	f003 f868 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8000d0c:	4b3f      	ldr	r3, [pc, #252]	; (8000e0c <eraseStateMachine+0x168>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	2103      	movs	r1, #3
 8000d14:	2000      	movs	r0, #0
 8000d16:	f003 f861 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8000d1a:	4b3c      	ldr	r3, [pc, #240]	; (8000e0c <eraseStateMachine+0x168>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fa14 	bl	800014c <strlen>
 8000d24:	4b3a      	ldr	r3, [pc, #232]	; (8000e10 <eraseStateMachine+0x16c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	f003 f856 	bl	8003ddc <printDataDisplay>

                key = getKeyPressed();
 8000d30:	f004 fb8e 	bl	8005450 <getKeyPressed>
 8000d34:	4603      	mov	r3, r0
 8000d36:	75fb      	strb	r3, [r7, #23]

                if(key == INSERIR)
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	2b49      	cmp	r3, #73	; 0x49
 8000d3c:	d10e      	bne.n	8000d5c <eraseStateMachine+0xb8>
                {
                	resetKeyPressed();
 8000d3e:	f004 fb93 	bl	8005468 <resetKeyPressed>
                    setUserErase(&index);
 8000d42:	f107 030b 	add.w	r3, r7, #11
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fdda 	bl	8002900 <setUserErase>
                    subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f003 fdd3 	bl	80048f8 <getNextSub>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461a      	mov	r2, r3
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	70da      	strb	r2, [r3, #3]
 8000d5a:	e04b      	b.n	8000df4 <eraseStateMachine+0x150>
                }
                else if(key == CONFIRMAR)
 8000d5c:	7dfb      	ldrb	r3, [r7, #23]
 8000d5e:	2b43      	cmp	r3, #67	; 0x43
 8000d60:	d148      	bne.n	8000df4 <eraseStateMachine+0x150>
                {
                	resetKeyPressed();
 8000d62:	f004 fb81 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000d66:	f107 0208 	add.w	r2, r7, #8
 8000d6a:	f107 030a 	add.w	r3, r7, #10
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 f857 	bl	8002e24 <readyUserInterface>
                    if(*ptr_eraseString == '5')
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b35      	cmp	r3, #53	; 0x35
 8000d7c:	d11a      	bne.n	8000db4 <eraseStateMachine+0x110>
                    {
                        updateUserMsg(3,2,erasingUserMsg,&displayUpdateStatus);
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <eraseStateMachine+0x170>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	f107 030a 	add.w	r3, r7, #10
 8000d86:	2102      	movs	r1, #2
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f002 f830 	bl	8002dee <updateUserMsg>
                        resetMyResults();
 8000d8e:	f001 fb19 	bl	80023c4 <resetMyResults>
                        subMenuErase->menuSelect = setSelectSub(&subMenuErase->menuState);
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	3303      	adds	r3, #3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 fdc0 	bl	800491c <setSelectSub>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	705a      	strb	r2, [r3, #1]
                        subMenuErase->menuState = getNextSub(CONFIRMA_APAGAR);
 8000da4:	2002      	movs	r0, #2
 8000da6:	f003 fda7 	bl	80048f8 <getNextSub>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	70da      	strb	r2, [r3, #3]
 8000db2:	e01f      	b.n	8000df4 <eraseStateMachine+0x150>
                    }
                    else if(*ptr_eraseString == '2')
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b32      	cmp	r3, #50	; 0x32
 8000dba:	d11b      	bne.n	8000df4 <eraseStateMachine+0x150>
                    {
                     subMenuErase->menuState = getNextSub(IDDLE);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f003 fd9b 	bl	80048f8 <getNextSub>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	70da      	strb	r2, [r3, #3]
                      key = MENU;
 8000dca:	234d      	movs	r3, #77	; 0x4d
 8000dcc:	75fb      	strb	r3, [r7, #23]
                    }
                }

            break;
 8000dce:	e011      	b.n	8000df4 <eraseStateMachine+0x150>

            case CONFIRMA_APAGAR:
                updateUserMsg(3,2,erasedUserMsg,&displayUpdateStatus);
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <eraseStateMachine+0x174>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	f107 030a 	add.w	r3, r7, #10
 8000dd8:	2102      	movs	r1, #2
 8000dda:	2003      	movs	r0, #3
 8000ddc:	f002 f807 	bl	8002dee <updateUserMsg>
                subMenuErase->menuState = getNextSub(IDDLE);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f003 fd89 	bl	80048f8 <getNextSub>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	70da      	strb	r2, [r3, #3]
                key = MENU;
 8000dee:	234d      	movs	r3, #77	; 0x4d
 8000df0:	75fb      	strb	r3, [r7, #23]
                break;
 8000df2:	bf00      	nop
    while(key != MENU)
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	2b4d      	cmp	r3, #77	; 0x4d
 8000df8:	f47f af63 	bne.w	8000cc2 <eraseStateMachine+0x1e>
        }
    }
}
 8000dfc:	bf00      	nop
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000bc 	.word	0x200000bc
 8000e0c:	200000d4 	.word	0x200000d4
 8000e10:	200000cc 	.word	0x200000cc
 8000e14:	200000c0 	.word	0x200000c0
 8000e18:	200000c4 	.word	0x200000c4

08000e1c <configStateMachine>:
//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
//verificar se vou usar o codigo abaixo


unsigned char configStateMachine(struct Menu* subMenu)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0b4      	sub	sp, #208	; 0xd0
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    unsigned char* ptr_numSeriesString;
    unsigned char* ptr_intervalSeriesString;

    unsigned char userIntervalTimeString[9];
    struct tm myTime;
	struct tm* configIntervalTimeStruct = &myTime;
 8000e24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	struct tm* configIntervalSeriesTimeStruct;



    struct Menu* subMenuTesteConfigurar = subMenu;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    unsigned char cursorPosition[2] = {0,0};
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    //verificar se vou usar
    struct dataInsert measurementSensor1;
    struct dataInsert measurementSensor2;
    //
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 8000e38:	f001 f96a 	bl	8002110 <getUserConfigStruct>
 8000e3c:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
    resetConfigStruct(ptr_userConfiguration);
 8000e40:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8000e44:	f001 fa80 	bl	8002348 <resetConfigStruct>

    //
    unsigned char key = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    unsigned char displayUpdateStatus = IDDLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
    short index = 2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	81bb      	strh	r3, [r7, #12]
    unsigned int altMin = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    unsigned int altMax = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    unsigned int tmin = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    unsigned int tmax = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    while(key != MENU)
 8000e6e:	f000 be85 	b.w	8001b7c <configStateMachine+0xd60>
    {
        switch(subMenuTesteConfigurar->menuState)
 8000e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000e76:	78db      	ldrb	r3, [r3, #3]
 8000e78:	2b0d      	cmp	r3, #13
 8000e7a:	f200 867f 	bhi.w	8001b7c <configStateMachine+0xd60>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <configStateMachine+0x68>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000ebd 	.word	0x08000ebd
 8000e88:	08000ed1 	.word	0x08000ed1
 8000e8c:	08000f9f 	.word	0x08000f9f
 8000e90:	0800106d 	.word	0x0800106d
 8000e94:	080011c5 	.word	0x080011c5
 8000e98:	08001301 	.word	0x08001301
 8000e9c:	0800140f 	.word	0x0800140f
 8000ea0:	08001565 	.word	0x08001565
 8000ea4:	0800166b 	.word	0x0800166b
 8000ea8:	0800175f 	.word	0x0800175f
 8000eac:	08001889 	.word	0x08001889
 8000eb0:	080019bb 	.word	0x080019bb
 8000eb4:	08001a85 	.word	0x08001a85
 8000eb8:	08001b4d 	.word	0x08001b4d
        {
        case IDDLE:
            subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f003 fd1b 	bl	80048f8 <getNextSub>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000eca:	70da      	strb	r2, [r3, #3]

            break;
 8000ecc:	f000 be56 	b.w	8001b7c <configStateMachine+0xd60>
            case CONFIG_SENSOR_1:
                updateUserMsg(0,USERMSG1,sensor1UserMsg,&displayUpdateStatus);
 8000ed0:	4bb5      	ldr	r3, [pc, #724]	; (80011a8 <configStateMachine+0x38c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f107 030f 	add.w	r3, r7, #15
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2000      	movs	r0, #0
 8000edc:	f001 ff87 	bl	8002dee <updateUserMsg>
                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8000ee0:	4bb2      	ldr	r3, [pc, #712]	; (80011ac <configStateMachine+0x390>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f002 ff77 	bl	8003ddc <printDataDisplay>
                printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 8000eee:	4baf      	ldr	r3, [pc, #700]	; (80011ac <configStateMachine+0x390>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff f92a 	bl	800014c <strlen>
 8000ef8:	4bad      	ldr	r3, [pc, #692]	; (80011b0 <configStateMachine+0x394>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	2102      	movs	r1, #2
 8000f00:	f002 ff6c 	bl	8003ddc <printDataDisplay>
                printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8000f04:	4bab      	ldr	r3, [pc, #684]	; (80011b4 <configStateMachine+0x398>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2103      	movs	r1, #3
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f002 ff65 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 8000f12:	f004 fa9d 	bl	8005450 <getKeyPressed>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

                if(key == AVANCAR)
 8000f1c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000f20:	2b41      	cmp	r3, #65	; 0x41
 8000f22:	d113      	bne.n	8000f4c <configStateMachine+0x130>
                {
                	resetKeyPressed();
 8000f24:	f004 faa0 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000f28:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f2c:	f107 030f 	add.w	r3, r7, #15
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 ff76 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_2);
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f003 fcdd 	bl	80048f8 <getNextSub>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000f46:	70da      	strb	r2, [r3, #3]
 8000f48:	f000 be18 	b.w	8001b7c <configStateMachine+0xd60>
                }
                else if(key == CONFIRMAR)
 8000f4c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000f50:	2b43      	cmp	r3, #67	; 0x43
 8000f52:	f040 8613 	bne.w	8001b7c <configStateMachine+0xd60>
                {
                	resetKeyPressed();
 8000f56:	f004 fa87 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000f5a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f5e:	f107 030f 	add.w	r3, r7, #15
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f001 ff5d 	bl	8002e24 <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 1;
 8000f6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000f78:	3303      	adds	r3, #3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fcce 	bl	800491c <setSelectSub>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000f88:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	f003 fcb4 	bl	80048f8 <getNextSub>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000f98:	70da      	strb	r2, [r3, #3]
                }

                break;
 8000f9a:	f000 bdef 	b.w	8001b7c <configStateMachine+0xd60>

            case CONFIG_SENSOR_2:
                updateUserMsg(0,0,sensor2UserMsg,&displayUpdateStatus);
 8000f9e:	4b86      	ldr	r3, [pc, #536]	; (80011b8 <configStateMachine+0x39c>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	f107 030f 	add.w	r3, r7, #15
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f001 ff20 	bl	8002dee <updateUserMsg>
                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8000fae:	4b7f      	ldr	r3, [pc, #508]	; (80011ac <configStateMachine+0x390>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f002 ff10 	bl	8003ddc <printDataDisplay>
                printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 8000fbc:	4b7b      	ldr	r3, [pc, #492]	; (80011ac <configStateMachine+0x390>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff f8c3 	bl	800014c <strlen>
 8000fc6:	4b7a      	ldr	r3, [pc, #488]	; (80011b0 <configStateMachine+0x394>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	2102      	movs	r1, #2
 8000fce:	f002 ff05 	bl	8003ddc <printDataDisplay>
                printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8000fd2:	4b78      	ldr	r3, [pc, #480]	; (80011b4 <configStateMachine+0x398>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2103      	movs	r1, #3
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f002 fefe 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 8000fe0:	f004 fa36 	bl	8005450 <getKeyPressed>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

                if(key == AVANCAR)
 8000fea:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000fee:	2b41      	cmp	r3, #65	; 0x41
 8000ff0:	d113      	bne.n	800101a <configStateMachine+0x1fe>
                {
                	resetKeyPressed();
 8000ff2:	f004 fa39 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000ff6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f001 ff0f 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8001006:	2001      	movs	r0, #1
 8001008:	f003 fc76 	bl	80048f8 <getNextSub>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001014:	70da      	strb	r2, [r3, #3]
 8001016:	f000 bdb1 	b.w	8001b7c <configStateMachine+0xd60>
                }
                else if(key == CONFIRMAR)
 800101a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800101e:	2b43      	cmp	r3, #67	; 0x43
 8001020:	f040 85ac 	bne.w	8001b7c <configStateMachine+0xd60>
                {
                	resetKeyPressed();
 8001024:	f004 fa20 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001028:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800102c:	f107 030f 	add.w	r3, r7, #15
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fef6 	bl	8002e24 <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 2;
 8001038:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800103c:	2202      	movs	r2, #2
 800103e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001046:	3303      	adds	r3, #3
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fc67 	bl	800491c <setSelectSub>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001056:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8001058:	2003      	movs	r0, #3
 800105a:	f003 fc4d 	bl	80048f8 <getNextSub>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001066:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001068:	f000 bd88 	b.w	8001b7c <configStateMachine+0xd60>

            case SENSOR_ALTMIN:
                updateUserMsg(0,USERMSG1,altminUserMsg,&displayUpdateStatus);
 800106c:	4b53      	ldr	r3, [pc, #332]	; (80011bc <configStateMachine+0x3a0>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	f107 030f 	add.w	r3, r7, #15
 8001074:	2100      	movs	r1, #0
 8001076:	2000      	movs	r0, #0
 8001078:	f001 feb9 	bl	8002dee <updateUserMsg>
                ptr_altMinString = getAltMinString();
 800107c:	f001 fac0 	bl	8002600 <getAltMinString>
 8001080:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
                printDataDisplay(0,USERMSG2,ptr_altMinString);
 8001084:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001088:	2101      	movs	r1, #1
 800108a:	2000      	movs	r0, #0
 800108c:	f002 fea6 	bl	8003ddc <printDataDisplay>
                updateDataDisplay(index,USERMSG2);
 8001090:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001094:	2101      	movs	r1, #1
 8001096:	4618      	mov	r0, r3
 8001098:	f002 feba 	bl	8003e10 <updateDataDisplay>

				printDataDisplay(0,INSERTMSG,avancarUserMsg);
 800109c:	4b43      	ldr	r3, [pc, #268]	; (80011ac <configStateMachine+0x390>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	2102      	movs	r1, #2
 80010a4:	2000      	movs	r0, #0
 80010a6:	f002 fe99 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 80010aa:	4b40      	ldr	r3, [pc, #256]	; (80011ac <configStateMachine+0x390>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f84c 	bl	800014c <strlen>
 80010b4:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <configStateMachine+0x394>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	2102      	movs	r1, #2
 80010bc:	f002 fe8e 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 80010c0:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <configStateMachine+0x398>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	2103      	movs	r1, #3
 80010c8:	2000      	movs	r0, #0
 80010ca:	f002 fe87 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <configStateMachine+0x398>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f83a 	bl	800014c <strlen>
 80010d8:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <configStateMachine+0x3a4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	2103      	movs	r1, #3
 80010e0:	f002 fe7c 	bl	8003ddc <printDataDisplay>



                key = getKeyPressed();
 80010e4:	f004 f9b4 	bl	8005450 <getKeyPressed>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

                if(key == INSERIR)
 80010ee:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80010f2:	2b49      	cmp	r3, #73	; 0x49
 80010f4:	d110      	bne.n	8001118 <configStateMachine+0x2fc>
                {
                	resetKeyPressed();
 80010f6:	f004 f9b7 	bl	8005468 <resetKeyPressed>
                    setUserAltMin(&index);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fbda 	bl	80028b8 <setUserAltMin>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8001104:	2003      	movs	r0, #3
 8001106:	f003 fbf7 	bl	80048f8 <getNextSub>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001112:	70da      	strb	r2, [r3, #3]
 8001114:	f000 bd32 	b.w	8001b7c <configStateMachine+0xd60>
                }
                else if(key == AVANCAR)
 8001118:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800111c:	2b41      	cmp	r3, #65	; 0x41
 800111e:	d109      	bne.n	8001134 <configStateMachine+0x318>
                {
                	resetKeyPressed();
 8001120:	f004 f9a2 	bl	8005468 <resetKeyPressed>
                    indexChange(&index,2);
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2102      	movs	r1, #2
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fa49 	bl	80025c2 <indexChange>
 8001130:	f000 bd24 	b.w	8001b7c <configStateMachine+0xd60>
                }
                else if(key == CONFIRMAR)
 8001134:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001138:	2b43      	cmp	r3, #67	; 0x43
 800113a:	f040 851f 	bne.w	8001b7c <configStateMachine+0xd60>
                {
                	resetKeyPressed();
 800113e:	f004 f993 	bl	8005468 <resetKeyPressed>
                    index = 2;
 8001142:	2302      	movs	r3, #2
 8001144:	81bb      	strh	r3, [r7, #12]

                    altMin = stringToInt(getAltMinString());
 8001146:	f001 fa5b 	bl	8002600 <getAltMinString>
 800114a:	4603      	mov	r3, r0
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f9fd 	bl	800254c <stringToInt>
 8001152:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                    tmin = alturaToTempo(altMin);
 8001156:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800115a:	f001 fe17 	bl	8002d8c <alturaToTempo>
 800115e:	4603      	mov	r3, r0
 8001160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                    ptr_userConfiguration->userAlturaMin = tmin;
 8001164:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001168:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800116c:	60da      	str	r2, [r3, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800116e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001172:	f107 030f 	add.w	r3, r7, #15
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fe53 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 800117e:	2004      	movs	r0, #4
 8001180:	f003 fbba 	bl	80048f8 <getNextSub>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800118c:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 800118e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001192:	3303      	adds	r3, #3
 8001194:	4618      	mov	r0, r3
 8001196:	f003 fbc1 	bl	800491c <setSelectSub>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011a2:	705a      	strb	r2, [r3, #1]
                }
                break;
 80011a4:	f000 bcea 	b.w	8001b7c <configStateMachine+0xd60>
 80011a8:	2000007c 	.word	0x2000007c
 80011ac:	200000c8 	.word	0x200000c8
 80011b0:	200000d0 	.word	0x200000d0
 80011b4:	200000d4 	.word	0x200000d4
 80011b8:	20000080 	.word	0x20000080
 80011bc:	20000084 	.word	0x20000084
 80011c0:	200000cc 	.word	0x200000cc

            case SENSOR_ALTMAX:
                updateUserMsg(0,USERMSG1,altmaxUserMsg,&displayUpdateStatus);
 80011c4:	4bc8      	ldr	r3, [pc, #800]	; (80014e8 <configStateMachine+0x6cc>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	f107 030f 	add.w	r3, r7, #15
 80011cc:	2100      	movs	r1, #0
 80011ce:	2000      	movs	r0, #0
 80011d0:	f001 fe0d 	bl	8002dee <updateUserMsg>
                ptr_altMaxString = getAltMaxString();
 80011d4:	f001 fa34 	bl	8002640 <getAltMaxString>
 80011d8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                printDataDisplay(0,USERMSG2,ptr_altMinString);
 80011dc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80011e0:	2101      	movs	r1, #1
 80011e2:	2000      	movs	r0, #0
 80011e4:	f002 fdfa 	bl	8003ddc <printDataDisplay>
                updateDataDisplay(index,USERMSG2);
 80011e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011ec:	2101      	movs	r1, #1
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fe0e 	bl	8003e10 <updateDataDisplay>

                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 80011f4:	4bbd      	ldr	r3, [pc, #756]	; (80014ec <configStateMachine+0x6d0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	2102      	movs	r1, #2
 80011fc:	2000      	movs	r0, #0
 80011fe:	f002 fded 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001202:	4bba      	ldr	r3, [pc, #744]	; (80014ec <configStateMachine+0x6d0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7fe ffa0 	bl	800014c <strlen>
 800120c:	4bb8      	ldr	r3, [pc, #736]	; (80014f0 <configStateMachine+0x6d4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	2102      	movs	r1, #2
 8001214:	f002 fde2 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8001218:	4bb6      	ldr	r3, [pc, #728]	; (80014f4 <configStateMachine+0x6d8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	2103      	movs	r1, #3
 8001220:	2000      	movs	r0, #0
 8001222:	f002 fddb 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001226:	4bb3      	ldr	r3, [pc, #716]	; (80014f4 <configStateMachine+0x6d8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7fe ff8e 	bl	800014c <strlen>
 8001230:	4bb1      	ldr	r3, [pc, #708]	; (80014f8 <configStateMachine+0x6dc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	2103      	movs	r1, #3
 8001238:	f002 fdd0 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 800123c:	f004 f908 	bl	8005450 <getKeyPressed>
 8001240:	4603      	mov	r3, r0
 8001242:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

                if(key == INSERIR)
 8001246:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800124a:	2b49      	cmp	r3, #73	; 0x49
 800124c:	d110      	bne.n	8001270 <configStateMachine+0x454>
                {
                	resetKeyPressed();
 800124e:	f004 f90b 	bl	8005468 <resetKeyPressed>
                    setUserAltMax(&index);
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	4618      	mov	r0, r3
 8001258:	f001 fb77 	bl	800294a <setUserAltMax>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 800125c:	2004      	movs	r0, #4
 800125e:	f003 fb4b 	bl	80048f8 <getNextSub>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800126a:	70da      	strb	r2, [r3, #3]
 800126c:	f000 bc86 	b.w	8001b7c <configStateMachine+0xd60>
                }
                else if(key == AVANCAR)
 8001270:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001274:	2b41      	cmp	r3, #65	; 0x41
 8001276:	d109      	bne.n	800128c <configStateMachine+0x470>
                {
                	resetKeyPressed();
 8001278:	f004 f8f6 	bl	8005468 <resetKeyPressed>
                    indexChange(&index,2);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2102      	movs	r1, #2
 8001282:	4618      	mov	r0, r3
 8001284:	f001 f99d 	bl	80025c2 <indexChange>
 8001288:	f000 bc78 	b.w	8001b7c <configStateMachine+0xd60>
                }
                else if(key == CONFIRMAR)
 800128c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001290:	2b43      	cmp	r3, #67	; 0x43
 8001292:	f040 8473 	bne.w	8001b7c <configStateMachine+0xd60>
                {
                	resetKeyPressed();
 8001296:	f004 f8e7 	bl	8005468 <resetKeyPressed>
                    index = 2;
 800129a:	2302      	movs	r3, #2
 800129c:	81bb      	strh	r3, [r7, #12]
                    altMax = stringToInt(getAltMaxString());
 800129e:	f001 f9cf 	bl	8002640 <getAltMaxString>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 f951 	bl	800254c <stringToInt>
 80012aa:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
                    tmax = alturaToTempo(altMax);
 80012ae:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80012b2:	f001 fd6b 	bl	8002d8c <alturaToTempo>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    ptr_userConfiguration->userAlturaMax = tmax;
 80012bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80012c4:	611a      	str	r2, [r3, #16]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80012c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012ca:	f107 030f 	add.w	r3, r7, #15
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 fda7 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 80012d6:	2005      	movs	r0, #5
 80012d8:	f003 fb0e 	bl	80048f8 <getNextSub>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012e4:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80012e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012ea:	3303      	adds	r3, #3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fb15 	bl	800491c <setSelectSub>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012fa:	705a      	strb	r2, [r3, #1]
                }

                break;
 80012fc:	f000 bc3e 	b.w	8001b7c <configStateMachine+0xd60>

            case SENSOR_SALTOS:
                updateUserMsg(0,USERMSG1,numsaltosUserMsg,&displayUpdateStatus);
 8001300:	4b7e      	ldr	r3, [pc, #504]	; (80014fc <configStateMachine+0x6e0>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	f107 030f 	add.w	r3, r7, #15
 8001308:	2100      	movs	r1, #0
 800130a:	2000      	movs	r0, #0
 800130c:	f001 fd6f 	bl	8002dee <updateUserMsg>
                ptr_numSaltosString = getNumSaltosString();
 8001310:	f001 f9b6 	bl	8002680 <getNumSaltosString>
 8001314:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                printDataDisplay(0,USERMSG2,ptr_numSaltosString);
 8001318:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800131c:	2101      	movs	r1, #1
 800131e:	2000      	movs	r0, #0
 8001320:	f002 fd5c 	bl	8003ddc <printDataDisplay>
                updateDataDisplay(index,USERMSG2);
 8001324:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001328:	2101      	movs	r1, #1
 800132a:	4618      	mov	r0, r3
 800132c:	f002 fd70 	bl	8003e10 <updateDataDisplay>

                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8001330:	4b6e      	ldr	r3, [pc, #440]	; (80014ec <configStateMachine+0x6d0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	2102      	movs	r1, #2
 8001338:	2000      	movs	r0, #0
 800133a:	f002 fd4f 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 800133e:	4b6b      	ldr	r3, [pc, #428]	; (80014ec <configStateMachine+0x6d0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7fe ff02 	bl	800014c <strlen>
 8001348:	4b69      	ldr	r3, [pc, #420]	; (80014f0 <configStateMachine+0x6d4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	2102      	movs	r1, #2
 8001350:	f002 fd44 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8001354:	4b67      	ldr	r3, [pc, #412]	; (80014f4 <configStateMachine+0x6d8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	2103      	movs	r1, #3
 800135c:	2000      	movs	r0, #0
 800135e:	f002 fd3d 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001362:	4b64      	ldr	r3, [pc, #400]	; (80014f4 <configStateMachine+0x6d8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7fe fef0 	bl	800014c <strlen>
 800136c:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <configStateMachine+0x6dc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	2103      	movs	r1, #3
 8001374:	f002 fd32 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 8001378:	f004 f86a 	bl	8005450 <getKeyPressed>
 800137c:	4603      	mov	r3, r0
 800137e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

                if(key == INSERIR)
 8001382:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001386:	2b49      	cmp	r3, #73	; 0x49
 8001388:	d10f      	bne.n	80013aa <configStateMachine+0x58e>
                {
                	resetKeyPressed();
 800138a:	f004 f86d 	bl	8005468 <resetKeyPressed>
                    setUserNumSaltos(&index);
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4618      	mov	r0, r3
 8001394:	f001 fafd 	bl	8002992 <setUserNumSaltos>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 8001398:	2005      	movs	r0, #5
 800139a:	f003 faad 	bl	80048f8 <getNextSub>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80013a6:	70da      	strb	r2, [r3, #3]
 80013a8:	e3e8      	b.n	8001b7c <configStateMachine+0xd60>
                }
                else if(key == AVANCAR)
 80013aa:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80013ae:	2b41      	cmp	r3, #65	; 0x41
 80013b0:	d108      	bne.n	80013c4 <configStateMachine+0x5a8>
                {
                	resetKeyPressed();
 80013b2:	f004 f859 	bl	8005468 <resetKeyPressed>
                    indexChange(&index,2);
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	2102      	movs	r1, #2
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 f900 	bl	80025c2 <indexChange>
 80013c2:	e3db      	b.n	8001b7c <configStateMachine+0xd60>
                }
                else if(key == CONFIRMAR)
 80013c4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80013c8:	2b43      	cmp	r3, #67	; 0x43
 80013ca:	f040 83d7 	bne.w	8001b7c <configStateMachine+0xd60>
                {
                	resetKeyPressed();
 80013ce:	f004 f84b 	bl	8005468 <resetKeyPressed>
                    index = 4;
 80013d2:	2304      	movs	r3, #4
 80013d4:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80013d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013da:	f107 030f 	add.w	r3, r7, #15
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fd1f 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 80013e6:	2006      	movs	r0, #6
 80013e8:	f003 fa86 	bl	80048f8 <getNextSub>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80013f4:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80013f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80013fa:	3303      	adds	r3, #3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 fa8d 	bl	800491c <setSelectSub>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800140a:	705a      	strb	r2, [r3, #1]
                }
                break;
 800140c:	e3b6      	b.n	8001b7c <configStateMachine+0xd60>

            case SENSOR_INT_SALTOS:
                updateUserMsg(0,USERMSG1,intersaltosUserMsg,&displayUpdateStatus);
 800140e:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <configStateMachine+0x6e4>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	f107 030f 	add.w	r3, r7, #15
 8001416:	2100      	movs	r1, #0
 8001418:	2000      	movs	r0, #0
 800141a:	f001 fce8 	bl	8002dee <updateUserMsg>
                configIntervalTimeStruct = getIntervalTimeStruct();
 800141e:	f000 fdff 	bl	8002020 <getIntervalTimeStruct>
 8001422:	4603      	mov	r3, r0
 8001424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                strftime(userIntervalTimeString, sizeof(userIntervalTimeString), "%M:%S", configIntervalTimeStruct);
 8001428:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800142c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001430:	4a34      	ldr	r2, [pc, #208]	; (8001504 <configStateMachine+0x6e8>)
 8001432:	2109      	movs	r1, #9
 8001434:	f009 f89c 	bl	800a570 <strftime>
                printDataDisplay(0,USERMSG2,userIntervalTimeString);
 8001438:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800143c:	461a      	mov	r2, r3
 800143e:	2101      	movs	r1, #1
 8001440:	2000      	movs	r0, #0
 8001442:	f002 fccb 	bl	8003ddc <printDataDisplay>
                updateDataDisplay(index,USERMSG2);
 8001446:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800144a:	2101      	movs	r1, #1
 800144c:	4618      	mov	r0, r3
 800144e:	f002 fcdf 	bl	8003e10 <updateDataDisplay>

                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <configStateMachine+0x6d0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	2102      	movs	r1, #2
 800145a:	2000      	movs	r0, #0
 800145c:	f002 fcbe 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <configStateMachine+0x6d0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe fe71 	bl	800014c <strlen>
 800146a:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <configStateMachine+0x6d4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	2102      	movs	r1, #2
 8001472:	f002 fcb3 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <configStateMachine+0x6d8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	2103      	movs	r1, #3
 800147e:	2000      	movs	r0, #0
 8001480:	f002 fcac 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <configStateMachine+0x6d8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe fe5f 	bl	800014c <strlen>
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <configStateMachine+0x6dc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	2103      	movs	r1, #3
 8001496:	f002 fca1 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 800149a:	f003 ffd9 	bl	8005450 <getKeyPressed>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

                if(key == INSERIR)
 80014a4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80014a8:	2b49      	cmp	r3, #73	; 0x49
 80014aa:	d10f      	bne.n	80014cc <configStateMachine+0x6b0>
                {
                	resetKeyPressed();
 80014ac:	f003 ffdc 	bl	8005468 <resetKeyPressed>
                	setIntervalSaltosTime(&index);
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 fb69 	bl	8002b8c <setIntervalSaltosTime>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 80014ba:	2006      	movs	r0, #6
 80014bc:	f003 fa1c 	bl	80048f8 <getNextSub>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014c8:	70da      	strb	r2, [r3, #3]
 80014ca:	e357      	b.n	8001b7c <configStateMachine+0xd60>
                }
                else if(key == AVANCAR)
 80014cc:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80014d0:	2b41      	cmp	r3, #65	; 0x41
 80014d2:	d119      	bne.n	8001508 <configStateMachine+0x6ec>
				{
					resetKeyPressed();
 80014d4:	f003 ffc8 	bl	8005468 <resetKeyPressed>
					indexColumn(&index,4);
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2104      	movs	r1, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 ffce 	bl	8002480 <indexColumn>
 80014e4:	e34a      	b.n	8001b7c <configStateMachine+0xd60>
 80014e6:	bf00      	nop
 80014e8:	20000088 	.word	0x20000088
 80014ec:	200000c8 	.word	0x200000c8
 80014f0:	200000d0 	.word	0x200000d0
 80014f4:	200000d4 	.word	0x200000d4
 80014f8:	200000cc 	.word	0x200000cc
 80014fc:	2000008c 	.word	0x2000008c
 8001500:	20000090 	.word	0x20000090
 8001504:	0800bd7c 	.word	0x0800bd7c
				}
                else if(key == CONFIRMAR)
 8001508:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800150c:	2b43      	cmp	r3, #67	; 0x43
 800150e:	f040 8335 	bne.w	8001b7c <configStateMachine+0xd60>
                {
                	resetKeyPressed();
 8001512:	f003 ffa9 	bl	8005468 <resetKeyPressed>
                    index = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	81bb      	strh	r3, [r7, #12]
                    ptr_userConfiguration->userIntervalSaltos = milisecondsTime(configIntervalTimeStruct);
 800151a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800151e:	f000 ffea 	bl	80024f6 <milisecondsTime>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800152a:	619a      	str	r2, [r3, #24]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800152c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001530:	f107 030f 	add.w	r3, r7, #15
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fc74 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 800153c:	2007      	movs	r0, #7
 800153e:	f003 f9db 	bl	80048f8 <getNextSub>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800154a:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 800154c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001550:	3303      	adds	r3, #3
 8001552:	4618      	mov	r0, r3
 8001554:	f003 f9e2 	bl	800491c <setSelectSub>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001560:	705a      	strb	r2, [r3, #1]
                }

                break;
 8001562:	e30b      	b.n	8001b7c <configStateMachine+0xd60>

            case SENSOR_JMP_SELECT:
                updateUserMsg(0,USERMSG1,tiposaltoUserMsg,&displayUpdateStatus);
 8001564:	4bc1      	ldr	r3, [pc, #772]	; (800186c <configStateMachine+0xa50>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	f107 030f 	add.w	r3, r7, #15
 800156c:	2100      	movs	r1, #0
 800156e:	2000      	movs	r0, #0
 8001570:	f001 fc3d 	bl	8002dee <updateUserMsg>
                ptr_jumpSelectString = getTypeJumpString();
 8001574:	f001 f8a4 	bl	80026c0 <getTypeJumpString>
 8001578:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                printDataDisplay(0,USERMSG2,ptr_jumpSelectString);
 800157c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001580:	2101      	movs	r1, #1
 8001582:	2000      	movs	r0, #0
 8001584:	f002 fc2a 	bl	8003ddc <printDataDisplay>
                updateDataDisplay(index,USERMSG2);
 8001588:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800158c:	2101      	movs	r1, #1
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fc3e 	bl	8003e10 <updateDataDisplay>

				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8001594:	4bb6      	ldr	r3, [pc, #728]	; (8001870 <configStateMachine+0xa54>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	2103      	movs	r1, #3
 800159c:	2000      	movs	r0, #0
 800159e:	f002 fc1d 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 80015a2:	4bb3      	ldr	r3, [pc, #716]	; (8001870 <configStateMachine+0xa54>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe fdd0 	bl	800014c <strlen>
 80015ac:	4bb1      	ldr	r3, [pc, #708]	; (8001874 <configStateMachine+0xa58>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	2103      	movs	r1, #3
 80015b4:	f002 fc12 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 80015b8:	f003 ff4a 	bl	8005450 <getKeyPressed>
 80015bc:	4603      	mov	r3, r0
 80015be:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

                if(key == INSERIR)
 80015c2:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80015c6:	2b49      	cmp	r3, #73	; 0x49
 80015c8:	d10f      	bne.n	80015ea <configStateMachine+0x7ce>
                {
                	resetKeyPressed();
 80015ca:	f003 ff4d 	bl	8005468 <resetKeyPressed>
                    setUserTypeJump(&index);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4618      	mov	r0, r3
 80015d4:	f001 fa01 	bl	80029da <setUserTypeJump>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 80015d8:	2007      	movs	r0, #7
 80015da:	f003 f98d 	bl	80048f8 <getNextSub>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015e6:	70da      	strb	r2, [r3, #3]
 80015e8:	e2c8      	b.n	8001b7c <configStateMachine+0xd60>

                }
                else if(key == CONFIRMAR)
 80015ea:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80015ee:	2b43      	cmp	r3, #67	; 0x43
 80015f0:	f040 82c4 	bne.w	8001b7c <configStateMachine+0xd60>
                {
                	resetKeyPressed();
 80015f4:	f003 ff38 	bl	8005468 <resetKeyPressed>
                    if(*ptr_jumpSelectString == '3')
 80015f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b33      	cmp	r3, #51	; 0x33
 8001600:	d115      	bne.n	800162e <configStateMachine+0x812>
                    {
                    	index = 1;
 8001602:	2301      	movs	r3, #1
 8001604:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 8001606:	2008      	movs	r0, #8
 8001608:	f003 f976 	bl	80048f8 <getNextSub>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001614:	70da      	strb	r2, [r3, #3]
                        subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001616:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800161a:	3303      	adds	r3, #3
 800161c:	4618      	mov	r0, r3
 800161e:	f003 f97d 	bl	800491c <setSelectSub>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800162a:	705a      	strb	r2, [r3, #1]
 800162c:	e014      	b.n	8001658 <configStateMachine+0x83c>
                    }
                    else
                    {
                    	index = 2;
 800162e:	2302      	movs	r3, #2
 8001630:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8001632:	2009      	movs	r0, #9
 8001634:	f003 f960 	bl	80048f8 <getNextSub>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001640:	70da      	strb	r2, [r3, #3]
                        subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001642:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001646:	3303      	adds	r3, #3
 8001648:	4618      	mov	r0, r3
 800164a:	f003 f967 	bl	800491c <setSelectSub>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001656:	705a      	strb	r2, [r3, #1]
                    }
                    //TESTE trocar a variavel por uma local e o resultado enviar para ptr_userConfiguration->userCMJ.
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001658:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800165c:	f107 030f 	add.w	r3, r7, #15
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f001 fbde 	bl	8002e24 <readyUserInterface>

                }

                break;
 8001668:	e288      	b.n	8001b7c <configStateMachine+0xd60>

            case SENSOR_ALTDJ:
                updateUserMsg(0,USERMSG1,altdjUserMsg,&displayUpdateStatus);
 800166a:	4b83      	ldr	r3, [pc, #524]	; (8001878 <configStateMachine+0xa5c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	f107 030f 	add.w	r3, r7, #15
 8001672:	2100      	movs	r1, #0
 8001674:	2000      	movs	r0, #0
 8001676:	f001 fbba 	bl	8002dee <updateUserMsg>
                ptr_altDJString = getAltDJString();
 800167a:	f001 f837 	bl	80026ec <getAltDJString>
 800167e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                printDataDisplay(0,USERMSG2,ptr_altDJString);
 8001682:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001686:	2101      	movs	r1, #1
 8001688:	2000      	movs	r0, #0
 800168a:	f002 fba7 	bl	8003ddc <printDataDisplay>
                updateDataDisplay(index,USERMSG2);
 800168e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001692:	2101      	movs	r1, #1
 8001694:	4618      	mov	r0, r3
 8001696:	f002 fbbb 	bl	8003e10 <updateDataDisplay>

                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 800169a:	4b78      	ldr	r3, [pc, #480]	; (800187c <configStateMachine+0xa60>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	2102      	movs	r1, #2
 80016a2:	2000      	movs	r0, #0
 80016a4:	f002 fb9a 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 80016a8:	4b74      	ldr	r3, [pc, #464]	; (800187c <configStateMachine+0xa60>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fd4d 	bl	800014c <strlen>
 80016b2:	4b73      	ldr	r3, [pc, #460]	; (8001880 <configStateMachine+0xa64>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	2102      	movs	r1, #2
 80016ba:	f002 fb8f 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 80016be:	4b6c      	ldr	r3, [pc, #432]	; (8001870 <configStateMachine+0xa54>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	2103      	movs	r1, #3
 80016c6:	2000      	movs	r0, #0
 80016c8:	f002 fb88 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 80016cc:	4b68      	ldr	r3, [pc, #416]	; (8001870 <configStateMachine+0xa54>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fd3b 	bl	800014c <strlen>
 80016d6:	4b67      	ldr	r3, [pc, #412]	; (8001874 <configStateMachine+0xa58>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	2103      	movs	r1, #3
 80016de:	f002 fb7d 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 80016e2:	f003 feb5 	bl	8005450 <getKeyPressed>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

                if(key == INSERIR)
 80016ec:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80016f0:	2b49      	cmp	r3, #73	; 0x49
 80016f2:	d10f      	bne.n	8001714 <configStateMachine+0x8f8>
                {
                	resetKeyPressed();
 80016f4:	f003 feb8 	bl	8005468 <resetKeyPressed>
                    setUserAltDJ(&index);
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4618      	mov	r0, r3
 80016fe:	f001 f990 	bl	8002a22 <setUserAltDJ>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 8001702:	2008      	movs	r0, #8
 8001704:	f003 f8f8 	bl	80048f8 <getNextSub>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001710:	70da      	strb	r2, [r3, #3]
 8001712:	e233      	b.n	8001b7c <configStateMachine+0xd60>
                }
                else if(key == CONFIRMAR)
 8001714:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001718:	2b43      	cmp	r3, #67	; 0x43
 800171a:	f040 822f 	bne.w	8001b7c <configStateMachine+0xd60>
                {
                	resetKeyPressed();
 800171e:	f003 fea3 	bl	8005468 <resetKeyPressed>
                    index = 2;
 8001722:	2302      	movs	r3, #2
 8001724:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001726:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800172a:	f107 030f 	add.w	r3, r7, #15
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f001 fb77 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8001736:	2009      	movs	r0, #9
 8001738:	f003 f8de 	bl	80048f8 <getNextSub>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001744:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001746:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800174a:	3303      	adds	r3, #3
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f8e5 	bl	800491c <setSelectSub>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800175a:	705a      	strb	r2, [r3, #1]
                }

                break;
 800175c:	e20e      	b.n	8001b7c <configStateMachine+0xd60>

            case SENSOR_SERIES:
                updateUserMsg(0,USERMSG1,numserieUserMsg,&displayUpdateStatus);
 800175e:	4b49      	ldr	r3, [pc, #292]	; (8001884 <configStateMachine+0xa68>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	f107 030f 	add.w	r3, r7, #15
 8001766:	2100      	movs	r1, #0
 8001768:	2000      	movs	r0, #0
 800176a:	f001 fb40 	bl	8002dee <updateUserMsg>
                ptr_numSeriesString = getNumSeriesString();
 800176e:	f000 ffd7 	bl	8002720 <getNumSeriesString>
 8001772:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                printDataDisplay(0,USERMSG2,ptr_numSeriesString);
 8001776:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800177a:	2101      	movs	r1, #1
 800177c:	2000      	movs	r0, #0
 800177e:	f002 fb2d 	bl	8003ddc <printDataDisplay>
                updateDataDisplay(index,USERMSG2);
 8001782:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001786:	2101      	movs	r1, #1
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fb41 	bl	8003e10 <updateDataDisplay>

                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <configStateMachine+0xa60>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	2102      	movs	r1, #2
 8001796:	2000      	movs	r0, #0
 8001798:	f002 fb20 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 800179c:	4b37      	ldr	r3, [pc, #220]	; (800187c <configStateMachine+0xa60>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fcd3 	bl	800014c <strlen>
 80017a6:	4b36      	ldr	r3, [pc, #216]	; (8001880 <configStateMachine+0xa64>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	2102      	movs	r1, #2
 80017ae:	f002 fb15 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 80017b2:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <configStateMachine+0xa54>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	2103      	movs	r1, #3
 80017ba:	2000      	movs	r0, #0
 80017bc:	f002 fb0e 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 80017c0:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <configStateMachine+0xa54>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fcc1 	bl	800014c <strlen>
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <configStateMachine+0xa58>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	2103      	movs	r1, #3
 80017d2:	f002 fb03 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 80017d6:	f003 fe3b 	bl	8005450 <getKeyPressed>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

                if(key == INSERIR)
 80017e0:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80017e4:	2b49      	cmp	r3, #73	; 0x49
 80017e6:	d10f      	bne.n	8001808 <configStateMachine+0x9ec>
                {
                	resetKeyPressed();
 80017e8:	f003 fe3e 	bl	8005468 <resetKeyPressed>
                    setUserNumSeries(&index);
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	4618      	mov	r0, r3
 80017f2:	f001 f93a 	bl	8002a6a <setUserNumSeries>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 80017f6:	2009      	movs	r0, #9
 80017f8:	f003 f87e 	bl	80048f8 <getNextSub>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001804:	70da      	strb	r2, [r3, #3]
 8001806:	e1b9      	b.n	8001b7c <configStateMachine+0xd60>
                }
                else if(key == AVANCAR)
 8001808:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800180c:	2b41      	cmp	r3, #65	; 0x41
 800180e:	d108      	bne.n	8001822 <configStateMachine+0xa06>
				{
					resetKeyPressed();
 8001810:	f003 fe2a 	bl	8005468 <resetKeyPressed>
					indexColumn(&index,2);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2102      	movs	r1, #2
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fe30 	bl	8002480 <indexColumn>
 8001820:	e1ac      	b.n	8001b7c <configStateMachine+0xd60>
				}
                else if(key == CONFIRMAR)
 8001822:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001826:	2b43      	cmp	r3, #67	; 0x43
 8001828:	f040 81a8 	bne.w	8001b7c <configStateMachine+0xd60>
                {
                	resetKeyPressed();
 800182c:	f003 fe1c 	bl	8005468 <resetKeyPressed>
                    index = 2;
 8001830:	2302      	movs	r3, #2
 8001832:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001834:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001838:	f107 030f 	add.w	r3, r7, #15
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f001 faf0 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 8001844:	200a      	movs	r0, #10
 8001846:	f003 f857 	bl	80048f8 <getNextSub>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001852:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001858:	3303      	adds	r3, #3
 800185a:	4618      	mov	r0, r3
 800185c:	f003 f85e 	bl	800491c <setSelectSub>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001868:	705a      	strb	r2, [r3, #1]
                }

                break;
 800186a:	e187      	b.n	8001b7c <configStateMachine+0xd60>
 800186c:	20000094 	.word	0x20000094
 8001870:	200000d4 	.word	0x200000d4
 8001874:	200000cc 	.word	0x200000cc
 8001878:	20000098 	.word	0x20000098
 800187c:	200000c8 	.word	0x200000c8
 8001880:	200000d0 	.word	0x200000d0
 8001884:	2000009c 	.word	0x2000009c

            case SENSOR_INT_SERIES:
                updateUserMsg(0,USERMSG1,interseriesUserMsg,&displayUpdateStatus);
 8001888:	4bc1      	ldr	r3, [pc, #772]	; (8001b90 <configStateMachine+0xd74>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	f107 030f 	add.w	r3, r7, #15
 8001890:	2100      	movs	r1, #0
 8001892:	2000      	movs	r0, #0
 8001894:	f001 faab 	bl	8002dee <updateUserMsg>
                configIntervalSeriesTimeStruct = getintervalSeriesTimeStruct();
 8001898:	f000 fbcc 	bl	8002034 <getintervalSeriesTimeStruct>
 800189c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				strftime(userIntervalTimeString, sizeof(userIntervalTimeString), "%M:%S", configIntervalSeriesTimeStruct);
 80018a0:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80018a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018a8:	4aba      	ldr	r2, [pc, #744]	; (8001b94 <configStateMachine+0xd78>)
 80018aa:	2109      	movs	r1, #9
 80018ac:	f008 fe60 	bl	800a570 <strftime>
//                ptr_intervalSeriesString = getIntervalSeriesString();
//                printDataDisplay(0,USERMSG2,ptr_intervalSeriesString);
				printDataDisplay(0,USERMSG2,userIntervalTimeString);
 80018b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80018b4:	461a      	mov	r2, r3
 80018b6:	2101      	movs	r1, #1
 80018b8:	2000      	movs	r0, #0
 80018ba:	f002 fa8f 	bl	8003ddc <printDataDisplay>
                updateDataDisplay(index,USERMSG2);
 80018be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018c2:	2101      	movs	r1, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 faa3 	bl	8003e10 <updateDataDisplay>

                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 80018ca:	4bb3      	ldr	r3, [pc, #716]	; (8001b98 <configStateMachine+0xd7c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	2102      	movs	r1, #2
 80018d2:	2000      	movs	r0, #0
 80018d4:	f002 fa82 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 80018d8:	4baf      	ldr	r3, [pc, #700]	; (8001b98 <configStateMachine+0xd7c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fc35 	bl	800014c <strlen>
 80018e2:	4bae      	ldr	r3, [pc, #696]	; (8001b9c <configStateMachine+0xd80>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	2102      	movs	r1, #2
 80018ea:	f002 fa77 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 80018ee:	4bac      	ldr	r3, [pc, #688]	; (8001ba0 <configStateMachine+0xd84>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	2103      	movs	r1, #3
 80018f6:	2000      	movs	r0, #0
 80018f8:	f002 fa70 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 80018fc:	4ba8      	ldr	r3, [pc, #672]	; (8001ba0 <configStateMachine+0xd84>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fc23 	bl	800014c <strlen>
 8001906:	4ba7      	ldr	r3, [pc, #668]	; (8001ba4 <configStateMachine+0xd88>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	2103      	movs	r1, #3
 800190e:	f002 fa65 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 8001912:	f003 fd9d 	bl	8005450 <getKeyPressed>
 8001916:	4603      	mov	r3, r0
 8001918:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

                if(key == INSERIR)
 800191c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001920:	2b49      	cmp	r3, #73	; 0x49
 8001922:	d10f      	bne.n	8001944 <configStateMachine+0xb28>
                {
                	resetKeyPressed();
 8001924:	f003 fda0 	bl	8005468 <resetKeyPressed>
                	setIntervalSaltosTime(&index);
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	4618      	mov	r0, r3
 800192e:	f001 f92d 	bl	8002b8c <setIntervalSaltosTime>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 8001932:	200a      	movs	r0, #10
 8001934:	f002 ffe0 	bl	80048f8 <getNextSub>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001940:	70da      	strb	r2, [r3, #3]
 8001942:	e11b      	b.n	8001b7c <configStateMachine+0xd60>
                }
                else if(key == AVANCAR)
 8001944:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001948:	2b41      	cmp	r3, #65	; 0x41
 800194a:	d108      	bne.n	800195e <configStateMachine+0xb42>
				{
					resetKeyPressed();
 800194c:	f003 fd8c 	bl	8005468 <resetKeyPressed>
					indexColumn(&index,4);
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2104      	movs	r1, #4
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fd92 	bl	8002480 <indexColumn>
 800195c:	e10e      	b.n	8001b7c <configStateMachine+0xd60>
				}
                else if(key == CONFIRMAR)
 800195e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001962:	2b43      	cmp	r3, #67	; 0x43
 8001964:	f040 810a 	bne.w	8001b7c <configStateMachine+0xd60>
                {
                	resetKeyPressed();
 8001968:	f003 fd7e 	bl	8005468 <resetKeyPressed>
                    index = 2;
 800196c:	2302      	movs	r3, #2
 800196e:	81bb      	strh	r3, [r7, #12]
                    ptr_userConfiguration->userIntervalSeries = milisecondsTime(configIntervalSeriesTimeStruct);
 8001970:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001974:	f000 fdbf 	bl	80024f6 <milisecondsTime>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001980:	621a      	str	r2, [r3, #32]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001982:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001986:	f107 030f 	add.w	r3, r7, #15
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f001 fa49 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8001992:	200b      	movs	r0, #11
 8001994:	f002 ffb0 	bl	80048f8 <getNextSub>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019a0:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80019a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019a6:	3303      	adds	r3, #3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 ffb7 	bl	800491c <setSelectSub>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019b6:	705a      	strb	r2, [r3, #1]
                }

            break;
 80019b8:	e0e0      	b.n	8001b7c <configStateMachine+0xd60>

            case TAPETE_ON:
                updateUserMsg(0,USERMSG1,intapeteUserMsg,&displayUpdateStatus);
 80019ba:	4b7b      	ldr	r3, [pc, #492]	; (8001ba8 <configStateMachine+0xd8c>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	f107 030f 	add.w	r3, r7, #15
 80019c2:	2100      	movs	r1, #0
 80019c4:	2000      	movs	r0, #0
 80019c6:	f001 fa12 	bl	8002dee <updateUserMsg>
                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 80019ca:	4b73      	ldr	r3, [pc, #460]	; (8001b98 <configStateMachine+0xd7c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	2102      	movs	r1, #2
 80019d2:	2000      	movs	r0, #0
 80019d4:	f002 fa02 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 80019d8:	4b6f      	ldr	r3, [pc, #444]	; (8001b98 <configStateMachine+0xd7c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fbb5 	bl	800014c <strlen>
 80019e2:	4b6e      	ldr	r3, [pc, #440]	; (8001b9c <configStateMachine+0xd80>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	2102      	movs	r1, #2
 80019ea:	f002 f9f7 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 80019ee:	4b6c      	ldr	r3, [pc, #432]	; (8001ba0 <configStateMachine+0xd84>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	2103      	movs	r1, #3
 80019f6:	2000      	movs	r0, #0
 80019f8:	f002 f9f0 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 80019fc:	f003 fd28 	bl	8005450 <getKeyPressed>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

                if(key == AVANCAR)
 8001a06:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001a0a:	2b41      	cmp	r3, #65	; 0x41
 8001a0c:	d112      	bne.n	8001a34 <configStateMachine+0xc18>
                {
                	resetKeyPressed();
 8001a0e:	f003 fd2b 	bl	8005468 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001a12:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a16:	f107 030f 	add.w	r3, r7, #15
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 fa01 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_OFF);
 8001a22:	200c      	movs	r0, #12
 8001a24:	f002 ff68 	bl	80048f8 <getNextSub>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a30:	70da      	strb	r2, [r3, #3]
 8001a32:	e0a3      	b.n	8001b7c <configStateMachine+0xd60>
                }
                else if(key == CONFIRMAR)
 8001a34:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001a38:	2b43      	cmp	r3, #67	; 0x43
 8001a3a:	f040 809f 	bne.w	8001b7c <configStateMachine+0xd60>
                {
                	resetKeyPressed();
 8001a3e:	f003 fd13 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001a42:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a46:	f107 030f 	add.w	r3, r7, #15
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 f9e9 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001a52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a56:	3303      	adds	r3, #3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 ff5f 	bl	800491c <setSelectSub>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a66:	705a      	strb	r2, [r3, #1]
                    ptr_userConfiguration->userSelectTapete = TRUE;
 8001a68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 8001a72:	200d      	movs	r0, #13
 8001a74:	f002 ff40 	bl	80048f8 <getNextSub>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a80:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001a82:	e07b      	b.n	8001b7c <configStateMachine+0xd60>

            case TAPETE_OFF:
                updateUserMsg(0,USERMSG1,outtapeteUserMsg,&displayUpdateStatus);
 8001a84:	4b49      	ldr	r3, [pc, #292]	; (8001bac <configStateMachine+0xd90>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	f107 030f 	add.w	r3, r7, #15
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f001 f9ad 	bl	8002dee <updateUserMsg>
                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8001a94:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <configStateMachine+0xd7c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f002 f99d 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <configStateMachine+0xd7c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fb50 	bl	800014c <strlen>
 8001aac:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <configStateMachine+0xd80>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	f002 f992 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8001ab8:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <configStateMachine+0xd84>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	2103      	movs	r1, #3
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f002 f98b 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 8001ac6:	f003 fcc3 	bl	8005450 <getKeyPressed>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

                if(key == AVANCAR)
 8001ad0:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001ad4:	2b41      	cmp	r3, #65	; 0x41
 8001ad6:	d112      	bne.n	8001afe <configStateMachine+0xce2>
                {
                	resetKeyPressed();
 8001ad8:	f003 fcc6 	bl	8005468 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001adc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ae0:	f107 030f 	add.w	r3, r7, #15
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 f99c 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8001aec:	200b      	movs	r0, #11
 8001aee:	f002 ff03 	bl	80048f8 <getNextSub>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001afa:	70da      	strb	r2, [r3, #3]
 8001afc:	e03e      	b.n	8001b7c <configStateMachine+0xd60>
                }
                else if(key == CONFIRMAR)
 8001afe:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001b02:	2b43      	cmp	r3, #67	; 0x43
 8001b04:	d13a      	bne.n	8001b7c <configStateMachine+0xd60>
                {
                	resetKeyPressed();
 8001b06:	f003 fcaf 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001b0a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b0e:	f107 030f 	add.w	r3, r7, #15
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f001 f985 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001b1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b1e:	3303      	adds	r3, #3
 8001b20:	4618      	mov	r0, r3
 8001b22:	f002 fefb 	bl	800491c <setSelectSub>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b2e:	705a      	strb	r2, [r3, #1]
                    ptr_userConfiguration->userSelectTapete = FALSE;
 8001b30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 8001b3a:	200d      	movs	r0, #13
 8001b3c:	f002 fedc 	bl	80048f8 <getNextSub>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b48:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001b4a:	e017      	b.n	8001b7c <configStateMachine+0xd60>

            case SAVE_CONFIGS:
                subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f002 fed3 	bl	80048f8 <getNextSub>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b5a:	70da      	strb	r2, [r3, #3]
                setInsertData(ptr_userConfiguration);
 8001b5c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001b60:	f002 fef0 	bl	8004944 <setInsertData>
                readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001b64:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b68:	f107 030f 	add.w	r3, r7, #15
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f001 f958 	bl	8002e24 <readyUserInterface>
                key = MENU;
 8001b74:	234d      	movs	r3, #77	; 0x4d
 8001b76:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
                break;
 8001b7a:	bf00      	nop
    while(key != MENU)
 8001b7c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001b80:	2b4d      	cmp	r3, #77	; 0x4d
 8001b82:	f47f a976 	bne.w	8000e72 <configStateMachine+0x56>
        }
    }
}
 8001b86:	bf00      	nop
 8001b88:	4618      	mov	r0, r3
 8001b8a:	37d0      	adds	r7, #208	; 0xd0
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200000a0 	.word	0x200000a0
 8001b94:	0800bd7c 	.word	0x0800bd7c
 8001b98:	200000c8 	.word	0x200000c8
 8001b9c:	200000d0 	.word	0x200000d0
 8001ba0:	200000d4 	.word	0x200000d4
 8001ba4:	200000cc 	.word	0x200000cc
 8001ba8:	200000a4 	.word	0x200000a4
 8001bac:	200000a8 	.word	0x200000a8

08001bb0 <consultStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char consultStateMachine(struct Menu* subMenu)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuTesteConsultar = subMenu;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    unsigned char* ptr_potString;
    struct results* ptr_structConsultResult;
    unsigned char selectedUserTest = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char testSamples=0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    unsigned char cursorPosition[2] = {0,0};
 8001bc8:	2300      	movs	r3, #0
 8001bca:	81bb      	strh	r3, [r7, #12]
    short index = 2; //(000 MENU)
 8001bcc:	2302      	movs	r3, #2
 8001bce:	817b      	strh	r3, [r7, #10]
    unsigned char key = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    static unsigned char results = 0;
    unsigned char displayUpdateStatus = IDDLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	727b      	strb	r3, [r7, #9]

    while(key != MENU)
 8001bda:	e1c9      	b.n	8001f70 <consultStateMachine+0x3c0>
    {
        switch(subMenuTesteConsultar->menuState)
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	78db      	ldrb	r3, [r3, #3]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	f200 81c5 	bhi.w	8001f70 <consultStateMachine+0x3c0>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <consultStateMachine+0x3c>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001bfd 	.word	0x08001bfd
 8001bf0:	08001c0d 	.word	0x08001c0d
 8001bf4:	08001d0b 	.word	0x08001d0b
 8001bf8:	08001e99 	.word	0x08001e99
        {
            case IDDLE:
                subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f002 fe7b 	bl	80048f8 <getNextSub>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	70da      	strb	r2, [r3, #3]
            break;
 8001c0a:	e1b1      	b.n	8001f70 <consultStateMachine+0x3c0>

            case CONSULTA_TESTE:
                updateUserMsg(0,USERMSG1,consultTestUserMsg,&displayUpdateStatus);
 8001c0c:	4bbc      	ldr	r3, [pc, #752]	; (8001f00 <consultStateMachine+0x350>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f107 0309 	add.w	r3, r7, #9
 8001c14:	2100      	movs	r1, #0
 8001c16:	2000      	movs	r0, #0
 8001c18:	f001 f8e9 	bl	8002dee <updateUserMsg>
                ptr_consultTestString = getNumTestString();
 8001c1c:	f000 fdec 	bl	80027f8 <getNumTestString>
 8001c20:	62f8      	str	r0, [r7, #44]	; 0x2c
                printDataDisplay(0,USERMSG2,ptr_consultTestString);
 8001c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c24:	2101      	movs	r1, #1
 8001c26:	2000      	movs	r0, #0
 8001c28:	f002 f8d8 	bl	8003ddc <printDataDisplay>
                updateDataDisplay(index,USERMSG2);
 8001c2c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c30:	2101      	movs	r1, #1
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 f8ec 	bl	8003e10 <updateDataDisplay>

                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8001c38:	4bb2      	ldr	r3, [pc, #712]	; (8001f04 <consultStateMachine+0x354>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2102      	movs	r1, #2
 8001c40:	2000      	movs	r0, #0
 8001c42:	f002 f8cb 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001c46:	4baf      	ldr	r3, [pc, #700]	; (8001f04 <consultStateMachine+0x354>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fa7e 	bl	800014c <strlen>
 8001c50:	4bad      	ldr	r3, [pc, #692]	; (8001f08 <consultStateMachine+0x358>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	2102      	movs	r1, #2
 8001c58:	f002 f8c0 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8001c5c:	4bab      	ldr	r3, [pc, #684]	; (8001f0c <consultStateMachine+0x35c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	2103      	movs	r1, #3
 8001c64:	2000      	movs	r0, #0
 8001c66:	f002 f8b9 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001c6a:	4ba8      	ldr	r3, [pc, #672]	; (8001f0c <consultStateMachine+0x35c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fa6c 	bl	800014c <strlen>
 8001c74:	4ba6      	ldr	r3, [pc, #664]	; (8001f10 <consultStateMachine+0x360>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	f002 f8ae 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 8001c80:	f003 fbe6 	bl	8005450 <getKeyPressed>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if(key == INSERIR)
 8001c8a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001c8e:	2b49      	cmp	r3, #73	; 0x49
 8001c90:	d10e      	bne.n	8001cb0 <consultStateMachine+0x100>
                {
                	resetKeyPressed();
 8001c92:	f003 fbe9 	bl	8005468 <resetKeyPressed>
                    setUserNumTest(&index);
 8001c96:	f107 030a 	add.w	r3, r7, #10
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 ff51 	bl	8002b42 <setUserNumTest>
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f002 fe29 	bl	80048f8 <getNextSub>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	70da      	strb	r2, [r3, #3]
 8001cae:	e15f      	b.n	8001f70 <consultStateMachine+0x3c0>
                }
                else if(key == AVANCAR)
 8001cb0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001cb4:	2b41      	cmp	r3, #65	; 0x41
 8001cb6:	d108      	bne.n	8001cca <consultStateMachine+0x11a>
                {
                	resetKeyPressed();
 8001cb8:	f003 fbd6 	bl	8005468 <resetKeyPressed>
                    indexChange(&index,2);
 8001cbc:	f107 030a 	add.w	r3, r7, #10
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fc7d 	bl	80025c2 <indexChange>
 8001cc8:	e152      	b.n	8001f70 <consultStateMachine+0x3c0>
                }
                else if(key == CONFIRMAR)
 8001cca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001cce:	2b43      	cmp	r3, #67	; 0x43
 8001cd0:	f040 814e 	bne.w	8001f70 <consultStateMachine+0x3c0>
                {
                	resetKeyPressed();
 8001cd4:	f003 fbc8 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001cd8:	f107 020c 	add.w	r2, r7, #12
 8001cdc:	f107 0309 	add.w	r3, r7, #9
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 f89e 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f002 fe05 	bl	80048f8 <getNextSub>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	3303      	adds	r3, #3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 fe0e 	bl	800491c <setSelectSub>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	705a      	strb	r2, [r3, #1]
                }
            break;
 8001d08:	e132      	b.n	8001f70 <consultStateMachine+0x3c0>

            case RESULT_TESTE:
                selectedUserTest = stringToInt(ptr_consultTestString);
 8001d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d0c:	f000 fc1e 	bl	800254c <stringToInt>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                printDataDisplay(0,OPTIONMSG,avancarUserMsg);
 8001d16:	4b7b      	ldr	r3, [pc, #492]	; (8001f04 <consultStateMachine+0x354>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2103      	movs	r1, #3
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f002 f85c 	bl	8003ddc <printDataDisplay>
                printDataDisplay(strlen(avancarUserMsg),OPTIONMSG,pararUserMsg);
 8001d24:	4b77      	ldr	r3, [pc, #476]	; (8001f04 <consultStateMachine+0x354>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fa0f 	bl	800014c <strlen>
 8001d2e:	4b79      	ldr	r3, [pc, #484]	; (8001f14 <consultStateMachine+0x364>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	2103      	movs	r1, #3
 8001d36:	f002 f851 	bl	8003ddc <printDataDisplay>
//                ptr_structConsultResult = load_data(selectedUserTest); //APENAS PARA APLICAÇÃO COM SD
                ptr_structConsultResult = getUserResultData(selectedUserTest);
 8001d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fa64 	bl	800220c <getUserResultData>
 8001d44:	61f8      	str	r0, [r7, #28]
                if(testSamples<(ptr_structConsultResult->resultTestAcquiredSamples))
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	785b      	ldrb	r3, [r3, #1]
 8001d4a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d25e      	bcs.n	8001e10 <consultStateMachine+0x260>
                {
                	printDataDisplay(0,USERMSG1,amostraUserMsg);
 8001d52:	4b71      	ldr	r3, [pc, #452]	; (8001f18 <consultStateMachine+0x368>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f002 f83e 	bl	8003ddc <printDataDisplay>
					ptr_sampleString = param_1_toString(&ptr_structConsultResult->Measurement[testSamples].sampleNum);
 8001d60:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fd78 	bl	8002868 <param_1_toString>
 8001d78:	61b8      	str	r0, [r7, #24]
					printDataDisplay(strlen(amostraUserMsg),USERMSG1 , ptr_sampleString);
 8001d7a:	4b67      	ldr	r3, [pc, #412]	; (8001f18 <consultStateMachine+0x368>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe f9e4 	bl	800014c <strlen>
 8001d84:	4603      	mov	r3, r0
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f002 f826 	bl	8003ddc <printDataDisplay>

					printDataDisplay(0,USERMSG2,tempoVooUserMsg);
 8001d90:	4b62      	ldr	r3, [pc, #392]	; (8001f1c <consultStateMachine+0x36c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	2101      	movs	r1, #1
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f002 f81f 	bl	8003ddc <printDataDisplay>
					ptr_vooTimeString = param_2_toString(&ptr_structConsultResult->Measurement[testSamples].uiVooTime);
 8001d9e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	4413      	add	r3, r2
 8001dae:	3308      	adds	r3, #8
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fd6d 	bl	8002890 <param_2_toString>
 8001db6:	6178      	str	r0, [r7, #20]
					printDataDisplay(strlen(tempoVooUserMsg),USERMSG2 ,ptr_vooTimeString);
 8001db8:	4b58      	ldr	r3, [pc, #352]	; (8001f1c <consultStateMachine+0x36c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe f9c5 	bl	800014c <strlen>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f002 f807 	bl	8003ddc <printDataDisplay>


					printDataDisplay(0,INSERTMSG,tempoSoloUserMsg);
 8001dce:	4b54      	ldr	r3, [pc, #336]	; (8001f20 <consultStateMachine+0x370>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f002 f800 	bl	8003ddc <printDataDisplay>
					ptr_alturaString = param_2_toString(&ptr_structConsultResult->Measurement[testSamples].uiSoloTime);
 8001ddc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	3308      	adds	r3, #8
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	4413      	add	r3, r2
 8001dee:	3304      	adds	r3, #4
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fd4d 	bl	8002890 <param_2_toString>
 8001df6:	6138      	str	r0, [r7, #16]
					printDataDisplay(strlen(tempoSoloUserMsg),INSERTMSG , ptr_alturaString);
 8001df8:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <consultStateMachine+0x370>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe f9a5 	bl	800014c <strlen>
 8001e02:	4603      	mov	r3, r0
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	2102      	movs	r1, #2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f001 ffe7 	bl	8003ddc <printDataDisplay>
 8001e0e:	e004      	b.n	8001e1a <consultStateMachine+0x26a>

//                  ptr_potString; = param_3_toString(&ptr_structExportResult->Measurement[testSamples].uiSoloTime);
//					printDataDisplay(0, INSERTMSG, ptr_potString);

                }
                else  printDataDisplay(0,0,"VAZIO");
 8001e10:	4a44      	ldr	r2, [pc, #272]	; (8001f24 <consultStateMachine+0x374>)
 8001e12:	2100      	movs	r1, #0
 8001e14:	2000      	movs	r0, #0
 8001e16:	f001 ffe1 	bl	8003ddc <printDataDisplay>

                key = getKeyPressed();
 8001e1a:	f003 fb19 	bl	8005450 <getKeyPressed>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == AVANCAR)
 8001e24:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e28:	2b41      	cmp	r3, #65	; 0x41
 8001e2a:	d11f      	bne.n	8001e6c <consultStateMachine+0x2bc>
                {
                	resetKeyPressed();
 8001e2c:	f003 fb1c 	bl	8005468 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001e30:	f107 020c 	add.w	r2, r7, #12
 8001e34:	f107 0309 	add.w	r3, r7, #9
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fff2 	bl	8002e24 <readyUserInterface>
                    testSamples++;
 8001e40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e44:	3301      	adds	r3, #1
 8001e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if(testSamples == ptr_structConsultResult->resultTestAcquiredSamples) testSamples = 0;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	785b      	ldrb	r3, [r3, #1]
 8001e4e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d102      	bne.n	8001e5c <consultStateMachine+0x2ac>
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8001e5c:	2002      	movs	r0, #2
 8001e5e:	f002 fd4b 	bl	80048f8 <getNextSub>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	70da      	strb	r2, [r3, #3]
 8001e6a:	e081      	b.n	8001f70 <consultStateMachine+0x3c0>
                }
                else if(key == PARAR)
 8001e6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e70:	2b50      	cmp	r3, #80	; 0x50
 8001e72:	d17d      	bne.n	8001f70 <consultStateMachine+0x3c0>
                {
                	resetKeyPressed();
 8001e74:	f003 faf8 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001e78:	f107 020c 	add.w	r2, r7, #12
 8001e7c:	f107 0309 	add.w	r3, r7, #9
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 ffce 	bl	8002e24 <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(EXPORTAR);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f002 fd35 	bl	80048f8 <getNextSub>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001e96:	e06b      	b.n	8001f70 <consultStateMachine+0x3c0>

            case EXPORTAR:
                updateUserMsg(0,USERMSG1,consultExportUserMsg,&displayUpdateStatus);
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <consultStateMachine+0x378>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	f107 0309 	add.w	r3, r7, #9
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f000 ffa3 	bl	8002dee <updateUserMsg>
                printDataDisplay(0,INSERTMSG,selecionarUserMsg);
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <consultStateMachine+0x35c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	2102      	movs	r1, #2
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f001 ff93 	bl	8003ddc <printDataDisplay>
                printDataDisplay(0,OPTIONMSG,pararUserMsg);
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <consultStateMachine+0x364>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2103      	movs	r1, #3
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f001 ff8c 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 8001ec4:	f003 fac4 	bl	8005450 <getKeyPressed>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == PARAR)
 8001ece:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001ed2:	2b50      	cmp	r3, #80	; 0x50
 8001ed4:	d12a      	bne.n	8001f2c <consultStateMachine+0x37c>
                {
                	resetKeyPressed();
 8001ed6:	f003 fac7 	bl	8005468 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001eda:	f107 020c 	add.w	r2, r7, #12
 8001ede:	f107 0309 	add.w	r3, r7, #9
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 ff9d 	bl	8002e24 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8001eea:	234d      	movs	r3, #77	; 0x4d
 8001eec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f002 fd01 	bl	80048f8 <getNextSub>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	70da      	strb	r2, [r3, #3]
 8001efe:	e036      	b.n	8001f6e <consultStateMachine+0x3be>
 8001f00:	2000006c 	.word	0x2000006c
 8001f04:	200000c8 	.word	0x200000c8
 8001f08:	200000d0 	.word	0x200000d0
 8001f0c:	200000d4 	.word	0x200000d4
 8001f10:	200000cc 	.word	0x200000cc
 8001f14:	200000d8 	.word	0x200000d8
 8001f18:	2000004c 	.word	0x2000004c
 8001f1c:	20000050 	.word	0x20000050
 8001f20:	20000054 	.word	0x20000054
 8001f24:	0800bd84 	.word	0x0800bd84
 8001f28:	20000070 	.word	0x20000070
                }
                else if(key == CONFIRMAR)
 8001f2c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f30:	2b43      	cmp	r3, #67	; 0x43
 8001f32:	d11c      	bne.n	8001f6e <consultStateMachine+0x3be>
                {
                    //display
                	resetKeyPressed();
 8001f34:	f003 fa98 	bl	8005468 <resetKeyPressed>
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <consultStateMachine+0x3d4>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	f107 0309 	add.w	r3, r7, #9
 8001f40:	2100      	movs	r1, #0
 8001f42:	2000      	movs	r0, #0
 8001f44:	f000 ff53 	bl	8002dee <updateUserMsg>
                    subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	3303      	adds	r3, #3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fce5 	bl	800491c <setSelectSub>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461a      	mov	r2, r3
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f002 fccc 	bl	80048f8 <getNextSub>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	70da      	strb	r2, [r3, #3]
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8001f68:	234d      	movs	r3, #77	; 0x4d
 8001f6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                }
                break;
 8001f6e:	bf00      	nop
    while(key != MENU)
 8001f70:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f74:	2b4d      	cmp	r3, #77	; 0x4d
 8001f76:	f47f ae31 	bne.w	8001bdc <consultStateMachine+0x2c>
        }
    }
}
 8001f7a:	bf00      	nop
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3730      	adds	r7, #48	; 0x30
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000074 	.word	0x20000074

08001f88 <getUserTime>:
unsigned long int getUserTest() //apagar
{
   return myData.userTest;
}
unsigned long int getUserTime()
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
    return myData.userTime;
 8001f8c:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <getUserTime+0x10>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	200001ec 	.word	0x200001ec

08001f9c <getUserNumSaltos>:
{
    return myData.userAlturaMax;
}

unsigned char getUserNumSaltos()
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
    return myData.userNumSaltos;
 8001fa0:	4b02      	ldr	r3, [pc, #8]	; (8001fac <getUserNumSaltos+0x10>)
 8001fa2:	7d1b      	ldrb	r3, [r3, #20]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	200001ec 	.word	0x200001ec

08001fb0 <getUserIntervalSaltos>:

unsigned char getUserIntervalSaltos()
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
    return myData.userIntervalSaltos;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <getUserIntervalSaltos+0x14>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	b2db      	uxtb	r3, r3
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	200001ec 	.word	0x200001ec

08001fc8 <getUserNumSeries>:
{
    return myData.userAlturaDJ;
}

unsigned char getUserNumSeries()
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
    return myData.userNumSeries;
 8001fcc:	4b02      	ldr	r3, [pc, #8]	; (8001fd8 <getUserNumSeries+0x10>)
 8001fce:	7f9b      	ldrb	r3, [r3, #30]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	200001ec 	.word	0x200001ec

08001fdc <getUserIntervalSeries>:

unsigned char getUserIntervalSeries()
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
    return myData.userIntervalSeries;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <getUserIntervalSeries+0x14>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	b2db      	uxtb	r3, r3
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	200001ec 	.word	0x200001ec

08001ff4 <getUserSelectTapete>:
{
    return myData.userSelectSensorChannel;
}

unsigned char getUserSelectTapete()
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
    return myData.userSelectTapete;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <getUserSelectTapete+0x14>)
 8001ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	200001ec 	.word	0x200001ec

0800200c <getTimeStruct>:

unsigned char* getTimeStruct()
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
    return insertTime;
 8002010:	4b02      	ldr	r3, [pc, #8]	; (800201c <getTimeStruct+0x10>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	20000000 	.word	0x20000000

08002020 <getIntervalTimeStruct>:

unsigned char* getIntervalTimeStruct()
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
    return intervalTime;
 8002024:	4b02      	ldr	r3, [pc, #8]	; (8002030 <getIntervalTimeStruct+0x10>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20000004 	.word	0x20000004

08002034 <getintervalSeriesTimeStruct>:

unsigned char* getintervalSeriesTimeStruct()
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
    return intervalSeries;
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <getintervalSeriesTimeStruct+0x10>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	20000008 	.word	0x20000008

08002048 <getMassArray>:

unsigned char* getMassArray()
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
    return massArray;
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <getMassArray+0x10>)
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	200003c0 	.word	0x200003c0

0800205c <getOverMassArray>:

unsigned char* getOverMassArray()
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
    return overMassArray;
 8002060:	4b02      	ldr	r3, [pc, #8]	; (800206c <getOverMassArray+0x10>)
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	200003c8 	.word	0x200003c8

08002070 <getAltMinArray>:

unsigned char* getAltMinArray()
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
    return altMinArray;
 8002074:	4b02      	ldr	r3, [pc, #8]	; (8002080 <getAltMinArray+0x10>)
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	2000000c 	.word	0x2000000c

08002084 <getAltMaxArray>:

unsigned char* getAltMaxArray()
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
    return altMaxArray;
 8002088:	4b02      	ldr	r3, [pc, #8]	; (8002094 <getAltMaxArray+0x10>)
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000010 	.word	0x20000010

08002098 <getNumSaltosArray>:

unsigned char* getNumSaltosArray()
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
    return numSaltosArray;
 800209c:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <getNumSaltosArray+0x10>)
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	200003d0 	.word	0x200003d0

080020ac <getTypeJumpArray>:
//{
//    return intervalSaltosArray;
//}

unsigned char* getTypeJumpArray()
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
    return JumpTypeArray;
 80020b0:	4b02      	ldr	r3, [pc, #8]	; (80020bc <getTypeJumpArray+0x10>)
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	200003d8 	.word	0x200003d8

080020c0 <getAltDJArray>:

unsigned char* getAltDJArray()
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
    return altDJArray;
 80020c4:	4b02      	ldr	r3, [pc, #8]	; (80020d0 <getAltDJArray+0x10>)
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	200003d4 	.word	0x200003d4

080020d4 <getNumSeriesArray>:

unsigned char* getNumSeriesArray()
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
    return numSeriesArray;
 80020d8:	4b02      	ldr	r3, [pc, #8]	; (80020e4 <getNumSeriesArray+0x10>)
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	200003dc 	.word	0x200003dc

080020e8 <getNumTestArray>:
//{
//    return intervalSeriesArray;
//}

unsigned char* getNumTestArray()
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
    return numTestArray;
 80020ec:	4b02      	ldr	r3, [pc, #8]	; (80020f8 <getNumTestArray+0x10>)
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000014 	.word	0x20000014

080020fc <getEraseTestArray>:

unsigned char* getEraseTestArray()
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
    return selectEraseArray;
 8002100:	4b02      	ldr	r3, [pc, #8]	; (800210c <getEraseTestArray+0x10>)
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	200003e0 	.word	0x200003e0

08002110 <getUserConfigStruct>:

unsigned char* getUserConfigStruct() //VERIFICAR SE VOU USAR
{
 8002110:	b4b0      	push	{r4, r5, r7}
 8002112:	af00      	add	r7, sp, #0
    static struct dataInsert configStruct;
    configStruct = myData;
 8002114:	4a08      	ldr	r2, [pc, #32]	; (8002138 <getUserConfigStruct+0x28>)
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <getUserConfigStruct+0x2c>)
 8002118:	4614      	mov	r4, r2
 800211a:	461d      	mov	r5, r3
 800211c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800211e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002124:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002128:	e884 0003 	stmia.w	r4, {r0, r1}
    return &configStruct;
 800212c:	4b02      	ldr	r3, [pc, #8]	; (8002138 <getUserConfigStruct+0x28>)
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	bcb0      	pop	{r4, r5, r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	200003e4 	.word	0x200003e4
 800213c:	200001ec 	.word	0x200001ec

08002140 <getTimeAltMin>:

unsigned int getTimeAltMin()
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
	return myData.userAlturaMin;
 8002144:	4b02      	ldr	r3, [pc, #8]	; (8002150 <getTimeAltMin+0x10>)
 8002146:	68db      	ldr	r3, [r3, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	200001ec 	.word	0x200001ec

08002154 <getTimeAltMax>:

unsigned int getTimeAltMax()
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
	return myData.userAlturaMax;
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <getTimeAltMax+0x10>)
 800215a:	691b      	ldr	r3, [r3, #16]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	200001ec 	.word	0x200001ec

08002168 <setUserInputConfigData>:


unsigned char setUserInputConfigData(struct dataInsert* dataToInsert)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
    myData.userTest = dataToInsert->userTest;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	781a      	ldrb	r2, [r3, #0]
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <setUserInputConfigData+0xa0>)
 8002176:	701a      	strb	r2, [r3, #0]
    myData.userTime = dataToInsert->userTime;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a22      	ldr	r2, [pc, #136]	; (8002208 <setUserInputConfigData+0xa0>)
 800217e:	6053      	str	r3, [r2, #4]
    myData.userMass = dataToInsert->userMass;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7a1a      	ldrb	r2, [r3, #8]
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <setUserInputConfigData+0xa0>)
 8002186:	721a      	strb	r2, [r3, #8]
    myData.userOverMass = dataToInsert->userOverMass;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7a5a      	ldrb	r2, [r3, #9]
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <setUserInputConfigData+0xa0>)
 800218e:	725a      	strb	r2, [r3, #9]
    myData.userConsultTest = dataToInsert->userConsultTest;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7a9a      	ldrb	r2, [r3, #10]
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <setUserInputConfigData+0xa0>)
 8002196:	729a      	strb	r2, [r3, #10]
    myData.userAlturaMin = dataToInsert->userAlturaMin;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <setUserInputConfigData+0xa0>)
 800219e:	60d3      	str	r3, [r2, #12]
    myData.userAlturaMax = dataToInsert->userAlturaMax;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	4a18      	ldr	r2, [pc, #96]	; (8002208 <setUserInputConfigData+0xa0>)
 80021a6:	6113      	str	r3, [r2, #16]
    myData.userNumSaltos = dataToInsert->userNumSaltos;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7d1a      	ldrb	r2, [r3, #20]
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <setUserInputConfigData+0xa0>)
 80021ae:	751a      	strb	r2, [r3, #20]
    myData.userIntervalSaltos = dataToInsert->userIntervalSaltos;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <setUserInputConfigData+0xa0>)
 80021b6:	6193      	str	r3, [r2, #24]
    myData.userCMJ = dataToInsert->userCMJ;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7f1a      	ldrb	r2, [r3, #28]
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <setUserInputConfigData+0xa0>)
 80021be:	771a      	strb	r2, [r3, #28]
    myData.userAlturaDJ = dataToInsert->userAlturaDJ;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7f5a      	ldrb	r2, [r3, #29]
 80021c4:	4b10      	ldr	r3, [pc, #64]	; (8002208 <setUserInputConfigData+0xa0>)
 80021c6:	775a      	strb	r2, [r3, #29]
    myData.userNumSeries = dataToInsert->userNumSeries;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7f9a      	ldrb	r2, [r3, #30]
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <setUserInputConfigData+0xa0>)
 80021ce:	779a      	strb	r2, [r3, #30]
    myData.userIntervalSeries = dataToInsert->userIntervalSeries;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <setUserInputConfigData+0xa0>)
 80021d6:	6213      	str	r3, [r2, #32]
    myData.userCommConfig = dataToInsert->userCommConfig;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <setUserInputConfigData+0xa0>)
 80021e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    myData.userSelectTapete = dataToInsert->userSelectTapete;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80021ea:	4b07      	ldr	r3, [pc, #28]	; (8002208 <setUserInputConfigData+0xa0>)
 80021ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    myData.userSelectSensorChannel = dataToInsert->userSelectSensorChannel;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <setUserInputConfigData+0xa0>)
 80021f8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80021fc:	bf00      	nop
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	200001ec 	.word	0x200001ec

0800220c <getUserResultData>:

unsigned int* getUserResultData(unsigned char numTest)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
    return &myResults[numTest-1];
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	3b01      	subs	r3, #1
 800221a:	019b      	lsls	r3, r3, #6
 800221c:	4a03      	ldr	r2, [pc, #12]	; (800222c <getUserResultData+0x20>)
 800221e:	4413      	add	r3, r2
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000214 	.word	0x20000214

08002230 <getResultTestNumber>:

unsigned char getResultTestNumber()
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
    return numberTest;
 8002234:	4b02      	ldr	r3, [pc, #8]	; (8002240 <getResultTestNumber+0x10>)
 8002236:	781b      	ldrb	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	200003e1 	.word	0x200003e1

08002244 <setResultTestNumber>:
{
     myResults[numTest].thereAreData = TRUE;
}

unsigned char setResultTestNumber()
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
     numberTest++;
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <setResultTestNumber+0x1c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <setResultTestNumber+0x1c>)
 8002252:	701a      	strb	r2, [r3, #0]
}
 8002254:	bf00      	nop
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	200003e1 	.word	0x200003e1

08002264 <setUserResultData>:

unsigned char setUserResultData(struct results* structDataResult, unsigned char numTest)
{
 8002264:	b490      	push	{r4, r7}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
	unsigned char numSample = structDataResult->resultTestAcquiredSamples;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	785b      	ldrb	r3, [r3, #1]
 8002274:	73bb      	strb	r3, [r7, #14]
    myResults[numTest].resultTestNum = numTest+1;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	3201      	adds	r2, #1
 800227c:	b2d1      	uxtb	r1, r2
 800227e:	4a31      	ldr	r2, [pc, #196]	; (8002344 <setUserResultData+0xe0>)
 8002280:	019b      	lsls	r3, r3, #6
 8002282:	4413      	add	r3, r2
 8002284:	460a      	mov	r2, r1
 8002286:	701a      	strb	r2, [r3, #0]
    myResults[numTest].resultTestAcquiredSamples = numSample;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	4a2e      	ldr	r2, [pc, #184]	; (8002344 <setUserResultData+0xe0>)
 800228c:	019b      	lsls	r3, r3, #6
 800228e:	4413      	add	r3, r2
 8002290:	3301      	adds	r3, #1
 8002292:	7bba      	ldrb	r2, [r7, #14]
 8002294:	701a      	strb	r2, [r3, #0]
    myResults[numTest].thereAreData = TRUE;
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <setUserResultData+0xe0>)
 800229a:	019b      	lsls	r3, r3, #6
 800229c:	4413      	add	r3, r2
 800229e:	3302      	adds	r3, #2
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e042      	b.n	8002330 <setUserResultData+0xcc>
    {
        myResults[numTest].Measurement[i].sampleNum = structDataResult->Measurement[i].sampleNum;
 80022aa:	7bf9      	ldrb	r1, [r7, #15]
 80022ac:	78f8      	ldrb	r0, [r7, #3]
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	687c      	ldr	r4, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4423      	add	r3, r4
 80022bc:	3304      	adds	r3, #4
 80022be:	781c      	ldrb	r4, [r3, #0]
 80022c0:	4920      	ldr	r1, [pc, #128]	; (8002344 <setUserResultData+0xe0>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	0182      	lsls	r2, r0, #6
 80022cc:	4413      	add	r3, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	3304      	adds	r3, #4
 80022d2:	4622      	mov	r2, r4
 80022d4:	701a      	strb	r2, [r3, #0]
        myResults[numTest].Measurement[i].uiVooTime = structDataResult->Measurement[i].uiVooTime;
 80022d6:	7bf9      	ldrb	r1, [r7, #15]
 80022d8:	78f8      	ldrb	r0, [r7, #3]
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	687c      	ldr	r4, [r7, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	440b      	add	r3, r1
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4423      	add	r3, r4
 80022e8:	3308      	adds	r3, #8
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	4c15      	ldr	r4, [pc, #84]	; (8002344 <setUserResultData+0xe0>)
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	0182      	lsls	r2, r0, #6
 80022f8:	4413      	add	r3, r2
 80022fa:	4423      	add	r3, r4
 80022fc:	3308      	adds	r3, #8
 80022fe:	6019      	str	r1, [r3, #0]
        myResults[numTest].Measurement[i].uiSoloTime = structDataResult->Measurement[i].uiSoloTime;
 8002300:	7bf9      	ldrb	r1, [r7, #15]
 8002302:	78f8      	ldrb	r0, [r7, #3]
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	687c      	ldr	r4, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	440b      	add	r3, r1
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4423      	add	r3, r4
 8002312:	330c      	adds	r3, #12
 8002314:	6819      	ldr	r1, [r3, #0]
 8002316:	4c0b      	ldr	r4, [pc, #44]	; (8002344 <setUserResultData+0xe0>)
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	0182      	lsls	r2, r0, #6
 8002322:	4413      	add	r3, r2
 8002324:	4423      	add	r3, r4
 8002326:	330c      	adds	r3, #12
 8002328:	6019      	str	r1, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	3301      	adds	r3, #1
 800232e:	73fb      	strb	r3, [r7, #15]
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	7bbb      	ldrb	r3, [r7, #14]
 8002334:	429a      	cmp	r2, r3
 8002336:	d3b8      	bcc.n	80022aa <setUserResultData+0x46>
    }
}
 8002338:	bf00      	nop
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bc90      	pop	{r4, r7}
 8002342:	4770      	bx	lr
 8002344:	20000214 	.word	0x20000214

08002348 <resetConfigStruct>:
    }

}

unsigned char resetConfigStruct(struct dataInsert* structToReset)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
    structToReset->userTest = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
    structToReset->userAlturaDJ = 0;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	775a      	strb	r2, [r3, #29]
    structToReset->userAlturaMax = 0;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
    structToReset->userAlturaMin = 0;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]
    structToReset->userCMJ = 0;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	771a      	strb	r2, [r3, #28]
    structToReset->userCommConfig = 0;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    structToReset->userConsultTest = 0;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	729a      	strb	r2, [r3, #10]
    structToReset->userIntervalSaltos = 0;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]
    structToReset->userIntervalSeries = 0;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	621a      	str	r2, [r3, #32]
    structToReset->userMass = 0;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	721a      	strb	r2, [r3, #8]
    structToReset->userNumSaltos = 0;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	751a      	strb	r2, [r3, #20]
    structToReset->userNumSeries = 0;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	779a      	strb	r2, [r3, #30]
    structToReset->userOverMass = 0;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	725a      	strb	r2, [r3, #9]
    structToReset->userSelectSensorChannel = 0;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    structToReset->userSelectTapete = 0;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    structToReset->userTime = 0;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	605a      	str	r2, [r3, #4]

}
 80023b6:	bf00      	nop
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
	...

080023c4 <resetMyResults>:

void resetMyResults()
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
    numberTest = 0;
 80023ca:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <resetMyResults+0xb4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
    for(unsigned char test=0;test<TEST_SIZE;test++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	71fb      	strb	r3, [r7, #7]
 80023d4:	e046      	b.n	8002464 <resetMyResults+0xa0>
    {
        myResults[test].resultTestNum = 0;
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	4a28      	ldr	r2, [pc, #160]	; (800247c <resetMyResults+0xb8>)
 80023da:	019b      	lsls	r3, r3, #6
 80023dc:	4413      	add	r3, r2
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
        myResults[test].resultTestAcquiredSamples = 0;
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	4a25      	ldr	r2, [pc, #148]	; (800247c <resetMyResults+0xb8>)
 80023e6:	019b      	lsls	r3, r3, #6
 80023e8:	4413      	add	r3, r2
 80023ea:	3301      	adds	r3, #1
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
        myResults[test].thereAreData = FALSE;
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	4a22      	ldr	r2, [pc, #136]	; (800247c <resetMyResults+0xb8>)
 80023f4:	019b      	lsls	r3, r3, #6
 80023f6:	4413      	add	r3, r2
 80023f8:	3302      	adds	r3, #2
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 80023fe:	2300      	movs	r3, #0
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	e029      	b.n	8002458 <resetMyResults+0x94>
        {
            myResults[test].Measurement[sample].sampleNum = 0;
 8002404:	79f9      	ldrb	r1, [r7, #7]
 8002406:	481d      	ldr	r0, [pc, #116]	; (800247c <resetMyResults+0xb8>)
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	018a      	lsls	r2, r1, #6
 8002414:	4413      	add	r3, r2
 8002416:	4403      	add	r3, r0
 8002418:	3304      	adds	r3, #4
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
            myResults[test].Measurement[sample].uiVooTime = 0;
 800241e:	79f9      	ldrb	r1, [r7, #7]
 8002420:	4816      	ldr	r0, [pc, #88]	; (800247c <resetMyResults+0xb8>)
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	018a      	lsls	r2, r1, #6
 800242e:	4413      	add	r3, r2
 8002430:	4403      	add	r3, r0
 8002432:	3308      	adds	r3, #8
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
            myResults[test].Measurement[sample].uiSoloTime = 0;
 8002438:	79f9      	ldrb	r1, [r7, #7]
 800243a:	4810      	ldr	r0, [pc, #64]	; (800247c <resetMyResults+0xb8>)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	018a      	lsls	r2, r1, #6
 8002448:	4413      	add	r3, r2
 800244a:	4403      	add	r3, r0
 800244c:	330c      	adds	r3, #12
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b04      	cmp	r3, #4
 800245c:	d9d2      	bls.n	8002404 <resetMyResults+0x40>
    for(unsigned char test=0;test<TEST_SIZE;test++)
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	3301      	adds	r3, #1
 8002462:	71fb      	strb	r3, [r7, #7]
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	2b04      	cmp	r3, #4
 8002468:	d9b5      	bls.n	80023d6 <resetMyResults+0x12>
        }

    }
}
 800246a:	bf00      	nop
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	200003e1 	.word	0x200003e1
 800247c:	20000214 	.word	0x20000214

08002480 <indexColumn>:
        *index = 0;
    }
}

unsigned char indexColumn(short* currentColumn, unsigned char size)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	70fb      	strb	r3, [r7, #3]
    *currentColumn = *currentColumn -1;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29b      	uxth	r3, r3
 8002498:	b21a      	sxth	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	801a      	strh	r2, [r3, #0]
    if(*currentColumn == 5) *currentColumn = *currentColumn -1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d109      	bne.n	80024bc <indexColumn+0x3c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	b21a      	sxth	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	801a      	strh	r2, [r3, #0]
 80024ba:	e00d      	b.n	80024d8 <indexColumn+0x58>
    else if(*currentColumn == 2) *currentColumn = *currentColumn -1;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d108      	bne.n	80024d8 <indexColumn+0x58>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	801a      	strh	r2, [r3, #0]
    if(*currentColumn <0)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da03      	bge.n	80024ea <indexColumn+0x6a>
    {
        *currentColumn = size;
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	b21a      	sxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	801a      	strh	r2, [r3, #0]
    }
}
 80024ea:	bf00      	nop
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <milisecondsTime>:

unsigned long milisecondsTime(unsigned char* ptr_inputTime)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
	struct tm* time = ptr_inputTime;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	60fb      	str	r3, [r7, #12]
	unsigned long int msTime = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]

	msTime = time->tm_hour*3600;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800250e:	fb02 f303 	mul.w	r3, r2, r3
 8002512:	60bb      	str	r3, [r7, #8]
	msTime += time->tm_min*60;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	461a      	mov	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	4413      	add	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
	msTime += time->tm_sec;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	4413      	add	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
	msTime = msTime*1000;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	60bb      	str	r3, [r7, #8]

	return msTime;
 8002540:	68bb      	ldr	r3, [r7, #8]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <stringToInt>:
    //fazer a convers�o de hhmmss para ms
    return intTime;
}

unsigned int stringToInt(unsigned char* string)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
    char *ptr;
    unsigned int x = strtol(string,&ptr,10);
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	220a      	movs	r2, #10
 800255a:	4619      	mov	r1, r3
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f008 f887 	bl	800a670 <strtol>
 8002562:	4603      	mov	r3, r0
 8002564:	60fb      	str	r3, [r7, #12]
    return x;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <indexMass>:
    float x = strtof(string,NULL);
    return x;
}

unsigned char indexMass(short* index)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
    *index = *index -1;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29b      	uxth	r3, r3
 8002584:	b21a      	sxth	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	801a      	strh	r2, [r3, #0]
    if(*index == 3) *index = *index -1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d108      	bne.n	80025a6 <indexMass+0x36>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29b      	uxth	r3, r3
 80025a0:	b21a      	sxth	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da02      	bge.n	80025b6 <indexMass+0x46>
    {
        *index = 4;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2204      	movs	r2, #4
 80025b4:	801a      	strh	r2, [r3, #0]
    }
}
 80025b6:	bf00      	nop
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <indexChange>:

unsigned char indexChange(short* index, unsigned char size)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	70fb      	strb	r3, [r7, #3]
    *index = *index - 1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29b      	uxth	r3, r3
 80025da:	b21a      	sxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	da03      	bge.n	80025f2 <indexChange+0x30>
    {
        *index = size;
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	b21a      	sxth	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	801a      	strh	r2, [r3, #0]
    }
}
 80025f2:	bf00      	nop
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
	...

08002600 <getAltMinString>:

unsigned char* getAltMinString()
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af02      	add	r7, sp, #8
    unsigned char* altMinArray = getAltMinArray();
 8002606:	f7ff fd33 	bl	8002070 <getAltMinArray>
 800260a:	6078      	str	r0, [r7, #4]
    sprintf(altMinString,"%d%d%d",altMinArray[0],altMinArray[1],altMinArray[2]);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3301      	adds	r3, #1
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	4619      	mov	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3302      	adds	r3, #2
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	460b      	mov	r3, r1
 8002624:	4904      	ldr	r1, [pc, #16]	; (8002638 <getAltMinString+0x38>)
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <getAltMinString+0x3c>)
 8002628:	f007 fa4c 	bl	8009ac4 <siprintf>
    return altMinString;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <getAltMinString+0x3c>)
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	0800bd8c 	.word	0x0800bd8c
 800263c:	20000424 	.word	0x20000424

08002640 <getAltMaxString>:

unsigned char* getAltMaxString()
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af02      	add	r7, sp, #8
    unsigned char* altMaxArray = getAltMaxArray();
 8002646:	f7ff fd1d 	bl	8002084 <getAltMaxArray>
 800264a:	6078      	str	r0, [r7, #4]
    sprintf(altMaxString,"%d%d%d",altMaxArray[0],altMaxArray[1],altMaxArray[2]);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3301      	adds	r3, #1
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3302      	adds	r3, #2
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	460b      	mov	r3, r1
 8002664:	4904      	ldr	r1, [pc, #16]	; (8002678 <getAltMaxString+0x38>)
 8002666:	4805      	ldr	r0, [pc, #20]	; (800267c <getAltMaxString+0x3c>)
 8002668:	f007 fa2c 	bl	8009ac4 <siprintf>
    return altMaxString;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <getAltMaxString+0x3c>)
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	0800bd8c 	.word	0x0800bd8c
 800267c:	20000430 	.word	0x20000430

08002680 <getNumSaltosString>:

unsigned char* getNumSaltosString()
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af02      	add	r7, sp, #8
    unsigned char* numSaltosArray = getNumSaltosArray();
 8002686:	f7ff fd07 	bl	8002098 <getNumSaltosArray>
 800268a:	6078      	str	r0, [r7, #4]
    sprintf(numSaltosString,"%d%d%d",numSaltosArray[0],numSaltosArray[1],numSaltosArray[2]);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3301      	adds	r3, #1
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3302      	adds	r3, #2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	460b      	mov	r3, r1
 80026a4:	4904      	ldr	r1, [pc, #16]	; (80026b8 <getNumSaltosString+0x38>)
 80026a6:	4805      	ldr	r0, [pc, #20]	; (80026bc <getNumSaltosString+0x3c>)
 80026a8:	f007 fa0c 	bl	8009ac4 <siprintf>
    return numSaltosString;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <getNumSaltosString+0x3c>)
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	0800bd8c 	.word	0x0800bd8c
 80026bc:	2000043c 	.word	0x2000043c

080026c0 <getTypeJumpString>:

unsigned char* getTypeJumpString()
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
    unsigned char* typeJumpArray = getTypeJumpArray();
 80026c6:	f7ff fcf1 	bl	80020ac <getTypeJumpArray>
 80026ca:	6078      	str	r0, [r7, #4]
    sprintf(tipoSaltoString,"%d",typeJumpArray[0]);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4904      	ldr	r1, [pc, #16]	; (80026e4 <getTypeJumpString+0x24>)
 80026d4:	4804      	ldr	r0, [pc, #16]	; (80026e8 <getTypeJumpString+0x28>)
 80026d6:	f007 f9f5 	bl	8009ac4 <siprintf>
    return tipoSaltoString;
 80026da:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <getTypeJumpString+0x28>)
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	0800bd94 	.word	0x0800bd94
 80026e8:	20000448 	.word	0x20000448

080026ec <getAltDJString>:

unsigned char* getAltDJString()
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
    unsigned char* altDJArray = getAltDJArray();
 80026f2:	f7ff fce5 	bl	80020c0 <getAltDJArray>
 80026f6:	6078      	str	r0, [r7, #4]
    sprintf(altDJString,"%d%d%",altDJArray[0],altDJArray[1]);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3301      	adds	r3, #1
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4904      	ldr	r1, [pc, #16]	; (8002718 <getAltDJString+0x2c>)
 8002706:	4805      	ldr	r0, [pc, #20]	; (800271c <getAltDJString+0x30>)
 8002708:	f007 f9dc 	bl	8009ac4 <siprintf>
    return altDJString;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <getAltDJString+0x30>)
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	0800bd98 	.word	0x0800bd98
 800271c:	20000454 	.word	0x20000454

08002720 <getNumSeriesString>:

unsigned char* getNumSeriesString()
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af02      	add	r7, sp, #8
    unsigned char* numSeriesArray = getNumSeriesArray();
 8002726:	f7ff fcd5 	bl	80020d4 <getNumSeriesArray>
 800272a:	6078      	str	r0, [r7, #4]
    sprintf(numSeriesString,"%d%d%d",numSeriesArray[0],numSeriesArray[1],numSeriesArray[2]);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3301      	adds	r3, #1
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3302      	adds	r3, #2
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	460b      	mov	r3, r1
 8002744:	4904      	ldr	r1, [pc, #16]	; (8002758 <getNumSeriesString+0x38>)
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <getNumSeriesString+0x3c>)
 8002748:	f007 f9bc 	bl	8009ac4 <siprintf>
    return numSeriesString;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <getNumSeriesString+0x3c>)
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	0800bd8c 	.word	0x0800bd8c
 800275c:	20000460 	.word	0x20000460

08002760 <getMassString>:
    sprintf(interSeriesString,"%d%d%d",intervalSeriesArray[0],intervalSeriesArray[1],intervalSeriesArray[2]);
    return interSeriesString;
}

unsigned char* getMassString()
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af02      	add	r7, sp, #8
    unsigned char* massArray = getMassArray();
 8002766:	f7ff fc6f 	bl	8002048 <getMassArray>
 800276a:	6078      	str	r0, [r7, #4]
    sprintf(massString,"%d%d%d.%d",massArray[0],massArray[1],massArray[2],massArray[4]);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3301      	adds	r3, #1
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3302      	adds	r3, #2
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	9200      	str	r2, [sp, #0]
 800278c:	4603      	mov	r3, r0
 800278e:	460a      	mov	r2, r1
 8002790:	4904      	ldr	r1, [pc, #16]	; (80027a4 <getMassString+0x44>)
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <getMassString+0x48>)
 8002794:	f007 f996 	bl	8009ac4 <siprintf>
    //massArray[3] ficou representando o "." no display
    return massString;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <getMassString+0x48>)
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	0800bda0 	.word	0x0800bda0
 80027a8:	2000040c 	.word	0x2000040c

080027ac <getOverMassString>:

unsigned char* getOverMassString()
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af02      	add	r7, sp, #8
    unsigned char* overMassArray = getOverMassArray();
 80027b2:	f7ff fc53 	bl	800205c <getOverMassArray>
 80027b6:	6078      	str	r0, [r7, #4]
    sprintf(overMassString,"%d%d%d.%d",overMassArray[0],overMassArray[1],overMassArray[2],overMassArray[4]);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3301      	adds	r3, #1
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3302      	adds	r3, #2
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	9200      	str	r2, [sp, #0]
 80027d8:	4603      	mov	r3, r0
 80027da:	460a      	mov	r2, r1
 80027dc:	4904      	ldr	r1, [pc, #16]	; (80027f0 <getOverMassString+0x44>)
 80027de:	4805      	ldr	r0, [pc, #20]	; (80027f4 <getOverMassString+0x48>)
 80027e0:	f007 f970 	bl	8009ac4 <siprintf>
    return overMassString;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <getOverMassString+0x48>)
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	0800bda0 	.word	0x0800bda0
 80027f4:	20000418 	.word	0x20000418

080027f8 <getNumTestString>:

unsigned char* getNumTestString()
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af02      	add	r7, sp, #8
    unsigned char* numTestArray = getNumTestArray();
 80027fe:	f7ff fc73 	bl	80020e8 <getNumTestArray>
 8002802:	6078      	str	r0, [r7, #4]
    sprintf(numTestString,"%d%d%d",numTestArray[0],numTestArray[1],numTestArray[2]);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3301      	adds	r3, #1
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4619      	mov	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3302      	adds	r3, #2
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	460b      	mov	r3, r1
 800281c:	4904      	ldr	r1, [pc, #16]	; (8002830 <getNumTestString+0x38>)
 800281e:	4805      	ldr	r0, [pc, #20]	; (8002834 <getNumTestString+0x3c>)
 8002820:	f007 f950 	bl	8009ac4 <siprintf>
    return numTestString;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <getNumTestString+0x3c>)
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	0800bd8c 	.word	0x0800bd8c
 8002834:	2000046c 	.word	0x2000046c

08002838 <getEraseTestString>:

unsigned char* getEraseTestString()
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
    unsigned char* eraseTestArray = getEraseTestArray();
 800283e:	f7ff fc5d 	bl	80020fc <getEraseTestArray>
 8002842:	4603      	mov	r3, r0
 8002844:	607b      	str	r3, [r7, #4]
    sprintf(eraseTestString,"(%d)",eraseTestArray[0]);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	4904      	ldr	r1, [pc, #16]	; (8002860 <getEraseTestString+0x28>)
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <getEraseTestString+0x2c>)
 8002850:	f007 f938 	bl	8009ac4 <siprintf>
    return eraseTestString;
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <getEraseTestString+0x2c>)
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	0800bdac 	.word	0x0800bdac
 8002864:	20000478 	.word	0x20000478

08002868 <param_1_toString>:
	static unsigned char saveResultString[50];
	return saveResultString;
}

unsigned int* param_1_toString(unsigned int* string)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
    static unsigned int result[TEST_SIZE];
    sprintf(result,"%d",*string);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4904      	ldr	r1, [pc, #16]	; (8002888 <param_1_toString+0x20>)
 8002878:	4804      	ldr	r0, [pc, #16]	; (800288c <param_1_toString+0x24>)
 800287a:	f007 f923 	bl	8009ac4 <siprintf>
    return result;
 800287e:	4b03      	ldr	r3, [pc, #12]	; (800288c <param_1_toString+0x24>)
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	0800bd94 	.word	0x0800bd94
 800288c:	20000484 	.word	0x20000484

08002890 <param_2_toString>:

unsigned int* param_2_toString(unsigned int* string)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    static unsigned int result[TEST_SIZE];
    sprintf(result,"%d ms",*string);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4904      	ldr	r1, [pc, #16]	; (80028b0 <param_2_toString+0x20>)
 80028a0:	4804      	ldr	r0, [pc, #16]	; (80028b4 <param_2_toString+0x24>)
 80028a2:	f007 f90f 	bl	8009ac4 <siprintf>
    return result;
 80028a6:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <param_2_toString+0x24>)
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	0800bdb4 	.word	0x0800bdb4
 80028b4:	20000498 	.word	0x20000498

080028b8 <setUserAltMin>:
    sprintf(result,"%c",*string);
    return result;
}

unsigned char setUserAltMin(unsigned char* idx)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
    unsigned char* altMinArray = getAltMinArray();
 80028c0:	f7ff fbd6 	bl	8002070 <getAltMinArray>
 80028c4:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	72fb      	strb	r3, [r7, #11]
    altMinArray[index] = altMinArray[index]+1;
 80028cc:	7afb      	ldrb	r3, [r7, #11]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4413      	add	r3, r2
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	7afb      	ldrb	r3, [r7, #11]
 80028d6:	68f9      	ldr	r1, [r7, #12]
 80028d8:	440b      	add	r3, r1
 80028da:	3201      	adds	r2, #1
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	701a      	strb	r2, [r3, #0]
    if(altMinArray[index]>9) altMinArray[index]= 0;
 80028e0:	7afb      	ldrb	r3, [r7, #11]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4413      	add	r3, r2
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b09      	cmp	r3, #9
 80028ea:	d904      	bls.n	80028f6 <setUserAltMin+0x3e>
 80028ec:	7afb      	ldrb	r3, [r7, #11]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4413      	add	r3, r2
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
}
 80028f6:	bf00      	nop
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <setUserErase>:

unsigned char setUserErase(unsigned char* idx)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
    unsigned char* eraseArray = getEraseTestArray();
 8002908:	f7ff fbf8 	bl	80020fc <getEraseTestArray>
 800290c:	4603      	mov	r3, r0
 800290e:	60fb      	str	r3, [r7, #12]
    unsigned char index = *idx;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	72fb      	strb	r3, [r7, #11]
    eraseArray[index] = eraseArray[index]+1;
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4413      	add	r3, r2
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	7afb      	ldrb	r3, [r7, #11]
 8002920:	68f9      	ldr	r1, [r7, #12]
 8002922:	440b      	add	r3, r1
 8002924:	3201      	adds	r2, #1
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]
    if(eraseArray[index]>9) eraseArray[index]= 0;
 800292a:	7afb      	ldrb	r3, [r7, #11]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b09      	cmp	r3, #9
 8002934:	d904      	bls.n	8002940 <setUserErase+0x40>
 8002936:	7afb      	ldrb	r3, [r7, #11]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
}
 8002940:	bf00      	nop
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <setUserAltMax>:

unsigned char setUserAltMax(unsigned char* idx)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
    unsigned char* altMaxArray = getAltMaxArray();
 8002952:	f7ff fb97 	bl	8002084 <getAltMaxArray>
 8002956:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	72fb      	strb	r3, [r7, #11]
    altMaxArray[index] = altMaxArray[index]+1;
 800295e:	7afb      	ldrb	r3, [r7, #11]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4413      	add	r3, r2
 8002964:	781a      	ldrb	r2, [r3, #0]
 8002966:	7afb      	ldrb	r3, [r7, #11]
 8002968:	68f9      	ldr	r1, [r7, #12]
 800296a:	440b      	add	r3, r1
 800296c:	3201      	adds	r2, #1
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]
    if(altMaxArray[index]>9) altMaxArray[index]= 0;
 8002972:	7afb      	ldrb	r3, [r7, #11]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4413      	add	r3, r2
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b09      	cmp	r3, #9
 800297c:	d904      	bls.n	8002988 <setUserAltMax+0x3e>
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
}
 8002988:	bf00      	nop
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <setUserNumSaltos>:

unsigned char setUserNumSaltos(unsigned char* idx)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
    unsigned char* numSaltosArray = getNumSaltosArray();
 800299a:	f7ff fb7d 	bl	8002098 <getNumSaltosArray>
 800299e:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	72fb      	strb	r3, [r7, #11]
    numSaltosArray[index] = numSaltosArray[index]+1;
 80029a6:	7afb      	ldrb	r3, [r7, #11]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	7afb      	ldrb	r3, [r7, #11]
 80029b0:	68f9      	ldr	r1, [r7, #12]
 80029b2:	440b      	add	r3, r1
 80029b4:	3201      	adds	r2, #1
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]
    if(numSaltosArray[index]>9) numSaltosArray[index]= 0;
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4413      	add	r3, r2
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b09      	cmp	r3, #9
 80029c4:	d904      	bls.n	80029d0 <setUserNumSaltos+0x3e>
 80029c6:	7afb      	ldrb	r3, [r7, #11]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4413      	add	r3, r2
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
}
 80029d0:	bf00      	nop
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <setUserTypeJump>:

unsigned char setUserTypeJump(unsigned char* idx)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
    unsigned char* typeJumpArray = getTypeJumpArray();
 80029e2:	f7ff fb63 	bl	80020ac <getTypeJumpArray>
 80029e6:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	72fb      	strb	r3, [r7, #11]
    typeJumpArray[index] = typeJumpArray[index]+1;
 80029ee:	7afb      	ldrb	r3, [r7, #11]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	7afb      	ldrb	r3, [r7, #11]
 80029f8:	68f9      	ldr	r1, [r7, #12]
 80029fa:	440b      	add	r3, r1
 80029fc:	3201      	adds	r2, #1
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]
    if(typeJumpArray[index]>3) typeJumpArray[index]= 0;
 8002a02:	7afb      	ldrb	r3, [r7, #11]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d904      	bls.n	8002a18 <setUserTypeJump+0x3e>
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <setUserAltDJ>:

unsigned char setUserAltDJ(unsigned char* idx)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
    unsigned char* AltDJArray = getAltDJArray();
 8002a2a:	f7ff fb49 	bl	80020c0 <getAltDJArray>
 8002a2e:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	72fb      	strb	r3, [r7, #11]
    AltDJArray[index] = AltDJArray[index]+1;
 8002a36:	7afb      	ldrb	r3, [r7, #11]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	7afb      	ldrb	r3, [r7, #11]
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	440b      	add	r3, r1
 8002a44:	3201      	adds	r2, #1
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]
    if(AltDJArray[index]>9) AltDJArray[index]= 0;
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b09      	cmp	r3, #9
 8002a54:	d904      	bls.n	8002a60 <setUserAltDJ+0x3e>
 8002a56:	7afb      	ldrb	r3, [r7, #11]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
}
 8002a60:	bf00      	nop
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <setUserNumSeries>:

unsigned char setUserNumSeries(unsigned char* idx)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
    unsigned char* numSeriesArray = getNumSeriesArray();
 8002a72:	f7ff fb2f 	bl	80020d4 <getNumSeriesArray>
 8002a76:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	72fb      	strb	r3, [r7, #11]
    numSeriesArray[index] = numSeriesArray[index]+1;
 8002a7e:	7afb      	ldrb	r3, [r7, #11]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	781a      	ldrb	r2, [r3, #0]
 8002a86:	7afb      	ldrb	r3, [r7, #11]
 8002a88:	68f9      	ldr	r1, [r7, #12]
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3201      	adds	r2, #1
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]
    if(numSeriesArray[index]>9) numSeriesArray[index]= 0;
 8002a92:	7afb      	ldrb	r3, [r7, #11]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b09      	cmp	r3, #9
 8002a9c:	d904      	bls.n	8002aa8 <setUserNumSeries+0x3e>
 8002a9e:	7afb      	ldrb	r3, [r7, #11]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <setUserMass>:
    IntervalSeriesArray[index] = IntervalSeriesArray[index]+1;
    if(IntervalSeriesArray[index]>9) IntervalSeriesArray[index]= 0;
}

unsigned char setUserMass(unsigned char* idx)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
    unsigned char* massArray = getMassArray();
 8002aba:	f7ff fac5 	bl	8002048 <getMassArray>
 8002abe:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	72fb      	strb	r3, [r7, #11]
    massArray[index] = massArray[index]+1;
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	7afb      	ldrb	r3, [r7, #11]
 8002ad0:	68f9      	ldr	r1, [r7, #12]
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3201      	adds	r2, #1
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]
    if(massArray[index]>9) massArray[index]= 0;
 8002ada:	7afb      	ldrb	r3, [r7, #11]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	d904      	bls.n	8002af0 <setUserMass+0x3e>
 8002ae6:	7afb      	ldrb	r3, [r7, #11]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
}
 8002af0:	bf00      	nop
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <setUserOverMass>:

unsigned char setUserOverMass(unsigned char* idx)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
    unsigned char* overMassArray = getOverMassArray();
 8002b02:	f7ff faab 	bl	800205c <getOverMassArray>
 8002b06:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	72fb      	strb	r3, [r7, #11]
    overMassArray[index] = overMassArray[index]+1;
 8002b0e:	7afb      	ldrb	r3, [r7, #11]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4413      	add	r3, r2
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	7afb      	ldrb	r3, [r7, #11]
 8002b18:	68f9      	ldr	r1, [r7, #12]
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3201      	adds	r2, #1
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]
    if(overMassArray[index]>9) overMassArray[index]= 0;
 8002b22:	7afb      	ldrb	r3, [r7, #11]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b09      	cmp	r3, #9
 8002b2c:	d904      	bls.n	8002b38 <setUserOverMass+0x3e>
 8002b2e:	7afb      	ldrb	r3, [r7, #11]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <setUserNumTest>:

unsigned char setUserNumTest(unsigned char* idx)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
    unsigned char* numTestArray = getNumTestArray();
 8002b4a:	f7ff facd 	bl	80020e8 <getNumTestArray>
 8002b4e:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	72fb      	strb	r3, [r7, #11]
    numTestArray[index] = numTestArray[index]+1;
 8002b56:	7afb      	ldrb	r3, [r7, #11]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	781a      	ldrb	r2, [r3, #0]
 8002b5e:	7afb      	ldrb	r3, [r7, #11]
 8002b60:	68f9      	ldr	r1, [r7, #12]
 8002b62:	440b      	add	r3, r1
 8002b64:	3201      	adds	r2, #1
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]
    if(numTestArray[index]>9) numTestArray[index]= 0;
 8002b6a:	7afb      	ldrb	r3, [r7, #11]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b09      	cmp	r3, #9
 8002b74:	d904      	bls.n	8002b80 <setUserNumTest+0x3e>
 8002b76:	7afb      	ldrb	r3, [r7, #11]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
}
 8002b80:	bf00      	nop
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <setIntervalSaltosTime>:

unsigned char* setIntervalSaltosTime(unsigned char* configInputTimer)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	unsigned char index = *configInputTimer + 3;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	3303      	adds	r3, #3
 8002b9a:	73fb      	strb	r3, [r7, #15]
	struct tm* insertTime = getIntervalTimeStruct();
 8002b9c:	f7ff fa40 	bl	8002020 <getIntervalTimeStruct>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60bb      	str	r3, [r7, #8]

	switch(index)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	3b03      	subs	r3, #3
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d84a      	bhi.n	8002c42 <setIntervalSaltosTime+0xb6>
 8002bac:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <setIntervalSaltosTime+0x28>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002bc9 	.word	0x08002bc9
 8002bb8:	08002be5 	.word	0x08002be5
 8002bbc:	08002c43 	.word	0x08002c43
 8002bc0:	08002bff 	.word	0x08002bff
 8002bc4:	08002c1b 	.word	0x08002c1b
	{
		case DEZENA_M:
			insertTime->tm_min = insertTime->tm_min+10;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f103 020a 	add.w	r2, r3, #10
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b3c      	cmp	r3, #60	; 0x3c
 8002bda:	dd2b      	ble.n	8002c34 <setIntervalSaltosTime+0xa8>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	605a      	str	r2, [r3, #4]
		break;
 8002be2:	e027      	b.n	8002c34 <setIntervalSaltosTime+0xa8>

		case UNIDADE_M:
			insertTime->tm_min = insertTime->tm_min+1;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b3c      	cmp	r3, #60	; 0x3c
 8002bf4:	dd20      	ble.n	8002c38 <setIntervalSaltosTime+0xac>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	605a      	str	r2, [r3, #4]
		break;
 8002bfc:	e01c      	b.n	8002c38 <setIntervalSaltosTime+0xac>

		case DEZENA_S:
			insertTime->tm_sec =insertTime->tm_sec+10 ;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f103 020a 	add.w	r2, r3, #10
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b3c      	cmp	r3, #60	; 0x3c
 8002c10:	dd14      	ble.n	8002c3c <setIntervalSaltosTime+0xb0>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

		break;
 8002c18:	e010      	b.n	8002c3c <setIntervalSaltosTime+0xb0>

		case UNIDADE_S:
			insertTime->tm_sec =insertTime->tm_sec+1 ;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b3c      	cmp	r3, #60	; 0x3c
 8002c2a:	dd09      	ble.n	8002c40 <setIntervalSaltosTime+0xb4>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
		break;
 8002c32:	e005      	b.n	8002c40 <setIntervalSaltosTime+0xb4>
		break;
 8002c34:	bf00      	nop
 8002c36:	e004      	b.n	8002c42 <setIntervalSaltosTime+0xb6>
		break;
 8002c38:	bf00      	nop
 8002c3a:	e002      	b.n	8002c42 <setIntervalSaltosTime+0xb6>
		break;
 8002c3c:	bf00      	nop
 8002c3e:	e000      	b.n	8002c42 <setIntervalSaltosTime+0xb6>
		break;
 8002c40:	bf00      	nop
	}

}
 8002c42:	bf00      	nop
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <setUserTime>:

unsigned char* setUserTime(unsigned char* inputUserTimer)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    unsigned char index = *inputUserTimer;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	73fb      	strb	r3, [r7, #15]
    struct tm* insertTime = getTimeStruct();
 8002c5a:	f7ff f9d7 	bl	800200c <getTimeStruct>
 8002c5e:	60b8      	str	r0, [r7, #8]
    static unsigned char timeString[9];

    switch(index)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b07      	cmp	r3, #7
 8002c64:	f200 8089 	bhi.w	8002d7a <setUserTime+0x12e>
 8002c68:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <setUserTime+0x24>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002c91 	.word	0x08002c91
 8002c74:	08002cb9 	.word	0x08002cb9
 8002c78:	08002d7b 	.word	0x08002d7b
 8002c7c:	08002cdf 	.word	0x08002cdf
 8002c80:	08002d07 	.word	0x08002d07
 8002c84:	08002d7b 	.word	0x08002d7b
 8002c88:	08002d2d 	.word	0x08002d2d
 8002c8c:	08002d55 	.word	0x08002d55
    {
        case DEZENA_H:
            insertTime->tm_hour = insertTime->tm_hour+10;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f103 020a 	add.w	r2, r3, #10
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b17      	cmp	r3, #23
 8002ca2:	dd02      	ble.n	8002caa <setUserTime+0x5e>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4a35      	ldr	r2, [pc, #212]	; (8002d84 <setUserTime+0x138>)
 8002cae:	2109      	movs	r1, #9
 8002cb0:	4835      	ldr	r0, [pc, #212]	; (8002d88 <setUserTime+0x13c>)
 8002cb2:	f007 fc5d 	bl	800a570 <strftime>
        break;
 8002cb6:	e060      	b.n	8002d7a <setUserTime+0x12e>

        case UNIDADE_H:
            insertTime->tm_hour = insertTime->tm_hour+1;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b17      	cmp	r3, #23
 8002cc8:	dd02      	ble.n	8002cd0 <setUserTime+0x84>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4a2c      	ldr	r2, [pc, #176]	; (8002d84 <setUserTime+0x138>)
 8002cd4:	2109      	movs	r1, #9
 8002cd6:	482c      	ldr	r0, [pc, #176]	; (8002d88 <setUserTime+0x13c>)
 8002cd8:	f007 fc4a 	bl	800a570 <strftime>
        break;
 8002cdc:	e04d      	b.n	8002d7a <setUserTime+0x12e>

        case DEZENA_M:
            insertTime->tm_min = insertTime->tm_min+10;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f103 020a 	add.w	r2, r3, #10
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b3c      	cmp	r3, #60	; 0x3c
 8002cf0:	dd02      	ble.n	8002cf8 <setUserTime+0xac>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	605a      	str	r2, [r3, #4]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4a22      	ldr	r2, [pc, #136]	; (8002d84 <setUserTime+0x138>)
 8002cfc:	2109      	movs	r1, #9
 8002cfe:	4822      	ldr	r0, [pc, #136]	; (8002d88 <setUserTime+0x13c>)
 8002d00:	f007 fc36 	bl	800a570 <strftime>
        break;
 8002d04:	e039      	b.n	8002d7a <setUserTime+0x12e>

        case UNIDADE_M:
        	insertTime->tm_min = insertTime->tm_min+1;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b3c      	cmp	r3, #60	; 0x3c
 8002d16:	dd02      	ble.n	8002d1e <setUserTime+0xd2>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	605a      	str	r2, [r3, #4]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	4a18      	ldr	r2, [pc, #96]	; (8002d84 <setUserTime+0x138>)
 8002d22:	2109      	movs	r1, #9
 8002d24:	4818      	ldr	r0, [pc, #96]	; (8002d88 <setUserTime+0x13c>)
 8002d26:	f007 fc23 	bl	800a570 <strftime>
        break;
 8002d2a:	e026      	b.n	8002d7a <setUserTime+0x12e>

        case DEZENA_S:
            insertTime->tm_sec =insertTime->tm_sec+10 ;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f103 020a 	add.w	r2, r3, #10
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b3c      	cmp	r3, #60	; 0x3c
 8002d3e:	dd02      	ble.n	8002d46 <setUserTime+0xfa>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <setUserTime+0x138>)
 8002d4a:	2109      	movs	r1, #9
 8002d4c:	480e      	ldr	r0, [pc, #56]	; (8002d88 <setUserTime+0x13c>)
 8002d4e:	f007 fc0f 	bl	800a570 <strftime>
        break;
 8002d52:	e012      	b.n	8002d7a <setUserTime+0x12e>

        case UNIDADE_S:
            insertTime->tm_sec =insertTime->tm_sec+1 ;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b3c      	cmp	r3, #60	; 0x3c
 8002d64:	dd02      	ble.n	8002d6c <setUserTime+0x120>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <setUserTime+0x138>)
 8002d70:	2109      	movs	r1, #9
 8002d72:	4805      	ldr	r0, [pc, #20]	; (8002d88 <setUserTime+0x13c>)
 8002d74:	f007 fbfc 	bl	800a570 <strftime>
        break;
 8002d78:	bf00      	nop
    }
}
 8002d7a:	bf00      	nop
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	0800bdc0 	.word	0x0800bdc0
 8002d88:	200004ac 	.word	0x200004ac

08002d8c <alturaToTempo>:

unsigned int alturaToTempo(unsigned int altura)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	unsigned int tempo = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
	unsigned int nominator = 8 * altura;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	613b      	str	r3, [r7, #16]
	unsigned int  g = 981; // cm/s^2
 8002d9e:	f240 33d5 	movw	r3, #981	; 0x3d5
 8002da2:	60fb      	str	r3, [r7, #12]
	float relation =  nominator/g;
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd ff21 	bl	8000bf4 <__aeabi_ui2f>
 8002db2:	4603      	mov	r3, r0
 8002db4:	60bb      	str	r3, [r7, #8]
	tempo = sqrt(relation);
 8002db6:	68b8      	ldr	r0, [r7, #8]
 8002db8:	f7fd fb3e 	bl	8000438 <__aeabi_f2d>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f008 fefa 	bl	800bbbc <sqrt>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f7fd fe3a 	bl	8000a48 <__aeabi_d2uiz>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	617b      	str	r3, [r7, #20]
	tempo = tempo*1000;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	617b      	str	r3, [r7, #20]
	return tempo;
 8002de4:	697b      	ldr	r3, [r7, #20]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <updateUserMsg>:
#include "time.h"
#include "stdlib.h"


unsigned char updateUserMsg(unsigned char col, unsigned char linha, unsigned char *userMessage, unsigned char* status)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60ba      	str	r2, [r7, #8]
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	4603      	mov	r3, r0
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	73bb      	strb	r3, [r7, #14]
	if(*status == IDDLE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d108      	bne.n	8002e1a <updateUserMsg+0x2c>
	{
	    printDataDisplay(col,linha,userMessage);
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	7bb9      	ldrb	r1, [r7, #14]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 ffe4 	bl	8003ddc <printDataDisplay>
		*status = PRINTED;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(50);
	}
}
 8002e1a:	bf00      	nop
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <readyUserInterface>:

unsigned char readyUserInterface(unsigned char* displayStatus,unsigned char* cursorPosition)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
	statusUserInterface(displayStatus);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f80c 	bl	8002e4c <statusUserInterface>
	resetKeyPressed();
 8002e34:	f002 fb18 	bl	8005468 <resetKeyPressed>
	resetCursorInterface(cursorPosition);
 8002e38:	6838      	ldr	r0, [r7, #0]
 8002e3a:	f000 f814 	bl	8002e66 <resetCursorInterface>
	eraseDataDisplay();
 8002e3e:	f000 ffe0 	bl	8003e02 <eraseDataDisplay>
}
 8002e42:	bf00      	nop
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <statusUserInterface>:

unsigned char statusUserInterface(unsigned char* displayStatus)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	*displayStatus = IDDLE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <resetCursorInterface>:
	HW_UPDATE_DATA(actualposition,linha);
	return actualposition;
}

unsigned char resetCursorInterface(unsigned char* cursorPosition)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
	cursorPosition[0] = 0;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
	cursorPosition[1] = 0;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3301      	adds	r3, #1
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <exportStateMachine>:
        struct dataInsert menuInsert;
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
unsigned char exportStateMachine(struct Menu* subMenu)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuExport = subMenu;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	61fb      	str	r3, [r7, #28]
    unsigned char key = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    short index = 2;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	827b      	strh	r3, [r7, #18]
    unsigned char indexTest = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	76fb      	strb	r3, [r7, #27]
    unsigned char testSamples = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	76bb      	strb	r3, [r7, #26]
    unsigned char selectedUserTest=0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	767b      	strb	r3, [r7, #25]
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    struct results* ptr_structExportResult;
    unsigned char dataVerify;
    unsigned char cursorPosition[2] = {0,0};
 8002eaa:	2300      	movs	r3, #0
 8002eac:	823b      	strh	r3, [r7, #16]
    unsigned char displayUpdateStatus = IDDLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]
    while(key != MENU)
 8002eb2:	e1a5      	b.n	8003200 <exportStateMachine+0x378>
    {
        switch(subMenuExport->menuState)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	78db      	ldrb	r3, [r3, #3]
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	f200 81a1 	bhi.w	8003200 <exportStateMachine+0x378>
 8002ebe:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <exportStateMachine+0x3c>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002ee1 	.word	0x08002ee1
 8002ec8:	08002ef1 	.word	0x08002ef1
 8002ecc:	08002f25 	.word	0x08002f25
 8002ed0:	08003095 	.word	0x08003095
 8002ed4:	08003191 	.word	0x08003191
 8002ed8:	08002fdd 	.word	0x08002fdd
 8002edc:	080031cb 	.word	0x080031cb
        {
            case IDDLE:
                subMenuExport->menuState = getNextSub(VERIFICA_COMM);
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f001 fd09 	bl	80048f8 <getNextSub>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	461a      	mov	r2, r3
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	70da      	strb	r2, [r3, #3]
            break;
 8002eee:	e187      	b.n	8003200 <exportStateMachine+0x378>

            case VERIFICA_COMM:
                //funcao para habilitar comunicacao
            	startCOMM(); //verificar se nao preciso deixar uma flag de comm no data.c para acessar o valor dela
 8002ef0:	f000 ffb1 	bl	8003e56 <startCOMM>
            	// e comparar para verificar se a comm já está ligada antes de liga-la novamente.
                updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 8002ef4:	4bc7      	ldr	r3, [pc, #796]	; (8003214 <exportStateMachine+0x38c>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	f107 030f 	add.w	r3, r7, #15
 8002efc:	2100      	movs	r1, #0
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7ff ff75 	bl	8002dee <updateUserMsg>
                subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8002f04:	2002      	movs	r0, #2
 8002f06:	f001 fcf7 	bl	80048f8 <getNextSub>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	70da      	strb	r2, [r3, #3]
                readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002f12:	f107 0210 	add.w	r2, r7, #16
 8002f16:	f107 030f 	add.w	r3, r7, #15
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff81 	bl	8002e24 <readyUserInterface>
            break;
 8002f22:	e16d      	b.n	8003200 <exportStateMachine+0x378>

            case EXPORTAR_UNITARIO:
                updateUserMsg(0,USERMSG1,exportunitUserMsg,&displayUpdateStatus);
 8002f24:	4bbc      	ldr	r3, [pc, #752]	; (8003218 <exportStateMachine+0x390>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	f107 030f 	add.w	r3, r7, #15
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7ff ff5d 	bl	8002dee <updateUserMsg>
                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8002f34:	4bb9      	ldr	r3, [pc, #740]	; (800321c <exportStateMachine+0x394>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f000 ff4d 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 8002f42:	4bb6      	ldr	r3, [pc, #728]	; (800321c <exportStateMachine+0x394>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd f900 	bl	800014c <strlen>
 8002f4c:	4bb4      	ldr	r3, [pc, #720]	; (8003220 <exportStateMachine+0x398>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	2102      	movs	r1, #2
 8002f54:	f000 ff42 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8002f58:	4bb2      	ldr	r3, [pc, #712]	; (8003224 <exportStateMachine+0x39c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2103      	movs	r1, #3
 8002f60:	2000      	movs	r0, #0
 8002f62:	f000 ff3b 	bl	8003ddc <printDataDisplay>

                key = getKeyPressed();
 8002f66:	f002 fa73 	bl	8005450 <getKeyPressed>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if(key == AVANCAR)
 8002f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f74:	2b41      	cmp	r3, #65	; 0x41
 8002f76:	d111      	bne.n	8002f9c <exportStateMachine+0x114>
                {
                	resetKeyPressed();
 8002f78:	f002 fa76 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002f7c:	f107 0210 	add.w	r2, r7, #16
 8002f80:	f107 030f 	add.w	r3, r7, #15
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff ff4c 	bl	8002e24 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_TODOS);
 8002f8c:	2005      	movs	r0, #5
 8002f8e:	f001 fcb3 	bl	80048f8 <getNextSub>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	70da      	strb	r2, [r3, #3]
 8002f9a:	e131      	b.n	8003200 <exportStateMachine+0x378>
                }

                else if(key == CONFIRMAR)
 8002f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa0:	2b43      	cmp	r3, #67	; 0x43
 8002fa2:	f040 812d 	bne.w	8003200 <exportStateMachine+0x378>
                {
                	resetKeyPressed();
 8002fa6:	f002 fa5f 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002faa:	f107 0210 	add.w	r2, r7, #16
 8002fae:	f107 030f 	add.w	r3, r7, #15
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff35 	bl	8002e24 <readyUserInterface>
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3303      	adds	r3, #3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 fcac 	bl	800491c <setSelectSub>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	705a      	strb	r2, [r3, #1]
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 8002fcc:	2003      	movs	r0, #3
 8002fce:	f001 fc93 	bl	80048f8 <getNextSub>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	70da      	strb	r2, [r3, #3]
                }
                break;
 8002fda:	e111      	b.n	8003200 <exportStateMachine+0x378>

            case EXPORTAR_TODOS:
                updateUserMsg(0,0,exportallUserMsg,&displayUpdateStatus);
 8002fdc:	4b92      	ldr	r3, [pc, #584]	; (8003228 <exportStateMachine+0x3a0>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	f107 030f 	add.w	r3, r7, #15
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7ff ff01 	bl	8002dee <updateUserMsg>
                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8002fec:	4b8b      	ldr	r3, [pc, #556]	; (800321c <exportStateMachine+0x394>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f000 fef1 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 8002ffa:	4b88      	ldr	r3, [pc, #544]	; (800321c <exportStateMachine+0x394>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd f8a4 	bl	800014c <strlen>
 8003004:	4b86      	ldr	r3, [pc, #536]	; (8003220 <exportStateMachine+0x398>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	2102      	movs	r1, #2
 800300c:	f000 fee6 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8003010:	4b84      	ldr	r3, [pc, #528]	; (8003224 <exportStateMachine+0x39c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	2103      	movs	r1, #3
 8003018:	2000      	movs	r0, #0
 800301a:	f000 fedf 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 800301e:	f002 fa17 	bl	8005450 <getKeyPressed>
 8003022:	4603      	mov	r3, r0
 8003024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if(key == AVANCAR)
 8003028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800302c:	2b41      	cmp	r3, #65	; 0x41
 800302e:	d111      	bne.n	8003054 <exportStateMachine+0x1cc>
                {
                	resetKeyPressed();
 8003030:	f002 fa1a 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003034:	f107 0210 	add.w	r2, r7, #16
 8003038:	f107 030f 	add.w	r3, r7, #15
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fef0 	bl	8002e24 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8003044:	2002      	movs	r0, #2
 8003046:	f001 fc57 	bl	80048f8 <getNextSub>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	70da      	strb	r2, [r3, #3]
 8003052:	e0d5      	b.n	8003200 <exportStateMachine+0x378>
                }

                else if(key == CONFIRMAR)
 8003054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003058:	2b43      	cmp	r3, #67	; 0x43
 800305a:	f040 80d1 	bne.w	8003200 <exportStateMachine+0x378>
                {
                	resetKeyPressed();
 800305e:	f002 fa03 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003062:	f107 0210 	add.w	r2, r7, #16
 8003066:	f107 030f 	add.w	r3, r7, #15
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fed9 	bl	8002e24 <readyUserInterface>
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3303      	adds	r3, #3
 8003076:	4618      	mov	r0, r3
 8003078:	f001 fc50 	bl	800491c <setSelectSub>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	705a      	strb	r2, [r3, #1]
                    subMenuExport->menuState = getNextSub(PROCESS_TODOS);
 8003084:	2006      	movs	r0, #6
 8003086:	f001 fc37 	bl	80048f8 <getNextSub>
 800308a:	4603      	mov	r3, r0
 800308c:	461a      	mov	r2, r3
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	70da      	strb	r2, [r3, #3]
                }
                break;
 8003092:	e0b5      	b.n	8003200 <exportStateMachine+0x378>


            case NUM_TESTE_EXPORT:
                updateUserMsg(0,USERMSG1,consultTestUserMsg,&displayUpdateStatus);
 8003094:	4b65      	ldr	r3, [pc, #404]	; (800322c <exportStateMachine+0x3a4>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	f107 030f 	add.w	r3, r7, #15
 800309c:	2100      	movs	r1, #0
 800309e:	2000      	movs	r0, #0
 80030a0:	f7ff fea5 	bl	8002dee <updateUserMsg>
                ptr_exportTestString = getNumTestString();
 80030a4:	f7ff fba8 	bl	80027f8 <getNumTestString>
 80030a8:	6238      	str	r0, [r7, #32]
                printDataDisplay(0,USERMSG2,ptr_exportTestString);
 80030aa:	6a3a      	ldr	r2, [r7, #32]
 80030ac:	2101      	movs	r1, #1
 80030ae:	2000      	movs	r0, #0
 80030b0:	f000 fe94 	bl	8003ddc <printDataDisplay>
                updateDataDisplay(index,USERMSG2);
 80030b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80030b8:	2101      	movs	r1, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fea8 	bl	8003e10 <updateDataDisplay>

                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 80030c0:	4b56      	ldr	r3, [pc, #344]	; (800321c <exportStateMachine+0x394>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	2102      	movs	r1, #2
 80030c8:	2000      	movs	r0, #0
 80030ca:	f000 fe87 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 80030ce:	4b53      	ldr	r3, [pc, #332]	; (800321c <exportStateMachine+0x394>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd f83a 	bl	800014c <strlen>
 80030d8:	4b51      	ldr	r3, [pc, #324]	; (8003220 <exportStateMachine+0x398>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	2102      	movs	r1, #2
 80030e0:	f000 fe7c 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 80030e4:	4b4f      	ldr	r3, [pc, #316]	; (8003224 <exportStateMachine+0x39c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	2103      	movs	r1, #3
 80030ec:	2000      	movs	r0, #0
 80030ee:	f000 fe75 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);                key = getKeyPressed();
 80030f2:	4b4c      	ldr	r3, [pc, #304]	; (8003224 <exportStateMachine+0x39c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd f828 	bl	800014c <strlen>
 80030fc:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <exportStateMachine+0x3a8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	2103      	movs	r1, #3
 8003104:	f000 fe6a 	bl	8003ddc <printDataDisplay>
 8003108:	f002 f9a2 	bl	8005450 <getKeyPressed>
 800310c:	4603      	mov	r3, r0
 800310e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if(key == INSERIR)
 8003112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003116:	2b49      	cmp	r3, #73	; 0x49
 8003118:	d10e      	bne.n	8003138 <exportStateMachine+0x2b0>
                {
                	resetKeyPressed();
 800311a:	f002 f9a5 	bl	8005468 <resetKeyPressed>
                    setUserNumTest(&index);
 800311e:	f107 0312 	add.w	r3, r7, #18
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fd0d 	bl	8002b42 <setUserNumTest>
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 8003128:	2003      	movs	r0, #3
 800312a:	f001 fbe5 	bl	80048f8 <getNextSub>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	70da      	strb	r2, [r3, #3]
 8003136:	e063      	b.n	8003200 <exportStateMachine+0x378>
                }
                else if(key == AVANCAR)
 8003138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800313c:	2b41      	cmp	r3, #65	; 0x41
 800313e:	d108      	bne.n	8003152 <exportStateMachine+0x2ca>
                {
                	resetKeyPressed();
 8003140:	f002 f992 	bl	8005468 <resetKeyPressed>
                    indexChange(&index,2);
 8003144:	f107 0312 	add.w	r3, r7, #18
 8003148:	2102      	movs	r1, #2
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fa39 	bl	80025c2 <indexChange>
 8003150:	e056      	b.n	8003200 <exportStateMachine+0x378>
                }
                else if(key == CONFIRMAR)
 8003152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003156:	2b43      	cmp	r3, #67	; 0x43
 8003158:	d152      	bne.n	8003200 <exportStateMachine+0x378>
                {
                	resetKeyPressed();
 800315a:	f002 f985 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800315e:	f107 0210 	add.w	r2, r7, #16
 8003162:	f107 030f 	add.w	r3, r7, #15
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fe5b 	bl	8002e24 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(PROCESS_UNITARIO);
 800316e:	2004      	movs	r0, #4
 8003170:	f001 fbc2 	bl	80048f8 <getNextSub>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	70da      	strb	r2, [r3, #3]
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3303      	adds	r3, #3
 8003180:	4618      	mov	r0, r3
 8003182:	f001 fbcb 	bl	800491c <setSelectSub>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	705a      	strb	r2, [r3, #1]
                }

                break;
 800318e:	e037      	b.n	8003200 <exportStateMachine+0x378>

                case PROCESS_UNITARIO:
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8003190:	4b28      	ldr	r3, [pc, #160]	; (8003234 <exportStateMachine+0x3ac>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	f107 030f 	add.w	r3, r7, #15
 8003198:	2100      	movs	r1, #0
 800319a:	2000      	movs	r0, #0
 800319c:	f7ff fe27 	bl	8002dee <updateUserMsg>
                    selectedUserTest = stringToInt(ptr_exportTestString);
 80031a0:	6a38      	ldr	r0, [r7, #32]
 80031a2:	f7ff f9d3 	bl	800254c <stringToInt>
 80031a6:	4603      	mov	r3, r0
 80031a8:	767b      	strb	r3, [r7, #25]
                    ptr_structExportResult = getUserResultData(selectedUserTest);
 80031aa:	7e7b      	ldrb	r3, [r7, #25]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f82d 	bl	800220c <getUserResultData>
 80031b2:	6178      	str	r0, [r7, #20]

                   //ESSE FOR � S� PARA TESTE NO CONSOLE, AO INVES DESSE MONTE DE "PRINT", COLOCAREI FU��O PARA ENVIAR BT
//                    transmissionCOMM();
                    //Acessa os dados referente ao Teste e envia apenas o selecionado por BT
                subMenuExport->menuState = getNextSub(IDDLE);
 80031b4:	2000      	movs	r0, #0
 80031b6:	f001 fb9f 	bl	80048f8 <getNextSub>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461a      	mov	r2, r3
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	70da      	strb	r2, [r3, #3]
                key = MENU;
 80031c2:	234d      	movs	r3, #77	; 0x4d
 80031c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80031c8:	e01a      	b.n	8003200 <exportStateMachine+0x378>

                case PROCESS_TODOS: //
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 80031ca:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <exportStateMachine+0x3ac>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	f107 030f 	add.w	r3, r7, #15
 80031d2:	2100      	movs	r1, #0
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7ff fe0a 	bl	8002dee <updateUserMsg>

                    subMenuExport->menuState = getNextSub(IDDLE);
 80031da:	2000      	movs	r0, #0
 80031dc:	f001 fb8c 	bl	80048f8 <getNextSub>
 80031e0:	4603      	mov	r3, r0
 80031e2:	461a      	mov	r2, r3
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	70da      	strb	r2, [r3, #3]
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80031e8:	f107 0210 	add.w	r2, r7, #16
 80031ec:	f107 030f 	add.w	r3, r7, #15
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fe16 	bl	8002e24 <readyUserInterface>
                    key = MENU;
 80031f8:	234d      	movs	r3, #77	; 0x4d
 80031fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    break;
 80031fe:	bf00      	nop
    while(key != MENU)
 8003200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003204:	2b4d      	cmp	r3, #77	; 0x4d
 8003206:	f47f ae55 	bne.w	8002eb4 <exportStateMachine+0x2c>
        }
    }

}
 800320a:	bf00      	nop
 800320c:	4618      	mov	r0, r3
 800320e:	3728      	adds	r7, #40	; 0x28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20000030 	.word	0x20000030
 8003218:	200000b0 	.word	0x200000b0
 800321c:	200000c8 	.word	0x200000c8
 8003220:	200000d0 	.word	0x200000d0
 8003224:	200000d4 	.word	0x200000d4
 8003228:	200000b4 	.word	0x200000b4
 800322c:	2000006c 	.word	0x2000006c
 8003230:	200000cc 	.word	0x200000cc
 8003234:	20000074 	.word	0x20000074

08003238 <initStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char initStateMachine(struct Menu* subMenu)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b09e      	sub	sp, #120	; 0x78
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuIniciar = subMenu;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	673b      	str	r3, [r7, #112]	; 0x70
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 8003244:	f7fe ff64 	bl	8002110 <getUserConfigStruct>
 8003248:	66f8      	str	r0, [r7, #108]	; 0x6c
    unsigned char key = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    short insertColumn = 7;
 8003250:	2307      	movs	r3, #7
 8003252:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    struct tm myTime;
    struct tm* userTimeStruct = &myTime;
 8003256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800325a:	66bb      	str	r3, [r7, #104]	; 0x68
    unsigned int* ptr_vooTimeString;
    unsigned int* ptr_alturaString;
    unsigned int* ptr_potString;


    unsigned char displayUpdateStatus = IDDLE;
 800325c:	2300      	movs	r3, #0
 800325e:	72fb      	strb	r3, [r7, #11]
    unsigned char cursorPosition[2] = {0,0};
 8003260:	2300      	movs	r3, #0
 8003262:	813b      	strh	r3, [r7, #8]
//    unsigned char* ptr_uiVooTime;
//    unsigned char* ptr_ucAltDistance;
//    struct results result[TEST_SIZE]; //verificar se vou usar o endere�o de data.c assim como fiz com a estrutura de configuracao

    unsigned char indexTest;
    unsigned char readingStatus = IDDLE;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    unsigned char selectedUserTest = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    unsigned char testSamples = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75


    unsigned char startTapete,readingState;


    while(key != MENU)
 8003276:	f000 bd84 	b.w	8003d82 <initStateMachine+0xb4a>
    {
        switch(subMenuIniciar->menuState)
 800327a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800327c:	78db      	ldrb	r3, [r3, #3]
 800327e:	2b0c      	cmp	r3, #12
 8003280:	f200 857f 	bhi.w	8003d82 <initStateMachine+0xb4a>
 8003284:	a201      	add	r2, pc, #4	; (adr r2, 800328c <initStateMachine+0x54>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032c1 	.word	0x080032c1
 8003290:	080032d3 	.word	0x080032d3
 8003294:	0800339f 	.word	0x0800339f
 8003298:	0800348b 	.word	0x0800348b
 800329c:	080035e1 	.word	0x080035e1
 80032a0:	080036fd 	.word	0x080036fd
 80032a4:	08003819 	.word	0x08003819
 80032a8:	080038ad 	.word	0x080038ad
 80032ac:	08003945 	.word	0x08003945
 80032b0:	080039b9 	.word	0x080039b9
 80032b4:	08003a5b 	.word	0x08003a5b
 80032b8:	08003bd1 	.word	0x08003bd1
 80032bc:	08003ccd 	.word	0x08003ccd
        {
            case IDDLE:
                subMenuIniciar->menuState = getNextSub(COMM_OFF);
 80032c0:	2001      	movs	r0, #1
 80032c2:	f001 fb19 	bl	80048f8 <getNextSub>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032cc:	70da      	strb	r2, [r3, #3]
                //RESET
            break;
 80032ce:	f000 bd58 	b.w	8003d82 <initStateMachine+0xb4a>

            case COMM_OFF:
                updateUserMsg(0,USERMSG1,noTransmissionMsg,&displayUpdateStatus);
 80032d2:	4bba      	ldr	r3, [pc, #744]	; (80035bc <initStateMachine+0x384>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	f107 030b 	add.w	r3, r7, #11
 80032da:	2100      	movs	r1, #0
 80032dc:	2000      	movs	r0, #0
 80032de:	f7ff fd86 	bl	8002dee <updateUserMsg>
                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 80032e2:	4bb7      	ldr	r3, [pc, #732]	; (80035c0 <initStateMachine+0x388>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	2102      	movs	r1, #2
 80032ea:	2000      	movs	r0, #0
 80032ec:	f000 fd76 	bl	8003ddc <printDataDisplay>
                printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 80032f0:	4bb3      	ldr	r3, [pc, #716]	; (80035c0 <initStateMachine+0x388>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fc ff29 	bl	800014c <strlen>
 80032fa:	4603      	mov	r3, r0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	4ab1      	ldr	r2, [pc, #708]	; (80035c4 <initStateMachine+0x38c>)
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	2102      	movs	r1, #2
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fd69 	bl	8003ddc <printDataDisplay>
                printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 800330a:	4baf      	ldr	r3, [pc, #700]	; (80035c8 <initStateMachine+0x390>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	2103      	movs	r1, #3
 8003312:	2000      	movs	r0, #0
 8003314:	f000 fd62 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 8003318:	f002 f89a 	bl	8005450 <getKeyPressed>
 800331c:	4603      	mov	r3, r0
 800331e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                if(key == AVANCAR)
 8003322:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003326:	2b41      	cmp	r3, #65	; 0x41
 8003328:	d112      	bne.n	8003350 <initStateMachine+0x118>
                {
                	resetKeyPressed();
 800332a:	f002 f89d 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800332e:	f107 0208 	add.w	r2, r7, #8
 8003332:	f107 030b 	add.w	r3, r7, #11
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fd73 	bl	8002e24 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(COMM_ON);
 800333e:	2002      	movs	r0, #2
 8003340:	f001 fada 	bl	80048f8 <getNextSub>
 8003344:	4603      	mov	r3, r0
 8003346:	461a      	mov	r2, r3
 8003348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800334a:	70da      	strb	r2, [r3, #3]
 800334c:	f000 bd19 	b.w	8003d82 <initStateMachine+0xb4a>
                }
                else if(key == CONFIRMAR)
 8003350:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003354:	2b43      	cmp	r3, #67	; 0x43
 8003356:	f040 8514 	bne.w	8003d82 <initStateMachine+0xb4a>
                {
                	resetKeyPressed();
 800335a:	f002 f885 	bl	8005468 <resetKeyPressed>
                    stopCOMM();
 800335e:	f000 fd89 	bl	8003e74 <stopCOMM>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003362:	f107 0208 	add.w	r2, r7, #8
 8003366:	f107 030b 	add.w	r3, r7, #11
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fd59 	bl	8002e24 <readyUserInterface>
                    ptr_userConfiguration->userCommConfig = COMM_OFF;
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 800337a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800337c:	3303      	adds	r3, #3
 800337e:	4618      	mov	r0, r3
 8003380:	f001 facc 	bl	800491c <setSelectSub>
 8003384:	4603      	mov	r3, r0
 8003386:	461a      	mov	r2, r3
 8003388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800338a:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 800338c:	2003      	movs	r0, #3
 800338e:	f001 fab3 	bl	80048f8 <getNextSub>
 8003392:	4603      	mov	r3, r0
 8003394:	461a      	mov	r2, r3
 8003396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003398:	70da      	strb	r2, [r3, #3]
                }
            break;
 800339a:	f000 bcf2 	b.w	8003d82 <initStateMachine+0xb4a>

            case COMM_ON:
				updateUserMsg(0,0,yesTransmissionMsg,&displayUpdateStatus);
 800339e:	4b8b      	ldr	r3, [pc, #556]	; (80035cc <initStateMachine+0x394>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	f107 030b 	add.w	r3, r7, #11
 80033a6:	2100      	movs	r1, #0
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7ff fd20 	bl	8002dee <updateUserMsg>
				printDataDisplay(0,INSERTMSG,avancarUserMsg);
 80033ae:	4b84      	ldr	r3, [pc, #528]	; (80035c0 <initStateMachine+0x388>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	2102      	movs	r1, #2
 80033b6:	2000      	movs	r0, #0
 80033b8:	f000 fd10 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 80033bc:	4b80      	ldr	r3, [pc, #512]	; (80035c0 <initStateMachine+0x388>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fc fec3 	bl	800014c <strlen>
 80033c6:	4603      	mov	r3, r0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	4a7e      	ldr	r2, [pc, #504]	; (80035c4 <initStateMachine+0x38c>)
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	2102      	movs	r1, #2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fd03 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 80033d6:	4b7c      	ldr	r3, [pc, #496]	; (80035c8 <initStateMachine+0x390>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	2103      	movs	r1, #3
 80033de:	2000      	movs	r0, #0
 80033e0:	f000 fcfc 	bl	8003ddc <printDataDisplay>
				key = getKeyPressed();
 80033e4:	f002 f834 	bl	8005450 <getKeyPressed>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                if(key == AVANCAR)
 80033ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80033f2:	2b41      	cmp	r3, #65	; 0x41
 80033f4:	d112      	bne.n	800341c <initStateMachine+0x1e4>
				{
                	resetKeyPressed();
 80033f6:	f002 f837 	bl	8005468 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 80033fa:	f107 0208 	add.w	r2, r7, #8
 80033fe:	f107 030b 	add.w	r3, r7, #11
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fd0d 	bl	8002e24 <readyUserInterface>
					subMenuIniciar->menuState = getNextSub(COMM_OFF);
 800340a:	2001      	movs	r0, #1
 800340c:	f001 fa74 	bl	80048f8 <getNextSub>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003416:	70da      	strb	r2, [r3, #3]
 8003418:	f000 bcb3 	b.w	8003d82 <initStateMachine+0xb4a>
				}
                else if(key == CONFIRMAR)
 800341c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003420:	2b43      	cmp	r3, #67	; 0x43
 8003422:	f040 84ae 	bne.w	8003d82 <initStateMachine+0xb4a>
                {
                	resetKeyPressed();
 8003426:	f002 f81f 	bl	8005468 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 800342a:	f107 0208 	add.w	r2, r7, #8
 800342e:	f107 030b 	add.w	r3, r7, #11
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fcf5 	bl	8002e24 <readyUserInterface>
                    startCOMM();
 800343a:	f000 fd0c 	bl	8003e56 <startCOMM>
                	updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 800343e:	4b64      	ldr	r3, [pc, #400]	; (80035d0 <initStateMachine+0x398>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	f107 030b 	add.w	r3, r7, #11
 8003446:	2100      	movs	r1, #0
 8003448:	2000      	movs	r0, #0
 800344a:	f7ff fcd0 	bl	8002dee <updateUserMsg>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 800344e:	f107 0208 	add.w	r2, r7, #8
 8003452:	f107 030b 	add.w	r3, r7, #11
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fce3 	bl	8002e24 <readyUserInterface>
                     ptr_userConfiguration->userCommConfig = COMM_ON;
 800345e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003460:	2202      	movs	r2, #2
 8003462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003468:	3303      	adds	r3, #3
 800346a:	4618      	mov	r0, r3
 800346c:	f001 fa56 	bl	800491c <setSelectSub>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003476:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 8003478:	2003      	movs	r0, #3
 800347a:	f001 fa3d 	bl	80048f8 <getNextSub>
 800347e:	4603      	mov	r3, r0
 8003480:	461a      	mov	r2, r3
 8003482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003484:	70da      	strb	r2, [r3, #3]
                }
                break;
 8003486:	f000 bc7c 	b.w	8003d82 <initStateMachine+0xb4a>

            case TEMPO_READ:
                updateUserMsg(0,USERMSG1,timeUserMsg,&displayUpdateStatus);
 800348a:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <initStateMachine+0x39c>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	f107 030b 	add.w	r3, r7, #11
 8003492:	2100      	movs	r1, #0
 8003494:	2000      	movs	r0, #0
 8003496:	f7ff fcaa 	bl	8002dee <updateUserMsg>

                userTimeStruct = getTimeStruct();
 800349a:	f7fe fdb7 	bl	800200c <getTimeStruct>
 800349e:	66b8      	str	r0, [r7, #104]	; 0x68
                strftime(userTimeString, sizeof(userTimeString), "%H:%M:%S", userTimeStruct);
 80034a0:	f107 0018 	add.w	r0, r7, #24
 80034a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034a6:	4a4c      	ldr	r2, [pc, #304]	; (80035d8 <initStateMachine+0x3a0>)
 80034a8:	2109      	movs	r1, #9
 80034aa:	f007 f861 	bl	800a570 <strftime>
                printDataDisplay(0,USERMSG2,userTimeString);
 80034ae:	f107 0318 	add.w	r3, r7, #24
 80034b2:	461a      	mov	r2, r3
 80034b4:	2101      	movs	r1, #1
 80034b6:	2000      	movs	r0, #0
 80034b8:	f000 fc90 	bl	8003ddc <printDataDisplay>
                updateDataDisplay(insertColumn,USERMSG2);
 80034bc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2101      	movs	r1, #1
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fca3 	bl	8003e10 <updateDataDisplay>

                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 80034ca:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <initStateMachine+0x388>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	2102      	movs	r1, #2
 80034d2:	2000      	movs	r0, #0
 80034d4:	f000 fc82 	bl	8003ddc <printDataDisplay>
                printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 80034d8:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <initStateMachine+0x388>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fc fe35 	bl	800014c <strlen>
 80034e2:	4603      	mov	r3, r0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	4a37      	ldr	r2, [pc, #220]	; (80035c4 <initStateMachine+0x38c>)
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	2102      	movs	r1, #2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fc75 	bl	8003ddc <printDataDisplay>
                printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 80034f2:	4b35      	ldr	r3, [pc, #212]	; (80035c8 <initStateMachine+0x390>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	2103      	movs	r1, #3
 80034fa:	2000      	movs	r0, #0
 80034fc:	f000 fc6e 	bl	8003ddc <printDataDisplay>
                printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8003500:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <initStateMachine+0x390>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7fc fe21 	bl	800014c <strlen>
 800350a:	4603      	mov	r3, r0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	4a33      	ldr	r2, [pc, #204]	; (80035dc <initStateMachine+0x3a4>)
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	2103      	movs	r1, #3
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fc61 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 800351a:	f001 ff99 	bl	8005450 <getKeyPressed>
 800351e:	4603      	mov	r3, r0
 8003520:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                if(key == INSERIR)
 8003524:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003528:	2b49      	cmp	r3, #73	; 0x49
 800352a:	d10f      	bne.n	800354c <initStateMachine+0x314>
                {
                	resetKeyPressed();
 800352c:	f001 ff9c 	bl	8005468 <resetKeyPressed>
                    setUserTime(&insertColumn);
 8003530:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fb89 	bl	8002c4c <setUserTime>
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 800353a:	2003      	movs	r0, #3
 800353c:	f001 f9dc 	bl	80048f8 <getNextSub>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003546:	70da      	strb	r2, [r3, #3]
 8003548:	f000 bc1b 	b.w	8003d82 <initStateMachine+0xb4a>
                }
                else if (key == AVANCAR)
 800354c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003550:	2b41      	cmp	r3, #65	; 0x41
 8003552:	d109      	bne.n	8003568 <initStateMachine+0x330>
                {
                	resetKeyPressed();
 8003554:	f001 ff88 	bl	8005468 <resetKeyPressed>
                    indexColumn(&insertColumn,7);
 8003558:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 800355c:	2107      	movs	r1, #7
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe ff8e 	bl	8002480 <indexColumn>
 8003564:	f000 bc0d 	b.w	8003d82 <initStateMachine+0xb4a>
                }
                else if(key == CONFIRMAR)
 8003568:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800356c:	2b43      	cmp	r3, #67	; 0x43
 800356e:	f040 8408 	bne.w	8003d82 <initStateMachine+0xb4a>
                {
                	resetKeyPressed();
 8003572:	f001 ff79 	bl	8005468 <resetKeyPressed>
                	insertColumn = 4; //colocar um define talvez -> definicao de caracteres no display massa e overmass
 8003576:	2304      	movs	r3, #4
 8003578:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800357c:	f107 0208 	add.w	r2, r7, #8
 8003580:	f107 030b 	add.w	r3, r7, #11
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fc4c 	bl	8002e24 <readyUserInterface>
					ptr_userConfiguration->userTime = milisecondsTime(userTimeStruct);
 800358c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800358e:	f7fe ffb2 	bl	80024f6 <milisecondsTime>
 8003592:	4603      	mov	r3, r0
 8003594:	461a      	mov	r2, r3
 8003596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003598:	605a      	str	r2, [r3, #4]
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 800359a:	2004      	movs	r0, #4
 800359c:	f001 f9ac 	bl	80048f8 <getNextSub>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035a6:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80035a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035aa:	3303      	adds	r3, #3
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 f9b5 	bl	800491c <setSelectSub>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b8:	705a      	strb	r2, [r3, #1]
                }
                break;
 80035ba:	e3e2      	b.n	8003d82 <initStateMachine+0xb4a>
 80035bc:	20000028 	.word	0x20000028
 80035c0:	200000c8 	.word	0x200000c8
 80035c4:	200000d0 	.word	0x200000d0
 80035c8:	200000d4 	.word	0x200000d4
 80035cc:	2000002c 	.word	0x2000002c
 80035d0:	20000030 	.word	0x20000030
 80035d4:	20000034 	.word	0x20000034
 80035d8:	0800c090 	.word	0x0800c090
 80035dc:	200000cc 	.word	0x200000cc

            case MASSA_READ:
                 updateUserMsg(0,USERMSG1,massUserMsg,&displayUpdateStatus);
 80035e0:	4bcf      	ldr	r3, [pc, #828]	; (8003920 <initStateMachine+0x6e8>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	f107 030b 	add.w	r3, r7, #11
 80035e8:	2100      	movs	r1, #0
 80035ea:	2000      	movs	r0, #0
 80035ec:	f7ff fbff 	bl	8002dee <updateUserMsg>
                 ptr_massString = getMassString();
 80035f0:	f7ff f8b6 	bl	8002760 <getMassString>
 80035f4:	4603      	mov	r3, r0
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
                 printDataDisplay(0,USERMSG2,ptr_massString);
 80035f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035fa:	2101      	movs	r1, #1
 80035fc:	2000      	movs	r0, #0
 80035fe:	f000 fbed 	bl	8003ddc <printDataDisplay>
                 updateDataDisplay(insertColumn,1);
 8003602:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fc00 	bl	8003e10 <updateDataDisplay>
                 printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8003610:	4bc4      	ldr	r3, [pc, #784]	; (8003924 <initStateMachine+0x6ec>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	2102      	movs	r1, #2
 8003618:	2000      	movs	r0, #0
 800361a:	f000 fbdf 	bl	8003ddc <printDataDisplay>
				 printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 800361e:	4bc1      	ldr	r3, [pc, #772]	; (8003924 <initStateMachine+0x6ec>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc fd92 	bl	800014c <strlen>
 8003628:	4603      	mov	r3, r0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	4abe      	ldr	r2, [pc, #760]	; (8003928 <initStateMachine+0x6f0>)
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	2102      	movs	r1, #2
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fbd2 	bl	8003ddc <printDataDisplay>
				 printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8003638:	4bbc      	ldr	r3, [pc, #752]	; (800392c <initStateMachine+0x6f4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	2103      	movs	r1, #3
 8003640:	2000      	movs	r0, #0
 8003642:	f000 fbcb 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8003646:	4bb9      	ldr	r3, [pc, #740]	; (800392c <initStateMachine+0x6f4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc fd7e 	bl	800014c <strlen>
 8003650:	4603      	mov	r3, r0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	4ab6      	ldr	r2, [pc, #728]	; (8003930 <initStateMachine+0x6f8>)
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	2103      	movs	r1, #3
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fbbe 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 8003660:	f001 fef6 	bl	8005450 <getKeyPressed>
 8003664:	4603      	mov	r3, r0
 8003666:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                if(key == INSERIR)
 800366a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800366e:	2b49      	cmp	r3, #73	; 0x49
 8003670:	d10e      	bne.n	8003690 <initStateMachine+0x458>
                {
                	resetKeyPressed();
 8003672:	f001 fef9 	bl	8005468 <resetKeyPressed>
                    setUserMass(&insertColumn); //criar variavel adicional para separar insertcolumn
 8003676:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fa19 	bl	8002ab2 <setUserMass>
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 8003680:	2004      	movs	r0, #4
 8003682:	f001 f939 	bl	80048f8 <getNextSub>
 8003686:	4603      	mov	r3, r0
 8003688:	461a      	mov	r2, r3
 800368a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800368c:	70da      	strb	r2, [r3, #3]
 800368e:	e378      	b.n	8003d82 <initStateMachine+0xb4a>
                }
                else if(key == AVANCAR)
 8003690:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003694:	2b41      	cmp	r3, #65	; 0x41
 8003696:	d107      	bne.n	80036a8 <initStateMachine+0x470>
                {
                	resetKeyPressed();
 8003698:	f001 fee6 	bl	8005468 <resetKeyPressed>
                    indexMass(&insertColumn);
 800369c:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe ff65 	bl	8002570 <indexMass>
 80036a6:	e36c      	b.n	8003d82 <initStateMachine+0xb4a>
                }
                else if(key == CONFIRMAR)
 80036a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80036ac:	2b43      	cmp	r3, #67	; 0x43
 80036ae:	f040 8368 	bne.w	8003d82 <initStateMachine+0xb4a>
                {
                	resetKeyPressed();
 80036b2:	f001 fed9 	bl	8005468 <resetKeyPressed>
                	insertColumn = 4;
 80036b6:	2304      	movs	r3, #4
 80036b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80036bc:	f107 0208 	add.w	r2, r7, #8
 80036c0:	f107 030b 	add.w	r3, r7, #11
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fbac 	bl	8002e24 <readyUserInterface>
                    ptr_userConfiguration->userMass= stringToInt(ptr_massString);
 80036cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80036ce:	f7fe ff3d 	bl	800254c <stringToInt>
 80036d2:	4603      	mov	r3, r0
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d8:	721a      	strb	r2, [r3, #8]
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 80036da:	2005      	movs	r0, #5
 80036dc:	f001 f90c 	bl	80048f8 <getNextSub>
 80036e0:	4603      	mov	r3, r0
 80036e2:	461a      	mov	r2, r3
 80036e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036e6:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80036e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036ea:	3303      	adds	r3, #3
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 f915 	bl	800491c <setSelectSub>
 80036f2:	4603      	mov	r3, r0
 80036f4:	461a      	mov	r2, r3
 80036f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036f8:	705a      	strb	r2, [r3, #1]
                }
                break;
 80036fa:	e342      	b.n	8003d82 <initStateMachine+0xb4a>

            case SOBREC_READ:
                updateUserMsg(0,USERMSG1,overmassUserMsg,&displayUpdateStatus);
 80036fc:	4b8d      	ldr	r3, [pc, #564]	; (8003934 <initStateMachine+0x6fc>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	f107 030b 	add.w	r3, r7, #11
 8003704:	2100      	movs	r1, #0
 8003706:	2000      	movs	r0, #0
 8003708:	f7ff fb71 	bl	8002dee <updateUserMsg>
                ptr_overMassString = getOverMassString();
 800370c:	f7ff f84e 	bl	80027ac <getOverMassString>
 8003710:	4603      	mov	r3, r0
 8003712:	653b      	str	r3, [r7, #80]	; 0x50
                printDataDisplay(0,USERMSG2,ptr_overMassString);
 8003714:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003716:	2101      	movs	r1, #1
 8003718:	2000      	movs	r0, #0
 800371a:	f000 fb5f 	bl	8003ddc <printDataDisplay>
                updateDataDisplay(insertColumn,1);
 800371e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2101      	movs	r1, #1
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fb72 	bl	8003e10 <updateDataDisplay>

                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 800372c:	4b7d      	ldr	r3, [pc, #500]	; (8003924 <initStateMachine+0x6ec>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	2102      	movs	r1, #2
 8003734:	2000      	movs	r0, #0
 8003736:	f000 fb51 	bl	8003ddc <printDataDisplay>
				 printDataDisplay(strlen(avancarUserMsg),INSERTMSG,menuUserMsg);
 800373a:	4b7a      	ldr	r3, [pc, #488]	; (8003924 <initStateMachine+0x6ec>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7fc fd04 	bl	800014c <strlen>
 8003744:	4603      	mov	r3, r0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	4a77      	ldr	r2, [pc, #476]	; (8003928 <initStateMachine+0x6f0>)
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	2102      	movs	r1, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fb44 	bl	8003ddc <printDataDisplay>
				 printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8003754:	4b75      	ldr	r3, [pc, #468]	; (800392c <initStateMachine+0x6f4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	2103      	movs	r1, #3
 800375c:	2000      	movs	r0, #0
 800375e:	f000 fb3d 	bl	8003ddc <printDataDisplay>
				printDataDisplay(strlen(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8003762:	4b72      	ldr	r3, [pc, #456]	; (800392c <initStateMachine+0x6f4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fc fcf0 	bl	800014c <strlen>
 800376c:	4603      	mov	r3, r0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	4a6f      	ldr	r2, [pc, #444]	; (8003930 <initStateMachine+0x6f8>)
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	2103      	movs	r1, #3
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fb30 	bl	8003ddc <printDataDisplay>

                key = getKeyPressed();
 800377c:	f001 fe68 	bl	8005450 <getKeyPressed>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                if(key == INSERIR)
 8003786:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800378a:	2b49      	cmp	r3, #73	; 0x49
 800378c:	d10e      	bne.n	80037ac <initStateMachine+0x574>
                {
                	resetKeyPressed();
 800378e:	f001 fe6b 	bl	8005468 <resetKeyPressed>
                    setUserOverMass(&insertColumn);
 8003792:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff f9af 	bl	8002afa <setUserOverMass>
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 800379c:	2005      	movs	r0, #5
 800379e:	f001 f8ab 	bl	80048f8 <getNextSub>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a8:	70da      	strb	r2, [r3, #3]
 80037aa:	e2ea      	b.n	8003d82 <initStateMachine+0xb4a>
                }
                else if(key == AVANCAR)
 80037ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80037b0:	2b41      	cmp	r3, #65	; 0x41
 80037b2:	d107      	bne.n	80037c4 <initStateMachine+0x58c>
                {
                	resetKeyPressed();
 80037b4:	f001 fe58 	bl	8005468 <resetKeyPressed>
                    indexMass(&insertColumn);
 80037b8:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe fed7 	bl	8002570 <indexMass>
 80037c2:	e2de      	b.n	8003d82 <initStateMachine+0xb4a>
                }
                else if(key == CONFIRMAR)
 80037c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80037c8:	2b43      	cmp	r3, #67	; 0x43
 80037ca:	f040 82da 	bne.w	8003d82 <initStateMachine+0xb4a>
                {
                	resetKeyPressed();
 80037ce:	f001 fe4b 	bl	8005468 <resetKeyPressed>
                	insertColumn = 7; //definicao de caracteres para TIME
 80037d2:	2307      	movs	r3, #7
 80037d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80037d8:	f107 0208 	add.w	r2, r7, #8
 80037dc:	f107 030b 	add.w	r3, r7, #11
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fb1e 	bl	8002e24 <readyUserInterface>
                    ptr_userConfiguration->userOverMass= stringToInt(ptr_overMassString);
 80037e8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80037ea:	f7fe feaf 	bl	800254c <stringToInt>
 80037ee:	4603      	mov	r3, r0
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f4:	725a      	strb	r2, [r3, #9]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80037f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f8:	3303      	adds	r3, #3
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 f88e 	bl	800491c <setSelectSub>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003806:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(START);
 8003808:	2006      	movs	r0, #6
 800380a:	f001 f875 	bl	80048f8 <getNextSub>
 800380e:	4603      	mov	r3, r0
 8003810:	461a      	mov	r2, r3
 8003812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003814:	70da      	strb	r2, [r3, #3]
                }
                break;
 8003816:	e2b4      	b.n	8003d82 <initStateMachine+0xb4a>

            case START:
                setInsertData(ptr_userConfiguration);
 8003818:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800381a:	f001 f893 	bl	8004944 <setInsertData>
                updateUserMsg(0,USERMSG1,startreadUserMsg,&displayUpdateStatus);
 800381e:	4b46      	ldr	r3, [pc, #280]	; (8003938 <initStateMachine+0x700>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	f107 030b 	add.w	r3, r7, #11
 8003826:	2100      	movs	r1, #0
 8003828:	2000      	movs	r0, #0
 800382a:	f7ff fae0 	bl	8002dee <updateUserMsg>
                printDataDisplay(0,USERMSG2,userTimeString);
 800382e:	f107 0318 	add.w	r3, r7, #24
 8003832:	461a      	mov	r2, r3
 8003834:	2101      	movs	r1, #1
 8003836:	2000      	movs	r0, #0
 8003838:	f000 fad0 	bl	8003ddc <printDataDisplay>
                printDataDisplay(0,INSERTMSG,menuUserMsg);
 800383c:	4b3a      	ldr	r3, [pc, #232]	; (8003928 <initStateMachine+0x6f0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	2102      	movs	r1, #2
 8003844:	2000      	movs	r0, #0
 8003846:	f000 fac9 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 800384a:	4b38      	ldr	r3, [pc, #224]	; (800392c <initStateMachine+0x6f4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	2103      	movs	r1, #3
 8003852:	2000      	movs	r0, #0
 8003854:	f000 fac2 	bl	8003ddc <printDataDisplay>


                key = getKeyPressed();
 8003858:	f001 fdfa 	bl	8005450 <getKeyPressed>
 800385c:	4603      	mov	r3, r0
 800385e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                if(key == CONFIRMAR)
 8003862:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003866:	2b43      	cmp	r3, #67	; 0x43
 8003868:	f040 828b 	bne.w	8003d82 <initStateMachine+0xb4a>
                {
                	resetKeyPressed();
 800386c:	f001 fdfc 	bl	8005468 <resetKeyPressed>
                    indexTest = getResultTestNumber();
 8003870:	f7fe fcde 	bl	8002230 <getResultTestNumber>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800387a:	f107 0208 	add.w	r2, r7, #8
 800387e:	f107 030b 	add.w	r3, r7, #11
 8003882:	4611      	mov	r1, r2
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff facd 	bl	8002e24 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(READING);
 800388a:	2007      	movs	r0, #7
 800388c:	f001 f834 	bl	80048f8 <getNextSub>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003896:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800389a:	3303      	adds	r3, #3
 800389c:	4618      	mov	r0, r3
 800389e:	f001 f83d 	bl	800491c <setSelectSub>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461a      	mov	r2, r3
 80038a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038a8:	705a      	strb	r2, [r3, #1]
                }
            break;
 80038aa:	e26a      	b.n	8003d82 <initStateMachine+0xb4a>

            case READING:
            	 updateUserMsg(0,USERMSG1,medindoUserMsg,&displayUpdateStatus);
 80038ac:	4b23      	ldr	r3, [pc, #140]	; (800393c <initStateMachine+0x704>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	f107 030b 	add.w	r3, r7, #11
 80038b4:	2100      	movs	r1, #0
 80038b6:	2000      	movs	r0, #0
 80038b8:	f7ff fa99 	bl	8002dee <updateUserMsg>
            	 resetTimer3Variable();
 80038bc:	f001 fdbc 	bl	8005438 <resetTimer3Variable>
				 printDataDisplay(0,OPTIONMSG,pararUserMsg);
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <initStateMachine+0x708>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	2103      	movs	r1, #3
 80038c8:	2000      	movs	r0, #0
 80038ca:	f000 fa87 	bl	8003ddc <printDataDisplay>
            	 startTM2();
 80038ce:	f000 fa69 	bl	8003da4 <startTM2>
				 startTM3();
 80038d2:	f000 fa75 	bl	8003dc0 <startTM3>
				 readingStatus = readingSensor();
 80038d6:	f000 fe21 	bl	800451c <readingSensor>
 80038da:	4603      	mov	r3, r0
 80038dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				 key = getKeyPressed();
 80038e0:	f001 fdb6 	bl	8005450 <getKeyPressed>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

				 if(key == PARAR || readingStatus != IDDLE)
 80038ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80038ee:	2b50      	cmp	r3, #80	; 0x50
 80038f0:	d004      	beq.n	80038fc <initStateMachine+0x6c4>
 80038f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8243 	beq.w	8003d82 <initStateMachine+0xb4a>
				 {
					 resetKeyPressed();
 80038fc:	f001 fdb4 	bl	8005468 <resetKeyPressed>
					 readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003900:	f107 0208 	add.w	r2, r7, #8
 8003904:	f107 030b 	add.w	r3, r7, #11
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fa8a 	bl	8002e24 <readyUserInterface>
					 subMenuIniciar->menuState = getNextSub(STOP);
 8003910:	2008      	movs	r0, #8
 8003912:	f000 fff1 	bl	80048f8 <getNextSub>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800391c:	70da      	strb	r2, [r3, #3]
				 }
            break;
 800391e:	e230      	b.n	8003d82 <initStateMachine+0xb4a>
 8003920:	20000038 	.word	0x20000038
 8003924:	200000c8 	.word	0x200000c8
 8003928:	200000d0 	.word	0x200000d0
 800392c:	200000d4 	.word	0x200000d4
 8003930:	200000cc 	.word	0x200000cc
 8003934:	2000003c 	.word	0x2000003c
 8003938:	20000040 	.word	0x20000040
 800393c:	20000044 	.word	0x20000044
 8003940:	200000d8 	.word	0x200000d8

            case STOP:
            	key = getKeyPressed();
 8003944:	f001 fd84 	bl	8005450 <getKeyPressed>
 8003948:	4603      	mov	r3, r0
 800394a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                updateUserMsg(0,0,stopreadUserMsg,&displayUpdateStatus);
 800394e:	4bd4      	ldr	r3, [pc, #848]	; (8003ca0 <initStateMachine+0xa68>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	f107 030b 	add.w	r3, r7, #11
 8003956:	2100      	movs	r1, #0
 8003958:	2000      	movs	r0, #0
 800395a:	f7ff fa48 	bl	8002dee <updateUserMsg>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 800395e:	4bd1      	ldr	r3, [pc, #836]	; (8003ca4 <initStateMachine+0xa6c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	2103      	movs	r1, #3
 8003966:	2000      	movs	r0, #0
 8003968:	f000 fa38 	bl	8003ddc <printDataDisplay>

                if(key == CONFIRMAR)
 800396c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003970:	2b43      	cmp	r3, #67	; 0x43
 8003972:	f040 8206 	bne.w	8003d82 <initStateMachine+0xb4a>
                {
                	resetKeyPressed();
 8003976:	f001 fd77 	bl	8005468 <resetKeyPressed>
                    stopTM2();
 800397a:	f000 fa1a 	bl	8003db2 <stopTM2>
                    stopTM3();
 800397e:	f000 fa26 	bl	8003dce <stopTM3>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003982:	f107 0208 	add.w	r2, r7, #8
 8003986:	f107 030b 	add.w	r3, r7, #11
 800398a:	4611      	mov	r1, r2
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fa49 	bl	8002e24 <readyUserInterface>
                    setResultTestNumber();
 8003992:	f7fe fc57 	bl	8002244 <setResultTestNumber>
//                    transmissionCOMM();
                    subMenuIniciar->menuState = getNextSub(DISP_RESULTS);
 8003996:	2009      	movs	r0, #9
 8003998:	f000 ffae 	bl	80048f8 <getNextSub>
 800399c:	4603      	mov	r3, r0
 800399e:	461a      	mov	r2, r3
 80039a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a2:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80039a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a6:	3303      	adds	r3, #3
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 ffb7 	bl	800491c <setSelectSub>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461a      	mov	r2, r3
 80039b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b4:	705a      	strb	r2, [r3, #1]

                }
                break;
 80039b6:	e1e4      	b.n	8003d82 <initStateMachine+0xb4a>

            case DISP_RESULTS:
                updateUserMsg(0,0,resultsUserMsg,&displayUpdateStatus);
 80039b8:	4bbb      	ldr	r3, [pc, #748]	; (8003ca8 <initStateMachine+0xa70>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	f107 030b 	add.w	r3, r7, #11
 80039c0:	2100      	movs	r1, #0
 80039c2:	2000      	movs	r0, #0
 80039c4:	f7ff fa13 	bl	8002dee <updateUserMsg>
                printDataDisplay(0,INSERTMSG,selecionarUserMsg);
 80039c8:	4bb6      	ldr	r3, [pc, #728]	; (8003ca4 <initStateMachine+0xa6c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	2102      	movs	r1, #2
 80039d0:	2000      	movs	r0, #0
 80039d2:	f000 fa03 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,pularUserMsg);
 80039d6:	4bb5      	ldr	r3, [pc, #724]	; (8003cac <initStateMachine+0xa74>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	2103      	movs	r1, #3
 80039de:	2000      	movs	r0, #0
 80039e0:	f000 f9fc 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 80039e4:	f001 fd34 	bl	8005450 <getKeyPressed>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                if(key == PARAR)
 80039ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80039f2:	2b50      	cmp	r3, #80	; 0x50
 80039f4:	d111      	bne.n	8003a1a <initStateMachine+0x7e2>
                {
                	resetKeyPressed();
 80039f6:	f001 fd37 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80039fa:	f107 0208 	add.w	r2, r7, #8
 80039fe:	f107 030b 	add.w	r3, r7, #11
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fa0d 	bl	8002e24 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8003a0a:	200b      	movs	r0, #11
 8003a0c:	f000 ff74 	bl	80048f8 <getNextSub>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a16:	70da      	strb	r2, [r3, #3]
 8003a18:	e1b3      	b.n	8003d82 <initStateMachine+0xb4a>
                }
                else if(key == CONFIRMAR)
 8003a1a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003a1e:	2b43      	cmp	r3, #67	; 0x43
 8003a20:	f040 81af 	bne.w	8003d82 <initStateMachine+0xb4a>
                {
                	resetKeyPressed();
 8003a24:	f001 fd20 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003a28:	f107 0208 	add.w	r2, r7, #8
 8003a2c:	f107 030b 	add.w	r3, r7, #11
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f9f6 	bl	8002e24 <readyUserInterface>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a3a:	3303      	adds	r3, #3
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 ff6d 	bl	800491c <setSelectSub>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461a      	mov	r2, r3
 8003a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a48:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(RESULTS);
 8003a4a:	200a      	movs	r0, #10
 8003a4c:	f000 ff54 	bl	80048f8 <getNextSub>
 8003a50:	4603      	mov	r3, r0
 8003a52:	461a      	mov	r2, r3
 8003a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a56:	70da      	strb	r2, [r3, #3]
                }
            break;
 8003a58:	e193      	b.n	8003d82 <initStateMachine+0xb4a>

            case RESULTS:
            	selectedUserTest = getResultTestNumber();
 8003a5a:	f7fe fbe9 	bl	8002230 <getResultTestNumber>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            	ptr_result = getUserResultData(selectedUserTest);
 8003a64:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe fbcf 	bl	800220c <getUserResultData>
 8003a6e:	6638      	str	r0, [r7, #96]	; 0x60
				if(testSamples<(ptr_result->resultTestAcquiredSamples))
 8003a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a72:	785b      	ldrb	r3, [r3, #1]
 8003a74:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d265      	bcs.n	8003b48 <initStateMachine+0x910>
				{
					updateUserMsg(0,USERMSG1,amostraUserMsg,&displayUpdateStatus);
 8003a7c:	4b8c      	ldr	r3, [pc, #560]	; (8003cb0 <initStateMachine+0xa78>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	f107 030b 	add.w	r3, r7, #11
 8003a84:	2100      	movs	r1, #0
 8003a86:	2000      	movs	r0, #0
 8003a88:	f7ff f9b1 	bl	8002dee <updateUserMsg>
					ptr_sampleString = param_1_toString(&ptr_result->sampleMeasurement[testSamples].sampleNum);
 8003a8c:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe fee2 	bl	8002868 <param_1_toString>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
					printDataDisplay(strlen(amostraUserMsg),USERMSG1 , ptr_sampleString);
 8003aa8:	4b81      	ldr	r3, [pc, #516]	; (8003cb0 <initStateMachine+0xa78>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fc fb4d 	bl	800014c <strlen>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f98e 	bl	8003ddc <printDataDisplay>

					printDataDisplay(0,USERMSG2,tempoVooUserMsg);
 8003ac0:	4b7c      	ldr	r3, [pc, #496]	; (8003cb4 <initStateMachine+0xa7c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	2000      	movs	r0, #0
 8003aca:	f000 f987 	bl	8003ddc <printDataDisplay>
					ptr_vooTimeString = param_2_toString(&ptr_result->sampleMeasurement[testSamples].uiVooTime);
 8003ace:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003adc:	4413      	add	r3, r2
 8003ade:	3308      	adds	r3, #8
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe fed5 	bl	8002890 <param_2_toString>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	65bb      	str	r3, [r7, #88]	; 0x58
					printDataDisplay(strlen(tempoVooUserMsg),USERMSG2 ,ptr_vooTimeString);
 8003aea:	4b72      	ldr	r3, [pc, #456]	; (8003cb4 <initStateMachine+0xa7c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fc fb2c 	bl	800014c <strlen>
 8003af4:	4603      	mov	r3, r0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003afa:	2101      	movs	r1, #1
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 f96d 	bl	8003ddc <printDataDisplay>


					printDataDisplay(0,INSERTMSG,tempoSoloUserMsg);
 8003b02:	4b6d      	ldr	r3, [pc, #436]	; (8003cb8 <initStateMachine+0xa80>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	2102      	movs	r1, #2
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f000 f966 	bl	8003ddc <printDataDisplay>
					ptr_alturaString = param_2_toString(&ptr_result->sampleMeasurement[testSamples].uiSoloTime);
 8003b10:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003b14:	4613      	mov	r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b20:	4413      	add	r3, r2
 8003b22:	3304      	adds	r3, #4
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe feb3 	bl	8002890 <param_2_toString>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	657b      	str	r3, [r7, #84]	; 0x54
					printDataDisplay(strlen(tempoSoloUserMsg),INSERTMSG , ptr_alturaString);
 8003b2e:	4b62      	ldr	r3, [pc, #392]	; (8003cb8 <initStateMachine+0xa80>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fc fb0a 	bl	800014c <strlen>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b3e:	2102      	movs	r1, #2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 f94b 	bl	8003ddc <printDataDisplay>
 8003b46:	e004      	b.n	8003b52 <initStateMachine+0x91a>

//                  ptr_potString; = param_3_toString(&ptr_structExportResult->Measurement[testSamples].uiSoloTime);
//					printDataDisplay(0, INSERTMSG, ptr_potString);

				}
				else  printDataDisplay((16-strlen("VAZIO"))/2,INSERTMSG,"VAZIO");
 8003b48:	4a5c      	ldr	r2, [pc, #368]	; (8003cbc <initStateMachine+0xa84>)
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	2005      	movs	r0, #5
 8003b4e:	f000 f945 	bl	8003ddc <printDataDisplay>

				key = getKeyPressed();
 8003b52:	f001 fc7d 	bl	8005450 <getKeyPressed>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

				if(key == AVANCAR)
 8003b5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003b60:	2b41      	cmp	r3, #65	; 0x41
 8003b62:	d11e      	bne.n	8003ba2 <initStateMachine+0x96a>
				{
					resetKeyPressed();
 8003b64:	f001 fc80 	bl	8005468 <resetKeyPressed>
					readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003b68:	f107 0208 	add.w	r2, r7, #8
 8003b6c:	f107 030b 	add.w	r3, r7, #11
 8003b70:	4611      	mov	r1, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff f956 	bl	8002e24 <readyUserInterface>
					testSamples++;
 8003b78:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					if(testSamples == ptr_result->resultTestAcquiredSamples) testSamples = 0;
 8003b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b84:	785b      	ldrb	r3, [r3, #1]
 8003b86:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d102      	bne.n	8003b94 <initStateMachine+0x95c>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					subMenuIniciar->menuState = getNextSub(RESULTS);
 8003b94:	200a      	movs	r0, #10
 8003b96:	f000 feaf 	bl	80048f8 <getNextSub>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ba0:	70da      	strb	r2, [r3, #3]
				}

//                    subMenuIniciar->menuState = getNextSub(RESULTS);
//                }
                if(key == PARAR)
 8003ba2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003ba6:	2b50      	cmp	r3, #80	; 0x50
 8003ba8:	f040 80eb 	bne.w	8003d82 <initStateMachine+0xb4a>
                {
                	resetKeyPressed();
 8003bac:	f001 fc5c 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003bb0:	f107 0208 	add.w	r2, r7, #8
 8003bb4:	f107 030b 	add.w	r3, r7, #11
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff f932 	bl	8002e24 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8003bc0:	200b      	movs	r0, #11
 8003bc2:	f000 fe99 	bl	80048f8 <getNextSub>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bcc:	70da      	strb	r2, [r3, #3]
                }

            break;
 8003bce:	e0d8      	b.n	8003d82 <initStateMachine+0xb4a>

            case SAVE_DATA:
                updateUserMsg(0,0,saveUserMsg,&displayUpdateStatus);
 8003bd0:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <initStateMachine+0xa88>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	f107 030b 	add.w	r3, r7, #11
 8003bd8:	2100      	movs	r1, #0
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f7ff f907 	bl	8002dee <updateUserMsg>
                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8003be0:	4b38      	ldr	r3, [pc, #224]	; (8003cc4 <initStateMachine+0xa8c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	2102      	movs	r1, #2
 8003be8:	2000      	movs	r0, #0
 8003bea:	f000 f8f7 	bl	8003ddc <printDataDisplay>
                printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8003bee:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <initStateMachine+0xa6c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2103      	movs	r1, #3
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f000 f8f0 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 8003bfc:	f001 fc28 	bl	8005450 <getKeyPressed>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                if(key == AVANCAR)
 8003c06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003c0a:	2b41      	cmp	r3, #65	; 0x41
 8003c0c:	d111      	bne.n	8003c32 <initStateMachine+0x9fa>
                {
                	resetKeyPressed();
 8003c0e:	f001 fc2b 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003c12:	f107 0208 	add.w	r2, r7, #8
 8003c16:	f107 030b 	add.w	r3, r7, #11
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff f901 	bl	8002e24 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(CANCEL_SAVE);
 8003c22:	200c      	movs	r0, #12
 8003c24:	f000 fe68 	bl	80048f8 <getNextSub>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c2e:	70da      	strb	r2, [r3, #3]
 8003c30:	e0a7      	b.n	8003d82 <initStateMachine+0xb4a>
                }
                else if(key == CONFIRMAR)
 8003c32:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003c36:	2b43      	cmp	r3, #67	; 0x43
 8003c38:	f040 80a3 	bne.w	8003d82 <initStateMachine+0xb4a>
                {
                	resetKeyPressed();
 8003c3c:	f001 fc14 	bl	8005468 <resetKeyPressed>
//                    save_data(indexTest);
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003c40:	f107 0208 	add.w	r2, r7, #8
 8003c44:	f107 030b 	add.w	r3, r7, #11
 8003c48:	4611      	mov	r1, r2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff f8ea 	bl	8002e24 <readyUserInterface>
                    updateUserMsg(0,0,savedUserMsg,&displayUpdateStatus);
 8003c50:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <initStateMachine+0xa90>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	f107 030b 	add.w	r3, r7, #11
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	f7ff f8c7 	bl	8002dee <updateUserMsg>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003c60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c62:	3303      	adds	r3, #3
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fe59 	bl	800491c <setSelectSub>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c70:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8003c72:	2001      	movs	r0, #1
 8003c74:	f000 fe40 	bl	80048f8 <getNextSub>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c7e:	70da      	strb	r2, [r3, #3]
                    testSamples = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003c86:	f107 0208 	add.w	r2, r7, #8
 8003c8a:	f107 030b 	add.w	r3, r7, #11
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff f8c7 	bl	8002e24 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8003c96:	234d      	movs	r3, #77	; 0x4d
 8003c98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                }
            break;
 8003c9c:	e071      	b.n	8003d82 <initStateMachine+0xb4a>
 8003c9e:	bf00      	nop
 8003ca0:	20000048 	.word	0x20000048
 8003ca4:	200000d4 	.word	0x200000d4
 8003ca8:	20000058 	.word	0x20000058
 8003cac:	200000dc 	.word	0x200000dc
 8003cb0:	2000004c 	.word	0x2000004c
 8003cb4:	20000050 	.word	0x20000050
 8003cb8:	20000054 	.word	0x20000054
 8003cbc:	0800c09c 	.word	0x0800c09c
 8003cc0:	2000005c 	.word	0x2000005c
 8003cc4:	200000c8 	.word	0x200000c8
 8003cc8:	20000060 	.word	0x20000060

            case CANCEL_SAVE:
                updateUserMsg(0,0,cancelUserMsg,&displayUpdateStatus);
 8003ccc:	4b32      	ldr	r3, [pc, #200]	; (8003d98 <initStateMachine+0xb60>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	f107 030b 	add.w	r3, r7, #11
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f7ff f889 	bl	8002dee <updateUserMsg>
                printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8003cdc:	4b2f      	ldr	r3, [pc, #188]	; (8003d9c <initStateMachine+0xb64>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f000 f879 	bl	8003ddc <printDataDisplay>
				printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8003cea:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <initStateMachine+0xb68>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2103      	movs	r1, #3
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f000 f872 	bl	8003ddc <printDataDisplay>
                key = getKeyPressed();
 8003cf8:	f001 fbaa 	bl	8005450 <getKeyPressed>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                if(key == AVANCAR)
 8003d02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003d06:	2b41      	cmp	r3, #65	; 0x41
 8003d08:	d111      	bne.n	8003d2e <initStateMachine+0xaf6>
                {
                	resetKeyPressed();
 8003d0a:	f001 fbad 	bl	8005468 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003d0e:	f107 0208 	add.w	r2, r7, #8
 8003d12:	f107 030b 	add.w	r3, r7, #11
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff f883 	bl	8002e24 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8003d1e:	200b      	movs	r0, #11
 8003d20:	f000 fdea 	bl	80048f8 <getNextSub>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d2a:	70da      	strb	r2, [r3, #3]
 8003d2c:	e028      	b.n	8003d80 <initStateMachine+0xb48>
                }
                else if(key == CONFIRMAR)
 8003d2e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003d32:	2b43      	cmp	r3, #67	; 0x43
 8003d34:	d124      	bne.n	8003d80 <initStateMachine+0xb48>
                {
                	resetKeyPressed();
 8003d36:	f001 fb97 	bl	8005468 <resetKeyPressed>
//                    readyUserInterface(&displayUpdateStatus,cursorPosition);
//                    updateUserMsg(0,0,canceledUserMsg,&displayUpdateStatus);
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d3c:	3303      	adds	r3, #3
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fdec 	bl	800491c <setSelectSub>
 8003d44:	4603      	mov	r3, r0
 8003d46:	461a      	mov	r2, r3
 8003d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d4a:	705a      	strb	r2, [r3, #1]
                    testSamples = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
                    indexTest++;
 8003d52:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003d56:	3301      	adds	r3, #1
 8003d58:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
                    //
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	f000 fdcb 	bl	80048f8 <getNextSub>
 8003d62:	4603      	mov	r3, r0
 8003d64:	461a      	mov	r2, r3
 8003d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d68:	70da      	strb	r2, [r3, #3]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003d6a:	f107 0208 	add.w	r2, r7, #8
 8003d6e:	f107 030b 	add.w	r3, r7, #11
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff f855 	bl	8002e24 <readyUserInterface>
                    key = MENU;
 8003d7a:	234d      	movs	r3, #77	; 0x4d
 8003d7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                }
            break;
 8003d80:	bf00      	nop
    while(key != MENU)
 8003d82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003d86:	2b4d      	cmp	r3, #77	; 0x4d
 8003d88:	f47f aa77 	bne.w	800327a <initStateMachine+0x42>
        }
    }
}
 8003d8c:	bf00      	nop
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3778      	adds	r7, #120	; 0x78
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000064 	.word	0x20000064
 8003d9c:	200000c8 	.word	0x200000c8
 8003da0:	200000d4 	.word	0x200000d4

08003da4 <startTM2>:
    unsigned char timeout;
    struct samples Measurement[MEASUREMENT_SIZE];
};

unsigned char startTM2(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
        SET_HW_TIMER2();
 8003da8:	f000 fdda 	bl	8004960 <SET_HW_TIMER2>
}
 8003dac:	bf00      	nop
 8003dae:	4618      	mov	r0, r3
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <stopTM2>:

unsigned char stopTM2(void)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	af00      	add	r7, sp, #0
    RESET_HW_TIMER2();
 8003db6:	f000 fdf5 	bl	80049a4 <RESET_HW_TIMER2>
}
 8003dba:	bf00      	nop
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <startTM3>:

unsigned char startTM3(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
        SET_HW_TIMER3();
 8003dc4:	f000 fe0c 	bl	80049e0 <SET_HW_TIMER3>
//        resetTimer3Variable();
}
 8003dc8:	bf00      	nop
 8003dca:	4618      	mov	r0, r3
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <stopTM3>:

unsigned char stopTM3(void)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	af00      	add	r7, sp, #0
    RESET_HW_TIMER3();
 8003dd2:	f000 fe27 	bl	8004a24 <RESET_HW_TIMER3>
}
 8003dd6:	bf00      	nop
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <printDataDisplay>:
{
//    RESET_HARDWARE();
}

unsigned char printDataDisplay(unsigned char col, unsigned char linha,unsigned char* userData)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	603a      	str	r2, [r7, #0]
 8003de6:	71fb      	strb	r3, [r7, #7]
 8003de8:	460b      	mov	r3, r1
 8003dea:	71bb      	strb	r3, [r7, #6]
    HW_PRINT_DATA(col, linha,userData);
 8003dec:	79b9      	ldrb	r1, [r7, #6]
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f84e 	bl	8003e94 <HW_PRINT_DATA>
}
 8003df8:	bf00      	nop
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <eraseDataDisplay>:
	HW_INSERT_DATA(col, linha,userData);
}


unsigned char eraseDataDisplay()
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	af00      	add	r7, sp, #0
    HW_ERASE_DATA();
 8003e06:	f000 f861 	bl	8003ecc <HW_ERASE_DATA>
}
 8003e0a:	bf00      	nop
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <updateDataDisplay>:

unsigned char updateDataDisplay(unsigned char col, unsigned char linha)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	460a      	mov	r2, r1
 8003e1a:	71fb      	strb	r3, [r7, #7]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	71bb      	strb	r3, [r7, #6]
	HW_UPDATE_DATA(col,linha);
 8003e20:	79ba      	ldrb	r2, [r7, #6]
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f85a 	bl	8003ee0 <HW_UPDATE_DATA>
}
 8003e2c:	bf00      	nop
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <homeDataDisplay>:

unsigned char homeDataDisplay(unsigned char* appName,unsigned char* companyName,unsigned char* appVersion)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
//    printf("%s\n",appName);
//    printf("%s\n",companyName);
//    printf("%s\n",appVersion);
    HW_HOME_DISP(appName,companyName,appVersion);
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f86a 	bl	8003f20 <HW_HOME_DISP>

}
 8003e4c:	bf00      	nop
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <startCOMM>:


}

unsigned char startCOMM()
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
//    printf("SET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8003e5c:	f001 fb12 	bl	8005484 <getUARTInstance>
 8003e60:	4603      	mov	r3, r0
 8003e62:	607b      	str	r3, [r7, #4]
	SET_HW_UART(uartInstance);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fdf9 	bl	8004a5c <SET_HW_UART>
}
 8003e6a:	bf00      	nop
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <stopCOMM>:

unsigned char stopCOMM()
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
//    printf("RESET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8003e7a:	f001 fb03 	bl	8005484 <getUARTInstance>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	607b      	str	r3, [r7, #4]
	RESET_HW_UART(uartInstance);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fdfe 	bl	8004a84 <RESET_HW_UART>
}
 8003e88:	bf00      	nop
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HW_PRINT_DATA>:

static LiquidCrystal lcdDisplay;


unsigned char HW_PRINT_DATA(unsigned char col, unsigned char linha,unsigned char* userData)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	603a      	str	r2, [r7, #0]
 8003e9e:	71fb      	strb	r3, [r7, #7]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	71bb      	strb	r3, [r7, #6]
    setCursor(&lcdDisplay, col, linha);
 8003ea4:	79ba      	ldrb	r2, [r7, #6]
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4807      	ldr	r0, [pc, #28]	; (8003ec8 <HW_PRINT_DATA+0x34>)
 8003eac:	f000 fb06 	bl	80044bc <setCursor>
    HAL_Delay(10);
 8003eb0:	200a      	movs	r0, #10
 8003eb2:	f002 faa5 	bl	8006400 <HAL_Delay>
    print(&lcdDisplay,userData);
 8003eb6:	6839      	ldr	r1, [r7, #0]
 8003eb8:	4803      	ldr	r0, [pc, #12]	; (8003ec8 <HW_PRINT_DATA+0x34>)
 8003eba:	f000 f95b 	bl	8004174 <print>
}
 8003ebe:	bf00      	nop
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	200004b8 	.word	0x200004b8

08003ecc <HW_ERASE_DATA>:

unsigned char HW_ERASE_DATA()
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
	clear(&lcdDisplay);
 8003ed0:	4802      	ldr	r0, [pc, #8]	; (8003edc <HW_ERASE_DATA+0x10>)
 8003ed2:	f000 f971 	bl	80041b8 <clear>
}
 8003ed6:	bf00      	nop
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200004b8 	.word	0x200004b8

08003ee0 <HW_UPDATE_DATA>:

unsigned char HW_UPDATE_DATA(unsigned char position, unsigned char linha)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	460a      	mov	r2, r1
 8003eea:	71fb      	strb	r3, [r7, #7]
 8003eec:	4613      	mov	r3, r2
 8003eee:	71bb      	strb	r3, [r7, #6]
	setCursor(&lcdDisplay, position, linha); /***/
 8003ef0:	79ba      	ldrb	r2, [r7, #6]
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4809      	ldr	r0, [pc, #36]	; (8003f1c <HW_UPDATE_DATA+0x3c>)
 8003ef8:	f000 fae0 	bl	80044bc <setCursor>
	cursor(&lcdDisplay);
 8003efc:	4807      	ldr	r0, [pc, #28]	; (8003f1c <HW_UPDATE_DATA+0x3c>)
 8003efe:	f000 f99a 	bl	8004236 <cursor>
	HAL_Delay(500);
 8003f02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f06:	f002 fa7b 	bl	8006400 <HAL_Delay>
	noCursor(&lcdDisplay);
 8003f0a:	4804      	ldr	r0, [pc, #16]	; (8003f1c <HW_UPDATE_DATA+0x3c>)
 8003f0c:	f000 f97b 	bl	8004206 <noCursor>
}
 8003f10:	bf00      	nop
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	200004b8 	.word	0x200004b8

08003f20 <HW_HOME_DISP>:

unsigned char HW_HOME_DISP(unsigned char* appName, unsigned char* companyName, unsigned char* appVersion)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
	begin(&lcdDisplay,16,4,LCD_5x10DOTS);
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	2204      	movs	r2, #4
 8003f30:	2110      	movs	r1, #16
 8003f32:	4812      	ldr	r0, [pc, #72]	; (8003f7c <HW_HOME_DISP+0x5c>)
 8003f34:	f000 f824 	bl	8003f80 <begin>
	setCursor(&lcdDisplay, 0, 0);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	480f      	ldr	r0, [pc, #60]	; (8003f7c <HW_HOME_DISP+0x5c>)
 8003f3e:	f000 fabd 	bl	80044bc <setCursor>
	print(&lcdDisplay,appName);
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	480d      	ldr	r0, [pc, #52]	; (8003f7c <HW_HOME_DISP+0x5c>)
 8003f46:	f000 f915 	bl	8004174 <print>
	setCursor(&lcdDisplay, 0, 1);
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	480b      	ldr	r0, [pc, #44]	; (8003f7c <HW_HOME_DISP+0x5c>)
 8003f50:	f000 fab4 	bl	80044bc <setCursor>
	print(&lcdDisplay,companyName);
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	4809      	ldr	r0, [pc, #36]	; (8003f7c <HW_HOME_DISP+0x5c>)
 8003f58:	f000 f90c 	bl	8004174 <print>
	setCursor(&lcdDisplay, 0, 3);
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4806      	ldr	r0, [pc, #24]	; (8003f7c <HW_HOME_DISP+0x5c>)
 8003f62:	f000 faab 	bl	80044bc <setCursor>
	print(&lcdDisplay,appVersion);
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4804      	ldr	r0, [pc, #16]	; (8003f7c <HW_HOME_DISP+0x5c>)
 8003f6a:	f000 f903 	bl	8004174 <print>
	return &(lcdDisplay);
 8003f6e:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HW_HOME_DISP+0x5c>)
 8003f70:	b2db      	uxtb	r3, r3
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200004b8 	.word	0x200004b8

08003f80 <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	4608      	mov	r0, r1
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	70fb      	strb	r3, [r7, #3]
 8003f92:	460b      	mov	r3, r1
 8003f94:	70bb      	strb	r3, [r7, #2]
 8003f96:	4613      	mov	r3, r2
 8003f98:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 8003f9a:	f107 0308 	add.w	r3, r7, #8
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f107 0308 	add.w	r3, r7, #8
 8003fac:	cb03      	ldmia	r3!, {r0, r1}
 8003fae:	6010      	str	r0, [r2, #0]
 8003fb0:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fb8:	486c      	ldr	r0, [pc, #432]	; (800416c <begin+0x1ec>)
 8003fba:	f002 ff75 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fc4:	4869      	ldr	r0, [pc, #420]	; (800416c <begin+0x1ec>)
 8003fc6:	f002 ff6f 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fd0:	4866      	ldr	r0, [pc, #408]	; (800416c <begin+0x1ec>)
 8003fd2:	f002 ff69 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fdc:	4863      	ldr	r0, [pc, #396]	; (800416c <begin+0x1ec>)
 8003fde:	f002 ff63 	bl	8006ea8 <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2108      	movs	r1, #8
 8003fe6:	4861      	ldr	r0, [pc, #388]	; (800416c <begin+0x1ec>)
 8003fe8:	f002 ff5e 	bl	8006ea8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003fec:	2200      	movs	r2, #0
 8003fee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff2:	485f      	ldr	r0, [pc, #380]	; (8004170 <begin+0x1f0>)
 8003ff4:	f002 ff58 	bl	8006ea8 <HAL_GPIO_WritePin>

	#if defined(LCD_8BITMODE)
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,GPIO_PIN_RESET);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ffe:	485c      	ldr	r0, [pc, #368]	; (8004170 <begin+0x1f0>)
 8004000:	f002 ff52 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,GPIO_PIN_RESET);
 8004004:	2200      	movs	r2, #0
 8004006:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800400a:	4859      	ldr	r0, [pc, #356]	; (8004170 <begin+0x1f0>)
 800400c:	f002 ff4c 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,GPIO_PIN_RESET);
 8004010:	2200      	movs	r2, #0
 8004012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004016:	4856      	ldr	r0, [pc, #344]	; (8004170 <begin+0x1f0>)
 8004018:	f002 ff46 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,GPIO_PIN_RESET);
 800401c:	2200      	movs	r2, #0
 800401e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004022:	4853      	ldr	r0, [pc, #332]	; (8004170 <begin+0x1f0>)
 8004024:	f002 ff40 	bl	8006ea8 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8004028:	2200      	movs	r2, #0
 800402a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800402e:	4850      	ldr	r0, [pc, #320]	; (8004170 <begin+0x1f0>)
 8004030:	f002 ff3a 	bl	8006ea8 <HAL_GPIO_WritePin>
	#endif

	if (lines > 1) {
 8004034:	78bb      	ldrb	r3, [r7, #2]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d906      	bls.n	8004048 <begin+0xc8>
		lcd->_displayfunction |= LCD_2LINE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	f043 0308 	orr.w	r3, r3, #8
 8004042:	b2da      	uxtb	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	78ba      	ldrb	r2, [r7, #2]
 800404c:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	3340      	adds	r3, #64	; 0x40
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	4613      	mov	r3, r2
 8004058:	2240      	movs	r2, #64	; 0x40
 800405a:	2100      	movs	r1, #0
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fa11 	bl	8004484 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8004062:	787b      	ldrb	r3, [r7, #1]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d009      	beq.n	800407c <begin+0xfc>
 8004068:	78bb      	ldrb	r3, [r7, #2]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d106      	bne.n	800407c <begin+0xfc>
		lcd->_displayfunction |= LCD_5x10DOTS;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	b2da      	uxtb	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 800407c:	2032      	movs	r0, #50	; 0x32
 800407e:	f002 f9bf 	bl	8006400 <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8004082:	2200      	movs	r2, #0
 8004084:	2108      	movs	r1, #8
 8004086:	4839      	ldr	r0, [pc, #228]	; (800416c <begin+0x1ec>)
 8004088:	f002 ff0e 	bl	8006ea8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 800408c:	2200      	movs	r2, #0
 800408e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004092:	4837      	ldr	r0, [pc, #220]	; (8004170 <begin+0x1f0>)
 8004094:	f002 ff08 	bl	8006ea8 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8004098:	2200      	movs	r2, #0
 800409a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800409e:	4834      	ldr	r0, [pc, #208]	; (8004170 <begin+0x1f0>)
 80040a0:	f002 ff02 	bl	8006ea8 <HAL_GPIO_WritePin>
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d015      	beq.n	80040d8 <begin+0x158>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 80040ac:	2003      	movs	r0, #3
 80040ae:	f000 f933 	bl	8004318 <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 80040b2:	2005      	movs	r0, #5
 80040b4:	f002 f9a4 	bl	8006400 <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 80040b8:	2003      	movs	r0, #3
 80040ba:	f000 f92d 	bl	8004318 <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 80040be:	2005      	movs	r0, #5
 80040c0:	f002 f99e 	bl	8006400 <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 80040c4:	2003      	movs	r0, #3
 80040c6:	f000 f927 	bl	8004318 <write4bits>
		HAL_Delay(5);
 80040ca:	2005      	movs	r0, #5
 80040cc:	f002 f998 	bl	8006400 <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 80040d0:	2002      	movs	r0, #2
 80040d2:	f000 f921 	bl	8004318 <write4bits>
 80040d6:	e023      	b.n	8004120 <begin+0x1a0>

		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 23, pg 45 

		// Envia sequência de comando
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	f043 0320 	orr.w	r3, r3, #32
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f9bd 	bl	8004464 <command>
		HAL_Delay(6);  // wait more than 4.1 ms
 80040ea:	2006      	movs	r0, #6
 80040ec:	f002 f988 	bl	8006400 <HAL_Delay>

		// Segundo envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	f043 0320 	orr.w	r3, r3, #32
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f9b1 	bl	8004464 <command>
		HAL_Delay(1);
 8004102:	2001      	movs	r0, #1
 8004104:	f002 f97c 	bl	8006400 <HAL_Delay>

		// Terceiro envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	f043 0320 	orr.w	r3, r3, #32
 8004110:	b2db      	uxtb	r3, r3
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f9a5 	bl	8004464 <command>
		HAL_Delay(1);
 800411a:	2001      	movs	r0, #1
 800411c:	f002 f970 	bl	8006400 <HAL_Delay>
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	f043 0320 	orr.w	r3, r3, #32
 8004128:	b2db      	uxtb	r3, r3
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f999 	bl	8004464 <command>
    HAL_Delay(1);
 8004132:	2001      	movs	r0, #1
 8004134:	f002 f964 	bl	8006400 <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2204      	movs	r2, #4
 800413c:	705a      	strb	r2, [r3, #1]
    display(lcd);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f849 	bl	80041d6 <display>

    // Limpa display
    clear(lcd);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f837 	bl	80041b8 <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	789b      	ldrb	r3, [r3, #2]
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	b2db      	uxtb	r3, r3
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f981 	bl	8004464 <command>
}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40010c00 	.word	0x40010c00
 8004170:	40010800 	.word	0x40010800

08004174 <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 800417e:	6838      	ldr	r0, [r7, #0]
 8004180:	f7fb ffe4 	bl	800014c <strlen>
 8004184:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]
 800418a:	e00c      	b.n	80041a6 <print+0x32>
		write(lcd ,*(value+i));
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	4413      	add	r3, r2
 8004192:	f993 3000 	ldrsb.w	r3, [r3]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f863 	bl	8004266 <write>
	for (uint8_t i = 0; i < Lengh; i++){
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	3301      	adds	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d8ee      	bhi.n	800418c <print+0x18>
	}
}
 80041ae:	bf00      	nop
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 80041c0:	2101      	movs	r1, #1
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f94e 	bl	8004464 <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 80041c8:	2002      	movs	r0, #2
 80041ca:	f002 f919 	bl	8006400 <HAL_Delay>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	785b      	ldrb	r3, [r3, #1]
 80041e2:	f043 0304 	orr.w	r3, r3, #4
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	785b      	ldrb	r3, [r3, #1]
 80041f0:	f043 0308 	orr.w	r3, r3, #8
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f933 	bl	8004464 <command>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <noCursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void noCursor(LiquidCrystal *lcd){
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol &= ~LCD_CURSORON;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	f023 0302 	bic.w	r3, r3, #2
 8004216:	b2da      	uxtb	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	785b      	ldrb	r3, [r3, #1]
 8004220:	f043 0308 	orr.w	r3, r3, #8
 8004224:	b2db      	uxtb	r3, r3
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f91b 	bl	8004464 <command>
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <cursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void cursor(LiquidCrystal *lcd){
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol |= LCD_CURSORON;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	f043 0302 	orr.w	r3, r3, #2
 8004246:	b2da      	uxtb	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	785b      	ldrb	r3, [r3, #1]
 8004250:	f043 0308 	orr.w	r3, r3, #8
 8004254:	b2db      	uxtb	r3, r3
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f903 	bl	8004464 <command>
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	460b      	mov	r3, r1
 8004270:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	2201      	movs	r2, #1
 8004276:	4619      	mov	r1, r3
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f805 	bl	8004288 <send>
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	70fb      	strb	r3, [r7, #3]
 8004294:	4613      	mov	r3, r2
 8004296:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 8004298:	78bb      	ldrb	r3, [r7, #2]
 800429a:	461a      	mov	r2, r3
 800429c:	2108      	movs	r1, #8
 800429e:	4811      	ldr	r0, [pc, #68]	; (80042e4 <send+0x5c>)
 80042a0:	f002 fe02 	bl	8006ea8 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 80042a4:	2200      	movs	r2, #0
 80042a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042aa:	480f      	ldr	r0, [pc, #60]	; (80042e8 <send+0x60>)
 80042ac:	f002 fdfc 	bl	8006ea8 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <send+0x3e>
	    write8bits(value);
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f866 	bl	8004390 <write8bits>
	    write4bits(value);
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 80042c4:	e009      	b.n	80042da <send+0x52>
	    write4bits(value>>4);
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 f823 	bl	8004318 <write4bits>
	    write4bits(value);
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 f81f 	bl	8004318 <write4bits>
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40010c00 	.word	0x40010c00
 80042e8:	40010800 	.word	0x40010800

080042ec <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80042f0:	2201      	movs	r2, #1
 80042f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042f6:	4807      	ldr	r0, [pc, #28]	; (8004314 <pulseEnable+0x28>)
 80042f8:	f002 fdd6 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80042fc:	2001      	movs	r0, #1
 80042fe:	f002 f87f 	bl	8006400 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8004302:	2200      	movs	r2, #0
 8004304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004308:	4802      	ldr	r0, [pc, #8]	; (8004314 <pulseEnable+0x28>)
 800430a:	f002 fdcd 	bl	8006ea8 <HAL_GPIO_WritePin>
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40010800 	.word	0x40010800

08004318 <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004330:	4816      	ldr	r0, [pc, #88]	; (800438c <write4bits+0x74>)
 8004332:	f002 fdb9 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004348:	4810      	ldr	r0, [pc, #64]	; (800438c <write4bits+0x74>)
 800434a:	f002 fdad 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	089b      	lsrs	r3, r3, #2
 8004352:	b2db      	uxtb	r3, r3
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004360:	480a      	ldr	r0, [pc, #40]	; (800438c <write4bits+0x74>)
 8004362:	f002 fda1 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	08db      	lsrs	r3, r3, #3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004378:	4804      	ldr	r0, [pc, #16]	; (800438c <write4bits+0x74>)
 800437a:	f002 fd95 	bl	8006ea8 <HAL_GPIO_WritePin>

	pulseEnable();
 800437e:	f7ff ffb5 	bl	80042ec <pulseEnable>
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40010c00 	.word	0x40010c00

08004390 <write8bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write8bits(uint8_t value){
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,(value >> 0) & 0x01);
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043a8:	482c      	ldr	r0, [pc, #176]	; (800445c <write8bits+0xcc>)
 80043aa:	f002 fd7d 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,(value >> 1) & 0x01);
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043c0:	4826      	ldr	r0, [pc, #152]	; (800445c <write8bits+0xcc>)
 80043c2:	f002 fd71 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,(value >> 2) & 0x01);
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	089b      	lsrs	r3, r3, #2
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043d8:	4820      	ldr	r0, [pc, #128]	; (800445c <write8bits+0xcc>)
 80043da:	f002 fd65 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,(value >> 3) & 0x01);
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	08db      	lsrs	r3, r3, #3
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043f0:	481a      	ldr	r0, [pc, #104]	; (800445c <write8bits+0xcc>)
 80043f2:	f002 fd59 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 4) & 0x01);
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	b2db      	uxtb	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004408:	4815      	ldr	r0, [pc, #84]	; (8004460 <write8bits+0xd0>)
 800440a:	f002 fd4d 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 5) & 0x01);
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004420:	480f      	ldr	r0, [pc, #60]	; (8004460 <write8bits+0xd0>)
 8004422:	f002 fd41 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 6) & 0x01);
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	099b      	lsrs	r3, r3, #6
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004438:	4809      	ldr	r0, [pc, #36]	; (8004460 <write8bits+0xd0>)
 800443a:	f002 fd35 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 7) & 0x01);
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	09db      	lsrs	r3, r3, #7
 8004442:	b2db      	uxtb	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800444a:	4805      	ldr	r0, [pc, #20]	; (8004460 <write8bits+0xd0>)
 800444c:	f002 fd2c 	bl	8006ea8 <HAL_GPIO_WritePin>

	pulseEnable();
 8004450:	f7ff ff4c 	bl	80042ec <pulseEnable>

}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40010800 	.word	0x40010800
 8004460:	40010c00 	.word	0x40010c00

08004464 <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	2200      	movs	r2, #0
 8004474:	4619      	mov	r1, r3
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff ff06 	bl	8004288 <send>
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	71da      	strb	r2, [r3, #7]
}
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
 80044c8:	4613      	mov	r3, r2
 80044ca:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 80044cc:	2304      	movs	r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 80044d0:	78bb      	ldrb	r3, [r7, #2]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d803      	bhi.n	80044e0 <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	78db      	ldrb	r3, [r3, #3]
 80044e4:	78ba      	ldrb	r2, [r7, #2]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d303      	bcc.n	80044f2 <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	78db      	ldrb	r3, [r3, #3]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 80044f2:	78bb      	ldrb	r3, [r7, #2]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	791a      	ldrb	r2, [r3, #4]
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	4413      	add	r3, r2
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	b25b      	sxtb	r3, r3
 8004502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004506:	b25b      	sxtb	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	4619      	mov	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ffa9 	bl	8004464 <command>
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <readingSensor>:
};

static struct results measuredData;

unsigned char readingSensor()
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b09e      	sub	sp, #120	; 0x78
 8004520:	af00      	add	r7, sp, #0
	unsigned char userState = REPOUSO;
 8004522:	2332      	movs	r3, #50	; 0x32
 8004524:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	unsigned char sensorFlag;
	unsigned int referenceTime,currentTime,totalTime,spentTimeVoo,spentTimeSolo = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	66bb      	str	r3, [r7, #104]	; 0x68
	unsigned int contatoTime[5] = {0,0,0,0,0};
 800452c:	f107 0314 	add.w	r3, r7, #20
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	611a      	str	r2, [r3, #16]
	unsigned int vooTime[5]= {0,0,0,0,0};
 800453c:	463b      	mov	r3, r7
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	609a      	str	r2, [r3, #8]
 8004546:	60da      	str	r2, [r3, #12]
 8004548:	611a      	str	r2, [r3, #16]
	unsigned char key = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	unsigned char samples = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned long int intervalSaltos = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	65bb      	str	r3, [r7, #88]	; 0x58
	unsigned long int intervalSeries = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	657b      	str	r3, [r7, #84]	; 0x54
	unsigned char numSaltos = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	unsigned char numSeries = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64


	unsigned char indexTest = getResultTestNumber();
 800456a:	f7fd fe61 	bl	8002230 <getResultTestNumber>
 800456e:	4603      	mov	r3, r0
 8004570:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	unsigned long int userTime = getUserTime();
 8004574:	f7fd fd08 	bl	8001f88 <getUserTime>
 8004578:	64f8      	str	r0, [r7, #76]	; 0x4c
	unsigned long int userIntervalSeries = getUserIntervalSeries();
 800457a:	f7fd fd2f 	bl	8001fdc <getUserIntervalSeries>
 800457e:	4603      	mov	r3, r0
 8004580:	64bb      	str	r3, [r7, #72]	; 0x48
	unsigned char userNumSeries = getUserNumSeries();
 8004582:	f7fd fd21 	bl	8001fc8 <getUserNumSeries>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	unsigned char userTapete = getUserSelectTapete();
 800458c:	f7fd fd32 	bl	8001ff4 <getUserSelectTapete>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	unsigned long int userIntervalSaltos = getUserIntervalSaltos();
 8004596:	f7fd fd0b 	bl	8001fb0 <getUserIntervalSaltos>
 800459a:	4603      	mov	r3, r0
 800459c:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned char userNumSaltos = getUserNumSaltos();
 800459e:	f7fd fcfd 	bl	8001f9c <getUserNumSaltos>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	unsigned int timeMin = getTimeAltMin();
 80045a8:	f7fd fdca 	bl	8002140 <getTimeAltMin>
 80045ac:	4603      	mov	r3, r0
 80045ae:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned int timeMax = getTimeAltMax();
 80045b0:	f7fd fdd0 	bl	8002154 <getTimeAltMax>
 80045b4:	4603      	mov	r3, r0
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
//	unsigned char userNumSaltos = 2;
//	unsigned int timeMin = 500;
//	unsigned int timeMax = 5000;

	//
	key = getKeyPressed();
 80045b8:	f000 ff4a 	bl	8005450 <getKeyPressed>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

//	while(key != PARAR && totalTime != userTime && numSaltos != userNumSaltos) //WHILE COMPLETO
//	while(key != PARAR && numSaltos != userNumSaltos) //USADO PARA DEBUGGER DESCONSIDERANDO O TIMEOUT
	while(key != PARAR && numSeries != userNumSeries) //USADO PARA DEBUGGER DESCONSIDERANDO O TIMEOUT e NUM SALTOS
 80045c2:	bf00      	nop
 80045c4:	e0e5      	b.n	8004792 <readingSensor+0x276>

	{
		totalTime = getTimer3Variable();
 80045c6:	f000 ff87 	bl	80054d8 <getTimer3Variable>
 80045ca:	4603      	mov	r3, r0
 80045cc:	66fb      	str	r3, [r7, #108]	; 0x6c
		key = getKeyPressed();
 80045ce:	f000 ff3f 	bl	8005450 <getKeyPressed>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		switch(userState)
 80045d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80045dc:	3b32      	subs	r3, #50	; 0x32
 80045de:	2b05      	cmp	r3, #5
 80045e0:	f200 80d7 	bhi.w	8004792 <readingSensor+0x276>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <readingSensor+0xd0>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004605 	.word	0x08004605
 80045f0:	08004653 	.word	0x08004653
 80045f4:	08004689 	.word	0x08004689
 80045f8:	08004793 	.word	0x08004793
 80045fc:	08004793 	.word	0x08004793
 8004600:	08004759 	.word	0x08004759
		{
			case REPOUSO:
				sensorFlag = getTimer2Variable();
 8004604:	f000 ff5c 	bl	80054c0 <getTimer2Variable>
 8004608:	4603      	mov	r3, r0
 800460a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if(sensorFlag == 0 && userTapete == FALSE) //INICIO FORA DO TAPETE
 800460e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10b      	bne.n	800462e <readingSensor+0x112>
 8004616:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <readingSensor+0x112>
				{
					userState = CONTATO;
 800461e:	2333      	movs	r3, #51	; 0x33
 8004620:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					referenceTime = getTimer3Variable();
 8004624:	f000 ff58 	bl	80054d8 <getTimer3Variable>
 8004628:	4603      	mov	r3, r0
 800462a:	673b      	str	r3, [r7, #112]	; 0x70
 800462c:	e010      	b.n	8004650 <readingSensor+0x134>
				}
				else if(sensorFlag == 0 && userTapete == TRUE) // INICIO DENTRO DO TAPETE
 800462e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <readingSensor+0x12e>
 8004636:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800463a:	2b01      	cmp	r3, #1
 800463c:	d105      	bne.n	800464a <readingSensor+0x12e>
				{
					userState = CONTATO;
 800463e:	2333      	movs	r3, #51	; 0x33
 8004640:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					referenceTime = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	673b      	str	r3, [r7, #112]	; 0x70
 8004648:	e002      	b.n	8004650 <readingSensor+0x134>
				}
				else userState = REPOUSO;
 800464a:	2332      	movs	r3, #50	; 0x32
 800464c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

			break;
 8004650:	e09f      	b.n	8004792 <readingSensor+0x276>

			case CONTATO:
				sensorFlag = getTimer2Variable();
 8004652:	f000 ff35 	bl	80054c0 <getTimer2Variable>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if(sensorFlag == 1)
 800465c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004660:	2b01      	cmp	r3, #1
 8004662:	d10d      	bne.n	8004680 <readingSensor+0x164>
				{
					userState = VOO;
 8004664:	2334      	movs	r3, #52	; 0x34
 8004666:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					currentTime = getTimer3Variable();
 800466a:	f000 ff35 	bl	80054d8 <getTimer3Variable>
 800466e:	4603      	mov	r3, r0
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
					spentTimeSolo = currentTime-referenceTime;
 8004672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	66bb      	str	r3, [r7, #104]	; 0x68
					referenceTime = currentTime;
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	673b      	str	r3, [r7, #112]	; 0x70
 800467e:	e088      	b.n	8004792 <readingSensor+0x276>
				}
				else
				{
					userState = CONTATO;
 8004680:	2333      	movs	r3, #51	; 0x33
 8004682:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}

			break;
 8004686:	e084      	b.n	8004792 <readingSensor+0x276>

			case VOO:
				sensorFlag = getTimer2Variable();
 8004688:	f000 ff1a 	bl	80054c0 <getTimer2Variable>
 800468c:	4603      	mov	r3, r0
 800468e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if(sensorFlag == 0)
 8004692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004696:	2b00      	cmp	r3, #0
 8004698:	d15a      	bne.n	8004750 <readingSensor+0x234>
				{
					userState = CONTATO;
 800469a:	2333      	movs	r3, #51	; 0x33
 800469c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					currentTime = getTimer3Variable();
 80046a0:	f000 ff1a 	bl	80054d8 <getTimer3Variable>
 80046a4:	4603      	mov	r3, r0
 80046a6:	633b      	str	r3, [r7, #48]	; 0x30
					spentTimeVoo= currentTime - referenceTime;
 80046a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
					if(spentTimeVoo<timeMin)
 80046b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d202      	bcs.n	80046be <readingSensor+0x1a2>
					{
						//leitura invalida
						referenceTime = currentTime;
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	673b      	str	r3, [r7, #112]	; 0x70
 80046bc:	e069      	b.n	8004792 <readingSensor+0x276>

					}
					else if(spentTimeVoo>timeMax)
 80046be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d902      	bls.n	80046cc <readingSensor+0x1b0>
					{

						referenceTime = currentTime;
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	673b      	str	r3, [r7, #112]	; 0x70
 80046ca:	e062      	b.n	8004792 <readingSensor+0x276>
						//leitura invalida
					}
					else if((spentTimeVoo+spentTimeSolo)>userIntervalSaltos)
 80046cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046d0:	4413      	add	r3, r2
 80046d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d206      	bcs.n	80046e6 <readingSensor+0x1ca>
						 * derando que o tempo do ciclo (voo+contato) é um salto
						 * completo e portanto, userIntervalSaltos que é um param
						 * de configuração que limita o valor máximo que o ciclo
						 * deve ter.
						 */
						intervalSaltos = spentTimeVoo+spentTimeSolo;
 80046d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046dc:	4413      	add	r3, r2
 80046de:	65bb      	str	r3, [r7, #88]	; 0x58
						referenceTime = currentTime;
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	673b      	str	r3, [r7, #112]	; 0x70
 80046e4:	e055      	b.n	8004792 <readingSensor+0x276>


					}
					else
					{	//CONDIÇÃO NA QUAL O SALTO É VALIDO
						vooTime[samples] = spentTimeVoo;
 80046e6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	3378      	adds	r3, #120	; 0x78
 80046ee:	443b      	add	r3, r7
 80046f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f2:	f843 2c78 	str.w	r2, [r3, #-120]
						contatoTime[samples] = spentTimeSolo;
 80046f6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	3378      	adds	r3, #120	; 0x78
 80046fe:	443b      	add	r3, r7
 8004700:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004702:	f843 2c64 	str.w	r2, [r3, #-100]
						referenceTime = currentTime;
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	673b      	str	r3, [r7, #112]	; 0x70
						numSaltos++;
 800470a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800470e:	3301      	adds	r3, #1
 8004710:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
						samples++;
 8004714:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004718:	3301      	adds	r3, #1
 800471a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						if(numSaltos == userNumSaltos)
 800471e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8004722:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004726:	429a      	cmp	r2, r3
 8004728:	d10e      	bne.n	8004748 <readingSensor+0x22c>
						{
							numSeries++;
 800472a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800472e:	3301      	adds	r3, #1
 8004730:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
							userState = INTERVALO;
 8004734:	2337      	movs	r3, #55	; 0x37
 8004736:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 800473a:	2200      	movs	r2, #0
 800473c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004740:	486b      	ldr	r0, [pc, #428]	; (80048f0 <readingSensor+0x3d4>)
 8004742:	f002 fbb1 	bl	8006ea8 <HAL_GPIO_WritePin>
 8004746:	e024      	b.n	8004792 <readingSensor+0x276>
						}
						else userState = CONTATO;
 8004748:	2333      	movs	r3, #51	; 0x33
 800474a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800474e:	e020      	b.n	8004792 <readingSensor+0x276>
					}
				}
				else
				{
					userState = VOO;
 8004750:	2334      	movs	r3, #52	; 0x34
 8004752:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			break;
 8004756:	e01c      	b.n	8004792 <readingSensor+0x276>

			case INTERVALO:
				currentTime = getTimer3Variable();
 8004758:	f000 febe 	bl	80054d8 <getTimer3Variable>
 800475c:	4603      	mov	r3, r0
 800475e:	633b      	str	r3, [r7, #48]	; 0x30
				intervalSeries = currentTime - referenceTime;
 8004760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	657b      	str	r3, [r7, #84]	; 0x54
				if(intervalSeries == userIntervalSeries)
 8004768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800476a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476c:	429a      	cmp	r2, r3
 800476e:	d10c      	bne.n	800478a <readingSensor+0x26e>
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8004770:	2201      	movs	r2, #1
 8004772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004776:	485e      	ldr	r0, [pc, #376]	; (80048f0 <readingSensor+0x3d4>)
 8004778:	f002 fb96 	bl	8006ea8 <HAL_GPIO_WritePin>
					userState = CONTATO;
 800477c:	2333      	movs	r3, #51	; 0x33
 800477e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					numSaltos = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8004788:	e002      	b.n	8004790 <readingSensor+0x274>
				}
				else userState = INTERVALO;
 800478a:	2337      	movs	r3, #55	; 0x37
 800478c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				break;
 8004790:	bf00      	nop
	while(key != PARAR && numSeries != userNumSeries) //USADO PARA DEBUGGER DESCONSIDERANDO O TIMEOUT e NUM SALTOS
 8004792:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004796:	2b50      	cmp	r3, #80	; 0x50
 8004798:	d006      	beq.n	80047a8 <readingSensor+0x28c>
 800479a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800479e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047a2:	429a      	cmp	r2, r3
 80047a4:	f47f af0f 	bne.w	80045c6 <readingSensor+0xaa>
		}
	}

	if(totalTime == userTime)
 80047a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d109      	bne.n	80047c4 <readingSensor+0x2a8>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80047b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047b4:	484e      	ldr	r0, [pc, #312]	; (80048f0 <readingSensor+0x3d4>)
 80047b6:	f002 fb8f 	bl	8006ed8 <HAL_GPIO_TogglePin>
		measuredData.timeout = TRUE;
 80047ba:	4b4e      	ldr	r3, [pc, #312]	; (80048f4 <readingSensor+0x3d8>)
 80047bc:	2201      	movs	r2, #1
 80047be:	70da      	strb	r2, [r3, #3]
		return TIMEOUT;
 80047c0:	2335      	movs	r3, #53	; 0x35
 80047c2:	e090      	b.n	80048e6 <readingSensor+0x3ca>
	}

	else if(numSaltos == userNumSaltos)
 80047c4:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80047c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d145      	bne.n	800485c <readingSensor+0x340>
	{
		measuredData.timeout = FALSE;
 80047d0:	4b48      	ldr	r3, [pc, #288]	; (80048f4 <readingSensor+0x3d8>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	70da      	strb	r2, [r3, #3]
		measuredData.resultTestAcquiredSamples = samples;
 80047d6:	4a47      	ldr	r2, [pc, #284]	; (80048f4 <readingSensor+0x3d8>)
 80047d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80047dc:	7053      	strb	r3, [r2, #1]
		for(unsigned i=0;i<samples;i++)
 80047de:	2300      	movs	r3, #0
 80047e0:	663b      	str	r3, [r7, #96]	; 0x60
 80047e2:	e034      	b.n	800484e <readingSensor+0x332>
		{
			measuredData.Measurement[i].sampleNum = i+1;
 80047e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	3301      	adds	r3, #1
 80047ea:	b2d8      	uxtb	r0, r3
 80047ec:	4941      	ldr	r1, [pc, #260]	; (80048f4 <readingSensor+0x3d8>)
 80047ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047f0:	4613      	mov	r3, r2
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	3304      	adds	r3, #4
 80047fc:	4602      	mov	r2, r0
 80047fe:	701a      	strb	r2, [r3, #0]
			measuredData.Measurement[i].uiVooTime = vooTime[i];
 8004800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	3378      	adds	r3, #120	; 0x78
 8004806:	443b      	add	r3, r7
 8004808:	f853 1c78 	ldr.w	r1, [r3, #-120]
 800480c:	4839      	ldr	r0, [pc, #228]	; (80048f4 <readingSensor+0x3d8>)
 800480e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004810:	4613      	mov	r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4403      	add	r3, r0
 800481a:	3308      	adds	r3, #8
 800481c:	6019      	str	r1, [r3, #0]
			measuredData.Measurement[i].uiSoloTime = contatoTime[i];
 800481e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	3378      	adds	r3, #120	; 0x78
 8004824:	443b      	add	r3, r7
 8004826:	f853 1c64 	ldr.w	r1, [r3, #-100]
 800482a:	4832      	ldr	r0, [pc, #200]	; (80048f4 <readingSensor+0x3d8>)
 800482c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4403      	add	r3, r0
 8004838:	330c      	adds	r3, #12
 800483a:	6019      	str	r1, [r3, #0]
			setUserResultData(&measuredData,indexTest);
 800483c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004840:	4619      	mov	r1, r3
 8004842:	482c      	ldr	r0, [pc, #176]	; (80048f4 <readingSensor+0x3d8>)
 8004844:	f7fd fd0e 	bl	8002264 <setUserResultData>
		for(unsigned i=0;i<samples;i++)
 8004848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800484a:	3301      	adds	r3, #1
 800484c:	663b      	str	r3, [r7, #96]	; 0x60
 800484e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004852:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004854:	429a      	cmp	r2, r3
 8004856:	d3c5      	bcc.n	80047e4 <readingSensor+0x2c8>
		}
		return MAX_SALTOS;
 8004858:	2336      	movs	r3, #54	; 0x36
 800485a:	e044      	b.n	80048e6 <readingSensor+0x3ca>
	}

	else
	{
		measuredData.timeout = FALSE;
 800485c:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <readingSensor+0x3d8>)
 800485e:	2200      	movs	r2, #0
 8004860:	70da      	strb	r2, [r3, #3]
		measuredData.resultTestAcquiredSamples = samples;
 8004862:	4a24      	ldr	r2, [pc, #144]	; (80048f4 <readingSensor+0x3d8>)
 8004864:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004868:	7053      	strb	r3, [r2, #1]
		for(unsigned i=0;i<samples;i++)
 800486a:	2300      	movs	r3, #0
 800486c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800486e:	e034      	b.n	80048da <readingSensor+0x3be>
		{
			measuredData.Measurement[i].sampleNum = i+1;
 8004870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004872:	b2db      	uxtb	r3, r3
 8004874:	3301      	adds	r3, #1
 8004876:	b2d8      	uxtb	r0, r3
 8004878:	491e      	ldr	r1, [pc, #120]	; (80048f4 <readingSensor+0x3d8>)
 800487a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800487c:	4613      	mov	r3, r2
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	3304      	adds	r3, #4
 8004888:	4602      	mov	r2, r0
 800488a:	701a      	strb	r2, [r3, #0]
			measuredData.Measurement[i].uiVooTime = vooTime[i];
 800488c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	3378      	adds	r3, #120	; 0x78
 8004892:	443b      	add	r3, r7
 8004894:	f853 1c78 	ldr.w	r1, [r3, #-120]
 8004898:	4816      	ldr	r0, [pc, #88]	; (80048f4 <readingSensor+0x3d8>)
 800489a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800489c:	4613      	mov	r3, r2
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4403      	add	r3, r0
 80048a6:	3308      	adds	r3, #8
 80048a8:	6019      	str	r1, [r3, #0]
			measuredData.Measurement[i].uiSoloTime = contatoTime[i];
 80048aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	3378      	adds	r3, #120	; 0x78
 80048b0:	443b      	add	r3, r7
 80048b2:	f853 1c64 	ldr.w	r1, [r3, #-100]
 80048b6:	480f      	ldr	r0, [pc, #60]	; (80048f4 <readingSensor+0x3d8>)
 80048b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4403      	add	r3, r0
 80048c4:	330c      	adds	r3, #12
 80048c6:	6019      	str	r1, [r3, #0]
			setUserResultData(&measuredData,indexTest);
 80048c8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80048cc:	4619      	mov	r1, r3
 80048ce:	4809      	ldr	r0, [pc, #36]	; (80048f4 <readingSensor+0x3d8>)
 80048d0:	f7fd fcc8 	bl	8002264 <setUserResultData>
		for(unsigned i=0;i<samples;i++)
 80048d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d6:	3301      	adds	r3, #1
 80048d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80048de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d3c5      	bcc.n	8004870 <readingSensor+0x354>
		}
		return PARAR;
 80048e4:	2350      	movs	r3, #80	; 0x50
	}
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3778      	adds	r7, #120	; 0x78
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40011000 	.word	0x40011000
 80048f4:	200004c0 	.word	0x200004c0

080048f8 <getNextSub>:

struct Menu menuSub ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextSub(unsigned char nextState)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	71fb      	strb	r3, [r7, #7]
    menuSub.menuNext = nextState;
 8004902:	4a05      	ldr	r2, [pc, #20]	; (8004918 <getNextSub+0x20>)
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	7013      	strb	r3, [r2, #0]
    return menuSub.menuNext;
 8004908:	4b03      	ldr	r3, [pc, #12]	; (8004918 <getNextSub+0x20>)
 800490a:	781b      	ldrb	r3, [r3, #0]
}
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000500 	.word	0x20000500

0800491c <setSelectSub>:

unsigned char setSelectSub(unsigned char *selectedState)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
    unsigned char state = *selectedState;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	73fb      	strb	r3, [r7, #15]
    menuSub.menuSelect = state;
 800492a:	4a05      	ldr	r2, [pc, #20]	; (8004940 <setSelectSub+0x24>)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	7053      	strb	r3, [r2, #1]
    return menuSub.menuSelect;
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <setSelectSub+0x24>)
 8004932:	785b      	ldrb	r3, [r3, #1]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000500 	.word	0x20000500

08004944 <setInsertData>:

unsigned char setInsertData(struct dataInsert* dataToInsert)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    struct dataInsert* userDataInput = dataToInsert;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60fb      	str	r3, [r7, #12]
    setUserInputConfigData(userDataInput);
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f7fd fc09 	bl	8002168 <setUserInputConfigData>
}
 8004956:	bf00      	nop
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <SET_HW_TIMER2>:

static unsigned char encoderStatus;
static unsigned char timerStatus;

unsigned char SET_HW_TIMER2(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
	encoderStatus = 0;
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <SET_HW_TIMER2+0x40>)
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
//	TIM_HandleTypeDef* htim2 =  getTimer2Instance();
	unsigned char* htim2 =  getTimer2Instance();
 800496c:	f000 fd94 	bl	8005498 <getTimer2Instance>
 8004970:	4603      	mov	r3, r0
 8004972:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Start_IT(htim2, TIM_CHANNEL_ALL);
 8004974:	213c      	movs	r1, #60	; 0x3c
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f003 fc74 	bl	8008264 <HAL_TIM_Encoder_Start_IT>
 800497c:	4603      	mov	r3, r0
 800497e:	461a      	mov	r2, r3
 8004980:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <SET_HW_TIMER2+0x40>)
 8004982:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004984:	2064      	movs	r0, #100	; 0x64
 8004986:	f001 fd3b 	bl	8006400 <HAL_Delay>
	return !encoderStatus;
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <SET_HW_TIMER2+0x40>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf0c      	ite	eq
 8004992:	2301      	moveq	r3, #1
 8004994:	2300      	movne	r3, #0
 8004996:	b2db      	uxtb	r3, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	2000052c 	.word	0x2000052c

080049a4 <RESET_HW_TIMER2>:

unsigned char RESET_HW_TIMER2(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
    encoderStatus = 1;
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <RESET_HW_TIMER2+0x38>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	701a      	strb	r2, [r3, #0]
//    TIM_HandleTypeDef* htim2 =  getTimer2Instance();
    unsigned char* htim2 =  getTimer2Instance();
 80049b0:	f000 fd72 	bl	8005498 <getTimer2Instance>
 80049b4:	4603      	mov	r3, r0
 80049b6:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Stop_IT(htim2, TIM_CHANNEL_ALL);
 80049b8:	213c      	movs	r1, #60	; 0x3c
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f003 fd00 	bl	80083c0 <HAL_TIM_Encoder_Stop_IT>
 80049c0:	4603      	mov	r3, r0
 80049c2:	461a      	mov	r2, r3
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <RESET_HW_TIMER2+0x38>)
 80049c6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 80049c8:	2064      	movs	r0, #100	; 0x64
 80049ca:	f001 fd19 	bl	8006400 <HAL_Delay>
	return encoderStatus;
 80049ce:	4b03      	ldr	r3, [pc, #12]	; (80049dc <RESET_HW_TIMER2+0x38>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	2000052c 	.word	0x2000052c

080049e0 <SET_HW_TIMER3>:

unsigned char SET_HW_TIMER3(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
    timerStatus = 0;
 80049e6:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <SET_HW_TIMER3+0x40>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 80049ec:	f000 fd5e 	bl	80054ac <getTimer3Instance>
 80049f0:	4603      	mov	r3, r0
 80049f2:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Start_IT(htim3);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f003 fb13 	bl	8008020 <HAL_TIM_Base_Start_IT>
 80049fa:	4603      	mov	r3, r0
 80049fc:	461a      	mov	r2, r3
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <SET_HW_TIMER3+0x40>)
 8004a00:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 8004a02:	2064      	movs	r0, #100	; 0x64
 8004a04:	f001 fcfc 	bl	8006400 <HAL_Delay>
    return !timerStatus;
 8004a08:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <SET_HW_TIMER3+0x40>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	2000052d 	.word	0x2000052d

08004a24 <RESET_HW_TIMER3>:

unsigned char RESET_HW_TIMER3(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
    timerStatus = 1;
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <RESET_HW_TIMER3+0x34>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8004a30:	f000 fd3c 	bl	80054ac <getTimer3Instance>
 8004a34:	4603      	mov	r3, r0
 8004a36:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Stop_IT(htim3);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f003 fb43 	bl	80080c4 <HAL_TIM_Base_Stop_IT>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	461a      	mov	r2, r3
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <RESET_HW_TIMER3+0x34>)
 8004a44:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 8004a46:	2064      	movs	r0, #100	; 0x64
 8004a48:	f001 fcda 	bl	8006400 <HAL_Delay>
    return timerStatus;
 8004a4c:	4b02      	ldr	r3, [pc, #8]	; (8004a58 <RESET_HW_TIMER3+0x34>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	2000052d 	.word	0x2000052d

08004a5c <SET_HW_UART>:
#include "UARTHW.h"
#include "main.h"


unsigned char SET_HW_UART(unsigned char* addr)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	60fb      	str	r3, [r7, #12]
    __HAL_UART_ENABLE(instance);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a76:	60da      	str	r2, [r3, #12]
}
 8004a78:	bf00      	nop
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <RESET_HW_UART>:

unsigned char RESET_HW_UART(unsigned char* addr)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60fb      	str	r3, [r7, #12]
    __HAL_UART_DISABLE(instance);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a9e:	60da      	str	r2, [r3, #12]
}
 8004aa0:	bf00      	nop
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2110      	movs	r1, #16
 8004ab4:	4803      	ldr	r0, [pc, #12]	; (8004ac4 <SELECT+0x18>)
 8004ab6:	f002 f9f7 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004aba:	2001      	movs	r0, #1
 8004abc:	f001 fca0 	bl	8006400 <HAL_Delay>
}
 8004ac0:	bf00      	nop
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40010800 	.word	0x40010800

08004ac8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004acc:	2201      	movs	r2, #1
 8004ace:	2110      	movs	r1, #16
 8004ad0:	4803      	ldr	r0, [pc, #12]	; (8004ae0 <DESELECT+0x18>)
 8004ad2:	f002 f9e9 	bl	8006ea8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	f001 fc92 	bl	8006400 <HAL_Delay>
}
 8004adc:	bf00      	nop
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40010800 	.word	0x40010800

08004ae4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004aee:	bf00      	nop
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <SPI_TxByte+0x30>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d1f8      	bne.n	8004af0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8004afe:	1df9      	adds	r1, r7, #7
 8004b00:	2364      	movs	r3, #100	; 0x64
 8004b02:	2201      	movs	r2, #1
 8004b04:	4803      	ldr	r0, [pc, #12]	; (8004b14 <SPI_TxByte+0x30>)
 8004b06:	f002 feb7 	bl	8007878 <HAL_SPI_Transmit>
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000530 	.word	0x20000530

08004b18 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004b24:	bf00      	nop
 8004b26:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <SPI_TxBuffer+0x30>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d1f8      	bne.n	8004b26 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8004b34:	887a      	ldrh	r2, [r7, #2]
 8004b36:	2364      	movs	r3, #100	; 0x64
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4803      	ldr	r0, [pc, #12]	; (8004b48 <SPI_TxBuffer+0x30>)
 8004b3c:	f002 fe9c 	bl	8007878 <HAL_SPI_Transmit>
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000530 	.word	0x20000530

08004b4c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8004b52:	23ff      	movs	r3, #255	; 0xff
 8004b54:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004b56:	bf00      	nop
 8004b58:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <SPI_RxByte+0x34>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d1f8      	bne.n	8004b58 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8004b66:	1dba      	adds	r2, r7, #6
 8004b68:	1df9      	adds	r1, r7, #7
 8004b6a:	2364      	movs	r3, #100	; 0x64
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	2301      	movs	r3, #1
 8004b70:	4803      	ldr	r0, [pc, #12]	; (8004b80 <SPI_RxByte+0x34>)
 8004b72:	f002 ffbd 	bl	8007af0 <HAL_SPI_TransmitReceive>

	return data;
 8004b76:	79bb      	ldrb	r3, [r7, #6]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000530 	.word	0x20000530

08004b84 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8004b8c:	f7ff ffde 	bl	8004b4c <SPI_RxByte>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	701a      	strb	r2, [r3, #0]
}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <SD_ReadyWait+0x30>)
 8004ba8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004bac:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8004bae:	f7ff ffcd 	bl	8004b4c <SPI_RxByte>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	2bff      	cmp	r3, #255	; 0xff
 8004bba:	d003      	beq.n	8004bc4 <SD_ReadyWait+0x24>
 8004bbc:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <SD_ReadyWait+0x30>)
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f4      	bne.n	8004bae <SD_ReadyWait+0xe>

	return res;
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	200006ca 	.word	0x200006ca

08004bd4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8004bda:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004bde:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8004be0:	f7ff ff72 	bl	8004ac8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8004be4:	2300      	movs	r3, #0
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	e005      	b.n	8004bf6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8004bea:	20ff      	movs	r0, #255	; 0xff
 8004bec:	f7ff ff7a 	bl	8004ae4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b09      	cmp	r3, #9
 8004bfa:	ddf6      	ble.n	8004bea <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8004bfc:	f7ff ff56 	bl	8004aac <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8004c00:	2340      	movs	r3, #64	; 0x40
 8004c02:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8004c04:	2300      	movs	r3, #0
 8004c06:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004c14:	2395      	movs	r3, #149	; 0x95
 8004c16:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8004c18:	463b      	mov	r3, r7
 8004c1a:	2106      	movs	r1, #6
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff ff7b 	bl	8004b18 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8004c22:	e002      	b.n	8004c2a <SD_PowerOn+0x56>
	{
		cnt--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8004c2a:	f7ff ff8f 	bl	8004b4c <SPI_RxByte>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d002      	beq.n	8004c3a <SD_PowerOn+0x66>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f4      	bne.n	8004c24 <SD_PowerOn+0x50>
	}

	DESELECT();
 8004c3a:	f7ff ff45 	bl	8004ac8 <DESELECT>
	SPI_TxByte(0XFF);
 8004c3e:	20ff      	movs	r0, #255	; 0xff
 8004c40:	f7ff ff50 	bl	8004ae4 <SPI_TxByte>

	PowerFlag = 1;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <SD_PowerOn+0x80>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	2000052f 	.word	0x2000052f

08004c58 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004c5c:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <SD_PowerOff+0x14>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]
}
 8004c62:	bf00      	nop
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	2000052f 	.word	0x2000052f

08004c70 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004c74:	4b02      	ldr	r3, [pc, #8]	; (8004c80 <SD_CheckPower+0x10>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	2000052f 	.word	0x2000052f

08004c84 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8004c8e:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <SD_RxDataBlock+0x58>)
 8004c90:	22c8      	movs	r2, #200	; 0xc8
 8004c92:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8004c94:	f7ff ff5a 	bl	8004b4c <SPI_RxByte>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2bff      	cmp	r3, #255	; 0xff
 8004ca0:	d103      	bne.n	8004caa <SD_RxDataBlock+0x26>
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <SD_RxDataBlock+0x58>)
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f4      	bne.n	8004c94 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	2bfe      	cmp	r3, #254	; 0xfe
 8004cae:	d001      	beq.n	8004cb4 <SD_RxDataBlock+0x30>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e00f      	b.n	8004cd4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff ff62 	bl	8004b84 <SPI_RxBytePtr>
	} while(len--);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	1e5a      	subs	r2, r3, #1
 8004cc4:	603a      	str	r2, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f4      	bne.n	8004cb4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8004cca:	f7ff ff3f 	bl	8004b4c <SPI_RxByte>
	SPI_RxByte();
 8004cce:	f7ff ff3d 	bl	8004b4c <SPI_RxByte>

	return TRUE;
 8004cd2:	2301      	movs	r3, #1
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	200006c9 	.word	0x200006c9

08004ce0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004cf0:	f7ff ff56 	bl	8004ba0 <SD_ReadyWait>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2bff      	cmp	r3, #255	; 0xff
 8004cf8:	d001      	beq.n	8004cfe <SD_TxDataBlock+0x1e>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e02f      	b.n	8004d5e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff feef 	bl	8004ae4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	2bfd      	cmp	r3, #253	; 0xfd
 8004d0a:	d020      	beq.n	8004d4e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ff01 	bl	8004b18 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8004d16:	f7ff ff19 	bl	8004b4c <SPI_RxByte>
		SPI_RxByte();
 8004d1a:	f7ff ff17 	bl	8004b4c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8004d1e:	e00b      	b.n	8004d38 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004d20:	f7ff ff14 	bl	8004b4c <SPI_RxByte>
 8004d24:	4603      	mov	r3, r0
 8004d26:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	d006      	beq.n	8004d40 <SD_TxDataBlock+0x60>
			i++;
 8004d32:	7bbb      	ldrb	r3, [r7, #14]
 8004d34:	3301      	adds	r3, #1
 8004d36:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8004d38:	7bbb      	ldrb	r3, [r7, #14]
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d9f0      	bls.n	8004d20 <SD_TxDataBlock+0x40>
 8004d3e:	e000      	b.n	8004d42 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004d40:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8004d42:	bf00      	nop
 8004d44:	f7ff ff02 	bl	8004b4c <SPI_RxByte>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0fa      	beq.n	8004d44 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d101      	bne.n	8004d5c <SD_TxDataBlock+0x7c>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <SD_TxDataBlock+0x7e>

	return FALSE;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	6039      	str	r1, [r7, #0]
 8004d70:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8004d72:	f7ff ff15 	bl	8004ba0 <SD_ReadyWait>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2bff      	cmp	r3, #255	; 0xff
 8004d7a:	d001      	beq.n	8004d80 <SD_SendCmd+0x1a>
 8004d7c:	23ff      	movs	r3, #255	; 0xff
 8004d7e:	e042      	b.n	8004e06 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff feae 	bl	8004ae4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	0e1b      	lsrs	r3, r3, #24
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff fea8 	bl	8004ae4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	0c1b      	lsrs	r3, r3, #16
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff fea2 	bl	8004ae4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff fe9c 	bl	8004ae4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fe97 	bl	8004ae4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d102      	bne.n	8004dc2 <SD_SendCmd+0x5c>
 8004dbc:	2395      	movs	r3, #149	; 0x95
 8004dbe:	73fb      	strb	r3, [r7, #15]
 8004dc0:	e007      	b.n	8004dd2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	2b48      	cmp	r3, #72	; 0x48
 8004dc6:	d102      	bne.n	8004dce <SD_SendCmd+0x68>
 8004dc8:	2387      	movs	r3, #135	; 0x87
 8004dca:	73fb      	strb	r3, [r7, #15]
 8004dcc:	e001      	b.n	8004dd2 <SD_SendCmd+0x6c>
	else crc = 1;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff fe85 	bl	8004ae4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	2b4c      	cmp	r3, #76	; 0x4c
 8004dde:	d101      	bne.n	8004de4 <SD_SendCmd+0x7e>
 8004de0:	f7ff feb4 	bl	8004b4c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004de4:	230a      	movs	r3, #10
 8004de6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8004de8:	f7ff feb0 	bl	8004b4c <SPI_RxByte>
 8004dec:	4603      	mov	r3, r0
 8004dee:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004df0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	da05      	bge.n	8004e04 <SD_SendCmd+0x9e>
 8004df8:	7bbb      	ldrb	r3, [r7, #14]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	73bb      	strb	r3, [r7, #14]
 8004dfe:	7bbb      	ldrb	r3, [r7, #14]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1f1      	bne.n	8004de8 <SD_SendCmd+0x82>

	return res;
 8004e04:	7b7b      	ldrb	r3, [r7, #13]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <SD_disk_initialize+0x14>
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0d1      	b.n	8004fc8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004e24:	4b6a      	ldr	r3, [pc, #424]	; (8004fd0 <SD_disk_initialize+0x1c0>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <SD_disk_initialize+0x2a>
 8004e32:	4b67      	ldr	r3, [pc, #412]	; (8004fd0 <SD_disk_initialize+0x1c0>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	e0c6      	b.n	8004fc8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8004e3a:	f7ff fecb 	bl	8004bd4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8004e3e:	f7ff fe35 	bl	8004aac <SELECT>

	/* check disk type */
	type = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8004e46:	2100      	movs	r1, #0
 8004e48:	2040      	movs	r0, #64	; 0x40
 8004e4a:	f7ff ff8c 	bl	8004d66 <SD_SendCmd>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	f040 80a1 	bne.w	8004f98 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8004e56:	4b5f      	ldr	r3, [pc, #380]	; (8004fd4 <SD_disk_initialize+0x1c4>)
 8004e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e5c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004e5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004e62:	2048      	movs	r0, #72	; 0x48
 8004e64:	f7ff ff7f 	bl	8004d66 <SD_SendCmd>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d155      	bne.n	8004f1a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
 8004e72:	e00c      	b.n	8004e8e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004e74:	7bfc      	ldrb	r4, [r7, #15]
 8004e76:	f7ff fe69 	bl	8004b4c <SPI_RxByte>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f104 0310 	add.w	r3, r4, #16
 8004e82:	443b      	add	r3, r7
 8004e84:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d9ef      	bls.n	8004e74 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004e94:	7abb      	ldrb	r3, [r7, #10]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d17e      	bne.n	8004f98 <SD_disk_initialize+0x188>
 8004e9a:	7afb      	ldrb	r3, [r7, #11]
 8004e9c:	2baa      	cmp	r3, #170	; 0xaa
 8004e9e:	d17b      	bne.n	8004f98 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	2077      	movs	r0, #119	; 0x77
 8004ea4:	f7ff ff5f 	bl	8004d66 <SD_SendCmd>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d807      	bhi.n	8004ebe <SD_disk_initialize+0xae>
 8004eae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004eb2:	2069      	movs	r0, #105	; 0x69
 8004eb4:	f7ff ff57 	bl	8004d66 <SD_SendCmd>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8004ebe:	4b45      	ldr	r3, [pc, #276]	; (8004fd4 <SD_disk_initialize+0x1c4>)
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1ec      	bne.n	8004ea0 <SD_disk_initialize+0x90>
 8004ec6:	e000      	b.n	8004eca <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004ec8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004eca:	4b42      	ldr	r3, [pc, #264]	; (8004fd4 <SD_disk_initialize+0x1c4>)
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d062      	beq.n	8004f98 <SD_disk_initialize+0x188>
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	207a      	movs	r0, #122	; 0x7a
 8004ed6:	f7ff ff46 	bl	8004d66 <SD_SendCmd>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d15b      	bne.n	8004f98 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	73fb      	strb	r3, [r7, #15]
 8004ee4:	e00c      	b.n	8004f00 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8004ee6:	7bfc      	ldrb	r4, [r7, #15]
 8004ee8:	f7ff fe30 	bl	8004b4c <SPI_RxByte>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f104 0310 	add.w	r3, r4, #16
 8004ef4:	443b      	add	r3, r7
 8004ef6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	3301      	adds	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d9ef      	bls.n	8004ee6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004f06:	7a3b      	ldrb	r3, [r7, #8]
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <SD_disk_initialize+0x104>
 8004f10:	230c      	movs	r3, #12
 8004f12:	e000      	b.n	8004f16 <SD_disk_initialize+0x106>
 8004f14:	2304      	movs	r3, #4
 8004f16:	73bb      	strb	r3, [r7, #14]
 8004f18:	e03e      	b.n	8004f98 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	2077      	movs	r0, #119	; 0x77
 8004f1e:	f7ff ff22 	bl	8004d66 <SD_SendCmd>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d808      	bhi.n	8004f3a <SD_disk_initialize+0x12a>
 8004f28:	2100      	movs	r1, #0
 8004f2a:	2069      	movs	r0, #105	; 0x69
 8004f2c:	f7ff ff1b 	bl	8004d66 <SD_SendCmd>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d801      	bhi.n	8004f3a <SD_disk_initialize+0x12a>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e000      	b.n	8004f3c <SD_disk_initialize+0x12c>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004f3e:	7bbb      	ldrb	r3, [r7, #14]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d10e      	bne.n	8004f62 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8004f44:	2100      	movs	r1, #0
 8004f46:	2077      	movs	r0, #119	; 0x77
 8004f48:	f7ff ff0d 	bl	8004d66 <SD_SendCmd>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d80e      	bhi.n	8004f70 <SD_disk_initialize+0x160>
 8004f52:	2100      	movs	r1, #0
 8004f54:	2069      	movs	r0, #105	; 0x69
 8004f56:	f7ff ff06 	bl	8004d66 <SD_SendCmd>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d107      	bne.n	8004f70 <SD_disk_initialize+0x160>
 8004f60:	e00c      	b.n	8004f7c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004f62:	2100      	movs	r1, #0
 8004f64:	2041      	movs	r0, #65	; 0x41
 8004f66:	f7ff fefe 	bl	8004d66 <SD_SendCmd>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d004      	beq.n	8004f7a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8004f70:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <SD_disk_initialize+0x1c4>)
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e2      	bne.n	8004f3e <SD_disk_initialize+0x12e>
 8004f78:	e000      	b.n	8004f7c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004f7a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004f7c:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <SD_disk_initialize+0x1c4>)
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <SD_disk_initialize+0x184>
 8004f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f88:	2050      	movs	r0, #80	; 0x50
 8004f8a:	f7ff feec 	bl	8004d66 <SD_SendCmd>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <SD_disk_initialize+0x188>
 8004f94:	2300      	movs	r3, #0
 8004f96:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8004f98:	4a0f      	ldr	r2, [pc, #60]	; (8004fd8 <SD_disk_initialize+0x1c8>)
 8004f9a:	7bbb      	ldrb	r3, [r7, #14]
 8004f9c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8004f9e:	f7ff fd93 	bl	8004ac8 <DESELECT>
	SPI_RxByte();
 8004fa2:	f7ff fdd3 	bl	8004b4c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004fa6:	7bbb      	ldrb	r3, [r7, #14]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8004fac:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <SD_disk_initialize+0x1c0>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <SD_disk_initialize+0x1c0>)
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	e001      	b.n	8004fc2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8004fbe:	f7ff fe4b 	bl	8004c58 <SD_PowerOff>
	}

	return Stat;
 8004fc2:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <SD_disk_initialize+0x1c0>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	b2db      	uxtb	r3, r3
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd90      	pop	{r4, r7, pc}
 8004fd0:	200000e0 	.word	0x200000e0
 8004fd4:	200006c9 	.word	0x200006c9
 8004fd8:	2000052e 	.word	0x2000052e

08004fdc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <SD_disk_status+0x14>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e002      	b.n	8004ff6 <SD_disk_status+0x1a>
	return Stat;
 8004ff0:	4b03      	ldr	r3, [pc, #12]	; (8005000 <SD_disk_status+0x24>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	b2db      	uxtb	r3, r3
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr
 8005000:	200000e0 	.word	0x200000e0

08005004 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	4603      	mov	r3, r0
 8005012:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d102      	bne.n	8005020 <SD_disk_read+0x1c>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <SD_disk_read+0x20>
 8005020:	2304      	movs	r3, #4
 8005022:	e051      	b.n	80050c8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005024:	4b2a      	ldr	r3, [pc, #168]	; (80050d0 <SD_disk_read+0xcc>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <SD_disk_read+0x32>
 8005032:	2303      	movs	r3, #3
 8005034:	e048      	b.n	80050c8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8005036:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <SD_disk_read+0xd0>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d102      	bne.n	8005048 <SD_disk_read+0x44>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	025b      	lsls	r3, r3, #9
 8005046:	607b      	str	r3, [r7, #4]

	SELECT();
 8005048:	f7ff fd30 	bl	8004aac <SELECT>

	if (count == 1)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d111      	bne.n	8005076 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	2051      	movs	r0, #81	; 0x51
 8005056:	f7ff fe86 	bl	8004d66 <SD_SendCmd>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d129      	bne.n	80050b4 <SD_disk_read+0xb0>
 8005060:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005064:	68b8      	ldr	r0, [r7, #8]
 8005066:	f7ff fe0d 	bl	8004c84 <SD_RxDataBlock>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d021      	beq.n	80050b4 <SD_disk_read+0xb0>
 8005070:	2300      	movs	r3, #0
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	e01e      	b.n	80050b4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	2052      	movs	r0, #82	; 0x52
 800507a:	f7ff fe74 	bl	8004d66 <SD_SendCmd>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d117      	bne.n	80050b4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8005084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005088:	68b8      	ldr	r0, [r7, #8]
 800508a:	f7ff fdfb 	bl	8004c84 <SD_RxDataBlock>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <SD_disk_read+0xa6>
				buff += 512;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800509a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	3b01      	subs	r3, #1
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1ed      	bne.n	8005084 <SD_disk_read+0x80>
 80050a8:	e000      	b.n	80050ac <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80050aa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80050ac:	2100      	movs	r1, #0
 80050ae:	204c      	movs	r0, #76	; 0x4c
 80050b0:	f7ff fe59 	bl	8004d66 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80050b4:	f7ff fd08 	bl	8004ac8 <DESELECT>
	SPI_RxByte();
 80050b8:	f7ff fd48 	bl	8004b4c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bf14      	ite	ne
 80050c2:	2301      	movne	r3, #1
 80050c4:	2300      	moveq	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	200000e0 	.word	0x200000e0
 80050d4:	2000052e 	.word	0x2000052e

080050d8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	4603      	mov	r3, r0
 80050e6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d102      	bne.n	80050f4 <SD_disk_write+0x1c>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <SD_disk_write+0x20>
 80050f4:	2304      	movs	r3, #4
 80050f6:	e06b      	b.n	80051d0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80050f8:	4b37      	ldr	r3, [pc, #220]	; (80051d8 <SD_disk_write+0x100>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <SD_disk_write+0x32>
 8005106:	2303      	movs	r3, #3
 8005108:	e062      	b.n	80051d0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800510a:	4b33      	ldr	r3, [pc, #204]	; (80051d8 <SD_disk_write+0x100>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <SD_disk_write+0x44>
 8005118:	2302      	movs	r3, #2
 800511a:	e059      	b.n	80051d0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800511c:	4b2f      	ldr	r3, [pc, #188]	; (80051dc <SD_disk_write+0x104>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d102      	bne.n	800512e <SD_disk_write+0x56>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	025b      	lsls	r3, r3, #9
 800512c:	607b      	str	r3, [r7, #4]

	SELECT();
 800512e:	f7ff fcbd 	bl	8004aac <SELECT>

	if (count == 1)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d110      	bne.n	800515a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	2058      	movs	r0, #88	; 0x58
 800513c:	f7ff fe13 	bl	8004d66 <SD_SendCmd>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d13a      	bne.n	80051bc <SD_disk_write+0xe4>
 8005146:	21fe      	movs	r1, #254	; 0xfe
 8005148:	68b8      	ldr	r0, [r7, #8]
 800514a:	f7ff fdc9 	bl	8004ce0 <SD_TxDataBlock>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d033      	beq.n	80051bc <SD_disk_write+0xe4>
			count = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	e030      	b.n	80051bc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800515a:	4b20      	ldr	r3, [pc, #128]	; (80051dc <SD_disk_write+0x104>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8005166:	2100      	movs	r1, #0
 8005168:	2077      	movs	r0, #119	; 0x77
 800516a:	f7ff fdfc 	bl	8004d66 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	2057      	movs	r0, #87	; 0x57
 8005172:	f7ff fdf8 	bl	8004d66 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	2059      	movs	r0, #89	; 0x59
 800517a:	f7ff fdf4 	bl	8004d66 <SD_SendCmd>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d11b      	bne.n	80051bc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005184:	21fc      	movs	r1, #252	; 0xfc
 8005186:	68b8      	ldr	r0, [r7, #8]
 8005188:	f7ff fdaa 	bl	8004ce0 <SD_TxDataBlock>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <SD_disk_write+0xd0>
				buff += 512;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005198:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	3b01      	subs	r3, #1
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1ee      	bne.n	8005184 <SD_disk_write+0xac>
 80051a6:	e000      	b.n	80051aa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80051a8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80051aa:	21fd      	movs	r1, #253	; 0xfd
 80051ac:	2000      	movs	r0, #0
 80051ae:	f7ff fd97 	bl	8004ce0 <SD_TxDataBlock>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <SD_disk_write+0xe4>
			{
				count = 1;
 80051b8:	2301      	movs	r3, #1
 80051ba:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80051bc:	f7ff fc84 	bl	8004ac8 <DESELECT>
	SPI_RxByte();
 80051c0:	f7ff fcc4 	bl	8004b4c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bf14      	ite	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	2300      	moveq	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	200000e0 	.word	0x200000e0
 80051dc:	2000052e 	.word	0x2000052e

080051e0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80051e0:	b590      	push	{r4, r7, lr}
 80051e2:	b08b      	sub	sp, #44	; 0x2c
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	603a      	str	r2, [r7, #0]
 80051ea:	71fb      	strb	r3, [r7, #7]
 80051ec:	460b      	mov	r3, r1
 80051ee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <SD_disk_ioctl+0x1e>
 80051fa:	2304      	movs	r3, #4
 80051fc:	e115      	b.n	800542a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8005204:	79bb      	ldrb	r3, [r7, #6]
 8005206:	2b05      	cmp	r3, #5
 8005208:	d124      	bne.n	8005254 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d012      	beq.n	8005238 <SD_disk_ioctl+0x58>
 8005212:	2b02      	cmp	r3, #2
 8005214:	dc1a      	bgt.n	800524c <SD_disk_ioctl+0x6c>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <SD_disk_ioctl+0x40>
 800521a:	2b01      	cmp	r3, #1
 800521c:	d006      	beq.n	800522c <SD_disk_ioctl+0x4c>
 800521e:	e015      	b.n	800524c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8005220:	f7ff fd1a 	bl	8004c58 <SD_PowerOff>
			res = RES_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800522a:	e0fc      	b.n	8005426 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800522c:	f7ff fcd2 	bl	8004bd4 <SD_PowerOn>
			res = RES_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005236:	e0f6      	b.n	8005426 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	1c5c      	adds	r4, r3, #1
 800523c:	f7ff fd18 	bl	8004c70 <SD_CheckPower>
 8005240:	4603      	mov	r3, r0
 8005242:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8005244:	2300      	movs	r3, #0
 8005246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800524a:	e0ec      	b.n	8005426 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800524c:	2304      	movs	r3, #4
 800524e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005252:	e0e8      	b.n	8005426 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005254:	4b77      	ldr	r3, [pc, #476]	; (8005434 <SD_disk_ioctl+0x254>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <SD_disk_ioctl+0x86>
 8005262:	2303      	movs	r3, #3
 8005264:	e0e1      	b.n	800542a <SD_disk_ioctl+0x24a>

		SELECT();
 8005266:	f7ff fc21 	bl	8004aac <SELECT>

		switch (ctrl)
 800526a:	79bb      	ldrb	r3, [r7, #6]
 800526c:	2b0d      	cmp	r3, #13
 800526e:	f200 80cb 	bhi.w	8005408 <SD_disk_ioctl+0x228>
 8005272:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <SD_disk_ioctl+0x98>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	08005373 	.word	0x08005373
 800527c:	080052b1 	.word	0x080052b1
 8005280:	08005363 	.word	0x08005363
 8005284:	08005409 	.word	0x08005409
 8005288:	08005409 	.word	0x08005409
 800528c:	08005409 	.word	0x08005409
 8005290:	08005409 	.word	0x08005409
 8005294:	08005409 	.word	0x08005409
 8005298:	08005409 	.word	0x08005409
 800529c:	08005409 	.word	0x08005409
 80052a0:	08005409 	.word	0x08005409
 80052a4:	08005385 	.word	0x08005385
 80052a8:	080053a9 	.word	0x080053a9
 80052ac:	080053cd 	.word	0x080053cd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80052b0:	2100      	movs	r1, #0
 80052b2:	2049      	movs	r0, #73	; 0x49
 80052b4:	f7ff fd57 	bl	8004d66 <SD_SendCmd>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 80a8 	bne.w	8005410 <SD_disk_ioctl+0x230>
 80052c0:	f107 030c 	add.w	r3, r7, #12
 80052c4:	2110      	movs	r1, #16
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fcdc 	bl	8004c84 <SD_RxDataBlock>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 809e 	beq.w	8005410 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80052d4:	7b3b      	ldrb	r3, [r7, #12]
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d10e      	bne.n	80052fc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80052de:	7d7b      	ldrb	r3, [r7, #21]
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	7d3b      	ldrb	r3, [r7, #20]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	4413      	add	r3, r2
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3301      	adds	r3, #1
 80052f0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80052f2:	8bfb      	ldrh	r3, [r7, #30]
 80052f4:	029a      	lsls	r2, r3, #10
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e02e      	b.n	800535a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80052fc:	7c7b      	ldrb	r3, [r7, #17]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	b2da      	uxtb	r2, r3
 8005304:	7dbb      	ldrb	r3, [r7, #22]
 8005306:	09db      	lsrs	r3, r3, #7
 8005308:	b2db      	uxtb	r3, r3
 800530a:	4413      	add	r3, r2
 800530c:	b2da      	uxtb	r2, r3
 800530e:	7d7b      	ldrb	r3, [r7, #21]
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 0306 	and.w	r3, r3, #6
 8005318:	b2db      	uxtb	r3, r3
 800531a:	4413      	add	r3, r2
 800531c:	b2db      	uxtb	r3, r3
 800531e:	3302      	adds	r3, #2
 8005320:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8005324:	7d3b      	ldrb	r3, [r7, #20]
 8005326:	099b      	lsrs	r3, r3, #6
 8005328:	b2db      	uxtb	r3, r3
 800532a:	b29a      	uxth	r2, r3
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	b29b      	uxth	r3, r3
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	b29b      	uxth	r3, r3
 8005334:	4413      	add	r3, r2
 8005336:	b29a      	uxth	r2, r3
 8005338:	7cbb      	ldrb	r3, [r7, #18]
 800533a:	029b      	lsls	r3, r3, #10
 800533c:	b29b      	uxth	r3, r3
 800533e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005342:	b29b      	uxth	r3, r3
 8005344:	4413      	add	r3, r2
 8005346:	b29b      	uxth	r3, r3
 8005348:	3301      	adds	r3, #1
 800534a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800534c:	8bfa      	ldrh	r2, [r7, #30]
 800534e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005352:	3b09      	subs	r3, #9
 8005354:	409a      	lsls	r2, r3
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8005360:	e056      	b.n	8005410 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005368:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005370:	e055      	b.n	800541e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8005372:	f7ff fc15 	bl	8004ba0 <SD_ReadyWait>
 8005376:	4603      	mov	r3, r0
 8005378:	2bff      	cmp	r3, #255	; 0xff
 800537a:	d14b      	bne.n	8005414 <SD_disk_ioctl+0x234>
 800537c:	2300      	movs	r3, #0
 800537e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005382:	e047      	b.n	8005414 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8005384:	2100      	movs	r1, #0
 8005386:	2049      	movs	r0, #73	; 0x49
 8005388:	f7ff fced 	bl	8004d66 <SD_SendCmd>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d142      	bne.n	8005418 <SD_disk_ioctl+0x238>
 8005392:	2110      	movs	r1, #16
 8005394:	6a38      	ldr	r0, [r7, #32]
 8005396:	f7ff fc75 	bl	8004c84 <SD_RxDataBlock>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d03b      	beq.n	8005418 <SD_disk_ioctl+0x238>
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80053a6:	e037      	b.n	8005418 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80053a8:	2100      	movs	r1, #0
 80053aa:	204a      	movs	r0, #74	; 0x4a
 80053ac:	f7ff fcdb 	bl	8004d66 <SD_SendCmd>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d132      	bne.n	800541c <SD_disk_ioctl+0x23c>
 80053b6:	2110      	movs	r1, #16
 80053b8:	6a38      	ldr	r0, [r7, #32]
 80053ba:	f7ff fc63 	bl	8004c84 <SD_RxDataBlock>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d02b      	beq.n	800541c <SD_disk_ioctl+0x23c>
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80053ca:	e027      	b.n	800541c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80053cc:	2100      	movs	r1, #0
 80053ce:	207a      	movs	r0, #122	; 0x7a
 80053d0:	f7ff fcc9 	bl	8004d66 <SD_SendCmd>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d116      	bne.n	8005408 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80053da:	2300      	movs	r3, #0
 80053dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80053e0:	e00b      	b.n	80053fa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80053e2:	6a3c      	ldr	r4, [r7, #32]
 80053e4:	1c63      	adds	r3, r4, #1
 80053e6:	623b      	str	r3, [r7, #32]
 80053e8:	f7ff fbb0 	bl	8004b4c <SPI_RxByte>
 80053ec:	4603      	mov	r3, r0
 80053ee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80053f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80053f4:	3301      	adds	r3, #1
 80053f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80053fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d9ef      	bls.n	80053e2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8005408:	2304      	movs	r3, #4
 800540a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800540e:	e006      	b.n	800541e <SD_disk_ioctl+0x23e>
			break;
 8005410:	bf00      	nop
 8005412:	e004      	b.n	800541e <SD_disk_ioctl+0x23e>
			break;
 8005414:	bf00      	nop
 8005416:	e002      	b.n	800541e <SD_disk_ioctl+0x23e>
			break;
 8005418:	bf00      	nop
 800541a:	e000      	b.n	800541e <SD_disk_ioctl+0x23e>
			break;
 800541c:	bf00      	nop
		}

		DESELECT();
 800541e:	f7ff fb53 	bl	8004ac8 <DESELECT>
		SPI_RxByte();
 8005422:	f7ff fb93 	bl	8004b4c <SPI_RxByte>
	}

	return res;
 8005426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800542a:	4618      	mov	r0, r3
 800542c:	372c      	adds	r7, #44	; 0x2c
 800542e:	46bd      	mov	sp, r7
 8005430:	bd90      	pop	{r4, r7, pc}
 8005432:	bf00      	nop
 8005434:	200000e0 	.word	0x200000e0

08005438 <resetTimer3Variable>:
{
	uartFlagRx = FALSE;
}

void resetTimer3Variable()
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
	timer3Data = 0;
 800543c:	4b03      	ldr	r3, [pc, #12]	; (800544c <resetTimer3Variable+0x14>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
}
 8005442:	bf00      	nop
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	200006a4 	.word	0x200006a4

08005450 <getKeyPressed>:

unsigned char getKeyPressed()
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
	return key;
 8005454:	4b03      	ldr	r3, [pc, #12]	; (8005464 <getKeyPressed+0x14>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	b2db      	uxtb	r3, r3
}
 800545a:	4618      	mov	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	200006a0 	.word	0x200006a0

08005468 <resetKeyPressed>:

unsigned char resetKeyPressed()
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
	key = IDDLE;
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <resetKeyPressed+0x18>)
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 8005472:	20c8      	movs	r0, #200	; 0xc8
 8005474:	f000 ffc4 	bl	8006400 <HAL_Delay>
}
 8005478:	bf00      	nop
 800547a:	4618      	mov	r0, r3
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	200006a0 	.word	0x200006a0

08005484 <getUARTInstance>:

unsigned long int* getUARTInstance()
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
	return &huart2;
 8005488:	4b02      	ldr	r3, [pc, #8]	; (8005494 <getUARTInstance+0x10>)
}
 800548a:	4618      	mov	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	bc80      	pop	{r7}
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20000618 	.word	0x20000618

08005498 <getTimer2Instance>:

unsigned char* getTimer2Instance()
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
	return &htim2;
 800549c:	4b02      	ldr	r3, [pc, #8]	; (80054a8 <getTimer2Instance+0x10>)
}
 800549e:	4618      	mov	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20000588 	.word	0x20000588

080054ac <getTimer3Instance>:

unsigned char* getTimer3Instance()
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
	return &htim3;
 80054b0:	4b02      	ldr	r3, [pc, #8]	; (80054bc <getTimer3Instance+0x10>)
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	200005d0 	.word	0x200005d0

080054c0 <getTimer2Variable>:

unsigned char getTimer2Variable()
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
	return sensorFlag;
 80054c4:	4b03      	ldr	r3, [pc, #12]	; (80054d4 <getTimer2Variable+0x14>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	b2db      	uxtb	r3, r3
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	200000e1 	.word	0x200000e1

080054d8 <getTimer3Variable>:

unsigned int getTimer3Variable()
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
	return timer3Data;
 80054dc:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <getTimer3Variable+0x10>)
 80054de:	681b      	ldr	r3, [r3, #0]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	200006a4 	.word	0x200006a4

080054ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80054f2:	f000 ff23 	bl	800633c <HAL_Init>
	  unsigned char menuSelect;
	  unsigned char menuDisplay;
	  unsigned char menuState;
  };

  struct Menu menuTesteMain = {IDDLE,IDDLE,IDDLE,IDDLE};
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
  struct Menu menuTesteSub = {IDDLE,IDDLE,IDDLE,IDDLE};
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
  unsigned char displayUpdateStatus = IDDLE;
 80054fe:	2300      	movs	r3, #0
 8005500:	71fb      	strb	r3, [r7, #7]
  unsigned char cursorPosition[2] = {0,0};
 8005502:	2300      	movs	r3, #0
 8005504:	80bb      	strh	r3, [r7, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005506:	f000 f9f1 	bl	80058ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800550a:	f000 fb55 	bl	8005bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 800550e:	f000 fb35 	bl	8005b7c <MX_DMA_Init>
  MX_TIM2_Init();
 8005512:	f000 fa67 	bl	80059e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005516:	f000 fab9 	bl	8005a8c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800551a:	f000 fb05 	bl	8005b28 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800551e:	f004 f8e9 	bl	80096f4 <MX_FATFS_Init>
  MX_SPI1_Init();
 8005522:	f000 fa29 	bl	8005978 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8005526:	2201      	movs	r2, #1
 8005528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800552c:	48c9      	ldr	r0, [pc, #804]	; (8005854 <main+0x368>)
 800552e:	f001 fcbb 	bl	8006ea8 <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 8005532:	2214      	movs	r2, #20
 8005534:	49c8      	ldr	r1, [pc, #800]	; (8005858 <main+0x36c>)
 8005536:	48c9      	ldr	r0, [pc, #804]	; (800585c <main+0x370>)
 8005538:	f003 fbb7 	bl	8008caa <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800553c:	4bc8      	ldr	r3, [pc, #800]	; (8005860 <main+0x374>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4bc7      	ldr	r3, [pc, #796]	; (8005860 <main+0x374>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0204 	bic.w	r2, r2, #4
 800554a:	601a      	str	r2, [r3, #0]
  homeDataDisplay(appNameMsg,companyNameMsg,appVersionMsg);
 800554c:	4bc5      	ldr	r3, [pc, #788]	; (8005864 <main+0x378>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4ac5      	ldr	r2, [pc, #788]	; (8005868 <main+0x37c>)
 8005552:	6811      	ldr	r1, [r2, #0]
 8005554:	4ac5      	ldr	r2, [pc, #788]	; (800586c <main+0x380>)
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f7fe fc6c 	bl	8003e36 <homeDataDisplay>
  while(1)
  {
	  switch(menuTesteMain.menuState)
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	2b05      	cmp	r3, #5
 8005562:	d8fc      	bhi.n	800555e <main+0x72>
 8005564:	a201      	add	r2, pc, #4	; (adr r2, 800556c <main+0x80>)
 8005566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556a:	bf00      	nop
 800556c:	08005585 	.word	0x08005585
 8005570:	080055b7 	.word	0x080055b7
 8005574:	08005643 	.word	0x08005643
 8005578:	080056e1 	.word	0x080056e1
 800557c:	08005773 	.word	0x08005773
 8005580:	08005805 	.word	0x08005805
	  {
		  case IDDLE:
			  menuTesteMain.menuState = getNextMain(IDDLE);
 8005584:	2000      	movs	r0, #0
 8005586:	f000 fc63 	bl	8005e50 <getNextMain>
 800558a:	4603      	mov	r3, r0
 800558c:	73fb      	strb	r3, [r7, #15]
			  if(key == AVANCAR)
 800558e:	4bb8      	ldr	r3, [pc, #736]	; (8005870 <main+0x384>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b41      	cmp	r3, #65	; 0x41
 8005596:	f040 819b 	bne.w	80058d0 <main+0x3e4>
			  {
//				  startCOMM();
				  resetKeyPressed();
 800559a:	f7ff ff65 	bl	8005468 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800559e:	1d3a      	adds	r2, r7, #4
 80055a0:	1dfb      	adds	r3, r7, #7
 80055a2:	4611      	mov	r1, r2
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fd fc3d 	bl	8002e24 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(START_TEST);
 80055aa:	2001      	movs	r0, #1
 80055ac:	f000 fc50 	bl	8005e50 <getNextMain>
 80055b0:	4603      	mov	r3, r0
 80055b2:	73fb      	strb	r3, [r7, #15]
			  }
		  break;
 80055b4:	e18c      	b.n	80058d0 <main+0x3e4>

		  case START_TEST:
			  updateUserMsg(0,USERMSG1,startUserMsg,&displayUpdateStatus);
 80055b6:	4baf      	ldr	r3, [pc, #700]	; (8005874 <main+0x388>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	1dfb      	adds	r3, r7, #7
 80055bc:	2100      	movs	r1, #0
 80055be:	2000      	movs	r0, #0
 80055c0:	f7fd fc15 	bl	8002dee <updateUserMsg>
			  printDataDisplay(0,INSERTMSG,avancarUserMsg);
 80055c4:	4bac      	ldr	r3, [pc, #688]	; (8005878 <main+0x38c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	2102      	movs	r1, #2
 80055cc:	2000      	movs	r0, #0
 80055ce:	f7fe fc05 	bl	8003ddc <printDataDisplay>
			  printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 80055d2:	4baa      	ldr	r3, [pc, #680]	; (800587c <main+0x390>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	2103      	movs	r1, #3
 80055da:	2000      	movs	r0, #0
 80055dc:	f7fe fbfe 	bl	8003ddc <printDataDisplay>
			  if(key == AVANCAR)
 80055e0:	4ba3      	ldr	r3, [pc, #652]	; (8005870 <main+0x384>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b41      	cmp	r3, #65	; 0x41
 80055e8:	d10d      	bne.n	8005606 <main+0x11a>
			  {
				  resetKeyPressed();
 80055ea:	f7ff ff3d 	bl	8005468 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80055ee:	1d3a      	adds	r2, r7, #4
 80055f0:	1dfb      	adds	r3, r7, #7
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fd fc15 	bl	8002e24 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(CONSULT_DATA);
 80055fa:	2002      	movs	r0, #2
 80055fc:	f000 fc28 	bl	8005e50 <getNextMain>
 8005600:	4603      	mov	r3, r0
 8005602:	73fb      	strb	r3, [r7, #15]
				  initStateMachine(&menuTesteSub);
				  readyUserInterface(&displayUpdateStatus,cursorPosition);

				  menuTesteSub.menuState = IDDLE;
			  }
		  break;
 8005604:	e166      	b.n	80058d4 <main+0x3e8>
			  else if(key == CONFIRMAR)
 8005606:	4b9a      	ldr	r3, [pc, #616]	; (8005870 <main+0x384>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b43      	cmp	r3, #67	; 0x43
 800560e:	f040 8161 	bne.w	80058d4 <main+0x3e8>
				  resetKeyPressed();
 8005612:	f7ff ff29 	bl	8005468 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8005616:	1d3a      	adds	r2, r7, #4
 8005618:	1dfb      	adds	r3, r7, #7
 800561a:	4611      	mov	r1, r2
 800561c:	4618      	mov	r0, r3
 800561e:	f7fd fc01 	bl	8002e24 <readyUserInterface>
				  menuTesteMain.menuSelect = menuTesteMain.menuState;
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	737b      	strb	r3, [r7, #13]
				  initStateMachine(&menuTesteSub);
 8005626:	f107 0308 	add.w	r3, r7, #8
 800562a:	4618      	mov	r0, r3
 800562c:	f7fd fe04 	bl	8003238 <initStateMachine>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8005630:	1d3a      	adds	r2, r7, #4
 8005632:	1dfb      	adds	r3, r7, #7
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f7fd fbf4 	bl	8002e24 <readyUserInterface>
				  menuTesteSub.menuState = IDDLE;
 800563c:	2300      	movs	r3, #0
 800563e:	72fb      	strb	r3, [r7, #11]
		  break;
 8005640:	e148      	b.n	80058d4 <main+0x3e8>

		  case CONSULT_DATA:
			  updateUserMsg(0,0,consultUserMsg,&displayUpdateStatus);
 8005642:	4b8f      	ldr	r3, [pc, #572]	; (8005880 <main+0x394>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	1dfb      	adds	r3, r7, #7
 8005648:	2100      	movs	r1, #0
 800564a:	2000      	movs	r0, #0
 800564c:	f7fd fbcf 	bl	8002dee <updateUserMsg>
			  printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8005650:	4b89      	ldr	r3, [pc, #548]	; (8005878 <main+0x38c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	2102      	movs	r1, #2
 8005658:	2000      	movs	r0, #0
 800565a:	f7fe fbbf 	bl	8003ddc <printDataDisplay>
			  printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 800565e:	4b87      	ldr	r3, [pc, #540]	; (800587c <main+0x390>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	2103      	movs	r1, #3
 8005666:	2000      	movs	r0, #0
 8005668:	f7fe fbb8 	bl	8003ddc <printDataDisplay>
			  if(key == AVANCAR)
 800566c:	4b80      	ldr	r3, [pc, #512]	; (8005870 <main+0x384>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b41      	cmp	r3, #65	; 0x41
 8005674:	d10d      	bne.n	8005692 <main+0x1a6>
			  {
				  resetKeyPressed();
 8005676:	f7ff fef7 	bl	8005468 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800567a:	1d3a      	adds	r2, r7, #4
 800567c:	1dfb      	adds	r3, r7, #7
 800567e:	4611      	mov	r1, r2
 8005680:	4618      	mov	r0, r3
 8005682:	f7fd fbcf 	bl	8002e24 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(CONFIG_SENSOR);
 8005686:	2003      	movs	r0, #3
 8005688:	f000 fbe2 	bl	8005e50 <getNextMain>
 800568c:	4603      	mov	r3, r0
 800568e:	73fb      	strb	r3, [r7, #15]

				  readyUserInterface(&displayUpdateStatus,cursorPosition);
				 menuTesteMain.menuState = getNextMain(START_TEST);
				 menuTesteSub.menuState = IDDLE;
			  }
		  break;
 8005690:	e122      	b.n	80058d8 <main+0x3ec>
			  else if(key == CONFIRMAR)
 8005692:	4b77      	ldr	r3, [pc, #476]	; (8005870 <main+0x384>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b43      	cmp	r3, #67	; 0x43
 800569a:	f040 811d 	bne.w	80058d8 <main+0x3ec>
				  resetKeyPressed();
 800569e:	f7ff fee3 	bl	8005468 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80056a2:	1d3a      	adds	r2, r7, #4
 80056a4:	1dfb      	adds	r3, r7, #7
 80056a6:	4611      	mov	r1, r2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fd fbbb 	bl	8002e24 <readyUserInterface>
				 consultStateMachine(&menuTesteSub);
 80056ae:	f107 0308 	add.w	r3, r7, #8
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fc fa7c 	bl	8001bb0 <consultStateMachine>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80056b8:	1d3a      	adds	r2, r7, #4
 80056ba:	1dfb      	adds	r3, r7, #7
 80056bc:	4611      	mov	r1, r2
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fd fbb0 	bl	8002e24 <readyUserInterface>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80056c4:	1d3a      	adds	r2, r7, #4
 80056c6:	1dfb      	adds	r3, r7, #7
 80056c8:	4611      	mov	r1, r2
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fd fbaa 	bl	8002e24 <readyUserInterface>
				 menuTesteMain.menuState = getNextMain(START_TEST);
 80056d0:	2001      	movs	r0, #1
 80056d2:	f000 fbbd 	bl	8005e50 <getNextMain>
 80056d6:	4603      	mov	r3, r0
 80056d8:	73fb      	strb	r3, [r7, #15]
				 menuTesteSub.menuState = IDDLE;
 80056da:	2300      	movs	r3, #0
 80056dc:	72fb      	strb	r3, [r7, #11]
		  break;
 80056de:	e0fb      	b.n	80058d8 <main+0x3ec>

		  case CONFIG_SENSOR:
			  updateUserMsg(0,0,configUserMsg,&displayUpdateStatus);
 80056e0:	4b68      	ldr	r3, [pc, #416]	; (8005884 <main+0x398>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	1dfb      	adds	r3, r7, #7
 80056e6:	2100      	movs	r1, #0
 80056e8:	2000      	movs	r0, #0
 80056ea:	f7fd fb80 	bl	8002dee <updateUserMsg>
			  printDataDisplay(0,INSERTMSG,avancarUserMsg);
 80056ee:	4b62      	ldr	r3, [pc, #392]	; (8005878 <main+0x38c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	2102      	movs	r1, #2
 80056f6:	2000      	movs	r0, #0
 80056f8:	f7fe fb70 	bl	8003ddc <printDataDisplay>
			  printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 80056fc:	4b5f      	ldr	r3, [pc, #380]	; (800587c <main+0x390>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	2103      	movs	r1, #3
 8005704:	2000      	movs	r0, #0
 8005706:	f7fe fb69 	bl	8003ddc <printDataDisplay>
			  if(key == AVANCAR)
 800570a:	4b59      	ldr	r3, [pc, #356]	; (8005870 <main+0x384>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b41      	cmp	r3, #65	; 0x41
 8005712:	d10d      	bne.n	8005730 <main+0x244>
			  {
				  resetKeyPressed();
 8005714:	f7ff fea8 	bl	8005468 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8005718:	1d3a      	adds	r2, r7, #4
 800571a:	1dfb      	adds	r3, r7, #7
 800571c:	4611      	mov	r1, r2
 800571e:	4618      	mov	r0, r3
 8005720:	f7fd fb80 	bl	8002e24 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(EXPORT_DATA);
 8005724:	2004      	movs	r0, #4
 8005726:	f000 fb93 	bl	8005e50 <getNextMain>
 800572a:	4603      	mov	r3, r0
 800572c:	73fb      	strb	r3, [r7, #15]
				  configStateMachine(&menuTesteSub);
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 800572e:	e0d5      	b.n	80058dc <main+0x3f0>
			  else if(key == CONFIRMAR)
 8005730:	4b4f      	ldr	r3, [pc, #316]	; (8005870 <main+0x384>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b43      	cmp	r3, #67	; 0x43
 8005738:	f040 80d0 	bne.w	80058dc <main+0x3f0>
				  resetKeyPressed();
 800573c:	f7ff fe94 	bl	8005468 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8005740:	1d3a      	adds	r2, r7, #4
 8005742:	1dfb      	adds	r3, r7, #7
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f7fd fb6c 	bl	8002e24 <readyUserInterface>
				  configStateMachine(&menuTesteSub);
 800574c:	f107 0308 	add.w	r3, r7, #8
 8005750:	4618      	mov	r0, r3
 8005752:	f7fb fb63 	bl	8000e1c <configStateMachine>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8005756:	1d3a      	adds	r2, r7, #4
 8005758:	1dfb      	adds	r3, r7, #7
 800575a:	4611      	mov	r1, r2
 800575c:	4618      	mov	r0, r3
 800575e:	f7fd fb61 	bl	8002e24 <readyUserInterface>
				  menuTesteSub.menuState = IDDLE;
 8005762:	2300      	movs	r3, #0
 8005764:	72fb      	strb	r3, [r7, #11]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005766:	2001      	movs	r0, #1
 8005768:	f000 fb72 	bl	8005e50 <getNextMain>
 800576c:	4603      	mov	r3, r0
 800576e:	73fb      	strb	r3, [r7, #15]
		  break;
 8005770:	e0b4      	b.n	80058dc <main+0x3f0>

		  case EXPORT_DATA:
			  updateUserMsg(0,0,exportUserMsg,&displayUpdateStatus);
 8005772:	4b45      	ldr	r3, [pc, #276]	; (8005888 <main+0x39c>)
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	1dfb      	adds	r3, r7, #7
 8005778:	2100      	movs	r1, #0
 800577a:	2000      	movs	r0, #0
 800577c:	f7fd fb37 	bl	8002dee <updateUserMsg>
			  printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8005780:	4b3d      	ldr	r3, [pc, #244]	; (8005878 <main+0x38c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	2102      	movs	r1, #2
 8005788:	2000      	movs	r0, #0
 800578a:	f7fe fb27 	bl	8003ddc <printDataDisplay>
			  printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 800578e:	4b3b      	ldr	r3, [pc, #236]	; (800587c <main+0x390>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	2103      	movs	r1, #3
 8005796:	2000      	movs	r0, #0
 8005798:	f7fe fb20 	bl	8003ddc <printDataDisplay>
			  if(key == AVANCAR)
 800579c:	4b34      	ldr	r3, [pc, #208]	; (8005870 <main+0x384>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b41      	cmp	r3, #65	; 0x41
 80057a4:	d10d      	bne.n	80057c2 <main+0x2d6>
			  {
				  resetKeyPressed();
 80057a6:	f7ff fe5f 	bl	8005468 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80057aa:	1d3a      	adds	r2, r7, #4
 80057ac:	1dfb      	adds	r3, r7, #7
 80057ae:	4611      	mov	r1, r2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fd fb37 	bl	8002e24 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(ERASE_DATA);
 80057b6:	2005      	movs	r0, #5
 80057b8:	f000 fb4a 	bl	8005e50 <getNextMain>
 80057bc:	4603      	mov	r3, r0
 80057be:	73fb      	strb	r3, [r7, #15]
				  readyUserInterface(&displayUpdateStatus,cursorPosition);

				  menuTesteSub.menuState = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 80057c0:	e08e      	b.n	80058e0 <main+0x3f4>
			  else if(key == CONFIRMAR)
 80057c2:	4b2b      	ldr	r3, [pc, #172]	; (8005870 <main+0x384>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b43      	cmp	r3, #67	; 0x43
 80057ca:	f040 8089 	bne.w	80058e0 <main+0x3f4>
				  resetKeyPressed();
 80057ce:	f7ff fe4b 	bl	8005468 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80057d2:	1d3a      	adds	r2, r7, #4
 80057d4:	1dfb      	adds	r3, r7, #7
 80057d6:	4611      	mov	r1, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fd fb23 	bl	8002e24 <readyUserInterface>
				  exportStateMachine(&menuTesteSub);
 80057de:	f107 0308 	add.w	r3, r7, #8
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fd fb50 	bl	8002e88 <exportStateMachine>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80057e8:	1d3a      	adds	r2, r7, #4
 80057ea:	1dfb      	adds	r3, r7, #7
 80057ec:	4611      	mov	r1, r2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fd fb18 	bl	8002e24 <readyUserInterface>
				  menuTesteSub.menuState = IDDLE;
 80057f4:	2300      	movs	r3, #0
 80057f6:	72fb      	strb	r3, [r7, #11]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 80057f8:	2001      	movs	r0, #1
 80057fa:	f000 fb29 	bl	8005e50 <getNextMain>
 80057fe:	4603      	mov	r3, r0
 8005800:	73fb      	strb	r3, [r7, #15]
		  break;
 8005802:	e06d      	b.n	80058e0 <main+0x3f4>

		  case ERASE_DATA:
			  updateUserMsg(0,0,eraseUserMsg,&displayUpdateStatus);
 8005804:	4b21      	ldr	r3, [pc, #132]	; (800588c <main+0x3a0>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	1dfb      	adds	r3, r7, #7
 800580a:	2100      	movs	r1, #0
 800580c:	2000      	movs	r0, #0
 800580e:	f7fd faee 	bl	8002dee <updateUserMsg>
			  printDataDisplay(0,INSERTMSG,avancarUserMsg);
 8005812:	4b19      	ldr	r3, [pc, #100]	; (8005878 <main+0x38c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	2102      	movs	r1, #2
 800581a:	2000      	movs	r0, #0
 800581c:	f7fe fade 	bl	8003ddc <printDataDisplay>
			  printDataDisplay(0,OPTIONMSG,selecionarUserMsg);
 8005820:	4b16      	ldr	r3, [pc, #88]	; (800587c <main+0x390>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	2103      	movs	r1, #3
 8005828:	2000      	movs	r0, #0
 800582a:	f7fe fad7 	bl	8003ddc <printDataDisplay>
			  if(key == AVANCAR)
 800582e:	4b10      	ldr	r3, [pc, #64]	; (8005870 <main+0x384>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b41      	cmp	r3, #65	; 0x41
 8005836:	d12b      	bne.n	8005890 <main+0x3a4>
			  {
				  resetKeyPressed();
 8005838:	f7ff fe16 	bl	8005468 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800583c:	1d3a      	adds	r2, r7, #4
 800583e:	1dfb      	adds	r3, r7, #7
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f7fd faee 	bl	8002e24 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005848:	2001      	movs	r0, #1
 800584a:	f000 fb01 	bl	8005e50 <getNextMain>
 800584e:	4603      	mov	r3, r0
 8005850:	73fb      	strb	r3, [r7, #15]
				  readyUserInterface(&displayUpdateStatus,cursorPosition);

				  menuTesteSub.menuState = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 8005852:	e047      	b.n	80058e4 <main+0x3f8>
 8005854:	40011000 	.word	0x40011000
 8005858:	200006ac 	.word	0x200006ac
 800585c:	20000618 	.word	0x20000618
 8005860:	2000065c 	.word	0x2000065c
 8005864:	20000018 	.word	0x20000018
 8005868:	2000001c 	.word	0x2000001c
 800586c:	20000020 	.word	0x20000020
 8005870:	200006a0 	.word	0x200006a0
 8005874:	20000024 	.word	0x20000024
 8005878:	200000c8 	.word	0x200000c8
 800587c:	200000d4 	.word	0x200000d4
 8005880:	20000068 	.word	0x20000068
 8005884:	20000078 	.word	0x20000078
 8005888:	200000ac 	.word	0x200000ac
 800588c:	200000b8 	.word	0x200000b8
			  else if(key == CONFIRMAR)
 8005890:	4b15      	ldr	r3, [pc, #84]	; (80058e8 <main+0x3fc>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b43      	cmp	r3, #67	; 0x43
 8005898:	d124      	bne.n	80058e4 <main+0x3f8>
				  resetKeyPressed();
 800589a:	f7ff fde5 	bl	8005468 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800589e:	1d3a      	adds	r2, r7, #4
 80058a0:	1dfb      	adds	r3, r7, #7
 80058a2:	4611      	mov	r1, r2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fd fabd 	bl	8002e24 <readyUserInterface>
				  eraseStateMachine(&menuTesteSub);
 80058aa:	f107 0308 	add.w	r3, r7, #8
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fb f9f8 	bl	8000ca4 <eraseStateMachine>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80058b4:	1d3a      	adds	r2, r7, #4
 80058b6:	1dfb      	adds	r3, r7, #7
 80058b8:	4611      	mov	r1, r2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fd fab2 	bl	8002e24 <readyUserInterface>
				  menuTesteSub.menuState = IDDLE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	72fb      	strb	r3, [r7, #11]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 80058c4:	2001      	movs	r0, #1
 80058c6:	f000 fac3 	bl	8005e50 <getNextMain>
 80058ca:	4603      	mov	r3, r0
 80058cc:	73fb      	strb	r3, [r7, #15]
		  break;
 80058ce:	e009      	b.n	80058e4 <main+0x3f8>
		  break;
 80058d0:	bf00      	nop
 80058d2:	e644      	b.n	800555e <main+0x72>
		  break;
 80058d4:	bf00      	nop
 80058d6:	e642      	b.n	800555e <main+0x72>
		  break;
 80058d8:	bf00      	nop
 80058da:	e640      	b.n	800555e <main+0x72>
		  break;
 80058dc:	bf00      	nop
 80058de:	e63e      	b.n	800555e <main+0x72>
		  break;
 80058e0:	bf00      	nop
 80058e2:	e63c      	b.n	800555e <main+0x72>
		  break;
 80058e4:	bf00      	nop
	  switch(menuTesteMain.menuState)
 80058e6:	e63a      	b.n	800555e <main+0x72>
 80058e8:	200006a0 	.word	0x200006a0

080058ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b090      	sub	sp, #64	; 0x40
 80058f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058f2:	f107 0318 	add.w	r3, r7, #24
 80058f6:	2228      	movs	r2, #40	; 0x28
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f003 ffee 	bl	80098dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005900:	1d3b      	adds	r3, r7, #4
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	605a      	str	r2, [r3, #4]
 8005908:	609a      	str	r2, [r3, #8]
 800590a:	60da      	str	r2, [r3, #12]
 800590c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800590e:	2301      	movs	r3, #1
 8005910:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005916:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005918:	2300      	movs	r3, #0
 800591a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800591c:	2301      	movs	r3, #1
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005920:	2302      	movs	r3, #2
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005924:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800592a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005930:	f107 0318 	add.w	r3, r7, #24
 8005934:	4618      	mov	r0, r3
 8005936:	f001 fb01 	bl	8006f3c <HAL_RCC_OscConfig>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005940:	f000 fa80 	bl	8005e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005944:	230f      	movs	r3, #15
 8005946:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005948:	2302      	movs	r3, #2
 800594a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800595a:	1d3b      	adds	r3, r7, #4
 800595c:	2102      	movs	r1, #2
 800595e:	4618      	mov	r0, r3
 8005960:	f001 fd6e 	bl	8007440 <HAL_RCC_ClockConfig>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800596a:	f000 fa6b 	bl	8005e44 <Error_Handler>
  }
}
 800596e:	bf00      	nop
 8005970:	3740      	adds	r7, #64	; 0x40
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800597c:	4b17      	ldr	r3, [pc, #92]	; (80059dc <MX_SPI1_Init+0x64>)
 800597e:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <MX_SPI1_Init+0x68>)
 8005980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005982:	4b16      	ldr	r3, [pc, #88]	; (80059dc <MX_SPI1_Init+0x64>)
 8005984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005988:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800598a:	4b14      	ldr	r3, [pc, #80]	; (80059dc <MX_SPI1_Init+0x64>)
 800598c:	2200      	movs	r2, #0
 800598e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005990:	4b12      	ldr	r3, [pc, #72]	; (80059dc <MX_SPI1_Init+0x64>)
 8005992:	2200      	movs	r2, #0
 8005994:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005996:	4b11      	ldr	r3, [pc, #68]	; (80059dc <MX_SPI1_Init+0x64>)
 8005998:	2200      	movs	r2, #0
 800599a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800599c:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <MX_SPI1_Init+0x64>)
 800599e:	2200      	movs	r2, #0
 80059a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80059a2:	4b0e      	ldr	r3, [pc, #56]	; (80059dc <MX_SPI1_Init+0x64>)
 80059a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80059aa:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <MX_SPI1_Init+0x64>)
 80059ac:	2208      	movs	r2, #8
 80059ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80059b0:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <MX_SPI1_Init+0x64>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <MX_SPI1_Init+0x64>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059bc:	4b07      	ldr	r3, [pc, #28]	; (80059dc <MX_SPI1_Init+0x64>)
 80059be:	2200      	movs	r2, #0
 80059c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80059c2:	4b06      	ldr	r3, [pc, #24]	; (80059dc <MX_SPI1_Init+0x64>)
 80059c4:	220a      	movs	r2, #10
 80059c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80059c8:	4804      	ldr	r0, [pc, #16]	; (80059dc <MX_SPI1_Init+0x64>)
 80059ca:	f001 fed1 	bl	8007770 <HAL_SPI_Init>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80059d4:	f000 fa36 	bl	8005e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80059d8:	bf00      	nop
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20000530 	.word	0x20000530
 80059e0:	40013000 	.word	0x40013000

080059e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08c      	sub	sp, #48	; 0x30
 80059e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80059ea:	f107 030c 	add.w	r3, r7, #12
 80059ee:	2224      	movs	r2, #36	; 0x24
 80059f0:	2100      	movs	r1, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f003 ff72 	bl	80098dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059f8:	1d3b      	adds	r3, r7, #4
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005a00:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <MX_TIM2_Init+0xa4>)
 8005a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005a08:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <MX_TIM2_Init+0xa4>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a0e:	4b1e      	ldr	r3, [pc, #120]	; (8005a88 <MX_TIM2_Init+0xa4>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005a14:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <MX_TIM2_Init+0xa4>)
 8005a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a1c:	4b1a      	ldr	r3, [pc, #104]	; (8005a88 <MX_TIM2_Init+0xa4>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a22:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <MX_TIM2_Init+0xa4>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005a30:	2301      	movs	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005a38:	230f      	movs	r3, #15
 8005a3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005a40:	2301      	movs	r3, #1
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005a44:	2300      	movs	r3, #0
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005a48:	230f      	movs	r3, #15
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005a4c:	f107 030c 	add.w	r3, r7, #12
 8005a50:	4619      	mov	r1, r3
 8005a52:	480d      	ldr	r0, [pc, #52]	; (8005a88 <MX_TIM2_Init+0xa4>)
 8005a54:	f002 fb64 	bl	8008120 <HAL_TIM_Encoder_Init>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005a5e:	f000 f9f1 	bl	8005e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a62:	2300      	movs	r3, #0
 8005a64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a6a:	1d3b      	adds	r3, r7, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4806      	ldr	r0, [pc, #24]	; (8005a88 <MX_TIM2_Init+0xa4>)
 8005a70:	f003 f85e 	bl	8008b30 <HAL_TIMEx_MasterConfigSynchronization>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005a7a:	f000 f9e3 	bl	8005e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005a7e:	bf00      	nop
 8005a80:	3730      	adds	r7, #48	; 0x30
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000588 	.word	0x20000588

08005a8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a92:	f107 0308 	add.w	r3, r7, #8
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	605a      	str	r2, [r3, #4]
 8005a9c:	609a      	str	r2, [r3, #8]
 8005a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005aa8:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <MX_TIM3_Init+0x94>)
 8005aaa:	4a1e      	ldr	r2, [pc, #120]	; (8005b24 <MX_TIM3_Init+0x98>)
 8005aac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8005aae:	4b1c      	ldr	r3, [pc, #112]	; (8005b20 <MX_TIM3_Init+0x94>)
 8005ab0:	2247      	movs	r2, #71	; 0x47
 8005ab2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ab4:	4b1a      	ldr	r3, [pc, #104]	; (8005b20 <MX_TIM3_Init+0x94>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8005aba:	4b19      	ldr	r3, [pc, #100]	; (8005b20 <MX_TIM3_Init+0x94>)
 8005abc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ac0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ac2:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <MX_TIM3_Init+0x94>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ac8:	4b15      	ldr	r3, [pc, #84]	; (8005b20 <MX_TIM3_Init+0x94>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005ace:	4814      	ldr	r0, [pc, #80]	; (8005b20 <MX_TIM3_Init+0x94>)
 8005ad0:	f002 fa56 	bl	8007f80 <HAL_TIM_Base_Init>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8005ada:	f000 f9b3 	bl	8005e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005ae4:	f107 0308 	add.w	r3, r7, #8
 8005ae8:	4619      	mov	r1, r3
 8005aea:	480d      	ldr	r0, [pc, #52]	; (8005b20 <MX_TIM3_Init+0x94>)
 8005aec:	f002 fe25 	bl	800873a <HAL_TIM_ConfigClockSource>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8005af6:	f000 f9a5 	bl	8005e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005afa:	2300      	movs	r3, #0
 8005afc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b02:	463b      	mov	r3, r7
 8005b04:	4619      	mov	r1, r3
 8005b06:	4806      	ldr	r0, [pc, #24]	; (8005b20 <MX_TIM3_Init+0x94>)
 8005b08:	f003 f812 	bl	8008b30 <HAL_TIMEx_MasterConfigSynchronization>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8005b12:	f000 f997 	bl	8005e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005b16:	bf00      	nop
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	200005d0 	.word	0x200005d0
 8005b24:	40000400 	.word	0x40000400

08005b28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b2c:	4b11      	ldr	r3, [pc, #68]	; (8005b74 <MX_USART2_UART_Init+0x4c>)
 8005b2e:	4a12      	ldr	r2, [pc, #72]	; (8005b78 <MX_USART2_UART_Init+0x50>)
 8005b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005b32:	4b10      	ldr	r3, [pc, #64]	; (8005b74 <MX_USART2_UART_Init+0x4c>)
 8005b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <MX_USART2_UART_Init+0x4c>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b40:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <MX_USART2_UART_Init+0x4c>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <MX_USART2_UART_Init+0x4c>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b4c:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <MX_USART2_UART_Init+0x4c>)
 8005b4e:	220c      	movs	r2, #12
 8005b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b52:	4b08      	ldr	r3, [pc, #32]	; (8005b74 <MX_USART2_UART_Init+0x4c>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b58:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <MX_USART2_UART_Init+0x4c>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b5e:	4805      	ldr	r0, [pc, #20]	; (8005b74 <MX_USART2_UART_Init+0x4c>)
 8005b60:	f003 f856 	bl	8008c10 <HAL_UART_Init>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005b6a:	f000 f96b 	bl	8005e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000618 	.word	0x20000618
 8005b78:	40004400 	.word	0x40004400

08005b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <MX_DMA_Init+0x38>)
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	4a0b      	ldr	r2, [pc, #44]	; (8005bb4 <MX_DMA_Init+0x38>)
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	6153      	str	r3, [r2, #20]
 8005b8e:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <MX_DMA_Init+0x38>)
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	607b      	str	r3, [r7, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	2010      	movs	r0, #16
 8005ba0:	f000 fd29 	bl	80065f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005ba4:	2010      	movs	r0, #16
 8005ba6:	f000 fd42 	bl	800662e <HAL_NVIC_EnableIRQ>

}
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40021000 	.word	0x40021000

08005bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bbe:	f107 0310 	add.w	r3, r7, #16
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	605a      	str	r2, [r3, #4]
 8005bc8:	609a      	str	r2, [r3, #8]
 8005bca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bcc:	4b47      	ldr	r3, [pc, #284]	; (8005cec <MX_GPIO_Init+0x134>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	4a46      	ldr	r2, [pc, #280]	; (8005cec <MX_GPIO_Init+0x134>)
 8005bd2:	f043 0310 	orr.w	r3, r3, #16
 8005bd6:	6193      	str	r3, [r2, #24]
 8005bd8:	4b44      	ldr	r3, [pc, #272]	; (8005cec <MX_GPIO_Init+0x134>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005be4:	4b41      	ldr	r3, [pc, #260]	; (8005cec <MX_GPIO_Init+0x134>)
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	4a40      	ldr	r2, [pc, #256]	; (8005cec <MX_GPIO_Init+0x134>)
 8005bea:	f043 0320 	orr.w	r3, r3, #32
 8005bee:	6193      	str	r3, [r2, #24]
 8005bf0:	4b3e      	ldr	r3, [pc, #248]	; (8005cec <MX_GPIO_Init+0x134>)
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bfc:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <MX_GPIO_Init+0x134>)
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	4a3a      	ldr	r2, [pc, #232]	; (8005cec <MX_GPIO_Init+0x134>)
 8005c02:	f043 0304 	orr.w	r3, r3, #4
 8005c06:	6193      	str	r3, [r2, #24]
 8005c08:	4b38      	ldr	r3, [pc, #224]	; (8005cec <MX_GPIO_Init+0x134>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	607b      	str	r3, [r7, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c14:	4b35      	ldr	r3, [pc, #212]	; (8005cec <MX_GPIO_Init+0x134>)
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	4a34      	ldr	r2, [pc, #208]	; (8005cec <MX_GPIO_Init+0x134>)
 8005c1a:	f043 0308 	orr.w	r3, r3, #8
 8005c1e:	6193      	str	r3, [r2, #24]
 8005c20:	4b32      	ldr	r3, [pc, #200]	; (8005cec <MX_GPIO_Init+0x134>)
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	603b      	str	r3, [r7, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c32:	482f      	ldr	r0, [pc, #188]	; (8005cf0 <MX_GPIO_Init+0x138>)
 8005c34:	f001 f938 	bl	8006ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f649 7110 	movw	r1, #40720	; 0x9f10
 8005c3e:	482d      	ldr	r0, [pc, #180]	; (8005cf4 <MX_GPIO_Init+0x13c>)
 8005c40:	f001 f932 	bl	8006ea8 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8005c44:	2200      	movs	r2, #0
 8005c46:	f24f 2108 	movw	r1, #61960	; 0xf208
 8005c4a:	482b      	ldr	r0, [pc, #172]	; (8005cf8 <MX_GPIO_Init+0x140>)
 8005c4c:	f001 f92c 	bl	8006ea8 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c56:	2301      	movs	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005c62:	f107 0310 	add.w	r3, r7, #16
 8005c66:	4619      	mov	r1, r3
 8005c68:	4821      	ldr	r0, [pc, #132]	; (8005cf0 <MX_GPIO_Init+0x138>)
 8005c6a:	f000 ff99 	bl	8006ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LCD_D3_Pin LCD_D2_Pin LCD_D1_Pin
                           LCD_D0_Pin LCD_EN_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8005c6e:	f649 7310 	movw	r3, #40720	; 0x9f10
 8005c72:	613b      	str	r3, [r7, #16]
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c74:	2301      	movs	r3, #1
 8005c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c80:	f107 0310 	add.w	r3, r7, #16
 8005c84:	4619      	mov	r1, r3
 8005c86:	481b      	ldr	r0, [pc, #108]	; (8005cf4 <MX_GPIO_Init+0x13c>)
 8005c88:	f000 ff8a 	bl	8006ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_RS_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8005c8c:	f24f 2308 	movw	r3, #61960	; 0xf208
 8005c90:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c92:	2301      	movs	r3, #1
 8005c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c9e:	f107 0310 	add.w	r3, r7, #16
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4814      	ldr	r0, [pc, #80]	; (8005cf8 <MX_GPIO_Init+0x140>)
 8005ca6:	f000 ff7b 	bl	8006ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_MENU_Pin BT_AVANCA_Pin BT_SELECT_Pin BT_STOP_Pin
                           BT_INSERT_Pin */
  GPIO_InitStruct.Pin = BT_MENU_Pin|BT_AVANCA_Pin|BT_SELECT_Pin|BT_STOP_Pin
 8005caa:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8005cae:	613b      	str	r3, [r7, #16]
                          |BT_INSERT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005cb0:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <MX_GPIO_Init+0x144>)
 8005cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cb8:	f107 0310 	add.w	r3, r7, #16
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	480e      	ldr	r0, [pc, #56]	; (8005cf8 <MX_GPIO_Init+0x140>)
 8005cc0:	f000 ff6e 	bl	8006ba0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	200a      	movs	r0, #10
 8005cca:	f000 fc94 	bl	80065f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005cce:	200a      	movs	r0, #10
 8005cd0:	f000 fcad 	bl	800662e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	2017      	movs	r0, #23
 8005cda:	f000 fc8c 	bl	80065f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005cde:	2017      	movs	r0, #23
 8005ce0:	f000 fca5 	bl	800662e <HAL_NVIC_EnableIRQ>

}
 8005ce4:	bf00      	nop
 8005ce6:	3720      	adds	r7, #32
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	40011000 	.word	0x40011000
 8005cf4:	40010800 	.word	0x40010800
 8005cf8:	40010c00 	.word	0x40010c00
 8005cfc:	10210000 	.word	0x10210000

08005d00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a0c      	ldr	r2, [pc, #48]	; (8005d3c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d110      	bne.n	8005d32 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		timer3Count+=1;  //1ms
 8005d10:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3301      	adds	r3, #1
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005d18:	6013      	str	r3, [r2, #0]
		if(timer3Count == 10) //10ms
 8005d1a:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b0a      	cmp	r3, #10
 8005d20:	d107      	bne.n	8005d32 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			timer3Data += 10;
 8005d22:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	330a      	adds	r3, #10
 8005d28:	4a06      	ldr	r2, [pc, #24]	; (8005d44 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005d2a:	6013      	str	r3, [r2, #0]
			timer3Count = 0;
 8005d2c:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
		}
	}

}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr
 8005d3c:	200005d0 	.word	0x200005d0
 8005d40:	200006a8 	.word	0x200006a8
 8005d44:	200006a4 	.word	0x200006a4

08005d48 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	807b      	strh	r3, [r7, #2]

	//uartBuffer[0]+=1;
	uartFlagRx = TRUE;
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <HAL_UARTEx_RxEventCallback+0x40>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d5e:	480b      	ldr	r0, [pc, #44]	; (8005d8c <HAL_UARTEx_RxEventCallback+0x44>)
 8005d60:	f001 f8ba 	bl	8006ed8 <HAL_GPIO_TogglePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 8005d64:	2214      	movs	r2, #20
 8005d66:	490a      	ldr	r1, [pc, #40]	; (8005d90 <HAL_UARTEx_RxEventCallback+0x48>)
 8005d68:	480a      	ldr	r0, [pc, #40]	; (8005d94 <HAL_UARTEx_RxEventCallback+0x4c>)
 8005d6a:	f002 ff9e 	bl	8008caa <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <HAL_UARTEx_RxEventCallback+0x50>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	4b08      	ldr	r3, [pc, #32]	; (8005d98 <HAL_UARTEx_RxEventCallback+0x50>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0204 	bic.w	r2, r2, #4
 8005d7c:	601a      	str	r2, [r3, #0]

}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	200006c0 	.word	0x200006c0
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	200006ac 	.word	0x200006ac
 8005d94:	20000618 	.word	0x20000618
 8005d98:	2000065c 	.word	0x2000065c

08005d9c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a0b      	ldr	r2, [pc, #44]	; (8005dd4 <HAL_TIM_IC_CaptureCallback+0x38>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d10e      	bne.n	8005dca <HAL_TIM_IC_CaptureCallback+0x2e>
	{
		if(htim->Channel == 2)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	7f1b      	ldrb	r3, [r3, #28]
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d103      	bne.n	8005dbc <HAL_TIM_IC_CaptureCallback+0x20>
		{
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
			sensorFlag = 1;
 8005db4:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
			sensorFlag = 0;
		}
	}

}
 8005dba:	e006      	b.n	8005dca <HAL_TIM_IC_CaptureCallback+0x2e>
		else if(htim->Channel == 1)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	7f1b      	ldrb	r3, [r3, #28]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d102      	bne.n	8005dca <HAL_TIM_IC_CaptureCallback+0x2e>
			sensorFlag = 0;
 8005dc4:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr
 8005dd4:	20000588 	.word	0x20000588
 8005dd8:	200000e1 	.word	0x200000e1

08005ddc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4603      	mov	r3, r0
 8005de4:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dec:	d012      	beq.n	8005e14 <HAL_GPIO_EXTI_Callback+0x38>
 8005dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df2:	dc1f      	bgt.n	8005e34 <HAL_GPIO_EXTI_Callback+0x58>
 8005df4:	2b80      	cmp	r3, #128	; 0x80
 8005df6:	d019      	beq.n	8005e2c <HAL_GPIO_EXTI_Callback+0x50>
 8005df8:	2b80      	cmp	r3, #128	; 0x80
 8005dfa:	dc1b      	bgt.n	8005e34 <HAL_GPIO_EXTI_Callback+0x58>
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	d011      	beq.n	8005e24 <HAL_GPIO_EXTI_Callback+0x48>
 8005e00:	2b40      	cmp	r3, #64	; 0x40
 8005e02:	dc17      	bgt.n	8005e34 <HAL_GPIO_EXTI_Callback+0x58>
 8005e04:	2b10      	cmp	r3, #16
 8005e06:	d009      	beq.n	8005e1c <HAL_GPIO_EXTI_Callback+0x40>
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d113      	bne.n	8005e34 <HAL_GPIO_EXTI_Callback+0x58>
	{
		case BT_AVANCA_Pin:
			key = AVANCAR;
 8005e0c:	4b0c      	ldr	r3, [pc, #48]	; (8005e40 <HAL_GPIO_EXTI_Callback+0x64>)
 8005e0e:	2241      	movs	r2, #65	; 0x41
 8005e10:	701a      	strb	r2, [r3, #0]
		break;
 8005e12:	e00f      	b.n	8005e34 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_INSERT_Pin:
			key = INSERIR;
 8005e14:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <HAL_GPIO_EXTI_Callback+0x64>)
 8005e16:	2249      	movs	r2, #73	; 0x49
 8005e18:	701a      	strb	r2, [r3, #0]
		break;
 8005e1a:	e00b      	b.n	8005e34 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_MENU_Pin:
			key = MENU;
 8005e1c:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <HAL_GPIO_EXTI_Callback+0x64>)
 8005e1e:	224d      	movs	r2, #77	; 0x4d
 8005e20:	701a      	strb	r2, [r3, #0]
		break;
 8005e22:	e007      	b.n	8005e34 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_SELECT_Pin:
			key = CONFIRMAR;
 8005e24:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <HAL_GPIO_EXTI_Callback+0x64>)
 8005e26:	2243      	movs	r2, #67	; 0x43
 8005e28:	701a      	strb	r2, [r3, #0]
		break;
 8005e2a:	e003      	b.n	8005e34 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_STOP_Pin:
			key = PARAR;
 8005e2c:	4b04      	ldr	r3, [pc, #16]	; (8005e40 <HAL_GPIO_EXTI_Callback+0x64>)
 8005e2e:	2250      	movs	r2, #80	; 0x50
 8005e30:	701a      	strb	r2, [r3, #0]
		break;
 8005e32:	bf00      	nop
	}

}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	200006a0 	.word	0x200006a0

08005e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e48:	b672      	cpsid	i
}
 8005e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005e4c:	e7fe      	b.n	8005e4c <Error_Handler+0x8>
	...

08005e50 <getNextMain>:

struct Menu menuMain ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextMain(unsigned char nextState)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	71fb      	strb	r3, [r7, #7]

    menuMain.menuNext = nextState;
 8005e5a:	4a05      	ldr	r2, [pc, #20]	; (8005e70 <getNextMain+0x20>)
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	7013      	strb	r3, [r2, #0]
    return menuMain.menuNext;
 8005e60:	4b03      	ldr	r3, [pc, #12]	; (8005e70 <getNextMain+0x20>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	200006c4 	.word	0x200006c4

08005e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e7a:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <HAL_MspInit+0x5c>)
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	4a14      	ldr	r2, [pc, #80]	; (8005ed0 <HAL_MspInit+0x5c>)
 8005e80:	f043 0301 	orr.w	r3, r3, #1
 8005e84:	6193      	str	r3, [r2, #24]
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <HAL_MspInit+0x5c>)
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	60bb      	str	r3, [r7, #8]
 8005e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e92:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <HAL_MspInit+0x5c>)
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	4a0e      	ldr	r2, [pc, #56]	; (8005ed0 <HAL_MspInit+0x5c>)
 8005e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	61d3      	str	r3, [r2, #28]
 8005e9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <HAL_MspInit+0x5c>)
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	607b      	str	r3, [r7, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <HAL_MspInit+0x60>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	4a04      	ldr	r2, [pc, #16]	; (8005ed4 <HAL_MspInit+0x60>)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40010000 	.word	0x40010000

08005ed8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee0:	f107 0310 	add.w	r3, r7, #16
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	609a      	str	r2, [r3, #8]
 8005eec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1b      	ldr	r2, [pc, #108]	; (8005f60 <HAL_SPI_MspInit+0x88>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d12f      	bne.n	8005f58 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005ef8:	4b1a      	ldr	r3, [pc, #104]	; (8005f64 <HAL_SPI_MspInit+0x8c>)
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	4a19      	ldr	r2, [pc, #100]	; (8005f64 <HAL_SPI_MspInit+0x8c>)
 8005efe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f02:	6193      	str	r3, [r2, #24]
 8005f04:	4b17      	ldr	r3, [pc, #92]	; (8005f64 <HAL_SPI_MspInit+0x8c>)
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f10:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <HAL_SPI_MspInit+0x8c>)
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	4a13      	ldr	r2, [pc, #76]	; (8005f64 <HAL_SPI_MspInit+0x8c>)
 8005f16:	f043 0304 	orr.w	r3, r3, #4
 8005f1a:	6193      	str	r3, [r2, #24]
 8005f1c:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <HAL_SPI_MspInit+0x8c>)
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	60bb      	str	r3, [r7, #8]
 8005f26:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005f28:	23a0      	movs	r3, #160	; 0xa0
 8005f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f30:	2303      	movs	r3, #3
 8005f32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f34:	f107 0310 	add.w	r3, r7, #16
 8005f38:	4619      	mov	r1, r3
 8005f3a:	480b      	ldr	r0, [pc, #44]	; (8005f68 <HAL_SPI_MspInit+0x90>)
 8005f3c:	f000 fe30 	bl	8006ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005f40:	2340      	movs	r3, #64	; 0x40
 8005f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f4c:	f107 0310 	add.w	r3, r7, #16
 8005f50:	4619      	mov	r1, r3
 8005f52:	4805      	ldr	r0, [pc, #20]	; (8005f68 <HAL_SPI_MspInit+0x90>)
 8005f54:	f000 fe24 	bl	8006ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005f58:	bf00      	nop
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40013000 	.word	0x40013000
 8005f64:	40021000 	.word	0x40021000
 8005f68:	40010800 	.word	0x40010800

08005f6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f74:	f107 0310 	add.w	r3, r7, #16
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	609a      	str	r2, [r3, #8]
 8005f80:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8a:	d12b      	bne.n	8005fe4 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f8c:	4b17      	ldr	r3, [pc, #92]	; (8005fec <HAL_TIM_Encoder_MspInit+0x80>)
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	4a16      	ldr	r2, [pc, #88]	; (8005fec <HAL_TIM_Encoder_MspInit+0x80>)
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	61d3      	str	r3, [r2, #28]
 8005f98:	4b14      	ldr	r3, [pc, #80]	; (8005fec <HAL_TIM_Encoder_MspInit+0x80>)
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa4:	4b11      	ldr	r3, [pc, #68]	; (8005fec <HAL_TIM_Encoder_MspInit+0x80>)
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	4a10      	ldr	r2, [pc, #64]	; (8005fec <HAL_TIM_Encoder_MspInit+0x80>)
 8005faa:	f043 0304 	orr.w	r3, r3, #4
 8005fae:	6193      	str	r3, [r2, #24]
 8005fb0:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <HAL_TIM_Encoder_MspInit+0x80>)
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fc8:	f107 0310 	add.w	r3, r7, #16
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4808      	ldr	r0, [pc, #32]	; (8005ff0 <HAL_TIM_Encoder_MspInit+0x84>)
 8005fd0:	f000 fde6 	bl	8006ba0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	201c      	movs	r0, #28
 8005fda:	f000 fb0c 	bl	80065f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005fde:	201c      	movs	r0, #28
 8005fe0:	f000 fb25 	bl	800662e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005fe4:	bf00      	nop
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	40010800 	.word	0x40010800

08005ff4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0d      	ldr	r2, [pc, #52]	; (8006038 <HAL_TIM_Base_MspInit+0x44>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d113      	bne.n	800602e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006006:	4b0d      	ldr	r3, [pc, #52]	; (800603c <HAL_TIM_Base_MspInit+0x48>)
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	4a0c      	ldr	r2, [pc, #48]	; (800603c <HAL_TIM_Base_MspInit+0x48>)
 800600c:	f043 0302 	orr.w	r3, r3, #2
 8006010:	61d3      	str	r3, [r2, #28]
 8006012:	4b0a      	ldr	r3, [pc, #40]	; (800603c <HAL_TIM_Base_MspInit+0x48>)
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800601e:	2200      	movs	r2, #0
 8006020:	2100      	movs	r1, #0
 8006022:	201d      	movs	r0, #29
 8006024:	f000 fae7 	bl	80065f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006028:	201d      	movs	r0, #29
 800602a:	f000 fb00 	bl	800662e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40000400 	.word	0x40000400
 800603c:	40021000 	.word	0x40021000

08006040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006048:	f107 0310 	add.w	r3, r7, #16
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	605a      	str	r2, [r3, #4]
 8006052:	609a      	str	r2, [r3, #8]
 8006054:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a32      	ldr	r2, [pc, #200]	; (8006124 <HAL_UART_MspInit+0xe4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d15d      	bne.n	800611c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006060:	4b31      	ldr	r3, [pc, #196]	; (8006128 <HAL_UART_MspInit+0xe8>)
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	4a30      	ldr	r2, [pc, #192]	; (8006128 <HAL_UART_MspInit+0xe8>)
 8006066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800606a:	61d3      	str	r3, [r2, #28]
 800606c:	4b2e      	ldr	r3, [pc, #184]	; (8006128 <HAL_UART_MspInit+0xe8>)
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006078:	4b2b      	ldr	r3, [pc, #172]	; (8006128 <HAL_UART_MspInit+0xe8>)
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	4a2a      	ldr	r2, [pc, #168]	; (8006128 <HAL_UART_MspInit+0xe8>)
 800607e:	f043 0304 	orr.w	r3, r3, #4
 8006082:	6193      	str	r3, [r2, #24]
 8006084:	4b28      	ldr	r3, [pc, #160]	; (8006128 <HAL_UART_MspInit+0xe8>)
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	60bb      	str	r3, [r7, #8]
 800608e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006090:	2304      	movs	r3, #4
 8006092:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006094:	2302      	movs	r3, #2
 8006096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006098:	2303      	movs	r3, #3
 800609a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800609c:	f107 0310 	add.w	r3, r7, #16
 80060a0:	4619      	mov	r1, r3
 80060a2:	4822      	ldr	r0, [pc, #136]	; (800612c <HAL_UART_MspInit+0xec>)
 80060a4:	f000 fd7c 	bl	8006ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80060a8:	2308      	movs	r3, #8
 80060aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060b4:	f107 0310 	add.w	r3, r7, #16
 80060b8:	4619      	mov	r1, r3
 80060ba:	481c      	ldr	r0, [pc, #112]	; (800612c <HAL_UART_MspInit+0xec>)
 80060bc:	f000 fd70 	bl	8006ba0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80060c0:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <HAL_UART_MspInit+0xf0>)
 80060c2:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <HAL_UART_MspInit+0xf4>)
 80060c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060c6:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <HAL_UART_MspInit+0xf0>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060cc:	4b18      	ldr	r3, [pc, #96]	; (8006130 <HAL_UART_MspInit+0xf0>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060d2:	4b17      	ldr	r3, [pc, #92]	; (8006130 <HAL_UART_MspInit+0xf0>)
 80060d4:	2280      	movs	r2, #128	; 0x80
 80060d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060d8:	4b15      	ldr	r3, [pc, #84]	; (8006130 <HAL_UART_MspInit+0xf0>)
 80060da:	2200      	movs	r2, #0
 80060dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060de:	4b14      	ldr	r3, [pc, #80]	; (8006130 <HAL_UART_MspInit+0xf0>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80060e4:	4b12      	ldr	r3, [pc, #72]	; (8006130 <HAL_UART_MspInit+0xf0>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80060ea:	4b11      	ldr	r3, [pc, #68]	; (8006130 <HAL_UART_MspInit+0xf0>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80060f0:	480f      	ldr	r0, [pc, #60]	; (8006130 <HAL_UART_MspInit+0xf0>)
 80060f2:	f000 fab7 	bl	8006664 <HAL_DMA_Init>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80060fc:	f7ff fea2 	bl	8005e44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a0b      	ldr	r2, [pc, #44]	; (8006130 <HAL_UART_MspInit+0xf0>)
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
 8006106:	4a0a      	ldr	r2, [pc, #40]	; (8006130 <HAL_UART_MspInit+0xf0>)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800610c:	2200      	movs	r2, #0
 800610e:	2100      	movs	r1, #0
 8006110:	2026      	movs	r0, #38	; 0x26
 8006112:	f000 fa70 	bl	80065f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006116:	2026      	movs	r0, #38	; 0x26
 8006118:	f000 fa89 	bl	800662e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800611c:	bf00      	nop
 800611e:	3720      	adds	r7, #32
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	40004400 	.word	0x40004400
 8006128:	40021000 	.word	0x40021000
 800612c:	40010800 	.word	0x40010800
 8006130:	2000065c 	.word	0x2000065c
 8006134:	4002006c 	.word	0x4002006c

08006138 <SDTimerHandler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1,Timer2;

void SDTimerHandler(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
	if(Timer1>0)
 800613c:	4b0d      	ldr	r3, [pc, #52]	; (8006174 <SDTimerHandler+0x3c>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d006      	beq.n	8006154 <SDTimerHandler+0x1c>
		Timer1--;
 8006146:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <SDTimerHandler+0x3c>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	3b01      	subs	r3, #1
 800614e:	b2da      	uxtb	r2, r3
 8006150:	4b08      	ldr	r3, [pc, #32]	; (8006174 <SDTimerHandler+0x3c>)
 8006152:	701a      	strb	r2, [r3, #0]

	if(Timer2>0)
 8006154:	4b08      	ldr	r3, [pc, #32]	; (8006178 <SDTimerHandler+0x40>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d006      	beq.n	800616c <SDTimerHandler+0x34>
		Timer2--;
 800615e:	4b06      	ldr	r3, [pc, #24]	; (8006178 <SDTimerHandler+0x40>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b2da      	uxtb	r2, r3
 8006168:	4b03      	ldr	r3, [pc, #12]	; (8006178 <SDTimerHandler+0x40>)
 800616a:	701a      	strb	r2, [r3, #0]
}
 800616c:	bf00      	nop
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr
 8006174:	200006c9 	.word	0x200006c9
 8006178:	200006ca 	.word	0x200006ca

0800617c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006180:	e7fe      	b.n	8006180 <NMI_Handler+0x4>

08006182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006182:	b480      	push	{r7}
 8006184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006186:	e7fe      	b.n	8006186 <HardFault_Handler+0x4>

08006188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800618c:	e7fe      	b.n	800618c <MemManage_Handler+0x4>

0800618e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800618e:	b480      	push	{r7}
 8006190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006192:	e7fe      	b.n	8006192 <BusFault_Handler+0x4>

08006194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006198:	e7fe      	b.n	8006198 <UsageFault_Handler+0x4>

0800619a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800619a:	b480      	push	{r7}
 800619c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800619e:	bf00      	nop
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr

080061a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061a6:	b480      	push	{r7}
 80061a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061aa:	bf00      	nop
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr

080061b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061b2:	b480      	push	{r7}
 80061b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061b6:	bf00      	nop
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bc80      	pop	{r7}
 80061bc:	4770      	bx	lr
	...

080061c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80061c4:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <SysTick_Handler+0x30>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	3301      	adds	r3, #1
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	4b08      	ldr	r3, [pc, #32]	; (80061f0 <SysTick_Handler+0x30>)
 80061d0:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt >=10)
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <SysTick_Handler+0x30>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b09      	cmp	r3, #9
 80061da:	d904      	bls.n	80061e6 <SysTick_Handler+0x26>
		{
			FatFsCnt = 0;
 80061dc:	4b04      	ldr	r3, [pc, #16]	; (80061f0 <SysTick_Handler+0x30>)
 80061de:	2200      	movs	r2, #0
 80061e0:	701a      	strb	r2, [r3, #0]
			SDTimerHandler();
 80061e2:	f7ff ffa9 	bl	8006138 <SDTimerHandler>
		}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061e6:	f000 f8ef 	bl	80063c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061ea:	bf00      	nop
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	200006c8 	.word	0x200006c8

080061f4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_MENU_Pin);
 80061f8:	2010      	movs	r0, #16
 80061fa:	f000 fe87 	bl	8006f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80061fe:	bf00      	nop
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006208:	4802      	ldr	r0, [pc, #8]	; (8006214 <DMA1_Channel6_IRQHandler+0x10>)
 800620a:	f000 fb95 	bl	8006938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	2000065c 	.word	0x2000065c

08006218 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_AVANCA_Pin);
 800621c:	2020      	movs	r0, #32
 800621e:	f000 fe75 	bl	8006f0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_SELECT_Pin);
 8006222:	2040      	movs	r0, #64	; 0x40
 8006224:	f000 fe72 	bl	8006f0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_STOP_Pin);
 8006228:	2080      	movs	r0, #128	; 0x80
 800622a:	f000 fe6f 	bl	8006f0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_INSERT_Pin);
 800622e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006232:	f000 fe6b 	bl	8006f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006236:	bf00      	nop
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006240:	4802      	ldr	r0, [pc, #8]	; (800624c <TIM2_IRQHandler+0x10>)
 8006242:	f002 f972 	bl	800852a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006246:	bf00      	nop
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000588 	.word	0x20000588

08006250 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006254:	4802      	ldr	r0, [pc, #8]	; (8006260 <TIM3_IRQHandler+0x10>)
 8006256:	f002 f968 	bl	800852a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800625a:	bf00      	nop
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	200005d0 	.word	0x200005d0

08006264 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006268:	4802      	ldr	r0, [pc, #8]	; (8006274 <USART2_IRQHandler+0x10>)
 800626a:	f002 fd6d 	bl	8008d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800626e:	bf00      	nop
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000618 	.word	0x20000618

08006278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006280:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <_sbrk+0x5c>)
 8006282:	4b15      	ldr	r3, [pc, #84]	; (80062d8 <_sbrk+0x60>)
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800628c:	4b13      	ldr	r3, [pc, #76]	; (80062dc <_sbrk+0x64>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d102      	bne.n	800629a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <_sbrk+0x64>)
 8006296:	4a12      	ldr	r2, [pc, #72]	; (80062e0 <_sbrk+0x68>)
 8006298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800629a:	4b10      	ldr	r3, [pc, #64]	; (80062dc <_sbrk+0x64>)
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4413      	add	r3, r2
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d207      	bcs.n	80062b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062a8:	f003 faea 	bl	8009880 <__errno>
 80062ac:	4603      	mov	r3, r0
 80062ae:	220c      	movs	r2, #12
 80062b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	e009      	b.n	80062cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062b8:	4b08      	ldr	r3, [pc, #32]	; (80062dc <_sbrk+0x64>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062be:	4b07      	ldr	r3, [pc, #28]	; (80062dc <_sbrk+0x64>)
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4413      	add	r3, r2
 80062c6:	4a05      	ldr	r2, [pc, #20]	; (80062dc <_sbrk+0x64>)
 80062c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062ca:	68fb      	ldr	r3, [r7, #12]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20005000 	.word	0x20005000
 80062d8:	00000400 	.word	0x00000400
 80062dc:	200006d0 	.word	0x200006d0
 80062e0:	20000720 	.word	0x20000720

080062e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80062e8:	bf00      	nop
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr

080062f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062f0:	480c      	ldr	r0, [pc, #48]	; (8006324 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80062f2:	490d      	ldr	r1, [pc, #52]	; (8006328 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80062f4:	4a0d      	ldr	r2, [pc, #52]	; (800632c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80062f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062f8:	e002      	b.n	8006300 <LoopCopyDataInit>

080062fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062fe:	3304      	adds	r3, #4

08006300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006304:	d3f9      	bcc.n	80062fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006306:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006308:	4c0a      	ldr	r4, [pc, #40]	; (8006334 <LoopFillZerobss+0x22>)
  movs r3, #0
 800630a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800630c:	e001      	b.n	8006312 <LoopFillZerobss>

0800630e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800630e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006310:	3204      	adds	r2, #4

08006312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006314:	d3fb      	bcc.n	800630e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006316:	f7ff ffe5 	bl	80062e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800631a:	f003 fab7 	bl	800988c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800631e:	f7ff f8e5 	bl	80054ec <main>
  bx lr
 8006322:	4770      	bx	lr
  ldr r0, =_sdata
 8006324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006328:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 800632c:	0800c5ac 	.word	0x0800c5ac
  ldr r2, =_sbss
 8006330:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8006334:	20000720 	.word	0x20000720

08006338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006338:	e7fe      	b.n	8006338 <ADC1_2_IRQHandler>
	...

0800633c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006340:	4b08      	ldr	r3, [pc, #32]	; (8006364 <HAL_Init+0x28>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a07      	ldr	r2, [pc, #28]	; (8006364 <HAL_Init+0x28>)
 8006346:	f043 0310 	orr.w	r3, r3, #16
 800634a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800634c:	2003      	movs	r0, #3
 800634e:	f000 f947 	bl	80065e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006352:	200f      	movs	r0, #15
 8006354:	f000 f808 	bl	8006368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006358:	f7ff fd8c 	bl	8005e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40022000 	.word	0x40022000

08006368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <HAL_InitTick+0x54>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <HAL_InitTick+0x58>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	4619      	mov	r1, r3
 800637a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800637e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006382:	fbb2 f3f3 	udiv	r3, r2, r3
 8006386:	4618      	mov	r0, r3
 8006388:	f000 f95f 	bl	800664a <HAL_SYSTICK_Config>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e00e      	b.n	80063b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b0f      	cmp	r3, #15
 800639a:	d80a      	bhi.n	80063b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800639c:	2200      	movs	r2, #0
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	f000 f927 	bl	80065f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80063a8:	4a06      	ldr	r2, [pc, #24]	; (80063c4 <HAL_InitTick+0x5c>)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e000      	b.n	80063b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	200000e8 	.word	0x200000e8
 80063c0:	200000f0 	.word	0x200000f0
 80063c4:	200000ec 	.word	0x200000ec

080063c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <HAL_IncTick+0x1c>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <HAL_IncTick+0x20>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4413      	add	r3, r2
 80063d8:	4a03      	ldr	r2, [pc, #12]	; (80063e8 <HAL_IncTick+0x20>)
 80063da:	6013      	str	r3, [r2, #0]
}
 80063dc:	bf00      	nop
 80063de:	46bd      	mov	sp, r7
 80063e0:	bc80      	pop	{r7}
 80063e2:	4770      	bx	lr
 80063e4:	200000f0 	.word	0x200000f0
 80063e8:	200006d4 	.word	0x200006d4

080063ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  return uwTick;
 80063f0:	4b02      	ldr	r3, [pc, #8]	; (80063fc <HAL_GetTick+0x10>)
 80063f2:	681b      	ldr	r3, [r3, #0]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr
 80063fc:	200006d4 	.word	0x200006d4

08006400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006408:	f7ff fff0 	bl	80063ec <HAL_GetTick>
 800640c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006418:	d005      	beq.n	8006426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800641a:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <HAL_Delay+0x44>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006426:	bf00      	nop
 8006428:	f7ff ffe0 	bl	80063ec <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	429a      	cmp	r2, r3
 8006436:	d8f7      	bhi.n	8006428 <HAL_Delay+0x28>
  {
  }
}
 8006438:	bf00      	nop
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	200000f0 	.word	0x200000f0

08006448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006458:	4b0c      	ldr	r3, [pc, #48]	; (800648c <__NVIC_SetPriorityGrouping+0x44>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006464:	4013      	ands	r3, r2
 8006466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800647a:	4a04      	ldr	r2, [pc, #16]	; (800648c <__NVIC_SetPriorityGrouping+0x44>)
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	60d3      	str	r3, [r2, #12]
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	e000ed00 	.word	0xe000ed00

08006490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006494:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <__NVIC_GetPriorityGrouping+0x18>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	0a1b      	lsrs	r3, r3, #8
 800649a:	f003 0307 	and.w	r3, r3, #7
}
 800649e:	4618      	mov	r0, r3
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bc80      	pop	{r7}
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	e000ed00 	.word	0xe000ed00

080064ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	4603      	mov	r3, r0
 80064b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	db0b      	blt.n	80064d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	f003 021f 	and.w	r2, r3, #31
 80064c4:	4906      	ldr	r1, [pc, #24]	; (80064e0 <__NVIC_EnableIRQ+0x34>)
 80064c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	2001      	movs	r0, #1
 80064ce:	fa00 f202 	lsl.w	r2, r0, r2
 80064d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr
 80064e0:	e000e100 	.word	0xe000e100

080064e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	6039      	str	r1, [r7, #0]
 80064ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	db0a      	blt.n	800650e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	490c      	ldr	r1, [pc, #48]	; (8006530 <__NVIC_SetPriority+0x4c>)
 80064fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006502:	0112      	lsls	r2, r2, #4
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	440b      	add	r3, r1
 8006508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800650c:	e00a      	b.n	8006524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	b2da      	uxtb	r2, r3
 8006512:	4908      	ldr	r1, [pc, #32]	; (8006534 <__NVIC_SetPriority+0x50>)
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	3b04      	subs	r3, #4
 800651c:	0112      	lsls	r2, r2, #4
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	440b      	add	r3, r1
 8006522:	761a      	strb	r2, [r3, #24]
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	bc80      	pop	{r7}
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	e000e100 	.word	0xe000e100
 8006534:	e000ed00 	.word	0xe000ed00

08006538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006538:	b480      	push	{r7}
 800653a:	b089      	sub	sp, #36	; 0x24
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	f1c3 0307 	rsb	r3, r3, #7
 8006552:	2b04      	cmp	r3, #4
 8006554:	bf28      	it	cs
 8006556:	2304      	movcs	r3, #4
 8006558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	3304      	adds	r3, #4
 800655e:	2b06      	cmp	r3, #6
 8006560:	d902      	bls.n	8006568 <NVIC_EncodePriority+0x30>
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	3b03      	subs	r3, #3
 8006566:	e000      	b.n	800656a <NVIC_EncodePriority+0x32>
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800656c:	f04f 32ff 	mov.w	r2, #4294967295
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	43da      	mvns	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	401a      	ands	r2, r3
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006580:	f04f 31ff 	mov.w	r1, #4294967295
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	fa01 f303 	lsl.w	r3, r1, r3
 800658a:	43d9      	mvns	r1, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006590:	4313      	orrs	r3, r2
         );
}
 8006592:	4618      	mov	r0, r3
 8006594:	3724      	adds	r7, #36	; 0x24
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065ac:	d301      	bcc.n	80065b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065ae:	2301      	movs	r3, #1
 80065b0:	e00f      	b.n	80065d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065b2:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <SysTick_Config+0x40>)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065ba:	210f      	movs	r1, #15
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	f7ff ff90 	bl	80064e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <SysTick_Config+0x40>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065ca:	4b04      	ldr	r3, [pc, #16]	; (80065dc <SysTick_Config+0x40>)
 80065cc:	2207      	movs	r2, #7
 80065ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	e000e010 	.word	0xe000e010

080065e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ff2d 	bl	8006448 <__NVIC_SetPriorityGrouping>
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b086      	sub	sp, #24
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	4603      	mov	r3, r0
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
 8006602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006608:	f7ff ff42 	bl	8006490 <__NVIC_GetPriorityGrouping>
 800660c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	6978      	ldr	r0, [r7, #20]
 8006614:	f7ff ff90 	bl	8006538 <NVIC_EncodePriority>
 8006618:	4602      	mov	r2, r0
 800661a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff ff5f 	bl	80064e4 <__NVIC_SetPriority>
}
 8006626:	bf00      	nop
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	4603      	mov	r3, r0
 8006636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff ff35 	bl	80064ac <__NVIC_EnableIRQ>
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff ffa2 	bl	800659c <SysTick_Config>
 8006658:	4603      	mov	r3, r0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e043      	b.n	8006702 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	4b22      	ldr	r3, [pc, #136]	; (800670c <HAL_DMA_Init+0xa8>)
 8006682:	4413      	add	r3, r2
 8006684:	4a22      	ldr	r2, [pc, #136]	; (8006710 <HAL_DMA_Init+0xac>)
 8006686:	fba2 2303 	umull	r2, r3, r2, r3
 800668a:	091b      	lsrs	r3, r3, #4
 800668c:	009a      	lsls	r2, r3, #2
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <HAL_DMA_Init+0xb0>)
 8006696:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80066ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80066b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80066bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr
 800670c:	bffdfff8 	.word	0xbffdfff8
 8006710:	cccccccd 	.word	0xcccccccd
 8006714:	40020000 	.word	0x40020000

08006718 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_DMA_Start_IT+0x20>
 8006734:	2302      	movs	r3, #2
 8006736:	e04a      	b.n	80067ce <HAL_DMA_Start_IT+0xb6>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006746:	2b01      	cmp	r3, #1
 8006748:	d13a      	bne.n	80067c0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2202      	movs	r2, #2
 800674e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0201 	bic.w	r2, r2, #1
 8006766:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 f9e8 	bl	8006b44 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 020e 	orr.w	r2, r2, #14
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e00f      	b.n	80067ae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0204 	bic.w	r2, r2, #4
 800679c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 020a 	orr.w	r2, r2, #10
 80067ac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e005      	b.n	80067cc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80067c8:	2302      	movs	r3, #2
 80067ca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b085      	sub	sp, #20
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d008      	beq.n	80067fe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2204      	movs	r2, #4
 80067f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e020      	b.n	8006840 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 020e 	bic.w	r2, r2, #14
 800680c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0201 	bic.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006826:	2101      	movs	r1, #1
 8006828:	fa01 f202 	lsl.w	r2, r1, r2
 800682c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800683e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr
	...

0800684c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800685e:	2b02      	cmp	r3, #2
 8006860:	d005      	beq.n	800686e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2204      	movs	r2, #4
 8006866:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	73fb      	strb	r3, [r7, #15]
 800686c:	e051      	b.n	8006912 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 020e 	bic.w	r2, r2, #14
 800687c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0201 	bic.w	r2, r2, #1
 800688c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a22      	ldr	r2, [pc, #136]	; (800691c <HAL_DMA_Abort_IT+0xd0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d029      	beq.n	80068ec <HAL_DMA_Abort_IT+0xa0>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a20      	ldr	r2, [pc, #128]	; (8006920 <HAL_DMA_Abort_IT+0xd4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d022      	beq.n	80068e8 <HAL_DMA_Abort_IT+0x9c>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a1f      	ldr	r2, [pc, #124]	; (8006924 <HAL_DMA_Abort_IT+0xd8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d01a      	beq.n	80068e2 <HAL_DMA_Abort_IT+0x96>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1d      	ldr	r2, [pc, #116]	; (8006928 <HAL_DMA_Abort_IT+0xdc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d012      	beq.n	80068dc <HAL_DMA_Abort_IT+0x90>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a1c      	ldr	r2, [pc, #112]	; (800692c <HAL_DMA_Abort_IT+0xe0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00a      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x8a>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a1a      	ldr	r2, [pc, #104]	; (8006930 <HAL_DMA_Abort_IT+0xe4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d102      	bne.n	80068d0 <HAL_DMA_Abort_IT+0x84>
 80068ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068ce:	e00e      	b.n	80068ee <HAL_DMA_Abort_IT+0xa2>
 80068d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068d4:	e00b      	b.n	80068ee <HAL_DMA_Abort_IT+0xa2>
 80068d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068da:	e008      	b.n	80068ee <HAL_DMA_Abort_IT+0xa2>
 80068dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068e0:	e005      	b.n	80068ee <HAL_DMA_Abort_IT+0xa2>
 80068e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068e6:	e002      	b.n	80068ee <HAL_DMA_Abort_IT+0xa2>
 80068e8:	2310      	movs	r3, #16
 80068ea:	e000      	b.n	80068ee <HAL_DMA_Abort_IT+0xa2>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4a11      	ldr	r2, [pc, #68]	; (8006934 <HAL_DMA_Abort_IT+0xe8>)
 80068f0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3
    } 
  }
  return status;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40020008 	.word	0x40020008
 8006920:	4002001c 	.word	0x4002001c
 8006924:	40020030 	.word	0x40020030
 8006928:	40020044 	.word	0x40020044
 800692c:	40020058 	.word	0x40020058
 8006930:	4002006c 	.word	0x4002006c
 8006934:	40020000 	.word	0x40020000

08006938 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	2204      	movs	r2, #4
 8006956:	409a      	lsls	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4013      	ands	r3, r2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d04f      	beq.n	8006a00 <HAL_DMA_IRQHandler+0xc8>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b00      	cmp	r3, #0
 8006968:	d04a      	beq.n	8006a00 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b00      	cmp	r3, #0
 8006976:	d107      	bne.n	8006988 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0204 	bic.w	r2, r2, #4
 8006986:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a66      	ldr	r2, [pc, #408]	; (8006b28 <HAL_DMA_IRQHandler+0x1f0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d029      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xae>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a65      	ldr	r2, [pc, #404]	; (8006b2c <HAL_DMA_IRQHandler+0x1f4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d022      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xaa>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a63      	ldr	r2, [pc, #396]	; (8006b30 <HAL_DMA_IRQHandler+0x1f8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01a      	beq.n	80069dc <HAL_DMA_IRQHandler+0xa4>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a62      	ldr	r2, [pc, #392]	; (8006b34 <HAL_DMA_IRQHandler+0x1fc>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d012      	beq.n	80069d6 <HAL_DMA_IRQHandler+0x9e>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a60      	ldr	r2, [pc, #384]	; (8006b38 <HAL_DMA_IRQHandler+0x200>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00a      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x98>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a5f      	ldr	r2, [pc, #380]	; (8006b3c <HAL_DMA_IRQHandler+0x204>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d102      	bne.n	80069ca <HAL_DMA_IRQHandler+0x92>
 80069c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80069c8:	e00e      	b.n	80069e8 <HAL_DMA_IRQHandler+0xb0>
 80069ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80069ce:	e00b      	b.n	80069e8 <HAL_DMA_IRQHandler+0xb0>
 80069d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069d4:	e008      	b.n	80069e8 <HAL_DMA_IRQHandler+0xb0>
 80069d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069da:	e005      	b.n	80069e8 <HAL_DMA_IRQHandler+0xb0>
 80069dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069e0:	e002      	b.n	80069e8 <HAL_DMA_IRQHandler+0xb0>
 80069e2:	2340      	movs	r3, #64	; 0x40
 80069e4:	e000      	b.n	80069e8 <HAL_DMA_IRQHandler+0xb0>
 80069e6:	2304      	movs	r3, #4
 80069e8:	4a55      	ldr	r2, [pc, #340]	; (8006b40 <HAL_DMA_IRQHandler+0x208>)
 80069ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8094 	beq.w	8006b1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80069fe:	e08e      	b.n	8006b1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	2202      	movs	r2, #2
 8006a06:	409a      	lsls	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d056      	beq.n	8006abe <HAL_DMA_IRQHandler+0x186>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d051      	beq.n	8006abe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10b      	bne.n	8006a40 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 020a 	bic.w	r2, r2, #10
 8006a36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a38      	ldr	r2, [pc, #224]	; (8006b28 <HAL_DMA_IRQHandler+0x1f0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d029      	beq.n	8006a9e <HAL_DMA_IRQHandler+0x166>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a37      	ldr	r2, [pc, #220]	; (8006b2c <HAL_DMA_IRQHandler+0x1f4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d022      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x162>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a35      	ldr	r2, [pc, #212]	; (8006b30 <HAL_DMA_IRQHandler+0x1f8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d01a      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x15c>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a34      	ldr	r2, [pc, #208]	; (8006b34 <HAL_DMA_IRQHandler+0x1fc>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d012      	beq.n	8006a8e <HAL_DMA_IRQHandler+0x156>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a32      	ldr	r2, [pc, #200]	; (8006b38 <HAL_DMA_IRQHandler+0x200>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00a      	beq.n	8006a88 <HAL_DMA_IRQHandler+0x150>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a31      	ldr	r2, [pc, #196]	; (8006b3c <HAL_DMA_IRQHandler+0x204>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d102      	bne.n	8006a82 <HAL_DMA_IRQHandler+0x14a>
 8006a7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006a80:	e00e      	b.n	8006aa0 <HAL_DMA_IRQHandler+0x168>
 8006a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a86:	e00b      	b.n	8006aa0 <HAL_DMA_IRQHandler+0x168>
 8006a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a8c:	e008      	b.n	8006aa0 <HAL_DMA_IRQHandler+0x168>
 8006a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a92:	e005      	b.n	8006aa0 <HAL_DMA_IRQHandler+0x168>
 8006a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a98:	e002      	b.n	8006aa0 <HAL_DMA_IRQHandler+0x168>
 8006a9a:	2320      	movs	r3, #32
 8006a9c:	e000      	b.n	8006aa0 <HAL_DMA_IRQHandler+0x168>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	4a27      	ldr	r2, [pc, #156]	; (8006b40 <HAL_DMA_IRQHandler+0x208>)
 8006aa2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d034      	beq.n	8006b1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006abc:	e02f      	b.n	8006b1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	2208      	movs	r2, #8
 8006ac4:	409a      	lsls	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d028      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x1e8>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d023      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 020e 	bic.w	r2, r2, #14
 8006ae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af0:	2101      	movs	r1, #1
 8006af2:	fa01 f202 	lsl.w	r2, r1, r2
 8006af6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
    }
  }
  return;
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
}
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40020008 	.word	0x40020008
 8006b2c:	4002001c 	.word	0x4002001c
 8006b30:	40020030 	.word	0x40020030
 8006b34:	40020044 	.word	0x40020044
 8006b38:	40020058 	.word	0x40020058
 8006b3c:	4002006c 	.word	0x4002006c
 8006b40:	40020000 	.word	0x40020000

08006b44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b10      	cmp	r3, #16
 8006b70:	d108      	bne.n	8006b84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b82:	e007      	b.n	8006b94 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	60da      	str	r2, [r3, #12]
}
 8006b94:	bf00      	nop
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr
	...

08006ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b08b      	sub	sp, #44	; 0x2c
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006baa:	2300      	movs	r3, #0
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bb2:	e169      	b.n	8006e88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	f040 8158 	bne.w	8006e82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	4a9a      	ldr	r2, [pc, #616]	; (8006e40 <HAL_GPIO_Init+0x2a0>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d05e      	beq.n	8006c9a <HAL_GPIO_Init+0xfa>
 8006bdc:	4a98      	ldr	r2, [pc, #608]	; (8006e40 <HAL_GPIO_Init+0x2a0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d875      	bhi.n	8006cce <HAL_GPIO_Init+0x12e>
 8006be2:	4a98      	ldr	r2, [pc, #608]	; (8006e44 <HAL_GPIO_Init+0x2a4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d058      	beq.n	8006c9a <HAL_GPIO_Init+0xfa>
 8006be8:	4a96      	ldr	r2, [pc, #600]	; (8006e44 <HAL_GPIO_Init+0x2a4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d86f      	bhi.n	8006cce <HAL_GPIO_Init+0x12e>
 8006bee:	4a96      	ldr	r2, [pc, #600]	; (8006e48 <HAL_GPIO_Init+0x2a8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d052      	beq.n	8006c9a <HAL_GPIO_Init+0xfa>
 8006bf4:	4a94      	ldr	r2, [pc, #592]	; (8006e48 <HAL_GPIO_Init+0x2a8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d869      	bhi.n	8006cce <HAL_GPIO_Init+0x12e>
 8006bfa:	4a94      	ldr	r2, [pc, #592]	; (8006e4c <HAL_GPIO_Init+0x2ac>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d04c      	beq.n	8006c9a <HAL_GPIO_Init+0xfa>
 8006c00:	4a92      	ldr	r2, [pc, #584]	; (8006e4c <HAL_GPIO_Init+0x2ac>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d863      	bhi.n	8006cce <HAL_GPIO_Init+0x12e>
 8006c06:	4a92      	ldr	r2, [pc, #584]	; (8006e50 <HAL_GPIO_Init+0x2b0>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d046      	beq.n	8006c9a <HAL_GPIO_Init+0xfa>
 8006c0c:	4a90      	ldr	r2, [pc, #576]	; (8006e50 <HAL_GPIO_Init+0x2b0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d85d      	bhi.n	8006cce <HAL_GPIO_Init+0x12e>
 8006c12:	2b12      	cmp	r3, #18
 8006c14:	d82a      	bhi.n	8006c6c <HAL_GPIO_Init+0xcc>
 8006c16:	2b12      	cmp	r3, #18
 8006c18:	d859      	bhi.n	8006cce <HAL_GPIO_Init+0x12e>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <HAL_GPIO_Init+0x80>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c9b 	.word	0x08006c9b
 8006c24:	08006c75 	.word	0x08006c75
 8006c28:	08006c87 	.word	0x08006c87
 8006c2c:	08006cc9 	.word	0x08006cc9
 8006c30:	08006ccf 	.word	0x08006ccf
 8006c34:	08006ccf 	.word	0x08006ccf
 8006c38:	08006ccf 	.word	0x08006ccf
 8006c3c:	08006ccf 	.word	0x08006ccf
 8006c40:	08006ccf 	.word	0x08006ccf
 8006c44:	08006ccf 	.word	0x08006ccf
 8006c48:	08006ccf 	.word	0x08006ccf
 8006c4c:	08006ccf 	.word	0x08006ccf
 8006c50:	08006ccf 	.word	0x08006ccf
 8006c54:	08006ccf 	.word	0x08006ccf
 8006c58:	08006ccf 	.word	0x08006ccf
 8006c5c:	08006ccf 	.word	0x08006ccf
 8006c60:	08006ccf 	.word	0x08006ccf
 8006c64:	08006c7d 	.word	0x08006c7d
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	4a79      	ldr	r2, [pc, #484]	; (8006e54 <HAL_GPIO_Init+0x2b4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d013      	beq.n	8006c9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006c72:	e02c      	b.n	8006cce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	623b      	str	r3, [r7, #32]
          break;
 8006c7a:	e029      	b.n	8006cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	3304      	adds	r3, #4
 8006c82:	623b      	str	r3, [r7, #32]
          break;
 8006c84:	e024      	b.n	8006cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	623b      	str	r3, [r7, #32]
          break;
 8006c8e:	e01f      	b.n	8006cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	330c      	adds	r3, #12
 8006c96:	623b      	str	r3, [r7, #32]
          break;
 8006c98:	e01a      	b.n	8006cd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d102      	bne.n	8006ca8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006ca2:	2304      	movs	r3, #4
 8006ca4:	623b      	str	r3, [r7, #32]
          break;
 8006ca6:	e013      	b.n	8006cd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d105      	bne.n	8006cbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006cb0:	2308      	movs	r3, #8
 8006cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	611a      	str	r2, [r3, #16]
          break;
 8006cba:	e009      	b.n	8006cd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006cbc:	2308      	movs	r3, #8
 8006cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	615a      	str	r2, [r3, #20]
          break;
 8006cc6:	e003      	b.n	8006cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	623b      	str	r3, [r7, #32]
          break;
 8006ccc:	e000      	b.n	8006cd0 <HAL_GPIO_Init+0x130>
          break;
 8006cce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	2bff      	cmp	r3, #255	; 0xff
 8006cd4:	d801      	bhi.n	8006cda <HAL_GPIO_Init+0x13a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	e001      	b.n	8006cde <HAL_GPIO_Init+0x13e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	2bff      	cmp	r3, #255	; 0xff
 8006ce4:	d802      	bhi.n	8006cec <HAL_GPIO_Init+0x14c>
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	e002      	b.n	8006cf2 <HAL_GPIO_Init+0x152>
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	3b08      	subs	r3, #8
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	210f      	movs	r1, #15
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006d00:	43db      	mvns	r3, r3
 8006d02:	401a      	ands	r2, r3
 8006d04:	6a39      	ldr	r1, [r7, #32]
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80b1 	beq.w	8006e82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006d20:	4b4d      	ldr	r3, [pc, #308]	; (8006e58 <HAL_GPIO_Init+0x2b8>)
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	4a4c      	ldr	r2, [pc, #304]	; (8006e58 <HAL_GPIO_Init+0x2b8>)
 8006d26:	f043 0301 	orr.w	r3, r3, #1
 8006d2a:	6193      	str	r3, [r2, #24]
 8006d2c:	4b4a      	ldr	r3, [pc, #296]	; (8006e58 <HAL_GPIO_Init+0x2b8>)
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	60bb      	str	r3, [r7, #8]
 8006d36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006d38:	4a48      	ldr	r2, [pc, #288]	; (8006e5c <HAL_GPIO_Init+0x2bc>)
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	089b      	lsrs	r3, r3, #2
 8006d3e:	3302      	adds	r3, #2
 8006d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	220f      	movs	r2, #15
 8006d50:	fa02 f303 	lsl.w	r3, r2, r3
 8006d54:	43db      	mvns	r3, r3
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a40      	ldr	r2, [pc, #256]	; (8006e60 <HAL_GPIO_Init+0x2c0>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d013      	beq.n	8006d8c <HAL_GPIO_Init+0x1ec>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a3f      	ldr	r2, [pc, #252]	; (8006e64 <HAL_GPIO_Init+0x2c4>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00d      	beq.n	8006d88 <HAL_GPIO_Init+0x1e8>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a3e      	ldr	r2, [pc, #248]	; (8006e68 <HAL_GPIO_Init+0x2c8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d007      	beq.n	8006d84 <HAL_GPIO_Init+0x1e4>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a3d      	ldr	r2, [pc, #244]	; (8006e6c <HAL_GPIO_Init+0x2cc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d101      	bne.n	8006d80 <HAL_GPIO_Init+0x1e0>
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e006      	b.n	8006d8e <HAL_GPIO_Init+0x1ee>
 8006d80:	2304      	movs	r3, #4
 8006d82:	e004      	b.n	8006d8e <HAL_GPIO_Init+0x1ee>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e002      	b.n	8006d8e <HAL_GPIO_Init+0x1ee>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e000      	b.n	8006d8e <HAL_GPIO_Init+0x1ee>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d90:	f002 0203 	and.w	r2, r2, #3
 8006d94:	0092      	lsls	r2, r2, #2
 8006d96:	4093      	lsls	r3, r2
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006d9e:	492f      	ldr	r1, [pc, #188]	; (8006e5c <HAL_GPIO_Init+0x2bc>)
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	089b      	lsrs	r3, r3, #2
 8006da4:	3302      	adds	r3, #2
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d006      	beq.n	8006dc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006db8:	4b2d      	ldr	r3, [pc, #180]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	492c      	ldr	r1, [pc, #176]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	600b      	str	r3, [r1, #0]
 8006dc4:	e006      	b.n	8006dd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006dc6:	4b2a      	ldr	r3, [pc, #168]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	4928      	ldr	r1, [pc, #160]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d006      	beq.n	8006dee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006de0:	4b23      	ldr	r3, [pc, #140]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	4922      	ldr	r1, [pc, #136]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	604b      	str	r3, [r1, #4]
 8006dec:	e006      	b.n	8006dfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006dee:	4b20      	ldr	r3, [pc, #128]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	43db      	mvns	r3, r3
 8006df6:	491e      	ldr	r1, [pc, #120]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d006      	beq.n	8006e16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006e08:	4b19      	ldr	r3, [pc, #100]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	4918      	ldr	r1, [pc, #96]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	608b      	str	r3, [r1, #8]
 8006e14:	e006      	b.n	8006e24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006e16:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006e18:	689a      	ldr	r2, [r3, #8]
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	4914      	ldr	r1, [pc, #80]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d021      	beq.n	8006e74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006e30:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	490e      	ldr	r1, [pc, #56]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60cb      	str	r3, [r1, #12]
 8006e3c:	e021      	b.n	8006e82 <HAL_GPIO_Init+0x2e2>
 8006e3e:	bf00      	nop
 8006e40:	10320000 	.word	0x10320000
 8006e44:	10310000 	.word	0x10310000
 8006e48:	10220000 	.word	0x10220000
 8006e4c:	10210000 	.word	0x10210000
 8006e50:	10120000 	.word	0x10120000
 8006e54:	10110000 	.word	0x10110000
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	40010000 	.word	0x40010000
 8006e60:	40010800 	.word	0x40010800
 8006e64:	40010c00 	.word	0x40010c00
 8006e68:	40011000 	.word	0x40011000
 8006e6c:	40011400 	.word	0x40011400
 8006e70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006e74:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <HAL_GPIO_Init+0x304>)
 8006e76:	68da      	ldr	r2, [r3, #12]
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	43db      	mvns	r3, r3
 8006e7c:	4909      	ldr	r1, [pc, #36]	; (8006ea4 <HAL_GPIO_Init+0x304>)
 8006e7e:	4013      	ands	r3, r2
 8006e80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	3301      	adds	r3, #1
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f47f ae8e 	bne.w	8006bb4 <HAL_GPIO_Init+0x14>
  }
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	372c      	adds	r7, #44	; 0x2c
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bc80      	pop	{r7}
 8006ea2:	4770      	bx	lr
 8006ea4:	40010400 	.word	0x40010400

08006ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	807b      	strh	r3, [r7, #2]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006eb8:	787b      	ldrb	r3, [r7, #1]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ebe:	887a      	ldrh	r2, [r7, #2]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006ec4:	e003      	b.n	8006ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006ec6:	887b      	ldrh	r3, [r7, #2]
 8006ec8:	041a      	lsls	r2, r3, #16
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	611a      	str	r2, [r3, #16]
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006eea:	887a      	ldrh	r2, [r7, #2]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	041a      	lsls	r2, r3, #16
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	43d9      	mvns	r1, r3
 8006ef6:	887b      	ldrh	r3, [r7, #2]
 8006ef8:	400b      	ands	r3, r1
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	611a      	str	r2, [r3, #16]
}
 8006f00:	bf00      	nop
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr
	...

08006f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006f16:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f18:	695a      	ldr	r2, [r3, #20]
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d006      	beq.n	8006f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f22:	4a05      	ldr	r2, [pc, #20]	; (8006f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f24:	88fb      	ldrh	r3, [r7, #6]
 8006f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f28:	88fb      	ldrh	r3, [r7, #6]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe ff56 	bl	8005ddc <HAL_GPIO_EXTI_Callback>
  }
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40010400 	.word	0x40010400

08006f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e272      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 8087 	beq.w	800706a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f5c:	4b92      	ldr	r3, [pc, #584]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f003 030c 	and.w	r3, r3, #12
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d00c      	beq.n	8006f82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006f68:	4b8f      	ldr	r3, [pc, #572]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f003 030c 	and.w	r3, r3, #12
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d112      	bne.n	8006f9a <HAL_RCC_OscConfig+0x5e>
 8006f74:	4b8c      	ldr	r3, [pc, #560]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f80:	d10b      	bne.n	8006f9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f82:	4b89      	ldr	r3, [pc, #548]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d06c      	beq.n	8007068 <HAL_RCC_OscConfig+0x12c>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d168      	bne.n	8007068 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e24c      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa2:	d106      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x76>
 8006fa4:	4b80      	ldr	r3, [pc, #512]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a7f      	ldr	r2, [pc, #508]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	e02e      	b.n	8007010 <HAL_RCC_OscConfig+0xd4>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10c      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x98>
 8006fba:	4b7b      	ldr	r3, [pc, #492]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a7a      	ldr	r2, [pc, #488]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	4b78      	ldr	r3, [pc, #480]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a77      	ldr	r2, [pc, #476]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	e01d      	b.n	8007010 <HAL_RCC_OscConfig+0xd4>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fdc:	d10c      	bne.n	8006ff8 <HAL_RCC_OscConfig+0xbc>
 8006fde:	4b72      	ldr	r3, [pc, #456]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a71      	ldr	r2, [pc, #452]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	4b6f      	ldr	r3, [pc, #444]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a6e      	ldr	r2, [pc, #440]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	e00b      	b.n	8007010 <HAL_RCC_OscConfig+0xd4>
 8006ff8:	4b6b      	ldr	r3, [pc, #428]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a6a      	ldr	r2, [pc, #424]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8006ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	4b68      	ldr	r3, [pc, #416]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a67      	ldr	r2, [pc, #412]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 800700a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800700e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d013      	beq.n	8007040 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007018:	f7ff f9e8 	bl	80063ec <HAL_GetTick>
 800701c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007020:	f7ff f9e4 	bl	80063ec <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b64      	cmp	r3, #100	; 0x64
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e200      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007032:	4b5d      	ldr	r3, [pc, #372]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0f0      	beq.n	8007020 <HAL_RCC_OscConfig+0xe4>
 800703e:	e014      	b.n	800706a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007040:	f7ff f9d4 	bl	80063ec <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007048:	f7ff f9d0 	bl	80063ec <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b64      	cmp	r3, #100	; 0x64
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e1ec      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800705a:	4b53      	ldr	r3, [pc, #332]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1f0      	bne.n	8007048 <HAL_RCC_OscConfig+0x10c>
 8007066:	e000      	b.n	800706a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d063      	beq.n	800713e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007076:	4b4c      	ldr	r3, [pc, #304]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f003 030c 	and.w	r3, r3, #12
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00b      	beq.n	800709a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007082:	4b49      	ldr	r3, [pc, #292]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f003 030c 	and.w	r3, r3, #12
 800708a:	2b08      	cmp	r3, #8
 800708c:	d11c      	bne.n	80070c8 <HAL_RCC_OscConfig+0x18c>
 800708e:	4b46      	ldr	r3, [pc, #280]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d116      	bne.n	80070c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800709a:	4b43      	ldr	r3, [pc, #268]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <HAL_RCC_OscConfig+0x176>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d001      	beq.n	80070b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e1c0      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070b2:	4b3d      	ldr	r3, [pc, #244]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	4939      	ldr	r1, [pc, #228]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070c6:	e03a      	b.n	800713e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d020      	beq.n	8007112 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070d0:	4b36      	ldr	r3, [pc, #216]	; (80071ac <HAL_RCC_OscConfig+0x270>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d6:	f7ff f989 	bl	80063ec <HAL_GetTick>
 80070da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070dc:	e008      	b.n	80070f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070de:	f7ff f985 	bl	80063ec <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e1a1      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f0:	4b2d      	ldr	r3, [pc, #180]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0f0      	beq.n	80070de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070fc:	4b2a      	ldr	r3, [pc, #168]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	4927      	ldr	r1, [pc, #156]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 800710c:	4313      	orrs	r3, r2
 800710e:	600b      	str	r3, [r1, #0]
 8007110:	e015      	b.n	800713e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007112:	4b26      	ldr	r3, [pc, #152]	; (80071ac <HAL_RCC_OscConfig+0x270>)
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007118:	f7ff f968 	bl	80063ec <HAL_GetTick>
 800711c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007120:	f7ff f964 	bl	80063ec <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e180      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007132:	4b1d      	ldr	r3, [pc, #116]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1f0      	bne.n	8007120 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d03a      	beq.n	80071c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d019      	beq.n	8007186 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007152:	4b17      	ldr	r3, [pc, #92]	; (80071b0 <HAL_RCC_OscConfig+0x274>)
 8007154:	2201      	movs	r2, #1
 8007156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007158:	f7ff f948 	bl	80063ec <HAL_GetTick>
 800715c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800715e:	e008      	b.n	8007172 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007160:	f7ff f944 	bl	80063ec <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e160      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007172:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <HAL_RCC_OscConfig+0x26c>)
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0f0      	beq.n	8007160 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800717e:	2001      	movs	r0, #1
 8007180:	f000 fad8 	bl	8007734 <RCC_Delay>
 8007184:	e01c      	b.n	80071c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007186:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <HAL_RCC_OscConfig+0x274>)
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800718c:	f7ff f92e 	bl	80063ec <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007192:	e00f      	b.n	80071b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007194:	f7ff f92a 	bl	80063ec <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d908      	bls.n	80071b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e146      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
 80071a6:	bf00      	nop
 80071a8:	40021000 	.word	0x40021000
 80071ac:	42420000 	.word	0x42420000
 80071b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071b4:	4b92      	ldr	r3, [pc, #584]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e9      	bne.n	8007194 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 80a6 	beq.w	800731a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071d2:	4b8b      	ldr	r3, [pc, #556]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10d      	bne.n	80071fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071de:	4b88      	ldr	r3, [pc, #544]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	4a87      	ldr	r2, [pc, #540]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 80071e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e8:	61d3      	str	r3, [r2, #28]
 80071ea:	4b85      	ldr	r3, [pc, #532]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f2:	60bb      	str	r3, [r7, #8]
 80071f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071f6:	2301      	movs	r3, #1
 80071f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071fa:	4b82      	ldr	r3, [pc, #520]	; (8007404 <HAL_RCC_OscConfig+0x4c8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007202:	2b00      	cmp	r3, #0
 8007204:	d118      	bne.n	8007238 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007206:	4b7f      	ldr	r3, [pc, #508]	; (8007404 <HAL_RCC_OscConfig+0x4c8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a7e      	ldr	r2, [pc, #504]	; (8007404 <HAL_RCC_OscConfig+0x4c8>)
 800720c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007212:	f7ff f8eb 	bl	80063ec <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800721a:	f7ff f8e7 	bl	80063ec <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b64      	cmp	r3, #100	; 0x64
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e103      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800722c:	4b75      	ldr	r3, [pc, #468]	; (8007404 <HAL_RCC_OscConfig+0x4c8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0f0      	beq.n	800721a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d106      	bne.n	800724e <HAL_RCC_OscConfig+0x312>
 8007240:	4b6f      	ldr	r3, [pc, #444]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	4a6e      	ldr	r2, [pc, #440]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007246:	f043 0301 	orr.w	r3, r3, #1
 800724a:	6213      	str	r3, [r2, #32]
 800724c:	e02d      	b.n	80072aa <HAL_RCC_OscConfig+0x36e>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10c      	bne.n	8007270 <HAL_RCC_OscConfig+0x334>
 8007256:	4b6a      	ldr	r3, [pc, #424]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	4a69      	ldr	r2, [pc, #420]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 800725c:	f023 0301 	bic.w	r3, r3, #1
 8007260:	6213      	str	r3, [r2, #32]
 8007262:	4b67      	ldr	r3, [pc, #412]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	4a66      	ldr	r2, [pc, #408]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007268:	f023 0304 	bic.w	r3, r3, #4
 800726c:	6213      	str	r3, [r2, #32]
 800726e:	e01c      	b.n	80072aa <HAL_RCC_OscConfig+0x36e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	2b05      	cmp	r3, #5
 8007276:	d10c      	bne.n	8007292 <HAL_RCC_OscConfig+0x356>
 8007278:	4b61      	ldr	r3, [pc, #388]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	4a60      	ldr	r2, [pc, #384]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 800727e:	f043 0304 	orr.w	r3, r3, #4
 8007282:	6213      	str	r3, [r2, #32]
 8007284:	4b5e      	ldr	r3, [pc, #376]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	4a5d      	ldr	r2, [pc, #372]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 800728a:	f043 0301 	orr.w	r3, r3, #1
 800728e:	6213      	str	r3, [r2, #32]
 8007290:	e00b      	b.n	80072aa <HAL_RCC_OscConfig+0x36e>
 8007292:	4b5b      	ldr	r3, [pc, #364]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	4a5a      	ldr	r2, [pc, #360]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007298:	f023 0301 	bic.w	r3, r3, #1
 800729c:	6213      	str	r3, [r2, #32]
 800729e:	4b58      	ldr	r3, [pc, #352]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	4a57      	ldr	r2, [pc, #348]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 80072a4:	f023 0304 	bic.w	r3, r3, #4
 80072a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d015      	beq.n	80072de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072b2:	f7ff f89b 	bl	80063ec <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072b8:	e00a      	b.n	80072d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ba:	f7ff f897 	bl	80063ec <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e0b1      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d0:	4b4b      	ldr	r3, [pc, #300]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0ee      	beq.n	80072ba <HAL_RCC_OscConfig+0x37e>
 80072dc:	e014      	b.n	8007308 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072de:	f7ff f885 	bl	80063ec <HAL_GetTick>
 80072e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072e4:	e00a      	b.n	80072fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072e6:	f7ff f881 	bl	80063ec <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d901      	bls.n	80072fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e09b      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072fc:	4b40      	ldr	r3, [pc, #256]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1ee      	bne.n	80072e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d105      	bne.n	800731a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800730e:	4b3c      	ldr	r3, [pc, #240]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	4a3b      	ldr	r2, [pc, #236]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007318:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 8087 	beq.w	8007432 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007324:	4b36      	ldr	r3, [pc, #216]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f003 030c 	and.w	r3, r3, #12
 800732c:	2b08      	cmp	r3, #8
 800732e:	d061      	beq.n	80073f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	2b02      	cmp	r3, #2
 8007336:	d146      	bne.n	80073c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007338:	4b33      	ldr	r3, [pc, #204]	; (8007408 <HAL_RCC_OscConfig+0x4cc>)
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800733e:	f7ff f855 	bl	80063ec <HAL_GetTick>
 8007342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007344:	e008      	b.n	8007358 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007346:	f7ff f851 	bl	80063ec <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b02      	cmp	r3, #2
 8007352:	d901      	bls.n	8007358 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e06d      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007358:	4b29      	ldr	r3, [pc, #164]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1f0      	bne.n	8007346 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800736c:	d108      	bne.n	8007380 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800736e:	4b24      	ldr	r3, [pc, #144]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	4921      	ldr	r1, [pc, #132]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 800737c:	4313      	orrs	r3, r2
 800737e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007380:	4b1f      	ldr	r3, [pc, #124]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a19      	ldr	r1, [r3, #32]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	430b      	orrs	r3, r1
 8007392:	491b      	ldr	r1, [pc, #108]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 8007394:	4313      	orrs	r3, r2
 8007396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007398:	4b1b      	ldr	r3, [pc, #108]	; (8007408 <HAL_RCC_OscConfig+0x4cc>)
 800739a:	2201      	movs	r2, #1
 800739c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800739e:	f7ff f825 	bl	80063ec <HAL_GetTick>
 80073a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073a4:	e008      	b.n	80073b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073a6:	f7ff f821 	bl	80063ec <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e03d      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073b8:	4b11      	ldr	r3, [pc, #68]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0f0      	beq.n	80073a6 <HAL_RCC_OscConfig+0x46a>
 80073c4:	e035      	b.n	8007432 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073c6:	4b10      	ldr	r3, [pc, #64]	; (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073cc:	f7ff f80e 	bl	80063ec <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073d4:	f7ff f80a 	bl	80063ec <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e026      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073e6:	4b06      	ldr	r3, [pc, #24]	; (8007400 <HAL_RCC_OscConfig+0x4c4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0x498>
 80073f2:	e01e      	b.n	8007432 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d107      	bne.n	800740c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e019      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
 8007400:	40021000 	.word	0x40021000
 8007404:	40007000 	.word	0x40007000
 8007408:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800740c:	4b0b      	ldr	r3, [pc, #44]	; (800743c <HAL_RCC_OscConfig+0x500>)
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	429a      	cmp	r2, r3
 800741e:	d106      	bne.n	800742e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800742a:	429a      	cmp	r2, r3
 800742c:	d001      	beq.n	8007432 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	40021000 	.word	0x40021000

08007440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e0d0      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007454:	4b6a      	ldr	r3, [pc, #424]	; (8007600 <HAL_RCC_ClockConfig+0x1c0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d910      	bls.n	8007484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007462:	4b67      	ldr	r3, [pc, #412]	; (8007600 <HAL_RCC_ClockConfig+0x1c0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f023 0207 	bic.w	r2, r3, #7
 800746a:	4965      	ldr	r1, [pc, #404]	; (8007600 <HAL_RCC_ClockConfig+0x1c0>)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	4313      	orrs	r3, r2
 8007470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007472:	4b63      	ldr	r3, [pc, #396]	; (8007600 <HAL_RCC_ClockConfig+0x1c0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d001      	beq.n	8007484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e0b8      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d020      	beq.n	80074d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800749c:	4b59      	ldr	r3, [pc, #356]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	4a58      	ldr	r2, [pc, #352]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 80074a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80074a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0308 	and.w	r3, r3, #8
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074b4:	4b53      	ldr	r3, [pc, #332]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	4a52      	ldr	r2, [pc, #328]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 80074ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80074be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074c0:	4b50      	ldr	r3, [pc, #320]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	494d      	ldr	r1, [pc, #308]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d040      	beq.n	8007560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d107      	bne.n	80074f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074e6:	4b47      	ldr	r3, [pc, #284]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d115      	bne.n	800751e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e07f      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d107      	bne.n	800750e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074fe:	4b41      	ldr	r3, [pc, #260]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d109      	bne.n	800751e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e073      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800750e:	4b3d      	ldr	r3, [pc, #244]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e06b      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800751e:	4b39      	ldr	r3, [pc, #228]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f023 0203 	bic.w	r2, r3, #3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	4936      	ldr	r1, [pc, #216]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 800752c:	4313      	orrs	r3, r2
 800752e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007530:	f7fe ff5c 	bl	80063ec <HAL_GetTick>
 8007534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007536:	e00a      	b.n	800754e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007538:	f7fe ff58 	bl	80063ec <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	f241 3288 	movw	r2, #5000	; 0x1388
 8007546:	4293      	cmp	r3, r2
 8007548:	d901      	bls.n	800754e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e053      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800754e:	4b2d      	ldr	r3, [pc, #180]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f003 020c 	and.w	r2, r3, #12
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	429a      	cmp	r2, r3
 800755e:	d1eb      	bne.n	8007538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007560:	4b27      	ldr	r3, [pc, #156]	; (8007600 <HAL_RCC_ClockConfig+0x1c0>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	429a      	cmp	r2, r3
 800756c:	d210      	bcs.n	8007590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800756e:	4b24      	ldr	r3, [pc, #144]	; (8007600 <HAL_RCC_ClockConfig+0x1c0>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f023 0207 	bic.w	r2, r3, #7
 8007576:	4922      	ldr	r1, [pc, #136]	; (8007600 <HAL_RCC_ClockConfig+0x1c0>)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	4313      	orrs	r3, r2
 800757c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800757e:	4b20      	ldr	r3, [pc, #128]	; (8007600 <HAL_RCC_ClockConfig+0x1c0>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d001      	beq.n	8007590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e032      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d008      	beq.n	80075ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800759c:	4b19      	ldr	r3, [pc, #100]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	4916      	ldr	r1, [pc, #88]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d009      	beq.n	80075ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075ba:	4b12      	ldr	r3, [pc, #72]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	490e      	ldr	r1, [pc, #56]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075ce:	f000 f821 	bl	8007614 <HAL_RCC_GetSysClockFreq>
 80075d2:	4602      	mov	r2, r0
 80075d4:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <HAL_RCC_ClockConfig+0x1c4>)
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	091b      	lsrs	r3, r3, #4
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	490a      	ldr	r1, [pc, #40]	; (8007608 <HAL_RCC_ClockConfig+0x1c8>)
 80075e0:	5ccb      	ldrb	r3, [r1, r3]
 80075e2:	fa22 f303 	lsr.w	r3, r2, r3
 80075e6:	4a09      	ldr	r2, [pc, #36]	; (800760c <HAL_RCC_ClockConfig+0x1cc>)
 80075e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075ea:	4b09      	ldr	r3, [pc, #36]	; (8007610 <HAL_RCC_ClockConfig+0x1d0>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe feba 	bl	8006368 <HAL_InitTick>

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40022000 	.word	0x40022000
 8007604:	40021000 	.word	0x40021000
 8007608:	0800c0c0 	.word	0x0800c0c0
 800760c:	200000e8 	.word	0x200000e8
 8007610:	200000ec 	.word	0x200000ec

08007614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007614:	b490      	push	{r4, r7}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800761a:	4b29      	ldr	r3, [pc, #164]	; (80076c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800761c:	1d3c      	adds	r4, r7, #4
 800761e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007624:	f240 2301 	movw	r3, #513	; 0x201
 8007628:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	61fb      	str	r3, [r7, #28]
 800762e:	2300      	movs	r3, #0
 8007630:	61bb      	str	r3, [r7, #24]
 8007632:	2300      	movs	r3, #0
 8007634:	627b      	str	r3, [r7, #36]	; 0x24
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800763e:	4b21      	ldr	r3, [pc, #132]	; (80076c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	f003 030c 	and.w	r3, r3, #12
 800764a:	2b04      	cmp	r3, #4
 800764c:	d002      	beq.n	8007654 <HAL_RCC_GetSysClockFreq+0x40>
 800764e:	2b08      	cmp	r3, #8
 8007650:	d003      	beq.n	800765a <HAL_RCC_GetSysClockFreq+0x46>
 8007652:	e02b      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007654:	4b1c      	ldr	r3, [pc, #112]	; (80076c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007656:	623b      	str	r3, [r7, #32]
      break;
 8007658:	e02b      	b.n	80076b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	0c9b      	lsrs	r3, r3, #18
 800765e:	f003 030f 	and.w	r3, r3, #15
 8007662:	3328      	adds	r3, #40	; 0x28
 8007664:	443b      	add	r3, r7
 8007666:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800766a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d012      	beq.n	800769c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007676:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	0c5b      	lsrs	r3, r3, #17
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	3328      	adds	r3, #40	; 0x28
 8007682:	443b      	add	r3, r7
 8007684:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007688:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	4a0e      	ldr	r2, [pc, #56]	; (80076c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800768e:	fb03 f202 	mul.w	r2, r3, r2
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	fbb2 f3f3 	udiv	r3, r2, r3
 8007698:	627b      	str	r3, [r7, #36]	; 0x24
 800769a:	e004      	b.n	80076a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	4a0b      	ldr	r2, [pc, #44]	; (80076cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80076a0:	fb02 f303 	mul.w	r3, r2, r3
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	623b      	str	r3, [r7, #32]
      break;
 80076aa:	e002      	b.n	80076b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80076ac:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80076ae:	623b      	str	r3, [r7, #32]
      break;
 80076b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076b2:	6a3b      	ldr	r3, [r7, #32]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3728      	adds	r7, #40	; 0x28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc90      	pop	{r4, r7}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	0800c0a4 	.word	0x0800c0a4
 80076c4:	40021000 	.word	0x40021000
 80076c8:	007a1200 	.word	0x007a1200
 80076cc:	003d0900 	.word	0x003d0900

080076d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076d4:	4b02      	ldr	r3, [pc, #8]	; (80076e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80076d6:	681b      	ldr	r3, [r3, #0]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr
 80076e0:	200000e8 	.word	0x200000e8

080076e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076e8:	f7ff fff2 	bl	80076d0 <HAL_RCC_GetHCLKFreq>
 80076ec:	4602      	mov	r2, r0
 80076ee:	4b05      	ldr	r3, [pc, #20]	; (8007704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	f003 0307 	and.w	r3, r3, #7
 80076f8:	4903      	ldr	r1, [pc, #12]	; (8007708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076fa:	5ccb      	ldrb	r3, [r1, r3]
 80076fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007700:	4618      	mov	r0, r3
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40021000 	.word	0x40021000
 8007708:	0800c0d0 	.word	0x0800c0d0

0800770c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007710:	f7ff ffde 	bl	80076d0 <HAL_RCC_GetHCLKFreq>
 8007714:	4602      	mov	r2, r0
 8007716:	4b05      	ldr	r3, [pc, #20]	; (800772c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	0adb      	lsrs	r3, r3, #11
 800771c:	f003 0307 	and.w	r3, r3, #7
 8007720:	4903      	ldr	r1, [pc, #12]	; (8007730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007722:	5ccb      	ldrb	r3, [r1, r3]
 8007724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007728:	4618      	mov	r0, r3
 800772a:	bd80      	pop	{r7, pc}
 800772c:	40021000 	.word	0x40021000
 8007730:	0800c0d0 	.word	0x0800c0d0

08007734 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <RCC_Delay+0x34>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a0a      	ldr	r2, [pc, #40]	; (800776c <RCC_Delay+0x38>)
 8007742:	fba2 2303 	umull	r2, r3, r2, r3
 8007746:	0a5b      	lsrs	r3, r3, #9
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	fb02 f303 	mul.w	r3, r2, r3
 800774e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007750:	bf00      	nop
  }
  while (Delay --);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	1e5a      	subs	r2, r3, #1
 8007756:	60fa      	str	r2, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1f9      	bne.n	8007750 <RCC_Delay+0x1c>
}
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	bc80      	pop	{r7}
 8007766:	4770      	bx	lr
 8007768:	200000e8 	.word	0x200000e8
 800776c:	10624dd3 	.word	0x10624dd3

08007770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e076      	b.n	8007870 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d108      	bne.n	800779c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007792:	d009      	beq.n	80077a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	61da      	str	r2, [r3, #28]
 800779a:	e005      	b.n	80077a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fe fb88 	bl	8005ed8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077f0:	431a      	orrs	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782c:	ea42 0103 	orr.w	r1, r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007834:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	0c1a      	lsrs	r2, r3, #16
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f002 0204 	and.w	r2, r2, #4
 800784e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69da      	ldr	r2, [r3, #28]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800785e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	4613      	mov	r3, r2
 8007886:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007892:	2b01      	cmp	r3, #1
 8007894:	d101      	bne.n	800789a <HAL_SPI_Transmit+0x22>
 8007896:	2302      	movs	r3, #2
 8007898:	e126      	b.n	8007ae8 <HAL_SPI_Transmit+0x270>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078a2:	f7fe fda3 	bl	80063ec <HAL_GetTick>
 80078a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078a8:	88fb      	ldrh	r3, [r7, #6]
 80078aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d002      	beq.n	80078be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078b8:	2302      	movs	r3, #2
 80078ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078bc:	e10b      	b.n	8007ad6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <HAL_SPI_Transmit+0x52>
 80078c4:	88fb      	ldrh	r3, [r7, #6]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d102      	bne.n	80078d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078ce:	e102      	b.n	8007ad6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2203      	movs	r2, #3
 80078d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	88fa      	ldrh	r2, [r7, #6]
 80078ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007916:	d10f      	bne.n	8007938 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007926:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007936:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007942:	2b40      	cmp	r3, #64	; 0x40
 8007944:	d007      	beq.n	8007956 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007954:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800795e:	d14b      	bne.n	80079f8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <HAL_SPI_Transmit+0xf6>
 8007968:	8afb      	ldrh	r3, [r7, #22]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d13e      	bne.n	80079ec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007972:	881a      	ldrh	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797e:	1c9a      	adds	r2, r3, #2
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007988:	b29b      	uxth	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007992:	e02b      	b.n	80079ec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d112      	bne.n	80079c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a6:	881a      	ldrh	r2, [r3, #0]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b2:	1c9a      	adds	r2, r3, #2
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079bc:	b29b      	uxth	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80079c6:	e011      	b.n	80079ec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079c8:	f7fe fd10 	bl	80063ec <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d803      	bhi.n	80079e0 <HAL_SPI_Transmit+0x168>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079de:	d102      	bne.n	80079e6 <HAL_SPI_Transmit+0x16e>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d102      	bne.n	80079ec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80079ea:	e074      	b.n	8007ad6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1ce      	bne.n	8007994 <HAL_SPI_Transmit+0x11c>
 80079f6:	e04c      	b.n	8007a92 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <HAL_SPI_Transmit+0x18e>
 8007a00:	8afb      	ldrh	r3, [r7, #22]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d140      	bne.n	8007a88 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	330c      	adds	r3, #12
 8007a10:	7812      	ldrb	r2, [r2, #0]
 8007a12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a2c:	e02c      	b.n	8007a88 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d113      	bne.n	8007a64 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330c      	adds	r3, #12
 8007a46:	7812      	ldrb	r2, [r2, #0]
 8007a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a62:	e011      	b.n	8007a88 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a64:	f7fe fcc2 	bl	80063ec <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d803      	bhi.n	8007a7c <HAL_SPI_Transmit+0x204>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7a:	d102      	bne.n	8007a82 <HAL_SPI_Transmit+0x20a>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d102      	bne.n	8007a88 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a86:	e026      	b.n	8007ad6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1cd      	bne.n	8007a2e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fa54 	bl	8007f44 <SPI_EndRxTxTransaction>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10a      	bne.n	8007ac6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	613b      	str	r3, [r7, #16]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	613b      	str	r3, [r7, #16]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	613b      	str	r3, [r7, #16]
 8007ac4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	77fb      	strb	r3, [r7, #31]
 8007ad2:	e000      	b.n	8007ad6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007ad4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ae6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3720      	adds	r7, #32
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08c      	sub	sp, #48	; 0x30
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007afe:	2301      	movs	r3, #1
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d101      	bne.n	8007b16 <HAL_SPI_TransmitReceive+0x26>
 8007b12:	2302      	movs	r3, #2
 8007b14:	e18a      	b.n	8007e2c <HAL_SPI_TransmitReceive+0x33c>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b1e:	f7fe fc65 	bl	80063ec <HAL_GetTick>
 8007b22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b34:	887b      	ldrh	r3, [r7, #2]
 8007b36:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d00f      	beq.n	8007b60 <HAL_SPI_TransmitReceive+0x70>
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b46:	d107      	bne.n	8007b58 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d103      	bne.n	8007b58 <HAL_SPI_TransmitReceive+0x68>
 8007b50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d003      	beq.n	8007b60 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b5e:	e15b      	b.n	8007e18 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <HAL_SPI_TransmitReceive+0x82>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <HAL_SPI_TransmitReceive+0x82>
 8007b6c:	887b      	ldrh	r3, [r7, #2]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d103      	bne.n	8007b7a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b78:	e14e      	b.n	8007e18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d003      	beq.n	8007b8e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2205      	movs	r2, #5
 8007b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	887a      	ldrh	r2, [r7, #2]
 8007b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	887a      	ldrh	r2, [r7, #2]
 8007ba4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	887a      	ldrh	r2, [r7, #2]
 8007bb0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	887a      	ldrh	r2, [r7, #2]
 8007bb6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bce:	2b40      	cmp	r3, #64	; 0x40
 8007bd0:	d007      	beq.n	8007be2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007be0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bea:	d178      	bne.n	8007cde <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <HAL_SPI_TransmitReceive+0x10a>
 8007bf4:	8b7b      	ldrh	r3, [r7, #26]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d166      	bne.n	8007cc8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfe:	881a      	ldrh	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0a:	1c9a      	adds	r2, r3, #2
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c1e:	e053      	b.n	8007cc8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d11b      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x176>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d016      	beq.n	8007c66 <HAL_SPI_TransmitReceive+0x176>
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d113      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c42:	881a      	ldrh	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4e:	1c9a      	adds	r2, r3, #2
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d119      	bne.n	8007ca8 <HAL_SPI_TransmitReceive+0x1b8>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d014      	beq.n	8007ca8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c88:	b292      	uxth	r2, r2
 8007c8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c90:	1c9a      	adds	r2, r3, #2
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ca8:	f7fe fba0 	bl	80063ec <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d807      	bhi.n	8007cc8 <HAL_SPI_TransmitReceive+0x1d8>
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d003      	beq.n	8007cc8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cc6:	e0a7      	b.n	8007e18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1a6      	bne.n	8007c20 <HAL_SPI_TransmitReceive+0x130>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1a1      	bne.n	8007c20 <HAL_SPI_TransmitReceive+0x130>
 8007cdc:	e07c      	b.n	8007dd8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <HAL_SPI_TransmitReceive+0x1fc>
 8007ce6:	8b7b      	ldrh	r3, [r7, #26]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d16b      	bne.n	8007dc4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	330c      	adds	r3, #12
 8007cf6:	7812      	ldrb	r2, [r2, #0]
 8007cf8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d12:	e057      	b.n	8007dc4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d11c      	bne.n	8007d5c <HAL_SPI_TransmitReceive+0x26c>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d017      	beq.n	8007d5c <HAL_SPI_TransmitReceive+0x26c>
 8007d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d114      	bne.n	8007d5c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	330c      	adds	r3, #12
 8007d3c:	7812      	ldrb	r2, [r2, #0]
 8007d3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d119      	bne.n	8007d9e <HAL_SPI_TransmitReceive+0x2ae>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d014      	beq.n	8007d9e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	3b01      	subs	r3, #1
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d9e:	f7fe fb25 	bl	80063ec <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d803      	bhi.n	8007db6 <HAL_SPI_TransmitReceive+0x2c6>
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db4:	d102      	bne.n	8007dbc <HAL_SPI_TransmitReceive+0x2cc>
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d103      	bne.n	8007dc4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007dc2:	e029      	b.n	8007e18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1a2      	bne.n	8007d14 <HAL_SPI_TransmitReceive+0x224>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d19d      	bne.n	8007d14 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f8b1 	bl	8007f44 <SPI_EndRxTxTransaction>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d006      	beq.n	8007df6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007df4:	e010      	b.n	8007e18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10b      	bne.n	8007e16 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dfe:	2300      	movs	r3, #0
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	617b      	str	r3, [r7, #20]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	617b      	str	r3, [r7, #20]
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	e000      	b.n	8007e18 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3730      	adds	r7, #48	; 0x30
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	4613      	mov	r3, r2
 8007e42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e44:	f7fe fad2 	bl	80063ec <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	4413      	add	r3, r2
 8007e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e54:	f7fe faca 	bl	80063ec <HAL_GetTick>
 8007e58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e5a:	4b39      	ldr	r3, [pc, #228]	; (8007f40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	015b      	lsls	r3, r3, #5
 8007e60:	0d1b      	lsrs	r3, r3, #20
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	fb02 f303 	mul.w	r3, r2, r3
 8007e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e6a:	e054      	b.n	8007f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e72:	d050      	beq.n	8007f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e74:	f7fe faba 	bl	80063ec <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d902      	bls.n	8007e8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d13d      	bne.n	8007f06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ea2:	d111      	bne.n	8007ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eac:	d004      	beq.n	8007eb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb6:	d107      	bne.n	8007ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ed0:	d10f      	bne.n	8007ef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e017      	b.n	8007f36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689a      	ldr	r2, [r3, #8]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	bf0c      	ite	eq
 8007f26:	2301      	moveq	r3, #1
 8007f28:	2300      	movne	r3, #0
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d19b      	bne.n	8007e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3720      	adds	r7, #32
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	200000e8 	.word	0x200000e8

08007f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af02      	add	r7, sp, #8
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2200      	movs	r2, #0
 8007f58:	2180      	movs	r1, #128	; 0x80
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7ff ff6a 	bl	8007e34 <SPI_WaitFlagStateUntilTimeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d007      	beq.n	8007f76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6a:	f043 0220 	orr.w	r2, r3, #32
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e000      	b.n	8007f78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e041      	b.n	8008016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d106      	bne.n	8007fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fe f824 	bl	8005ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	f000 fc9a 	bl	80088f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b01      	cmp	r3, #1
 8008032:	d001      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e03a      	b.n	80080ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0201 	orr.w	r2, r2, #1
 800804e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a18      	ldr	r2, [pc, #96]	; (80080b8 <HAL_TIM_Base_Start_IT+0x98>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d00e      	beq.n	8008078 <HAL_TIM_Base_Start_IT+0x58>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008062:	d009      	beq.n	8008078 <HAL_TIM_Base_Start_IT+0x58>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a14      	ldr	r2, [pc, #80]	; (80080bc <HAL_TIM_Base_Start_IT+0x9c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d004      	beq.n	8008078 <HAL_TIM_Base_Start_IT+0x58>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a13      	ldr	r2, [pc, #76]	; (80080c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d111      	bne.n	800809c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b06      	cmp	r3, #6
 8008088:	d010      	beq.n	80080ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f042 0201 	orr.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809a:	e007      	b.n	80080ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr
 80080b8:	40012c00 	.word	0x40012c00
 80080bc:	40000400 	.word	0x40000400
 80080c0:	40000800 	.word	0x40000800

080080c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68da      	ldr	r2, [r3, #12]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0201 	bic.w	r2, r2, #1
 80080da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6a1a      	ldr	r2, [r3, #32]
 80080e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80080e6:	4013      	ands	r3, r2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10f      	bne.n	800810c <HAL_TIM_Base_Stop_IT+0x48>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6a1a      	ldr	r2, [r3, #32]
 80080f2:	f240 4344 	movw	r3, #1092	; 0x444
 80080f6:	4013      	ands	r3, r2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d107      	bne.n	800810c <HAL_TIM_Base_Stop_IT+0x48>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0201 	bic.w	r2, r2, #1
 800810a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	bc80      	pop	{r7}
 800811e:	4770      	bx	lr

08008120 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e093      	b.n	800825c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d106      	bne.n	800814e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fd ff0f 	bl	8005f6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2202      	movs	r2, #2
 8008152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008164:	f023 0307 	bic.w	r3, r3, #7
 8008168:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3304      	adds	r3, #4
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f000 fbbf 	bl	80088f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	4313      	orrs	r3, r2
 800819a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081a2:	f023 0303 	bic.w	r3, r3, #3
 80081a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	4313      	orrs	r3, r2
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80081c0:	f023 030c 	bic.w	r3, r3, #12
 80081c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	4313      	orrs	r3, r2
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	011a      	lsls	r2, r3, #4
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	031b      	lsls	r3, r3, #12
 80081f0:	4313      	orrs	r3, r2
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80081fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	4313      	orrs	r3, r2
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008274:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800827c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008284:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800828c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d110      	bne.n	80082b6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d102      	bne.n	80082a0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800829a:	7b7b      	ldrb	r3, [r7, #13]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d001      	beq.n	80082a4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e089      	b.n	80083b8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082b4:	e031      	b.n	800831a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d110      	bne.n	80082de <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d102      	bne.n	80082c8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80082c2:	7b3b      	ldrb	r3, [r7, #12]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d001      	beq.n	80082cc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e075      	b.n	80083b8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2202      	movs	r2, #2
 80082d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082dc:	e01d      	b.n	800831a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d108      	bne.n	80082f6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d105      	bne.n	80082f6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80082ea:	7b7b      	ldrb	r3, [r7, #13]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d102      	bne.n	80082f6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80082f0:	7b3b      	ldrb	r3, [r7, #12]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d001      	beq.n	80082fa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e05e      	b.n	80083b8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2202      	movs	r2, #2
 80082fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2202      	movs	r2, #2
 8008306:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2202      	movs	r2, #2
 800830e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2202      	movs	r2, #2
 8008316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <HAL_TIM_Encoder_Start_IT+0xc4>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b04      	cmp	r3, #4
 8008324:	d010      	beq.n	8008348 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008326:	e01f      	b.n	8008368 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2201      	movs	r2, #1
 800832e:	2100      	movs	r1, #0
 8008330:	4618      	mov	r0, r3
 8008332:	f000 fbd9 	bl	8008ae8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f042 0202 	orr.w	r2, r2, #2
 8008344:	60da      	str	r2, [r3, #12]
      break;
 8008346:	e02e      	b.n	80083a6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2201      	movs	r2, #1
 800834e:	2104      	movs	r1, #4
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fbc9 	bl	8008ae8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f042 0204 	orr.w	r2, r2, #4
 8008364:	60da      	str	r2, [r3, #12]
      break;
 8008366:	e01e      	b.n	80083a6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2201      	movs	r2, #1
 800836e:	2100      	movs	r1, #0
 8008370:	4618      	mov	r0, r3
 8008372:	f000 fbb9 	bl	8008ae8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2201      	movs	r2, #1
 800837c:	2104      	movs	r1, #4
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fbb2 	bl	8008ae8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0202 	orr.w	r2, r2, #2
 8008392:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f042 0204 	orr.w	r2, r2, #4
 80083a2:	60da      	str	r2, [r3, #12]
      break;
 80083a4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f042 0201 	orr.w	r2, r2, #1
 80083b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10f      	bne.n	80083f0 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2200      	movs	r2, #0
 80083d6:	2100      	movs	r1, #0
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fb85 	bl	8008ae8 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68da      	ldr	r2, [r3, #12]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0202 	bic.w	r2, r2, #2
 80083ec:	60da      	str	r2, [r3, #12]
 80083ee:	e030      	b.n	8008452 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d10f      	bne.n	8008416 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2200      	movs	r2, #0
 80083fc:	2104      	movs	r1, #4
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fb72 	bl	8008ae8 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0204 	bic.w	r2, r2, #4
 8008412:	60da      	str	r2, [r3, #12]
 8008414:	e01d      	b.n	8008452 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2200      	movs	r2, #0
 800841c:	2100      	movs	r1, #0
 800841e:	4618      	mov	r0, r3
 8008420:	f000 fb62 	bl	8008ae8 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2200      	movs	r2, #0
 800842a:	2104      	movs	r1, #4
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fb5b 	bl	8008ae8 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68da      	ldr	r2, [r3, #12]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0202 	bic.w	r2, r2, #2
 8008440:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0204 	bic.w	r2, r2, #4
 8008450:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6a1a      	ldr	r2, [r3, #32]
 8008458:	f241 1311 	movw	r3, #4369	; 0x1111
 800845c:	4013      	ands	r3, r2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10f      	bne.n	8008482 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	f240 4344 	movw	r3, #1092	; 0x444
 800846c:	4013      	ands	r3, r2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d107      	bne.n	8008482 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0201 	bic.w	r2, r2, #1
 8008480:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <HAL_TIM_Encoder_Stop_IT+0xce>
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2b04      	cmp	r3, #4
 800848c:	d138      	bne.n	8008500 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d104      	bne.n	800849e <HAL_TIM_Encoder_Stop_IT+0xde>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800849c:	e013      	b.n	80084c6 <HAL_TIM_Encoder_Stop_IT+0x106>
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d104      	bne.n	80084ae <HAL_TIM_Encoder_Stop_IT+0xee>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084ac:	e00b      	b.n	80084c6 <HAL_TIM_Encoder_Stop_IT+0x106>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b08      	cmp	r3, #8
 80084b2:	d104      	bne.n	80084be <HAL_TIM_Encoder_Stop_IT+0xfe>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084bc:	e003      	b.n	80084c6 <HAL_TIM_Encoder_Stop_IT+0x106>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d104      	bne.n	80084d6 <HAL_TIM_Encoder_Stop_IT+0x116>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084d4:	e024      	b.n	8008520 <HAL_TIM_Encoder_Stop_IT+0x160>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d104      	bne.n	80084e6 <HAL_TIM_Encoder_Stop_IT+0x126>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084e4:	e01c      	b.n	8008520 <HAL_TIM_Encoder_Stop_IT+0x160>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b08      	cmp	r3, #8
 80084ea:	d104      	bne.n	80084f6 <HAL_TIM_Encoder_Stop_IT+0x136>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084f4:	e014      	b.n	8008520 <HAL_TIM_Encoder_Stop_IT+0x160>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084fe:	e00f      	b.n	8008520 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b02      	cmp	r3, #2
 800853e:	d122      	bne.n	8008586 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b02      	cmp	r3, #2
 800854c:	d11b      	bne.n	8008586 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f06f 0202 	mvn.w	r2, #2
 8008556:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	f003 0303 	and.w	r3, r3, #3
 8008568:	2b00      	cmp	r3, #0
 800856a:	d003      	beq.n	8008574 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7fd fc15 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 8008572:	e005      	b.n	8008580 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f9a4 	bl	80088c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f9aa 	bl	80088d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b04      	cmp	r3, #4
 8008592:	d122      	bne.n	80085da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	f003 0304 	and.w	r3, r3, #4
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d11b      	bne.n	80085da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f06f 0204 	mvn.w	r2, #4
 80085aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7fd fbeb 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 80085c6:	e005      	b.n	80085d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f97a 	bl	80088c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f980 	bl	80088d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	f003 0308 	and.w	r3, r3, #8
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	d122      	bne.n	800862e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	f003 0308 	and.w	r3, r3, #8
 80085f2:	2b08      	cmp	r3, #8
 80085f4:	d11b      	bne.n	800862e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f06f 0208 	mvn.w	r2, #8
 80085fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2204      	movs	r2, #4
 8008604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	f003 0303 	and.w	r3, r3, #3
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7fd fbc1 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 800861a:	e005      	b.n	8008628 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f950 	bl	80088c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f956 	bl	80088d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	f003 0310 	and.w	r3, r3, #16
 8008638:	2b10      	cmp	r3, #16
 800863a:	d122      	bne.n	8008682 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	f003 0310 	and.w	r3, r3, #16
 8008646:	2b10      	cmp	r3, #16
 8008648:	d11b      	bne.n	8008682 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f06f 0210 	mvn.w	r2, #16
 8008652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2208      	movs	r2, #8
 8008658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7fd fb97 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 800866e:	e005      	b.n	800867c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f926 	bl	80088c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f92c 	bl	80088d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	f003 0301 	and.w	r3, r3, #1
 800868c:	2b01      	cmp	r3, #1
 800868e:	d10e      	bne.n	80086ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	f003 0301 	and.w	r3, r3, #1
 800869a:	2b01      	cmp	r3, #1
 800869c:	d107      	bne.n	80086ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f06f 0201 	mvn.w	r2, #1
 80086a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7fd fb29 	bl	8005d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b8:	2b80      	cmp	r3, #128	; 0x80
 80086ba:	d10e      	bne.n	80086da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c6:	2b80      	cmp	r3, #128	; 0x80
 80086c8:	d107      	bne.n	80086da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fa92 	bl	8008bfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e4:	2b40      	cmp	r3, #64	; 0x40
 80086e6:	d10e      	bne.n	8008706 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f2:	2b40      	cmp	r3, #64	; 0x40
 80086f4:	d107      	bne.n	8008706 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f8f0 	bl	80088e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b20      	cmp	r3, #32
 8008712:	d10e      	bne.n	8008732 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f003 0320 	and.w	r3, r3, #32
 800871e:	2b20      	cmp	r3, #32
 8008720:	d107      	bne.n	8008732 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f06f 0220 	mvn.w	r2, #32
 800872a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fa5d 	bl	8008bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008732:	bf00      	nop
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800874a:	2b01      	cmp	r3, #1
 800874c:	d101      	bne.n	8008752 <HAL_TIM_ConfigClockSource+0x18>
 800874e:	2302      	movs	r3, #2
 8008750:	e0b3      	b.n	80088ba <HAL_TIM_ConfigClockSource+0x180>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2202      	movs	r2, #2
 800875e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008770:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008778:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800878a:	d03e      	beq.n	800880a <HAL_TIM_ConfigClockSource+0xd0>
 800878c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008790:	f200 8087 	bhi.w	80088a2 <HAL_TIM_ConfigClockSource+0x168>
 8008794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008798:	f000 8085 	beq.w	80088a6 <HAL_TIM_ConfigClockSource+0x16c>
 800879c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087a0:	d87f      	bhi.n	80088a2 <HAL_TIM_ConfigClockSource+0x168>
 80087a2:	2b70      	cmp	r3, #112	; 0x70
 80087a4:	d01a      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0xa2>
 80087a6:	2b70      	cmp	r3, #112	; 0x70
 80087a8:	d87b      	bhi.n	80088a2 <HAL_TIM_ConfigClockSource+0x168>
 80087aa:	2b60      	cmp	r3, #96	; 0x60
 80087ac:	d050      	beq.n	8008850 <HAL_TIM_ConfigClockSource+0x116>
 80087ae:	2b60      	cmp	r3, #96	; 0x60
 80087b0:	d877      	bhi.n	80088a2 <HAL_TIM_ConfigClockSource+0x168>
 80087b2:	2b50      	cmp	r3, #80	; 0x50
 80087b4:	d03c      	beq.n	8008830 <HAL_TIM_ConfigClockSource+0xf6>
 80087b6:	2b50      	cmp	r3, #80	; 0x50
 80087b8:	d873      	bhi.n	80088a2 <HAL_TIM_ConfigClockSource+0x168>
 80087ba:	2b40      	cmp	r3, #64	; 0x40
 80087bc:	d058      	beq.n	8008870 <HAL_TIM_ConfigClockSource+0x136>
 80087be:	2b40      	cmp	r3, #64	; 0x40
 80087c0:	d86f      	bhi.n	80088a2 <HAL_TIM_ConfigClockSource+0x168>
 80087c2:	2b30      	cmp	r3, #48	; 0x30
 80087c4:	d064      	beq.n	8008890 <HAL_TIM_ConfigClockSource+0x156>
 80087c6:	2b30      	cmp	r3, #48	; 0x30
 80087c8:	d86b      	bhi.n	80088a2 <HAL_TIM_ConfigClockSource+0x168>
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	d060      	beq.n	8008890 <HAL_TIM_ConfigClockSource+0x156>
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d867      	bhi.n	80088a2 <HAL_TIM_ConfigClockSource+0x168>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d05c      	beq.n	8008890 <HAL_TIM_ConfigClockSource+0x156>
 80087d6:	2b10      	cmp	r3, #16
 80087d8:	d05a      	beq.n	8008890 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80087da:	e062      	b.n	80088a2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	6899      	ldr	r1, [r3, #8]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f000 f95d 	bl	8008aaa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	609a      	str	r2, [r3, #8]
      break;
 8008808:	e04e      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6818      	ldr	r0, [r3, #0]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	6899      	ldr	r1, [r3, #8]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f000 f946 	bl	8008aaa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800882c:	609a      	str	r2, [r3, #8]
      break;
 800882e:	e03b      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	6859      	ldr	r1, [r3, #4]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	461a      	mov	r2, r3
 800883e:	f000 f8bd 	bl	80089bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2150      	movs	r1, #80	; 0x50
 8008848:	4618      	mov	r0, r3
 800884a:	f000 f914 	bl	8008a76 <TIM_ITRx_SetConfig>
      break;
 800884e:	e02b      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	6859      	ldr	r1, [r3, #4]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	461a      	mov	r2, r3
 800885e:	f000 f8db 	bl	8008a18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2160      	movs	r1, #96	; 0x60
 8008868:	4618      	mov	r0, r3
 800886a:	f000 f904 	bl	8008a76 <TIM_ITRx_SetConfig>
      break;
 800886e:	e01b      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	6859      	ldr	r1, [r3, #4]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	461a      	mov	r2, r3
 800887e:	f000 f89d 	bl	80089bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2140      	movs	r1, #64	; 0x40
 8008888:	4618      	mov	r0, r3
 800888a:	f000 f8f4 	bl	8008a76 <TIM_ITRx_SetConfig>
      break;
 800888e:	e00b      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4619      	mov	r1, r3
 800889a:	4610      	mov	r0, r2
 800889c:	f000 f8eb 	bl	8008a76 <TIM_ITRx_SetConfig>
        break;
 80088a0:	e002      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80088a2:	bf00      	nop
 80088a4:	e000      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80088a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b083      	sub	sp, #12
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088ca:	bf00      	nop
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bc80      	pop	{r7}
 80088d2:	4770      	bx	lr

080088d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bc80      	pop	{r7}
 80088e4:	4770      	bx	lr

080088e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr

080088f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a29      	ldr	r2, [pc, #164]	; (80089b0 <TIM_Base_SetConfig+0xb8>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00b      	beq.n	8008928 <TIM_Base_SetConfig+0x30>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008916:	d007      	beq.n	8008928 <TIM_Base_SetConfig+0x30>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a26      	ldr	r2, [pc, #152]	; (80089b4 <TIM_Base_SetConfig+0xbc>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d003      	beq.n	8008928 <TIM_Base_SetConfig+0x30>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a25      	ldr	r2, [pc, #148]	; (80089b8 <TIM_Base_SetConfig+0xc0>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d108      	bne.n	800893a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a1c      	ldr	r2, [pc, #112]	; (80089b0 <TIM_Base_SetConfig+0xb8>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d00b      	beq.n	800895a <TIM_Base_SetConfig+0x62>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008948:	d007      	beq.n	800895a <TIM_Base_SetConfig+0x62>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a19      	ldr	r2, [pc, #100]	; (80089b4 <TIM_Base_SetConfig+0xbc>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d003      	beq.n	800895a <TIM_Base_SetConfig+0x62>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a18      	ldr	r2, [pc, #96]	; (80089b8 <TIM_Base_SetConfig+0xc0>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d108      	bne.n	800896c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	4313      	orrs	r3, r2
 800896a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a07      	ldr	r2, [pc, #28]	; (80089b0 <TIM_Base_SetConfig+0xb8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d103      	bne.n	80089a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	615a      	str	r2, [r3, #20]
}
 80089a6:	bf00      	nop
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr
 80089b0:	40012c00 	.word	0x40012c00
 80089b4:	40000400 	.word	0x40000400
 80089b8:	40000800 	.word	0x40000800

080089bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	f023 0201 	bic.w	r2, r3, #1
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f023 030a 	bic.w	r3, r3, #10
 80089f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	621a      	str	r2, [r3, #32]
}
 8008a0e:	bf00      	nop
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr

08008a18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	f023 0210 	bic.w	r2, r3, #16
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	031b      	lsls	r3, r3, #12
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	011b      	lsls	r3, r3, #4
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	621a      	str	r2, [r3, #32]
}
 8008a6c:	bf00      	nop
 8008a6e:	371c      	adds	r7, #28
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bc80      	pop	{r7}
 8008a74:	4770      	bx	lr

08008a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b085      	sub	sp, #20
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	f043 0307 	orr.w	r3, r3, #7
 8008a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	609a      	str	r2, [r3, #8]
}
 8008aa0:	bf00      	nop
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr

08008aaa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b087      	sub	sp, #28
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
 8008ab6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ac4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	021a      	lsls	r2, r3, #8
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	431a      	orrs	r2, r3
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	609a      	str	r2, [r3, #8]
}
 8008ade:	bf00      	nop
 8008ae0:	371c      	adds	r7, #28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr

08008ae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f003 031f 	and.w	r3, r3, #31
 8008afa:	2201      	movs	r2, #1
 8008afc:	fa02 f303 	lsl.w	r3, r2, r3
 8008b00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6a1a      	ldr	r2, [r3, #32]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	401a      	ands	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6a1a      	ldr	r2, [r3, #32]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f003 031f 	and.w	r3, r3, #31
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b20:	431a      	orrs	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	621a      	str	r2, [r3, #32]
}
 8008b26:	bf00      	nop
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bc80      	pop	{r7}
 8008b2e:	4770      	bx	lr

08008b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e046      	b.n	8008bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2202      	movs	r2, #2
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a16      	ldr	r2, [pc, #88]	; (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d00e      	beq.n	8008baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b94:	d009      	beq.n	8008baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a12      	ldr	r2, [pc, #72]	; (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d004      	beq.n	8008baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a10      	ldr	r2, [pc, #64]	; (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d10c      	bne.n	8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bc80      	pop	{r7}
 8008bde:	4770      	bx	lr
 8008be0:	40012c00 	.word	0x40012c00
 8008be4:	40000400 	.word	0x40000400
 8008be8:	40000800 	.word	0x40000800

08008bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bc80      	pop	{r7}
 8008bfc:	4770      	bx	lr

08008bfe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bc80      	pop	{r7}
 8008c0e:	4770      	bx	lr

08008c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e03f      	b.n	8008ca2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d106      	bne.n	8008c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7fd fa02 	bl	8006040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2224      	movs	r2, #36	; 0x24
 8008c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fcbf 	bl	80095d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	691a      	ldr	r2, [r3, #16]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	695a      	ldr	r2, [r3, #20]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b20      	cmp	r3, #32
 8008cc2:	d13c      	bne.n	8008d3e <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d002      	beq.n	8008cd0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008cca:	88fb      	ldrh	r3, [r7, #6]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e035      	b.n	8008d40 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d101      	bne.n	8008ce2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e02e      	b.n	8008d40 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2201      	movs	r2, #1
 8008cee:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008cf0:	88fb      	ldrh	r3, [r7, #6]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	68b9      	ldr	r1, [r7, #8]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 faa4 	bl	8009244 <UART_Start_Receive_DMA>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d119      	bne.n	8008d3a <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d113      	bne.n	8008d36 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d0e:	2300      	movs	r3, #0
 8008d10:	613b      	str	r3, [r7, #16]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	613b      	str	r3, [r7, #16]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	613b      	str	r3, [r7, #16]
 8008d22:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68da      	ldr	r2, [r3, #12]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f042 0210 	orr.w	r2, r2, #16
 8008d32:	60da      	str	r2, [r3, #12]
 8008d34:	e001      	b.n	8008d3a <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8008d3a:	7dfb      	ldrb	r3, [r7, #23]
 8008d3c:	e000      	b.n	8008d40 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8008d3e:	2302      	movs	r3, #2
  }
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08a      	sub	sp, #40	; 0x28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	f003 030f 	and.w	r3, r3, #15
 8008d76:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10d      	bne.n	8008d9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	f003 0320 	and.w	r3, r3, #32
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d008      	beq.n	8008d9a <HAL_UART_IRQHandler+0x52>
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	f003 0320 	and.w	r3, r3, #32
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fb76 	bl	8009484 <UART_Receive_IT>
      return;
 8008d98:	e17b      	b.n	8009092 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 80b1 	beq.w	8008f04 <HAL_UART_IRQHandler+0x1bc>
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d105      	bne.n	8008db8 <HAL_UART_IRQHandler+0x70>
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 80a6 	beq.w	8008f04 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00a      	beq.n	8008dd8 <HAL_UART_IRQHandler+0x90>
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d005      	beq.n	8008dd8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	f043 0201 	orr.w	r2, r3, #1
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <HAL_UART_IRQHandler+0xb0>
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	f003 0301 	and.w	r3, r3, #1
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d005      	beq.n	8008df8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df0:	f043 0202 	orr.w	r2, r3, #2
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	f003 0302 	and.w	r3, r3, #2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00a      	beq.n	8008e18 <HAL_UART_IRQHandler+0xd0>
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e10:	f043 0204 	orr.w	r2, r3, #4
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	f003 0308 	and.w	r3, r3, #8
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00f      	beq.n	8008e42 <HAL_UART_IRQHandler+0xfa>
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	f003 0320 	and.w	r3, r3, #32
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <HAL_UART_IRQHandler+0xee>
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d005      	beq.n	8008e42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3a:	f043 0208 	orr.w	r2, r3, #8
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 811e 	beq.w	8009088 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	f003 0320 	and.w	r3, r3, #32
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d007      	beq.n	8008e66 <HAL_UART_IRQHandler+0x11e>
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	f003 0320 	and.w	r3, r3, #32
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fb0f 	bl	8009484 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	bf14      	ite	ne
 8008e74:	2301      	movne	r3, #1
 8008e76:	2300      	moveq	r3, #0
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d102      	bne.n	8008e8e <HAL_UART_IRQHandler+0x146>
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d031      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fa51 	bl	8009336 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d023      	beq.n	8008eea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	695a      	ldr	r2, [r3, #20]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eb0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d013      	beq.n	8008ee2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebe:	4a76      	ldr	r2, [pc, #472]	; (8009098 <HAL_UART_IRQHandler+0x350>)
 8008ec0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fd fcc0 	bl	800684c <HAL_DMA_Abort_IT>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d016      	beq.n	8008f00 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008edc:	4610      	mov	r0, r2
 8008ede:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee0:	e00e      	b.n	8008f00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f8f5 	bl	80090d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee8:	e00a      	b.n	8008f00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f8f1 	bl	80090d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef0:	e006      	b.n	8008f00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f8ed 	bl	80090d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008efe:	e0c3      	b.n	8009088 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f00:	bf00      	nop
    return;
 8008f02:	e0c1      	b.n	8009088 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	f040 80a1 	bne.w	8009050 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	f003 0310 	and.w	r3, r3, #16
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 809b 	beq.w	8009050 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	f003 0310 	and.w	r3, r3, #16
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 8095 	beq.w	8009050 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f26:	2300      	movs	r3, #0
 8008f28:	60fb      	str	r3, [r7, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	60fb      	str	r3, [r7, #12]
 8008f3a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d04e      	beq.n	8008fe8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008f54:	8a3b      	ldrh	r3, [r7, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 8098 	beq.w	800908c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f60:	8a3a      	ldrh	r2, [r7, #16]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	f080 8092 	bcs.w	800908c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	8a3a      	ldrh	r2, [r7, #16]
 8008f6c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	2b20      	cmp	r3, #32
 8008f76:	d02b      	beq.n	8008fd0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f86:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	695a      	ldr	r2, [r3, #20]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0201 	bic.w	r2, r2, #1
 8008f96:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	695a      	ldr	r2, [r3, #20]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fa6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f022 0210 	bic.w	r2, r2, #16
 8008fc4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fd fc03 	bl	80067d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7fc feb1 	bl	8005d48 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008fe6:	e051      	b.n	800908c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d047      	beq.n	8009090 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009000:	8a7b      	ldrh	r3, [r7, #18]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d044      	beq.n	8009090 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009014:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	695a      	ldr	r2, [r3, #20]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0201 	bic.w	r2, r2, #1
 8009024:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2220      	movs	r2, #32
 800902a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0210 	bic.w	r2, r2, #16
 8009042:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009044:	8a7b      	ldrh	r3, [r7, #18]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7fc fe7d 	bl	8005d48 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800904e:	e01f      	b.n	8009090 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009056:	2b00      	cmp	r3, #0
 8009058:	d008      	beq.n	800906c <HAL_UART_IRQHandler+0x324>
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f9a6 	bl	80093b6 <UART_Transmit_IT>
    return;
 800906a:	e012      	b.n	8009092 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00d      	beq.n	8009092 <HAL_UART_IRQHandler+0x34a>
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907c:	2b00      	cmp	r3, #0
 800907e:	d008      	beq.n	8009092 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f9e7 	bl	8009454 <UART_EndTransmit_IT>
    return;
 8009086:	e004      	b.n	8009092 <HAL_UART_IRQHandler+0x34a>
    return;
 8009088:	bf00      	nop
 800908a:	e002      	b.n	8009092 <HAL_UART_IRQHandler+0x34a>
      return;
 800908c:	bf00      	nop
 800908e:	e000      	b.n	8009092 <HAL_UART_IRQHandler+0x34a>
      return;
 8009090:	bf00      	nop
  }
}
 8009092:	3728      	adds	r7, #40	; 0x28
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	0800938f 	.word	0x0800938f

0800909c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr

080090ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bc80      	pop	{r7}
 80090be:	4770      	bx	lr

080090c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr

080090d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090da:	bf00      	nop
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	bc80      	pop	{r7}
 80090e2:	4770      	bx	lr

080090e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d12a      	bne.n	8009156 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009114:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	695a      	ldr	r2, [r3, #20]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f022 0201 	bic.w	r2, r2, #1
 8009124:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	695a      	ldr	r2, [r3, #20]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009134:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2220      	movs	r2, #32
 800913a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009142:	2b01      	cmp	r3, #1
 8009144:	d107      	bne.n	8009156 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 0210 	bic.w	r2, r2, #16
 8009154:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915a:	2b01      	cmp	r3, #1
 800915c:	d106      	bne.n	800916c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009162:	4619      	mov	r1, r3
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7fc fdef 	bl	8005d48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800916a:	e002      	b.n	8009172 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff ff9e 	bl	80090ae <HAL_UART_RxCpltCallback>
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918c:	2b01      	cmp	r3, #1
 800918e:	d108      	bne.n	80091a2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009194:	085b      	lsrs	r3, r3, #1
 8009196:	b29b      	uxth	r3, r3
 8009198:	4619      	mov	r1, r3
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f7fc fdd4 	bl	8005d48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091a0:	e002      	b.n	80091a8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f7ff ff8c 	bl	80090c0 <HAL_UART_RxHalfCpltCallback>
}
 80091a8:	bf00      	nop
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bf14      	ite	ne
 80091d0:	2301      	movne	r3, #1
 80091d2:	2300      	moveq	r3, #0
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b21      	cmp	r3, #33	; 0x21
 80091e2:	d108      	bne.n	80091f6 <UART_DMAError+0x46>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d005      	beq.n	80091f6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2200      	movs	r2, #0
 80091ee:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80091f0:	68b8      	ldr	r0, [r7, #8]
 80091f2:	f000 f88b 	bl	800930c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009200:	2b00      	cmp	r3, #0
 8009202:	bf14      	ite	ne
 8009204:	2301      	movne	r3, #1
 8009206:	2300      	moveq	r3, #0
 8009208:	b2db      	uxtb	r3, r3
 800920a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b22      	cmp	r3, #34	; 0x22
 8009216:	d108      	bne.n	800922a <UART_DMAError+0x7a>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2200      	movs	r2, #0
 8009222:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009224:	68b8      	ldr	r0, [r7, #8]
 8009226:	f000 f886 	bl	8009336 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922e:	f043 0210 	orr.w	r2, r3, #16
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009236:	68b8      	ldr	r0, [r7, #8]
 8009238:	f7ff ff4b 	bl	80090d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800923c:	bf00      	nop
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	4613      	mov	r3, r2
 8009250:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	88fa      	ldrh	r2, [r7, #6]
 800925c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2222      	movs	r2, #34	; 0x22
 8009268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009270:	4a23      	ldr	r2, [pc, #140]	; (8009300 <UART_Start_Receive_DMA+0xbc>)
 8009272:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009278:	4a22      	ldr	r2, [pc, #136]	; (8009304 <UART_Start_Receive_DMA+0xc0>)
 800927a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009280:	4a21      	ldr	r2, [pc, #132]	; (8009308 <UART_Start_Receive_DMA+0xc4>)
 8009282:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009288:	2200      	movs	r2, #0
 800928a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800928c:	f107 0308 	add.w	r3, r7, #8
 8009290:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3304      	adds	r3, #4
 800929c:	4619      	mov	r1, r3
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	88fb      	ldrh	r3, [r7, #6]
 80092a4:	f7fd fa38 	bl	8006718 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80092a8:	2300      	movs	r3, #0
 80092aa:	613b      	str	r3, [r7, #16]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	613b      	str	r3, [r7, #16]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	613b      	str	r3, [r7, #16]
 80092bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68da      	ldr	r2, [r3, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092d4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	695a      	ldr	r2, [r3, #20]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f042 0201 	orr.w	r2, r2, #1
 80092e4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	695a      	ldr	r2, [r3, #20]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092f4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	080090e5 	.word	0x080090e5
 8009304:	0800917b 	.word	0x0800917b
 8009308:	080091b1 	.word	0x080091b1

0800930c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009322:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr

08009336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68da      	ldr	r2, [r3, #12]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800934c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	695a      	ldr	r2, [r3, #20]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 0201 	bic.w	r2, r2, #1
 800935c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009362:	2b01      	cmp	r3, #1
 8009364:	d107      	bne.n	8009376 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0210 	bic.w	r2, r2, #16
 8009374:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2220      	movs	r2, #32
 800937a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	bc80      	pop	{r7}
 800938c:	4770      	bx	lr

0800938e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f7ff fe92 	bl	80090d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b085      	sub	sp, #20
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b21      	cmp	r3, #33	; 0x21
 80093c8:	d13e      	bne.n	8009448 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d2:	d114      	bne.n	80093fe <UART_Transmit_IT+0x48>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d110      	bne.n	80093fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a1b      	ldr	r3, [r3, #32]
 80093f6:	1c9a      	adds	r2, r3, #2
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	621a      	str	r2, [r3, #32]
 80093fc:	e008      	b.n	8009410 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	1c59      	adds	r1, r3, #1
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	6211      	str	r1, [r2, #32]
 8009408:	781a      	ldrb	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009414:	b29b      	uxth	r3, r3
 8009416:	3b01      	subs	r3, #1
 8009418:	b29b      	uxth	r3, r3
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	4619      	mov	r1, r3
 800941e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10f      	bne.n	8009444 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68da      	ldr	r2, [r3, #12]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009432:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68da      	ldr	r2, [r3, #12]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009442:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	e000      	b.n	800944a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009448:	2302      	movs	r3, #2
  }
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	bc80      	pop	{r7}
 8009452:	4770      	bx	lr

08009454 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68da      	ldr	r2, [r3, #12]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800946a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2220      	movs	r2, #32
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff fe11 	bl	800909c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b22      	cmp	r3, #34	; 0x22
 8009496:	f040 8099 	bne.w	80095cc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a2:	d117      	bne.n	80094d4 <UART_Receive_IT+0x50>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d113      	bne.n	80094d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094cc:	1c9a      	adds	r2, r3, #2
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	629a      	str	r2, [r3, #40]	; 0x28
 80094d2:	e026      	b.n	8009522 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e6:	d007      	beq.n	80094f8 <UART_Receive_IT+0x74>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <UART_Receive_IT+0x82>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d106      	bne.n	8009506 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	701a      	strb	r2, [r3, #0]
 8009504:	e008      	b.n	8009518 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	b2db      	uxtb	r3, r3
 800950e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009512:	b2da      	uxtb	r2, r3
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951c:	1c5a      	adds	r2, r3, #1
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009526:	b29b      	uxth	r3, r3
 8009528:	3b01      	subs	r3, #1
 800952a:	b29b      	uxth	r3, r3
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	4619      	mov	r1, r3
 8009530:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009532:	2b00      	cmp	r3, #0
 8009534:	d148      	bne.n	80095c8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 0220 	bic.w	r2, r2, #32
 8009544:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68da      	ldr	r2, [r3, #12]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009554:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	695a      	ldr	r2, [r3, #20]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 0201 	bic.w	r2, r2, #1
 8009564:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2220      	movs	r2, #32
 800956a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009572:	2b01      	cmp	r3, #1
 8009574:	d123      	bne.n	80095be <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68da      	ldr	r2, [r3, #12]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 0210 	bic.w	r2, r2, #16
 800958a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0310 	and.w	r3, r3, #16
 8009596:	2b10      	cmp	r3, #16
 8009598:	d10a      	bne.n	80095b0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60fb      	str	r3, [r7, #12]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	60fb      	str	r3, [r7, #12]
 80095ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7fc fbc6 	bl	8005d48 <HAL_UARTEx_RxEventCallback>
 80095bc:	e002      	b.n	80095c4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7ff fd75 	bl	80090ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	e002      	b.n	80095ce <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	e000      	b.n	80095ce <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80095cc:	2302      	movs	r3, #2
  }
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68da      	ldr	r2, [r3, #12]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	430a      	orrs	r2, r1
 80095f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	689a      	ldr	r2, [r3, #8]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	431a      	orrs	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	4313      	orrs	r3, r2
 8009606:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009612:	f023 030c 	bic.w	r3, r3, #12
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	6812      	ldr	r2, [r2, #0]
 800961a:	68b9      	ldr	r1, [r7, #8]
 800961c:	430b      	orrs	r3, r1
 800961e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	699a      	ldr	r2, [r3, #24]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a2c      	ldr	r2, [pc, #176]	; (80096ec <UART_SetConfig+0x114>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d103      	bne.n	8009648 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009640:	f7fe f864 	bl	800770c <HAL_RCC_GetPCLK2Freq>
 8009644:	60f8      	str	r0, [r7, #12]
 8009646:	e002      	b.n	800964e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009648:	f7fe f84c 	bl	80076e4 <HAL_RCC_GetPCLK1Freq>
 800964c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	009a      	lsls	r2, r3, #2
 8009658:	441a      	add	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	fbb2 f3f3 	udiv	r3, r2, r3
 8009664:	4a22      	ldr	r2, [pc, #136]	; (80096f0 <UART_SetConfig+0x118>)
 8009666:	fba2 2303 	umull	r2, r3, r2, r3
 800966a:	095b      	lsrs	r3, r3, #5
 800966c:	0119      	lsls	r1, r3, #4
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	009a      	lsls	r2, r3, #2
 8009678:	441a      	add	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	fbb2 f2f3 	udiv	r2, r2, r3
 8009684:	4b1a      	ldr	r3, [pc, #104]	; (80096f0 <UART_SetConfig+0x118>)
 8009686:	fba3 0302 	umull	r0, r3, r3, r2
 800968a:	095b      	lsrs	r3, r3, #5
 800968c:	2064      	movs	r0, #100	; 0x64
 800968e:	fb00 f303 	mul.w	r3, r0, r3
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	3332      	adds	r3, #50	; 0x32
 8009698:	4a15      	ldr	r2, [pc, #84]	; (80096f0 <UART_SetConfig+0x118>)
 800969a:	fba2 2303 	umull	r2, r3, r2, r3
 800969e:	095b      	lsrs	r3, r3, #5
 80096a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096a4:	4419      	add	r1, r3
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	009a      	lsls	r2, r3, #2
 80096b0:	441a      	add	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80096bc:	4b0c      	ldr	r3, [pc, #48]	; (80096f0 <UART_SetConfig+0x118>)
 80096be:	fba3 0302 	umull	r0, r3, r3, r2
 80096c2:	095b      	lsrs	r3, r3, #5
 80096c4:	2064      	movs	r0, #100	; 0x64
 80096c6:	fb00 f303 	mul.w	r3, r0, r3
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	011b      	lsls	r3, r3, #4
 80096ce:	3332      	adds	r3, #50	; 0x32
 80096d0:	4a07      	ldr	r2, [pc, #28]	; (80096f0 <UART_SetConfig+0x118>)
 80096d2:	fba2 2303 	umull	r2, r3, r2, r3
 80096d6:	095b      	lsrs	r3, r3, #5
 80096d8:	f003 020f 	and.w	r2, r3, #15
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	440a      	add	r2, r1
 80096e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80096e4:	bf00      	nop
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	40013800 	.word	0x40013800
 80096f0:	51eb851f 	.word	0x51eb851f

080096f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80096f8:	4904      	ldr	r1, [pc, #16]	; (800970c <MX_FATFS_Init+0x18>)
 80096fa:	4805      	ldr	r0, [pc, #20]	; (8009710 <MX_FATFS_Init+0x1c>)
 80096fc:	f000 f8b0 	bl	8009860 <FATFS_LinkDriver>
 8009700:	4603      	mov	r3, r0
 8009702:	461a      	mov	r2, r3
 8009704:	4b03      	ldr	r3, [pc, #12]	; (8009714 <MX_FATFS_Init+0x20>)
 8009706:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009708:	bf00      	nop
 800970a:	bd80      	pop	{r7, pc}
 800970c:	200006dc 	.word	0x200006dc
 8009710:	200000f4 	.word	0x200000f4
 8009714:	200006d8 	.word	0x200006d8

08009718 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_initialize(pdrv);
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	4618      	mov	r0, r3
 8009726:	f7fb fb73 	bl	8004e10 <SD_disk_initialize>
 800972a:	4603      	mov	r3, r0
 800972c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	4603      	mov	r3, r0
 800973e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	4618      	mov	r0, r3
 8009744:	f7fb fc4a 	bl	8004fdc <SD_disk_status>
 8009748:	4603      	mov	r3, r0
 800974a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	607a      	str	r2, [r7, #4]
 800975e:	603b      	str	r3, [r7, #0]
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8009764:	7bf8      	ldrb	r0, [r7, #15]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	68b9      	ldr	r1, [r7, #8]
 800976c:	f7fb fc4a 	bl	8005004 <SD_disk_read>
 8009770:	4603      	mov	r3, r0
 8009772:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	607a      	str	r2, [r7, #4]
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800978c:	7bf8      	ldrb	r0, [r7, #15]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	68b9      	ldr	r1, [r7, #8]
 8009794:	f7fb fca0 	bl	80050d8 <SD_disk_write>
 8009798:	4603      	mov	r3, r0
 800979a:	b2db      	uxtb	r3, r3
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	603a      	str	r2, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
 80097b0:	460b      	mov	r3, r1
 80097b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	79b9      	ldrb	r1, [r7, #6]
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fb fd10 	bl	80051e0 <SD_disk_ioctl>
 80097c0:	4603      	mov	r3, r0
 80097c2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b087      	sub	sp, #28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	4613      	mov	r3, r2
 80097d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80097da:	2301      	movs	r3, #1
 80097dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80097de:	2300      	movs	r3, #0
 80097e0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80097e2:	4b1e      	ldr	r3, [pc, #120]	; (800985c <FATFS_LinkDriverEx+0x90>)
 80097e4:	7a5b      	ldrb	r3, [r3, #9]
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d831      	bhi.n	8009850 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80097ec:	4b1b      	ldr	r3, [pc, #108]	; (800985c <FATFS_LinkDriverEx+0x90>)
 80097ee:	7a5b      	ldrb	r3, [r3, #9]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	461a      	mov	r2, r3
 80097f4:	4b19      	ldr	r3, [pc, #100]	; (800985c <FATFS_LinkDriverEx+0x90>)
 80097f6:	2100      	movs	r1, #0
 80097f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80097fa:	4b18      	ldr	r3, [pc, #96]	; (800985c <FATFS_LinkDriverEx+0x90>)
 80097fc:	7a5b      	ldrb	r3, [r3, #9]
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	4a16      	ldr	r2, [pc, #88]	; (800985c <FATFS_LinkDriverEx+0x90>)
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800980a:	4b14      	ldr	r3, [pc, #80]	; (800985c <FATFS_LinkDriverEx+0x90>)
 800980c:	7a5b      	ldrb	r3, [r3, #9]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	461a      	mov	r2, r3
 8009812:	4b12      	ldr	r3, [pc, #72]	; (800985c <FATFS_LinkDriverEx+0x90>)
 8009814:	4413      	add	r3, r2
 8009816:	79fa      	ldrb	r2, [r7, #7]
 8009818:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800981a:	4b10      	ldr	r3, [pc, #64]	; (800985c <FATFS_LinkDriverEx+0x90>)
 800981c:	7a5b      	ldrb	r3, [r3, #9]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	b2d1      	uxtb	r1, r2
 8009824:	4a0d      	ldr	r2, [pc, #52]	; (800985c <FATFS_LinkDriverEx+0x90>)
 8009826:	7251      	strb	r1, [r2, #9]
 8009828:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800982a:	7dbb      	ldrb	r3, [r7, #22]
 800982c:	3330      	adds	r3, #48	; 0x30
 800982e:	b2da      	uxtb	r2, r3
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	3301      	adds	r3, #1
 8009838:	223a      	movs	r2, #58	; 0x3a
 800983a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	3302      	adds	r3, #2
 8009840:	222f      	movs	r2, #47	; 0x2f
 8009842:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	3303      	adds	r3, #3
 8009848:	2200      	movs	r2, #0
 800984a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009850:	7dfb      	ldrb	r3, [r7, #23]
}
 8009852:	4618      	mov	r0, r3
 8009854:	371c      	adds	r7, #28
 8009856:	46bd      	mov	sp, r7
 8009858:	bc80      	pop	{r7}
 800985a:	4770      	bx	lr
 800985c:	200006e0 	.word	0x200006e0

08009860 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800986a:	2200      	movs	r2, #0
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7ff ffac 	bl	80097cc <FATFS_LinkDriverEx>
 8009874:	4603      	mov	r3, r0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <__errno>:
 8009880:	4b01      	ldr	r3, [pc, #4]	; (8009888 <__errno+0x8>)
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	20000108 	.word	0x20000108

0800988c <__libc_init_array>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	2600      	movs	r6, #0
 8009890:	4d0c      	ldr	r5, [pc, #48]	; (80098c4 <__libc_init_array+0x38>)
 8009892:	4c0d      	ldr	r4, [pc, #52]	; (80098c8 <__libc_init_array+0x3c>)
 8009894:	1b64      	subs	r4, r4, r5
 8009896:	10a4      	asrs	r4, r4, #2
 8009898:	42a6      	cmp	r6, r4
 800989a:	d109      	bne.n	80098b0 <__libc_init_array+0x24>
 800989c:	f002 fa62 	bl	800bd64 <_init>
 80098a0:	2600      	movs	r6, #0
 80098a2:	4d0a      	ldr	r5, [pc, #40]	; (80098cc <__libc_init_array+0x40>)
 80098a4:	4c0a      	ldr	r4, [pc, #40]	; (80098d0 <__libc_init_array+0x44>)
 80098a6:	1b64      	subs	r4, r4, r5
 80098a8:	10a4      	asrs	r4, r4, #2
 80098aa:	42a6      	cmp	r6, r4
 80098ac:	d105      	bne.n	80098ba <__libc_init_array+0x2e>
 80098ae:	bd70      	pop	{r4, r5, r6, pc}
 80098b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098b4:	4798      	blx	r3
 80098b6:	3601      	adds	r6, #1
 80098b8:	e7ee      	b.n	8009898 <__libc_init_array+0xc>
 80098ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80098be:	4798      	blx	r3
 80098c0:	3601      	adds	r6, #1
 80098c2:	e7f2      	b.n	80098aa <__libc_init_array+0x1e>
 80098c4:	0800c5a4 	.word	0x0800c5a4
 80098c8:	0800c5a4 	.word	0x0800c5a4
 80098cc:	0800c5a4 	.word	0x0800c5a4
 80098d0:	0800c5a8 	.word	0x0800c5a8

080098d4 <__retarget_lock_acquire>:
 80098d4:	4770      	bx	lr

080098d6 <__retarget_lock_acquire_recursive>:
 80098d6:	4770      	bx	lr

080098d8 <__retarget_lock_release>:
 80098d8:	4770      	bx	lr

080098da <__retarget_lock_release_recursive>:
 80098da:	4770      	bx	lr

080098dc <memset>:
 80098dc:	4603      	mov	r3, r0
 80098de:	4402      	add	r2, r0
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d100      	bne.n	80098e6 <memset+0xa>
 80098e4:	4770      	bx	lr
 80098e6:	f803 1b01 	strb.w	r1, [r3], #1
 80098ea:	e7f9      	b.n	80098e0 <memset+0x4>

080098ec <_free_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4605      	mov	r5, r0
 80098f0:	2900      	cmp	r1, #0
 80098f2:	d040      	beq.n	8009976 <_free_r+0x8a>
 80098f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098f8:	1f0c      	subs	r4, r1, #4
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	bfb8      	it	lt
 80098fe:	18e4      	addlt	r4, r4, r3
 8009900:	f001 f938 	bl	800ab74 <__malloc_lock>
 8009904:	4a1c      	ldr	r2, [pc, #112]	; (8009978 <_free_r+0x8c>)
 8009906:	6813      	ldr	r3, [r2, #0]
 8009908:	b933      	cbnz	r3, 8009918 <_free_r+0x2c>
 800990a:	6063      	str	r3, [r4, #4]
 800990c:	6014      	str	r4, [r2, #0]
 800990e:	4628      	mov	r0, r5
 8009910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009914:	f001 b934 	b.w	800ab80 <__malloc_unlock>
 8009918:	42a3      	cmp	r3, r4
 800991a:	d908      	bls.n	800992e <_free_r+0x42>
 800991c:	6820      	ldr	r0, [r4, #0]
 800991e:	1821      	adds	r1, r4, r0
 8009920:	428b      	cmp	r3, r1
 8009922:	bf01      	itttt	eq
 8009924:	6819      	ldreq	r1, [r3, #0]
 8009926:	685b      	ldreq	r3, [r3, #4]
 8009928:	1809      	addeq	r1, r1, r0
 800992a:	6021      	streq	r1, [r4, #0]
 800992c:	e7ed      	b.n	800990a <_free_r+0x1e>
 800992e:	461a      	mov	r2, r3
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	b10b      	cbz	r3, 8009938 <_free_r+0x4c>
 8009934:	42a3      	cmp	r3, r4
 8009936:	d9fa      	bls.n	800992e <_free_r+0x42>
 8009938:	6811      	ldr	r1, [r2, #0]
 800993a:	1850      	adds	r0, r2, r1
 800993c:	42a0      	cmp	r0, r4
 800993e:	d10b      	bne.n	8009958 <_free_r+0x6c>
 8009940:	6820      	ldr	r0, [r4, #0]
 8009942:	4401      	add	r1, r0
 8009944:	1850      	adds	r0, r2, r1
 8009946:	4283      	cmp	r3, r0
 8009948:	6011      	str	r1, [r2, #0]
 800994a:	d1e0      	bne.n	800990e <_free_r+0x22>
 800994c:	6818      	ldr	r0, [r3, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	4401      	add	r1, r0
 8009952:	6011      	str	r1, [r2, #0]
 8009954:	6053      	str	r3, [r2, #4]
 8009956:	e7da      	b.n	800990e <_free_r+0x22>
 8009958:	d902      	bls.n	8009960 <_free_r+0x74>
 800995a:	230c      	movs	r3, #12
 800995c:	602b      	str	r3, [r5, #0]
 800995e:	e7d6      	b.n	800990e <_free_r+0x22>
 8009960:	6820      	ldr	r0, [r4, #0]
 8009962:	1821      	adds	r1, r4, r0
 8009964:	428b      	cmp	r3, r1
 8009966:	bf01      	itttt	eq
 8009968:	6819      	ldreq	r1, [r3, #0]
 800996a:	685b      	ldreq	r3, [r3, #4]
 800996c:	1809      	addeq	r1, r1, r0
 800996e:	6021      	streq	r1, [r4, #0]
 8009970:	6063      	str	r3, [r4, #4]
 8009972:	6054      	str	r4, [r2, #4]
 8009974:	e7cb      	b.n	800990e <_free_r+0x22>
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	200006f0 	.word	0x200006f0

0800997c <sbrk_aligned>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	4e0e      	ldr	r6, [pc, #56]	; (80099b8 <sbrk_aligned+0x3c>)
 8009980:	460c      	mov	r4, r1
 8009982:	6831      	ldr	r1, [r6, #0]
 8009984:	4605      	mov	r5, r0
 8009986:	b911      	cbnz	r1, 800998e <sbrk_aligned+0x12>
 8009988:	f000 f88c 	bl	8009aa4 <_sbrk_r>
 800998c:	6030      	str	r0, [r6, #0]
 800998e:	4621      	mov	r1, r4
 8009990:	4628      	mov	r0, r5
 8009992:	f000 f887 	bl	8009aa4 <_sbrk_r>
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	d00a      	beq.n	80099b0 <sbrk_aligned+0x34>
 800999a:	1cc4      	adds	r4, r0, #3
 800999c:	f024 0403 	bic.w	r4, r4, #3
 80099a0:	42a0      	cmp	r0, r4
 80099a2:	d007      	beq.n	80099b4 <sbrk_aligned+0x38>
 80099a4:	1a21      	subs	r1, r4, r0
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f87c 	bl	8009aa4 <_sbrk_r>
 80099ac:	3001      	adds	r0, #1
 80099ae:	d101      	bne.n	80099b4 <sbrk_aligned+0x38>
 80099b0:	f04f 34ff 	mov.w	r4, #4294967295
 80099b4:	4620      	mov	r0, r4
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	200006f4 	.word	0x200006f4

080099bc <_malloc_r>:
 80099bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c0:	1ccd      	adds	r5, r1, #3
 80099c2:	f025 0503 	bic.w	r5, r5, #3
 80099c6:	3508      	adds	r5, #8
 80099c8:	2d0c      	cmp	r5, #12
 80099ca:	bf38      	it	cc
 80099cc:	250c      	movcc	r5, #12
 80099ce:	2d00      	cmp	r5, #0
 80099d0:	4607      	mov	r7, r0
 80099d2:	db01      	blt.n	80099d8 <_malloc_r+0x1c>
 80099d4:	42a9      	cmp	r1, r5
 80099d6:	d905      	bls.n	80099e4 <_malloc_r+0x28>
 80099d8:	230c      	movs	r3, #12
 80099da:	2600      	movs	r6, #0
 80099dc:	603b      	str	r3, [r7, #0]
 80099de:	4630      	mov	r0, r6
 80099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e4:	4e2e      	ldr	r6, [pc, #184]	; (8009aa0 <_malloc_r+0xe4>)
 80099e6:	f001 f8c5 	bl	800ab74 <__malloc_lock>
 80099ea:	6833      	ldr	r3, [r6, #0]
 80099ec:	461c      	mov	r4, r3
 80099ee:	bb34      	cbnz	r4, 8009a3e <_malloc_r+0x82>
 80099f0:	4629      	mov	r1, r5
 80099f2:	4638      	mov	r0, r7
 80099f4:	f7ff ffc2 	bl	800997c <sbrk_aligned>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	4604      	mov	r4, r0
 80099fc:	d14d      	bne.n	8009a9a <_malloc_r+0xde>
 80099fe:	6834      	ldr	r4, [r6, #0]
 8009a00:	4626      	mov	r6, r4
 8009a02:	2e00      	cmp	r6, #0
 8009a04:	d140      	bne.n	8009a88 <_malloc_r+0xcc>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	eb04 0803 	add.w	r8, r4, r3
 8009a10:	f000 f848 	bl	8009aa4 <_sbrk_r>
 8009a14:	4580      	cmp	r8, r0
 8009a16:	d13a      	bne.n	8009a8e <_malloc_r+0xd2>
 8009a18:	6821      	ldr	r1, [r4, #0]
 8009a1a:	3503      	adds	r5, #3
 8009a1c:	1a6d      	subs	r5, r5, r1
 8009a1e:	f025 0503 	bic.w	r5, r5, #3
 8009a22:	3508      	adds	r5, #8
 8009a24:	2d0c      	cmp	r5, #12
 8009a26:	bf38      	it	cc
 8009a28:	250c      	movcc	r5, #12
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	f7ff ffa5 	bl	800997c <sbrk_aligned>
 8009a32:	3001      	adds	r0, #1
 8009a34:	d02b      	beq.n	8009a8e <_malloc_r+0xd2>
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	442b      	add	r3, r5
 8009a3a:	6023      	str	r3, [r4, #0]
 8009a3c:	e00e      	b.n	8009a5c <_malloc_r+0xa0>
 8009a3e:	6822      	ldr	r2, [r4, #0]
 8009a40:	1b52      	subs	r2, r2, r5
 8009a42:	d41e      	bmi.n	8009a82 <_malloc_r+0xc6>
 8009a44:	2a0b      	cmp	r2, #11
 8009a46:	d916      	bls.n	8009a76 <_malloc_r+0xba>
 8009a48:	1961      	adds	r1, r4, r5
 8009a4a:	42a3      	cmp	r3, r4
 8009a4c:	6025      	str	r5, [r4, #0]
 8009a4e:	bf18      	it	ne
 8009a50:	6059      	strne	r1, [r3, #4]
 8009a52:	6863      	ldr	r3, [r4, #4]
 8009a54:	bf08      	it	eq
 8009a56:	6031      	streq	r1, [r6, #0]
 8009a58:	5162      	str	r2, [r4, r5]
 8009a5a:	604b      	str	r3, [r1, #4]
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f104 060b 	add.w	r6, r4, #11
 8009a62:	f001 f88d 	bl	800ab80 <__malloc_unlock>
 8009a66:	f026 0607 	bic.w	r6, r6, #7
 8009a6a:	1d23      	adds	r3, r4, #4
 8009a6c:	1af2      	subs	r2, r6, r3
 8009a6e:	d0b6      	beq.n	80099de <_malloc_r+0x22>
 8009a70:	1b9b      	subs	r3, r3, r6
 8009a72:	50a3      	str	r3, [r4, r2]
 8009a74:	e7b3      	b.n	80099de <_malloc_r+0x22>
 8009a76:	6862      	ldr	r2, [r4, #4]
 8009a78:	42a3      	cmp	r3, r4
 8009a7a:	bf0c      	ite	eq
 8009a7c:	6032      	streq	r2, [r6, #0]
 8009a7e:	605a      	strne	r2, [r3, #4]
 8009a80:	e7ec      	b.n	8009a5c <_malloc_r+0xa0>
 8009a82:	4623      	mov	r3, r4
 8009a84:	6864      	ldr	r4, [r4, #4]
 8009a86:	e7b2      	b.n	80099ee <_malloc_r+0x32>
 8009a88:	4634      	mov	r4, r6
 8009a8a:	6876      	ldr	r6, [r6, #4]
 8009a8c:	e7b9      	b.n	8009a02 <_malloc_r+0x46>
 8009a8e:	230c      	movs	r3, #12
 8009a90:	4638      	mov	r0, r7
 8009a92:	603b      	str	r3, [r7, #0]
 8009a94:	f001 f874 	bl	800ab80 <__malloc_unlock>
 8009a98:	e7a1      	b.n	80099de <_malloc_r+0x22>
 8009a9a:	6025      	str	r5, [r4, #0]
 8009a9c:	e7de      	b.n	8009a5c <_malloc_r+0xa0>
 8009a9e:	bf00      	nop
 8009aa0:	200006f0 	.word	0x200006f0

08009aa4 <_sbrk_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	4d05      	ldr	r5, [pc, #20]	; (8009ac0 <_sbrk_r+0x1c>)
 8009aaa:	4604      	mov	r4, r0
 8009aac:	4608      	mov	r0, r1
 8009aae:	602b      	str	r3, [r5, #0]
 8009ab0:	f7fc fbe2 	bl	8006278 <_sbrk>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d102      	bne.n	8009abe <_sbrk_r+0x1a>
 8009ab8:	682b      	ldr	r3, [r5, #0]
 8009aba:	b103      	cbz	r3, 8009abe <_sbrk_r+0x1a>
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	200006f8 	.word	0x200006f8

08009ac4 <siprintf>:
 8009ac4:	b40e      	push	{r1, r2, r3}
 8009ac6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009aca:	b500      	push	{lr}
 8009acc:	b09c      	sub	sp, #112	; 0x70
 8009ace:	ab1d      	add	r3, sp, #116	; 0x74
 8009ad0:	9002      	str	r0, [sp, #8]
 8009ad2:	9006      	str	r0, [sp, #24]
 8009ad4:	9107      	str	r1, [sp, #28]
 8009ad6:	9104      	str	r1, [sp, #16]
 8009ad8:	4808      	ldr	r0, [pc, #32]	; (8009afc <siprintf+0x38>)
 8009ada:	4909      	ldr	r1, [pc, #36]	; (8009b00 <siprintf+0x3c>)
 8009adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ae0:	9105      	str	r1, [sp, #20]
 8009ae2:	6800      	ldr	r0, [r0, #0]
 8009ae4:	a902      	add	r1, sp, #8
 8009ae6:	9301      	str	r3, [sp, #4]
 8009ae8:	f001 f8ac 	bl	800ac44 <_svfiprintf_r>
 8009aec:	2200      	movs	r2, #0
 8009aee:	9b02      	ldr	r3, [sp, #8]
 8009af0:	701a      	strb	r2, [r3, #0]
 8009af2:	b01c      	add	sp, #112	; 0x70
 8009af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009af8:	b003      	add	sp, #12
 8009afa:	4770      	bx	lr
 8009afc:	20000108 	.word	0x20000108
 8009b00:	ffff0208 	.word	0xffff0208

08009b04 <__seofread>:
 8009b04:	2000      	movs	r0, #0
 8009b06:	4770      	bx	lr

08009b08 <iso_year_adjust>:
 8009b08:	6942      	ldr	r2, [r0, #20]
 8009b0a:	f240 736c 	movw	r3, #1900	; 0x76c
 8009b0e:	2a00      	cmp	r2, #0
 8009b10:	bfa8      	it	ge
 8009b12:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8009b16:	4413      	add	r3, r2
 8009b18:	0792      	lsls	r2, r2, #30
 8009b1a:	d105      	bne.n	8009b28 <iso_year_adjust+0x20>
 8009b1c:	2164      	movs	r1, #100	; 0x64
 8009b1e:	fb93 f2f1 	sdiv	r2, r3, r1
 8009b22:	fb01 3212 	mls	r2, r1, r2, r3
 8009b26:	b9da      	cbnz	r2, 8009b60 <iso_year_adjust+0x58>
 8009b28:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009b2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8009b30:	fb02 3311 	mls	r3, r2, r1, r3
 8009b34:	fab3 f383 	clz	r3, r3
 8009b38:	095b      	lsrs	r3, r3, #5
 8009b3a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8009b3e:	0040      	lsls	r0, r0, #1
 8009b40:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8009b44:	4418      	add	r0, r3
 8009b46:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8009b4a:	4298      	cmp	r0, r3
 8009b4c:	d03a      	beq.n	8009bc4 <iso_year_adjust+0xbc>
 8009b4e:	dc21      	bgt.n	8009b94 <iso_year_adjust+0x8c>
 8009b50:	2801      	cmp	r0, #1
 8009b52:	dc1a      	bgt.n	8009b8a <iso_year_adjust+0x82>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	bfb4      	ite	lt
 8009b58:	2000      	movlt	r0, #0
 8009b5a:	f04f 30ff 	movge.w	r0, #4294967295
 8009b5e:	4770      	bx	lr
 8009b60:	2301      	movs	r3, #1
 8009b62:	e7ea      	b.n	8009b3a <iso_year_adjust+0x32>
 8009b64:	2817      	cmp	r0, #23
 8009b66:	d813      	bhi.n	8009b90 <iso_year_adjust+0x88>
 8009b68:	e8df f000 	tbb	[pc, r0]
 8009b6c:	0c0c0c0c 	.word	0x0c0c0c0c
 8009b70:	0c0c1212 	.word	0x0c0c1212
 8009b74:	12121212 	.word	0x12121212
 8009b78:	12121212 	.word	0x12121212
 8009b7c:	0c0c1212 	.word	0x0c0c1212
 8009b80:	0c0c1212 	.word	0x0c0c1212
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295
 8009b88:	4770      	bx	lr
 8009b8a:	380a      	subs	r0, #10
 8009b8c:	2817      	cmp	r0, #23
 8009b8e:	d9e9      	bls.n	8009b64 <iso_year_adjust+0x5c>
 8009b90:	2000      	movs	r0, #0
 8009b92:	4770      	bx	lr
 8009b94:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8009b98:	4298      	cmp	r0, r3
 8009b9a:	dc06      	bgt.n	8009baa <iso_year_adjust+0xa2>
 8009b9c:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8009ba0:	4298      	cmp	r0, r3
 8009ba2:	bfd4      	ite	le
 8009ba4:	2000      	movle	r0, #0
 8009ba6:	2001      	movgt	r0, #1
 8009ba8:	4770      	bx	lr
 8009baa:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8009bae:	3802      	subs	r0, #2
 8009bb0:	2815      	cmp	r0, #21
 8009bb2:	d8ed      	bhi.n	8009b90 <iso_year_adjust+0x88>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	4083      	lsls	r3, r0
 8009bb8:	4803      	ldr	r0, [pc, #12]	; (8009bc8 <iso_year_adjust+0xc0>)
 8009bba:	4018      	ands	r0, r3
 8009bbc:	3800      	subs	r0, #0
 8009bbe:	bf18      	it	ne
 8009bc0:	2001      	movne	r0, #1
 8009bc2:	4770      	bx	lr
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	4770      	bx	lr
 8009bc8:	002a001f 	.word	0x002a001f

08009bcc <__strftime.isra.0>:
 8009bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd0:	461e      	mov	r6, r3
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	460d      	mov	r5, r1
 8009bd8:	461c      	mov	r4, r3
 8009bda:	b08f      	sub	sp, #60	; 0x3c
 8009bdc:	9302      	str	r3, [sp, #8]
 8009bde:	7813      	ldrb	r3, [r2, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 84b5 	beq.w	800a550 <__strftime.isra.0+0x984>
 8009be6:	2b25      	cmp	r3, #37	; 0x25
 8009be8:	d11f      	bne.n	8009c2a <__strftime.isra.0+0x5e>
 8009bea:	f892 b001 	ldrb.w	fp, [r2, #1]
 8009bee:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8009bf2:	d024      	beq.n	8009c3e <__strftime.isra.0+0x72>
 8009bf4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8009bf8:	d021      	beq.n	8009c3e <__strftime.isra.0+0x72>
 8009bfa:	f04f 0b00 	mov.w	fp, #0
 8009bfe:	f102 0801 	add.w	r8, r2, #1
 8009c02:	f898 2000 	ldrb.w	r2, [r8]
 8009c06:	3a31      	subs	r2, #49	; 0x31
 8009c08:	2a08      	cmp	r2, #8
 8009c0a:	d81b      	bhi.n	8009c44 <__strftime.isra.0+0x78>
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	220a      	movs	r2, #10
 8009c10:	a906      	add	r1, sp, #24
 8009c12:	f000 fdab 	bl	800a76c <strtoul>
 8009c16:	4681      	mov	r9, r0
 8009c18:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009c1c:	f898 2000 	ldrb.w	r2, [r8]
 8009c20:	2a45      	cmp	r2, #69	; 0x45
 8009c22:	d112      	bne.n	8009c4a <__strftime.isra.0+0x7e>
 8009c24:	f108 0801 	add.w	r8, r8, #1
 8009c28:	e011      	b.n	8009c4e <__strftime.isra.0+0x82>
 8009c2a:	1e69      	subs	r1, r5, #1
 8009c2c:	42a1      	cmp	r1, r4
 8009c2e:	d802      	bhi.n	8009c36 <__strftime.isra.0+0x6a>
 8009c30:	2400      	movs	r4, #0
 8009c32:	f000 bc90 	b.w	800a556 <__strftime.isra.0+0x98a>
 8009c36:	553b      	strb	r3, [r7, r4]
 8009c38:	3201      	adds	r2, #1
 8009c3a:	3401      	adds	r4, #1
 8009c3c:	e7cf      	b.n	8009bde <__strftime.isra.0+0x12>
 8009c3e:	f102 0802 	add.w	r8, r2, #2
 8009c42:	e7de      	b.n	8009c02 <__strftime.isra.0+0x36>
 8009c44:	f04f 0900 	mov.w	r9, #0
 8009c48:	e7e8      	b.n	8009c1c <__strftime.isra.0+0x50>
 8009c4a:	2a4f      	cmp	r2, #79	; 0x4f
 8009c4c:	d0ea      	beq.n	8009c24 <__strftime.isra.0+0x58>
 8009c4e:	f898 0000 	ldrb.w	r0, [r8]
 8009c52:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8009c56:	2a55      	cmp	r2, #85	; 0x55
 8009c58:	d8ea      	bhi.n	8009c30 <__strftime.isra.0+0x64>
 8009c5a:	a301      	add	r3, pc, #4	; (adr r3, 8009c60 <__strftime.isra.0+0x94>)
 8009c5c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8009c60:	0800a545 	.word	0x0800a545
 8009c64:	08009c31 	.word	0x08009c31
 8009c68:	08009c31 	.word	0x08009c31
 8009c6c:	08009c31 	.word	0x08009c31
 8009c70:	08009c31 	.word	0x08009c31
 8009c74:	08009c31 	.word	0x08009c31
 8009c78:	08009c31 	.word	0x08009c31
 8009c7c:	08009c31 	.word	0x08009c31
 8009c80:	08009c31 	.word	0x08009c31
 8009c84:	08009c31 	.word	0x08009c31
 8009c88:	08009c31 	.word	0x08009c31
 8009c8c:	08009c31 	.word	0x08009c31
 8009c90:	08009c31 	.word	0x08009c31
 8009c94:	08009c31 	.word	0x08009c31
 8009c98:	08009c31 	.word	0x08009c31
 8009c9c:	08009c31 	.word	0x08009c31
 8009ca0:	08009c31 	.word	0x08009c31
 8009ca4:	08009c31 	.word	0x08009c31
 8009ca8:	08009c31 	.word	0x08009c31
 8009cac:	08009c31 	.word	0x08009c31
 8009cb0:	08009c31 	.word	0x08009c31
 8009cb4:	08009c31 	.word	0x08009c31
 8009cb8:	08009c31 	.word	0x08009c31
 8009cbc:	08009c31 	.word	0x08009c31
 8009cc0:	08009c31 	.word	0x08009c31
 8009cc4:	08009c31 	.word	0x08009c31
 8009cc8:	08009c31 	.word	0x08009c31
 8009ccc:	08009c31 	.word	0x08009c31
 8009cd0:	08009df5 	.word	0x08009df5
 8009cd4:	08009e4d 	.word	0x08009e4d
 8009cd8:	08009ebb 	.word	0x08009ebb
 8009cdc:	08009f59 	.word	0x08009f59
 8009ce0:	08009c31 	.word	0x08009c31
 8009ce4:	08009fa3 	.word	0x08009fa3
 8009ce8:	0800a091 	.word	0x0800a091
 8009cec:	0800a167 	.word	0x0800a167
 8009cf0:	0800a175 	.word	0x0800a175
 8009cf4:	08009c31 	.word	0x08009c31
 8009cf8:	08009c31 	.word	0x08009c31
 8009cfc:	08009c31 	.word	0x08009c31
 8009d00:	0800a1a5 	.word	0x0800a1a5
 8009d04:	08009c31 	.word	0x08009c31
 8009d08:	08009c31 	.word	0x08009c31
 8009d0c:	0800a1b9 	.word	0x0800a1b9
 8009d10:	08009c31 	.word	0x08009c31
 8009d14:	0800a20b 	.word	0x0800a20b
 8009d18:	0800a31d 	.word	0x0800a31d
 8009d1c:	0800a32d 	.word	0x0800a32d
 8009d20:	0800a355 	.word	0x0800a355
 8009d24:	0800a365 	.word	0x0800a365
 8009d28:	0800a3ff 	.word	0x0800a3ff
 8009d2c:	08009eb3 	.word	0x08009eb3
 8009d30:	0800a42b 	.word	0x0800a42b
 8009d34:	0800a4f3 	.word	0x0800a4f3
 8009d38:	08009c31 	.word	0x08009c31
 8009d3c:	08009c31 	.word	0x08009c31
 8009d40:	08009c31 	.word	0x08009c31
 8009d44:	08009c31 	.word	0x08009c31
 8009d48:	08009c31 	.word	0x08009c31
 8009d4c:	08009c31 	.word	0x08009c31
 8009d50:	08009db9 	.word	0x08009db9
 8009d54:	08009e23 	.word	0x08009e23
 8009d58:	08009e79 	.word	0x08009e79
 8009d5c:	08009f35 	.word	0x08009f35
 8009d60:	08009f35 	.word	0x08009f35
 8009d64:	08009c31 	.word	0x08009c31
 8009d68:	08009ff5 	.word	0x08009ff5
 8009d6c:	08009e23 	.word	0x08009e23
 8009d70:	08009c31 	.word	0x08009c31
 8009d74:	0800a197 	.word	0x0800a197
 8009d78:	0800a167 	.word	0x0800a167
 8009d7c:	0800a175 	.word	0x0800a175
 8009d80:	0800a19f 	.word	0x0800a19f
 8009d84:	0800a1a9 	.word	0x0800a1a9
 8009d88:	08009c31 	.word	0x08009c31
 8009d8c:	0800a1b9 	.word	0x0800a1b9
 8009d90:	08009c31 	.word	0x08009c31
 8009d94:	08009ea3 	.word	0x08009ea3
 8009d98:	0800a21d 	.word	0x0800a21d
 8009d9c:	0800a321 	.word	0x0800a321
 8009da0:	0800a33b 	.word	0x0800a33b
 8009da4:	08009c31 	.word	0x08009c31
 8009da8:	0800a3f1 	.word	0x0800a3f1
 8009dac:	08009eab 	.word	0x08009eab
 8009db0:	0800a40f 	.word	0x0800a40f
 8009db4:	0800a47d 	.word	0x0800a47d
 8009db8:	69b3      	ldr	r3, [r6, #24]
 8009dba:	4aa9      	ldr	r2, [pc, #676]	; (800a060 <__strftime.isra.0+0x494>)
 8009dbc:	3318      	adds	r3, #24
 8009dbe:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8009dc2:	4648      	mov	r0, r9
 8009dc4:	f7f6 f9c2 	bl	800014c <strlen>
 8009dc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8009dcc:	4420      	add	r0, r4
 8009dce:	1e6b      	subs	r3, r5, #1
 8009dd0:	42a0      	cmp	r0, r4
 8009dd2:	d107      	bne.n	8009de4 <__strftime.isra.0+0x218>
 8009dd4:	f898 3000 	ldrb.w	r3, [r8]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 83b9 	beq.w	800a550 <__strftime.isra.0+0x984>
 8009dde:	f108 0201 	add.w	r2, r8, #1
 8009de2:	e6fc      	b.n	8009bde <__strftime.isra.0+0x12>
 8009de4:	42a3      	cmp	r3, r4
 8009de6:	f67f af23 	bls.w	8009c30 <__strftime.isra.0+0x64>
 8009dea:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009dee:	553a      	strb	r2, [r7, r4]
 8009df0:	3401      	adds	r4, #1
 8009df2:	e7ed      	b.n	8009dd0 <__strftime.isra.0+0x204>
 8009df4:	69b2      	ldr	r2, [r6, #24]
 8009df6:	4b9a      	ldr	r3, [pc, #616]	; (800a060 <__strftime.isra.0+0x494>)
 8009df8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009dfc:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8009e00:	4648      	mov	r0, r9
 8009e02:	f7f6 f9a3 	bl	800014c <strlen>
 8009e06:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e0a:	4420      	add	r0, r4
 8009e0c:	1e6b      	subs	r3, r5, #1
 8009e0e:	42a0      	cmp	r0, r4
 8009e10:	d0e0      	beq.n	8009dd4 <__strftime.isra.0+0x208>
 8009e12:	42a3      	cmp	r3, r4
 8009e14:	f67f af0c 	bls.w	8009c30 <__strftime.isra.0+0x64>
 8009e18:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009e1c:	553a      	strb	r2, [r7, r4]
 8009e1e:	3401      	adds	r4, #1
 8009e20:	e7f5      	b.n	8009e0e <__strftime.isra.0+0x242>
 8009e22:	4b8f      	ldr	r3, [pc, #572]	; (800a060 <__strftime.isra.0+0x494>)
 8009e24:	6932      	ldr	r2, [r6, #16]
 8009e26:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8009e2a:	4648      	mov	r0, r9
 8009e2c:	f7f6 f98e 	bl	800014c <strlen>
 8009e30:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e34:	4420      	add	r0, r4
 8009e36:	1e6b      	subs	r3, r5, #1
 8009e38:	42a0      	cmp	r0, r4
 8009e3a:	d0cb      	beq.n	8009dd4 <__strftime.isra.0+0x208>
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	f67f aef7 	bls.w	8009c30 <__strftime.isra.0+0x64>
 8009e42:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009e46:	553a      	strb	r2, [r7, r4]
 8009e48:	3401      	adds	r4, #1
 8009e4a:	e7f5      	b.n	8009e38 <__strftime.isra.0+0x26c>
 8009e4c:	6933      	ldr	r3, [r6, #16]
 8009e4e:	4a84      	ldr	r2, [pc, #528]	; (800a060 <__strftime.isra.0+0x494>)
 8009e50:	330c      	adds	r3, #12
 8009e52:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8009e56:	4648      	mov	r0, r9
 8009e58:	f7f6 f978 	bl	800014c <strlen>
 8009e5c:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e60:	4420      	add	r0, r4
 8009e62:	1e6b      	subs	r3, r5, #1
 8009e64:	42a0      	cmp	r0, r4
 8009e66:	d0b5      	beq.n	8009dd4 <__strftime.isra.0+0x208>
 8009e68:	42a3      	cmp	r3, r4
 8009e6a:	f67f aee1 	bls.w	8009c30 <__strftime.isra.0+0x64>
 8009e6e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009e72:	553a      	strb	r2, [r7, r4]
 8009e74:	3401      	adds	r4, #1
 8009e76:	e7f5      	b.n	8009e64 <__strftime.isra.0+0x298>
 8009e78:	4b79      	ldr	r3, [pc, #484]	; (800a060 <__strftime.isra.0+0x494>)
 8009e7a:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8009e7e:	4648      	mov	r0, r9
 8009e80:	f7f6 f964 	bl	800014c <strlen>
 8009e84:	f899 3000 	ldrb.w	r3, [r9]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0a3      	beq.n	8009dd4 <__strftime.isra.0+0x208>
 8009e8c:	4633      	mov	r3, r6
 8009e8e:	464a      	mov	r2, r9
 8009e90:	1b29      	subs	r1, r5, r4
 8009e92:	1938      	adds	r0, r7, r4
 8009e94:	f7ff fe9a 	bl	8009bcc <__strftime.isra.0>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	f77f aec9 	ble.w	8009c30 <__strftime.isra.0+0x64>
 8009e9e:	4404      	add	r4, r0
 8009ea0:	e798      	b.n	8009dd4 <__strftime.isra.0+0x208>
 8009ea2:	4b6f      	ldr	r3, [pc, #444]	; (800a060 <__strftime.isra.0+0x494>)
 8009ea4:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8009ea8:	e7e9      	b.n	8009e7e <__strftime.isra.0+0x2b2>
 8009eaa:	4b6d      	ldr	r3, [pc, #436]	; (800a060 <__strftime.isra.0+0x494>)
 8009eac:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8009eb0:	e7e5      	b.n	8009e7e <__strftime.isra.0+0x2b2>
 8009eb2:	4b6b      	ldr	r3, [pc, #428]	; (800a060 <__strftime.isra.0+0x494>)
 8009eb4:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8009eb8:	e7e1      	b.n	8009e7e <__strftime.isra.0+0x2b2>
 8009eba:	496a      	ldr	r1, [pc, #424]	; (800a064 <__strftime.isra.0+0x498>)
 8009ebc:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8009ec0:	458a      	cmp	sl, r1
 8009ec2:	bfac      	ite	ge
 8009ec4:	2100      	movge	r1, #0
 8009ec6:	2101      	movlt	r1, #1
 8009ec8:	f1ba 0f00 	cmp.w	sl, #0
 8009ecc:	db11      	blt.n	8009ef2 <__strftime.isra.0+0x326>
 8009ece:	2064      	movs	r0, #100	; 0x64
 8009ed0:	fb9a f0f0 	sdiv	r0, sl, r0
 8009ed4:	3013      	adds	r0, #19
 8009ed6:	f1bb 0f00 	cmp.w	fp, #0
 8009eda:	d014      	beq.n	8009f06 <__strftime.isra.0+0x33a>
 8009edc:	2863      	cmp	r0, #99	; 0x63
 8009ede:	dd27      	ble.n	8009f30 <__strftime.isra.0+0x364>
 8009ee0:	4b61      	ldr	r3, [pc, #388]	; (800a068 <__strftime.isra.0+0x49c>)
 8009ee2:	4a62      	ldr	r2, [pc, #392]	; (800a06c <__strftime.isra.0+0x4a0>)
 8009ee4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8009ee8:	bf18      	it	ne
 8009eea:	461a      	movne	r2, r3
 8009eec:	f8df c180 	ldr.w	ip, [pc, #384]	; 800a070 <__strftime.isra.0+0x4a4>
 8009ef0:	e00c      	b.n	8009f0c <__strftime.isra.0+0x340>
 8009ef2:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8009ef6:	9103      	str	r1, [sp, #12]
 8009ef8:	f000 fdd6 	bl	800aaa8 <abs>
 8009efc:	2264      	movs	r2, #100	; 0x64
 8009efe:	9903      	ldr	r1, [sp, #12]
 8009f00:	fb90 f0f2 	sdiv	r0, r0, r2
 8009f04:	e7e7      	b.n	8009ed6 <__strftime.isra.0+0x30a>
 8009f06:	4a58      	ldr	r2, [pc, #352]	; (800a068 <__strftime.isra.0+0x49c>)
 8009f08:	f8df c168 	ldr.w	ip, [pc, #360]	; 800a074 <__strftime.isra.0+0x4a8>
 8009f0c:	f1b9 0f02 	cmp.w	r9, #2
 8009f10:	bf2c      	ite	cs
 8009f12:	ebc1 0109 	rsbcs	r1, r1, r9
 8009f16:	f1c1 0102 	rsbcc	r1, r1, #2
 8009f1a:	4b57      	ldr	r3, [pc, #348]	; (800a078 <__strftime.isra.0+0x4ac>)
 8009f1c:	9100      	str	r1, [sp, #0]
 8009f1e:	4951      	ldr	r1, [pc, #324]	; (800a064 <__strftime.isra.0+0x498>)
 8009f20:	9001      	str	r0, [sp, #4]
 8009f22:	458a      	cmp	sl, r1
 8009f24:	bfa8      	it	ge
 8009f26:	4613      	movge	r3, r2
 8009f28:	4662      	mov	r2, ip
 8009f2a:	1b29      	subs	r1, r5, r4
 8009f2c:	1938      	adds	r0, r7, r4
 8009f2e:	e029      	b.n	8009f84 <__strftime.isra.0+0x3b8>
 8009f30:	4a4d      	ldr	r2, [pc, #308]	; (800a068 <__strftime.isra.0+0x49c>)
 8009f32:	e7db      	b.n	8009eec <__strftime.isra.0+0x320>
 8009f34:	4951      	ldr	r1, [pc, #324]	; (800a07c <__strftime.isra.0+0x4b0>)
 8009f36:	4a52      	ldr	r2, [pc, #328]	; (800a080 <__strftime.isra.0+0x4b4>)
 8009f38:	68f3      	ldr	r3, [r6, #12]
 8009f3a:	2864      	cmp	r0, #100	; 0x64
 8009f3c:	bf08      	it	eq
 8009f3e:	460a      	moveq	r2, r1
 8009f40:	1b29      	subs	r1, r5, r4
 8009f42:	1938      	adds	r0, r7, r4
 8009f44:	f001 f914 	bl	800b170 <sniprintf>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	f6ff ae71 	blt.w	8009c30 <__strftime.isra.0+0x64>
 8009f4e:	4404      	add	r4, r0
 8009f50:	42a5      	cmp	r5, r4
 8009f52:	f63f af3f 	bhi.w	8009dd4 <__strftime.isra.0+0x208>
 8009f56:	e66b      	b.n	8009c30 <__strftime.isra.0+0x64>
 8009f58:	6970      	ldr	r0, [r6, #20]
 8009f5a:	6933      	ldr	r3, [r6, #16]
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	68f2      	ldr	r2, [r6, #12]
 8009f60:	eb07 0904 	add.w	r9, r7, r4
 8009f64:	eba5 0a04 	sub.w	sl, r5, r4
 8009f68:	f103 0b01 	add.w	fp, r3, #1
 8009f6c:	db0d      	blt.n	8009f8a <__strftime.isra.0+0x3be>
 8009f6e:	2164      	movs	r1, #100	; 0x64
 8009f70:	fb90 fcf1 	sdiv	ip, r0, r1
 8009f74:	fb01 001c 	mls	r0, r1, ip, r0
 8009f78:	e9cd 2000 	strd	r2, r0, [sp]
 8009f7c:	465b      	mov	r3, fp
 8009f7e:	4651      	mov	r1, sl
 8009f80:	4648      	mov	r0, r9
 8009f82:	4a40      	ldr	r2, [pc, #256]	; (800a084 <__strftime.isra.0+0x4b8>)
 8009f84:	f001 f8f4 	bl	800b170 <sniprintf>
 8009f88:	e7de      	b.n	8009f48 <__strftime.isra.0+0x37c>
 8009f8a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009f8e:	9203      	str	r2, [sp, #12]
 8009f90:	f000 fd8a 	bl	800aaa8 <abs>
 8009f94:	2164      	movs	r1, #100	; 0x64
 8009f96:	fb90 fcf1 	sdiv	ip, r0, r1
 8009f9a:	9a03      	ldr	r2, [sp, #12]
 8009f9c:	fb0c 0011 	mls	r0, ip, r1, r0
 8009fa0:	e7ea      	b.n	8009f78 <__strftime.isra.0+0x3ac>
 8009fa2:	2225      	movs	r2, #37	; 0x25
 8009fa4:	f88d 2018 	strb.w	r2, [sp, #24]
 8009fa8:	f1bb 0f00 	cmp.w	fp, #0
 8009fac:	d011      	beq.n	8009fd2 <__strftime.isra.0+0x406>
 8009fae:	f1b9 0f06 	cmp.w	r9, #6
 8009fb2:	bf38      	it	cc
 8009fb4:	f04f 0906 	movcc.w	r9, #6
 8009fb8:	f1b9 0306 	subs.w	r3, r9, #6
 8009fbc:	f88d b019 	strb.w	fp, [sp, #25]
 8009fc0:	d10c      	bne.n	8009fdc <__strftime.isra.0+0x410>
 8009fc2:	f10d 001a 	add.w	r0, sp, #26
 8009fc6:	4930      	ldr	r1, [pc, #192]	; (800a088 <__strftime.isra.0+0x4bc>)
 8009fc8:	f001 f930 	bl	800b22c <strcpy>
 8009fcc:	4633      	mov	r3, r6
 8009fce:	aa06      	add	r2, sp, #24
 8009fd0:	e75e      	b.n	8009e90 <__strftime.isra.0+0x2c4>
 8009fd2:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8009fd6:	f04f 090a 	mov.w	r9, #10
 8009fda:	e7ed      	b.n	8009fb8 <__strftime.isra.0+0x3ec>
 8009fdc:	211e      	movs	r1, #30
 8009fde:	4a2b      	ldr	r2, [pc, #172]	; (800a08c <__strftime.isra.0+0x4c0>)
 8009fe0:	f10d 001a 	add.w	r0, sp, #26
 8009fe4:	f001 f8c4 	bl	800b170 <sniprintf>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	ddea      	ble.n	8009fc2 <__strftime.isra.0+0x3f6>
 8009fec:	f10d 031a 	add.w	r3, sp, #26
 8009ff0:	4418      	add	r0, r3
 8009ff2:	e7e8      	b.n	8009fc6 <__strftime.isra.0+0x3fa>
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f7ff fd87 	bl	8009b08 <iso_year_adjust>
 8009ffa:	4681      	mov	r9, r0
 8009ffc:	6970      	ldr	r0, [r6, #20]
 8009ffe:	2800      	cmp	r0, #0
 800a000:	db11      	blt.n	800a026 <__strftime.isra.0+0x45a>
 800a002:	2364      	movs	r3, #100	; 0x64
 800a004:	fb90 f2f3 	sdiv	r2, r0, r3
 800a008:	fb03 0012 	mls	r0, r3, r2, r0
 800a00c:	2264      	movs	r2, #100	; 0x64
 800a00e:	4481      	add	r9, r0
 800a010:	fb99 f3f2 	sdiv	r3, r9, r2
 800a014:	fb02 9913 	mls	r9, r2, r3, r9
 800a018:	4491      	add	r9, r2
 800a01a:	fbb9 f3f2 	udiv	r3, r9, r2
 800a01e:	fb02 9313 	mls	r3, r2, r3, r9
 800a022:	4a16      	ldr	r2, [pc, #88]	; (800a07c <__strftime.isra.0+0x4b0>)
 800a024:	e78c      	b.n	8009f40 <__strftime.isra.0+0x374>
 800a026:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800a02a:	f000 fd3d 	bl	800aaa8 <abs>
 800a02e:	2364      	movs	r3, #100	; 0x64
 800a030:	fb90 f2f3 	sdiv	r2, r0, r3
 800a034:	f1b9 0f00 	cmp.w	r9, #0
 800a038:	fb02 0013 	mls	r0, r2, r3, r0
 800a03c:	da07      	bge.n	800a04e <__strftime.isra.0+0x482>
 800a03e:	6972      	ldr	r2, [r6, #20]
 800a040:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800a044:	429a      	cmp	r2, r3
 800a046:	bfb8      	it	lt
 800a048:	f04f 0901 	movlt.w	r9, #1
 800a04c:	e7de      	b.n	800a00c <__strftime.isra.0+0x440>
 800a04e:	d0dd      	beq.n	800a00c <__strftime.isra.0+0x440>
 800a050:	6972      	ldr	r2, [r6, #20]
 800a052:	4b04      	ldr	r3, [pc, #16]	; (800a064 <__strftime.isra.0+0x498>)
 800a054:	429a      	cmp	r2, r3
 800a056:	bfb8      	it	lt
 800a058:	f04f 39ff 	movlt.w	r9, #4294967295
 800a05c:	e7d6      	b.n	800a00c <__strftime.isra.0+0x440>
 800a05e:	bf00      	nop
 800a060:	0800c2bc 	.word	0x0800c2bc
 800a064:	fffff894 	.word	0xfffff894
 800a068:	0800c4fa 	.word	0x0800c4fa
 800a06c:	0800c147 	.word	0x0800c147
 800a070:	0800c13f 	.word	0x0800c13f
 800a074:	0800c138 	.word	0x0800c138
 800a078:	0800c589 	.word	0x0800c589
 800a07c:	0800c157 	.word	0x0800c157
 800a080:	0800c149 	.word	0x0800c149
 800a084:	0800c14d 	.word	0x0800c14d
 800a088:	0800c160 	.word	0x0800c160
 800a08c:	0800c15c 	.word	0x0800c15c
 800a090:	6971      	ldr	r1, [r6, #20]
 800a092:	4aba      	ldr	r2, [pc, #744]	; (800a37c <__strftime.isra.0+0x7b0>)
 800a094:	4630      	mov	r0, r6
 800a096:	4291      	cmp	r1, r2
 800a098:	bfac      	ite	ge
 800a09a:	2300      	movge	r3, #0
 800a09c:	2301      	movlt	r3, #1
 800a09e:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800a0a2:	f7ff fd31 	bl	8009b08 <iso_year_adjust>
 800a0a6:	9904      	ldr	r1, [sp, #16]
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	2900      	cmp	r1, #0
 800a0ac:	db2c      	blt.n	800a108 <__strftime.isra.0+0x53c>
 800a0ae:	2264      	movs	r2, #100	; 0x64
 800a0b0:	fb91 f2f2 	sdiv	r2, r1, r2
 800a0b4:	3213      	adds	r2, #19
 800a0b6:	6970      	ldr	r0, [r6, #20]
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	db2f      	blt.n	800a11c <__strftime.isra.0+0x550>
 800a0bc:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800a0c0:	fb90 fefc 	sdiv	lr, r0, ip
 800a0c4:	fb0c 001e 	mls	r0, ip, lr, r0
 800a0c8:	f1ba 0f00 	cmp.w	sl, #0
 800a0cc:	da35      	bge.n	800a13a <__strftime.isra.0+0x56e>
 800a0ce:	6971      	ldr	r1, [r6, #20]
 800a0d0:	4bab      	ldr	r3, [pc, #684]	; (800a380 <__strftime.isra.0+0x7b4>)
 800a0d2:	4299      	cmp	r1, r3
 800a0d4:	db3b      	blt.n	800a14e <__strftime.isra.0+0x582>
 800a0d6:	4482      	add	sl, r0
 800a0d8:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a0dc:	d13c      	bne.n	800a158 <__strftime.isra.0+0x58c>
 800a0de:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800a0e2:	3a01      	subs	r2, #1
 800a0e4:	2064      	movs	r0, #100	; 0x64
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	fb00 aa02 	mla	sl, r0, r2, sl
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 81a8 	beq.w	800a442 <__strftime.isra.0+0x876>
 800a0f2:	222d      	movs	r2, #45	; 0x2d
 800a0f4:	f88d 2018 	strb.w	r2, [sp, #24]
 800a0f8:	f1b9 0f00 	cmp.w	r9, #0
 800a0fc:	d001      	beq.n	800a102 <__strftime.isra.0+0x536>
 800a0fe:	f109 39ff 	add.w	r9, r9, #4294967295
 800a102:	f10d 0219 	add.w	r2, sp, #25
 800a106:	e1a7      	b.n	800a458 <__strftime.isra.0+0x88c>
 800a108:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800a10c:	9104      	str	r1, [sp, #16]
 800a10e:	f000 fccb 	bl	800aaa8 <abs>
 800a112:	2264      	movs	r2, #100	; 0x64
 800a114:	9904      	ldr	r1, [sp, #16]
 800a116:	fb90 f2f2 	sdiv	r2, r0, r2
 800a11a:	e7cc      	b.n	800a0b6 <__strftime.isra.0+0x4ea>
 800a11c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800a120:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a124:	f000 fcc0 	bl	800aaa8 <abs>
 800a128:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800a12c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800a130:	fb90 fefc 	sdiv	lr, r0, ip
 800a134:	fb0e 001c 	mls	r0, lr, ip, r0
 800a138:	e7c6      	b.n	800a0c8 <__strftime.isra.0+0x4fc>
 800a13a:	d0cc      	beq.n	800a0d6 <__strftime.isra.0+0x50a>
 800a13c:	4b8f      	ldr	r3, [pc, #572]	; (800a37c <__strftime.isra.0+0x7b0>)
 800a13e:	4299      	cmp	r1, r3
 800a140:	bfb6      	itet	lt
 800a142:	2301      	movlt	r3, #1
 800a144:	2300      	movge	r3, #0
 800a146:	f04f 3aff 	movlt.w	sl, #4294967295
 800a14a:	9303      	str	r3, [sp, #12]
 800a14c:	e7c3      	b.n	800a0d6 <__strftime.isra.0+0x50a>
 800a14e:	f04f 0a01 	mov.w	sl, #1
 800a152:	f8cd a00c 	str.w	sl, [sp, #12]
 800a156:	e7be      	b.n	800a0d6 <__strftime.isra.0+0x50a>
 800a158:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800a15c:	bf04      	itt	eq
 800a15e:	f04f 0a00 	moveq.w	sl, #0
 800a162:	3201      	addeq	r2, #1
 800a164:	e7be      	b.n	800a0e4 <__strftime.isra.0+0x518>
 800a166:	4987      	ldr	r1, [pc, #540]	; (800a384 <__strftime.isra.0+0x7b8>)
 800a168:	4a87      	ldr	r2, [pc, #540]	; (800a388 <__strftime.isra.0+0x7bc>)
 800a16a:	68b3      	ldr	r3, [r6, #8]
 800a16c:	286b      	cmp	r0, #107	; 0x6b
 800a16e:	bf08      	it	eq
 800a170:	460a      	moveq	r2, r1
 800a172:	e6e5      	b.n	8009f40 <__strftime.isra.0+0x374>
 800a174:	68b3      	ldr	r3, [r6, #8]
 800a176:	b163      	cbz	r3, 800a192 <__strftime.isra.0+0x5c6>
 800a178:	2b0c      	cmp	r3, #12
 800a17a:	d004      	beq.n	800a186 <__strftime.isra.0+0x5ba>
 800a17c:	210c      	movs	r1, #12
 800a17e:	fb93 f2f1 	sdiv	r2, r3, r1
 800a182:	fb01 3312 	mls	r3, r1, r2, r3
 800a186:	4980      	ldr	r1, [pc, #512]	; (800a388 <__strftime.isra.0+0x7bc>)
 800a188:	4a7e      	ldr	r2, [pc, #504]	; (800a384 <__strftime.isra.0+0x7b8>)
 800a18a:	2849      	cmp	r0, #73	; 0x49
 800a18c:	bf08      	it	eq
 800a18e:	460a      	moveq	r2, r1
 800a190:	e6d6      	b.n	8009f40 <__strftime.isra.0+0x374>
 800a192:	230c      	movs	r3, #12
 800a194:	e7f7      	b.n	800a186 <__strftime.isra.0+0x5ba>
 800a196:	69f3      	ldr	r3, [r6, #28]
 800a198:	4a7c      	ldr	r2, [pc, #496]	; (800a38c <__strftime.isra.0+0x7c0>)
 800a19a:	3301      	adds	r3, #1
 800a19c:	e6d0      	b.n	8009f40 <__strftime.isra.0+0x374>
 800a19e:	6933      	ldr	r3, [r6, #16]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	e73e      	b.n	800a022 <__strftime.isra.0+0x456>
 800a1a4:	6873      	ldr	r3, [r6, #4]
 800a1a6:	e73c      	b.n	800a022 <__strftime.isra.0+0x456>
 800a1a8:	1e6b      	subs	r3, r5, #1
 800a1aa:	429c      	cmp	r4, r3
 800a1ac:	f4bf ad40 	bcs.w	8009c30 <__strftime.isra.0+0x64>
 800a1b0:	230a      	movs	r3, #10
 800a1b2:	553b      	strb	r3, [r7, r4]
 800a1b4:	3401      	adds	r4, #1
 800a1b6:	e60d      	b.n	8009dd4 <__strftime.isra.0+0x208>
 800a1b8:	68b3      	ldr	r3, [r6, #8]
 800a1ba:	2b0b      	cmp	r3, #11
 800a1bc:	bfd4      	ite	le
 800a1be:	2200      	movle	r2, #0
 800a1c0:	2201      	movgt	r2, #1
 800a1c2:	4b73      	ldr	r3, [pc, #460]	; (800a390 <__strftime.isra.0+0x7c4>)
 800a1c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a1c8:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 800a1cc:	4648      	mov	r0, r9
 800a1ce:	f7f5 ffbd 	bl	800014c <strlen>
 800a1d2:	f109 32ff 	add.w	r2, r9, #4294967295
 800a1d6:	4420      	add	r0, r4
 800a1d8:	f105 3cff 	add.w	ip, r5, #4294967295
 800a1dc:	42a0      	cmp	r0, r4
 800a1de:	f43f adf9 	beq.w	8009dd4 <__strftime.isra.0+0x208>
 800a1e2:	45a4      	cmp	ip, r4
 800a1e4:	f67f ad24 	bls.w	8009c30 <__strftime.isra.0+0x64>
 800a1e8:	f898 1000 	ldrb.w	r1, [r8]
 800a1ec:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a1f0:	2950      	cmp	r1, #80	; 0x50
 800a1f2:	d107      	bne.n	800a204 <__strftime.isra.0+0x638>
 800a1f4:	4967      	ldr	r1, [pc, #412]	; (800a394 <__strftime.isra.0+0x7c8>)
 800a1f6:	5cc9      	ldrb	r1, [r1, r3]
 800a1f8:	f001 0103 	and.w	r1, r1, #3
 800a1fc:	2901      	cmp	r1, #1
 800a1fe:	bf08      	it	eq
 800a200:	3320      	addeq	r3, #32
 800a202:	b2db      	uxtb	r3, r3
 800a204:	553b      	strb	r3, [r7, r4]
 800a206:	3401      	adds	r4, #1
 800a208:	e7e8      	b.n	800a1dc <__strftime.isra.0+0x610>
 800a20a:	6873      	ldr	r3, [r6, #4]
 800a20c:	4a62      	ldr	r2, [pc, #392]	; (800a398 <__strftime.isra.0+0x7cc>)
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	68b3      	ldr	r3, [r6, #8]
 800a212:	1b29      	subs	r1, r5, r4
 800a214:	1938      	adds	r0, r7, r4
 800a216:	f000 ffab 	bl	800b170 <sniprintf>
 800a21a:	e695      	b.n	8009f48 <__strftime.isra.0+0x37c>
 800a21c:	6a33      	ldr	r3, [r6, #32]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	db79      	blt.n	800a316 <__strftime.isra.0+0x74a>
 800a222:	f000 faad 	bl	800a780 <__tz_lock>
 800a226:	9b02      	ldr	r3, [sp, #8]
 800a228:	b90b      	cbnz	r3, 800a22e <__strftime.isra.0+0x662>
 800a22a:	f000 fab5 	bl	800a798 <_tzset_unlocked>
 800a22e:	f000 fc83 	bl	800ab38 <__gettzinfo>
 800a232:	6a33      	ldr	r3, [r6, #32]
 800a234:	2b00      	cmp	r3, #0
 800a236:	bfd4      	ite	le
 800a238:	2200      	movle	r2, #0
 800a23a:	2201      	movgt	r2, #1
 800a23c:	2328      	movs	r3, #40	; 0x28
 800a23e:	fb02 3303 	mla	r3, r2, r3, r3
 800a242:	58c3      	ldr	r3, [r0, r3]
 800a244:	f1c3 0900 	rsb	r9, r3, #0
 800a248:	f000 faa0 	bl	800a78c <__tz_unlock>
 800a24c:	2301      	movs	r3, #1
 800a24e:	9302      	str	r3, [sp, #8]
 800a250:	6972      	ldr	r2, [r6, #20]
 800a252:	1b29      	subs	r1, r5, r4
 800a254:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800a258:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800a25c:	f16c 0c00 	sbc.w	ip, ip, #0
 800a260:	f1bc 0f00 	cmp.w	ip, #0
 800a264:	eb07 0004 	add.w	r0, r7, r4
 800a268:	da02      	bge.n	800a270 <__strftime.isra.0+0x6a4>
 800a26a:	3303      	adds	r3, #3
 800a26c:	f14c 0c00 	adc.w	ip, ip, #0
 800a270:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800a274:	f102 3aff 	add.w	sl, r2, #4294967295
 800a278:	fb9a fefe 	sdiv	lr, sl, lr
 800a27c:	089b      	lsrs	r3, r3, #2
 800a27e:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800a282:	ebb3 030e 	subs.w	r3, r3, lr
 800a286:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800a28a:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800a28e:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800a292:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800a296:	fb9a fefe 	sdiv	lr, sl, lr
 800a29a:	eb13 030e 	adds.w	r3, r3, lr
 800a29e:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800a2a2:	f240 1c6d 	movw	ip, #365	; 0x16d
 800a2a6:	3a46      	subs	r2, #70	; 0x46
 800a2a8:	fb0c f202 	mul.w	r2, ip, r2
 800a2ac:	f04f 0c18 	mov.w	ip, #24
 800a2b0:	189b      	adds	r3, r3, r2
 800a2b2:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800a2b6:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800a2ba:	eb13 030e 	adds.w	r3, r3, lr
 800a2be:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800a2c2:	fba3 3e0c 	umull	r3, lr, r3, ip
 800a2c6:	fb0c e202 	mla	r2, ip, r2, lr
 800a2ca:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800a2ce:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800a2d2:	eb13 030e 	adds.w	r3, r3, lr
 800a2d6:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800a2da:	fba3 320c 	umull	r3, r2, r3, ip
 800a2de:	fb0c 220e 	mla	r2, ip, lr, r2
 800a2e2:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800a2e6:	eb13 030e 	adds.w	r3, r3, lr
 800a2ea:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800a2ee:	fba3 3e0c 	umull	r3, lr, r3, ip
 800a2f2:	fb0c e202 	mla	r2, ip, r2, lr
 800a2f6:	f8d6 e000 	ldr.w	lr, [r6]
 800a2fa:	eb13 030e 	adds.w	r3, r3, lr
 800a2fe:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800a302:	ebb3 0309 	subs.w	r3, r3, r9
 800a306:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800a30a:	e9cd 3200 	strd	r3, r2, [sp]
 800a30e:	4a23      	ldr	r2, [pc, #140]	; (800a39c <__strftime.isra.0+0x7d0>)
 800a310:	f000 ff2e 	bl	800b170 <sniprintf>
 800a314:	e618      	b.n	8009f48 <__strftime.isra.0+0x37c>
 800a316:	f04f 0900 	mov.w	r9, #0
 800a31a:	e799      	b.n	800a250 <__strftime.isra.0+0x684>
 800a31c:	6833      	ldr	r3, [r6, #0]
 800a31e:	e680      	b.n	800a022 <__strftime.isra.0+0x456>
 800a320:	1e6b      	subs	r3, r5, #1
 800a322:	429c      	cmp	r4, r3
 800a324:	f4bf ac84 	bcs.w	8009c30 <__strftime.isra.0+0x64>
 800a328:	2309      	movs	r3, #9
 800a32a:	e742      	b.n	800a1b2 <__strftime.isra.0+0x5e6>
 800a32c:	6833      	ldr	r3, [r6, #0]
 800a32e:	4a1c      	ldr	r2, [pc, #112]	; (800a3a0 <__strftime.isra.0+0x7d4>)
 800a330:	9301      	str	r3, [sp, #4]
 800a332:	6873      	ldr	r3, [r6, #4]
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	68b3      	ldr	r3, [r6, #8]
 800a338:	e5f7      	b.n	8009f2a <__strftime.isra.0+0x35e>
 800a33a:	1e6b      	subs	r3, r5, #1
 800a33c:	429c      	cmp	r4, r3
 800a33e:	f4bf ac77 	bcs.w	8009c30 <__strftime.isra.0+0x64>
 800a342:	69b3      	ldr	r3, [r6, #24]
 800a344:	1c62      	adds	r2, r4, #1
 800a346:	b91b      	cbnz	r3, 800a350 <__strftime.isra.0+0x784>
 800a348:	2337      	movs	r3, #55	; 0x37
 800a34a:	553b      	strb	r3, [r7, r4]
 800a34c:	4614      	mov	r4, r2
 800a34e:	e541      	b.n	8009dd4 <__strftime.isra.0+0x208>
 800a350:	3330      	adds	r3, #48	; 0x30
 800a352:	e7fa      	b.n	800a34a <__strftime.isra.0+0x77e>
 800a354:	69f3      	ldr	r3, [r6, #28]
 800a356:	69b2      	ldr	r2, [r6, #24]
 800a358:	3307      	adds	r3, #7
 800a35a:	1a9b      	subs	r3, r3, r2
 800a35c:	2207      	movs	r2, #7
 800a35e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a362:	e65e      	b.n	800a022 <__strftime.isra.0+0x456>
 800a364:	4630      	mov	r0, r6
 800a366:	f7ff fbcf 	bl	8009b08 <iso_year_adjust>
 800a36a:	69b2      	ldr	r2, [r6, #24]
 800a36c:	b1d2      	cbz	r2, 800a3a4 <__strftime.isra.0+0x7d8>
 800a36e:	3a01      	subs	r2, #1
 800a370:	2800      	cmp	r0, #0
 800a372:	dc3b      	bgt.n	800a3ec <__strftime.isra.0+0x820>
 800a374:	69f3      	ldr	r3, [r6, #28]
 800a376:	d117      	bne.n	800a3a8 <__strftime.isra.0+0x7dc>
 800a378:	330a      	adds	r3, #10
 800a37a:	e7ee      	b.n	800a35a <__strftime.isra.0+0x78e>
 800a37c:	fffff894 	.word	0xfffff894
 800a380:	fffff895 	.word	0xfffff895
 800a384:	0800c149 	.word	0x0800c149
 800a388:	0800c157 	.word	0x0800c157
 800a38c:	0800c16c 	.word	0x0800c16c
 800a390:	0800c2bc 	.word	0x0800c2bc
 800a394:	0800c3f5 	.word	0x0800c3f5
 800a398:	0800c17b 	.word	0x0800c17b
 800a39c:	0800c171 	.word	0x0800c171
 800a3a0:	0800c176 	.word	0x0800c176
 800a3a4:	2206      	movs	r2, #6
 800a3a6:	e7e3      	b.n	800a370 <__strftime.isra.0+0x7a4>
 800a3a8:	6971      	ldr	r1, [r6, #20]
 800a3aa:	1ad2      	subs	r2, r2, r3
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	f240 736b 	movw	r3, #1899	; 0x76b
 800a3b2:	bfa8      	it	ge
 800a3b4:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800a3b8:	440b      	add	r3, r1
 800a3ba:	0799      	lsls	r1, r3, #30
 800a3bc:	d105      	bne.n	800a3ca <__strftime.isra.0+0x7fe>
 800a3be:	2064      	movs	r0, #100	; 0x64
 800a3c0:	fb93 f1f0 	sdiv	r1, r3, r0
 800a3c4:	fb00 3111 	mls	r1, r0, r1, r3
 800a3c8:	b971      	cbnz	r1, 800a3e8 <__strftime.isra.0+0x81c>
 800a3ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a3ce:	fb93 f0f1 	sdiv	r0, r3, r1
 800a3d2:	fb01 3310 	mls	r3, r1, r0, r3
 800a3d6:	fab3 f383 	clz	r3, r3
 800a3da:	095b      	lsrs	r3, r3, #5
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	2b05      	cmp	r3, #5
 800a3e0:	bfb4      	ite	lt
 800a3e2:	2335      	movlt	r3, #53	; 0x35
 800a3e4:	2334      	movge	r3, #52	; 0x34
 800a3e6:	e61c      	b.n	800a022 <__strftime.isra.0+0x456>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e7f7      	b.n	800a3dc <__strftime.isra.0+0x810>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e618      	b.n	800a022 <__strftime.isra.0+0x456>
 800a3f0:	1e6b      	subs	r3, r5, #1
 800a3f2:	429c      	cmp	r4, r3
 800a3f4:	f4bf ac1c 	bcs.w	8009c30 <__strftime.isra.0+0x64>
 800a3f8:	69b3      	ldr	r3, [r6, #24]
 800a3fa:	3330      	adds	r3, #48	; 0x30
 800a3fc:	e6d9      	b.n	800a1b2 <__strftime.isra.0+0x5e6>
 800a3fe:	69b2      	ldr	r2, [r6, #24]
 800a400:	b11a      	cbz	r2, 800a40a <__strftime.isra.0+0x83e>
 800a402:	3a01      	subs	r2, #1
 800a404:	69f3      	ldr	r3, [r6, #28]
 800a406:	3307      	adds	r3, #7
 800a408:	e7a7      	b.n	800a35a <__strftime.isra.0+0x78e>
 800a40a:	2206      	movs	r2, #6
 800a40c:	e7fa      	b.n	800a404 <__strftime.isra.0+0x838>
 800a40e:	6970      	ldr	r0, [r6, #20]
 800a410:	2800      	cmp	r0, #0
 800a412:	db05      	blt.n	800a420 <__strftime.isra.0+0x854>
 800a414:	2364      	movs	r3, #100	; 0x64
 800a416:	fb90 f2f3 	sdiv	r2, r0, r3
 800a41a:	fb02 0313 	mls	r3, r2, r3, r0
 800a41e:	e600      	b.n	800a022 <__strftime.isra.0+0x456>
 800a420:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800a424:	f000 fb40 	bl	800aaa8 <abs>
 800a428:	e7f4      	b.n	800a414 <__strftime.isra.0+0x848>
 800a42a:	6972      	ldr	r2, [r6, #20]
 800a42c:	494c      	ldr	r1, [pc, #304]	; (800a560 <__strftime.isra.0+0x994>)
 800a42e:	428a      	cmp	r2, r1
 800a430:	da05      	bge.n	800a43e <__strftime.isra.0+0x872>
 800a432:	202d      	movs	r0, #45	; 0x2d
 800a434:	eba1 0a02 	sub.w	sl, r1, r2
 800a438:	f88d 0018 	strb.w	r0, [sp, #24]
 800a43c:	e65c      	b.n	800a0f8 <__strftime.isra.0+0x52c>
 800a43e:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800a442:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800a446:	d106      	bne.n	800a456 <__strftime.isra.0+0x88a>
 800a448:	f242 720f 	movw	r2, #9999	; 0x270f
 800a44c:	4592      	cmp	sl, r2
 800a44e:	d902      	bls.n	800a456 <__strftime.isra.0+0x88a>
 800a450:	f88d b018 	strb.w	fp, [sp, #24]
 800a454:	e650      	b.n	800a0f8 <__strftime.isra.0+0x52c>
 800a456:	aa06      	add	r2, sp, #24
 800a458:	2125      	movs	r1, #37	; 0x25
 800a45a:	7011      	strb	r1, [r2, #0]
 800a45c:	f1bb 0f00 	cmp.w	fp, #0
 800a460:	d108      	bne.n	800a474 <__strftime.isra.0+0x8a8>
 800a462:	1c50      	adds	r0, r2, #1
 800a464:	493f      	ldr	r1, [pc, #252]	; (800a564 <__strftime.isra.0+0x998>)
 800a466:	f000 fee1 	bl	800b22c <strcpy>
 800a46a:	464b      	mov	r3, r9
 800a46c:	f8cd a000 	str.w	sl, [sp]
 800a470:	aa06      	add	r2, sp, #24
 800a472:	e6ce      	b.n	800a212 <__strftime.isra.0+0x646>
 800a474:	2330      	movs	r3, #48	; 0x30
 800a476:	1c90      	adds	r0, r2, #2
 800a478:	7053      	strb	r3, [r2, #1]
 800a47a:	e7f3      	b.n	800a464 <__strftime.isra.0+0x898>
 800a47c:	6a33      	ldr	r3, [r6, #32]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f6ff aca8 	blt.w	8009dd4 <__strftime.isra.0+0x208>
 800a484:	f000 f97c 	bl	800a780 <__tz_lock>
 800a488:	9b02      	ldr	r3, [sp, #8]
 800a48a:	b90b      	cbnz	r3, 800a490 <__strftime.isra.0+0x8c4>
 800a48c:	f000 f984 	bl	800a798 <_tzset_unlocked>
 800a490:	f000 fb52 	bl	800ab38 <__gettzinfo>
 800a494:	6a33      	ldr	r3, [r6, #32]
 800a496:	eb07 0a04 	add.w	sl, r7, r4
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	bfd4      	ite	le
 800a49e:	2200      	movle	r2, #0
 800a4a0:	2201      	movgt	r2, #1
 800a4a2:	2328      	movs	r3, #40	; 0x28
 800a4a4:	fb02 3303 	mla	r3, r2, r3, r3
 800a4a8:	58c3      	ldr	r3, [r0, r3]
 800a4aa:	eba5 0b04 	sub.w	fp, r5, r4
 800a4ae:	f1c3 0900 	rsb	r9, r3, #0
 800a4b2:	f000 f96b 	bl	800a78c <__tz_unlock>
 800a4b6:	233c      	movs	r3, #60	; 0x3c
 800a4b8:	fb99 f0f3 	sdiv	r0, r9, r3
 800a4bc:	f000 fb40 	bl	800ab40 <labs>
 800a4c0:	233c      	movs	r3, #60	; 0x3c
 800a4c2:	fb90 f2f3 	sdiv	r2, r0, r3
 800a4c6:	fb02 0013 	mls	r0, r2, r3, r0
 800a4ca:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800a4ce:	9000      	str	r0, [sp, #0]
 800a4d0:	fb99 f3f3 	sdiv	r3, r9, r3
 800a4d4:	4659      	mov	r1, fp
 800a4d6:	4650      	mov	r0, sl
 800a4d8:	4a23      	ldr	r2, [pc, #140]	; (800a568 <__strftime.isra.0+0x99c>)
 800a4da:	f000 fe49 	bl	800b170 <sniprintf>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	f6ff aba6 	blt.w	8009c30 <__strftime.isra.0+0x64>
 800a4e4:	4404      	add	r4, r0
 800a4e6:	42a5      	cmp	r5, r4
 800a4e8:	f67f aba2 	bls.w	8009c30 <__strftime.isra.0+0x64>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	9302      	str	r3, [sp, #8]
 800a4f0:	e470      	b.n	8009dd4 <__strftime.isra.0+0x208>
 800a4f2:	6a33      	ldr	r3, [r6, #32]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f6ff ac6d 	blt.w	8009dd4 <__strftime.isra.0+0x208>
 800a4fa:	f000 f941 	bl	800a780 <__tz_lock>
 800a4fe:	9b02      	ldr	r3, [sp, #8]
 800a500:	b90b      	cbnz	r3, 800a506 <__strftime.isra.0+0x93a>
 800a502:	f000 f949 	bl	800a798 <_tzset_unlocked>
 800a506:	6a33      	ldr	r3, [r6, #32]
 800a508:	4a18      	ldr	r2, [pc, #96]	; (800a56c <__strftime.isra.0+0x9a0>)
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	bfd4      	ite	le
 800a50e:	2300      	movle	r3, #0
 800a510:	2301      	movgt	r3, #1
 800a512:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800a516:	4648      	mov	r0, r9
 800a518:	f7f5 fe18 	bl	800014c <strlen>
 800a51c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a520:	4420      	add	r0, r4
 800a522:	1e6b      	subs	r3, r5, #1
 800a524:	42a0      	cmp	r0, r4
 800a526:	d102      	bne.n	800a52e <__strftime.isra.0+0x962>
 800a528:	f000 f930 	bl	800a78c <__tz_unlock>
 800a52c:	e7de      	b.n	800a4ec <__strftime.isra.0+0x920>
 800a52e:	42a3      	cmp	r3, r4
 800a530:	d904      	bls.n	800a53c <__strftime.isra.0+0x970>
 800a532:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800a536:	553a      	strb	r2, [r7, r4]
 800a538:	3401      	adds	r4, #1
 800a53a:	e7f3      	b.n	800a524 <__strftime.isra.0+0x958>
 800a53c:	f000 f926 	bl	800a78c <__tz_unlock>
 800a540:	f7ff bb76 	b.w	8009c30 <__strftime.isra.0+0x64>
 800a544:	1e6b      	subs	r3, r5, #1
 800a546:	429c      	cmp	r4, r3
 800a548:	f4bf ab72 	bcs.w	8009c30 <__strftime.isra.0+0x64>
 800a54c:	2325      	movs	r3, #37	; 0x25
 800a54e:	e630      	b.n	800a1b2 <__strftime.isra.0+0x5e6>
 800a550:	b10d      	cbz	r5, 800a556 <__strftime.isra.0+0x98a>
 800a552:	2300      	movs	r3, #0
 800a554:	553b      	strb	r3, [r7, r4]
 800a556:	4620      	mov	r0, r4
 800a558:	b00f      	add	sp, #60	; 0x3c
 800a55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55e:	bf00      	nop
 800a560:	fffff894 	.word	0xfffff894
 800a564:	0800c168 	.word	0x0800c168
 800a568:	0800c185 	.word	0x0800c185
 800a56c:	2000016c 	.word	0x2000016c

0800a570 <strftime>:
 800a570:	f7ff bb2c 	b.w	8009bcc <__strftime.isra.0>

0800a574 <_strtol_l.constprop.0>:
 800a574:	2b01      	cmp	r3, #1
 800a576:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a57a:	4680      	mov	r8, r0
 800a57c:	d001      	beq.n	800a582 <_strtol_l.constprop.0+0xe>
 800a57e:	2b24      	cmp	r3, #36	; 0x24
 800a580:	d906      	bls.n	800a590 <_strtol_l.constprop.0+0x1c>
 800a582:	f7ff f97d 	bl	8009880 <__errno>
 800a586:	2316      	movs	r3, #22
 800a588:	6003      	str	r3, [r0, #0]
 800a58a:	2000      	movs	r0, #0
 800a58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a590:	460d      	mov	r5, r1
 800a592:	4f35      	ldr	r7, [pc, #212]	; (800a668 <_strtol_l.constprop.0+0xf4>)
 800a594:	4628      	mov	r0, r5
 800a596:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a59a:	5de6      	ldrb	r6, [r4, r7]
 800a59c:	f016 0608 	ands.w	r6, r6, #8
 800a5a0:	d1f8      	bne.n	800a594 <_strtol_l.constprop.0+0x20>
 800a5a2:	2c2d      	cmp	r4, #45	; 0x2d
 800a5a4:	d12f      	bne.n	800a606 <_strtol_l.constprop.0+0x92>
 800a5a6:	2601      	movs	r6, #1
 800a5a8:	782c      	ldrb	r4, [r5, #0]
 800a5aa:	1c85      	adds	r5, r0, #2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d057      	beq.n	800a660 <_strtol_l.constprop.0+0xec>
 800a5b0:	2b10      	cmp	r3, #16
 800a5b2:	d109      	bne.n	800a5c8 <_strtol_l.constprop.0+0x54>
 800a5b4:	2c30      	cmp	r4, #48	; 0x30
 800a5b6:	d107      	bne.n	800a5c8 <_strtol_l.constprop.0+0x54>
 800a5b8:	7828      	ldrb	r0, [r5, #0]
 800a5ba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a5be:	2858      	cmp	r0, #88	; 0x58
 800a5c0:	d149      	bne.n	800a656 <_strtol_l.constprop.0+0xe2>
 800a5c2:	2310      	movs	r3, #16
 800a5c4:	786c      	ldrb	r4, [r5, #1]
 800a5c6:	3502      	adds	r5, #2
 800a5c8:	2700      	movs	r7, #0
 800a5ca:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a5ce:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a5d2:	fbbe f9f3 	udiv	r9, lr, r3
 800a5d6:	4638      	mov	r0, r7
 800a5d8:	fb03 ea19 	mls	sl, r3, r9, lr
 800a5dc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a5e0:	f1bc 0f09 	cmp.w	ip, #9
 800a5e4:	d814      	bhi.n	800a610 <_strtol_l.constprop.0+0x9c>
 800a5e6:	4664      	mov	r4, ip
 800a5e8:	42a3      	cmp	r3, r4
 800a5ea:	dd22      	ble.n	800a632 <_strtol_l.constprop.0+0xbe>
 800a5ec:	2f00      	cmp	r7, #0
 800a5ee:	db1d      	blt.n	800a62c <_strtol_l.constprop.0+0xb8>
 800a5f0:	4581      	cmp	r9, r0
 800a5f2:	d31b      	bcc.n	800a62c <_strtol_l.constprop.0+0xb8>
 800a5f4:	d101      	bne.n	800a5fa <_strtol_l.constprop.0+0x86>
 800a5f6:	45a2      	cmp	sl, r4
 800a5f8:	db18      	blt.n	800a62c <_strtol_l.constprop.0+0xb8>
 800a5fa:	2701      	movs	r7, #1
 800a5fc:	fb00 4003 	mla	r0, r0, r3, r4
 800a600:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a604:	e7ea      	b.n	800a5dc <_strtol_l.constprop.0+0x68>
 800a606:	2c2b      	cmp	r4, #43	; 0x2b
 800a608:	bf04      	itt	eq
 800a60a:	782c      	ldrbeq	r4, [r5, #0]
 800a60c:	1c85      	addeq	r5, r0, #2
 800a60e:	e7cd      	b.n	800a5ac <_strtol_l.constprop.0+0x38>
 800a610:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a614:	f1bc 0f19 	cmp.w	ip, #25
 800a618:	d801      	bhi.n	800a61e <_strtol_l.constprop.0+0xaa>
 800a61a:	3c37      	subs	r4, #55	; 0x37
 800a61c:	e7e4      	b.n	800a5e8 <_strtol_l.constprop.0+0x74>
 800a61e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a622:	f1bc 0f19 	cmp.w	ip, #25
 800a626:	d804      	bhi.n	800a632 <_strtol_l.constprop.0+0xbe>
 800a628:	3c57      	subs	r4, #87	; 0x57
 800a62a:	e7dd      	b.n	800a5e8 <_strtol_l.constprop.0+0x74>
 800a62c:	f04f 37ff 	mov.w	r7, #4294967295
 800a630:	e7e6      	b.n	800a600 <_strtol_l.constprop.0+0x8c>
 800a632:	2f00      	cmp	r7, #0
 800a634:	da07      	bge.n	800a646 <_strtol_l.constprop.0+0xd2>
 800a636:	2322      	movs	r3, #34	; 0x22
 800a638:	4670      	mov	r0, lr
 800a63a:	f8c8 3000 	str.w	r3, [r8]
 800a63e:	2a00      	cmp	r2, #0
 800a640:	d0a4      	beq.n	800a58c <_strtol_l.constprop.0+0x18>
 800a642:	1e69      	subs	r1, r5, #1
 800a644:	e005      	b.n	800a652 <_strtol_l.constprop.0+0xde>
 800a646:	b106      	cbz	r6, 800a64a <_strtol_l.constprop.0+0xd6>
 800a648:	4240      	negs	r0, r0
 800a64a:	2a00      	cmp	r2, #0
 800a64c:	d09e      	beq.n	800a58c <_strtol_l.constprop.0+0x18>
 800a64e:	2f00      	cmp	r7, #0
 800a650:	d1f7      	bne.n	800a642 <_strtol_l.constprop.0+0xce>
 800a652:	6011      	str	r1, [r2, #0]
 800a654:	e79a      	b.n	800a58c <_strtol_l.constprop.0+0x18>
 800a656:	2430      	movs	r4, #48	; 0x30
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1b5      	bne.n	800a5c8 <_strtol_l.constprop.0+0x54>
 800a65c:	2308      	movs	r3, #8
 800a65e:	e7b3      	b.n	800a5c8 <_strtol_l.constprop.0+0x54>
 800a660:	2c30      	cmp	r4, #48	; 0x30
 800a662:	d0a9      	beq.n	800a5b8 <_strtol_l.constprop.0+0x44>
 800a664:	230a      	movs	r3, #10
 800a666:	e7af      	b.n	800a5c8 <_strtol_l.constprop.0+0x54>
 800a668:	0800c3f5 	.word	0x0800c3f5

0800a66c <_strtol_r>:
 800a66c:	f7ff bf82 	b.w	800a574 <_strtol_l.constprop.0>

0800a670 <strtol>:
 800a670:	4613      	mov	r3, r2
 800a672:	460a      	mov	r2, r1
 800a674:	4601      	mov	r1, r0
 800a676:	4802      	ldr	r0, [pc, #8]	; (800a680 <strtol+0x10>)
 800a678:	6800      	ldr	r0, [r0, #0]
 800a67a:	f7ff bf7b 	b.w	800a574 <_strtol_l.constprop.0>
 800a67e:	bf00      	nop
 800a680:	20000108 	.word	0x20000108

0800a684 <_strtoul_l.constprop.0>:
 800a684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a688:	4686      	mov	lr, r0
 800a68a:	460d      	mov	r5, r1
 800a68c:	4f35      	ldr	r7, [pc, #212]	; (800a764 <_strtoul_l.constprop.0+0xe0>)
 800a68e:	4628      	mov	r0, r5
 800a690:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a694:	5de6      	ldrb	r6, [r4, r7]
 800a696:	f016 0608 	ands.w	r6, r6, #8
 800a69a:	d1f8      	bne.n	800a68e <_strtoul_l.constprop.0+0xa>
 800a69c:	2c2d      	cmp	r4, #45	; 0x2d
 800a69e:	d12f      	bne.n	800a700 <_strtoul_l.constprop.0+0x7c>
 800a6a0:	2601      	movs	r6, #1
 800a6a2:	782c      	ldrb	r4, [r5, #0]
 800a6a4:	1c85      	adds	r5, r0, #2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d057      	beq.n	800a75a <_strtoul_l.constprop.0+0xd6>
 800a6aa:	2b10      	cmp	r3, #16
 800a6ac:	d109      	bne.n	800a6c2 <_strtoul_l.constprop.0+0x3e>
 800a6ae:	2c30      	cmp	r4, #48	; 0x30
 800a6b0:	d107      	bne.n	800a6c2 <_strtoul_l.constprop.0+0x3e>
 800a6b2:	7828      	ldrb	r0, [r5, #0]
 800a6b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a6b8:	2858      	cmp	r0, #88	; 0x58
 800a6ba:	d149      	bne.n	800a750 <_strtoul_l.constprop.0+0xcc>
 800a6bc:	2310      	movs	r3, #16
 800a6be:	786c      	ldrb	r4, [r5, #1]
 800a6c0:	3502      	adds	r5, #2
 800a6c2:	f04f 38ff 	mov.w	r8, #4294967295
 800a6c6:	fbb8 f8f3 	udiv	r8, r8, r3
 800a6ca:	2700      	movs	r7, #0
 800a6cc:	fb03 f908 	mul.w	r9, r3, r8
 800a6d0:	4638      	mov	r0, r7
 800a6d2:	ea6f 0909 	mvn.w	r9, r9
 800a6d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a6da:	f1bc 0f09 	cmp.w	ip, #9
 800a6de:	d814      	bhi.n	800a70a <_strtoul_l.constprop.0+0x86>
 800a6e0:	4664      	mov	r4, ip
 800a6e2:	42a3      	cmp	r3, r4
 800a6e4:	dd22      	ble.n	800a72c <_strtoul_l.constprop.0+0xa8>
 800a6e6:	2f00      	cmp	r7, #0
 800a6e8:	db1d      	blt.n	800a726 <_strtoul_l.constprop.0+0xa2>
 800a6ea:	4580      	cmp	r8, r0
 800a6ec:	d31b      	bcc.n	800a726 <_strtoul_l.constprop.0+0xa2>
 800a6ee:	d101      	bne.n	800a6f4 <_strtoul_l.constprop.0+0x70>
 800a6f0:	45a1      	cmp	r9, r4
 800a6f2:	db18      	blt.n	800a726 <_strtoul_l.constprop.0+0xa2>
 800a6f4:	2701      	movs	r7, #1
 800a6f6:	fb00 4003 	mla	r0, r0, r3, r4
 800a6fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6fe:	e7ea      	b.n	800a6d6 <_strtoul_l.constprop.0+0x52>
 800a700:	2c2b      	cmp	r4, #43	; 0x2b
 800a702:	bf04      	itt	eq
 800a704:	782c      	ldrbeq	r4, [r5, #0]
 800a706:	1c85      	addeq	r5, r0, #2
 800a708:	e7cd      	b.n	800a6a6 <_strtoul_l.constprop.0+0x22>
 800a70a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a70e:	f1bc 0f19 	cmp.w	ip, #25
 800a712:	d801      	bhi.n	800a718 <_strtoul_l.constprop.0+0x94>
 800a714:	3c37      	subs	r4, #55	; 0x37
 800a716:	e7e4      	b.n	800a6e2 <_strtoul_l.constprop.0+0x5e>
 800a718:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a71c:	f1bc 0f19 	cmp.w	ip, #25
 800a720:	d804      	bhi.n	800a72c <_strtoul_l.constprop.0+0xa8>
 800a722:	3c57      	subs	r4, #87	; 0x57
 800a724:	e7dd      	b.n	800a6e2 <_strtoul_l.constprop.0+0x5e>
 800a726:	f04f 37ff 	mov.w	r7, #4294967295
 800a72a:	e7e6      	b.n	800a6fa <_strtoul_l.constprop.0+0x76>
 800a72c:	2f00      	cmp	r7, #0
 800a72e:	da07      	bge.n	800a740 <_strtoul_l.constprop.0+0xbc>
 800a730:	2322      	movs	r3, #34	; 0x22
 800a732:	f04f 30ff 	mov.w	r0, #4294967295
 800a736:	f8ce 3000 	str.w	r3, [lr]
 800a73a:	b932      	cbnz	r2, 800a74a <_strtoul_l.constprop.0+0xc6>
 800a73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a740:	b106      	cbz	r6, 800a744 <_strtoul_l.constprop.0+0xc0>
 800a742:	4240      	negs	r0, r0
 800a744:	2a00      	cmp	r2, #0
 800a746:	d0f9      	beq.n	800a73c <_strtoul_l.constprop.0+0xb8>
 800a748:	b107      	cbz	r7, 800a74c <_strtoul_l.constprop.0+0xc8>
 800a74a:	1e69      	subs	r1, r5, #1
 800a74c:	6011      	str	r1, [r2, #0]
 800a74e:	e7f5      	b.n	800a73c <_strtoul_l.constprop.0+0xb8>
 800a750:	2430      	movs	r4, #48	; 0x30
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1b5      	bne.n	800a6c2 <_strtoul_l.constprop.0+0x3e>
 800a756:	2308      	movs	r3, #8
 800a758:	e7b3      	b.n	800a6c2 <_strtoul_l.constprop.0+0x3e>
 800a75a:	2c30      	cmp	r4, #48	; 0x30
 800a75c:	d0a9      	beq.n	800a6b2 <_strtoul_l.constprop.0+0x2e>
 800a75e:	230a      	movs	r3, #10
 800a760:	e7af      	b.n	800a6c2 <_strtoul_l.constprop.0+0x3e>
 800a762:	bf00      	nop
 800a764:	0800c3f5 	.word	0x0800c3f5

0800a768 <_strtoul_r>:
 800a768:	f7ff bf8c 	b.w	800a684 <_strtoul_l.constprop.0>

0800a76c <strtoul>:
 800a76c:	4613      	mov	r3, r2
 800a76e:	460a      	mov	r2, r1
 800a770:	4601      	mov	r1, r0
 800a772:	4802      	ldr	r0, [pc, #8]	; (800a77c <strtoul+0x10>)
 800a774:	6800      	ldr	r0, [r0, #0]
 800a776:	f7ff bf85 	b.w	800a684 <_strtoul_l.constprop.0>
 800a77a:	bf00      	nop
 800a77c:	20000108 	.word	0x20000108

0800a780 <__tz_lock>:
 800a780:	4801      	ldr	r0, [pc, #4]	; (800a788 <__tz_lock+0x8>)
 800a782:	f7ff b8a7 	b.w	80098d4 <__retarget_lock_acquire>
 800a786:	bf00      	nop
 800a788:	200006ee 	.word	0x200006ee

0800a78c <__tz_unlock>:
 800a78c:	4801      	ldr	r0, [pc, #4]	; (800a794 <__tz_unlock+0x8>)
 800a78e:	f7ff b8a3 	b.w	80098d8 <__retarget_lock_release>
 800a792:	bf00      	nop
 800a794:	200006ee 	.word	0x200006ee

0800a798 <_tzset_unlocked>:
 800a798:	4b01      	ldr	r3, [pc, #4]	; (800a7a0 <_tzset_unlocked+0x8>)
 800a79a:	6818      	ldr	r0, [r3, #0]
 800a79c:	f000 b802 	b.w	800a7a4 <_tzset_unlocked_r>
 800a7a0:	20000108 	.word	0x20000108

0800a7a4 <_tzset_unlocked_r>:
 800a7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a8:	b08d      	sub	sp, #52	; 0x34
 800a7aa:	4607      	mov	r7, r0
 800a7ac:	f000 f9c4 	bl	800ab38 <__gettzinfo>
 800a7b0:	49b1      	ldr	r1, [pc, #708]	; (800aa78 <_tzset_unlocked_r+0x2d4>)
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	4638      	mov	r0, r7
 800a7b6:	f000 f9b7 	bl	800ab28 <_getenv_r>
 800a7ba:	4eb0      	ldr	r6, [pc, #704]	; (800aa7c <_tzset_unlocked_r+0x2d8>)
 800a7bc:	4604      	mov	r4, r0
 800a7be:	b970      	cbnz	r0, 800a7de <_tzset_unlocked_r+0x3a>
 800a7c0:	4baf      	ldr	r3, [pc, #700]	; (800aa80 <_tzset_unlocked_r+0x2dc>)
 800a7c2:	4ab0      	ldr	r2, [pc, #704]	; (800aa84 <_tzset_unlocked_r+0x2e0>)
 800a7c4:	6018      	str	r0, [r3, #0]
 800a7c6:	4bb0      	ldr	r3, [pc, #704]	; (800aa88 <_tzset_unlocked_r+0x2e4>)
 800a7c8:	6018      	str	r0, [r3, #0]
 800a7ca:	4bb0      	ldr	r3, [pc, #704]	; (800aa8c <_tzset_unlocked_r+0x2e8>)
 800a7cc:	6830      	ldr	r0, [r6, #0]
 800a7ce:	e9c3 2200 	strd	r2, r2, [r3]
 800a7d2:	f000 f9b9 	bl	800ab48 <free>
 800a7d6:	6034      	str	r4, [r6, #0]
 800a7d8:	b00d      	add	sp, #52	; 0x34
 800a7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7de:	6831      	ldr	r1, [r6, #0]
 800a7e0:	2900      	cmp	r1, #0
 800a7e2:	d162      	bne.n	800a8aa <_tzset_unlocked_r+0x106>
 800a7e4:	6830      	ldr	r0, [r6, #0]
 800a7e6:	f000 f9af 	bl	800ab48 <free>
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f7f5 fcae 	bl	800014c <strlen>
 800a7f0:	1c41      	adds	r1, r0, #1
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	f7ff f8e2 	bl	80099bc <_malloc_r>
 800a7f8:	6030      	str	r0, [r6, #0]
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d15a      	bne.n	800a8b4 <_tzset_unlocked_r+0x110>
 800a7fe:	7823      	ldrb	r3, [r4, #0]
 800a800:	ae0a      	add	r6, sp, #40	; 0x28
 800a802:	2b3a      	cmp	r3, #58	; 0x3a
 800a804:	bf08      	it	eq
 800a806:	3401      	addeq	r4, #1
 800a808:	4633      	mov	r3, r6
 800a80a:	4620      	mov	r0, r4
 800a80c:	4aa0      	ldr	r2, [pc, #640]	; (800aa90 <_tzset_unlocked_r+0x2ec>)
 800a80e:	49a1      	ldr	r1, [pc, #644]	; (800aa94 <_tzset_unlocked_r+0x2f0>)
 800a810:	f000 fce2 	bl	800b1d8 <siscanf>
 800a814:	2800      	cmp	r0, #0
 800a816:	dddf      	ble.n	800a7d8 <_tzset_unlocked_r+0x34>
 800a818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a81a:	18e7      	adds	r7, r4, r3
 800a81c:	5ce3      	ldrb	r3, [r4, r3]
 800a81e:	2b2d      	cmp	r3, #45	; 0x2d
 800a820:	d14c      	bne.n	800a8bc <_tzset_unlocked_r+0x118>
 800a822:	f04f 38ff 	mov.w	r8, #4294967295
 800a826:	3701      	adds	r7, #1
 800a828:	2400      	movs	r4, #0
 800a82a:	f10d 0a20 	add.w	sl, sp, #32
 800a82e:	f10d 0b1e 	add.w	fp, sp, #30
 800a832:	4633      	mov	r3, r6
 800a834:	4638      	mov	r0, r7
 800a836:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800a83a:	4997      	ldr	r1, [pc, #604]	; (800aa98 <_tzset_unlocked_r+0x2f4>)
 800a83c:	9603      	str	r6, [sp, #12]
 800a83e:	f8cd b000 	str.w	fp, [sp]
 800a842:	aa07      	add	r2, sp, #28
 800a844:	f8ad 401e 	strh.w	r4, [sp, #30]
 800a848:	f8ad 4020 	strh.w	r4, [sp, #32]
 800a84c:	f000 fcc4 	bl	800b1d8 <siscanf>
 800a850:	42a0      	cmp	r0, r4
 800a852:	ddc1      	ble.n	800a7d8 <_tzset_unlocked_r+0x34>
 800a854:	213c      	movs	r1, #60	; 0x3c
 800a856:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a85a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a85e:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800aa9c <_tzset_unlocked_r+0x2f8>
 800a862:	fb01 3302 	mla	r3, r1, r2, r3
 800a866:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a86a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a86e:	fb01 3302 	mla	r3, r1, r2, r3
 800a872:	fb08 f303 	mul.w	r3, r8, r3
 800a876:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800aa8c <_tzset_unlocked_r+0x2e8>
 800a87a:	62ab      	str	r3, [r5, #40]	; 0x28
 800a87c:	4b84      	ldr	r3, [pc, #528]	; (800aa90 <_tzset_unlocked_r+0x2ec>)
 800a87e:	464a      	mov	r2, r9
 800a880:	f8c8 3000 	str.w	r3, [r8]
 800a884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a886:	4983      	ldr	r1, [pc, #524]	; (800aa94 <_tzset_unlocked_r+0x2f0>)
 800a888:	441f      	add	r7, r3
 800a88a:	4638      	mov	r0, r7
 800a88c:	4633      	mov	r3, r6
 800a88e:	f000 fca3 	bl	800b1d8 <siscanf>
 800a892:	42a0      	cmp	r0, r4
 800a894:	dc18      	bgt.n	800a8c8 <_tzset_unlocked_r+0x124>
 800a896:	f8d8 3000 	ldr.w	r3, [r8]
 800a89a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a89c:	f8c8 3004 	str.w	r3, [r8, #4]
 800a8a0:	4b77      	ldr	r3, [pc, #476]	; (800aa80 <_tzset_unlocked_r+0x2dc>)
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	4b78      	ldr	r3, [pc, #480]	; (800aa88 <_tzset_unlocked_r+0x2e4>)
 800a8a6:	601c      	str	r4, [r3, #0]
 800a8a8:	e796      	b.n	800a7d8 <_tzset_unlocked_r+0x34>
 800a8aa:	f7f5 fc57 	bl	800015c <strcmp>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d198      	bne.n	800a7e4 <_tzset_unlocked_r+0x40>
 800a8b2:	e791      	b.n	800a7d8 <_tzset_unlocked_r+0x34>
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	f000 fcb9 	bl	800b22c <strcpy>
 800a8ba:	e7a0      	b.n	800a7fe <_tzset_unlocked_r+0x5a>
 800a8bc:	2b2b      	cmp	r3, #43	; 0x2b
 800a8be:	f04f 0801 	mov.w	r8, #1
 800a8c2:	bf08      	it	eq
 800a8c4:	3701      	addeq	r7, #1
 800a8c6:	e7af      	b.n	800a828 <_tzset_unlocked_r+0x84>
 800a8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ca:	f8c8 9004 	str.w	r9, [r8, #4]
 800a8ce:	18fc      	adds	r4, r7, r3
 800a8d0:	5cfb      	ldrb	r3, [r7, r3]
 800a8d2:	2b2d      	cmp	r3, #45	; 0x2d
 800a8d4:	f040 808c 	bne.w	800a9f0 <_tzset_unlocked_r+0x24c>
 800a8d8:	f04f 37ff 	mov.w	r7, #4294967295
 800a8dc:	3401      	adds	r4, #1
 800a8de:	2300      	movs	r3, #0
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a8e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a8ea:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a8ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a8f0:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a8f4:	4633      	mov	r3, r6
 800a8f6:	e9cd b600 	strd	fp, r6, [sp]
 800a8fa:	4967      	ldr	r1, [pc, #412]	; (800aa98 <_tzset_unlocked_r+0x2f4>)
 800a8fc:	aa07      	add	r2, sp, #28
 800a8fe:	f000 fc6b 	bl	800b1d8 <siscanf>
 800a902:	2800      	cmp	r0, #0
 800a904:	dc7a      	bgt.n	800a9fc <_tzset_unlocked_r+0x258>
 800a906:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a908:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800a90c:	462f      	mov	r7, r5
 800a90e:	f04f 0900 	mov.w	r9, #0
 800a912:	652b      	str	r3, [r5, #80]	; 0x50
 800a914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a916:	441c      	add	r4, r3
 800a918:	7823      	ldrb	r3, [r4, #0]
 800a91a:	2b2c      	cmp	r3, #44	; 0x2c
 800a91c:	bf08      	it	eq
 800a91e:	3401      	addeq	r4, #1
 800a920:	f894 8000 	ldrb.w	r8, [r4]
 800a924:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800a928:	d17a      	bne.n	800aa20 <_tzset_unlocked_r+0x27c>
 800a92a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800a92e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800a932:	ab09      	add	r3, sp, #36	; 0x24
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	4620      	mov	r0, r4
 800a938:	4633      	mov	r3, r6
 800a93a:	4959      	ldr	r1, [pc, #356]	; (800aaa0 <_tzset_unlocked_r+0x2fc>)
 800a93c:	9603      	str	r6, [sp, #12]
 800a93e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800a942:	f000 fc49 	bl	800b1d8 <siscanf>
 800a946:	2803      	cmp	r0, #3
 800a948:	f47f af46 	bne.w	800a7d8 <_tzset_unlocked_r+0x34>
 800a94c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800a950:	1e4b      	subs	r3, r1, #1
 800a952:	2b0b      	cmp	r3, #11
 800a954:	f63f af40 	bhi.w	800a7d8 <_tzset_unlocked_r+0x34>
 800a958:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800a95c:	1e53      	subs	r3, r2, #1
 800a95e:	2b04      	cmp	r3, #4
 800a960:	f63f af3a 	bhi.w	800a7d8 <_tzset_unlocked_r+0x34>
 800a964:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a968:	2b06      	cmp	r3, #6
 800a96a:	f63f af35 	bhi.w	800a7d8 <_tzset_unlocked_r+0x34>
 800a96e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800a972:	f887 8008 	strb.w	r8, [r7, #8]
 800a976:	617b      	str	r3, [r7, #20]
 800a978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a97a:	eb04 0803 	add.w	r8, r4, r3
 800a97e:	2302      	movs	r3, #2
 800a980:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a984:	2300      	movs	r3, #0
 800a986:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a98a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a98e:	930a      	str	r3, [sp, #40]	; 0x28
 800a990:	f898 3000 	ldrb.w	r3, [r8]
 800a994:	2b2f      	cmp	r3, #47	; 0x2f
 800a996:	d109      	bne.n	800a9ac <_tzset_unlocked_r+0x208>
 800a998:	4633      	mov	r3, r6
 800a99a:	4640      	mov	r0, r8
 800a99c:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a9a0:	e9cd b600 	strd	fp, r6, [sp]
 800a9a4:	493f      	ldr	r1, [pc, #252]	; (800aaa4 <_tzset_unlocked_r+0x300>)
 800a9a6:	aa07      	add	r2, sp, #28
 800a9a8:	f000 fc16 	bl	800b1d8 <siscanf>
 800a9ac:	213c      	movs	r1, #60	; 0x3c
 800a9ae:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a9b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a9b6:	3728      	adds	r7, #40	; 0x28
 800a9b8:	fb01 3302 	mla	r3, r1, r2, r3
 800a9bc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a9c0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a9c4:	fb01 3302 	mla	r3, r1, r2, r3
 800a9c8:	f847 3c10 	str.w	r3, [r7, #-16]
 800a9cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a9ce:	4444      	add	r4, r8
 800a9d0:	f1b9 0f00 	cmp.w	r9, #0
 800a9d4:	d021      	beq.n	800aa1a <_tzset_unlocked_r+0x276>
 800a9d6:	6868      	ldr	r0, [r5, #4]
 800a9d8:	f000 fc44 	bl	800b264 <__tzcalc_limits>
 800a9dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a9de:	4b28      	ldr	r3, [pc, #160]	; (800aa80 <_tzset_unlocked_r+0x2dc>)
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	bf18      	it	ne
 800a9e8:	2301      	movne	r3, #1
 800a9ea:	4a27      	ldr	r2, [pc, #156]	; (800aa88 <_tzset_unlocked_r+0x2e4>)
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	e6f3      	b.n	800a7d8 <_tzset_unlocked_r+0x34>
 800a9f0:	2b2b      	cmp	r3, #43	; 0x2b
 800a9f2:	f04f 0701 	mov.w	r7, #1
 800a9f6:	bf08      	it	eq
 800a9f8:	3401      	addeq	r4, #1
 800a9fa:	e770      	b.n	800a8de <_tzset_unlocked_r+0x13a>
 800a9fc:	213c      	movs	r1, #60	; 0x3c
 800a9fe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800aa02:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800aa06:	fb01 3302 	mla	r3, r1, r2, r3
 800aa0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800aa0e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800aa12:	fb01 3302 	mla	r3, r1, r2, r3
 800aa16:	437b      	muls	r3, r7
 800aa18:	e778      	b.n	800a90c <_tzset_unlocked_r+0x168>
 800aa1a:	f04f 0901 	mov.w	r9, #1
 800aa1e:	e77b      	b.n	800a918 <_tzset_unlocked_r+0x174>
 800aa20:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800aa24:	bf0a      	itet	eq
 800aa26:	4643      	moveq	r3, r8
 800aa28:	2344      	movne	r3, #68	; 0x44
 800aa2a:	3401      	addeq	r4, #1
 800aa2c:	220a      	movs	r2, #10
 800aa2e:	4620      	mov	r0, r4
 800aa30:	a90b      	add	r1, sp, #44	; 0x2c
 800aa32:	9305      	str	r3, [sp, #20]
 800aa34:	f7ff fe9a 	bl	800a76c <strtoul>
 800aa38:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800aa3c:	9b05      	ldr	r3, [sp, #20]
 800aa3e:	45a0      	cmp	r8, r4
 800aa40:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800aa44:	d114      	bne.n	800aa70 <_tzset_unlocked_r+0x2cc>
 800aa46:	234d      	movs	r3, #77	; 0x4d
 800aa48:	f1b9 0f00 	cmp.w	r9, #0
 800aa4c:	d107      	bne.n	800aa5e <_tzset_unlocked_r+0x2ba>
 800aa4e:	2103      	movs	r1, #3
 800aa50:	722b      	strb	r3, [r5, #8]
 800aa52:	2302      	movs	r3, #2
 800aa54:	f8c5 9014 	str.w	r9, [r5, #20]
 800aa58:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800aa5c:	e78f      	b.n	800a97e <_tzset_unlocked_r+0x1da>
 800aa5e:	220b      	movs	r2, #11
 800aa60:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800aa64:	2301      	movs	r3, #1
 800aa66:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800aa6e:	e786      	b.n	800a97e <_tzset_unlocked_r+0x1da>
 800aa70:	b280      	uxth	r0, r0
 800aa72:	723b      	strb	r3, [r7, #8]
 800aa74:	6178      	str	r0, [r7, #20]
 800aa76:	e782      	b.n	800a97e <_tzset_unlocked_r+0x1da>
 800aa78:	0800c3b8 	.word	0x0800c3b8
 800aa7c:	20000714 	.word	0x20000714
 800aa80:	2000071c 	.word	0x2000071c
 800aa84:	0800c3bb 	.word	0x0800c3bb
 800aa88:	20000718 	.word	0x20000718
 800aa8c:	2000016c 	.word	0x2000016c
 800aa90:	20000707 	.word	0x20000707
 800aa94:	0800c3bf 	.word	0x0800c3bf
 800aa98:	0800c3e2 	.word	0x0800c3e2
 800aa9c:	200006fc 	.word	0x200006fc
 800aaa0:	0800c3ce 	.word	0x0800c3ce
 800aaa4:	0800c3e1 	.word	0x0800c3e1

0800aaa8 <abs>:
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	bfb8      	it	lt
 800aaac:	4240      	neglt	r0, r0
 800aaae:	4770      	bx	lr

0800aab0 <_findenv_r>:
 800aab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800ab24 <_findenv_r+0x74>
 800aab8:	4607      	mov	r7, r0
 800aaba:	4689      	mov	r9, r1
 800aabc:	4616      	mov	r6, r2
 800aabe:	f000 fc7b 	bl	800b3b8 <__env_lock>
 800aac2:	f8da 4000 	ldr.w	r4, [sl]
 800aac6:	b134      	cbz	r4, 800aad6 <_findenv_r+0x26>
 800aac8:	464b      	mov	r3, r9
 800aaca:	4698      	mov	r8, r3
 800aacc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aad0:	b13a      	cbz	r2, 800aae2 <_findenv_r+0x32>
 800aad2:	2a3d      	cmp	r2, #61	; 0x3d
 800aad4:	d1f9      	bne.n	800aaca <_findenv_r+0x1a>
 800aad6:	4638      	mov	r0, r7
 800aad8:	f000 fc74 	bl	800b3c4 <__env_unlock>
 800aadc:	2000      	movs	r0, #0
 800aade:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae2:	eba8 0809 	sub.w	r8, r8, r9
 800aae6:	46a3      	mov	fp, r4
 800aae8:	f854 0b04 	ldr.w	r0, [r4], #4
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d0f2      	beq.n	800aad6 <_findenv_r+0x26>
 800aaf0:	4642      	mov	r2, r8
 800aaf2:	4649      	mov	r1, r9
 800aaf4:	f000 fba2 	bl	800b23c <strncmp>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d1f4      	bne.n	800aae6 <_findenv_r+0x36>
 800aafc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ab00:	eb03 0508 	add.w	r5, r3, r8
 800ab04:	f813 3008 	ldrb.w	r3, [r3, r8]
 800ab08:	2b3d      	cmp	r3, #61	; 0x3d
 800ab0a:	d1ec      	bne.n	800aae6 <_findenv_r+0x36>
 800ab0c:	f8da 3000 	ldr.w	r3, [sl]
 800ab10:	4638      	mov	r0, r7
 800ab12:	ebab 0303 	sub.w	r3, fp, r3
 800ab16:	109b      	asrs	r3, r3, #2
 800ab18:	6033      	str	r3, [r6, #0]
 800ab1a:	f000 fc53 	bl	800b3c4 <__env_unlock>
 800ab1e:	1c68      	adds	r0, r5, #1
 800ab20:	e7dd      	b.n	800aade <_findenv_r+0x2e>
 800ab22:	bf00      	nop
 800ab24:	200000e4 	.word	0x200000e4

0800ab28 <_getenv_r>:
 800ab28:	b507      	push	{r0, r1, r2, lr}
 800ab2a:	aa01      	add	r2, sp, #4
 800ab2c:	f7ff ffc0 	bl	800aab0 <_findenv_r>
 800ab30:	b003      	add	sp, #12
 800ab32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ab38 <__gettzinfo>:
 800ab38:	4800      	ldr	r0, [pc, #0]	; (800ab3c <__gettzinfo+0x4>)
 800ab3a:	4770      	bx	lr
 800ab3c:	20000178 	.word	0x20000178

0800ab40 <labs>:
 800ab40:	2800      	cmp	r0, #0
 800ab42:	bfb8      	it	lt
 800ab44:	4240      	neglt	r0, r0
 800ab46:	4770      	bx	lr

0800ab48 <free>:
 800ab48:	4b02      	ldr	r3, [pc, #8]	; (800ab54 <free+0xc>)
 800ab4a:	4601      	mov	r1, r0
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	f7fe becd 	b.w	80098ec <_free_r>
 800ab52:	bf00      	nop
 800ab54:	20000108 	.word	0x20000108

0800ab58 <memcpy>:
 800ab58:	440a      	add	r2, r1
 800ab5a:	4291      	cmp	r1, r2
 800ab5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab60:	d100      	bne.n	800ab64 <memcpy+0xc>
 800ab62:	4770      	bx	lr
 800ab64:	b510      	push	{r4, lr}
 800ab66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab6a:	4291      	cmp	r1, r2
 800ab6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab70:	d1f9      	bne.n	800ab66 <memcpy+0xe>
 800ab72:	bd10      	pop	{r4, pc}

0800ab74 <__malloc_lock>:
 800ab74:	4801      	ldr	r0, [pc, #4]	; (800ab7c <__malloc_lock+0x8>)
 800ab76:	f7fe beae 	b.w	80098d6 <__retarget_lock_acquire_recursive>
 800ab7a:	bf00      	nop
 800ab7c:	200006ed 	.word	0x200006ed

0800ab80 <__malloc_unlock>:
 800ab80:	4801      	ldr	r0, [pc, #4]	; (800ab88 <__malloc_unlock+0x8>)
 800ab82:	f7fe beaa 	b.w	80098da <__retarget_lock_release_recursive>
 800ab86:	bf00      	nop
 800ab88:	200006ed 	.word	0x200006ed

0800ab8c <__ssputs_r>:
 800ab8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab90:	688e      	ldr	r6, [r1, #8]
 800ab92:	4682      	mov	sl, r0
 800ab94:	429e      	cmp	r6, r3
 800ab96:	460c      	mov	r4, r1
 800ab98:	4690      	mov	r8, r2
 800ab9a:	461f      	mov	r7, r3
 800ab9c:	d838      	bhi.n	800ac10 <__ssputs_r+0x84>
 800ab9e:	898a      	ldrh	r2, [r1, #12]
 800aba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aba4:	d032      	beq.n	800ac0c <__ssputs_r+0x80>
 800aba6:	6825      	ldr	r5, [r4, #0]
 800aba8:	6909      	ldr	r1, [r1, #16]
 800abaa:	3301      	adds	r3, #1
 800abac:	eba5 0901 	sub.w	r9, r5, r1
 800abb0:	6965      	ldr	r5, [r4, #20]
 800abb2:	444b      	add	r3, r9
 800abb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abbc:	106d      	asrs	r5, r5, #1
 800abbe:	429d      	cmp	r5, r3
 800abc0:	bf38      	it	cc
 800abc2:	461d      	movcc	r5, r3
 800abc4:	0553      	lsls	r3, r2, #21
 800abc6:	d531      	bpl.n	800ac2c <__ssputs_r+0xa0>
 800abc8:	4629      	mov	r1, r5
 800abca:	f7fe fef7 	bl	80099bc <_malloc_r>
 800abce:	4606      	mov	r6, r0
 800abd0:	b950      	cbnz	r0, 800abe8 <__ssputs_r+0x5c>
 800abd2:	230c      	movs	r3, #12
 800abd4:	f04f 30ff 	mov.w	r0, #4294967295
 800abd8:	f8ca 3000 	str.w	r3, [sl]
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abe2:	81a3      	strh	r3, [r4, #12]
 800abe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abe8:	464a      	mov	r2, r9
 800abea:	6921      	ldr	r1, [r4, #16]
 800abec:	f7ff ffb4 	bl	800ab58 <memcpy>
 800abf0:	89a3      	ldrh	r3, [r4, #12]
 800abf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abfa:	81a3      	strh	r3, [r4, #12]
 800abfc:	6126      	str	r6, [r4, #16]
 800abfe:	444e      	add	r6, r9
 800ac00:	6026      	str	r6, [r4, #0]
 800ac02:	463e      	mov	r6, r7
 800ac04:	6165      	str	r5, [r4, #20]
 800ac06:	eba5 0509 	sub.w	r5, r5, r9
 800ac0a:	60a5      	str	r5, [r4, #8]
 800ac0c:	42be      	cmp	r6, r7
 800ac0e:	d900      	bls.n	800ac12 <__ssputs_r+0x86>
 800ac10:	463e      	mov	r6, r7
 800ac12:	4632      	mov	r2, r6
 800ac14:	4641      	mov	r1, r8
 800ac16:	6820      	ldr	r0, [r4, #0]
 800ac18:	f000 fbe8 	bl	800b3ec <memmove>
 800ac1c:	68a3      	ldr	r3, [r4, #8]
 800ac1e:	2000      	movs	r0, #0
 800ac20:	1b9b      	subs	r3, r3, r6
 800ac22:	60a3      	str	r3, [r4, #8]
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	4433      	add	r3, r6
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	e7db      	b.n	800abe4 <__ssputs_r+0x58>
 800ac2c:	462a      	mov	r2, r5
 800ac2e:	f000 fbf7 	bl	800b420 <_realloc_r>
 800ac32:	4606      	mov	r6, r0
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d1e1      	bne.n	800abfc <__ssputs_r+0x70>
 800ac38:	4650      	mov	r0, sl
 800ac3a:	6921      	ldr	r1, [r4, #16]
 800ac3c:	f7fe fe56 	bl	80098ec <_free_r>
 800ac40:	e7c7      	b.n	800abd2 <__ssputs_r+0x46>
	...

0800ac44 <_svfiprintf_r>:
 800ac44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac48:	4698      	mov	r8, r3
 800ac4a:	898b      	ldrh	r3, [r1, #12]
 800ac4c:	4607      	mov	r7, r0
 800ac4e:	061b      	lsls	r3, r3, #24
 800ac50:	460d      	mov	r5, r1
 800ac52:	4614      	mov	r4, r2
 800ac54:	b09d      	sub	sp, #116	; 0x74
 800ac56:	d50e      	bpl.n	800ac76 <_svfiprintf_r+0x32>
 800ac58:	690b      	ldr	r3, [r1, #16]
 800ac5a:	b963      	cbnz	r3, 800ac76 <_svfiprintf_r+0x32>
 800ac5c:	2140      	movs	r1, #64	; 0x40
 800ac5e:	f7fe fead 	bl	80099bc <_malloc_r>
 800ac62:	6028      	str	r0, [r5, #0]
 800ac64:	6128      	str	r0, [r5, #16]
 800ac66:	b920      	cbnz	r0, 800ac72 <_svfiprintf_r+0x2e>
 800ac68:	230c      	movs	r3, #12
 800ac6a:	603b      	str	r3, [r7, #0]
 800ac6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac70:	e0d1      	b.n	800ae16 <_svfiprintf_r+0x1d2>
 800ac72:	2340      	movs	r3, #64	; 0x40
 800ac74:	616b      	str	r3, [r5, #20]
 800ac76:	2300      	movs	r3, #0
 800ac78:	9309      	str	r3, [sp, #36]	; 0x24
 800ac7a:	2320      	movs	r3, #32
 800ac7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac80:	2330      	movs	r3, #48	; 0x30
 800ac82:	f04f 0901 	mov.w	r9, #1
 800ac86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ae30 <_svfiprintf_r+0x1ec>
 800ac8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac92:	4623      	mov	r3, r4
 800ac94:	469a      	mov	sl, r3
 800ac96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac9a:	b10a      	cbz	r2, 800aca0 <_svfiprintf_r+0x5c>
 800ac9c:	2a25      	cmp	r2, #37	; 0x25
 800ac9e:	d1f9      	bne.n	800ac94 <_svfiprintf_r+0x50>
 800aca0:	ebba 0b04 	subs.w	fp, sl, r4
 800aca4:	d00b      	beq.n	800acbe <_svfiprintf_r+0x7a>
 800aca6:	465b      	mov	r3, fp
 800aca8:	4622      	mov	r2, r4
 800acaa:	4629      	mov	r1, r5
 800acac:	4638      	mov	r0, r7
 800acae:	f7ff ff6d 	bl	800ab8c <__ssputs_r>
 800acb2:	3001      	adds	r0, #1
 800acb4:	f000 80aa 	beq.w	800ae0c <_svfiprintf_r+0x1c8>
 800acb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acba:	445a      	add	r2, fp
 800acbc:	9209      	str	r2, [sp, #36]	; 0x24
 800acbe:	f89a 3000 	ldrb.w	r3, [sl]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 80a2 	beq.w	800ae0c <_svfiprintf_r+0x1c8>
 800acc8:	2300      	movs	r3, #0
 800acca:	f04f 32ff 	mov.w	r2, #4294967295
 800acce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acd2:	f10a 0a01 	add.w	sl, sl, #1
 800acd6:	9304      	str	r3, [sp, #16]
 800acd8:	9307      	str	r3, [sp, #28]
 800acda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acde:	931a      	str	r3, [sp, #104]	; 0x68
 800ace0:	4654      	mov	r4, sl
 800ace2:	2205      	movs	r2, #5
 800ace4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace8:	4851      	ldr	r0, [pc, #324]	; (800ae30 <_svfiprintf_r+0x1ec>)
 800acea:	f000 fb71 	bl	800b3d0 <memchr>
 800acee:	9a04      	ldr	r2, [sp, #16]
 800acf0:	b9d8      	cbnz	r0, 800ad2a <_svfiprintf_r+0xe6>
 800acf2:	06d0      	lsls	r0, r2, #27
 800acf4:	bf44      	itt	mi
 800acf6:	2320      	movmi	r3, #32
 800acf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acfc:	0711      	lsls	r1, r2, #28
 800acfe:	bf44      	itt	mi
 800ad00:	232b      	movmi	r3, #43	; 0x2b
 800ad02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad06:	f89a 3000 	ldrb.w	r3, [sl]
 800ad0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad0c:	d015      	beq.n	800ad3a <_svfiprintf_r+0xf6>
 800ad0e:	4654      	mov	r4, sl
 800ad10:	2000      	movs	r0, #0
 800ad12:	f04f 0c0a 	mov.w	ip, #10
 800ad16:	9a07      	ldr	r2, [sp, #28]
 800ad18:	4621      	mov	r1, r4
 800ad1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad1e:	3b30      	subs	r3, #48	; 0x30
 800ad20:	2b09      	cmp	r3, #9
 800ad22:	d94e      	bls.n	800adc2 <_svfiprintf_r+0x17e>
 800ad24:	b1b0      	cbz	r0, 800ad54 <_svfiprintf_r+0x110>
 800ad26:	9207      	str	r2, [sp, #28]
 800ad28:	e014      	b.n	800ad54 <_svfiprintf_r+0x110>
 800ad2a:	eba0 0308 	sub.w	r3, r0, r8
 800ad2e:	fa09 f303 	lsl.w	r3, r9, r3
 800ad32:	4313      	orrs	r3, r2
 800ad34:	46a2      	mov	sl, r4
 800ad36:	9304      	str	r3, [sp, #16]
 800ad38:	e7d2      	b.n	800ace0 <_svfiprintf_r+0x9c>
 800ad3a:	9b03      	ldr	r3, [sp, #12]
 800ad3c:	1d19      	adds	r1, r3, #4
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	9103      	str	r1, [sp, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	bfbb      	ittet	lt
 800ad46:	425b      	neglt	r3, r3
 800ad48:	f042 0202 	orrlt.w	r2, r2, #2
 800ad4c:	9307      	strge	r3, [sp, #28]
 800ad4e:	9307      	strlt	r3, [sp, #28]
 800ad50:	bfb8      	it	lt
 800ad52:	9204      	strlt	r2, [sp, #16]
 800ad54:	7823      	ldrb	r3, [r4, #0]
 800ad56:	2b2e      	cmp	r3, #46	; 0x2e
 800ad58:	d10c      	bne.n	800ad74 <_svfiprintf_r+0x130>
 800ad5a:	7863      	ldrb	r3, [r4, #1]
 800ad5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad5e:	d135      	bne.n	800adcc <_svfiprintf_r+0x188>
 800ad60:	9b03      	ldr	r3, [sp, #12]
 800ad62:	3402      	adds	r4, #2
 800ad64:	1d1a      	adds	r2, r3, #4
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	9203      	str	r2, [sp, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	bfb8      	it	lt
 800ad6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad72:	9305      	str	r3, [sp, #20]
 800ad74:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ae34 <_svfiprintf_r+0x1f0>
 800ad78:	2203      	movs	r2, #3
 800ad7a:	4650      	mov	r0, sl
 800ad7c:	7821      	ldrb	r1, [r4, #0]
 800ad7e:	f000 fb27 	bl	800b3d0 <memchr>
 800ad82:	b140      	cbz	r0, 800ad96 <_svfiprintf_r+0x152>
 800ad84:	2340      	movs	r3, #64	; 0x40
 800ad86:	eba0 000a 	sub.w	r0, r0, sl
 800ad8a:	fa03 f000 	lsl.w	r0, r3, r0
 800ad8e:	9b04      	ldr	r3, [sp, #16]
 800ad90:	3401      	adds	r4, #1
 800ad92:	4303      	orrs	r3, r0
 800ad94:	9304      	str	r3, [sp, #16]
 800ad96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad9a:	2206      	movs	r2, #6
 800ad9c:	4826      	ldr	r0, [pc, #152]	; (800ae38 <_svfiprintf_r+0x1f4>)
 800ad9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ada2:	f000 fb15 	bl	800b3d0 <memchr>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d038      	beq.n	800ae1c <_svfiprintf_r+0x1d8>
 800adaa:	4b24      	ldr	r3, [pc, #144]	; (800ae3c <_svfiprintf_r+0x1f8>)
 800adac:	bb1b      	cbnz	r3, 800adf6 <_svfiprintf_r+0x1b2>
 800adae:	9b03      	ldr	r3, [sp, #12]
 800adb0:	3307      	adds	r3, #7
 800adb2:	f023 0307 	bic.w	r3, r3, #7
 800adb6:	3308      	adds	r3, #8
 800adb8:	9303      	str	r3, [sp, #12]
 800adba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adbc:	4433      	add	r3, r6
 800adbe:	9309      	str	r3, [sp, #36]	; 0x24
 800adc0:	e767      	b.n	800ac92 <_svfiprintf_r+0x4e>
 800adc2:	460c      	mov	r4, r1
 800adc4:	2001      	movs	r0, #1
 800adc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800adca:	e7a5      	b.n	800ad18 <_svfiprintf_r+0xd4>
 800adcc:	2300      	movs	r3, #0
 800adce:	f04f 0c0a 	mov.w	ip, #10
 800add2:	4619      	mov	r1, r3
 800add4:	3401      	adds	r4, #1
 800add6:	9305      	str	r3, [sp, #20]
 800add8:	4620      	mov	r0, r4
 800adda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adde:	3a30      	subs	r2, #48	; 0x30
 800ade0:	2a09      	cmp	r2, #9
 800ade2:	d903      	bls.n	800adec <_svfiprintf_r+0x1a8>
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d0c5      	beq.n	800ad74 <_svfiprintf_r+0x130>
 800ade8:	9105      	str	r1, [sp, #20]
 800adea:	e7c3      	b.n	800ad74 <_svfiprintf_r+0x130>
 800adec:	4604      	mov	r4, r0
 800adee:	2301      	movs	r3, #1
 800adf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800adf4:	e7f0      	b.n	800add8 <_svfiprintf_r+0x194>
 800adf6:	ab03      	add	r3, sp, #12
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	462a      	mov	r2, r5
 800adfc:	4638      	mov	r0, r7
 800adfe:	4b10      	ldr	r3, [pc, #64]	; (800ae40 <_svfiprintf_r+0x1fc>)
 800ae00:	a904      	add	r1, sp, #16
 800ae02:	f3af 8000 	nop.w
 800ae06:	1c42      	adds	r2, r0, #1
 800ae08:	4606      	mov	r6, r0
 800ae0a:	d1d6      	bne.n	800adba <_svfiprintf_r+0x176>
 800ae0c:	89ab      	ldrh	r3, [r5, #12]
 800ae0e:	065b      	lsls	r3, r3, #25
 800ae10:	f53f af2c 	bmi.w	800ac6c <_svfiprintf_r+0x28>
 800ae14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae16:	b01d      	add	sp, #116	; 0x74
 800ae18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1c:	ab03      	add	r3, sp, #12
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	462a      	mov	r2, r5
 800ae22:	4638      	mov	r0, r7
 800ae24:	4b06      	ldr	r3, [pc, #24]	; (800ae40 <_svfiprintf_r+0x1fc>)
 800ae26:	a904      	add	r1, sp, #16
 800ae28:	f000 f87c 	bl	800af24 <_printf_i>
 800ae2c:	e7eb      	b.n	800ae06 <_svfiprintf_r+0x1c2>
 800ae2e:	bf00      	nop
 800ae30:	0800c4f5 	.word	0x0800c4f5
 800ae34:	0800c4fb 	.word	0x0800c4fb
 800ae38:	0800c4ff 	.word	0x0800c4ff
 800ae3c:	00000000 	.word	0x00000000
 800ae40:	0800ab8d 	.word	0x0800ab8d

0800ae44 <_printf_common>:
 800ae44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae48:	4616      	mov	r6, r2
 800ae4a:	4699      	mov	r9, r3
 800ae4c:	688a      	ldr	r2, [r1, #8]
 800ae4e:	690b      	ldr	r3, [r1, #16]
 800ae50:	4607      	mov	r7, r0
 800ae52:	4293      	cmp	r3, r2
 800ae54:	bfb8      	it	lt
 800ae56:	4613      	movlt	r3, r2
 800ae58:	6033      	str	r3, [r6, #0]
 800ae5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae5e:	460c      	mov	r4, r1
 800ae60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae64:	b10a      	cbz	r2, 800ae6a <_printf_common+0x26>
 800ae66:	3301      	adds	r3, #1
 800ae68:	6033      	str	r3, [r6, #0]
 800ae6a:	6823      	ldr	r3, [r4, #0]
 800ae6c:	0699      	lsls	r1, r3, #26
 800ae6e:	bf42      	ittt	mi
 800ae70:	6833      	ldrmi	r3, [r6, #0]
 800ae72:	3302      	addmi	r3, #2
 800ae74:	6033      	strmi	r3, [r6, #0]
 800ae76:	6825      	ldr	r5, [r4, #0]
 800ae78:	f015 0506 	ands.w	r5, r5, #6
 800ae7c:	d106      	bne.n	800ae8c <_printf_common+0x48>
 800ae7e:	f104 0a19 	add.w	sl, r4, #25
 800ae82:	68e3      	ldr	r3, [r4, #12]
 800ae84:	6832      	ldr	r2, [r6, #0]
 800ae86:	1a9b      	subs	r3, r3, r2
 800ae88:	42ab      	cmp	r3, r5
 800ae8a:	dc28      	bgt.n	800aede <_printf_common+0x9a>
 800ae8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae90:	1e13      	subs	r3, r2, #0
 800ae92:	6822      	ldr	r2, [r4, #0]
 800ae94:	bf18      	it	ne
 800ae96:	2301      	movne	r3, #1
 800ae98:	0692      	lsls	r2, r2, #26
 800ae9a:	d42d      	bmi.n	800aef8 <_printf_common+0xb4>
 800ae9c:	4649      	mov	r1, r9
 800ae9e:	4638      	mov	r0, r7
 800aea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aea4:	47c0      	blx	r8
 800aea6:	3001      	adds	r0, #1
 800aea8:	d020      	beq.n	800aeec <_printf_common+0xa8>
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	68e5      	ldr	r5, [r4, #12]
 800aeae:	f003 0306 	and.w	r3, r3, #6
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	bf18      	it	ne
 800aeb6:	2500      	movne	r5, #0
 800aeb8:	6832      	ldr	r2, [r6, #0]
 800aeba:	f04f 0600 	mov.w	r6, #0
 800aebe:	68a3      	ldr	r3, [r4, #8]
 800aec0:	bf08      	it	eq
 800aec2:	1aad      	subeq	r5, r5, r2
 800aec4:	6922      	ldr	r2, [r4, #16]
 800aec6:	bf08      	it	eq
 800aec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aecc:	4293      	cmp	r3, r2
 800aece:	bfc4      	itt	gt
 800aed0:	1a9b      	subgt	r3, r3, r2
 800aed2:	18ed      	addgt	r5, r5, r3
 800aed4:	341a      	adds	r4, #26
 800aed6:	42b5      	cmp	r5, r6
 800aed8:	d11a      	bne.n	800af10 <_printf_common+0xcc>
 800aeda:	2000      	movs	r0, #0
 800aedc:	e008      	b.n	800aef0 <_printf_common+0xac>
 800aede:	2301      	movs	r3, #1
 800aee0:	4652      	mov	r2, sl
 800aee2:	4649      	mov	r1, r9
 800aee4:	4638      	mov	r0, r7
 800aee6:	47c0      	blx	r8
 800aee8:	3001      	adds	r0, #1
 800aeea:	d103      	bne.n	800aef4 <_printf_common+0xb0>
 800aeec:	f04f 30ff 	mov.w	r0, #4294967295
 800aef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef4:	3501      	adds	r5, #1
 800aef6:	e7c4      	b.n	800ae82 <_printf_common+0x3e>
 800aef8:	2030      	movs	r0, #48	; 0x30
 800aefa:	18e1      	adds	r1, r4, r3
 800aefc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af00:	1c5a      	adds	r2, r3, #1
 800af02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af06:	4422      	add	r2, r4
 800af08:	3302      	adds	r3, #2
 800af0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af0e:	e7c5      	b.n	800ae9c <_printf_common+0x58>
 800af10:	2301      	movs	r3, #1
 800af12:	4622      	mov	r2, r4
 800af14:	4649      	mov	r1, r9
 800af16:	4638      	mov	r0, r7
 800af18:	47c0      	blx	r8
 800af1a:	3001      	adds	r0, #1
 800af1c:	d0e6      	beq.n	800aeec <_printf_common+0xa8>
 800af1e:	3601      	adds	r6, #1
 800af20:	e7d9      	b.n	800aed6 <_printf_common+0x92>
	...

0800af24 <_printf_i>:
 800af24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af28:	7e0f      	ldrb	r7, [r1, #24]
 800af2a:	4691      	mov	r9, r2
 800af2c:	2f78      	cmp	r7, #120	; 0x78
 800af2e:	4680      	mov	r8, r0
 800af30:	460c      	mov	r4, r1
 800af32:	469a      	mov	sl, r3
 800af34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af3a:	d807      	bhi.n	800af4c <_printf_i+0x28>
 800af3c:	2f62      	cmp	r7, #98	; 0x62
 800af3e:	d80a      	bhi.n	800af56 <_printf_i+0x32>
 800af40:	2f00      	cmp	r7, #0
 800af42:	f000 80d9 	beq.w	800b0f8 <_printf_i+0x1d4>
 800af46:	2f58      	cmp	r7, #88	; 0x58
 800af48:	f000 80a4 	beq.w	800b094 <_printf_i+0x170>
 800af4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af54:	e03a      	b.n	800afcc <_printf_i+0xa8>
 800af56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af5a:	2b15      	cmp	r3, #21
 800af5c:	d8f6      	bhi.n	800af4c <_printf_i+0x28>
 800af5e:	a101      	add	r1, pc, #4	; (adr r1, 800af64 <_printf_i+0x40>)
 800af60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af64:	0800afbd 	.word	0x0800afbd
 800af68:	0800afd1 	.word	0x0800afd1
 800af6c:	0800af4d 	.word	0x0800af4d
 800af70:	0800af4d 	.word	0x0800af4d
 800af74:	0800af4d 	.word	0x0800af4d
 800af78:	0800af4d 	.word	0x0800af4d
 800af7c:	0800afd1 	.word	0x0800afd1
 800af80:	0800af4d 	.word	0x0800af4d
 800af84:	0800af4d 	.word	0x0800af4d
 800af88:	0800af4d 	.word	0x0800af4d
 800af8c:	0800af4d 	.word	0x0800af4d
 800af90:	0800b0df 	.word	0x0800b0df
 800af94:	0800b001 	.word	0x0800b001
 800af98:	0800b0c1 	.word	0x0800b0c1
 800af9c:	0800af4d 	.word	0x0800af4d
 800afa0:	0800af4d 	.word	0x0800af4d
 800afa4:	0800b101 	.word	0x0800b101
 800afa8:	0800af4d 	.word	0x0800af4d
 800afac:	0800b001 	.word	0x0800b001
 800afb0:	0800af4d 	.word	0x0800af4d
 800afb4:	0800af4d 	.word	0x0800af4d
 800afb8:	0800b0c9 	.word	0x0800b0c9
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	1d1a      	adds	r2, r3, #4
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	602a      	str	r2, [r5, #0]
 800afc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afcc:	2301      	movs	r3, #1
 800afce:	e0a4      	b.n	800b11a <_printf_i+0x1f6>
 800afd0:	6820      	ldr	r0, [r4, #0]
 800afd2:	6829      	ldr	r1, [r5, #0]
 800afd4:	0606      	lsls	r6, r0, #24
 800afd6:	f101 0304 	add.w	r3, r1, #4
 800afda:	d50a      	bpl.n	800aff2 <_printf_i+0xce>
 800afdc:	680e      	ldr	r6, [r1, #0]
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	2e00      	cmp	r6, #0
 800afe2:	da03      	bge.n	800afec <_printf_i+0xc8>
 800afe4:	232d      	movs	r3, #45	; 0x2d
 800afe6:	4276      	negs	r6, r6
 800afe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afec:	230a      	movs	r3, #10
 800afee:	485e      	ldr	r0, [pc, #376]	; (800b168 <_printf_i+0x244>)
 800aff0:	e019      	b.n	800b026 <_printf_i+0x102>
 800aff2:	680e      	ldr	r6, [r1, #0]
 800aff4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aff8:	602b      	str	r3, [r5, #0]
 800affa:	bf18      	it	ne
 800affc:	b236      	sxthne	r6, r6
 800affe:	e7ef      	b.n	800afe0 <_printf_i+0xbc>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	6820      	ldr	r0, [r4, #0]
 800b004:	1d19      	adds	r1, r3, #4
 800b006:	6029      	str	r1, [r5, #0]
 800b008:	0601      	lsls	r1, r0, #24
 800b00a:	d501      	bpl.n	800b010 <_printf_i+0xec>
 800b00c:	681e      	ldr	r6, [r3, #0]
 800b00e:	e002      	b.n	800b016 <_printf_i+0xf2>
 800b010:	0646      	lsls	r6, r0, #25
 800b012:	d5fb      	bpl.n	800b00c <_printf_i+0xe8>
 800b014:	881e      	ldrh	r6, [r3, #0]
 800b016:	2f6f      	cmp	r7, #111	; 0x6f
 800b018:	bf0c      	ite	eq
 800b01a:	2308      	moveq	r3, #8
 800b01c:	230a      	movne	r3, #10
 800b01e:	4852      	ldr	r0, [pc, #328]	; (800b168 <_printf_i+0x244>)
 800b020:	2100      	movs	r1, #0
 800b022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b026:	6865      	ldr	r5, [r4, #4]
 800b028:	2d00      	cmp	r5, #0
 800b02a:	bfa8      	it	ge
 800b02c:	6821      	ldrge	r1, [r4, #0]
 800b02e:	60a5      	str	r5, [r4, #8]
 800b030:	bfa4      	itt	ge
 800b032:	f021 0104 	bicge.w	r1, r1, #4
 800b036:	6021      	strge	r1, [r4, #0]
 800b038:	b90e      	cbnz	r6, 800b03e <_printf_i+0x11a>
 800b03a:	2d00      	cmp	r5, #0
 800b03c:	d04d      	beq.n	800b0da <_printf_i+0x1b6>
 800b03e:	4615      	mov	r5, r2
 800b040:	fbb6 f1f3 	udiv	r1, r6, r3
 800b044:	fb03 6711 	mls	r7, r3, r1, r6
 800b048:	5dc7      	ldrb	r7, [r0, r7]
 800b04a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b04e:	4637      	mov	r7, r6
 800b050:	42bb      	cmp	r3, r7
 800b052:	460e      	mov	r6, r1
 800b054:	d9f4      	bls.n	800b040 <_printf_i+0x11c>
 800b056:	2b08      	cmp	r3, #8
 800b058:	d10b      	bne.n	800b072 <_printf_i+0x14e>
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	07de      	lsls	r6, r3, #31
 800b05e:	d508      	bpl.n	800b072 <_printf_i+0x14e>
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	6861      	ldr	r1, [r4, #4]
 800b064:	4299      	cmp	r1, r3
 800b066:	bfde      	ittt	le
 800b068:	2330      	movle	r3, #48	; 0x30
 800b06a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b06e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b072:	1b52      	subs	r2, r2, r5
 800b074:	6122      	str	r2, [r4, #16]
 800b076:	464b      	mov	r3, r9
 800b078:	4621      	mov	r1, r4
 800b07a:	4640      	mov	r0, r8
 800b07c:	f8cd a000 	str.w	sl, [sp]
 800b080:	aa03      	add	r2, sp, #12
 800b082:	f7ff fedf 	bl	800ae44 <_printf_common>
 800b086:	3001      	adds	r0, #1
 800b088:	d14c      	bne.n	800b124 <_printf_i+0x200>
 800b08a:	f04f 30ff 	mov.w	r0, #4294967295
 800b08e:	b004      	add	sp, #16
 800b090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b094:	4834      	ldr	r0, [pc, #208]	; (800b168 <_printf_i+0x244>)
 800b096:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b09a:	6829      	ldr	r1, [r5, #0]
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0a2:	6029      	str	r1, [r5, #0]
 800b0a4:	061d      	lsls	r5, r3, #24
 800b0a6:	d514      	bpl.n	800b0d2 <_printf_i+0x1ae>
 800b0a8:	07df      	lsls	r7, r3, #31
 800b0aa:	bf44      	itt	mi
 800b0ac:	f043 0320 	orrmi.w	r3, r3, #32
 800b0b0:	6023      	strmi	r3, [r4, #0]
 800b0b2:	b91e      	cbnz	r6, 800b0bc <_printf_i+0x198>
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	f023 0320 	bic.w	r3, r3, #32
 800b0ba:	6023      	str	r3, [r4, #0]
 800b0bc:	2310      	movs	r3, #16
 800b0be:	e7af      	b.n	800b020 <_printf_i+0xfc>
 800b0c0:	6823      	ldr	r3, [r4, #0]
 800b0c2:	f043 0320 	orr.w	r3, r3, #32
 800b0c6:	6023      	str	r3, [r4, #0]
 800b0c8:	2378      	movs	r3, #120	; 0x78
 800b0ca:	4828      	ldr	r0, [pc, #160]	; (800b16c <_printf_i+0x248>)
 800b0cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0d0:	e7e3      	b.n	800b09a <_printf_i+0x176>
 800b0d2:	0659      	lsls	r1, r3, #25
 800b0d4:	bf48      	it	mi
 800b0d6:	b2b6      	uxthmi	r6, r6
 800b0d8:	e7e6      	b.n	800b0a8 <_printf_i+0x184>
 800b0da:	4615      	mov	r5, r2
 800b0dc:	e7bb      	b.n	800b056 <_printf_i+0x132>
 800b0de:	682b      	ldr	r3, [r5, #0]
 800b0e0:	6826      	ldr	r6, [r4, #0]
 800b0e2:	1d18      	adds	r0, r3, #4
 800b0e4:	6961      	ldr	r1, [r4, #20]
 800b0e6:	6028      	str	r0, [r5, #0]
 800b0e8:	0635      	lsls	r5, r6, #24
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	d501      	bpl.n	800b0f2 <_printf_i+0x1ce>
 800b0ee:	6019      	str	r1, [r3, #0]
 800b0f0:	e002      	b.n	800b0f8 <_printf_i+0x1d4>
 800b0f2:	0670      	lsls	r0, r6, #25
 800b0f4:	d5fb      	bpl.n	800b0ee <_printf_i+0x1ca>
 800b0f6:	8019      	strh	r1, [r3, #0]
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	4615      	mov	r5, r2
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	e7ba      	b.n	800b076 <_printf_i+0x152>
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	2100      	movs	r1, #0
 800b104:	1d1a      	adds	r2, r3, #4
 800b106:	602a      	str	r2, [r5, #0]
 800b108:	681d      	ldr	r5, [r3, #0]
 800b10a:	6862      	ldr	r2, [r4, #4]
 800b10c:	4628      	mov	r0, r5
 800b10e:	f000 f95f 	bl	800b3d0 <memchr>
 800b112:	b108      	cbz	r0, 800b118 <_printf_i+0x1f4>
 800b114:	1b40      	subs	r0, r0, r5
 800b116:	6060      	str	r0, [r4, #4]
 800b118:	6863      	ldr	r3, [r4, #4]
 800b11a:	6123      	str	r3, [r4, #16]
 800b11c:	2300      	movs	r3, #0
 800b11e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b122:	e7a8      	b.n	800b076 <_printf_i+0x152>
 800b124:	462a      	mov	r2, r5
 800b126:	4649      	mov	r1, r9
 800b128:	4640      	mov	r0, r8
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	47d0      	blx	sl
 800b12e:	3001      	adds	r0, #1
 800b130:	d0ab      	beq.n	800b08a <_printf_i+0x166>
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	079b      	lsls	r3, r3, #30
 800b136:	d413      	bmi.n	800b160 <_printf_i+0x23c>
 800b138:	68e0      	ldr	r0, [r4, #12]
 800b13a:	9b03      	ldr	r3, [sp, #12]
 800b13c:	4298      	cmp	r0, r3
 800b13e:	bfb8      	it	lt
 800b140:	4618      	movlt	r0, r3
 800b142:	e7a4      	b.n	800b08e <_printf_i+0x16a>
 800b144:	2301      	movs	r3, #1
 800b146:	4632      	mov	r2, r6
 800b148:	4649      	mov	r1, r9
 800b14a:	4640      	mov	r0, r8
 800b14c:	47d0      	blx	sl
 800b14e:	3001      	adds	r0, #1
 800b150:	d09b      	beq.n	800b08a <_printf_i+0x166>
 800b152:	3501      	adds	r5, #1
 800b154:	68e3      	ldr	r3, [r4, #12]
 800b156:	9903      	ldr	r1, [sp, #12]
 800b158:	1a5b      	subs	r3, r3, r1
 800b15a:	42ab      	cmp	r3, r5
 800b15c:	dcf2      	bgt.n	800b144 <_printf_i+0x220>
 800b15e:	e7eb      	b.n	800b138 <_printf_i+0x214>
 800b160:	2500      	movs	r5, #0
 800b162:	f104 0619 	add.w	r6, r4, #25
 800b166:	e7f5      	b.n	800b154 <_printf_i+0x230>
 800b168:	0800c506 	.word	0x0800c506
 800b16c:	0800c517 	.word	0x0800c517

0800b170 <sniprintf>:
 800b170:	b40c      	push	{r2, r3}
 800b172:	b530      	push	{r4, r5, lr}
 800b174:	4b17      	ldr	r3, [pc, #92]	; (800b1d4 <sniprintf+0x64>)
 800b176:	1e0c      	subs	r4, r1, #0
 800b178:	681d      	ldr	r5, [r3, #0]
 800b17a:	b09d      	sub	sp, #116	; 0x74
 800b17c:	da08      	bge.n	800b190 <sniprintf+0x20>
 800b17e:	238b      	movs	r3, #139	; 0x8b
 800b180:	f04f 30ff 	mov.w	r0, #4294967295
 800b184:	602b      	str	r3, [r5, #0]
 800b186:	b01d      	add	sp, #116	; 0x74
 800b188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b18c:	b002      	add	sp, #8
 800b18e:	4770      	bx	lr
 800b190:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b194:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b198:	bf0c      	ite	eq
 800b19a:	4623      	moveq	r3, r4
 800b19c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b1a0:	9304      	str	r3, [sp, #16]
 800b1a2:	9307      	str	r3, [sp, #28]
 800b1a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1a8:	9002      	str	r0, [sp, #8]
 800b1aa:	9006      	str	r0, [sp, #24]
 800b1ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	ab21      	add	r3, sp, #132	; 0x84
 800b1b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b1b6:	a902      	add	r1, sp, #8
 800b1b8:	9301      	str	r3, [sp, #4]
 800b1ba:	f7ff fd43 	bl	800ac44 <_svfiprintf_r>
 800b1be:	1c43      	adds	r3, r0, #1
 800b1c0:	bfbc      	itt	lt
 800b1c2:	238b      	movlt	r3, #139	; 0x8b
 800b1c4:	602b      	strlt	r3, [r5, #0]
 800b1c6:	2c00      	cmp	r4, #0
 800b1c8:	d0dd      	beq.n	800b186 <sniprintf+0x16>
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	9b02      	ldr	r3, [sp, #8]
 800b1ce:	701a      	strb	r2, [r3, #0]
 800b1d0:	e7d9      	b.n	800b186 <sniprintf+0x16>
 800b1d2:	bf00      	nop
 800b1d4:	20000108 	.word	0x20000108

0800b1d8 <siscanf>:
 800b1d8:	b40e      	push	{r1, r2, r3}
 800b1da:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b1de:	b530      	push	{r4, r5, lr}
 800b1e0:	b09c      	sub	sp, #112	; 0x70
 800b1e2:	ac1f      	add	r4, sp, #124	; 0x7c
 800b1e4:	f854 5b04 	ldr.w	r5, [r4], #4
 800b1e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b1ec:	9002      	str	r0, [sp, #8]
 800b1ee:	9006      	str	r0, [sp, #24]
 800b1f0:	f7f4 ffac 	bl	800014c <strlen>
 800b1f4:	4b0b      	ldr	r3, [pc, #44]	; (800b224 <siscanf+0x4c>)
 800b1f6:	9003      	str	r0, [sp, #12]
 800b1f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1fe:	9314      	str	r3, [sp, #80]	; 0x50
 800b200:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b204:	9007      	str	r0, [sp, #28]
 800b206:	4808      	ldr	r0, [pc, #32]	; (800b228 <siscanf+0x50>)
 800b208:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b20c:	462a      	mov	r2, r5
 800b20e:	4623      	mov	r3, r4
 800b210:	a902      	add	r1, sp, #8
 800b212:	6800      	ldr	r0, [r0, #0]
 800b214:	9401      	str	r4, [sp, #4]
 800b216:	f000 f98d 	bl	800b534 <__ssvfiscanf_r>
 800b21a:	b01c      	add	sp, #112	; 0x70
 800b21c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b220:	b003      	add	sp, #12
 800b222:	4770      	bx	lr
 800b224:	08009b05 	.word	0x08009b05
 800b228:	20000108 	.word	0x20000108

0800b22c <strcpy>:
 800b22c:	4603      	mov	r3, r0
 800b22e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b232:	f803 2b01 	strb.w	r2, [r3], #1
 800b236:	2a00      	cmp	r2, #0
 800b238:	d1f9      	bne.n	800b22e <strcpy+0x2>
 800b23a:	4770      	bx	lr

0800b23c <strncmp>:
 800b23c:	4603      	mov	r3, r0
 800b23e:	b510      	push	{r4, lr}
 800b240:	b172      	cbz	r2, 800b260 <strncmp+0x24>
 800b242:	3901      	subs	r1, #1
 800b244:	1884      	adds	r4, r0, r2
 800b246:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b24a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b24e:	4290      	cmp	r0, r2
 800b250:	d101      	bne.n	800b256 <strncmp+0x1a>
 800b252:	42a3      	cmp	r3, r4
 800b254:	d101      	bne.n	800b25a <strncmp+0x1e>
 800b256:	1a80      	subs	r0, r0, r2
 800b258:	bd10      	pop	{r4, pc}
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d1f3      	bne.n	800b246 <strncmp+0xa>
 800b25e:	e7fa      	b.n	800b256 <strncmp+0x1a>
 800b260:	4610      	mov	r0, r2
 800b262:	e7f9      	b.n	800b258 <strncmp+0x1c>

0800b264 <__tzcalc_limits>:
 800b264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b268:	4605      	mov	r5, r0
 800b26a:	f7ff fc65 	bl	800ab38 <__gettzinfo>
 800b26e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800b272:	429d      	cmp	r5, r3
 800b274:	f340 809a 	ble.w	800b3ac <__tzcalc_limits+0x148>
 800b278:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800b27c:	18ac      	adds	r4, r5, r2
 800b27e:	f240 126d 	movw	r2, #365	; 0x16d
 800b282:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800b286:	10a4      	asrs	r4, r4, #2
 800b288:	fb02 4403 	mla	r4, r2, r3, r4
 800b28c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800b290:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800b294:	fb93 f3f2 	sdiv	r3, r3, r2
 800b298:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800b29c:	441c      	add	r4, r3
 800b29e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b2a2:	186a      	adds	r2, r5, r1
 800b2a4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b2a8:	fb95 fcf3 	sdiv	ip, r5, r3
 800b2ac:	4414      	add	r4, r2
 800b2ae:	2264      	movs	r2, #100	; 0x64
 800b2b0:	fb03 5c1c 	mls	ip, r3, ip, r5
 800b2b4:	fb95 f7f2 	sdiv	r7, r5, r2
 800b2b8:	fabc f68c 	clz	r6, ip
 800b2bc:	4601      	mov	r1, r0
 800b2be:	fb02 5717 	mls	r7, r2, r7, r5
 800b2c2:	6045      	str	r5, [r0, #4]
 800b2c4:	0976      	lsrs	r6, r6, #5
 800b2c6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800b2ca:	f005 0203 	and.w	r2, r5, #3
 800b2ce:	7a0d      	ldrb	r5, [r1, #8]
 800b2d0:	694b      	ldr	r3, [r1, #20]
 800b2d2:	2d4a      	cmp	r5, #74	; 0x4a
 800b2d4:	d12d      	bne.n	800b332 <__tzcalc_limits+0xce>
 800b2d6:	eb04 0e03 	add.w	lr, r4, r3
 800b2da:	b902      	cbnz	r2, 800b2de <__tzcalc_limits+0x7a>
 800b2dc:	b917      	cbnz	r7, 800b2e4 <__tzcalc_limits+0x80>
 800b2de:	f1bc 0f00 	cmp.w	ip, #0
 800b2e2:	d124      	bne.n	800b32e <__tzcalc_limits+0xca>
 800b2e4:	2b3b      	cmp	r3, #59	; 0x3b
 800b2e6:	bfd4      	ite	le
 800b2e8:	2300      	movle	r3, #0
 800b2ea:	2301      	movgt	r3, #1
 800b2ec:	4473      	add	r3, lr
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	698d      	ldr	r5, [r1, #24]
 800b2f2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800b3b0 <__tzcalc_limits+0x14c>
 800b2f6:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800b2fa:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800b2fe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b300:	18ed      	adds	r5, r5, r3
 800b302:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800b306:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800b30a:	3128      	adds	r1, #40	; 0x28
 800b30c:	458b      	cmp	fp, r1
 800b30e:	d1de      	bne.n	800b2ce <__tzcalc_limits+0x6a>
 800b310:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800b314:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800b318:	428c      	cmp	r4, r1
 800b31a:	eb72 0303 	sbcs.w	r3, r2, r3
 800b31e:	bfb4      	ite	lt
 800b320:	2301      	movlt	r3, #1
 800b322:	2300      	movge	r3, #0
 800b324:	6003      	str	r3, [r0, #0]
 800b326:	2001      	movs	r0, #1
 800b328:	b003      	add	sp, #12
 800b32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32e:	2300      	movs	r3, #0
 800b330:	e7dc      	b.n	800b2ec <__tzcalc_limits+0x88>
 800b332:	2d44      	cmp	r5, #68	; 0x44
 800b334:	d101      	bne.n	800b33a <__tzcalc_limits+0xd6>
 800b336:	4423      	add	r3, r4
 800b338:	e7da      	b.n	800b2f0 <__tzcalc_limits+0x8c>
 800b33a:	bb8a      	cbnz	r2, 800b3a0 <__tzcalc_limits+0x13c>
 800b33c:	2f00      	cmp	r7, #0
 800b33e:	bf0c      	ite	eq
 800b340:	4635      	moveq	r5, r6
 800b342:	2501      	movne	r5, #1
 800b344:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800b348:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800b34c:	f04f 0800 	mov.w	r8, #0
 800b350:	f8cd e004 	str.w	lr, [sp, #4]
 800b354:	46a6      	mov	lr, r4
 800b356:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800b3b4 <__tzcalc_limits+0x150>
 800b35a:	fb0a 9505 	mla	r5, sl, r5, r9
 800b35e:	3d04      	subs	r5, #4
 800b360:	f8dd a004 	ldr.w	sl, [sp, #4]
 800b364:	f108 0801 	add.w	r8, r8, #1
 800b368:	45c2      	cmp	sl, r8
 800b36a:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800b36e:	dc19      	bgt.n	800b3a4 <__tzcalc_limits+0x140>
 800b370:	f04f 0807 	mov.w	r8, #7
 800b374:	f10e 0504 	add.w	r5, lr, #4
 800b378:	fb95 f8f8 	sdiv	r8, r5, r8
 800b37c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800b380:	eba5 0808 	sub.w	r8, r5, r8
 800b384:	ebb3 0808 	subs.w	r8, r3, r8
 800b388:	690b      	ldr	r3, [r1, #16]
 800b38a:	bf48      	it	mi
 800b38c:	f108 0807 	addmi.w	r8, r8, #7
 800b390:	3b01      	subs	r3, #1
 800b392:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b396:	4443      	add	r3, r8
 800b398:	454b      	cmp	r3, r9
 800b39a:	da05      	bge.n	800b3a8 <__tzcalc_limits+0x144>
 800b39c:	4473      	add	r3, lr
 800b39e:	e7a7      	b.n	800b2f0 <__tzcalc_limits+0x8c>
 800b3a0:	4635      	mov	r5, r6
 800b3a2:	e7cf      	b.n	800b344 <__tzcalc_limits+0xe0>
 800b3a4:	44ce      	add	lr, r9
 800b3a6:	e7db      	b.n	800b360 <__tzcalc_limits+0xfc>
 800b3a8:	3b07      	subs	r3, #7
 800b3aa:	e7f5      	b.n	800b398 <__tzcalc_limits+0x134>
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	e7bb      	b.n	800b328 <__tzcalc_limits+0xc4>
 800b3b0:	00015180 	.word	0x00015180
 800b3b4:	0800c528 	.word	0x0800c528

0800b3b8 <__env_lock>:
 800b3b8:	4801      	ldr	r0, [pc, #4]	; (800b3c0 <__env_lock+0x8>)
 800b3ba:	f7fe ba8c 	b.w	80098d6 <__retarget_lock_acquire_recursive>
 800b3be:	bf00      	nop
 800b3c0:	200006ec 	.word	0x200006ec

0800b3c4 <__env_unlock>:
 800b3c4:	4801      	ldr	r0, [pc, #4]	; (800b3cc <__env_unlock+0x8>)
 800b3c6:	f7fe ba88 	b.w	80098da <__retarget_lock_release_recursive>
 800b3ca:	bf00      	nop
 800b3cc:	200006ec 	.word	0x200006ec

0800b3d0 <memchr>:
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	b510      	push	{r4, lr}
 800b3d4:	b2c9      	uxtb	r1, r1
 800b3d6:	4402      	add	r2, r0
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	4618      	mov	r0, r3
 800b3dc:	d101      	bne.n	800b3e2 <memchr+0x12>
 800b3de:	2000      	movs	r0, #0
 800b3e0:	e003      	b.n	800b3ea <memchr+0x1a>
 800b3e2:	7804      	ldrb	r4, [r0, #0]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	428c      	cmp	r4, r1
 800b3e8:	d1f6      	bne.n	800b3d8 <memchr+0x8>
 800b3ea:	bd10      	pop	{r4, pc}

0800b3ec <memmove>:
 800b3ec:	4288      	cmp	r0, r1
 800b3ee:	b510      	push	{r4, lr}
 800b3f0:	eb01 0402 	add.w	r4, r1, r2
 800b3f4:	d902      	bls.n	800b3fc <memmove+0x10>
 800b3f6:	4284      	cmp	r4, r0
 800b3f8:	4623      	mov	r3, r4
 800b3fa:	d807      	bhi.n	800b40c <memmove+0x20>
 800b3fc:	1e43      	subs	r3, r0, #1
 800b3fe:	42a1      	cmp	r1, r4
 800b400:	d008      	beq.n	800b414 <memmove+0x28>
 800b402:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b406:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b40a:	e7f8      	b.n	800b3fe <memmove+0x12>
 800b40c:	4601      	mov	r1, r0
 800b40e:	4402      	add	r2, r0
 800b410:	428a      	cmp	r2, r1
 800b412:	d100      	bne.n	800b416 <memmove+0x2a>
 800b414:	bd10      	pop	{r4, pc}
 800b416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b41a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b41e:	e7f7      	b.n	800b410 <memmove+0x24>

0800b420 <_realloc_r>:
 800b420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b424:	4680      	mov	r8, r0
 800b426:	4614      	mov	r4, r2
 800b428:	460e      	mov	r6, r1
 800b42a:	b921      	cbnz	r1, 800b436 <_realloc_r+0x16>
 800b42c:	4611      	mov	r1, r2
 800b42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b432:	f7fe bac3 	b.w	80099bc <_malloc_r>
 800b436:	b92a      	cbnz	r2, 800b444 <_realloc_r+0x24>
 800b438:	f7fe fa58 	bl	80098ec <_free_r>
 800b43c:	4625      	mov	r5, r4
 800b43e:	4628      	mov	r0, r5
 800b440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b444:	f000 fbb2 	bl	800bbac <_malloc_usable_size_r>
 800b448:	4284      	cmp	r4, r0
 800b44a:	4607      	mov	r7, r0
 800b44c:	d802      	bhi.n	800b454 <_realloc_r+0x34>
 800b44e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b452:	d812      	bhi.n	800b47a <_realloc_r+0x5a>
 800b454:	4621      	mov	r1, r4
 800b456:	4640      	mov	r0, r8
 800b458:	f7fe fab0 	bl	80099bc <_malloc_r>
 800b45c:	4605      	mov	r5, r0
 800b45e:	2800      	cmp	r0, #0
 800b460:	d0ed      	beq.n	800b43e <_realloc_r+0x1e>
 800b462:	42bc      	cmp	r4, r7
 800b464:	4622      	mov	r2, r4
 800b466:	4631      	mov	r1, r6
 800b468:	bf28      	it	cs
 800b46a:	463a      	movcs	r2, r7
 800b46c:	f7ff fb74 	bl	800ab58 <memcpy>
 800b470:	4631      	mov	r1, r6
 800b472:	4640      	mov	r0, r8
 800b474:	f7fe fa3a 	bl	80098ec <_free_r>
 800b478:	e7e1      	b.n	800b43e <_realloc_r+0x1e>
 800b47a:	4635      	mov	r5, r6
 800b47c:	e7df      	b.n	800b43e <_realloc_r+0x1e>

0800b47e <_sungetc_r>:
 800b47e:	b538      	push	{r3, r4, r5, lr}
 800b480:	1c4b      	adds	r3, r1, #1
 800b482:	4614      	mov	r4, r2
 800b484:	d103      	bne.n	800b48e <_sungetc_r+0x10>
 800b486:	f04f 35ff 	mov.w	r5, #4294967295
 800b48a:	4628      	mov	r0, r5
 800b48c:	bd38      	pop	{r3, r4, r5, pc}
 800b48e:	8993      	ldrh	r3, [r2, #12]
 800b490:	b2cd      	uxtb	r5, r1
 800b492:	f023 0320 	bic.w	r3, r3, #32
 800b496:	8193      	strh	r3, [r2, #12]
 800b498:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b49a:	6852      	ldr	r2, [r2, #4]
 800b49c:	b18b      	cbz	r3, 800b4c2 <_sungetc_r+0x44>
 800b49e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	dd08      	ble.n	800b4b6 <_sungetc_r+0x38>
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	1e5a      	subs	r2, r3, #1
 800b4a8:	6022      	str	r2, [r4, #0]
 800b4aa:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b4ae:	6863      	ldr	r3, [r4, #4]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	6063      	str	r3, [r4, #4]
 800b4b4:	e7e9      	b.n	800b48a <_sungetc_r+0xc>
 800b4b6:	4621      	mov	r1, r4
 800b4b8:	f000 fb40 	bl	800bb3c <__submore>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d0f1      	beq.n	800b4a4 <_sungetc_r+0x26>
 800b4c0:	e7e1      	b.n	800b486 <_sungetc_r+0x8>
 800b4c2:	6921      	ldr	r1, [r4, #16]
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	b151      	cbz	r1, 800b4de <_sungetc_r+0x60>
 800b4c8:	4299      	cmp	r1, r3
 800b4ca:	d208      	bcs.n	800b4de <_sungetc_r+0x60>
 800b4cc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b4d0:	42a9      	cmp	r1, r5
 800b4d2:	d104      	bne.n	800b4de <_sungetc_r+0x60>
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	3201      	adds	r2, #1
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	6062      	str	r2, [r4, #4]
 800b4dc:	e7d5      	b.n	800b48a <_sungetc_r+0xc>
 800b4de:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b4e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4e6:	6363      	str	r3, [r4, #52]	; 0x34
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	63a3      	str	r3, [r4, #56]	; 0x38
 800b4ec:	4623      	mov	r3, r4
 800b4ee:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b4f2:	6023      	str	r3, [r4, #0]
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e7dc      	b.n	800b4b2 <_sungetc_r+0x34>

0800b4f8 <__ssrefill_r>:
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b4fe:	b169      	cbz	r1, 800b51c <__ssrefill_r+0x24>
 800b500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b504:	4299      	cmp	r1, r3
 800b506:	d001      	beq.n	800b50c <__ssrefill_r+0x14>
 800b508:	f7fe f9f0 	bl	80098ec <_free_r>
 800b50c:	2000      	movs	r0, #0
 800b50e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b510:	6360      	str	r0, [r4, #52]	; 0x34
 800b512:	6063      	str	r3, [r4, #4]
 800b514:	b113      	cbz	r3, 800b51c <__ssrefill_r+0x24>
 800b516:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	bd10      	pop	{r4, pc}
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	f04f 30ff 	mov.w	r0, #4294967295
 800b522:	6023      	str	r3, [r4, #0]
 800b524:	2300      	movs	r3, #0
 800b526:	6063      	str	r3, [r4, #4]
 800b528:	89a3      	ldrh	r3, [r4, #12]
 800b52a:	f043 0320 	orr.w	r3, r3, #32
 800b52e:	81a3      	strh	r3, [r4, #12]
 800b530:	e7f3      	b.n	800b51a <__ssrefill_r+0x22>
	...

0800b534 <__ssvfiscanf_r>:
 800b534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b538:	460c      	mov	r4, r1
 800b53a:	2100      	movs	r1, #0
 800b53c:	4606      	mov	r6, r0
 800b53e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b542:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b546:	49a7      	ldr	r1, [pc, #668]	; (800b7e4 <__ssvfiscanf_r+0x2b0>)
 800b548:	f10d 0804 	add.w	r8, sp, #4
 800b54c:	91a0      	str	r1, [sp, #640]	; 0x280
 800b54e:	49a6      	ldr	r1, [pc, #664]	; (800b7e8 <__ssvfiscanf_r+0x2b4>)
 800b550:	4fa6      	ldr	r7, [pc, #664]	; (800b7ec <__ssvfiscanf_r+0x2b8>)
 800b552:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b7f0 <__ssvfiscanf_r+0x2bc>
 800b556:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b55a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	7813      	ldrb	r3, [r2, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 815c 	beq.w	800b81e <__ssvfiscanf_r+0x2ea>
 800b566:	5dd9      	ldrb	r1, [r3, r7]
 800b568:	1c55      	adds	r5, r2, #1
 800b56a:	f011 0108 	ands.w	r1, r1, #8
 800b56e:	d019      	beq.n	800b5a4 <__ssvfiscanf_r+0x70>
 800b570:	6863      	ldr	r3, [r4, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	dd0f      	ble.n	800b596 <__ssvfiscanf_r+0x62>
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	781a      	ldrb	r2, [r3, #0]
 800b57a:	5cba      	ldrb	r2, [r7, r2]
 800b57c:	0712      	lsls	r2, r2, #28
 800b57e:	d401      	bmi.n	800b584 <__ssvfiscanf_r+0x50>
 800b580:	462a      	mov	r2, r5
 800b582:	e7ec      	b.n	800b55e <__ssvfiscanf_r+0x2a>
 800b584:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b586:	3301      	adds	r3, #1
 800b588:	3201      	adds	r2, #1
 800b58a:	9245      	str	r2, [sp, #276]	; 0x114
 800b58c:	6862      	ldr	r2, [r4, #4]
 800b58e:	6023      	str	r3, [r4, #0]
 800b590:	3a01      	subs	r2, #1
 800b592:	6062      	str	r2, [r4, #4]
 800b594:	e7ec      	b.n	800b570 <__ssvfiscanf_r+0x3c>
 800b596:	4621      	mov	r1, r4
 800b598:	4630      	mov	r0, r6
 800b59a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b59c:	4798      	blx	r3
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d0e9      	beq.n	800b576 <__ssvfiscanf_r+0x42>
 800b5a2:	e7ed      	b.n	800b580 <__ssvfiscanf_r+0x4c>
 800b5a4:	2b25      	cmp	r3, #37	; 0x25
 800b5a6:	d012      	beq.n	800b5ce <__ssvfiscanf_r+0x9a>
 800b5a8:	469a      	mov	sl, r3
 800b5aa:	6863      	ldr	r3, [r4, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f340 8094 	ble.w	800b6da <__ssvfiscanf_r+0x1a6>
 800b5b2:	6822      	ldr	r2, [r4, #0]
 800b5b4:	7813      	ldrb	r3, [r2, #0]
 800b5b6:	4553      	cmp	r3, sl
 800b5b8:	f040 8131 	bne.w	800b81e <__ssvfiscanf_r+0x2ea>
 800b5bc:	6863      	ldr	r3, [r4, #4]
 800b5be:	3201      	adds	r2, #1
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	6063      	str	r3, [r4, #4]
 800b5c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b5c6:	6022      	str	r2, [r4, #0]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	9345      	str	r3, [sp, #276]	; 0x114
 800b5cc:	e7d8      	b.n	800b580 <__ssvfiscanf_r+0x4c>
 800b5ce:	9141      	str	r1, [sp, #260]	; 0x104
 800b5d0:	9143      	str	r1, [sp, #268]	; 0x10c
 800b5d2:	7853      	ldrb	r3, [r2, #1]
 800b5d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d6:	bf04      	itt	eq
 800b5d8:	2310      	moveq	r3, #16
 800b5da:	1c95      	addeq	r5, r2, #2
 800b5dc:	f04f 020a 	mov.w	r2, #10
 800b5e0:	bf08      	it	eq
 800b5e2:	9341      	streq	r3, [sp, #260]	; 0x104
 800b5e4:	46aa      	mov	sl, r5
 800b5e6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b5ea:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b5ee:	2b09      	cmp	r3, #9
 800b5f0:	d91d      	bls.n	800b62e <__ssvfiscanf_r+0xfa>
 800b5f2:	2203      	movs	r2, #3
 800b5f4:	487e      	ldr	r0, [pc, #504]	; (800b7f0 <__ssvfiscanf_r+0x2bc>)
 800b5f6:	f7ff feeb 	bl	800b3d0 <memchr>
 800b5fa:	b140      	cbz	r0, 800b60e <__ssvfiscanf_r+0xda>
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	4655      	mov	r5, sl
 800b600:	eba0 0009 	sub.w	r0, r0, r9
 800b604:	fa03 f000 	lsl.w	r0, r3, r0
 800b608:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b60a:	4318      	orrs	r0, r3
 800b60c:	9041      	str	r0, [sp, #260]	; 0x104
 800b60e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b612:	2b78      	cmp	r3, #120	; 0x78
 800b614:	d806      	bhi.n	800b624 <__ssvfiscanf_r+0xf0>
 800b616:	2b57      	cmp	r3, #87	; 0x57
 800b618:	d810      	bhi.n	800b63c <__ssvfiscanf_r+0x108>
 800b61a:	2b25      	cmp	r3, #37	; 0x25
 800b61c:	d0c4      	beq.n	800b5a8 <__ssvfiscanf_r+0x74>
 800b61e:	d857      	bhi.n	800b6d0 <__ssvfiscanf_r+0x19c>
 800b620:	2b00      	cmp	r3, #0
 800b622:	d065      	beq.n	800b6f0 <__ssvfiscanf_r+0x1bc>
 800b624:	2303      	movs	r3, #3
 800b626:	9347      	str	r3, [sp, #284]	; 0x11c
 800b628:	230a      	movs	r3, #10
 800b62a:	9342      	str	r3, [sp, #264]	; 0x108
 800b62c:	e072      	b.n	800b714 <__ssvfiscanf_r+0x1e0>
 800b62e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b630:	4655      	mov	r5, sl
 800b632:	fb02 1103 	mla	r1, r2, r3, r1
 800b636:	3930      	subs	r1, #48	; 0x30
 800b638:	9143      	str	r1, [sp, #268]	; 0x10c
 800b63a:	e7d3      	b.n	800b5e4 <__ssvfiscanf_r+0xb0>
 800b63c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b640:	2a20      	cmp	r2, #32
 800b642:	d8ef      	bhi.n	800b624 <__ssvfiscanf_r+0xf0>
 800b644:	a101      	add	r1, pc, #4	; (adr r1, 800b64c <__ssvfiscanf_r+0x118>)
 800b646:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b64a:	bf00      	nop
 800b64c:	0800b6ff 	.word	0x0800b6ff
 800b650:	0800b625 	.word	0x0800b625
 800b654:	0800b625 	.word	0x0800b625
 800b658:	0800b75d 	.word	0x0800b75d
 800b65c:	0800b625 	.word	0x0800b625
 800b660:	0800b625 	.word	0x0800b625
 800b664:	0800b625 	.word	0x0800b625
 800b668:	0800b625 	.word	0x0800b625
 800b66c:	0800b625 	.word	0x0800b625
 800b670:	0800b625 	.word	0x0800b625
 800b674:	0800b625 	.word	0x0800b625
 800b678:	0800b773 	.word	0x0800b773
 800b67c:	0800b749 	.word	0x0800b749
 800b680:	0800b6d7 	.word	0x0800b6d7
 800b684:	0800b6d7 	.word	0x0800b6d7
 800b688:	0800b6d7 	.word	0x0800b6d7
 800b68c:	0800b625 	.word	0x0800b625
 800b690:	0800b74d 	.word	0x0800b74d
 800b694:	0800b625 	.word	0x0800b625
 800b698:	0800b625 	.word	0x0800b625
 800b69c:	0800b625 	.word	0x0800b625
 800b6a0:	0800b625 	.word	0x0800b625
 800b6a4:	0800b783 	.word	0x0800b783
 800b6a8:	0800b755 	.word	0x0800b755
 800b6ac:	0800b6f7 	.word	0x0800b6f7
 800b6b0:	0800b625 	.word	0x0800b625
 800b6b4:	0800b625 	.word	0x0800b625
 800b6b8:	0800b77f 	.word	0x0800b77f
 800b6bc:	0800b625 	.word	0x0800b625
 800b6c0:	0800b749 	.word	0x0800b749
 800b6c4:	0800b625 	.word	0x0800b625
 800b6c8:	0800b625 	.word	0x0800b625
 800b6cc:	0800b6ff 	.word	0x0800b6ff
 800b6d0:	3b45      	subs	r3, #69	; 0x45
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d8a6      	bhi.n	800b624 <__ssvfiscanf_r+0xf0>
 800b6d6:	2305      	movs	r3, #5
 800b6d8:	e01b      	b.n	800b712 <__ssvfiscanf_r+0x1de>
 800b6da:	4621      	mov	r1, r4
 800b6dc:	4630      	mov	r0, r6
 800b6de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b6e0:	4798      	blx	r3
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	f43f af65 	beq.w	800b5b2 <__ssvfiscanf_r+0x7e>
 800b6e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	f040 808d 	bne.w	800b80a <__ssvfiscanf_r+0x2d6>
 800b6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f4:	e08f      	b.n	800b816 <__ssvfiscanf_r+0x2e2>
 800b6f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b6f8:	f042 0220 	orr.w	r2, r2, #32
 800b6fc:	9241      	str	r2, [sp, #260]	; 0x104
 800b6fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b704:	9241      	str	r2, [sp, #260]	; 0x104
 800b706:	2210      	movs	r2, #16
 800b708:	2b6f      	cmp	r3, #111	; 0x6f
 800b70a:	bf34      	ite	cc
 800b70c:	2303      	movcc	r3, #3
 800b70e:	2304      	movcs	r3, #4
 800b710:	9242      	str	r2, [sp, #264]	; 0x108
 800b712:	9347      	str	r3, [sp, #284]	; 0x11c
 800b714:	6863      	ldr	r3, [r4, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	dd42      	ble.n	800b7a0 <__ssvfiscanf_r+0x26c>
 800b71a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b71c:	0659      	lsls	r1, r3, #25
 800b71e:	d404      	bmi.n	800b72a <__ssvfiscanf_r+0x1f6>
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	781a      	ldrb	r2, [r3, #0]
 800b724:	5cba      	ldrb	r2, [r7, r2]
 800b726:	0712      	lsls	r2, r2, #28
 800b728:	d441      	bmi.n	800b7ae <__ssvfiscanf_r+0x27a>
 800b72a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	dc50      	bgt.n	800b7d2 <__ssvfiscanf_r+0x29e>
 800b730:	466b      	mov	r3, sp
 800b732:	4622      	mov	r2, r4
 800b734:	4630      	mov	r0, r6
 800b736:	a941      	add	r1, sp, #260	; 0x104
 800b738:	f000 f876 	bl	800b828 <_scanf_chars>
 800b73c:	2801      	cmp	r0, #1
 800b73e:	d06e      	beq.n	800b81e <__ssvfiscanf_r+0x2ea>
 800b740:	2802      	cmp	r0, #2
 800b742:	f47f af1d 	bne.w	800b580 <__ssvfiscanf_r+0x4c>
 800b746:	e7cf      	b.n	800b6e8 <__ssvfiscanf_r+0x1b4>
 800b748:	220a      	movs	r2, #10
 800b74a:	e7dd      	b.n	800b708 <__ssvfiscanf_r+0x1d4>
 800b74c:	2300      	movs	r3, #0
 800b74e:	9342      	str	r3, [sp, #264]	; 0x108
 800b750:	2303      	movs	r3, #3
 800b752:	e7de      	b.n	800b712 <__ssvfiscanf_r+0x1de>
 800b754:	2308      	movs	r3, #8
 800b756:	9342      	str	r3, [sp, #264]	; 0x108
 800b758:	2304      	movs	r3, #4
 800b75a:	e7da      	b.n	800b712 <__ssvfiscanf_r+0x1de>
 800b75c:	4629      	mov	r1, r5
 800b75e:	4640      	mov	r0, r8
 800b760:	f000 f9b4 	bl	800bacc <__sccl>
 800b764:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b766:	4605      	mov	r5, r0
 800b768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b76c:	9341      	str	r3, [sp, #260]	; 0x104
 800b76e:	2301      	movs	r3, #1
 800b770:	e7cf      	b.n	800b712 <__ssvfiscanf_r+0x1de>
 800b772:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b778:	9341      	str	r3, [sp, #260]	; 0x104
 800b77a:	2300      	movs	r3, #0
 800b77c:	e7c9      	b.n	800b712 <__ssvfiscanf_r+0x1de>
 800b77e:	2302      	movs	r3, #2
 800b780:	e7c7      	b.n	800b712 <__ssvfiscanf_r+0x1de>
 800b782:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b784:	06c3      	lsls	r3, r0, #27
 800b786:	f53f aefb 	bmi.w	800b580 <__ssvfiscanf_r+0x4c>
 800b78a:	9b00      	ldr	r3, [sp, #0]
 800b78c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b78e:	1d19      	adds	r1, r3, #4
 800b790:	9100      	str	r1, [sp, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f010 0f01 	tst.w	r0, #1
 800b798:	bf14      	ite	ne
 800b79a:	801a      	strhne	r2, [r3, #0]
 800b79c:	601a      	streq	r2, [r3, #0]
 800b79e:	e6ef      	b.n	800b580 <__ssvfiscanf_r+0x4c>
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b7a6:	4798      	blx	r3
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d0b6      	beq.n	800b71a <__ssvfiscanf_r+0x1e6>
 800b7ac:	e79c      	b.n	800b6e8 <__ssvfiscanf_r+0x1b4>
 800b7ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b7b0:	3201      	adds	r2, #1
 800b7b2:	9245      	str	r2, [sp, #276]	; 0x114
 800b7b4:	6862      	ldr	r2, [r4, #4]
 800b7b6:	3a01      	subs	r2, #1
 800b7b8:	2a00      	cmp	r2, #0
 800b7ba:	6062      	str	r2, [r4, #4]
 800b7bc:	dd02      	ble.n	800b7c4 <__ssvfiscanf_r+0x290>
 800b7be:	3301      	adds	r3, #1
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	e7ad      	b.n	800b720 <__ssvfiscanf_r+0x1ec>
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b7ca:	4798      	blx	r3
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d0a7      	beq.n	800b720 <__ssvfiscanf_r+0x1ec>
 800b7d0:	e78a      	b.n	800b6e8 <__ssvfiscanf_r+0x1b4>
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	dc0e      	bgt.n	800b7f4 <__ssvfiscanf_r+0x2c0>
 800b7d6:	466b      	mov	r3, sp
 800b7d8:	4622      	mov	r2, r4
 800b7da:	4630      	mov	r0, r6
 800b7dc:	a941      	add	r1, sp, #260	; 0x104
 800b7de:	f000 f87d 	bl	800b8dc <_scanf_i>
 800b7e2:	e7ab      	b.n	800b73c <__ssvfiscanf_r+0x208>
 800b7e4:	0800b47f 	.word	0x0800b47f
 800b7e8:	0800b4f9 	.word	0x0800b4f9
 800b7ec:	0800c3f5 	.word	0x0800c3f5
 800b7f0:	0800c4fb 	.word	0x0800c4fb
 800b7f4:	4b0b      	ldr	r3, [pc, #44]	; (800b824 <__ssvfiscanf_r+0x2f0>)
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f43f aec2 	beq.w	800b580 <__ssvfiscanf_r+0x4c>
 800b7fc:	466b      	mov	r3, sp
 800b7fe:	4622      	mov	r2, r4
 800b800:	4630      	mov	r0, r6
 800b802:	a941      	add	r1, sp, #260	; 0x104
 800b804:	f3af 8000 	nop.w
 800b808:	e798      	b.n	800b73c <__ssvfiscanf_r+0x208>
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b810:	bf18      	it	ne
 800b812:	f04f 30ff 	movne.w	r0, #4294967295
 800b816:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b81e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b820:	e7f9      	b.n	800b816 <__ssvfiscanf_r+0x2e2>
 800b822:	bf00      	nop
 800b824:	00000000 	.word	0x00000000

0800b828 <_scanf_chars>:
 800b828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b82c:	4615      	mov	r5, r2
 800b82e:	688a      	ldr	r2, [r1, #8]
 800b830:	4680      	mov	r8, r0
 800b832:	460c      	mov	r4, r1
 800b834:	b932      	cbnz	r2, 800b844 <_scanf_chars+0x1c>
 800b836:	698a      	ldr	r2, [r1, #24]
 800b838:	2a00      	cmp	r2, #0
 800b83a:	bf0c      	ite	eq
 800b83c:	2201      	moveq	r2, #1
 800b83e:	f04f 32ff 	movne.w	r2, #4294967295
 800b842:	608a      	str	r2, [r1, #8]
 800b844:	2700      	movs	r7, #0
 800b846:	6822      	ldr	r2, [r4, #0]
 800b848:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b8d8 <_scanf_chars+0xb0>
 800b84c:	06d1      	lsls	r1, r2, #27
 800b84e:	bf5f      	itttt	pl
 800b850:	681a      	ldrpl	r2, [r3, #0]
 800b852:	1d11      	addpl	r1, r2, #4
 800b854:	6019      	strpl	r1, [r3, #0]
 800b856:	6816      	ldrpl	r6, [r2, #0]
 800b858:	69a0      	ldr	r0, [r4, #24]
 800b85a:	b188      	cbz	r0, 800b880 <_scanf_chars+0x58>
 800b85c:	2801      	cmp	r0, #1
 800b85e:	d107      	bne.n	800b870 <_scanf_chars+0x48>
 800b860:	682b      	ldr	r3, [r5, #0]
 800b862:	781a      	ldrb	r2, [r3, #0]
 800b864:	6963      	ldr	r3, [r4, #20]
 800b866:	5c9b      	ldrb	r3, [r3, r2]
 800b868:	b953      	cbnz	r3, 800b880 <_scanf_chars+0x58>
 800b86a:	2f00      	cmp	r7, #0
 800b86c:	d031      	beq.n	800b8d2 <_scanf_chars+0xaa>
 800b86e:	e022      	b.n	800b8b6 <_scanf_chars+0x8e>
 800b870:	2802      	cmp	r0, #2
 800b872:	d120      	bne.n	800b8b6 <_scanf_chars+0x8e>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b87c:	071b      	lsls	r3, r3, #28
 800b87e:	d41a      	bmi.n	800b8b6 <_scanf_chars+0x8e>
 800b880:	6823      	ldr	r3, [r4, #0]
 800b882:	3701      	adds	r7, #1
 800b884:	06da      	lsls	r2, r3, #27
 800b886:	bf5e      	ittt	pl
 800b888:	682b      	ldrpl	r3, [r5, #0]
 800b88a:	781b      	ldrbpl	r3, [r3, #0]
 800b88c:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b890:	682a      	ldr	r2, [r5, #0]
 800b892:	686b      	ldr	r3, [r5, #4]
 800b894:	3201      	adds	r2, #1
 800b896:	602a      	str	r2, [r5, #0]
 800b898:	68a2      	ldr	r2, [r4, #8]
 800b89a:	3b01      	subs	r3, #1
 800b89c:	3a01      	subs	r2, #1
 800b89e:	606b      	str	r3, [r5, #4]
 800b8a0:	60a2      	str	r2, [r4, #8]
 800b8a2:	b142      	cbz	r2, 800b8b6 <_scanf_chars+0x8e>
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	dcd7      	bgt.n	800b858 <_scanf_chars+0x30>
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b8b0:	4798      	blx	r3
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d0d0      	beq.n	800b858 <_scanf_chars+0x30>
 800b8b6:	6823      	ldr	r3, [r4, #0]
 800b8b8:	f013 0310 	ands.w	r3, r3, #16
 800b8bc:	d105      	bne.n	800b8ca <_scanf_chars+0xa2>
 800b8be:	68e2      	ldr	r2, [r4, #12]
 800b8c0:	3201      	adds	r2, #1
 800b8c2:	60e2      	str	r2, [r4, #12]
 800b8c4:	69a2      	ldr	r2, [r4, #24]
 800b8c6:	b102      	cbz	r2, 800b8ca <_scanf_chars+0xa2>
 800b8c8:	7033      	strb	r3, [r6, #0]
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	6923      	ldr	r3, [r4, #16]
 800b8ce:	443b      	add	r3, r7
 800b8d0:	6123      	str	r3, [r4, #16]
 800b8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8d6:	bf00      	nop
 800b8d8:	0800c3f5 	.word	0x0800c3f5

0800b8dc <_scanf_i>:
 800b8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e0:	460c      	mov	r4, r1
 800b8e2:	4698      	mov	r8, r3
 800b8e4:	4b75      	ldr	r3, [pc, #468]	; (800babc <_scanf_i+0x1e0>)
 800b8e6:	b087      	sub	sp, #28
 800b8e8:	4682      	mov	sl, r0
 800b8ea:	4616      	mov	r6, r2
 800b8ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8f0:	ab03      	add	r3, sp, #12
 800b8f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b8f6:	4b72      	ldr	r3, [pc, #456]	; (800bac0 <_scanf_i+0x1e4>)
 800b8f8:	69a1      	ldr	r1, [r4, #24]
 800b8fa:	4a72      	ldr	r2, [pc, #456]	; (800bac4 <_scanf_i+0x1e8>)
 800b8fc:	4627      	mov	r7, r4
 800b8fe:	2903      	cmp	r1, #3
 800b900:	bf18      	it	ne
 800b902:	461a      	movne	r2, r3
 800b904:	68a3      	ldr	r3, [r4, #8]
 800b906:	9201      	str	r2, [sp, #4]
 800b908:	1e5a      	subs	r2, r3, #1
 800b90a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b90e:	bf81      	itttt	hi
 800b910:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b914:	eb03 0905 	addhi.w	r9, r3, r5
 800b918:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b91c:	60a3      	strhi	r3, [r4, #8]
 800b91e:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b922:	bf98      	it	ls
 800b924:	f04f 0900 	movls.w	r9, #0
 800b928:	463d      	mov	r5, r7
 800b92a:	f04f 0b00 	mov.w	fp, #0
 800b92e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b932:	6023      	str	r3, [r4, #0]
 800b934:	6831      	ldr	r1, [r6, #0]
 800b936:	ab03      	add	r3, sp, #12
 800b938:	2202      	movs	r2, #2
 800b93a:	7809      	ldrb	r1, [r1, #0]
 800b93c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b940:	f7ff fd46 	bl	800b3d0 <memchr>
 800b944:	b328      	cbz	r0, 800b992 <_scanf_i+0xb6>
 800b946:	f1bb 0f01 	cmp.w	fp, #1
 800b94a:	d159      	bne.n	800ba00 <_scanf_i+0x124>
 800b94c:	6862      	ldr	r2, [r4, #4]
 800b94e:	b92a      	cbnz	r2, 800b95c <_scanf_i+0x80>
 800b950:	2308      	movs	r3, #8
 800b952:	6822      	ldr	r2, [r4, #0]
 800b954:	6063      	str	r3, [r4, #4]
 800b956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b95a:	6022      	str	r2, [r4, #0]
 800b95c:	6822      	ldr	r2, [r4, #0]
 800b95e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b962:	6022      	str	r2, [r4, #0]
 800b964:	68a2      	ldr	r2, [r4, #8]
 800b966:	1e51      	subs	r1, r2, #1
 800b968:	60a1      	str	r1, [r4, #8]
 800b96a:	b192      	cbz	r2, 800b992 <_scanf_i+0xb6>
 800b96c:	6832      	ldr	r2, [r6, #0]
 800b96e:	1c51      	adds	r1, r2, #1
 800b970:	6031      	str	r1, [r6, #0]
 800b972:	7812      	ldrb	r2, [r2, #0]
 800b974:	f805 2b01 	strb.w	r2, [r5], #1
 800b978:	6872      	ldr	r2, [r6, #4]
 800b97a:	3a01      	subs	r2, #1
 800b97c:	2a00      	cmp	r2, #0
 800b97e:	6072      	str	r2, [r6, #4]
 800b980:	dc07      	bgt.n	800b992 <_scanf_i+0xb6>
 800b982:	4631      	mov	r1, r6
 800b984:	4650      	mov	r0, sl
 800b986:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b98a:	4790      	blx	r2
 800b98c:	2800      	cmp	r0, #0
 800b98e:	f040 8085 	bne.w	800ba9c <_scanf_i+0x1c0>
 800b992:	f10b 0b01 	add.w	fp, fp, #1
 800b996:	f1bb 0f03 	cmp.w	fp, #3
 800b99a:	d1cb      	bne.n	800b934 <_scanf_i+0x58>
 800b99c:	6863      	ldr	r3, [r4, #4]
 800b99e:	b90b      	cbnz	r3, 800b9a4 <_scanf_i+0xc8>
 800b9a0:	230a      	movs	r3, #10
 800b9a2:	6063      	str	r3, [r4, #4]
 800b9a4:	6863      	ldr	r3, [r4, #4]
 800b9a6:	4948      	ldr	r1, [pc, #288]	; (800bac8 <_scanf_i+0x1ec>)
 800b9a8:	6960      	ldr	r0, [r4, #20]
 800b9aa:	1ac9      	subs	r1, r1, r3
 800b9ac:	f000 f88e 	bl	800bacc <__sccl>
 800b9b0:	f04f 0b00 	mov.w	fp, #0
 800b9b4:	68a3      	ldr	r3, [r4, #8]
 800b9b6:	6822      	ldr	r2, [r4, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d03d      	beq.n	800ba38 <_scanf_i+0x15c>
 800b9bc:	6831      	ldr	r1, [r6, #0]
 800b9be:	6960      	ldr	r0, [r4, #20]
 800b9c0:	f891 c000 	ldrb.w	ip, [r1]
 800b9c4:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d035      	beq.n	800ba38 <_scanf_i+0x15c>
 800b9cc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b9d0:	d124      	bne.n	800ba1c <_scanf_i+0x140>
 800b9d2:	0510      	lsls	r0, r2, #20
 800b9d4:	d522      	bpl.n	800ba1c <_scanf_i+0x140>
 800b9d6:	f10b 0b01 	add.w	fp, fp, #1
 800b9da:	f1b9 0f00 	cmp.w	r9, #0
 800b9de:	d003      	beq.n	800b9e8 <_scanf_i+0x10c>
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	f109 39ff 	add.w	r9, r9, #4294967295
 800b9e6:	60a3      	str	r3, [r4, #8]
 800b9e8:	6873      	ldr	r3, [r6, #4]
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	6073      	str	r3, [r6, #4]
 800b9f0:	dd1b      	ble.n	800ba2a <_scanf_i+0x14e>
 800b9f2:	6833      	ldr	r3, [r6, #0]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	6033      	str	r3, [r6, #0]
 800b9f8:	68a3      	ldr	r3, [r4, #8]
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	60a3      	str	r3, [r4, #8]
 800b9fe:	e7d9      	b.n	800b9b4 <_scanf_i+0xd8>
 800ba00:	f1bb 0f02 	cmp.w	fp, #2
 800ba04:	d1ae      	bne.n	800b964 <_scanf_i+0x88>
 800ba06:	6822      	ldr	r2, [r4, #0]
 800ba08:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ba0c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ba10:	d1bf      	bne.n	800b992 <_scanf_i+0xb6>
 800ba12:	2310      	movs	r3, #16
 800ba14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba18:	6063      	str	r3, [r4, #4]
 800ba1a:	e7a2      	b.n	800b962 <_scanf_i+0x86>
 800ba1c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ba20:	6022      	str	r2, [r4, #0]
 800ba22:	780b      	ldrb	r3, [r1, #0]
 800ba24:	f805 3b01 	strb.w	r3, [r5], #1
 800ba28:	e7de      	b.n	800b9e8 <_scanf_i+0x10c>
 800ba2a:	4631      	mov	r1, r6
 800ba2c:	4650      	mov	r0, sl
 800ba2e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ba32:	4798      	blx	r3
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d0df      	beq.n	800b9f8 <_scanf_i+0x11c>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	05db      	lsls	r3, r3, #23
 800ba3c:	d50d      	bpl.n	800ba5a <_scanf_i+0x17e>
 800ba3e:	42bd      	cmp	r5, r7
 800ba40:	d909      	bls.n	800ba56 <_scanf_i+0x17a>
 800ba42:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ba46:	4632      	mov	r2, r6
 800ba48:	4650      	mov	r0, sl
 800ba4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba4e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ba52:	4798      	blx	r3
 800ba54:	464d      	mov	r5, r9
 800ba56:	42bd      	cmp	r5, r7
 800ba58:	d02d      	beq.n	800bab6 <_scanf_i+0x1da>
 800ba5a:	6822      	ldr	r2, [r4, #0]
 800ba5c:	f012 0210 	ands.w	r2, r2, #16
 800ba60:	d113      	bne.n	800ba8a <_scanf_i+0x1ae>
 800ba62:	702a      	strb	r2, [r5, #0]
 800ba64:	4639      	mov	r1, r7
 800ba66:	6863      	ldr	r3, [r4, #4]
 800ba68:	4650      	mov	r0, sl
 800ba6a:	9e01      	ldr	r6, [sp, #4]
 800ba6c:	47b0      	blx	r6
 800ba6e:	6821      	ldr	r1, [r4, #0]
 800ba70:	f8d8 3000 	ldr.w	r3, [r8]
 800ba74:	f011 0f20 	tst.w	r1, #32
 800ba78:	d013      	beq.n	800baa2 <_scanf_i+0x1c6>
 800ba7a:	1d1a      	adds	r2, r3, #4
 800ba7c:	f8c8 2000 	str.w	r2, [r8]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	6018      	str	r0, [r3, #0]
 800ba84:	68e3      	ldr	r3, [r4, #12]
 800ba86:	3301      	adds	r3, #1
 800ba88:	60e3      	str	r3, [r4, #12]
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	1bed      	subs	r5, r5, r7
 800ba8e:	44ab      	add	fp, r5
 800ba90:	6925      	ldr	r5, [r4, #16]
 800ba92:	445d      	add	r5, fp
 800ba94:	6125      	str	r5, [r4, #16]
 800ba96:	b007      	add	sp, #28
 800ba98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9c:	f04f 0b00 	mov.w	fp, #0
 800baa0:	e7ca      	b.n	800ba38 <_scanf_i+0x15c>
 800baa2:	1d1a      	adds	r2, r3, #4
 800baa4:	f8c8 2000 	str.w	r2, [r8]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f011 0f01 	tst.w	r1, #1
 800baae:	bf14      	ite	ne
 800bab0:	8018      	strhne	r0, [r3, #0]
 800bab2:	6018      	streq	r0, [r3, #0]
 800bab4:	e7e6      	b.n	800ba84 <_scanf_i+0x1a8>
 800bab6:	2001      	movs	r0, #1
 800bab8:	e7ed      	b.n	800ba96 <_scanf_i+0x1ba>
 800baba:	bf00      	nop
 800babc:	0800c0b4 	.word	0x0800c0b4
 800bac0:	0800a769 	.word	0x0800a769
 800bac4:	0800a66d 	.word	0x0800a66d
 800bac8:	0800c5a1 	.word	0x0800c5a1

0800bacc <__sccl>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	780b      	ldrb	r3, [r1, #0]
 800bad0:	4604      	mov	r4, r0
 800bad2:	2b5e      	cmp	r3, #94	; 0x5e
 800bad4:	bf13      	iteet	ne
 800bad6:	2200      	movne	r2, #0
 800bad8:	2201      	moveq	r2, #1
 800bada:	784b      	ldrbeq	r3, [r1, #1]
 800badc:	1c48      	addne	r0, r1, #1
 800bade:	bf08      	it	eq
 800bae0:	1c88      	addeq	r0, r1, #2
 800bae2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bae6:	1e61      	subs	r1, r4, #1
 800bae8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800baec:	42a9      	cmp	r1, r5
 800baee:	d1fb      	bne.n	800bae8 <__sccl+0x1c>
 800baf0:	b90b      	cbnz	r3, 800baf6 <__sccl+0x2a>
 800baf2:	3801      	subs	r0, #1
 800baf4:	bd70      	pop	{r4, r5, r6, pc}
 800baf6:	f082 0201 	eor.w	r2, r2, #1
 800bafa:	4605      	mov	r5, r0
 800bafc:	54e2      	strb	r2, [r4, r3]
 800bafe:	4628      	mov	r0, r5
 800bb00:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bb04:	292d      	cmp	r1, #45	; 0x2d
 800bb06:	d006      	beq.n	800bb16 <__sccl+0x4a>
 800bb08:	295d      	cmp	r1, #93	; 0x5d
 800bb0a:	d0f3      	beq.n	800baf4 <__sccl+0x28>
 800bb0c:	b909      	cbnz	r1, 800bb12 <__sccl+0x46>
 800bb0e:	4628      	mov	r0, r5
 800bb10:	e7f0      	b.n	800baf4 <__sccl+0x28>
 800bb12:	460b      	mov	r3, r1
 800bb14:	e7f1      	b.n	800bafa <__sccl+0x2e>
 800bb16:	786e      	ldrb	r6, [r5, #1]
 800bb18:	2e5d      	cmp	r6, #93	; 0x5d
 800bb1a:	d0fa      	beq.n	800bb12 <__sccl+0x46>
 800bb1c:	42b3      	cmp	r3, r6
 800bb1e:	dcf8      	bgt.n	800bb12 <__sccl+0x46>
 800bb20:	4619      	mov	r1, r3
 800bb22:	3502      	adds	r5, #2
 800bb24:	3101      	adds	r1, #1
 800bb26:	428e      	cmp	r6, r1
 800bb28:	5462      	strb	r2, [r4, r1]
 800bb2a:	dcfb      	bgt.n	800bb24 <__sccl+0x58>
 800bb2c:	1af1      	subs	r1, r6, r3
 800bb2e:	3901      	subs	r1, #1
 800bb30:	42b3      	cmp	r3, r6
 800bb32:	bfa8      	it	ge
 800bb34:	2100      	movge	r1, #0
 800bb36:	1c58      	adds	r0, r3, #1
 800bb38:	1843      	adds	r3, r0, r1
 800bb3a:	e7e0      	b.n	800bafe <__sccl+0x32>

0800bb3c <__submore>:
 800bb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb40:	460c      	mov	r4, r1
 800bb42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bb44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb48:	4299      	cmp	r1, r3
 800bb4a:	d11b      	bne.n	800bb84 <__submore+0x48>
 800bb4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bb50:	f7fd ff34 	bl	80099bc <_malloc_r>
 800bb54:	b918      	cbnz	r0, 800bb5e <__submore+0x22>
 800bb56:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb62:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb64:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bb68:	6360      	str	r0, [r4, #52]	; 0x34
 800bb6a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bb6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bb72:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bb76:	7043      	strb	r3, [r0, #1]
 800bb78:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bb7c:	7003      	strb	r3, [r0, #0]
 800bb7e:	6020      	str	r0, [r4, #0]
 800bb80:	2000      	movs	r0, #0
 800bb82:	e7ea      	b.n	800bb5a <__submore+0x1e>
 800bb84:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bb86:	0077      	lsls	r7, r6, #1
 800bb88:	463a      	mov	r2, r7
 800bb8a:	f7ff fc49 	bl	800b420 <_realloc_r>
 800bb8e:	4605      	mov	r5, r0
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d0e0      	beq.n	800bb56 <__submore+0x1a>
 800bb94:	eb00 0806 	add.w	r8, r0, r6
 800bb98:	4601      	mov	r1, r0
 800bb9a:	4632      	mov	r2, r6
 800bb9c:	4640      	mov	r0, r8
 800bb9e:	f7fe ffdb 	bl	800ab58 <memcpy>
 800bba2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bba6:	f8c4 8000 	str.w	r8, [r4]
 800bbaa:	e7e9      	b.n	800bb80 <__submore+0x44>

0800bbac <_malloc_usable_size_r>:
 800bbac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbb0:	1f18      	subs	r0, r3, #4
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	bfbc      	itt	lt
 800bbb6:	580b      	ldrlt	r3, [r1, r0]
 800bbb8:	18c0      	addlt	r0, r0, r3
 800bbba:	4770      	bx	lr

0800bbbc <sqrt>:
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	460f      	mov	r7, r1
 800bbc2:	f000 f81f 	bl	800bc04 <__ieee754_sqrt>
 800bbc6:	4632      	mov	r2, r6
 800bbc8:	4604      	mov	r4, r0
 800bbca:	460d      	mov	r5, r1
 800bbcc:	463b      	mov	r3, r7
 800bbce:	4630      	mov	r0, r6
 800bbd0:	4639      	mov	r1, r7
 800bbd2:	f7f4 ff23 	bl	8000a1c <__aeabi_dcmpun>
 800bbd6:	b990      	cbnz	r0, 800bbfe <sqrt+0x42>
 800bbd8:	2200      	movs	r2, #0
 800bbda:	2300      	movs	r3, #0
 800bbdc:	4630      	mov	r0, r6
 800bbde:	4639      	mov	r1, r7
 800bbe0:	f7f4 fef4 	bl	80009cc <__aeabi_dcmplt>
 800bbe4:	b158      	cbz	r0, 800bbfe <sqrt+0x42>
 800bbe6:	f7fd fe4b 	bl	8009880 <__errno>
 800bbea:	2321      	movs	r3, #33	; 0x21
 800bbec:	2200      	movs	r2, #0
 800bbee:	6003      	str	r3, [r0, #0]
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	f7f4 fda1 	bl	800073c <__aeabi_ddiv>
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	460d      	mov	r5, r1
 800bbfe:	4620      	mov	r0, r4
 800bc00:	4629      	mov	r1, r5
 800bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc04 <__ieee754_sqrt>:
 800bc04:	f8df c158 	ldr.w	ip, [pc, #344]	; 800bd60 <__ieee754_sqrt+0x15c>
 800bc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0c:	ea3c 0c01 	bics.w	ip, ip, r1
 800bc10:	4606      	mov	r6, r0
 800bc12:	460d      	mov	r5, r1
 800bc14:	460c      	mov	r4, r1
 800bc16:	460a      	mov	r2, r1
 800bc18:	4607      	mov	r7, r0
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	d10f      	bne.n	800bc3e <__ieee754_sqrt+0x3a>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	f7f4 fc61 	bl	80004e8 <__aeabi_dmul>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	f7f4 faa5 	bl	800017c <__adddf3>
 800bc32:	4606      	mov	r6, r0
 800bc34:	460d      	mov	r5, r1
 800bc36:	4630      	mov	r0, r6
 800bc38:	4629      	mov	r1, r5
 800bc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc3e:	2900      	cmp	r1, #0
 800bc40:	dc0e      	bgt.n	800bc60 <__ieee754_sqrt+0x5c>
 800bc42:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bc46:	ea5c 0707 	orrs.w	r7, ip, r7
 800bc4a:	d0f4      	beq.n	800bc36 <__ieee754_sqrt+0x32>
 800bc4c:	b141      	cbz	r1, 800bc60 <__ieee754_sqrt+0x5c>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	460b      	mov	r3, r1
 800bc52:	f7f4 fa91 	bl	8000178 <__aeabi_dsub>
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	f7f4 fd6f 	bl	800073c <__aeabi_ddiv>
 800bc5e:	e7e8      	b.n	800bc32 <__ieee754_sqrt+0x2e>
 800bc60:	1521      	asrs	r1, r4, #20
 800bc62:	d075      	beq.n	800bd50 <__ieee754_sqrt+0x14c>
 800bc64:	07cc      	lsls	r4, r1, #31
 800bc66:	f04f 0400 	mov.w	r4, #0
 800bc6a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bc6e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800bc72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bc76:	bf5e      	ittt	pl
 800bc78:	0fd9      	lsrpl	r1, r3, #31
 800bc7a:	005b      	lslpl	r3, r3, #1
 800bc7c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800bc80:	0fd9      	lsrs	r1, r3, #31
 800bc82:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800bc86:	2516      	movs	r5, #22
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bc8e:	107f      	asrs	r7, r7, #1
 800bc90:	005b      	lsls	r3, r3, #1
 800bc92:	1846      	adds	r6, r0, r1
 800bc94:	4296      	cmp	r6, r2
 800bc96:	bfde      	ittt	le
 800bc98:	1b92      	suble	r2, r2, r6
 800bc9a:	1870      	addle	r0, r6, r1
 800bc9c:	1864      	addle	r4, r4, r1
 800bc9e:	0052      	lsls	r2, r2, #1
 800bca0:	3d01      	subs	r5, #1
 800bca2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bca6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bcaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bcae:	d1f0      	bne.n	800bc92 <__ieee754_sqrt+0x8e>
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	f04f 0e20 	mov.w	lr, #32
 800bcb6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bcba:	4282      	cmp	r2, r0
 800bcbc:	eb06 0c05 	add.w	ip, r6, r5
 800bcc0:	dc02      	bgt.n	800bcc8 <__ieee754_sqrt+0xc4>
 800bcc2:	d113      	bne.n	800bcec <__ieee754_sqrt+0xe8>
 800bcc4:	459c      	cmp	ip, r3
 800bcc6:	d811      	bhi.n	800bcec <__ieee754_sqrt+0xe8>
 800bcc8:	f1bc 0f00 	cmp.w	ip, #0
 800bccc:	eb0c 0506 	add.w	r5, ip, r6
 800bcd0:	da43      	bge.n	800bd5a <__ieee754_sqrt+0x156>
 800bcd2:	2d00      	cmp	r5, #0
 800bcd4:	db41      	blt.n	800bd5a <__ieee754_sqrt+0x156>
 800bcd6:	f100 0801 	add.w	r8, r0, #1
 800bcda:	1a12      	subs	r2, r2, r0
 800bcdc:	4640      	mov	r0, r8
 800bcde:	459c      	cmp	ip, r3
 800bce0:	bf88      	it	hi
 800bce2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bce6:	eba3 030c 	sub.w	r3, r3, ip
 800bcea:	4431      	add	r1, r6
 800bcec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bcf0:	f1be 0e01 	subs.w	lr, lr, #1
 800bcf4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800bcf8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bcfc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bd00:	d1db      	bne.n	800bcba <__ieee754_sqrt+0xb6>
 800bd02:	4313      	orrs	r3, r2
 800bd04:	d006      	beq.n	800bd14 <__ieee754_sqrt+0x110>
 800bd06:	1c48      	adds	r0, r1, #1
 800bd08:	bf0b      	itete	eq
 800bd0a:	4671      	moveq	r1, lr
 800bd0c:	3101      	addne	r1, #1
 800bd0e:	3401      	addeq	r4, #1
 800bd10:	f021 0101 	bicne.w	r1, r1, #1
 800bd14:	1063      	asrs	r3, r4, #1
 800bd16:	0849      	lsrs	r1, r1, #1
 800bd18:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bd1c:	07e2      	lsls	r2, r4, #31
 800bd1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bd22:	bf48      	it	mi
 800bd24:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bd28:	460e      	mov	r6, r1
 800bd2a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bd2e:	e782      	b.n	800bc36 <__ieee754_sqrt+0x32>
 800bd30:	0ada      	lsrs	r2, r3, #11
 800bd32:	3815      	subs	r0, #21
 800bd34:	055b      	lsls	r3, r3, #21
 800bd36:	2a00      	cmp	r2, #0
 800bd38:	d0fa      	beq.n	800bd30 <__ieee754_sqrt+0x12c>
 800bd3a:	02d5      	lsls	r5, r2, #11
 800bd3c:	d50a      	bpl.n	800bd54 <__ieee754_sqrt+0x150>
 800bd3e:	f1c1 0420 	rsb	r4, r1, #32
 800bd42:	fa23 f404 	lsr.w	r4, r3, r4
 800bd46:	1e4d      	subs	r5, r1, #1
 800bd48:	408b      	lsls	r3, r1
 800bd4a:	4322      	orrs	r2, r4
 800bd4c:	1b41      	subs	r1, r0, r5
 800bd4e:	e789      	b.n	800bc64 <__ieee754_sqrt+0x60>
 800bd50:	4608      	mov	r0, r1
 800bd52:	e7f0      	b.n	800bd36 <__ieee754_sqrt+0x132>
 800bd54:	0052      	lsls	r2, r2, #1
 800bd56:	3101      	adds	r1, #1
 800bd58:	e7ef      	b.n	800bd3a <__ieee754_sqrt+0x136>
 800bd5a:	4680      	mov	r8, r0
 800bd5c:	e7bd      	b.n	800bcda <__ieee754_sqrt+0xd6>
 800bd5e:	bf00      	nop
 800bd60:	7ff00000 	.word	0x7ff00000

0800bd64 <_init>:
 800bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd66:	bf00      	nop
 800bd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6a:	bc08      	pop	{r3}
 800bd6c:	469e      	mov	lr, r3
 800bd6e:	4770      	bx	lr

0800bd70 <_fini>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	bf00      	nop
 800bd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd76:	bc08      	pop	{r3}
 800bd78:	469e      	mov	lr, r3
 800bd7a:	4770      	bx	lr
