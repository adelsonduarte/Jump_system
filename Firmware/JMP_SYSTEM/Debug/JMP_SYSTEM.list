
JMP_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  0800bb0c  0800bb0c  0001bb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c328  0800c328  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c328  0800c328  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c328  0800c328  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c328  0800c328  0001c328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c32c  0800c32c  0001c32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800c330  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  200001d0  0800c500  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  0800c500  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a91  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004083  00000000  00000000  00035c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  00039d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  0003b408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d32e  00000000  00000000  0003c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001baa4  00000000  00000000  00059c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f69  00000000  00000000  000756b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010661b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069a8  00000000  00000000  0010666c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d0 	.word	0x200001d0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800baf4 	.word	0x0800baf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d4 	.word	0x200001d4
 8000148:	0800baf4 	.word	0x0800baf4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2uiz>:
 8000a48:	004a      	lsls	r2, r1, #1
 8000a4a:	d211      	bcs.n	8000a70 <__aeabi_d2uiz+0x28>
 8000a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a50:	d211      	bcs.n	8000a76 <__aeabi_d2uiz+0x2e>
 8000a52:	d50d      	bpl.n	8000a70 <__aeabi_d2uiz+0x28>
 8000a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a5c:	d40e      	bmi.n	8000a7c <__aeabi_d2uiz+0x34>
 8000a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7a:	d102      	bne.n	8000a82 <__aeabi_d2uiz+0x3a>
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	4770      	bx	lr
 8000a82:	f04f 0000 	mov.w	r0, #0
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <eraseStateMachine>:
        unsigned char menuState;
//        struct dataInsert menuInsert;
    };

unsigned char eraseStateMachine(struct Menu* subMenu)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuErase = subMenu;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	613b      	str	r3, [r7, #16]
    unsigned char key = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	75fb      	strb	r3, [r7, #23]
    unsigned char index = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	72fb      	strb	r3, [r7, #11]
    unsigned char displayUpdateStatus = IDDLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	72bb      	strb	r3, [r7, #10]
    //unsigned char cursorPosition[2] = {0,0};
    unsigned char* ptr_eraseString;
    while(key != MENU)
 8000cbc:	e08d      	b.n	8000dda <eraseStateMachine+0x136>
    {
        switch(subMenuErase->menuState)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	78db      	ldrb	r3, [r3, #3]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d077      	beq.n	8000db6 <eraseStateMachine+0x112>
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	f300 8087 	bgt.w	8000dda <eraseStateMachine+0x136>
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <eraseStateMachine+0x32>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d008      	beq.n	8000ce6 <eraseStateMachine+0x42>
 8000cd4:	e081      	b.n	8000dda <eraseStateMachine+0x136>
        {
            case IDDLE:
                subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f003 fc0e 	bl	80044f8 <getNextSub>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	70da      	strb	r2, [r3, #3]
            break;
 8000ce4:	e079      	b.n	8000dda <eraseStateMachine+0x136>

            case VERFICA_APAGAR:
                updateUserMsg(0,USERMSG1,eraseselectUserMsg,&displayUpdateStatus);
 8000ce6:	4b41      	ldr	r3, [pc, #260]	; (8000dec <eraseStateMachine+0x148>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	f107 030a 	add.w	r3, r7, #10
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f001 ff14 	bl	8002b1e <updateUserMsg>
                ptr_eraseString = getEraseTestString();
 8000cf6:	f001 fc55 	bl	80025a4 <getEraseTestString>
 8000cfa:	60f8      	str	r0, [r7, #12]
                HW_PRINT_DATA(0,INSERTMSG,ptr_eraseString);
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	2102      	movs	r1, #2
 8000d00:	2000      	movs	r0, #0
 8000d02:	f002 fedd 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8000d06:	4b3a      	ldr	r3, [pc, #232]	; (8000df0 <eraseStateMachine+0x14c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	2103      	movs	r1, #3
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f002 fed6 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8000d14:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <eraseStateMachine+0x14c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 fac5 	bl	80022a8 <stringLenght>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4618      	mov	r0, r3
 8000d22:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <eraseStateMachine+0x150>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	2103      	movs	r1, #3
 8000d2a:	f002 fec9 	bl	8003ac0 <HW_PRINT_DATA>

                key = getKeyPressed();
 8000d2e:	f004 f9a7 	bl	8005080 <getKeyPressed>
 8000d32:	4603      	mov	r3, r0
 8000d34:	75fb      	strb	r3, [r7, #23]

                if(key == INSERIR)
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	2b49      	cmp	r3, #73	; 0x49
 8000d3a:	d10e      	bne.n	8000d5a <eraseStateMachine+0xb6>
                {
                	resetKeyPressed();
 8000d3c:	f004 f9ac 	bl	8005098 <resetKeyPressed>
                    setUserErase(&index);
 8000d40:	f107 030b 	add.w	r3, r7, #11
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 fc91 	bl	800266c <setUserErase>
                    subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f003 fbd4 	bl	80044f8 <getNextSub>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	70da      	strb	r2, [r3, #3]
 8000d58:	e03f      	b.n	8000dda <eraseStateMachine+0x136>
                }
                else if(key == CONFIRMAR)
 8000d5a:	7dfb      	ldrb	r3, [r7, #23]
 8000d5c:	2b43      	cmp	r3, #67	; 0x43
 8000d5e:	d13c      	bne.n	8000dda <eraseStateMachine+0x136>
                {
                	resetKeyPressed();
 8000d60:	f004 f99a 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8000d64:	f107 030a 	add.w	r3, r7, #10
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fef3 	bl	8002b54 <readyUserInterface>
                    if(*ptr_eraseString == '5')
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b35      	cmp	r3, #53	; 0x35
 8000d74:	d111      	bne.n	8000d9a <eraseStateMachine+0xf6>
                    {
                        updateUserMsg(3,2,erasingUserMsg,&displayUpdateStatus);
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <eraseStateMachine+0x154>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	f107 030a 	add.w	r3, r7, #10
 8000d7e:	2102      	movs	r1, #2
 8000d80:	2003      	movs	r0, #3
 8000d82:	f001 fecc 	bl	8002b1e <updateUserMsg>
                        resetMyResults();
 8000d86:	f001 f9b9 	bl	80020fc <resetMyResults>
                        //subMenuErase->menuSelect = setSelectSub(&subMenuErase->menuState);
                        subMenuErase->menuState = getNextSub(CONFIRMA_APAGAR);
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f003 fbb4 	bl	80044f8 <getNextSub>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	70da      	strb	r2, [r3, #3]
 8000d98:	e01f      	b.n	8000dda <eraseStateMachine+0x136>
                    }
                    else if(*ptr_eraseString == '2')
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b32      	cmp	r3, #50	; 0x32
 8000da0:	d11b      	bne.n	8000dda <eraseStateMachine+0x136>
                    {
                     subMenuErase->menuState = getNextSub(IDDLE);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f003 fba8 	bl	80044f8 <getNextSub>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	70da      	strb	r2, [r3, #3]
                      key = MENU;
 8000db0:	234d      	movs	r3, #77	; 0x4d
 8000db2:	75fb      	strb	r3, [r7, #23]
                    }
                }

            break;
 8000db4:	e011      	b.n	8000dda <eraseStateMachine+0x136>

            case CONFIRMA_APAGAR:
                updateUserMsg(3,2,erasedUserMsg,&displayUpdateStatus);
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <eraseStateMachine+0x158>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	f107 030a 	add.w	r3, r7, #10
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f001 feac 	bl	8002b1e <updateUserMsg>
                subMenuErase->menuState = getNextSub(IDDLE);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f003 fb96 	bl	80044f8 <getNextSub>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	70da      	strb	r2, [r3, #3]
                key = MENU;
 8000dd4:	234d      	movs	r3, #77	; 0x4d
 8000dd6:	75fb      	strb	r3, [r7, #23]
                break;
 8000dd8:	bf00      	nop
    while(key != MENU)
 8000dda:	7dfb      	ldrb	r3, [r7, #23]
 8000ddc:	2b4d      	cmp	r3, #77	; 0x4d
 8000dde:	f47f af6e 	bne.w	8000cbe <eraseStateMachine+0x1a>
        }
    }
}
 8000de2:	bf00      	nop
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000bc 	.word	0x200000bc
 8000df0:	200000d4 	.word	0x200000d4
 8000df4:	200000cc 	.word	0x200000cc
 8000df8:	200000c0 	.word	0x200000c0
 8000dfc:	200000c4 	.word	0x200000c4

08000e00 <configStateMachine>:
        unsigned char menuState;
//        struct dataInsert menuInsert;
    };

unsigned char configStateMachine(struct Menu* subMenu)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b096      	sub	sp, #88	; 0x58
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

	struct tm* configIntervalSeriesTimeStruct;



    struct Menu* subMenuTesteConfigurar = subMenu;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    //unsigned char cursorPosition[2] = {0,0};
    //verificar se vou usar
//    struct dataInsert measurementSensor1;
//    struct dataInsert measurementSensor2;
    //
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 8000e0c:	f001 f82a 	bl	8001e64 <getUserConfigStruct>
 8000e10:	64b8      	str	r0, [r7, #72]	; 0x48
    resetConfigStruct(ptr_userConfiguration);
 8000e12:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000e14:	f001 f934 	bl	8002080 <resetConfigStruct>

    //
    unsigned char key = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    unsigned char displayUpdateStatus = IDDLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]
    short index = 2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	81bb      	strh	r3, [r7, #12]
    unsigned int altMin = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	647b      	str	r3, [r7, #68]	; 0x44
    unsigned int altMax = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned int tmin = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	63fb      	str	r3, [r7, #60]	; 0x3c
    unsigned int tmax = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	63bb      	str	r3, [r7, #56]	; 0x38

    while(key != MENU)
 8000e36:	bf00      	nop
 8000e38:	f000 bda9 	b.w	800198e <configStateMachine+0xb8e>
    {
        switch(subMenuTesteConfigurar->menuState)
 8000e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e3e:	78db      	ldrb	r3, [r3, #3]
 8000e40:	2b0d      	cmp	r3, #13
 8000e42:	f200 85a4 	bhi.w	800198e <configStateMachine+0xb8e>
 8000e46:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <configStateMachine+0x4c>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000e85 	.word	0x08000e85
 8000e50:	08000e97 	.word	0x08000e97
 8000e54:	08000f41 	.word	0x08000f41
 8000e58:	08000feb 	.word	0x08000feb
 8000e5c:	08001101 	.word	0x08001101
 8000e60:	08001233 	.word	0x08001233
 8000e64:	08001325 	.word	0x08001325
 8000e68:	08001439 	.word	0x08001439
 8000e6c:	08001525 	.word	0x08001525
 8000e70:	080015fd 	.word	0x080015fd
 8000e74:	080016ef 	.word	0x080016ef
 8000e78:	08001821 	.word	0x08001821
 8000e7c:	080018c5 	.word	0x080018c5
 8000e80:	08001969 	.word	0x08001969
        {
        case IDDLE:
            subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f003 fb37 	bl	80044f8 <getNextSub>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e90:	70da      	strb	r2, [r3, #3]

            break;
 8000e92:	f000 bd7c 	b.w	800198e <configStateMachine+0xb8e>
            case CONFIG_SENSOR_1:
                updateUserMsg(0,USERMSG1,sensor1UserMsg,&displayUpdateStatus);
 8000e96:	4bcc      	ldr	r3, [pc, #816]	; (80011c8 <configStateMachine+0x3c8>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	f107 030f 	add.w	r3, r7, #15
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f001 fe3c 	bl	8002b1e <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8000ea6:	4bc9      	ldr	r3, [pc, #804]	; (80011cc <configStateMachine+0x3cc>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2102      	movs	r1, #2
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f002 fe06 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8000eb4:	4bc5      	ldr	r3, [pc, #788]	; (80011cc <configStateMachine+0x3cc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 f9f5 	bl	80022a8 <stringLenght>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	4bc3      	ldr	r3, [pc, #780]	; (80011d0 <configStateMachine+0x3d0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	2102      	movs	r1, #2
 8000eca:	f002 fdf9 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8000ece:	4bc1      	ldr	r3, [pc, #772]	; (80011d4 <configStateMachine+0x3d4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f002 fdf2 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 8000edc:	f004 f8d0 	bl	8005080 <getKeyPressed>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == AVANCAR)
 8000ee6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000eea:	2b41      	cmp	r3, #65	; 0x41
 8000eec:	d10f      	bne.n	8000f0e <configStateMachine+0x10e>
                {
                	resetKeyPressed();
 8000eee:	f004 f8d3 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8000ef2:	f107 030f 	add.w	r3, r7, #15
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fe2c 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_2);
 8000efc:	2002      	movs	r0, #2
 8000efe:	f003 fafb 	bl	80044f8 <getNextSub>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f08:	70da      	strb	r2, [r3, #3]
 8000f0a:	f000 bd40 	b.w	800198e <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 8000f0e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000f12:	2b43      	cmp	r3, #67	; 0x43
 8000f14:	f040 853b 	bne.w	800198e <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 8000f18:	f004 f8be 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8000f1c:	f107 030f 	add.w	r3, r7, #15
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fe17 	bl	8002b54 <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 1;
 8000f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f003 fae2 	bl	80044f8 <getNextSub>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f3a:	70da      	strb	r2, [r3, #3]
                }

                break;
 8000f3c:	f000 bd27 	b.w	800198e <configStateMachine+0xb8e>

            case CONFIG_SENSOR_2:
                updateUserMsg(0,0,sensor2UserMsg,&displayUpdateStatus);
 8000f40:	4ba5      	ldr	r3, [pc, #660]	; (80011d8 <configStateMachine+0x3d8>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	f107 030f 	add.w	r3, r7, #15
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f001 fde7 	bl	8002b1e <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8000f50:	4b9e      	ldr	r3, [pc, #632]	; (80011cc <configStateMachine+0x3cc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	2102      	movs	r1, #2
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f002 fdb1 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8000f5e:	4b9b      	ldr	r3, [pc, #620]	; (80011cc <configStateMachine+0x3cc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 f9a0 	bl	80022a8 <stringLenght>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	4b98      	ldr	r3, [pc, #608]	; (80011d0 <configStateMachine+0x3d0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	2102      	movs	r1, #2
 8000f74:	f002 fda4 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8000f78:	4b96      	ldr	r3, [pc, #600]	; (80011d4 <configStateMachine+0x3d4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2103      	movs	r1, #3
 8000f80:	2000      	movs	r0, #0
 8000f82:	f002 fd9d 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 8000f86:	f004 f87b 	bl	8005080 <getKeyPressed>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == AVANCAR)
 8000f90:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000f94:	2b41      	cmp	r3, #65	; 0x41
 8000f96:	d10f      	bne.n	8000fb8 <configStateMachine+0x1b8>
                {
                	resetKeyPressed();
 8000f98:	f004 f87e 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8000f9c:	f107 030f 	add.w	r3, r7, #15
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 fdd7 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f003 faa6 	bl	80044f8 <getNextSub>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fb2:	70da      	strb	r2, [r3, #3]
 8000fb4:	f000 bceb 	b.w	800198e <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 8000fb8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fbc:	2b43      	cmp	r3, #67	; 0x43
 8000fbe:	f040 84e6 	bne.w	800198e <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 8000fc2:	f004 f869 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8000fc6:	f107 030f 	add.w	r3, r7, #15
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fdc2 	bl	8002b54 <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 2;
 8000fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f003 fa8d 	bl	80044f8 <getNextSub>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fe4:	70da      	strb	r2, [r3, #3]
                }
                break;
 8000fe6:	f000 bcd2 	b.w	800198e <configStateMachine+0xb8e>

            case SENSOR_ALTMIN:
                updateUserMsg(0,USERMSG1,altminUserMsg,&displayUpdateStatus);
 8000fea:	4b7c      	ldr	r3, [pc, #496]	; (80011dc <configStateMachine+0x3dc>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f107 030f 	add.w	r3, r7, #15
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f001 fd92 	bl	8002b1e <updateUserMsg>
                ptr_altMinString = getAltMinString();
 8000ffa:	f001 f9b7 	bl	800236c <getAltMinString>
 8000ffe:	6578      	str	r0, [r7, #84]	; 0x54
                HW_PRINT_DATA(0,USERMSG2,ptr_altMinString);
 8001000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001002:	2101      	movs	r1, #1
 8001004:	2000      	movs	r0, #0
 8001006:	f002 fd5b 	bl	8003ac0 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 800100a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800100e:	2101      	movs	r1, #1
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fd7b 	bl	8003b0c <HW_UPDATE_DATA>

				HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001016:	4b6d      	ldr	r3, [pc, #436]	; (80011cc <configStateMachine+0x3cc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	2102      	movs	r1, #2
 800101e:	2000      	movs	r0, #0
 8001020:	f002 fd4e 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001024:	4b69      	ldr	r3, [pc, #420]	; (80011cc <configStateMachine+0x3cc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f001 f93d 	bl	80022a8 <stringLenght>
 800102e:	4603      	mov	r3, r0
 8001030:	4618      	mov	r0, r3
 8001032:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <configStateMachine+0x3d0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	2102      	movs	r1, #2
 800103a:	f002 fd41 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800103e:	4b65      	ldr	r3, [pc, #404]	; (80011d4 <configStateMachine+0x3d4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	2103      	movs	r1, #3
 8001046:	2000      	movs	r0, #0
 8001048:	f002 fd3a 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 800104c:	4b61      	ldr	r3, [pc, #388]	; (80011d4 <configStateMachine+0x3d4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f001 f929 	bl	80022a8 <stringLenght>
 8001056:	4603      	mov	r3, r0
 8001058:	4618      	mov	r0, r3
 800105a:	4b61      	ldr	r3, [pc, #388]	; (80011e0 <configStateMachine+0x3e0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	2103      	movs	r1, #3
 8001062:	f002 fd2d 	bl	8003ac0 <HW_PRINT_DATA>

                key = getKeyPressed();
 8001066:	f004 f80b 	bl	8005080 <getKeyPressed>
 800106a:	4603      	mov	r3, r0
 800106c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 8001070:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001074:	2b49      	cmp	r3, #73	; 0x49
 8001076:	d10f      	bne.n	8001098 <configStateMachine+0x298>
                {
                	resetKeyPressed();
 8001078:	f004 f80e 	bl	8005098 <resetKeyPressed>
                    setUserAltMin(&index);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4618      	mov	r0, r3
 8001082:	f001 facf 	bl	8002624 <setUserAltMin>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8001086:	2003      	movs	r0, #3
 8001088:	f003 fa36 	bl	80044f8 <getNextSub>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001092:	70da      	strb	r2, [r3, #3]
 8001094:	f000 bc7b 	b.w	800198e <configStateMachine+0xb8e>
                }
                else if(key == AVANCAR)
 8001098:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800109c:	2b41      	cmp	r3, #65	; 0x41
 800109e:	d109      	bne.n	80010b4 <configStateMachine+0x2b4>
                {
                	resetKeyPressed();
 80010a0:	f003 fffa 	bl	8005098 <resetKeyPressed>
                    indexChange(&index,2);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2102      	movs	r1, #2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 f940 	bl	8002330 <indexChange>
 80010b0:	f000 bc6d 	b.w	800198e <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 80010b4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80010b8:	2b43      	cmp	r3, #67	; 0x43
 80010ba:	f040 8468 	bne.w	800198e <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 80010be:	f003 ffeb 	bl	8005098 <resetKeyPressed>
                    index = 2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	81bb      	strh	r3, [r7, #12]

                    altMin = stringToInt(getAltMinString());
 80010c6:	f001 f951 	bl	800236c <getAltMinString>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 f8d9 	bl	8002284 <stringToInt>
 80010d2:	6478      	str	r0, [r7, #68]	; 0x44
                    tmin = alturaToTempo(altMin);
 80010d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010d6:	f001 fcf1 	bl	8002abc <alturaToTempo>
 80010da:	4603      	mov	r3, r0
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    ptr_userConfiguration->userAlturaMin = tmin;
 80010de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010e2:	60da      	str	r2, [r3, #12]
                    readyUserInterface(&displayUpdateStatus);
 80010e4:	f107 030f 	add.w	r3, r7, #15
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fd33 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 80010ee:	2004      	movs	r0, #4
 80010f0:	f003 fa02 	bl	80044f8 <getNextSub>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010fa:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }
                break;
 80010fc:	f000 bc47 	b.w	800198e <configStateMachine+0xb8e>

            case SENSOR_ALTMAX:
                updateUserMsg(0,USERMSG1,altmaxUserMsg,&displayUpdateStatus);
 8001100:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <configStateMachine+0x3e4>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	f107 030f 	add.w	r3, r7, #15
 8001108:	2100      	movs	r1, #0
 800110a:	2000      	movs	r0, #0
 800110c:	f001 fd07 	bl	8002b1e <updateUserMsg>
                ptr_altMaxString = getAltMaxString();
 8001110:	f001 f94c 	bl	80023ac <getAltMaxString>
 8001114:	61f8      	str	r0, [r7, #28]
                HW_PRINT_DATA(0,USERMSG2,ptr_altMinString);
 8001116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001118:	2101      	movs	r1, #1
 800111a:	2000      	movs	r0, #0
 800111c:	f002 fcd0 	bl	8003ac0 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001120:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001124:	2101      	movs	r1, #1
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fcf0 	bl	8003b0c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <configStateMachine+0x3cc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	2102      	movs	r1, #2
 8001134:	2000      	movs	r0, #0
 8001136:	f002 fcc3 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <configStateMachine+0x3cc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f001 f8b2 	bl	80022a8 <stringLenght>
 8001144:	4603      	mov	r3, r0
 8001146:	4618      	mov	r0, r3
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <configStateMachine+0x3d0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	2102      	movs	r1, #2
 8001150:	f002 fcb6 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <configStateMachine+0x3d4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	2103      	movs	r1, #3
 800115c:	2000      	movs	r0, #0
 800115e:	f002 fcaf 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <configStateMachine+0x3d4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f001 f89e 	bl	80022a8 <stringLenght>
 800116c:	4603      	mov	r3, r0
 800116e:	4618      	mov	r0, r3
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <configStateMachine+0x3e0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	2103      	movs	r1, #3
 8001178:	f002 fca2 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 800117c:	f003 ff80 	bl	8005080 <getKeyPressed>
 8001180:	4603      	mov	r3, r0
 8001182:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 8001186:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800118a:	2b49      	cmp	r3, #73	; 0x49
 800118c:	d10e      	bne.n	80011ac <configStateMachine+0x3ac>
                {
                	resetKeyPressed();
 800118e:	f003 ff83 	bl	8005098 <resetKeyPressed>
                    setUserAltMax(&index);
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fa8d 	bl	80026b6 <setUserAltMax>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 800119c:	2004      	movs	r0, #4
 800119e:	f003 f9ab 	bl	80044f8 <getNextSub>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011a8:	70da      	strb	r2, [r3, #3]
 80011aa:	e3f0      	b.n	800198e <configStateMachine+0xb8e>
                }
                else if(key == AVANCAR)
 80011ac:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80011b0:	2b41      	cmp	r3, #65	; 0x41
 80011b2:	d119      	bne.n	80011e8 <configStateMachine+0x3e8>
                {
                	resetKeyPressed();
 80011b4:	f003 ff70 	bl	8005098 <resetKeyPressed>
                    indexChange(&index,2);
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2102      	movs	r1, #2
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 f8b6 	bl	8002330 <indexChange>
 80011c4:	e3e3      	b.n	800198e <configStateMachine+0xb8e>
 80011c6:	bf00      	nop
 80011c8:	2000007c 	.word	0x2000007c
 80011cc:	200000c8 	.word	0x200000c8
 80011d0:	200000d0 	.word	0x200000d0
 80011d4:	200000d4 	.word	0x200000d4
 80011d8:	20000080 	.word	0x20000080
 80011dc:	20000084 	.word	0x20000084
 80011e0:	200000cc 	.word	0x200000cc
 80011e4:	20000088 	.word	0x20000088
                }
                else if(key == CONFIRMAR)
 80011e8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80011ec:	2b43      	cmp	r3, #67	; 0x43
 80011ee:	f040 83ce 	bne.w	800198e <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 80011f2:	f003 ff51 	bl	8005098 <resetKeyPressed>
                    index = 2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	81bb      	strh	r3, [r7, #12]
                    altMax = stringToInt(getAltMaxString());
 80011fa:	f001 f8d7 	bl	80023ac <getAltMaxString>
 80011fe:	4603      	mov	r3, r0
 8001200:	4618      	mov	r0, r3
 8001202:	f001 f83f 	bl	8002284 <stringToInt>
 8001206:	6438      	str	r0, [r7, #64]	; 0x40
                    tmax = alturaToTempo(altMax);
 8001208:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800120a:	f001 fc57 	bl	8002abc <alturaToTempo>
 800120e:	4603      	mov	r3, r0
 8001210:	63bb      	str	r3, [r7, #56]	; 0x38
                    ptr_userConfiguration->userAlturaMax = tmax;
 8001212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001216:	611a      	str	r2, [r3, #16]
                    readyUserInterface(&displayUpdateStatus);
 8001218:	f107 030f 	add.w	r3, r7, #15
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fc99 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 8001222:	2005      	movs	r0, #5
 8001224:	f003 f968 	bl	80044f8 <getNextSub>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800122e:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }

                break;
 8001230:	e3ad      	b.n	800198e <configStateMachine+0xb8e>

            case SENSOR_SALTOS:
                updateUserMsg(0,USERMSG1,numsaltosUserMsg,&displayUpdateStatus);
 8001232:	4bb4      	ldr	r3, [pc, #720]	; (8001504 <configStateMachine+0x704>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	f107 030f 	add.w	r3, r7, #15
 800123a:	2100      	movs	r1, #0
 800123c:	2000      	movs	r0, #0
 800123e:	f001 fc6e 	bl	8002b1e <updateUserMsg>
                ptr_numSaltosString = getNumSaltosString();
 8001242:	f001 f8d3 	bl	80023ec <getNumSaltosString>
 8001246:	6238      	str	r0, [r7, #32]
                HW_PRINT_DATA(0,USERMSG2,ptr_numSaltosString);
 8001248:	6a3a      	ldr	r2, [r7, #32]
 800124a:	2101      	movs	r1, #1
 800124c:	2000      	movs	r0, #0
 800124e:	f002 fc37 	bl	8003ac0 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001252:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001256:	2101      	movs	r1, #1
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fc57 	bl	8003b0c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 800125e:	4baa      	ldr	r3, [pc, #680]	; (8001508 <configStateMachine+0x708>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	2102      	movs	r1, #2
 8001266:	2000      	movs	r0, #0
 8001268:	f002 fc2a 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800126c:	4ba6      	ldr	r3, [pc, #664]	; (8001508 <configStateMachine+0x708>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f001 f819 	bl	80022a8 <stringLenght>
 8001276:	4603      	mov	r3, r0
 8001278:	4618      	mov	r0, r3
 800127a:	4ba4      	ldr	r3, [pc, #656]	; (800150c <configStateMachine+0x70c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	2102      	movs	r1, #2
 8001282:	f002 fc1d 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001286:	4ba2      	ldr	r3, [pc, #648]	; (8001510 <configStateMachine+0x710>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	2103      	movs	r1, #3
 800128e:	2000      	movs	r0, #0
 8001290:	f002 fc16 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001294:	4b9e      	ldr	r3, [pc, #632]	; (8001510 <configStateMachine+0x710>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f001 f805 	bl	80022a8 <stringLenght>
 800129e:	4603      	mov	r3, r0
 80012a0:	4618      	mov	r0, r3
 80012a2:	4b9c      	ldr	r3, [pc, #624]	; (8001514 <configStateMachine+0x714>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	2103      	movs	r1, #3
 80012aa:	f002 fc09 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 80012ae:	f003 fee7 	bl	8005080 <getKeyPressed>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 80012b8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80012bc:	2b49      	cmp	r3, #73	; 0x49
 80012be:	d10e      	bne.n	80012de <configStateMachine+0x4de>
                {
                	resetKeyPressed();
 80012c0:	f003 feea 	bl	8005098 <resetKeyPressed>
                    setUserNumSaltos(&index);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fa18 	bl	80026fe <setUserNumSaltos>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 80012ce:	2005      	movs	r0, #5
 80012d0:	f003 f912 	bl	80044f8 <getNextSub>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012da:	70da      	strb	r2, [r3, #3]
 80012dc:	e357      	b.n	800198e <configStateMachine+0xb8e>
                }
                else if(key == AVANCAR)
 80012de:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80012e2:	2b41      	cmp	r3, #65	; 0x41
 80012e4:	d108      	bne.n	80012f8 <configStateMachine+0x4f8>
                {
                	resetKeyPressed();
 80012e6:	f003 fed7 	bl	8005098 <resetKeyPressed>
                    indexChange(&index,2);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2102      	movs	r1, #2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 f81d 	bl	8002330 <indexChange>
 80012f6:	e34a      	b.n	800198e <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 80012f8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80012fc:	2b43      	cmp	r3, #67	; 0x43
 80012fe:	f040 8346 	bne.w	800198e <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 8001302:	f003 fec9 	bl	8005098 <resetKeyPressed>
                    index = 4;
 8001306:	2304      	movs	r3, #4
 8001308:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus);
 800130a:	f107 030f 	add.w	r3, r7, #15
 800130e:	4618      	mov	r0, r3
 8001310:	f001 fc20 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 8001314:	2006      	movs	r0, #6
 8001316:	f003 f8ef 	bl	80044f8 <getNextSub>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001320:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }
                break;
 8001322:	e334      	b.n	800198e <configStateMachine+0xb8e>

            case SENSOR_INT_SALTOS:
                updateUserMsg(0,USERMSG1,intersaltosUserMsg,&displayUpdateStatus);
 8001324:	4b7c      	ldr	r3, [pc, #496]	; (8001518 <configStateMachine+0x718>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	f107 030f 	add.w	r3, r7, #15
 800132c:	2100      	movs	r1, #0
 800132e:	2000      	movs	r0, #0
 8001330:	f001 fbf5 	bl	8002b1e <updateUserMsg>
                configIntervalTimeStruct = getIntervalTimeStruct();
 8001334:	f000 fd1e 	bl	8001d74 <getIntervalTimeStruct>
 8001338:	4603      	mov	r3, r0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
                strftime(userIntervalTimeString, sizeof(userIntervalTimeString), "%M:%S", configIntervalTimeStruct);
 800133c:	f107 0010 	add.w	r0, r7, #16
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	4a76      	ldr	r2, [pc, #472]	; (800151c <configStateMachine+0x71c>)
 8001344:	2109      	movs	r1, #9
 8001346:	f008 ffe9 	bl	800a31c <strftime>
                HW_PRINT_DATA(0,USERMSG2,userIntervalTimeString);
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	461a      	mov	r2, r3
 8001350:	2101      	movs	r1, #1
 8001352:	2000      	movs	r0, #0
 8001354:	f002 fbb4 	bl	8003ac0 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001358:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800135c:	2101      	movs	r1, #1
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fbd4 	bl	8003b0c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001364:	4b68      	ldr	r3, [pc, #416]	; (8001508 <configStateMachine+0x708>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	2102      	movs	r1, #2
 800136c:	2000      	movs	r0, #0
 800136e:	f002 fba7 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001372:	4b65      	ldr	r3, [pc, #404]	; (8001508 <configStateMachine+0x708>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 ff96 	bl	80022a8 <stringLenght>
 800137c:	4603      	mov	r3, r0
 800137e:	4618      	mov	r0, r3
 8001380:	4b62      	ldr	r3, [pc, #392]	; (800150c <configStateMachine+0x70c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	2102      	movs	r1, #2
 8001388:	f002 fb9a 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800138c:	4b60      	ldr	r3, [pc, #384]	; (8001510 <configStateMachine+0x710>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	2103      	movs	r1, #3
 8001394:	2000      	movs	r0, #0
 8001396:	f002 fb93 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 800139a:	4b5d      	ldr	r3, [pc, #372]	; (8001510 <configStateMachine+0x710>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 ff82 	bl	80022a8 <stringLenght>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4618      	mov	r0, r3
 80013a8:	4b5a      	ldr	r3, [pc, #360]	; (8001514 <configStateMachine+0x714>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	2103      	movs	r1, #3
 80013b0:	f002 fb86 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 80013b4:	f003 fe64 	bl	8005080 <getKeyPressed>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 80013be:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80013c2:	2b49      	cmp	r3, #73	; 0x49
 80013c4:	d10e      	bne.n	80013e4 <configStateMachine+0x5e4>
                {
                	resetKeyPressed();
 80013c6:	f003 fe67 	bl	8005098 <resetKeyPressed>
                	setIntervalSaltosTime(&index);
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fa92 	bl	80028f8 <setIntervalSaltosTime>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 80013d4:	2006      	movs	r0, #6
 80013d6:	f003 f88f 	bl	80044f8 <getNextSub>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013e0:	70da      	strb	r2, [r3, #3]
 80013e2:	e2d4      	b.n	800198e <configStateMachine+0xb8e>
                }
                else if(key == AVANCAR)
 80013e4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80013e8:	2b41      	cmp	r3, #65	; 0x41
 80013ea:	d108      	bne.n	80013fe <configStateMachine+0x5fe>
				{
					resetKeyPressed();
 80013ec:	f003 fe54 	bl	8005098 <resetKeyPressed>
					indexColumn(&index,4);
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2104      	movs	r1, #4
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fede 	bl	80021b8 <indexColumn>
 80013fc:	e2c7      	b.n	800198e <configStateMachine+0xb8e>
				}
                else if(key == CONFIRMAR)
 80013fe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001402:	2b43      	cmp	r3, #67	; 0x43
 8001404:	f040 82c3 	bne.w	800198e <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 8001408:	f003 fe46 	bl	8005098 <resetKeyPressed>
                    index = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	81bb      	strh	r3, [r7, #12]
                    ptr_userConfiguration->userIntervalSaltos = milisecondsTime(configIntervalTimeStruct);
 8001410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001412:	f000 ff0c 	bl	800222e <milisecondsTime>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800141c:	619a      	str	r2, [r3, #24]
                    readyUserInterface(&displayUpdateStatus);
 800141e:	f107 030f 	add.w	r3, r7, #15
 8001422:	4618      	mov	r0, r3
 8001424:	f001 fb96 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 8001428:	2007      	movs	r0, #7
 800142a:	f003 f865 	bl	80044f8 <getNextSub>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001434:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }

                break;
 8001436:	e2aa      	b.n	800198e <configStateMachine+0xb8e>

            case SENSOR_JMP_SELECT:
                updateUserMsg(0,USERMSG1,tiposaltoUserMsg,&displayUpdateStatus);
 8001438:	4b39      	ldr	r3, [pc, #228]	; (8001520 <configStateMachine+0x720>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	f107 030f 	add.w	r3, r7, #15
 8001440:	2100      	movs	r1, #0
 8001442:	2000      	movs	r0, #0
 8001444:	f001 fb6b 	bl	8002b1e <updateUserMsg>
                ptr_jumpSelectString = getTypeJumpString();
 8001448:	f000 fff0 	bl	800242c <getTypeJumpString>
 800144c:	62b8      	str	r0, [r7, #40]	; 0x28
                HW_PRINT_DATA(0,USERMSG2,ptr_jumpSelectString);
 800144e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001450:	2101      	movs	r1, #1
 8001452:	2000      	movs	r0, #0
 8001454:	f002 fb34 	bl	8003ac0 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001458:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800145c:	2101      	movs	r1, #1
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fb54 	bl	8003b0c <HW_UPDATE_DATA>

				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <configStateMachine+0x710>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	2103      	movs	r1, #3
 800146c:	2000      	movs	r0, #0
 800146e:	f002 fb27 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <configStateMachine+0x710>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 ff16 	bl	80022a8 <stringLenght>
 800147c:	4603      	mov	r3, r0
 800147e:	4618      	mov	r0, r3
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <configStateMachine+0x714>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	2103      	movs	r1, #3
 8001488:	f002 fb1a 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 800148c:	f003 fdf8 	bl	8005080 <getKeyPressed>
 8001490:	4603      	mov	r3, r0
 8001492:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 8001496:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800149a:	2b49      	cmp	r3, #73	; 0x49
 800149c:	d10e      	bne.n	80014bc <configStateMachine+0x6bc>
                {
                	resetKeyPressed();
 800149e:	f003 fdfb 	bl	8005098 <resetKeyPressed>
                    setUserTypeJump(&index);
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 f94d 	bl	8002746 <setUserTypeJump>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 80014ac:	2007      	movs	r0, #7
 80014ae:	f003 f823 	bl	80044f8 <getNextSub>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b8:	70da      	strb	r2, [r3, #3]
 80014ba:	e268      	b.n	800198e <configStateMachine+0xb8e>

                }
                else if(key == CONFIRMAR)
 80014bc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80014c0:	2b43      	cmp	r3, #67	; 0x43
 80014c2:	f040 8264 	bne.w	800198e <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 80014c6:	f003 fde7 	bl	8005098 <resetKeyPressed>
                    if(*ptr_jumpSelectString == '3')
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b33      	cmp	r3, #51	; 0x33
 80014d0:	d109      	bne.n	80014e6 <configStateMachine+0x6e6>
                    {
                    	index = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 80014d6:	2008      	movs	r0, #8
 80014d8:	f003 f80e 	bl	80044f8 <getNextSub>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014e2:	70da      	strb	r2, [r3, #3]
 80014e4:	e008      	b.n	80014f8 <configStateMachine+0x6f8>
    //subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                    }
                    else
                    {
                    	index = 2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 80014ea:	2009      	movs	r0, #9
 80014ec:	f003 f804 	bl	80044f8 <getNextSub>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f6:	70da      	strb	r2, [r3, #3]
    //subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                    }
                    //TESTE trocar a variavel por uma local e o resultado enviar para ptr_userConfiguration->userCMJ.
                    readyUserInterface(&displayUpdateStatus);
 80014f8:	f107 030f 	add.w	r3, r7, #15
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 fb29 	bl	8002b54 <readyUserInterface>

                }

                break;
 8001502:	e244      	b.n	800198e <configStateMachine+0xb8e>
 8001504:	2000008c 	.word	0x2000008c
 8001508:	200000c8 	.word	0x200000c8
 800150c:	200000d0 	.word	0x200000d0
 8001510:	200000d4 	.word	0x200000d4
 8001514:	200000cc 	.word	0x200000cc
 8001518:	20000090 	.word	0x20000090
 800151c:	0800bb0c 	.word	0x0800bb0c
 8001520:	20000094 	.word	0x20000094

            case SENSOR_ALTDJ:
                updateUserMsg(0,USERMSG1,altdjUserMsg,&displayUpdateStatus);
 8001524:	4bb6      	ldr	r3, [pc, #728]	; (8001800 <configStateMachine+0xa00>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	f107 030f 	add.w	r3, r7, #15
 800152c:	2100      	movs	r1, #0
 800152e:	2000      	movs	r0, #0
 8001530:	f001 faf5 	bl	8002b1e <updateUserMsg>
                ptr_altDJString = getAltDJString();
 8001534:	f000 ff90 	bl	8002458 <getAltDJString>
 8001538:	62f8      	str	r0, [r7, #44]	; 0x2c
                HW_PRINT_DATA(0,USERMSG2,ptr_altDJString);
 800153a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800153c:	2101      	movs	r1, #1
 800153e:	2000      	movs	r0, #0
 8001540:	f002 fabe 	bl	8003ac0 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001544:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001548:	2101      	movs	r1, #1
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fade 	bl	8003b0c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001550:	4bac      	ldr	r3, [pc, #688]	; (8001804 <configStateMachine+0xa04>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	2102      	movs	r1, #2
 8001558:	2000      	movs	r0, #0
 800155a:	f002 fab1 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800155e:	4ba9      	ldr	r3, [pc, #676]	; (8001804 <configStateMachine+0xa04>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fea0 	bl	80022a8 <stringLenght>
 8001568:	4603      	mov	r3, r0
 800156a:	4618      	mov	r0, r3
 800156c:	4ba6      	ldr	r3, [pc, #664]	; (8001808 <configStateMachine+0xa08>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	2102      	movs	r1, #2
 8001574:	f002 faa4 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001578:	4ba4      	ldr	r3, [pc, #656]	; (800180c <configStateMachine+0xa0c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	2103      	movs	r1, #3
 8001580:	2000      	movs	r0, #0
 8001582:	f002 fa9d 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001586:	4ba1      	ldr	r3, [pc, #644]	; (800180c <configStateMachine+0xa0c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fe8c 	bl	80022a8 <stringLenght>
 8001590:	4603      	mov	r3, r0
 8001592:	4618      	mov	r0, r3
 8001594:	4b9e      	ldr	r3, [pc, #632]	; (8001810 <configStateMachine+0xa10>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	2103      	movs	r1, #3
 800159c:	f002 fa90 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 80015a0:	f003 fd6e 	bl	8005080 <getKeyPressed>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 80015aa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80015ae:	2b49      	cmp	r3, #73	; 0x49
 80015b0:	d10e      	bne.n	80015d0 <configStateMachine+0x7d0>
                {
                	resetKeyPressed();
 80015b2:	f003 fd71 	bl	8005098 <resetKeyPressed>
                    setUserAltDJ(&index);
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 f8e7 	bl	800278e <setUserAltDJ>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 80015c0:	2008      	movs	r0, #8
 80015c2:	f002 ff99 	bl	80044f8 <getNextSub>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015cc:	70da      	strb	r2, [r3, #3]
 80015ce:	e1de      	b.n	800198e <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 80015d0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80015d4:	2b43      	cmp	r3, #67	; 0x43
 80015d6:	f040 81da 	bne.w	800198e <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 80015da:	f003 fd5d 	bl	8005098 <resetKeyPressed>
                    index = 2;
 80015de:	2302      	movs	r3, #2
 80015e0:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus);
 80015e2:	f107 030f 	add.w	r3, r7, #15
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fab4 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 80015ec:	2009      	movs	r0, #9
 80015ee:	f002 ff83 	bl	80044f8 <getNextSub>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015f8:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }

                break;
 80015fa:	e1c8      	b.n	800198e <configStateMachine+0xb8e>

            case SENSOR_SERIES:
                updateUserMsg(0,USERMSG1,numserieUserMsg,&displayUpdateStatus);
 80015fc:	4b85      	ldr	r3, [pc, #532]	; (8001814 <configStateMachine+0xa14>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	f107 030f 	add.w	r3, r7, #15
 8001604:	2100      	movs	r1, #0
 8001606:	2000      	movs	r0, #0
 8001608:	f001 fa89 	bl	8002b1e <updateUserMsg>
                ptr_numSeriesString = getNumSeriesString();
 800160c:	f000 ff3e 	bl	800248c <getNumSeriesString>
 8001610:	6338      	str	r0, [r7, #48]	; 0x30
                HW_PRINT_DATA(0,USERMSG2,ptr_numSeriesString);
 8001612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001614:	2101      	movs	r1, #1
 8001616:	2000      	movs	r0, #0
 8001618:	f002 fa52 	bl	8003ac0 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 800161c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001620:	2101      	movs	r1, #1
 8001622:	4618      	mov	r0, r3
 8001624:	f002 fa72 	bl	8003b0c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001628:	4b76      	ldr	r3, [pc, #472]	; (8001804 <configStateMachine+0xa04>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	2102      	movs	r1, #2
 8001630:	2000      	movs	r0, #0
 8001632:	f002 fa45 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001636:	4b73      	ldr	r3, [pc, #460]	; (8001804 <configStateMachine+0xa04>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fe34 	bl	80022a8 <stringLenght>
 8001640:	4603      	mov	r3, r0
 8001642:	4618      	mov	r0, r3
 8001644:	4b70      	ldr	r3, [pc, #448]	; (8001808 <configStateMachine+0xa08>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	2102      	movs	r1, #2
 800164c:	f002 fa38 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001650:	4b6e      	ldr	r3, [pc, #440]	; (800180c <configStateMachine+0xa0c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	2103      	movs	r1, #3
 8001658:	2000      	movs	r0, #0
 800165a:	f002 fa31 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 800165e:	4b6b      	ldr	r3, [pc, #428]	; (800180c <configStateMachine+0xa0c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fe20 	bl	80022a8 <stringLenght>
 8001668:	4603      	mov	r3, r0
 800166a:	4618      	mov	r0, r3
 800166c:	4b68      	ldr	r3, [pc, #416]	; (8001810 <configStateMachine+0xa10>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	2103      	movs	r1, #3
 8001674:	f002 fa24 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001678:	f003 fd02 	bl	8005080 <getKeyPressed>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 8001682:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001686:	2b49      	cmp	r3, #73	; 0x49
 8001688:	d10e      	bne.n	80016a8 <configStateMachine+0x8a8>
                {
                	resetKeyPressed();
 800168a:	f003 fd05 	bl	8005098 <resetKeyPressed>
                    setUserNumSeries(&index);
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	4618      	mov	r0, r3
 8001694:	f001 f89f 	bl	80027d6 <setUserNumSeries>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8001698:	2009      	movs	r0, #9
 800169a:	f002 ff2d 	bl	80044f8 <getNextSub>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a4:	70da      	strb	r2, [r3, #3]
 80016a6:	e172      	b.n	800198e <configStateMachine+0xb8e>
                }
                else if(key == AVANCAR)
 80016a8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80016ac:	2b41      	cmp	r3, #65	; 0x41
 80016ae:	d108      	bne.n	80016c2 <configStateMachine+0x8c2>
				{
					resetKeyPressed();
 80016b0:	f003 fcf2 	bl	8005098 <resetKeyPressed>
					indexColumn(&index,2);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2102      	movs	r1, #2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd7c 	bl	80021b8 <indexColumn>
 80016c0:	e165      	b.n	800198e <configStateMachine+0xb8e>
				}
                else if(key == CONFIRMAR)
 80016c2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80016c6:	2b43      	cmp	r3, #67	; 0x43
 80016c8:	f040 8161 	bne.w	800198e <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 80016cc:	f003 fce4 	bl	8005098 <resetKeyPressed>
                    index = 2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus);
 80016d4:	f107 030f 	add.w	r3, r7, #15
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 fa3b 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 80016de:	200a      	movs	r0, #10
 80016e0:	f002 ff0a 	bl	80044f8 <getNextSub>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016ea:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }

                break;
 80016ec:	e14f      	b.n	800198e <configStateMachine+0xb8e>

            case SENSOR_INT_SERIES:
                updateUserMsg(0,USERMSG1,interseriesUserMsg,&displayUpdateStatus);
 80016ee:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <configStateMachine+0xa18>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f107 030f 	add.w	r3, r7, #15
 80016f6:	2100      	movs	r1, #0
 80016f8:	2000      	movs	r0, #0
 80016fa:	f001 fa10 	bl	8002b1e <updateUserMsg>
                configIntervalSeriesTimeStruct = getintervalSeriesTimeStruct();
 80016fe:	f000 fb43 	bl	8001d88 <getintervalSeriesTimeStruct>
 8001702:	6378      	str	r0, [r7, #52]	; 0x34
				strftime(userIntervalTimeString, sizeof(userIntervalTimeString), "%M:%S", configIntervalSeriesTimeStruct);
 8001704:	f107 0010 	add.w	r0, r7, #16
 8001708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170a:	4a44      	ldr	r2, [pc, #272]	; (800181c <configStateMachine+0xa1c>)
 800170c:	2109      	movs	r1, #9
 800170e:	f008 fe05 	bl	800a31c <strftime>
				HW_PRINT_DATA(0,USERMSG2,userIntervalTimeString);
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	461a      	mov	r2, r3
 8001718:	2101      	movs	r1, #1
 800171a:	2000      	movs	r0, #0
 800171c:	f002 f9d0 	bl	8003ac0 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001720:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001724:	2101      	movs	r1, #1
 8001726:	4618      	mov	r0, r3
 8001728:	f002 f9f0 	bl	8003b0c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 800172c:	4b35      	ldr	r3, [pc, #212]	; (8001804 <configStateMachine+0xa04>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	2102      	movs	r1, #2
 8001734:	2000      	movs	r0, #0
 8001736:	f002 f9c3 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800173a:	4b32      	ldr	r3, [pc, #200]	; (8001804 <configStateMachine+0xa04>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fdb2 	bl	80022a8 <stringLenght>
 8001744:	4603      	mov	r3, r0
 8001746:	4618      	mov	r0, r3
 8001748:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <configStateMachine+0xa08>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	2102      	movs	r1, #2
 8001750:	f002 f9b6 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <configStateMachine+0xa0c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	2103      	movs	r1, #3
 800175c:	2000      	movs	r0, #0
 800175e:	f002 f9af 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <configStateMachine+0xa0c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fd9e 	bl	80022a8 <stringLenght>
 800176c:	4603      	mov	r3, r0
 800176e:	4618      	mov	r0, r3
 8001770:	4b27      	ldr	r3, [pc, #156]	; (8001810 <configStateMachine+0xa10>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	2103      	movs	r1, #3
 8001778:	f002 f9a2 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 800177c:	f003 fc80 	bl	8005080 <getKeyPressed>
 8001780:	4603      	mov	r3, r0
 8001782:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 8001786:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800178a:	2b49      	cmp	r3, #73	; 0x49
 800178c:	d10e      	bne.n	80017ac <configStateMachine+0x9ac>
                {
                	resetKeyPressed();
 800178e:	f003 fc83 	bl	8005098 <resetKeyPressed>
                	setIntervalSaltosTime(&index);
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	4618      	mov	r0, r3
 8001798:	f001 f8ae 	bl	80028f8 <setIntervalSaltosTime>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 800179c:	200a      	movs	r0, #10
 800179e:	f002 feab 	bl	80044f8 <getNextSub>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017a8:	70da      	strb	r2, [r3, #3]
 80017aa:	e0f0      	b.n	800198e <configStateMachine+0xb8e>
                }
                else if(key == AVANCAR)
 80017ac:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80017b0:	2b41      	cmp	r3, #65	; 0x41
 80017b2:	d108      	bne.n	80017c6 <configStateMachine+0x9c6>
				{
					resetKeyPressed();
 80017b4:	f003 fc70 	bl	8005098 <resetKeyPressed>
					indexColumn(&index,4);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	2104      	movs	r1, #4
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fcfa 	bl	80021b8 <indexColumn>
 80017c4:	e0e3      	b.n	800198e <configStateMachine+0xb8e>
				}
                else if(key == CONFIRMAR)
 80017c6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80017ca:	2b43      	cmp	r3, #67	; 0x43
 80017cc:	f040 80df 	bne.w	800198e <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 80017d0:	f003 fc62 	bl	8005098 <resetKeyPressed>
                    index = 2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	81bb      	strh	r3, [r7, #12]
                    ptr_userConfiguration->userIntervalSeries = milisecondsTime(configIntervalSeriesTimeStruct);
 80017d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017da:	f000 fd28 	bl	800222e <milisecondsTime>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017e4:	621a      	str	r2, [r3, #32]
                    readyUserInterface(&displayUpdateStatus);
 80017e6:	f107 030f 	add.w	r3, r7, #15
 80017ea:	4618      	mov	r0, r3
 80017ec:	f001 f9b2 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 80017f0:	200b      	movs	r0, #11
 80017f2:	f002 fe81 	bl	80044f8 <getNextSub>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017fc:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }

            break;
 80017fe:	e0c6      	b.n	800198e <configStateMachine+0xb8e>
 8001800:	20000098 	.word	0x20000098
 8001804:	200000c8 	.word	0x200000c8
 8001808:	200000d0 	.word	0x200000d0
 800180c:	200000d4 	.word	0x200000d4
 8001810:	200000cc 	.word	0x200000cc
 8001814:	2000009c 	.word	0x2000009c
 8001818:	200000a0 	.word	0x200000a0
 800181c:	0800bb0c 	.word	0x0800bb0c

            case TAPETE_ON:
                updateUserMsg(0,USERMSG1,intapeteUserMsg,&displayUpdateStatus);
 8001820:	4b60      	ldr	r3, [pc, #384]	; (80019a4 <configStateMachine+0xba4>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	f107 030f 	add.w	r3, r7, #15
 8001828:	2100      	movs	r1, #0
 800182a:	2000      	movs	r0, #0
 800182c:	f001 f977 	bl	8002b1e <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001830:	4b5d      	ldr	r3, [pc, #372]	; (80019a8 <configStateMachine+0xba8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	2102      	movs	r1, #2
 8001838:	2000      	movs	r0, #0
 800183a:	f002 f941 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800183e:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <configStateMachine+0xba8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fd30 	bl	80022a8 <stringLenght>
 8001848:	4603      	mov	r3, r0
 800184a:	4618      	mov	r0, r3
 800184c:	4b57      	ldr	r3, [pc, #348]	; (80019ac <configStateMachine+0xbac>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	2102      	movs	r1, #2
 8001854:	f002 f934 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001858:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <configStateMachine+0xbb0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	2103      	movs	r1, #3
 8001860:	2000      	movs	r0, #0
 8001862:	f002 f92d 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001866:	f003 fc0b 	bl	8005080 <getKeyPressed>
 800186a:	4603      	mov	r3, r0
 800186c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == AVANCAR)
 8001870:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001874:	2b41      	cmp	r3, #65	; 0x41
 8001876:	d10e      	bne.n	8001896 <configStateMachine+0xa96>
                {
                	resetKeyPressed();
 8001878:	f003 fc0e 	bl	8005098 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus);
 800187c:	f107 030f 	add.w	r3, r7, #15
 8001880:	4618      	mov	r0, r3
 8001882:	f001 f967 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_OFF);
 8001886:	200c      	movs	r0, #12
 8001888:	f002 fe36 	bl	80044f8 <getNextSub>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001892:	70da      	strb	r2, [r3, #3]
 8001894:	e07b      	b.n	800198e <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 8001896:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800189a:	2b43      	cmp	r3, #67	; 0x43
 800189c:	d177      	bne.n	800198e <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 800189e:	f003 fbfb 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 80018a2:	f107 030f 	add.w	r3, r7, #15
 80018a6:	4618      	mov	r0, r3
 80018a8:	f001 f954 	bl	8002b54 <readyUserInterface>
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                    ptr_userConfiguration->userSelectTapete = TRUE;
 80018ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 80018b4:	200d      	movs	r0, #13
 80018b6:	f002 fe1f 	bl	80044f8 <getNextSub>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018c0:	70da      	strb	r2, [r3, #3]
                }
                break;
 80018c2:	e064      	b.n	800198e <configStateMachine+0xb8e>

            case TAPETE_OFF:
                updateUserMsg(0,USERMSG1,outtapeteUserMsg,&displayUpdateStatus);
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <configStateMachine+0xbb4>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f107 030f 	add.w	r3, r7, #15
 80018cc:	2100      	movs	r1, #0
 80018ce:	2000      	movs	r0, #0
 80018d0:	f001 f925 	bl	8002b1e <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80018d4:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <configStateMachine+0xba8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	2102      	movs	r1, #2
 80018dc:	2000      	movs	r0, #0
 80018de:	f002 f8ef 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <configStateMachine+0xba8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fcde 	bl	80022a8 <stringLenght>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4618      	mov	r0, r3
 80018f0:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <configStateMachine+0xbac>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	2102      	movs	r1, #2
 80018f8:	f002 f8e2 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80018fc:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <configStateMachine+0xbb0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	2103      	movs	r1, #3
 8001904:	2000      	movs	r0, #0
 8001906:	f002 f8db 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 800190a:	f003 fbb9 	bl	8005080 <getKeyPressed>
 800190e:	4603      	mov	r3, r0
 8001910:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == AVANCAR)
 8001914:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001918:	2b41      	cmp	r3, #65	; 0x41
 800191a:	d10e      	bne.n	800193a <configStateMachine+0xb3a>
                {
                	resetKeyPressed();
 800191c:	f003 fbbc 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001920:	f107 030f 	add.w	r3, r7, #15
 8001924:	4618      	mov	r0, r3
 8001926:	f001 f915 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 800192a:	200b      	movs	r0, #11
 800192c:	f002 fde4 	bl	80044f8 <getNextSub>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001936:	70da      	strb	r2, [r3, #3]
 8001938:	e029      	b.n	800198e <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 800193a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800193e:	2b43      	cmp	r3, #67	; 0x43
 8001940:	d125      	bne.n	800198e <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 8001942:	f003 fba9 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001946:	f107 030f 	add.w	r3, r7, #15
 800194a:	4618      	mov	r0, r3
 800194c:	f001 f902 	bl	8002b54 <readyUserInterface>
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                    ptr_userConfiguration->userSelectTapete = FALSE;
 8001950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 8001958:	200d      	movs	r0, #13
 800195a:	f002 fdcd 	bl	80044f8 <getNextSub>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001964:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001966:	e012      	b.n	800198e <configStateMachine+0xb8e>

            case SAVE_CONFIGS:
                subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8001968:	2001      	movs	r0, #1
 800196a:	f002 fdc5 	bl	80044f8 <getNextSub>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001974:	70da      	strb	r2, [r3, #3]
                setInsertData(ptr_userConfiguration);
 8001976:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001978:	f002 fdd0 	bl	800451c <setInsertData>
                readyUserInterface(&displayUpdateStatus);
 800197c:	f107 030f 	add.w	r3, r7, #15
 8001980:	4618      	mov	r0, r3
 8001982:	f001 f8e7 	bl	8002b54 <readyUserInterface>
                key = MENU;
 8001986:	234d      	movs	r3, #77	; 0x4d
 8001988:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                break;
 800198c:	bf00      	nop
    while(key != MENU)
 800198e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001992:	2b4d      	cmp	r3, #77	; 0x4d
 8001994:	f47f aa52 	bne.w	8000e3c <configStateMachine+0x3c>
        }
    }
}
 8001998:	bf00      	nop
 800199a:	4618      	mov	r0, r3
 800199c:	3758      	adds	r7, #88	; 0x58
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200000a4 	.word	0x200000a4
 80019a8:	200000c8 	.word	0x200000c8
 80019ac:	200000d0 	.word	0x200000d0
 80019b0:	200000d4 	.word	0x200000d4
 80019b4:	200000a8 	.word	0x200000a8

080019b8 <consultStateMachine>:
        unsigned char menuState;
//        struct dataInsert menuInsert;
    };

unsigned char consultStateMachine(struct Menu* subMenu)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	; 0x30
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuTesteConsultar = subMenu;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    unsigned char* ptr_potString;
    struct results* ptr_structConsultResult;
    unsigned char selectedUserTest = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char testSamples=0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    //unsigned char cursorPosition[2] = {0,0};
    short index = 2; //(000 MENU)
 80019d0:	2302      	movs	r3, #2
 80019d2:	81fb      	strh	r3, [r7, #14]
    unsigned char key = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    static unsigned char results = 0;
    unsigned char displayUpdateStatus = IDDLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	737b      	strb	r3, [r7, #13]

    while(key != MENU)
 80019de:	bf00      	nop
 80019e0:	e19c      	b.n	8001d1c <consultStateMachine+0x364>
    {
        switch(subMenuTesteConsultar->menuState)
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	78db      	ldrb	r3, [r3, #3]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	f200 8198 	bhi.w	8001d1c <consultStateMachine+0x364>
 80019ec:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <consultStateMachine+0x3c>)
 80019ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001a05 	.word	0x08001a05
 80019f8:	08001a15 	.word	0x08001a15
 80019fc:	08001b03 	.word	0x08001b03
 8001a00:	08001c89 	.word	0x08001c89
        {
            case IDDLE:
                subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001a04:	2001      	movs	r0, #1
 8001a06:	f002 fd77 	bl	80044f8 <getNextSub>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	70da      	strb	r2, [r3, #3]
            break;
 8001a12:	e183      	b.n	8001d1c <consultStateMachine+0x364>

            case CONSULTA_TESTE:
                updateUserMsg(0,USERMSG1,consultTestUserMsg,&displayUpdateStatus);
 8001a14:	4bc6      	ldr	r3, [pc, #792]	; (8001d30 <consultStateMachine+0x378>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	f107 030d 	add.w	r3, r7, #13
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f001 f87d 	bl	8002b1e <updateUserMsg>
                ptr_consultTestString = getNumTestString();
 8001a24:	f000 fd9e 	bl	8002564 <getNumTestString>
 8001a28:	62f8      	str	r0, [r7, #44]	; 0x2c
                HW_PRINT_DATA(0,USERMSG2,ptr_consultTestString);
 8001a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f002 f846 	bl	8003ac0 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001a34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 f866 	bl	8003b0c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001a40:	4bbc      	ldr	r3, [pc, #752]	; (8001d34 <consultStateMachine+0x37c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	2102      	movs	r1, #2
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f002 f839 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001a4e:	4bb9      	ldr	r3, [pc, #740]	; (8001d34 <consultStateMachine+0x37c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fc28 	bl	80022a8 <stringLenght>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	4bb6      	ldr	r3, [pc, #728]	; (8001d38 <consultStateMachine+0x380>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	2102      	movs	r1, #2
 8001a64:	f002 f82c 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001a68:	4bb4      	ldr	r3, [pc, #720]	; (8001d3c <consultStateMachine+0x384>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2103      	movs	r1, #3
 8001a70:	2000      	movs	r0, #0
 8001a72:	f002 f825 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001a76:	4bb1      	ldr	r3, [pc, #708]	; (8001d3c <consultStateMachine+0x384>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fc14 	bl	80022a8 <stringLenght>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4618      	mov	r0, r3
 8001a84:	4bae      	ldr	r3, [pc, #696]	; (8001d40 <consultStateMachine+0x388>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	f002 f818 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001a90:	f003 faf6 	bl	8005080 <getKeyPressed>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if(key == INSERIR)
 8001a9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a9e:	2b49      	cmp	r3, #73	; 0x49
 8001aa0:	d10e      	bne.n	8001ac0 <consultStateMachine+0x108>
                {
                	resetKeyPressed();
 8001aa2:	f003 faf9 	bl	8005098 <resetKeyPressed>
                    setUserNumTest(&index);
 8001aa6:	f107 030e 	add.w	r3, r7, #14
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 feff 	bl	80028ae <setUserNumTest>
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f002 fd21 	bl	80044f8 <getNextSub>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	70da      	strb	r2, [r3, #3]
 8001abe:	e12d      	b.n	8001d1c <consultStateMachine+0x364>
                }
                else if(key == AVANCAR)
 8001ac0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001ac4:	2b41      	cmp	r3, #65	; 0x41
 8001ac6:	d108      	bne.n	8001ada <consultStateMachine+0x122>
                {
                	resetKeyPressed();
 8001ac8:	f003 fae6 	bl	8005098 <resetKeyPressed>
                    indexChange(&index,2);
 8001acc:	f107 030e 	add.w	r3, r7, #14
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fc2c 	bl	8002330 <indexChange>
 8001ad8:	e120      	b.n	8001d1c <consultStateMachine+0x364>
                }
                else if(key == CONFIRMAR)
 8001ada:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001ade:	2b43      	cmp	r3, #67	; 0x43
 8001ae0:	f040 811c 	bne.w	8001d1c <consultStateMachine+0x364>
                {
                	resetKeyPressed();
 8001ae4:	f003 fad8 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001ae8:	f107 030d 	add.w	r3, r7, #13
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 f831 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8001af2:	2002      	movs	r0, #2
 8001af4:	f002 fd00 	bl	80044f8 <getNextSub>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	70da      	strb	r2, [r3, #3]
                    //subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
                }
            break;
 8001b00:	e10c      	b.n	8001d1c <consultStateMachine+0x364>

            case RESULT_TESTE:
                selectedUserTest = stringToInt(ptr_consultTestString);
 8001b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b04:	f000 fbbe 	bl	8002284 <stringToInt>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                HW_PRINT_DATA(0,OPTIONMSG,avancarUserMsg);
 8001b0e:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <consultStateMachine+0x37c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	2103      	movs	r1, #3
 8001b16:	2000      	movs	r0, #0
 8001b18:	f001 ffd2 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),OPTIONMSG,pararUserMsg);
 8001b1c:	4b85      	ldr	r3, [pc, #532]	; (8001d34 <consultStateMachine+0x37c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 fbc1 	bl	80022a8 <stringLenght>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	4b86      	ldr	r3, [pc, #536]	; (8001d44 <consultStateMachine+0x38c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2103      	movs	r1, #3
 8001b32:	f001 ffc5 	bl	8003ac0 <HW_PRINT_DATA>
//                ptr_structConsultResult = load_data(selectedUserTest); //APENAS PARA APLICAÇÃO COM SD
                ptr_structConsultResult = getUserResultData(selectedUserTest);
 8001b36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fa02 	bl	8001f44 <getUserResultData>
 8001b40:	61f8      	str	r0, [r7, #28]
                if(testSamples<(ptr_structConsultResult->resultTestAcquiredSamples))
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	785b      	ldrb	r3, [r3, #1]
 8001b46:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d25e      	bcs.n	8001c0c <consultStateMachine+0x254>
                {
                	HW_PRINT_DATA(0,USERMSG1,amostraUserMsg);
 8001b4e:	4b7e      	ldr	r3, [pc, #504]	; (8001d48 <consultStateMachine+0x390>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	2100      	movs	r1, #0
 8001b56:	2000      	movs	r0, #0
 8001b58:	f001 ffb2 	bl	8003ac0 <HW_PRINT_DATA>
					ptr_sampleString = param_1_toString(&ptr_structConsultResult->Measurement[testSamples].sampleNum);
 8001b5c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 fd30 	bl	80025d4 <param_1_toString>
 8001b74:	61b8      	str	r0, [r7, #24]
					HW_PRINT_DATA(stringLenght(amostraUserMsg),USERMSG1 , ptr_sampleString);
 8001b76:	4b74      	ldr	r3, [pc, #464]	; (8001d48 <consultStateMachine+0x390>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fb94 	bl	80022a8 <stringLenght>
 8001b80:	4603      	mov	r3, r0
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 ff9a 	bl	8003ac0 <HW_PRINT_DATA>

					HW_PRINT_DATA(0,USERMSG2,tempoVooUserMsg);
 8001b8c:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <consultStateMachine+0x394>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	2101      	movs	r1, #1
 8001b94:	2000      	movs	r0, #0
 8001b96:	f001 ff93 	bl	8003ac0 <HW_PRINT_DATA>
					ptr_vooTimeString = param_2_toString(&ptr_structConsultResult->Measurement[testSamples].uiVooTime);
 8001b9a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	4413      	add	r3, r2
 8001baa:	3308      	adds	r3, #8
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 fd25 	bl	80025fc <param_2_toString>
 8001bb2:	6178      	str	r0, [r7, #20]
					HW_PRINT_DATA(stringLenght(tempoVooUserMsg),USERMSG2 ,ptr_vooTimeString);
 8001bb4:	4b65      	ldr	r3, [pc, #404]	; (8001d4c <consultStateMachine+0x394>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fb75 	bl	80022a8 <stringLenght>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 ff7b 	bl	8003ac0 <HW_PRINT_DATA>


					HW_PRINT_DATA(0,INSERTMSG,tempoSoloUserMsg);
 8001bca:	4b61      	ldr	r3, [pc, #388]	; (8001d50 <consultStateMachine+0x398>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f001 ff74 	bl	8003ac0 <HW_PRINT_DATA>
					ptr_alturaString = param_2_toString(&ptr_structConsultResult->Measurement[testSamples].uiSoloTime);
 8001bd8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	3308      	adds	r3, #8
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	4413      	add	r3, r2
 8001bea:	3304      	adds	r3, #4
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fd05 	bl	80025fc <param_2_toString>
 8001bf2:	6138      	str	r0, [r7, #16]
					HW_PRINT_DATA(stringLenght(tempoSoloUserMsg),INSERTMSG , ptr_alturaString);
 8001bf4:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <consultStateMachine+0x398>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fb55 	bl	80022a8 <stringLenght>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	2102      	movs	r1, #2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 ff5b 	bl	8003ac0 <HW_PRINT_DATA>
 8001c0a:	e004      	b.n	8001c16 <consultStateMachine+0x25e>

//                  ptr_potString; = param_3_toString(&ptr_structExportResult->Measurement[testSamples].uiSoloTime);
//					HW_PRINT_DATA(0, INSERTMSG, ptr_potString);

                }
                else  HW_PRINT_DATA(0,0,"VAZIO");
 8001c0c:	4a51      	ldr	r2, [pc, #324]	; (8001d54 <consultStateMachine+0x39c>)
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2000      	movs	r0, #0
 8001c12:	f001 ff55 	bl	8003ac0 <HW_PRINT_DATA>

                key = getKeyPressed();
 8001c16:	f003 fa33 	bl	8005080 <getKeyPressed>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == AVANCAR)
 8001c20:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001c24:	2b41      	cmp	r3, #65	; 0x41
 8001c26:	d11c      	bne.n	8001c62 <consultStateMachine+0x2aa>
                {
                	resetKeyPressed();
 8001c28:	f003 fa36 	bl	8005098 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus);
 8001c2c:	f107 030d 	add.w	r3, r7, #13
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 ff8f 	bl	8002b54 <readyUserInterface>
                    testSamples++;
 8001c36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if(testSamples == ptr_structConsultResult->resultTestAcquiredSamples) testSamples = 0;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d102      	bne.n	8001c52 <consultStateMachine+0x29a>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8001c52:	2002      	movs	r0, #2
 8001c54:	f002 fc50 	bl	80044f8 <getNextSub>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	70da      	strb	r2, [r3, #3]
 8001c60:	e05c      	b.n	8001d1c <consultStateMachine+0x364>
                }
                else if(key == PARAR)
 8001c62:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001c66:	2b50      	cmp	r3, #80	; 0x50
 8001c68:	d158      	bne.n	8001d1c <consultStateMachine+0x364>
                {
                	resetKeyPressed();
 8001c6a:	f003 fa15 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001c6e:	f107 030d 	add.w	r3, r7, #13
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 ff6e 	bl	8002b54 <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(EXPORTAR);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f002 fc3d 	bl	80044f8 <getNextSub>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001c86:	e049      	b.n	8001d1c <consultStateMachine+0x364>

            case EXPORTAR:
                updateUserMsg(0,USERMSG1,consultExportUserMsg,&displayUpdateStatus);
 8001c88:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <consultStateMachine+0x3a0>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	f107 030d 	add.w	r3, r7, #13
 8001c90:	2100      	movs	r1, #0
 8001c92:	2000      	movs	r0, #0
 8001c94:	f000 ff43 	bl	8002b1e <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,selecionarUserMsg);
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <consultStateMachine+0x384>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f001 ff0d 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,pararUserMsg);
 8001ca6:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <consultStateMachine+0x38c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	2103      	movs	r1, #3
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f001 ff06 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001cb4:	f003 f9e4 	bl	8005080 <getKeyPressed>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == PARAR)
 8001cbe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001cc2:	2b50      	cmp	r3, #80	; 0x50
 8001cc4:	d111      	bne.n	8001cea <consultStateMachine+0x332>
                {
                	resetKeyPressed();
 8001cc6:	f003 f9e7 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001cca:	f107 030d 	add.w	r3, r7, #13
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 ff40 	bl	8002b54 <readyUserInterface>
                    key = MENU;
 8001cd4:	234d      	movs	r3, #77	; 0x4d
 8001cd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f002 fc0c 	bl	80044f8 <getNextSub>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	70da      	strb	r2, [r3, #3]
 8001ce8:	e017      	b.n	8001d1a <consultStateMachine+0x362>
                }
                else if(key == CONFIRMAR)
 8001cea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001cee:	2b43      	cmp	r3, #67	; 0x43
 8001cf0:	d113      	bne.n	8001d1a <consultStateMachine+0x362>
                {
                	resetKeyPressed();
 8001cf2:	f003 f9d1 	bl	8005098 <resetKeyPressed>
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <consultStateMachine+0x3a4>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f107 030d 	add.w	r3, r7, #13
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2000      	movs	r0, #0
 8001d02:	f000 ff0c 	bl	8002b1e <updateUserMsg>
                    //subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f002 fbf6 	bl	80044f8 <getNextSub>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	70da      	strb	r2, [r3, #3]
                    key = MENU;
 8001d14:	234d      	movs	r3, #77	; 0x4d
 8001d16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                }
                break;
 8001d1a:	bf00      	nop
    while(key != MENU)
 8001d1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001d20:	2b4d      	cmp	r3, #77	; 0x4d
 8001d22:	f47f ae5e 	bne.w	80019e2 <consultStateMachine+0x2a>
        }
    }
}
 8001d26:	bf00      	nop
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3730      	adds	r7, #48	; 0x30
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	2000006c 	.word	0x2000006c
 8001d34:	200000c8 	.word	0x200000c8
 8001d38:	200000d0 	.word	0x200000d0
 8001d3c:	200000d4 	.word	0x200000d4
 8001d40:	200000cc 	.word	0x200000cc
 8001d44:	200000d8 	.word	0x200000d8
 8001d48:	2000004c 	.word	0x2000004c
 8001d4c:	20000050 	.word	0x20000050
 8001d50:	20000054 	.word	0x20000054
 8001d54:	0800bb14 	.word	0x0800bb14
 8001d58:	20000070 	.word	0x20000070
 8001d5c:	20000074 	.word	0x20000074

08001d60 <getTimeStruct>:
{
    return myData.userSelectTapete;
}

unsigned char* getTimeStruct()
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
    return insertTime;
 8001d64:	4b02      	ldr	r3, [pc, #8]	; (8001d70 <getTimeStruct+0x10>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20000000 	.word	0x20000000

08001d74 <getIntervalTimeStruct>:

unsigned char* getIntervalTimeStruct()
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
    return intervalTime;
 8001d78:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <getIntervalTimeStruct+0x10>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000004 	.word	0x20000004

08001d88 <getintervalSeriesTimeStruct>:

unsigned char* getintervalSeriesTimeStruct()
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
    return intervalSeries;
 8001d8c:	4b02      	ldr	r3, [pc, #8]	; (8001d98 <getintervalSeriesTimeStruct+0x10>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	20000008 	.word	0x20000008

08001d9c <getMassArray>:

unsigned char* getMassArray()
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
    return massArray;
 8001da0:	4b02      	ldr	r3, [pc, #8]	; (8001dac <getMassArray+0x10>)
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	200003c0 	.word	0x200003c0

08001db0 <getOverMassArray>:

unsigned char* getOverMassArray()
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
    return overMassArray;
 8001db4:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <getOverMassArray+0x10>)
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200003c8 	.word	0x200003c8

08001dc4 <getAltMinArray>:

unsigned char* getAltMinArray()
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
    return altMinArray;
 8001dc8:	4b02      	ldr	r3, [pc, #8]	; (8001dd4 <getAltMinArray+0x10>)
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	2000000c 	.word	0x2000000c

08001dd8 <getAltMaxArray>:

unsigned char* getAltMaxArray()
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
    return altMaxArray;
 8001ddc:	4b02      	ldr	r3, [pc, #8]	; (8001de8 <getAltMaxArray+0x10>)
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000010 	.word	0x20000010

08001dec <getNumSaltosArray>:

unsigned char* getNumSaltosArray()
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
    return numSaltosArray;
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <getNumSaltosArray+0x10>)
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	200003d0 	.word	0x200003d0

08001e00 <getTypeJumpArray>:


unsigned char* getTypeJumpArray()
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
    return JumpTypeArray;
 8001e04:	4b02      	ldr	r3, [pc, #8]	; (8001e10 <getTypeJumpArray+0x10>)
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200003d8 	.word	0x200003d8

08001e14 <getAltDJArray>:

unsigned char* getAltDJArray()
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
    return altDJArray;
 8001e18:	4b02      	ldr	r3, [pc, #8]	; (8001e24 <getAltDJArray+0x10>)
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	200003d4 	.word	0x200003d4

08001e28 <getNumSeriesArray>:

unsigned char* getNumSeriesArray()
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
    return numSeriesArray;
 8001e2c:	4b02      	ldr	r3, [pc, #8]	; (8001e38 <getNumSeriesArray+0x10>)
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	200003dc 	.word	0x200003dc

08001e3c <getNumTestArray>:

unsigned char* getNumTestArray()
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
    return numTestArray;
 8001e40:	4b02      	ldr	r3, [pc, #8]	; (8001e4c <getNumTestArray+0x10>)
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000014 	.word	0x20000014

08001e50 <getEraseTestArray>:

unsigned char* getEraseTestArray()
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
    return selectEraseArray;
 8001e54:	4b02      	ldr	r3, [pc, #8]	; (8001e60 <getEraseTestArray+0x10>)
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200003e0 	.word	0x200003e0

08001e64 <getUserConfigStruct>:

unsigned char* getUserConfigStruct() //VERIFICAR SE VOU USAR -- por enquanto sim 26/10
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
//    static struct dataInsert configStruct;
//    configStruct = myData;
//    return &configStruct;
	return &myData;
 8001e68:	4b02      	ldr	r3, [pc, #8]	; (8001e74 <getUserConfigStruct+0x10>)
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	200001ec 	.word	0x200001ec

08001e78 <getTimeAltMin>:

unsigned int getTimeAltMin()
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
	return myData.userAlturaMin;
 8001e7c:	4b02      	ldr	r3, [pc, #8]	; (8001e88 <getTimeAltMin+0x10>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	200001ec 	.word	0x200001ec

08001e8c <getTimeAltMax>:

unsigned int getTimeAltMax()
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
	return myData.userAlturaMax;
 8001e90:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <getTimeAltMax+0x10>)
 8001e92:	691b      	ldr	r3, [r3, #16]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	200001ec 	.word	0x200001ec

08001ea0 <setUserInputConfigData>:


unsigned char setUserInputConfigData(struct dataInsert* dataToInsert) //alterar
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    myData.userTest = dataToInsert->userTest;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001eae:	701a      	strb	r2, [r3, #0]
    myData.userTime = dataToInsert->userTime;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001eb6:	6053      	str	r3, [r2, #4]
    myData.userMass = dataToInsert->userMass;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7a1a      	ldrb	r2, [r3, #8]
 8001ebc:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001ebe:	721a      	strb	r2, [r3, #8]
    myData.userOverMass = dataToInsert->userOverMass;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7a5a      	ldrb	r2, [r3, #9]
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001ec6:	725a      	strb	r2, [r3, #9]
    myData.userConsultTest = dataToInsert->userConsultTest;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7a9a      	ldrb	r2, [r3, #10]
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001ece:	729a      	strb	r2, [r3, #10]
    myData.userAlturaMin = dataToInsert->userAlturaMin;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a1a      	ldr	r2, [pc, #104]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001ed6:	60d3      	str	r3, [r2, #12]
    myData.userAlturaMax = dataToInsert->userAlturaMax;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001ede:	6113      	str	r3, [r2, #16]
    myData.userNumSaltos = dataToInsert->userNumSaltos;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7d1a      	ldrb	r2, [r3, #20]
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001ee6:	751a      	strb	r2, [r3, #20]
    myData.userIntervalSaltos = dataToInsert->userIntervalSaltos;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001eee:	6193      	str	r3, [r2, #24]
    myData.userCMJ = dataToInsert->userCMJ;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7f1a      	ldrb	r2, [r3, #28]
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001ef6:	771a      	strb	r2, [r3, #28]
    myData.userAlturaDJ = dataToInsert->userAlturaDJ;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7f5a      	ldrb	r2, [r3, #29]
 8001efc:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001efe:	775a      	strb	r2, [r3, #29]
    myData.userNumSeries = dataToInsert->userNumSeries;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7f9a      	ldrb	r2, [r3, #30]
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001f06:	779a      	strb	r2, [r3, #30]
    myData.userIntervalSeries = dataToInsert->userIntervalSeries;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001f0e:	6213      	str	r3, [r2, #32]
    myData.userCommConfig = dataToInsert->userCommConfig;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    myData.userSelectTapete = dataToInsert->userSelectTapete;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001f24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    myData.userSelectSensorChannel = dataToInsert->userSelectSensorChannel;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <setUserInputConfigData+0xa0>)
 8001f30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001f34:	bf00      	nop
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	200001ec 	.word	0x200001ec

08001f44 <getUserResultData>:

unsigned int* getUserResultData(unsigned char numTest)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
    return &myResults[numTest-1];
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	019b      	lsls	r3, r3, #6
 8001f54:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <getUserResultData+0x20>)
 8001f56:	4413      	add	r3, r2
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000214 	.word	0x20000214

08001f68 <getResultTestNumber>:

unsigned char getResultTestNumber()
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
    return numberTest;
 8001f6c:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <getResultTestNumber+0x10>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	200003e1 	.word	0x200003e1

08001f7c <setResultTestNumber>:
{
     myResults[numTest].thereAreData = TRUE;
}

unsigned char setResultTestNumber()
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
     numberTest++;
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <setResultTestNumber+0x1c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <setResultTestNumber+0x1c>)
 8001f8a:	701a      	strb	r2, [r3, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	200003e1 	.word	0x200003e1

08001f9c <setUserResultData>:

unsigned char setUserResultData(struct results* structDataResult, unsigned char numTest)
{
 8001f9c:	b490      	push	{r4, r7}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	70fb      	strb	r3, [r7, #3]
	unsigned char numSample = structDataResult->resultTestAcquiredSamples;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	785b      	ldrb	r3, [r3, #1]
 8001fac:	73bb      	strb	r3, [r7, #14]
    myResults[numTest].resultTestNum = numTest+1;
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	3201      	adds	r2, #1
 8001fb4:	b2d1      	uxtb	r1, r2
 8001fb6:	4a31      	ldr	r2, [pc, #196]	; (800207c <setUserResultData+0xe0>)
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	4413      	add	r3, r2
 8001fbc:	460a      	mov	r2, r1
 8001fbe:	701a      	strb	r2, [r3, #0]
    myResults[numTest].resultTestAcquiredSamples = numSample;
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	4a2e      	ldr	r2, [pc, #184]	; (800207c <setUserResultData+0xe0>)
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3301      	adds	r3, #1
 8001fca:	7bba      	ldrb	r2, [r7, #14]
 8001fcc:	701a      	strb	r2, [r3, #0]
    myResults[numTest].thereAreData = TRUE;
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	4a2a      	ldr	r2, [pc, #168]	; (800207c <setUserResultData+0xe0>)
 8001fd2:	019b      	lsls	r3, r3, #6
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e042      	b.n	8002068 <setUserResultData+0xcc>
    {
        myResults[numTest].Measurement[i].sampleNum = structDataResult->Measurement[i].sampleNum;
 8001fe2:	7bf9      	ldrb	r1, [r7, #15]
 8001fe4:	78f8      	ldrb	r0, [r7, #3]
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	687c      	ldr	r4, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	440b      	add	r3, r1
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4423      	add	r3, r4
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	781c      	ldrb	r4, [r3, #0]
 8001ff8:	4920      	ldr	r1, [pc, #128]	; (800207c <setUserResultData+0xe0>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	0182      	lsls	r2, r0, #6
 8002004:	4413      	add	r3, r2
 8002006:	440b      	add	r3, r1
 8002008:	3304      	adds	r3, #4
 800200a:	4622      	mov	r2, r4
 800200c:	701a      	strb	r2, [r3, #0]
        myResults[numTest].Measurement[i].uiVooTime = structDataResult->Measurement[i].uiVooTime;
 800200e:	7bf9      	ldrb	r1, [r7, #15]
 8002010:	78f8      	ldrb	r0, [r7, #3]
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	687c      	ldr	r4, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	440b      	add	r3, r1
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4423      	add	r3, r4
 8002020:	3308      	adds	r3, #8
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	4c15      	ldr	r4, [pc, #84]	; (800207c <setUserResultData+0xe0>)
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	0182      	lsls	r2, r0, #6
 8002030:	4413      	add	r3, r2
 8002032:	4423      	add	r3, r4
 8002034:	3308      	adds	r3, #8
 8002036:	6019      	str	r1, [r3, #0]
        myResults[numTest].Measurement[i].uiSoloTime = structDataResult->Measurement[i].uiSoloTime;
 8002038:	7bf9      	ldrb	r1, [r7, #15]
 800203a:	78f8      	ldrb	r0, [r7, #3]
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	687c      	ldr	r4, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	440b      	add	r3, r1
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4423      	add	r3, r4
 800204a:	330c      	adds	r3, #12
 800204c:	6819      	ldr	r1, [r3, #0]
 800204e:	4c0b      	ldr	r4, [pc, #44]	; (800207c <setUserResultData+0xe0>)
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	0182      	lsls	r2, r0, #6
 800205a:	4413      	add	r3, r2
 800205c:	4423      	add	r3, r4
 800205e:	330c      	adds	r3, #12
 8002060:	6019      	str	r1, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	3301      	adds	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	7bbb      	ldrb	r3, [r7, #14]
 800206c:	429a      	cmp	r2, r3
 800206e:	d3b8      	bcc.n	8001fe2 <setUserResultData+0x46>
    }
}
 8002070:	bf00      	nop
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bc90      	pop	{r4, r7}
 800207a:	4770      	bx	lr
 800207c:	20000214 	.word	0x20000214

08002080 <resetConfigStruct>:
    }

}

unsigned char resetConfigStruct(struct dataInsert* structToReset)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    structToReset->userTest = 0;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
    structToReset->userAlturaDJ = 0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	775a      	strb	r2, [r3, #29]
    structToReset->userAlturaMax = 0;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
    structToReset->userAlturaMin = 0;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
    structToReset->userCMJ = 0;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	771a      	strb	r2, [r3, #28]
    structToReset->userCommConfig = 0;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    structToReset->userConsultTest = 0;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	729a      	strb	r2, [r3, #10]
    structToReset->userIntervalSaltos = 0;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
    structToReset->userIntervalSeries = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
    structToReset->userMass = 0;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	721a      	strb	r2, [r3, #8]
    structToReset->userNumSaltos = 0;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	751a      	strb	r2, [r3, #20]
    structToReset->userNumSeries = 0;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	779a      	strb	r2, [r3, #30]
    structToReset->userOverMass = 0;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	725a      	strb	r2, [r3, #9]
    structToReset->userSelectSensorChannel = 0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    structToReset->userSelectTapete = 0;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    structToReset->userTime = 0;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	605a      	str	r2, [r3, #4]

}
 80020ee:	bf00      	nop
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
	...

080020fc <resetMyResults>:

void resetMyResults()
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
    numberTest = 0;
 8002102:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <resetMyResults+0xb4>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
    for(unsigned char test=0;test<TEST_SIZE;test++)
 8002108:	2300      	movs	r3, #0
 800210a:	71fb      	strb	r3, [r7, #7]
 800210c:	e046      	b.n	800219c <resetMyResults+0xa0>
    {
        myResults[test].resultTestNum = 0;
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <resetMyResults+0xb8>)
 8002112:	019b      	lsls	r3, r3, #6
 8002114:	4413      	add	r3, r2
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
        myResults[test].resultTestAcquiredSamples = 0;
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <resetMyResults+0xb8>)
 800211e:	019b      	lsls	r3, r3, #6
 8002120:	4413      	add	r3, r2
 8002122:	3301      	adds	r3, #1
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
        myResults[test].thereAreData = FALSE;
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	4a22      	ldr	r2, [pc, #136]	; (80021b4 <resetMyResults+0xb8>)
 800212c:	019b      	lsls	r3, r3, #6
 800212e:	4413      	add	r3, r2
 8002130:	3302      	adds	r3, #2
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 8002136:	2300      	movs	r3, #0
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	e029      	b.n	8002190 <resetMyResults+0x94>
        {
            myResults[test].Measurement[sample].sampleNum = 0;
 800213c:	79f9      	ldrb	r1, [r7, #7]
 800213e:	481d      	ldr	r0, [pc, #116]	; (80021b4 <resetMyResults+0xb8>)
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	018a      	lsls	r2, r1, #6
 800214c:	4413      	add	r3, r2
 800214e:	4403      	add	r3, r0
 8002150:	3304      	adds	r3, #4
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
            myResults[test].Measurement[sample].uiVooTime = 0;
 8002156:	79f9      	ldrb	r1, [r7, #7]
 8002158:	4816      	ldr	r0, [pc, #88]	; (80021b4 <resetMyResults+0xb8>)
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	018a      	lsls	r2, r1, #6
 8002166:	4413      	add	r3, r2
 8002168:	4403      	add	r3, r0
 800216a:	3308      	adds	r3, #8
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
            myResults[test].Measurement[sample].uiSoloTime = 0;
 8002170:	79f9      	ldrb	r1, [r7, #7]
 8002172:	4810      	ldr	r0, [pc, #64]	; (80021b4 <resetMyResults+0xb8>)
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	018a      	lsls	r2, r1, #6
 8002180:	4413      	add	r3, r2
 8002182:	4403      	add	r3, r0
 8002184:	330c      	adds	r3, #12
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d9d2      	bls.n	800213c <resetMyResults+0x40>
    for(unsigned char test=0;test<TEST_SIZE;test++)
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	3301      	adds	r3, #1
 800219a:	71fb      	strb	r3, [r7, #7]
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d9b5      	bls.n	800210e <resetMyResults+0x12>
        }

    }
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	200003e1 	.word	0x200003e1
 80021b4:	20000214 	.word	0x20000214

080021b8 <indexColumn>:
        *index = 0;
    }
}

unsigned char indexColumn(short* currentColumn, unsigned char size)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
    *currentColumn = *currentColumn -1;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	801a      	strh	r2, [r3, #0]
    if(*currentColumn == 5) *currentColumn = *currentColumn -1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d109      	bne.n	80021f4 <indexColumn+0x3c>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	801a      	strh	r2, [r3, #0]
 80021f2:	e00d      	b.n	8002210 <indexColumn+0x58>
    else if(*currentColumn == 2) *currentColumn = *currentColumn -1;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d108      	bne.n	8002210 <indexColumn+0x58>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29b      	uxth	r3, r3
 800220a:	b21a      	sxth	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	801a      	strh	r2, [r3, #0]
    if(*currentColumn <0)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002216:	2b00      	cmp	r3, #0
 8002218:	da03      	bge.n	8002222 <indexColumn+0x6a>
    {
        *currentColumn = size;
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	b21a      	sxth	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	801a      	strh	r2, [r3, #0]
    }
}
 8002222:	bf00      	nop
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <milisecondsTime>:

unsigned long milisecondsTime(unsigned char* ptr_inputTime)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
	struct tm* time = ptr_inputTime;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	60fb      	str	r3, [r7, #12]
	unsigned long int msTime = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]

	msTime = time->tm_hour*3600;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	60bb      	str	r3, [r7, #8]
	msTime += time->tm_min*60;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4413      	add	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
	msTime += time->tm_sec;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	4413      	add	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
	msTime = msTime*1000;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	60bb      	str	r3, [r7, #8]

	return msTime;
 8002278:	68bb      	ldr	r3, [r7, #8]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <stringToInt>:
    //fazer a convers�o de hhmmss para ms
    return intTime;
}

unsigned int stringToInt(unsigned char* string) //REFAZER
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
    char *ptr;
    unsigned int x = strtol(string,&ptr,10);
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	220a      	movs	r2, #10
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f008 f8c1 	bl	800a41c <strtol>
 800229a:	4603      	mov	r3, r0
 800229c:	60fb      	str	r3, [r7, #12]
    return x;
 800229e:	68fb      	ldr	r3, [r7, #12]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <stringLenght>:
    float x = strtof(string,NULL);
    return x;
}

unsigned char stringLenght(unsigned char* str)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    unsigned char strLen = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
    for(unsigned i = 0; str[i] != '\0';i++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	e005      	b.n	80022c6 <stringLenght+0x1e>
        strLen++;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	3301      	adds	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
    for(unsigned i = 0; str[i] != '\0';i++)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	3301      	adds	r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4413      	add	r3, r2
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f3      	bne.n	80022ba <stringLenght+0x12>
    return strLen;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <indexMass>:

unsigned char indexMass(short* index)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
    *index = *index -1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	801a      	strh	r2, [r3, #0]
    if(*index == 3) *index = *index -1;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d108      	bne.n	8002314 <indexMass+0x36>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29b      	uxth	r3, r3
 800230e:	b21a      	sxth	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231a:	2b00      	cmp	r3, #0
 800231c:	da02      	bge.n	8002324 <indexMass+0x46>
    {
        *index = 4;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2204      	movs	r2, #4
 8002322:	801a      	strh	r2, [r3, #0]
    }
}
 8002324:	bf00      	nop
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <indexChange>:

unsigned char indexChange(short* index, unsigned char size)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
    *index = *index - 1;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29b      	uxth	r3, r3
 8002348:	b21a      	sxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002354:	2b00      	cmp	r3, #0
 8002356:	da03      	bge.n	8002360 <indexChange+0x30>
    {
        *index = size;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	b21a      	sxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	801a      	strh	r2, [r3, #0]
    }
}
 8002360:	bf00      	nop
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <getAltMinString>:

unsigned char* getAltMinString()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af02      	add	r7, sp, #8
    unsigned char* altMinArray = getAltMinArray();
 8002372:	f7ff fd27 	bl	8001dc4 <getAltMinArray>
 8002376:	6078      	str	r0, [r7, #4]
    sprintf(altMinString,"%d%d%d",altMinArray[0],altMinArray[1],altMinArray[2]);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3301      	adds	r3, #1
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3302      	adds	r3, #2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	460b      	mov	r3, r1
 8002390:	4904      	ldr	r1, [pc, #16]	; (80023a4 <getAltMinString+0x38>)
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <getAltMinString+0x3c>)
 8002394:	f007 fa6c 	bl	8009870 <siprintf>
    return altMinString;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <getAltMinString+0x3c>)
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	0800bb1c 	.word	0x0800bb1c
 80023a8:	200003fc 	.word	0x200003fc

080023ac <getAltMaxString>:

unsigned char* getAltMaxString()
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af02      	add	r7, sp, #8
    unsigned char* altMaxArray = getAltMaxArray();
 80023b2:	f7ff fd11 	bl	8001dd8 <getAltMaxArray>
 80023b6:	6078      	str	r0, [r7, #4]
    sprintf(altMaxString,"%d%d%d",altMaxArray[0],altMaxArray[1],altMaxArray[2]);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3301      	adds	r3, #1
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3302      	adds	r3, #2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	460b      	mov	r3, r1
 80023d0:	4904      	ldr	r1, [pc, #16]	; (80023e4 <getAltMaxString+0x38>)
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <getAltMaxString+0x3c>)
 80023d4:	f007 fa4c 	bl	8009870 <siprintf>
    return altMaxString;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <getAltMaxString+0x3c>)
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	0800bb1c 	.word	0x0800bb1c
 80023e8:	20000408 	.word	0x20000408

080023ec <getNumSaltosString>:

unsigned char* getNumSaltosString()
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af02      	add	r7, sp, #8
    unsigned char* numSaltosArray = getNumSaltosArray();
 80023f2:	f7ff fcfb 	bl	8001dec <getNumSaltosArray>
 80023f6:	6078      	str	r0, [r7, #4]
    sprintf(numSaltosString,"%d%d%d",numSaltosArray[0],numSaltosArray[1],numSaltosArray[2]);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3301      	adds	r3, #1
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4619      	mov	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3302      	adds	r3, #2
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	460b      	mov	r3, r1
 8002410:	4904      	ldr	r1, [pc, #16]	; (8002424 <getNumSaltosString+0x38>)
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <getNumSaltosString+0x3c>)
 8002414:	f007 fa2c 	bl	8009870 <siprintf>
    return numSaltosString;
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <getNumSaltosString+0x3c>)
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	0800bb1c 	.word	0x0800bb1c
 8002428:	20000414 	.word	0x20000414

0800242c <getTypeJumpString>:

unsigned char* getTypeJumpString()
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
    unsigned char* typeJumpArray = getTypeJumpArray();
 8002432:	f7ff fce5 	bl	8001e00 <getTypeJumpArray>
 8002436:	6078      	str	r0, [r7, #4]
    sprintf(tipoSaltoString,"%d",typeJumpArray[0]);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4904      	ldr	r1, [pc, #16]	; (8002450 <getTypeJumpString+0x24>)
 8002440:	4804      	ldr	r0, [pc, #16]	; (8002454 <getTypeJumpString+0x28>)
 8002442:	f007 fa15 	bl	8009870 <siprintf>
    return tipoSaltoString;
 8002446:	4b03      	ldr	r3, [pc, #12]	; (8002454 <getTypeJumpString+0x28>)
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	0800bb24 	.word	0x0800bb24
 8002454:	20000420 	.word	0x20000420

08002458 <getAltDJString>:

unsigned char* getAltDJString()
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
    unsigned char* altDJArray = getAltDJArray();
 800245e:	f7ff fcd9 	bl	8001e14 <getAltDJArray>
 8002462:	6078      	str	r0, [r7, #4]
    sprintf(altDJString,"%d%d%",altDJArray[0],altDJArray[1]);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3301      	adds	r3, #1
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4904      	ldr	r1, [pc, #16]	; (8002484 <getAltDJString+0x2c>)
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <getAltDJString+0x30>)
 8002474:	f007 f9fc 	bl	8009870 <siprintf>
    return altDJString;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <getAltDJString+0x30>)
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	0800bb28 	.word	0x0800bb28
 8002488:	2000042c 	.word	0x2000042c

0800248c <getNumSeriesString>:

unsigned char* getNumSeriesString()
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af02      	add	r7, sp, #8
    unsigned char* numSeriesArray = getNumSeriesArray();
 8002492:	f7ff fcc9 	bl	8001e28 <getNumSeriesArray>
 8002496:	6078      	str	r0, [r7, #4]
    sprintf(numSeriesString,"%d%d%d",numSeriesArray[0],numSeriesArray[1],numSeriesArray[2]);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3301      	adds	r3, #1
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3302      	adds	r3, #2
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	460b      	mov	r3, r1
 80024b0:	4904      	ldr	r1, [pc, #16]	; (80024c4 <getNumSeriesString+0x38>)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <getNumSeriesString+0x3c>)
 80024b4:	f007 f9dc 	bl	8009870 <siprintf>
    return numSeriesString;
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <getNumSeriesString+0x3c>)
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	0800bb1c 	.word	0x0800bb1c
 80024c8:	20000438 	.word	0x20000438

080024cc <getMassString>:
    sprintf(interSeriesString,"%d%d%d",intervalSeriesArray[0],intervalSeriesArray[1],intervalSeriesArray[2]);
    return interSeriesString;
}

unsigned char* getMassString()
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af02      	add	r7, sp, #8
    unsigned char* massArray = getMassArray();
 80024d2:	f7ff fc63 	bl	8001d9c <getMassArray>
 80024d6:	6078      	str	r0, [r7, #4]
    sprintf(massString,"%d%d%d.%d",massArray[0],massArray[1],massArray[2],massArray[4]);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3301      	adds	r3, #1
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3302      	adds	r3, #2
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3304      	adds	r3, #4
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	9200      	str	r2, [sp, #0]
 80024f8:	4603      	mov	r3, r0
 80024fa:	460a      	mov	r2, r1
 80024fc:	4904      	ldr	r1, [pc, #16]	; (8002510 <getMassString+0x44>)
 80024fe:	4805      	ldr	r0, [pc, #20]	; (8002514 <getMassString+0x48>)
 8002500:	f007 f9b6 	bl	8009870 <siprintf>
    //massArray[3] ficou representando o "." no display
    return massString;
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <getMassString+0x48>)
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	0800bb30 	.word	0x0800bb30
 8002514:	200003e4 	.word	0x200003e4

08002518 <getOverMassString>:

unsigned char* getOverMassString()
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af02      	add	r7, sp, #8
    unsigned char* overMassArray = getOverMassArray();
 800251e:	f7ff fc47 	bl	8001db0 <getOverMassArray>
 8002522:	6078      	str	r0, [r7, #4]
    sprintf(overMassString,"%d%d%d.%d",overMassArray[0],overMassArray[1],overMassArray[2],overMassArray[4]);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3301      	adds	r3, #1
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3302      	adds	r3, #2
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3304      	adds	r3, #4
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	9200      	str	r2, [sp, #0]
 8002544:	4603      	mov	r3, r0
 8002546:	460a      	mov	r2, r1
 8002548:	4904      	ldr	r1, [pc, #16]	; (800255c <getOverMassString+0x44>)
 800254a:	4805      	ldr	r0, [pc, #20]	; (8002560 <getOverMassString+0x48>)
 800254c:	f007 f990 	bl	8009870 <siprintf>
    return overMassString;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <getOverMassString+0x48>)
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	0800bb30 	.word	0x0800bb30
 8002560:	200003f0 	.word	0x200003f0

08002564 <getNumTestString>:

unsigned char* getNumTestString()
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af02      	add	r7, sp, #8
    unsigned char* numTestArray = getNumTestArray();
 800256a:	f7ff fc67 	bl	8001e3c <getNumTestArray>
 800256e:	6078      	str	r0, [r7, #4]
    sprintf(numTestString,"%d%d%d",numTestArray[0],numTestArray[1],numTestArray[2]);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3301      	adds	r3, #1
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3302      	adds	r3, #2
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	460b      	mov	r3, r1
 8002588:	4904      	ldr	r1, [pc, #16]	; (800259c <getNumTestString+0x38>)
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <getNumTestString+0x3c>)
 800258c:	f007 f970 	bl	8009870 <siprintf>
    return numTestString;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <getNumTestString+0x3c>)
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	0800bb1c 	.word	0x0800bb1c
 80025a0:	20000444 	.word	0x20000444

080025a4 <getEraseTestString>:

unsigned char* getEraseTestString()
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
    unsigned char* eraseTestArray = getEraseTestArray();
 80025aa:	f7ff fc51 	bl	8001e50 <getEraseTestArray>
 80025ae:	4603      	mov	r3, r0
 80025b0:	607b      	str	r3, [r7, #4]
    sprintf(eraseTestString,"(%d)",eraseTestArray[0]);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	4904      	ldr	r1, [pc, #16]	; (80025cc <getEraseTestString+0x28>)
 80025ba:	4805      	ldr	r0, [pc, #20]	; (80025d0 <getEraseTestString+0x2c>)
 80025bc:	f007 f958 	bl	8009870 <siprintf>
    return eraseTestString;
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <getEraseTestString+0x2c>)
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	0800bb3c 	.word	0x0800bb3c
 80025d0:	20000450 	.word	0x20000450

080025d4 <param_1_toString>:
	static unsigned char saveResultString[50];
	return saveResultString;
}

unsigned int* param_1_toString(unsigned int* string)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
    static unsigned int result[TEST_SIZE];
    sprintf(result,"%d",*string);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4904      	ldr	r1, [pc, #16]	; (80025f4 <param_1_toString+0x20>)
 80025e4:	4804      	ldr	r0, [pc, #16]	; (80025f8 <param_1_toString+0x24>)
 80025e6:	f007 f943 	bl	8009870 <siprintf>
    return result;
 80025ea:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <param_1_toString+0x24>)
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	0800bb24 	.word	0x0800bb24
 80025f8:	2000045c 	.word	0x2000045c

080025fc <param_2_toString>:

unsigned int* param_2_toString(unsigned int* string)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
    static unsigned int result[TEST_SIZE];
    sprintf(result,"%d ms",*string);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	4904      	ldr	r1, [pc, #16]	; (800261c <param_2_toString+0x20>)
 800260c:	4804      	ldr	r0, [pc, #16]	; (8002620 <param_2_toString+0x24>)
 800260e:	f007 f92f 	bl	8009870 <siprintf>
    return result;
 8002612:	4b03      	ldr	r3, [pc, #12]	; (8002620 <param_2_toString+0x24>)
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	0800bb44 	.word	0x0800bb44
 8002620:	20000470 	.word	0x20000470

08002624 <setUserAltMin>:
    sprintf(result,"%c",*string);
    return result;
}

unsigned char setUserAltMin(unsigned char* idx)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
    unsigned char* altMinArray = getAltMinArray();
 800262c:	f7ff fbca 	bl	8001dc4 <getAltMinArray>
 8002630:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	72fb      	strb	r3, [r7, #11]
    altMinArray[index] = altMinArray[index]+1;
 8002638:	7afb      	ldrb	r3, [r7, #11]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4413      	add	r3, r2
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	7afb      	ldrb	r3, [r7, #11]
 8002642:	68f9      	ldr	r1, [r7, #12]
 8002644:	440b      	add	r3, r1
 8002646:	3201      	adds	r2, #1
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]
    if(altMinArray[index]>9) altMinArray[index]= 0;
 800264c:	7afb      	ldrb	r3, [r7, #11]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4413      	add	r3, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b09      	cmp	r3, #9
 8002656:	d904      	bls.n	8002662 <setUserAltMin+0x3e>
 8002658:	7afb      	ldrb	r3, [r7, #11]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
}
 8002662:	bf00      	nop
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <setUserErase>:

unsigned char setUserErase(unsigned int* idx)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    unsigned char* eraseArray = getEraseTestArray();
 8002674:	f7ff fbec 	bl	8001e50 <getEraseTestArray>
 8002678:	4603      	mov	r3, r0
 800267a:	60fb      	str	r3, [r7, #12]
    unsigned int index = *idx;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60bb      	str	r3, [r7, #8]
    eraseArray[index] = eraseArray[index]+1;
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4413      	add	r3, r2
 8002688:	781a      	ldrb	r2, [r3, #0]
 800268a:	68f9      	ldr	r1, [r7, #12]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	440b      	add	r3, r1
 8002690:	3201      	adds	r2, #1
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]
    if(eraseArray[index]>9) eraseArray[index]= 0;
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4413      	add	r3, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b09      	cmp	r3, #9
 80026a0:	d904      	bls.n	80026ac <setUserErase+0x40>
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4413      	add	r3, r2
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
}
 80026ac:	bf00      	nop
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <setUserAltMax>:

unsigned char setUserAltMax(unsigned char* idx)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
    unsigned char* altMaxArray = getAltMaxArray();
 80026be:	f7ff fb8b 	bl	8001dd8 <getAltMaxArray>
 80026c2:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	72fb      	strb	r3, [r7, #11]
    altMaxArray[index] = altMaxArray[index]+1;
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	781a      	ldrb	r2, [r3, #0]
 80026d2:	7afb      	ldrb	r3, [r7, #11]
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	440b      	add	r3, r1
 80026d8:	3201      	adds	r2, #1
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]
    if(altMaxArray[index]>9) altMaxArray[index]= 0;
 80026de:	7afb      	ldrb	r3, [r7, #11]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b09      	cmp	r3, #9
 80026e8:	d904      	bls.n	80026f4 <setUserAltMax+0x3e>
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
}
 80026f4:	bf00      	nop
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <setUserNumSaltos>:

unsigned char setUserNumSaltos(unsigned char* idx)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
    unsigned char* numSaltosArray = getNumSaltosArray();
 8002706:	f7ff fb71 	bl	8001dec <getNumSaltosArray>
 800270a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	72fb      	strb	r3, [r7, #11]
    numSaltosArray[index] = numSaltosArray[index]+1;
 8002712:	7afb      	ldrb	r3, [r7, #11]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	781a      	ldrb	r2, [r3, #0]
 800271a:	7afb      	ldrb	r3, [r7, #11]
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	440b      	add	r3, r1
 8002720:	3201      	adds	r2, #1
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]
    if(numSaltosArray[index]>9) numSaltosArray[index]= 0;
 8002726:	7afb      	ldrb	r3, [r7, #11]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b09      	cmp	r3, #9
 8002730:	d904      	bls.n	800273c <setUserNumSaltos+0x3e>
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <setUserTypeJump>:

unsigned char setUserTypeJump(unsigned char* idx)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
    unsigned char* typeJumpArray = getTypeJumpArray();
 800274e:	f7ff fb57 	bl	8001e00 <getTypeJumpArray>
 8002752:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	72fb      	strb	r3, [r7, #11]
    typeJumpArray[index] = typeJumpArray[index]+1;
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	68f9      	ldr	r1, [r7, #12]
 8002766:	440b      	add	r3, r1
 8002768:	3201      	adds	r2, #1
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]
    if(typeJumpArray[index]>3) typeJumpArray[index]= 0;
 800276e:	7afb      	ldrb	r3, [r7, #11]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d904      	bls.n	8002784 <setUserTypeJump+0x3e>
 800277a:	7afb      	ldrb	r3, [r7, #11]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
}
 8002784:	bf00      	nop
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <setUserAltDJ>:

unsigned char setUserAltDJ(unsigned char* idx)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
    unsigned char* AltDJArray = getAltDJArray();
 8002796:	f7ff fb3d 	bl	8001e14 <getAltDJArray>
 800279a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	72fb      	strb	r3, [r7, #11]
    AltDJArray[index] = AltDJArray[index]+1;
 80027a2:	7afb      	ldrb	r3, [r7, #11]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	7afb      	ldrb	r3, [r7, #11]
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	440b      	add	r3, r1
 80027b0:	3201      	adds	r2, #1
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]
    if(AltDJArray[index]>9) AltDJArray[index]= 0;
 80027b6:	7afb      	ldrb	r3, [r7, #11]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b09      	cmp	r3, #9
 80027c0:	d904      	bls.n	80027cc <setUserAltDJ+0x3e>
 80027c2:	7afb      	ldrb	r3, [r7, #11]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
}
 80027cc:	bf00      	nop
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <setUserNumSeries>:

unsigned char setUserNumSeries(unsigned char* idx)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
    unsigned char* numSeriesArray = getNumSeriesArray();
 80027de:	f7ff fb23 	bl	8001e28 <getNumSeriesArray>
 80027e2:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	72fb      	strb	r3, [r7, #11]
    numSeriesArray[index] = numSeriesArray[index]+1;
 80027ea:	7afb      	ldrb	r3, [r7, #11]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	7afb      	ldrb	r3, [r7, #11]
 80027f4:	68f9      	ldr	r1, [r7, #12]
 80027f6:	440b      	add	r3, r1
 80027f8:	3201      	adds	r2, #1
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]
    if(numSeriesArray[index]>9) numSeriesArray[index]= 0;
 80027fe:	7afb      	ldrb	r3, [r7, #11]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4413      	add	r3, r2
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b09      	cmp	r3, #9
 8002808:	d904      	bls.n	8002814 <setUserNumSeries+0x3e>
 800280a:	7afb      	ldrb	r3, [r7, #11]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
}
 8002814:	bf00      	nop
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <setUserMass>:
    IntervalSeriesArray[index] = IntervalSeriesArray[index]+1;
    if(IntervalSeriesArray[index]>9) IntervalSeriesArray[index]= 0;
}

unsigned char setUserMass(unsigned char* idx)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
    unsigned char* massArray = getMassArray();
 8002826:	f7ff fab9 	bl	8001d9c <getMassArray>
 800282a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	72fb      	strb	r3, [r7, #11]
    massArray[index] = massArray[index]+1;
 8002832:	7afb      	ldrb	r3, [r7, #11]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	7afb      	ldrb	r3, [r7, #11]
 800283c:	68f9      	ldr	r1, [r7, #12]
 800283e:	440b      	add	r3, r1
 8002840:	3201      	adds	r2, #1
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
    if(massArray[index]>9) massArray[index]= 0;
 8002846:	7afb      	ldrb	r3, [r7, #11]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b09      	cmp	r3, #9
 8002850:	d904      	bls.n	800285c <setUserMass+0x3e>
 8002852:	7afb      	ldrb	r3, [r7, #11]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
}
 800285c:	bf00      	nop
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <setUserOverMass>:

unsigned char setUserOverMass(unsigned char* idx)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
    unsigned char* overMassArray = getOverMassArray();
 800286e:	f7ff fa9f 	bl	8001db0 <getOverMassArray>
 8002872:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	72fb      	strb	r3, [r7, #11]
    overMassArray[index] = overMassArray[index]+1;
 800287a:	7afb      	ldrb	r3, [r7, #11]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	7afb      	ldrb	r3, [r7, #11]
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	440b      	add	r3, r1
 8002888:	3201      	adds	r2, #1
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]
    if(overMassArray[index]>9) overMassArray[index]= 0;
 800288e:	7afb      	ldrb	r3, [r7, #11]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b09      	cmp	r3, #9
 8002898:	d904      	bls.n	80028a4 <setUserOverMass+0x3e>
 800289a:	7afb      	ldrb	r3, [r7, #11]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
}
 80028a4:	bf00      	nop
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <setUserNumTest>:

unsigned char setUserNumTest(unsigned char* idx)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
    unsigned char* numTestArray = getNumTestArray();
 80028b6:	f7ff fac1 	bl	8001e3c <getNumTestArray>
 80028ba:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	72fb      	strb	r3, [r7, #11]
    numTestArray[index] = numTestArray[index]+1;
 80028c2:	7afb      	ldrb	r3, [r7, #11]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	7afb      	ldrb	r3, [r7, #11]
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	440b      	add	r3, r1
 80028d0:	3201      	adds	r2, #1
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]
    if(numTestArray[index]>9) numTestArray[index]= 0;
 80028d6:	7afb      	ldrb	r3, [r7, #11]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b09      	cmp	r3, #9
 80028e0:	d904      	bls.n	80028ec <setUserNumTest+0x3e>
 80028e2:	7afb      	ldrb	r3, [r7, #11]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
}
 80028ec:	bf00      	nop
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <setIntervalSaltosTime>:

unsigned char* setIntervalSaltosTime(unsigned char* configInputTimer)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	unsigned char index = *configInputTimer + 3;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	3303      	adds	r3, #3
 8002906:	73fb      	strb	r3, [r7, #15]
	struct tm* insertTime = getIntervalTimeStruct();
 8002908:	f7ff fa34 	bl	8001d74 <getIntervalTimeStruct>
 800290c:	4603      	mov	r3, r0
 800290e:	60bb      	str	r3, [r7, #8]

	switch(index)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	3b03      	subs	r3, #3
 8002914:	2b04      	cmp	r3, #4
 8002916:	d84a      	bhi.n	80029ae <setIntervalSaltosTime+0xb6>
 8002918:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <setIntervalSaltosTime+0x28>)
 800291a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291e:	bf00      	nop
 8002920:	08002935 	.word	0x08002935
 8002924:	08002951 	.word	0x08002951
 8002928:	080029af 	.word	0x080029af
 800292c:	0800296b 	.word	0x0800296b
 8002930:	08002987 	.word	0x08002987
	{
		case DEZENA_M:
			insertTime->tm_min = insertTime->tm_min+10;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f103 020a 	add.w	r2, r3, #10
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b3c      	cmp	r3, #60	; 0x3c
 8002946:	dd2b      	ble.n	80029a0 <setIntervalSaltosTime+0xa8>
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2200      	movs	r2, #0
 800294c:	605a      	str	r2, [r3, #4]
		break;
 800294e:	e027      	b.n	80029a0 <setIntervalSaltosTime+0xa8>

		case UNIDADE_M:
			insertTime->tm_min = insertTime->tm_min+1;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b3c      	cmp	r3, #60	; 0x3c
 8002960:	dd20      	ble.n	80029a4 <setIntervalSaltosTime+0xac>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2200      	movs	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
		break;
 8002968:	e01c      	b.n	80029a4 <setIntervalSaltosTime+0xac>

		case DEZENA_S:
			insertTime->tm_sec =insertTime->tm_sec+10 ;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f103 020a 	add.w	r2, r3, #10
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b3c      	cmp	r3, #60	; 0x3c
 800297c:	dd14      	ble.n	80029a8 <setIntervalSaltosTime+0xb0>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

		break;
 8002984:	e010      	b.n	80029a8 <setIntervalSaltosTime+0xb0>

		case UNIDADE_S:
			insertTime->tm_sec =insertTime->tm_sec+1 ;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b3c      	cmp	r3, #60	; 0x3c
 8002996:	dd09      	ble.n	80029ac <setIntervalSaltosTime+0xb4>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
		break;
 800299e:	e005      	b.n	80029ac <setIntervalSaltosTime+0xb4>
		break;
 80029a0:	bf00      	nop
 80029a2:	e004      	b.n	80029ae <setIntervalSaltosTime+0xb6>
		break;
 80029a4:	bf00      	nop
 80029a6:	e002      	b.n	80029ae <setIntervalSaltosTime+0xb6>
		break;
 80029a8:	bf00      	nop
 80029aa:	e000      	b.n	80029ae <setIntervalSaltosTime+0xb6>
		break;
 80029ac:	bf00      	nop
	}

}
 80029ae:	bf00      	nop
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <setUserTime>:

unsigned char* setUserTime(unsigned char* inputUserTimer)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
    unsigned char index = *inputUserTimer;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	73fb      	strb	r3, [r7, #15]
    struct tm* insertTime = getTimeStruct();
 80029c6:	f7ff f9cb 	bl	8001d60 <getTimeStruct>
 80029ca:	60b8      	str	r0, [r7, #8]
//    static unsigned char timeString[9];

    switch(index)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b07      	cmp	r3, #7
 80029d0:	d86e      	bhi.n	8002ab0 <setUserTime+0xf8>
 80029d2:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <setUserTime+0x20>)
 80029d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d8:	080029f9 	.word	0x080029f9
 80029dc:	08002a15 	.word	0x08002a15
 80029e0:	08002ab1 	.word	0x08002ab1
 80029e4:	08002a2f 	.word	0x08002a2f
 80029e8:	08002a4b 	.word	0x08002a4b
 80029ec:	08002ab1 	.word	0x08002ab1
 80029f0:	08002a65 	.word	0x08002a65
 80029f4:	08002a81 	.word	0x08002a81
    {
        case DEZENA_H:
            insertTime->tm_hour = insertTime->tm_hour+10;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f103 020a 	add.w	r2, r3, #10
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b17      	cmp	r3, #23
 8002a0a:	dd46      	ble.n	8002a9a <setUserTime+0xe2>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002a12:	e042      	b.n	8002a9a <setUserTime+0xe2>

        case UNIDADE_H:
            insertTime->tm_hour = insertTime->tm_hour+1;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b17      	cmp	r3, #23
 8002a24:	dd3b      	ble.n	8002a9e <setUserTime+0xe6>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002a2c:	e037      	b.n	8002a9e <setUserTime+0xe6>

        case DEZENA_M:
            insertTime->tm_min = insertTime->tm_min+10;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f103 020a 	add.w	r2, r3, #10
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b3c      	cmp	r3, #60	; 0x3c
 8002a40:	dd2f      	ble.n	8002aa2 <setUserTime+0xea>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2200      	movs	r2, #0
 8002a46:	605a      	str	r2, [r3, #4]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002a48:	e02b      	b.n	8002aa2 <setUserTime+0xea>

        case UNIDADE_M:
        	insertTime->tm_min = insertTime->tm_min+1;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b3c      	cmp	r3, #60	; 0x3c
 8002a5a:	dd24      	ble.n	8002aa6 <setUserTime+0xee>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	605a      	str	r2, [r3, #4]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002a62:	e020      	b.n	8002aa6 <setUserTime+0xee>

        case DEZENA_S:
            insertTime->tm_sec =insertTime->tm_sec+10 ;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f103 020a 	add.w	r2, r3, #10
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b3c      	cmp	r3, #60	; 0x3c
 8002a76:	dd18      	ble.n	8002aaa <setUserTime+0xf2>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002a7e:	e014      	b.n	8002aaa <setUserTime+0xf2>

        case UNIDADE_S:
            insertTime->tm_sec =insertTime->tm_sec+1 ;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b3c      	cmp	r3, #60	; 0x3c
 8002a90:	dd0d      	ble.n	8002aae <setUserTime+0xf6>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002a98:	e009      	b.n	8002aae <setUserTime+0xf6>
        break;
 8002a9a:	bf00      	nop
 8002a9c:	e008      	b.n	8002ab0 <setUserTime+0xf8>
        break;
 8002a9e:	bf00      	nop
 8002aa0:	e006      	b.n	8002ab0 <setUserTime+0xf8>
        break;
 8002aa2:	bf00      	nop
 8002aa4:	e004      	b.n	8002ab0 <setUserTime+0xf8>
        break;
 8002aa6:	bf00      	nop
 8002aa8:	e002      	b.n	8002ab0 <setUserTime+0xf8>
        break;
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <setUserTime+0xf8>
        break;
 8002aae:	bf00      	nop
    }
}
 8002ab0:	bf00      	nop
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop

08002abc <alturaToTempo>:

unsigned int alturaToTempo(unsigned int altura)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	unsigned int tempo = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
	unsigned int nominator = 8 * altura;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	613b      	str	r3, [r7, #16]
	unsigned int  g = 981; // cm/s^2
 8002ace:	f240 33d5 	movw	r3, #981	; 0x3d5
 8002ad2:	60fb      	str	r3, [r7, #12]
	float relation =  nominator/g;
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe f889 	bl	8000bf4 <__aeabi_ui2f>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	60bb      	str	r3, [r7, #8]
	tempo = sqrt(relation);
 8002ae6:	68b8      	ldr	r0, [r7, #8]
 8002ae8:	f7fd fca6 	bl	8000438 <__aeabi_f2d>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f008 ff2a 	bl	800b94c <sqrt>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	f7fd ffa2 	bl	8000a48 <__aeabi_d2uiz>
 8002b04:	4603      	mov	r3, r0
 8002b06:	617b      	str	r3, [r7, #20]
	tempo = tempo*1000;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	617b      	str	r3, [r7, #20]
	return tempo;
 8002b14:	697b      	ldr	r3, [r7, #20]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <updateUserMsg>:
#include "time.h"
#include "stdlib.h"


unsigned char updateUserMsg(unsigned char col, unsigned char linha, unsigned char *userMessage, unsigned char* status)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60ba      	str	r2, [r7, #8]
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	4603      	mov	r3, r0
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	73bb      	strb	r3, [r7, #14]
	if(*status == IDDLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d108      	bne.n	8002b4a <updateUserMsg+0x2c>
	{
	    HW_PRINT_DATA(col,linha,userMessage);
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	7bb9      	ldrb	r1, [r7, #14]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 ffbe 	bl	8003ac0 <HW_PRINT_DATA>
		*status = PRINTED;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
	}
}
 8002b4a:	bf00      	nop
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <readyUserInterface>:

//unsigned char readyUserInterface(unsigned char* displayStatus,unsigned char* cursorPosition)
unsigned char readyUserInterface(unsigned char* displayStatus)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	statusUserInterface(displayStatus);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f809 	bl	8002b74 <statusUserInterface>
	resetKeyPressed();
 8002b62:	f002 fa99 	bl	8005098 <resetKeyPressed>
//	resetCursorInterface(cursorPosition);
	eraseDataDisplay();
 8002b66:	f000 fecb 	bl	8003900 <eraseDataDisplay>
}
 8002b6a:	bf00      	nop
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <statusUserInterface>:

unsigned char statusUserInterface(unsigned char* displayStatus)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	*displayStatus = IDDLE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
}
 8002b82:	bf00      	nop
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
	...

08002b90 <exportStateMachine>:
        struct dataInsert menuInsert;
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
unsigned char exportStateMachine(struct Menu* subMenu)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuExport = subMenu;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	617b      	str	r3, [r7, #20]
    unsigned char key = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	77fb      	strb	r3, [r7, #31]
    short index = 2;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	817b      	strh	r3, [r7, #10]
    unsigned char indexTest = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	74fb      	strb	r3, [r7, #19]
    unsigned char testSamples = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	74bb      	strb	r3, [r7, #18]
    unsigned char selectedUserTest=0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	747b      	strb	r3, [r7, #17]
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    struct results* ptr_structExportResult;
    unsigned char dataVerify;
    //unsigned char cursorPosition[2] = {0,0};
    unsigned char displayUpdateStatus = IDDLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	727b      	strb	r3, [r7, #9]
    while(key != MENU)
 8002bb4:	bf00      	nop
 8002bb6:	e171      	b.n	8002e9c <exportStateMachine+0x30c>
    {
        switch(subMenuExport->menuState)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	78db      	ldrb	r3, [r3, #3]
 8002bbc:	2b06      	cmp	r3, #6
 8002bbe:	f200 816d 	bhi.w	8002e9c <exportStateMachine+0x30c>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <exportStateMachine+0x38>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002be5 	.word	0x08002be5
 8002bcc:	08002bf5 	.word	0x08002bf5
 8002bd0:	08002c23 	.word	0x08002c23
 8002bd4:	08002d53 	.word	0x08002d53
 8002bd8:	08002e37 	.word	0x08002e37
 8002bdc:	08002cbb 	.word	0x08002cbb
 8002be0:	08002e6f 	.word	0x08002e6f
        {
            case IDDLE:
                subMenuExport->menuState = getNextSub(VERIFICA_COMM);
 8002be4:	2001      	movs	r0, #1
 8002be6:	f001 fc87 	bl	80044f8 <getNextSub>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	70da      	strb	r2, [r3, #3]
            break;
 8002bf2:	e153      	b.n	8002e9c <exportStateMachine+0x30c>

            case VERIFICA_COMM:
            	startCOMM(); //verificar se nao preciso deixar uma flag de comm no data.c para acessar o valor dela
 8002bf4:	f000 fe99 	bl	800392a <startCOMM>
            	// e comparar para verificar se a comm já está ligada antes de liga-la novamente.
                updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 8002bf8:	4bad      	ldr	r3, [pc, #692]	; (8002eb0 <exportStateMachine+0x320>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	f107 0309 	add.w	r3, r7, #9
 8002c00:	2100      	movs	r1, #0
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7ff ff8b 	bl	8002b1e <updateUserMsg>
                subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8002c08:	2002      	movs	r0, #2
 8002c0a:	f001 fc75 	bl	80044f8 <getNextSub>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	70da      	strb	r2, [r3, #3]
                readyUserInterface(&displayUpdateStatus);
 8002c16:	f107 0309 	add.w	r3, r7, #9
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ff9a 	bl	8002b54 <readyUserInterface>
            break;
 8002c20:	e13c      	b.n	8002e9c <exportStateMachine+0x30c>

            case EXPORTAR_UNITARIO:
                updateUserMsg(0,USERMSG1,exportunitUserMsg,&displayUpdateStatus);
 8002c22:	4ba4      	ldr	r3, [pc, #656]	; (8002eb4 <exportStateMachine+0x324>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	f107 0309 	add.w	r3, r7, #9
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7ff ff76 	bl	8002b1e <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8002c32:	4ba1      	ldr	r3, [pc, #644]	; (8002eb8 <exportStateMachine+0x328>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	2102      	movs	r1, #2
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f000 ff40 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8002c40:	4b9d      	ldr	r3, [pc, #628]	; (8002eb8 <exportStateMachine+0x328>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fb2f 	bl	80022a8 <stringLenght>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	4b9b      	ldr	r3, [pc, #620]	; (8002ebc <exportStateMachine+0x32c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	2102      	movs	r1, #2
 8002c56:	f000 ff33 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8002c5a:	4b99      	ldr	r3, [pc, #612]	; (8002ec0 <exportStateMachine+0x330>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2103      	movs	r1, #3
 8002c62:	2000      	movs	r0, #0
 8002c64:	f000 ff2c 	bl	8003ac0 <HW_PRINT_DATA>

                key = getKeyPressed();
 8002c68:	f002 fa0a 	bl	8005080 <getKeyPressed>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	77fb      	strb	r3, [r7, #31]

                if(key == AVANCAR)
 8002c70:	7ffb      	ldrb	r3, [r7, #31]
 8002c72:	2b41      	cmp	r3, #65	; 0x41
 8002c74:	d10e      	bne.n	8002c94 <exportStateMachine+0x104>
                {
                	resetKeyPressed();
 8002c76:	f002 fa0f 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8002c7a:	f107 0309 	add.w	r3, r7, #9
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ff68 	bl	8002b54 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_TODOS);
 8002c84:	2005      	movs	r0, #5
 8002c86:	f001 fc37 	bl	80044f8 <getNextSub>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	70da      	strb	r2, [r3, #3]
 8002c92:	e103      	b.n	8002e9c <exportStateMachine+0x30c>
                }

                else if(key == CONFIRMAR)
 8002c94:	7ffb      	ldrb	r3, [r7, #31]
 8002c96:	2b43      	cmp	r3, #67	; 0x43
 8002c98:	f040 8100 	bne.w	8002e9c <exportStateMachine+0x30c>
                {
                	resetKeyPressed();
 8002c9c:	f002 f9fc 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8002ca0:	f107 0309 	add.w	r3, r7, #9
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff55 	bl	8002b54 <readyUserInterface>
                    //subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 8002caa:	2003      	movs	r0, #3
 8002cac:	f001 fc24 	bl	80044f8 <getNextSub>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	70da      	strb	r2, [r3, #3]
                }
                break;
 8002cb8:	e0f0      	b.n	8002e9c <exportStateMachine+0x30c>

            case EXPORTAR_TODOS:
                updateUserMsg(0,0,exportallUserMsg,&displayUpdateStatus);
 8002cba:	4b82      	ldr	r3, [pc, #520]	; (8002ec4 <exportStateMachine+0x334>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	f107 0309 	add.w	r3, r7, #9
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7ff ff2a 	bl	8002b1e <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8002cca:	4b7b      	ldr	r3, [pc, #492]	; (8002eb8 <exportStateMachine+0x328>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f000 fef4 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8002cd8:	4b77      	ldr	r3, [pc, #476]	; (8002eb8 <exportStateMachine+0x328>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fae3 	bl	80022a8 <stringLenght>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	4b75      	ldr	r3, [pc, #468]	; (8002ebc <exportStateMachine+0x32c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	2102      	movs	r1, #2
 8002cee:	f000 fee7 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8002cf2:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <exportStateMachine+0x330>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2103      	movs	r1, #3
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f000 fee0 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 8002d00:	f002 f9be 	bl	8005080 <getKeyPressed>
 8002d04:	4603      	mov	r3, r0
 8002d06:	77fb      	strb	r3, [r7, #31]

                if(key == AVANCAR)
 8002d08:	7ffb      	ldrb	r3, [r7, #31]
 8002d0a:	2b41      	cmp	r3, #65	; 0x41
 8002d0c:	d10e      	bne.n	8002d2c <exportStateMachine+0x19c>
                {
                	resetKeyPressed();
 8002d0e:	f002 f9c3 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8002d12:	f107 0309 	add.w	r3, r7, #9
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff1c 	bl	8002b54 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f001 fbeb 	bl	80044f8 <getNextSub>
 8002d22:	4603      	mov	r3, r0
 8002d24:	461a      	mov	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	70da      	strb	r2, [r3, #3]
 8002d2a:	e0b7      	b.n	8002e9c <exportStateMachine+0x30c>
                }

                else if(key == CONFIRMAR)
 8002d2c:	7ffb      	ldrb	r3, [r7, #31]
 8002d2e:	2b43      	cmp	r3, #67	; 0x43
 8002d30:	f040 80b4 	bne.w	8002e9c <exportStateMachine+0x30c>
                {
                	resetKeyPressed();
 8002d34:	f002 f9b0 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8002d38:	f107 0309 	add.w	r3, r7, #9
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff09 	bl	8002b54 <readyUserInterface>
                    //subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
                    subMenuExport->menuState = getNextSub(PROCESS_TODOS);
 8002d42:	2006      	movs	r0, #6
 8002d44:	f001 fbd8 	bl	80044f8 <getNextSub>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	70da      	strb	r2, [r3, #3]
                }
                break;
 8002d50:	e0a4      	b.n	8002e9c <exportStateMachine+0x30c>


            case NUM_TESTE_EXPORT:
                updateUserMsg(0,USERMSG1,consultTestUserMsg,&displayUpdateStatus);
 8002d52:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <exportStateMachine+0x338>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	f107 0309 	add.w	r3, r7, #9
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7ff fede 	bl	8002b1e <updateUserMsg>
                ptr_exportTestString = getNumTestString();
 8002d62:	f7ff fbff 	bl	8002564 <getNumTestString>
 8002d66:	61b8      	str	r0, [r7, #24]
                HW_PRINT_DATA(0,USERMSG2,ptr_exportTestString);
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f000 fea7 	bl	8003ac0 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8002d72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fec7 	bl	8003b0c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8002d7e:	4b4e      	ldr	r3, [pc, #312]	; (8002eb8 <exportStateMachine+0x328>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	2102      	movs	r1, #2
 8002d86:	2000      	movs	r0, #0
 8002d88:	f000 fe9a 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8002d8c:	4b4a      	ldr	r3, [pc, #296]	; (8002eb8 <exportStateMachine+0x328>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fa89 	bl	80022a8 <stringLenght>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <exportStateMachine+0x32c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2102      	movs	r1, #2
 8002da2:	f000 fe8d 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8002da6:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <exportStateMachine+0x330>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	2103      	movs	r1, #3
 8002dae:	2000      	movs	r0, #0
 8002db0:	f000 fe86 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8002db4:	4b42      	ldr	r3, [pc, #264]	; (8002ec0 <exportStateMachine+0x330>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fa75 	bl	80022a8 <stringLenght>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <exportStateMachine+0x33c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2103      	movs	r1, #3
 8002dca:	f000 fe79 	bl	8003ac0 <HW_PRINT_DATA>
				key = getKeyPressed();
 8002dce:	f002 f957 	bl	8005080 <getKeyPressed>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	77fb      	strb	r3, [r7, #31]

                if(key == INSERIR)
 8002dd6:	7ffb      	ldrb	r3, [r7, #31]
 8002dd8:	2b49      	cmp	r3, #73	; 0x49
 8002dda:	d10e      	bne.n	8002dfa <exportStateMachine+0x26a>
                {
                	resetKeyPressed();
 8002ddc:	f002 f95c 	bl	8005098 <resetKeyPressed>
                    setUserNumTest(&index);
 8002de0:	f107 030a 	add.w	r3, r7, #10
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fd62 	bl	80028ae <setUserNumTest>
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 8002dea:	2003      	movs	r0, #3
 8002dec:	f001 fb84 	bl	80044f8 <getNextSub>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461a      	mov	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	70da      	strb	r2, [r3, #3]
 8002df8:	e050      	b.n	8002e9c <exportStateMachine+0x30c>
                }
                else if(key == AVANCAR)
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	2b41      	cmp	r3, #65	; 0x41
 8002dfe:	d108      	bne.n	8002e12 <exportStateMachine+0x282>
                {
                	resetKeyPressed();
 8002e00:	f002 f94a 	bl	8005098 <resetKeyPressed>
                    indexChange(&index,2);
 8002e04:	f107 030a 	add.w	r3, r7, #10
 8002e08:	2102      	movs	r1, #2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fa90 	bl	8002330 <indexChange>
 8002e10:	e044      	b.n	8002e9c <exportStateMachine+0x30c>
                }
                else if(key == CONFIRMAR)
 8002e12:	7ffb      	ldrb	r3, [r7, #31]
 8002e14:	2b43      	cmp	r3, #67	; 0x43
 8002e16:	d141      	bne.n	8002e9c <exportStateMachine+0x30c>
                {
                	resetKeyPressed();
 8002e18:	f002 f93e 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8002e1c:	f107 0309 	add.w	r3, r7, #9
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fe97 	bl	8002b54 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(PROCESS_UNITARIO);
 8002e26:	2004      	movs	r0, #4
 8002e28:	f001 fb66 	bl	80044f8 <getNextSub>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	70da      	strb	r2, [r3, #3]
                    //subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
                }

                break;
 8002e34:	e032      	b.n	8002e9c <exportStateMachine+0x30c>

                case PROCESS_UNITARIO:
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8002e36:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <exportStateMachine+0x340>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	f107 0309 	add.w	r3, r7, #9
 8002e3e:	2100      	movs	r1, #0
 8002e40:	2000      	movs	r0, #0
 8002e42:	f7ff fe6c 	bl	8002b1e <updateUserMsg>
                    selectedUserTest = stringToInt(ptr_exportTestString);
 8002e46:	69b8      	ldr	r0, [r7, #24]
 8002e48:	f7ff fa1c 	bl	8002284 <stringToInt>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	747b      	strb	r3, [r7, #17]
                    ptr_structExportResult = getUserResultData(selectedUserTest);
 8002e50:	7c7b      	ldrb	r3, [r7, #17]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff f876 	bl	8001f44 <getUserResultData>
 8002e58:	60f8      	str	r0, [r7, #12]
                     *
                     */
                   //ESSE FOR � S� PARA TESTE NO CONSOLE, AO INVES DESSE MONTE DE "PRINT", COLOCAREI FU��O PARA ENVIAR BT
//                    transmissionCOMM();
                    //Acessa os dados referente ao Teste e envia apenas o selecionado por BT
                subMenuExport->menuState = getNextSub(IDDLE);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f001 fb4c 	bl	80044f8 <getNextSub>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	70da      	strb	r2, [r3, #3]
                key = MENU;
 8002e68:	234d      	movs	r3, #77	; 0x4d
 8002e6a:	77fb      	strb	r3, [r7, #31]
                break;
 8002e6c:	e016      	b.n	8002e9c <exportStateMachine+0x30c>

                case PROCESS_TODOS: //
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <exportStateMachine+0x340>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	f107 0309 	add.w	r3, r7, #9
 8002e76:	2100      	movs	r1, #0
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7ff fe50 	bl	8002b1e <updateUserMsg>

                    subMenuExport->menuState = getNextSub(IDDLE);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f001 fb3a 	bl	80044f8 <getNextSub>
 8002e84:	4603      	mov	r3, r0
 8002e86:	461a      	mov	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	70da      	strb	r2, [r3, #3]
  				    readyUserInterface(&displayUpdateStatus);
 8002e8c:	f107 0309 	add.w	r3, r7, #9
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fe5f 	bl	8002b54 <readyUserInterface>
                    key = MENU;
 8002e96:	234d      	movs	r3, #77	; 0x4d
 8002e98:	77fb      	strb	r3, [r7, #31]
                    break;
 8002e9a:	bf00      	nop
    while(key != MENU)
 8002e9c:	7ffb      	ldrb	r3, [r7, #31]
 8002e9e:	2b4d      	cmp	r3, #77	; 0x4d
 8002ea0:	f47f ae8a 	bne.w	8002bb8 <exportStateMachine+0x28>
        }
    }

}
 8002ea4:	bf00      	nop
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3720      	adds	r7, #32
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000030 	.word	0x20000030
 8002eb4:	200000b0 	.word	0x200000b0
 8002eb8:	200000c8 	.word	0x200000c8
 8002ebc:	200000d0 	.word	0x200000d0
 8002ec0:	200000d4 	.word	0x200000d4
 8002ec4:	200000b4 	.word	0x200000b4
 8002ec8:	2000006c 	.word	0x2000006c
 8002ecc:	200000cc 	.word	0x200000cc
 8002ed0:	20000074 	.word	0x20000074

08002ed4 <initStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char initStateMachine(struct Menu* subMenu)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b09e      	sub	sp, #120	; 0x78
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuIniciar = subMenu;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	673b      	str	r3, [r7, #112]	; 0x70
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 8002ee0:	f7fe ffc0 	bl	8001e64 <getUserConfigStruct>
 8002ee4:	66f8      	str	r0, [r7, #108]	; 0x6c
    struct results* ptr_result;
    struct tm myTime;
	struct tm* userTimeStruct = &myTime;
 8002ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eea:	66bb      	str	r3, [r7, #104]	; 0x68
    unsigned char key = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    short insertColumn = 7;
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	84fb      	strh	r3, [r7, #38]	; 0x26
    unsigned int* ptr_vooTimeString;
    unsigned int* ptr_alturaString;
    unsigned int* ptr_potString;


    unsigned char displayUpdateStatus = IDDLE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
//    unsigned char* ptr_uiVooTime;
//    unsigned char* ptr_ucAltDistance;
//    struct results result[TEST_SIZE]; //verificar se vou usar o endere�o de data.c assim como fiz com a estrutura de configuracao

    unsigned char indexTest;
    unsigned char readingStatus = IDDLE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    unsigned char selectedUserTest = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    unsigned char testSamples = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75


    unsigned char startTapete,readingState;


    while(key != MENU)
 8002f0c:	bf00      	nop
 8002f0e:	f000 bcc3 	b.w	8003898 <initStateMachine+0x9c4>
    {
        switch(subMenuIniciar->menuState)
 8002f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f14:	78db      	ldrb	r3, [r3, #3]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	f200 84be 	bhi.w	8003898 <initStateMachine+0x9c4>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <initStateMachine+0x50>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f59 	.word	0x08002f59
 8002f28:	08002f6b 	.word	0x08002f6b
 8002f2c:	08003015 	.word	0x08003015
 8002f30:	080030d7 	.word	0x080030d7
 8002f34:	080031e1 	.word	0x080031e1
 8002f38:	08003303 	.word	0x08003303
 8002f3c:	080033fb 	.word	0x080033fb
 8002f40:	08003477 	.word	0x08003477
 8002f44:	080034e5 	.word	0x080034e5
 8002f48:	08003545 	.word	0x08003545
 8002f4c:	080035f5 	.word	0x080035f5
 8002f50:	08003759 	.word	0x08003759
 8002f54:	08003801 	.word	0x08003801
        {
            case IDDLE:
                subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8002f58:	2001      	movs	r0, #1
 8002f5a:	f001 facd 	bl	80044f8 <getNextSub>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
 8002f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f64:	70da      	strb	r2, [r3, #3]
                //RESET
            break;
 8002f66:	f000 bc97 	b.w	8003898 <initStateMachine+0x9c4>

            case COMM_OFF:
                updateUserMsg(0,USERMSG1,noTransmissionMsg,&displayUpdateStatus);
 8002f6a:	4bcd      	ldr	r3, [pc, #820]	; (80032a0 <initStateMachine+0x3cc>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	f107 030f 	add.w	r3, r7, #15
 8002f72:	2100      	movs	r1, #0
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7ff fdd2 	bl	8002b1e <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8002f7a:	4bca      	ldr	r3, [pc, #808]	; (80032a4 <initStateMachine+0x3d0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2102      	movs	r1, #2
 8002f82:	2000      	movs	r0, #0
 8002f84:	f000 fd9c 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8002f88:	4bc6      	ldr	r3, [pc, #792]	; (80032a4 <initStateMachine+0x3d0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff f98b 	bl	80022a8 <stringLenght>
 8002f92:	4bc5      	ldr	r3, [pc, #788]	; (80032a8 <initStateMachine+0x3d4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	2102      	movs	r1, #2
 8002f9a:	f000 fd91 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8002f9e:	4bc3      	ldr	r3, [pc, #780]	; (80032ac <initStateMachine+0x3d8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2103      	movs	r1, #3
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f000 fd8a 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 8002fac:	f002 f868 	bl	8005080 <getKeyPressed>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                if(key == AVANCAR)
 8002fb6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002fba:	2b41      	cmp	r3, #65	; 0x41
 8002fbc:	d10f      	bne.n	8002fde <initStateMachine+0x10a>
                {
                	resetKeyPressed();
 8002fbe:	f002 f86b 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8002fc2:	f107 030f 	add.w	r3, r7, #15
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fdc4 	bl	8002b54 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(COMM_ON);
 8002fcc:	2002      	movs	r0, #2
 8002fce:	f001 fa93 	bl	80044f8 <getNextSub>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd8:	70da      	strb	r2, [r3, #3]
 8002fda:	f000 bc5d 	b.w	8003898 <initStateMachine+0x9c4>
                }
                else if(key == CONFIRMAR)
 8002fde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002fe2:	2b43      	cmp	r3, #67	; 0x43
 8002fe4:	f040 8458 	bne.w	8003898 <initStateMachine+0x9c4>
                {
                	resetKeyPressed();
 8002fe8:	f002 f856 	bl	8005098 <resetKeyPressed>
                    stopCOMM();
 8002fec:	f000 fcab 	bl	8003946 <stopCOMM>
                    readyUserInterface(&displayUpdateStatus);
 8002ff0:	f107 030f 	add.w	r3, r7, #15
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fdad 	bl	8002b54 <readyUserInterface>
                    ptr_userConfiguration->userCommConfig = COMM_OFF;
 8002ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 8003002:	2003      	movs	r0, #3
 8003004:	f001 fa78 	bl	80044f8 <getNextSub>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800300e:	70da      	strb	r2, [r3, #3]
                }
            break;
 8003010:	f000 bc42 	b.w	8003898 <initStateMachine+0x9c4>

            case COMM_ON:
				updateUserMsg(0,0,yesTransmissionMsg,&displayUpdateStatus);
 8003014:	4ba6      	ldr	r3, [pc, #664]	; (80032b0 <initStateMachine+0x3dc>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f107 030f 	add.w	r3, r7, #15
 800301c:	2100      	movs	r1, #0
 800301e:	2000      	movs	r0, #0
 8003020:	f7ff fd7d 	bl	8002b1e <updateUserMsg>
				HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003024:	4b9f      	ldr	r3, [pc, #636]	; (80032a4 <initStateMachine+0x3d0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	2102      	movs	r1, #2
 800302c:	2000      	movs	r0, #0
 800302e:	f000 fd47 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8003032:	4b9c      	ldr	r3, [pc, #624]	; (80032a4 <initStateMachine+0x3d0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff f936 	bl	80022a8 <stringLenght>
 800303c:	4b9a      	ldr	r3, [pc, #616]	; (80032a8 <initStateMachine+0x3d4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	2102      	movs	r1, #2
 8003044:	f000 fd3c 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003048:	4b98      	ldr	r3, [pc, #608]	; (80032ac <initStateMachine+0x3d8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	2103      	movs	r1, #3
 8003050:	2000      	movs	r0, #0
 8003052:	f000 fd35 	bl	8003ac0 <HW_PRINT_DATA>
				key = getKeyPressed();
 8003056:	f002 f813 	bl	8005080 <getKeyPressed>
 800305a:	4603      	mov	r3, r0
 800305c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                if(key == AVANCAR)
 8003060:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003064:	2b41      	cmp	r3, #65	; 0x41
 8003066:	d10f      	bne.n	8003088 <initStateMachine+0x1b4>
				{
                	resetKeyPressed();
 8003068:	f002 f816 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 800306c:	f107 030f 	add.w	r3, r7, #15
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fd6f 	bl	8002b54 <readyUserInterface>
					subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8003076:	2001      	movs	r0, #1
 8003078:	f001 fa3e 	bl	80044f8 <getNextSub>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003082:	70da      	strb	r2, [r3, #3]
 8003084:	f000 bc08 	b.w	8003898 <initStateMachine+0x9c4>
				}
                else if(key == CONFIRMAR)
 8003088:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800308c:	2b43      	cmp	r3, #67	; 0x43
 800308e:	f040 8403 	bne.w	8003898 <initStateMachine+0x9c4>
                {
                	resetKeyPressed();
 8003092:	f002 f801 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003096:	f107 030f 	add.w	r3, r7, #15
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fd5a 	bl	8002b54 <readyUserInterface>
                    startCOMM();
 80030a0:	f000 fc43 	bl	800392a <startCOMM>
                	updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 80030a4:	4b83      	ldr	r3, [pc, #524]	; (80032b4 <initStateMachine+0x3e0>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	f107 030f 	add.w	r3, r7, #15
 80030ac:	2100      	movs	r1, #0
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7ff fd35 	bl	8002b1e <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus);
 80030b4:	f107 030f 	add.w	r3, r7, #15
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fd4b 	bl	8002b54 <readyUserInterface>
                     ptr_userConfiguration->userCommConfig = COMM_ON;
 80030be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 80030c6:	2003      	movs	r0, #3
 80030c8:	f001 fa16 	bl	80044f8 <getNextSub>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d2:	70da      	strb	r2, [r3, #3]
                }
                break;
 80030d4:	e3e0      	b.n	8003898 <initStateMachine+0x9c4>

            case TEMPO_READ:
                updateUserMsg(0,USERMSG1,timeUserMsg,&displayUpdateStatus);
 80030d6:	4b78      	ldr	r3, [pc, #480]	; (80032b8 <initStateMachine+0x3e4>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	f107 030f 	add.w	r3, r7, #15
 80030de:	2100      	movs	r1, #0
 80030e0:	2000      	movs	r0, #0
 80030e2:	f7ff fd1c 	bl	8002b1e <updateUserMsg>

                userTimeStruct = getTimeStruct();
 80030e6:	f7fe fe3b 	bl	8001d60 <getTimeStruct>
 80030ea:	66b8      	str	r0, [r7, #104]	; 0x68
                strftime(userTimeString, sizeof(userTimeString), "%H:%M:%S", userTimeStruct);
 80030ec:	f107 001c 	add.w	r0, r7, #28
 80030f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030f2:	4a72      	ldr	r2, [pc, #456]	; (80032bc <initStateMachine+0x3e8>)
 80030f4:	2109      	movs	r1, #9
 80030f6:	f007 f911 	bl	800a31c <strftime>
                HW_PRINT_DATA(0,USERMSG2,userTimeString);
 80030fa:	f107 031c 	add.w	r3, r7, #28
 80030fe:	461a      	mov	r2, r3
 8003100:	2101      	movs	r1, #1
 8003102:	2000      	movs	r0, #0
 8003104:	f000 fcdc 	bl	8003ac0 <HW_PRINT_DATA>
                HW_UPDATE_DATA(insertColumn,USERMSG2);
 8003108:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800310c:	2101      	movs	r1, #1
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fcfc 	bl	8003b0c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003114:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <initStateMachine+0x3d0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	2102      	movs	r1, #2
 800311c:	2000      	movs	r0, #0
 800311e:	f000 fccf 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8003122:	4b60      	ldr	r3, [pc, #384]	; (80032a4 <initStateMachine+0x3d0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff f8be 	bl	80022a8 <stringLenght>
 800312c:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <initStateMachine+0x3d4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	2102      	movs	r1, #2
 8003134:	f000 fcc4 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003138:	4b5c      	ldr	r3, [pc, #368]	; (80032ac <initStateMachine+0x3d8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	2103      	movs	r1, #3
 8003140:	2000      	movs	r0, #0
 8003142:	f000 fcbd 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8003146:	4b59      	ldr	r3, [pc, #356]	; (80032ac <initStateMachine+0x3d8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff f8ac 	bl	80022a8 <stringLenght>
 8003150:	4b5b      	ldr	r3, [pc, #364]	; (80032c0 <initStateMachine+0x3ec>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	2103      	movs	r1, #3
 8003158:	f000 fcb2 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 800315c:	f001 ff90 	bl	8005080 <getKeyPressed>
 8003160:	4603      	mov	r3, r0
 8003162:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                if(key == INSERIR)
 8003166:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800316a:	2b49      	cmp	r3, #73	; 0x49
 800316c:	d10e      	bne.n	800318c <initStateMachine+0x2b8>
                {
                	resetKeyPressed();
 800316e:	f001 ff93 	bl	8005098 <resetKeyPressed>
                    setUserTime(&insertColumn);
 8003172:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fc1e 	bl	80029b8 <setUserTime>
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 800317c:	2003      	movs	r0, #3
 800317e:	f001 f9bb 	bl	80044f8 <getNextSub>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003188:	70da      	strb	r2, [r3, #3]
 800318a:	e385      	b.n	8003898 <initStateMachine+0x9c4>
                }
                else if (key == AVANCAR)
 800318c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003190:	2b41      	cmp	r3, #65	; 0x41
 8003192:	d108      	bne.n	80031a6 <initStateMachine+0x2d2>
                {
                	resetKeyPressed();
 8003194:	f001 ff80 	bl	8005098 <resetKeyPressed>
                    indexColumn(&insertColumn,7);
 8003198:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800319c:	2107      	movs	r1, #7
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff f80a 	bl	80021b8 <indexColumn>
 80031a4:	e378      	b.n	8003898 <initStateMachine+0x9c4>
                }
                else if(key == CONFIRMAR)
 80031a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80031aa:	2b43      	cmp	r3, #67	; 0x43
 80031ac:	f040 8374 	bne.w	8003898 <initStateMachine+0x9c4>
                {
                	resetKeyPressed();
 80031b0:	f001 ff72 	bl	8005098 <resetKeyPressed>
                	insertColumn = 4; //colocar um define talvez -> definicao de caracteres no display massa e overmass
 80031b4:	2304      	movs	r3, #4
 80031b6:	84fb      	strh	r3, [r7, #38]	; 0x26
                    readyUserInterface(&displayUpdateStatus);
 80031b8:	f107 030f 	add.w	r3, r7, #15
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fcc9 	bl	8002b54 <readyUserInterface>
					ptr_userConfiguration->userTime = milisecondsTime(userTimeStruct);
 80031c2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80031c4:	f7ff f833 	bl	800222e <milisecondsTime>
 80031c8:	4603      	mov	r3, r0
 80031ca:	461a      	mov	r2, r3
 80031cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ce:	605a      	str	r2, [r3, #4]
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 80031d0:	2004      	movs	r0, #4
 80031d2:	f001 f991 	bl	80044f8 <getNextSub>
 80031d6:	4603      	mov	r3, r0
 80031d8:	461a      	mov	r2, r3
 80031da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031dc:	70da      	strb	r2, [r3, #3]
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                }
                break;
 80031de:	e35b      	b.n	8003898 <initStateMachine+0x9c4>

            case MASSA_READ:
                 updateUserMsg(0,USERMSG1,massUserMsg,&displayUpdateStatus);
 80031e0:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <initStateMachine+0x3f0>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	f107 030f 	add.w	r3, r7, #15
 80031e8:	2100      	movs	r1, #0
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7ff fc97 	bl	8002b1e <updateUserMsg>
                 ptr_massString = getMassString();
 80031f0:	f7ff f96c 	bl	80024cc <getMassString>
 80031f4:	4603      	mov	r3, r0
 80031f6:	64fb      	str	r3, [r7, #76]	; 0x4c
                 HW_PRINT_DATA(0,USERMSG2,ptr_massString);
 80031f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031fa:	2101      	movs	r1, #1
 80031fc:	2000      	movs	r0, #0
 80031fe:	f000 fc5f 	bl	8003ac0 <HW_PRINT_DATA>
                 HW_UPDATE_DATA(insertColumn,1);
 8003202:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003206:	2101      	movs	r1, #1
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fc7f 	bl	8003b0c <HW_UPDATE_DATA>
                 HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 800320e:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <initStateMachine+0x3d0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	2102      	movs	r1, #2
 8003216:	2000      	movs	r0, #0
 8003218:	f000 fc52 	bl	8003ac0 <HW_PRINT_DATA>
				 HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800321c:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <initStateMachine+0x3d0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff f841 	bl	80022a8 <stringLenght>
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <initStateMachine+0x3d4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	2102      	movs	r1, #2
 800322e:	f000 fc47 	bl	8003ac0 <HW_PRINT_DATA>
				 HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003232:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <initStateMachine+0x3d8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	2103      	movs	r1, #3
 800323a:	2000      	movs	r0, #0
 800323c:	f000 fc40 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <initStateMachine+0x3d8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff f82f 	bl	80022a8 <stringLenght>
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <initStateMachine+0x3ec>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	2103      	movs	r1, #3
 8003252:	f000 fc35 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 8003256:	f001 ff13 	bl	8005080 <getKeyPressed>
 800325a:	4603      	mov	r3, r0
 800325c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                if(key == INSERIR)
 8003260:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003264:	2b49      	cmp	r3, #73	; 0x49
 8003266:	d10e      	bne.n	8003286 <initStateMachine+0x3b2>
                {
                	resetKeyPressed();
 8003268:	f001 ff16 	bl	8005098 <resetKeyPressed>
                    setUserMass(&insertColumn); //criar variavel adicional para separar insertcolumn
 800326c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fad4 	bl	800281e <setUserMass>
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 8003276:	2004      	movs	r0, #4
 8003278:	f001 f93e 	bl	80044f8 <getNextSub>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003282:	70da      	strb	r2, [r3, #3]
 8003284:	e308      	b.n	8003898 <initStateMachine+0x9c4>
                }
                else if(key == AVANCAR)
 8003286:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800328a:	2b41      	cmp	r3, #65	; 0x41
 800328c:	d11c      	bne.n	80032c8 <initStateMachine+0x3f4>
                {
                	resetKeyPressed();
 800328e:	f001 ff03 	bl	8005098 <resetKeyPressed>
                    indexMass(&insertColumn);
 8003292:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff f821 	bl	80022de <indexMass>
 800329c:	e2fc      	b.n	8003898 <initStateMachine+0x9c4>
 800329e:	bf00      	nop
 80032a0:	20000028 	.word	0x20000028
 80032a4:	200000c8 	.word	0x200000c8
 80032a8:	200000d0 	.word	0x200000d0
 80032ac:	200000d4 	.word	0x200000d4
 80032b0:	2000002c 	.word	0x2000002c
 80032b4:	20000030 	.word	0x20000030
 80032b8:	20000034 	.word	0x20000034
 80032bc:	0800be14 	.word	0x0800be14
 80032c0:	200000cc 	.word	0x200000cc
 80032c4:	20000038 	.word	0x20000038
                }
                else if(key == CONFIRMAR)
 80032c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80032cc:	2b43      	cmp	r3, #67	; 0x43
 80032ce:	f040 82e3 	bne.w	8003898 <initStateMachine+0x9c4>
                {
                	resetKeyPressed();
 80032d2:	f001 fee1 	bl	8005098 <resetKeyPressed>
                	insertColumn = 4;
 80032d6:	2304      	movs	r3, #4
 80032d8:	84fb      	strh	r3, [r7, #38]	; 0x26
                    readyUserInterface(&displayUpdateStatus);
 80032da:	f107 030f 	add.w	r3, r7, #15
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fc38 	bl	8002b54 <readyUserInterface>
                    ptr_userConfiguration->userMass= stringToInt(ptr_massString);
 80032e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80032e6:	f7fe ffcd 	bl	8002284 <stringToInt>
 80032ea:	4603      	mov	r3, r0
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f0:	721a      	strb	r2, [r3, #8]
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 80032f2:	2005      	movs	r0, #5
 80032f4:	f001 f900 	bl	80044f8 <getNextSub>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032fe:	70da      	strb	r2, [r3, #3]
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                }
                break;
 8003300:	e2ca      	b.n	8003898 <initStateMachine+0x9c4>

            case SOBREC_READ:
                updateUserMsg(0,USERMSG1,overmassUserMsg,&displayUpdateStatus);
 8003302:	4bb1      	ldr	r3, [pc, #708]	; (80035c8 <initStateMachine+0x6f4>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	f107 030f 	add.w	r3, r7, #15
 800330a:	2100      	movs	r1, #0
 800330c:	2000      	movs	r0, #0
 800330e:	f7ff fc06 	bl	8002b1e <updateUserMsg>
                ptr_overMassString = getOverMassString();
 8003312:	f7ff f901 	bl	8002518 <getOverMassString>
 8003316:	4603      	mov	r3, r0
 8003318:	653b      	str	r3, [r7, #80]	; 0x50
                HW_PRINT_DATA(0,USERMSG2,ptr_overMassString);
 800331a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800331c:	2101      	movs	r1, #1
 800331e:	2000      	movs	r0, #0
 8003320:	f000 fbce 	bl	8003ac0 <HW_PRINT_DATA>
                HW_UPDATE_DATA(insertColumn,1);
 8003324:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003328:	2101      	movs	r1, #1
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fbee 	bl	8003b0c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003330:	4ba6      	ldr	r3, [pc, #664]	; (80035cc <initStateMachine+0x6f8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	2102      	movs	r1, #2
 8003338:	2000      	movs	r0, #0
 800333a:	f000 fbc1 	bl	8003ac0 <HW_PRINT_DATA>
				 HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800333e:	4ba3      	ldr	r3, [pc, #652]	; (80035cc <initStateMachine+0x6f8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe ffb0 	bl	80022a8 <stringLenght>
 8003348:	4ba1      	ldr	r3, [pc, #644]	; (80035d0 <initStateMachine+0x6fc>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	2102      	movs	r1, #2
 8003350:	f000 fbb6 	bl	8003ac0 <HW_PRINT_DATA>
				 HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003354:	4b9f      	ldr	r3, [pc, #636]	; (80035d4 <initStateMachine+0x700>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	2103      	movs	r1, #3
 800335c:	2000      	movs	r0, #0
 800335e:	f000 fbaf 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8003362:	4b9c      	ldr	r3, [pc, #624]	; (80035d4 <initStateMachine+0x700>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe ff9e 	bl	80022a8 <stringLenght>
 800336c:	4b9a      	ldr	r3, [pc, #616]	; (80035d8 <initStateMachine+0x704>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	2103      	movs	r1, #3
 8003374:	f000 fba4 	bl	8003ac0 <HW_PRINT_DATA>

                key = getKeyPressed();
 8003378:	f001 fe82 	bl	8005080 <getKeyPressed>
 800337c:	4603      	mov	r3, r0
 800337e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                if(key == INSERIR)
 8003382:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003386:	2b49      	cmp	r3, #73	; 0x49
 8003388:	d10e      	bne.n	80033a8 <initStateMachine+0x4d4>
                {
                	resetKeyPressed();
 800338a:	f001 fe85 	bl	8005098 <resetKeyPressed>
                    setUserOverMass(&insertColumn);
 800338e:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff fa67 	bl	8002866 <setUserOverMass>
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 8003398:	2005      	movs	r0, #5
 800339a:	f001 f8ad 	bl	80044f8 <getNextSub>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033a4:	70da      	strb	r2, [r3, #3]
 80033a6:	e277      	b.n	8003898 <initStateMachine+0x9c4>
                }
                else if(key == AVANCAR)
 80033a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80033ac:	2b41      	cmp	r3, #65	; 0x41
 80033ae:	d107      	bne.n	80033c0 <initStateMachine+0x4ec>
                {
                	resetKeyPressed();
 80033b0:	f001 fe72 	bl	8005098 <resetKeyPressed>
                    indexMass(&insertColumn);
 80033b4:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe ff90 	bl	80022de <indexMass>
 80033be:	e26b      	b.n	8003898 <initStateMachine+0x9c4>
                }
                else if(key == CONFIRMAR)
 80033c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80033c4:	2b43      	cmp	r3, #67	; 0x43
 80033c6:	f040 8267 	bne.w	8003898 <initStateMachine+0x9c4>
                {
                	resetKeyPressed();
 80033ca:	f001 fe65 	bl	8005098 <resetKeyPressed>
                	insertColumn = 7; //definicao de caracteres para TIME
 80033ce:	2307      	movs	r3, #7
 80033d0:	84fb      	strh	r3, [r7, #38]	; 0x26
                    readyUserInterface(&displayUpdateStatus);
 80033d2:	f107 030f 	add.w	r3, r7, #15
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fbbc 	bl	8002b54 <readyUserInterface>
                    ptr_userConfiguration->userOverMass= stringToInt(ptr_overMassString);
 80033dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80033de:	f7fe ff51 	bl	8002284 <stringToInt>
 80033e2:	4603      	mov	r3, r0
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e8:	725a      	strb	r2, [r3, #9]
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                    subMenuIniciar->menuState = getNextSub(START);
 80033ea:	2006      	movs	r0, #6
 80033ec:	f001 f884 	bl	80044f8 <getNextSub>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f6:	70da      	strb	r2, [r3, #3]
                }
                break;
 80033f8:	e24e      	b.n	8003898 <initStateMachine+0x9c4>

            case START:
                setInsertData(ptr_userConfiguration);
 80033fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80033fc:	f001 f88e 	bl	800451c <setInsertData>
                updateUserMsg(0,USERMSG1,startreadUserMsg,&displayUpdateStatus);
 8003400:	4b76      	ldr	r3, [pc, #472]	; (80035dc <initStateMachine+0x708>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	f107 030f 	add.w	r3, r7, #15
 8003408:	2100      	movs	r1, #0
 800340a:	2000      	movs	r0, #0
 800340c:	f7ff fb87 	bl	8002b1e <updateUserMsg>
                HW_PRINT_DATA(0,USERMSG2,userTimeString);
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	461a      	mov	r2, r3
 8003416:	2101      	movs	r1, #1
 8003418:	2000      	movs	r0, #0
 800341a:	f000 fb51 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,INSERTMSG,menuUserMsg);
 800341e:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <initStateMachine+0x6fc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	2102      	movs	r1, #2
 8003426:	2000      	movs	r0, #0
 8003428:	f000 fb4a 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800342c:	4b69      	ldr	r3, [pc, #420]	; (80035d4 <initStateMachine+0x700>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	2103      	movs	r1, #3
 8003434:	2000      	movs	r0, #0
 8003436:	f000 fb43 	bl	8003ac0 <HW_PRINT_DATA>


                key = getKeyPressed();
 800343a:	f001 fe21 	bl	8005080 <getKeyPressed>
 800343e:	4603      	mov	r3, r0
 8003440:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                if(key == CONFIRMAR)
 8003444:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003448:	2b43      	cmp	r3, #67	; 0x43
 800344a:	f040 8225 	bne.w	8003898 <initStateMachine+0x9c4>
                {
                	resetKeyPressed();
 800344e:	f001 fe23 	bl	8005098 <resetKeyPressed>
                    indexTest = getResultTestNumber();
 8003452:	f7fe fd89 	bl	8001f68 <getResultTestNumber>
 8003456:	4603      	mov	r3, r0
 8003458:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
                    readyUserInterface(&displayUpdateStatus);
 800345c:	f107 030f 	add.w	r3, r7, #15
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fb77 	bl	8002b54 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(READING);
 8003466:	2007      	movs	r0, #7
 8003468:	f001 f846 	bl	80044f8 <getNextSub>
 800346c:	4603      	mov	r3, r0
 800346e:	461a      	mov	r2, r3
 8003470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003472:	70da      	strb	r2, [r3, #3]
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                }
            break;
 8003474:	e210      	b.n	8003898 <initStateMachine+0x9c4>

            case READING:
            	 updateUserMsg(0,USERMSG1,medindoUserMsg,&displayUpdateStatus);
 8003476:	4b5a      	ldr	r3, [pc, #360]	; (80035e0 <initStateMachine+0x70c>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	f107 030f 	add.w	r3, r7, #15
 800347e:	2100      	movs	r1, #0
 8003480:	2000      	movs	r0, #0
 8003482:	f7ff fb4c 	bl	8002b1e <updateUserMsg>
            	 resetTimer3Variable();
 8003486:	f001 fdef 	bl	8005068 <resetTimer3Variable>
				 HW_PRINT_DATA(0,OPTIONMSG,pararUserMsg);
 800348a:	4b56      	ldr	r3, [pc, #344]	; (80035e4 <initStateMachine+0x710>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	2103      	movs	r1, #3
 8003492:	2000      	movs	r0, #0
 8003494:	f000 fb14 	bl	8003ac0 <HW_PRINT_DATA>
            	 startTM2();
 8003498:	f000 fa1a 	bl	80038d0 <startTM2>
				 startTM3();
 800349c:	f000 fa24 	bl	80038e8 <startTM3>
				 readingStatus = readingSensor();
 80034a0:	f000 fe50 	bl	8004144 <readingSensor>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				 key = getKeyPressed();
 80034aa:	f001 fde9 	bl	8005080 <getKeyPressed>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

				 if(key == PARAR || readingStatus != IDDLE)
 80034b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80034b8:	2b50      	cmp	r3, #80	; 0x50
 80034ba:	d004      	beq.n	80034c6 <initStateMachine+0x5f2>
 80034bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 81e9 	beq.w	8003898 <initStateMachine+0x9c4>
				 {
					 resetKeyPressed();
 80034c6:	f001 fde7 	bl	8005098 <resetKeyPressed>
					                     readyUserInterface(&displayUpdateStatus);
 80034ca:	f107 030f 	add.w	r3, r7, #15
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fb40 	bl	8002b54 <readyUserInterface>
					 subMenuIniciar->menuState = getNextSub(STOP);
 80034d4:	2008      	movs	r0, #8
 80034d6:	f001 f80f 	bl	80044f8 <getNextSub>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034e0:	70da      	strb	r2, [r3, #3]
				 }
            break;
 80034e2:	e1d9      	b.n	8003898 <initStateMachine+0x9c4>

            case STOP:
            	key = getKeyPressed();
 80034e4:	f001 fdcc 	bl	8005080 <getKeyPressed>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                updateUserMsg(0,0,stopreadUserMsg,&displayUpdateStatus);
 80034ee:	4b3e      	ldr	r3, [pc, #248]	; (80035e8 <initStateMachine+0x714>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	f107 030f 	add.w	r3, r7, #15
 80034f6:	2100      	movs	r1, #0
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7ff fb10 	bl	8002b1e <updateUserMsg>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80034fe:	4b35      	ldr	r3, [pc, #212]	; (80035d4 <initStateMachine+0x700>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	2103      	movs	r1, #3
 8003506:	2000      	movs	r0, #0
 8003508:	f000 fada 	bl	8003ac0 <HW_PRINT_DATA>

                if(key == CONFIRMAR)
 800350c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003510:	2b43      	cmp	r3, #67	; 0x43
 8003512:	f040 81c1 	bne.w	8003898 <initStateMachine+0x9c4>
                {
                	resetKeyPressed();
 8003516:	f001 fdbf 	bl	8005098 <resetKeyPressed>
                    stopTM2();
 800351a:	f000 f9df 	bl	80038dc <stopTM2>
                    stopTM3();
 800351e:	f000 f9e9 	bl	80038f4 <stopTM3>
                    readyUserInterface(&displayUpdateStatus);
 8003522:	f107 030f 	add.w	r3, r7, #15
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fb14 	bl	8002b54 <readyUserInterface>
                    setResultTestNumber();
 800352c:	f7fe fd26 	bl	8001f7c <setResultTestNumber>
                    transmissionCOMM();
 8003530:	f000 fa18 	bl	8003964 <transmissionCOMM>
                    subMenuIniciar->menuState = getNextSub(DISP_RESULTS);
 8003534:	2009      	movs	r0, #9
 8003536:	f000 ffdf 	bl	80044f8 <getNextSub>
 800353a:	4603      	mov	r3, r0
 800353c:	461a      	mov	r2, r3
 800353e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003540:	70da      	strb	r2, [r3, #3]
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);

                }
                break;
 8003542:	e1a9      	b.n	8003898 <initStateMachine+0x9c4>

            case DISP_RESULTS:
                updateUserMsg(0,0,resultsUserMsg,&displayUpdateStatus);
 8003544:	4b29      	ldr	r3, [pc, #164]	; (80035ec <initStateMachine+0x718>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	f107 030f 	add.w	r3, r7, #15
 800354c:	2100      	movs	r1, #0
 800354e:	2000      	movs	r0, #0
 8003550:	f7ff fae5 	bl	8002b1e <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,selecionarUserMsg);
 8003554:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <initStateMachine+0x700>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	2102      	movs	r1, #2
 800355c:	2000      	movs	r0, #0
 800355e:	f000 faaf 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,pularUserMsg);
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <initStateMachine+0x71c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	2103      	movs	r1, #3
 800356a:	2000      	movs	r0, #0
 800356c:	f000 faa8 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 8003570:	f001 fd86 	bl	8005080 <getKeyPressed>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                if(key == PARAR)
 800357a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800357e:	2b50      	cmp	r3, #80	; 0x50
 8003580:	d10e      	bne.n	80035a0 <initStateMachine+0x6cc>
                {
                	resetKeyPressed();
 8003582:	f001 fd89 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003586:	f107 030f 	add.w	r3, r7, #15
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fae2 	bl	8002b54 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8003590:	200b      	movs	r0, #11
 8003592:	f000 ffb1 	bl	80044f8 <getNextSub>
 8003596:	4603      	mov	r3, r0
 8003598:	461a      	mov	r2, r3
 800359a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800359c:	70da      	strb	r2, [r3, #3]
 800359e:	e17b      	b.n	8003898 <initStateMachine+0x9c4>
                }
                else if(key == CONFIRMAR)
 80035a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80035a4:	2b43      	cmp	r3, #67	; 0x43
 80035a6:	f040 8177 	bne.w	8003898 <initStateMachine+0x9c4>
                {
                	resetKeyPressed();
 80035aa:	f001 fd75 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 80035ae:	f107 030f 	add.w	r3, r7, #15
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff face 	bl	8002b54 <readyUserInterface>
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                    subMenuIniciar->menuState = getNextSub(RESULTS);
 80035b8:	200a      	movs	r0, #10
 80035ba:	f000 ff9d 	bl	80044f8 <getNextSub>
 80035be:	4603      	mov	r3, r0
 80035c0:	461a      	mov	r2, r3
 80035c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035c4:	70da      	strb	r2, [r3, #3]
                }
            break;
 80035c6:	e167      	b.n	8003898 <initStateMachine+0x9c4>
 80035c8:	2000003c 	.word	0x2000003c
 80035cc:	200000c8 	.word	0x200000c8
 80035d0:	200000d0 	.word	0x200000d0
 80035d4:	200000d4 	.word	0x200000d4
 80035d8:	200000cc 	.word	0x200000cc
 80035dc:	20000040 	.word	0x20000040
 80035e0:	20000044 	.word	0x20000044
 80035e4:	200000d8 	.word	0x200000d8
 80035e8:	20000048 	.word	0x20000048
 80035ec:	20000058 	.word	0x20000058
 80035f0:	200000dc 	.word	0x200000dc

            case RESULTS:
            	selectedUserTest = getResultTestNumber();
 80035f4:	f7fe fcb8 	bl	8001f68 <getResultTestNumber>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            	ptr_result = getUserResultData(selectedUserTest);
 80035fe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fc9e 	bl	8001f44 <getUserResultData>
 8003608:	6638      	str	r0, [r7, #96]	; 0x60
				if(testSamples<(ptr_result->resultTestAcquiredSamples))
 800360a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003612:	429a      	cmp	r2, r3
 8003614:	d262      	bcs.n	80036dc <initStateMachine+0x808>
				{
					updateUserMsg(0,USERMSG1,amostraUserMsg,&displayUpdateStatus);
 8003616:	4ba5      	ldr	r3, [pc, #660]	; (80038ac <initStateMachine+0x9d8>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	f107 030f 	add.w	r3, r7, #15
 800361e:	2100      	movs	r1, #0
 8003620:	2000      	movs	r0, #0
 8003622:	f7ff fa7c 	bl	8002b1e <updateUserMsg>
					ptr_sampleString = param_1_toString(&ptr_result->sampleMeasurement[testSamples].sampleNum);
 8003626:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800362a:	4613      	mov	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003634:	4413      	add	r3, r2
 8003636:	3304      	adds	r3, #4
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe ffcb 	bl	80025d4 <param_1_toString>
 800363e:	4603      	mov	r3, r0
 8003640:	65fb      	str	r3, [r7, #92]	; 0x5c
					HW_PRINT_DATA(stringLenght(amostraUserMsg),USERMSG1 , ptr_sampleString);
 8003642:	4b9a      	ldr	r3, [pc, #616]	; (80038ac <initStateMachine+0x9d8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fe2e 	bl	80022a8 <stringLenght>
 800364c:	4603      	mov	r3, r0
 800364e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fa34 	bl	8003ac0 <HW_PRINT_DATA>

					HW_PRINT_DATA(0,USERMSG2,tempoVooUserMsg);
 8003658:	4b95      	ldr	r3, [pc, #596]	; (80038b0 <initStateMachine+0x9dc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	2101      	movs	r1, #1
 8003660:	2000      	movs	r0, #0
 8003662:	f000 fa2d 	bl	8003ac0 <HW_PRINT_DATA>
					ptr_vooTimeString = param_2_toString(&ptr_result->sampleMeasurement[testSamples].uiVooTime);
 8003666:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003674:	4413      	add	r3, r2
 8003676:	3308      	adds	r3, #8
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe ffbf 	bl	80025fc <param_2_toString>
 800367e:	4603      	mov	r3, r0
 8003680:	65bb      	str	r3, [r7, #88]	; 0x58
					HW_PRINT_DATA(stringLenght(tempoVooUserMsg),USERMSG2 ,ptr_vooTimeString);
 8003682:	4b8b      	ldr	r3, [pc, #556]	; (80038b0 <initStateMachine+0x9dc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe fe0e 	bl	80022a8 <stringLenght>
 800368c:	4603      	mov	r3, r0
 800368e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003690:	2101      	movs	r1, #1
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fa14 	bl	8003ac0 <HW_PRINT_DATA>


					HW_PRINT_DATA(0,INSERTMSG,tempoSoloUserMsg);
 8003698:	4b86      	ldr	r3, [pc, #536]	; (80038b4 <initStateMachine+0x9e0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	2102      	movs	r1, #2
 80036a0:	2000      	movs	r0, #0
 80036a2:	f000 fa0d 	bl	8003ac0 <HW_PRINT_DATA>
					ptr_alturaString = param_2_toString(&ptr_result->sampleMeasurement[testSamples].uiSoloTime);
 80036a6:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	3308      	adds	r3, #8
 80036b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036b6:	4413      	add	r3, r2
 80036b8:	3304      	adds	r3, #4
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe ff9e 	bl	80025fc <param_2_toString>
 80036c0:	4603      	mov	r3, r0
 80036c2:	657b      	str	r3, [r7, #84]	; 0x54
					HW_PRINT_DATA(stringLenght(tempoSoloUserMsg),INSERTMSG , ptr_alturaString);
 80036c4:	4b7b      	ldr	r3, [pc, #492]	; (80038b4 <initStateMachine+0x9e0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe fded 	bl	80022a8 <stringLenght>
 80036ce:	4603      	mov	r3, r0
 80036d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036d2:	2102      	movs	r1, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f9f3 	bl	8003ac0 <HW_PRINT_DATA>
 80036da:	e004      	b.n	80036e6 <initStateMachine+0x812>

//                  ptr_potString; = param_3_toString(&ptr_structExportResult->Measurement[testSamples].uiSoloTime);
//					HW_PRINT_DATA(0, INSERTMSG, ptr_potString);

				}
				else  HW_PRINT_DATA((16-strlen("VAZIO"))/2,INSERTMSG,"VAZIO");
 80036dc:	4a76      	ldr	r2, [pc, #472]	; (80038b8 <initStateMachine+0x9e4>)
 80036de:	2102      	movs	r1, #2
 80036e0:	2005      	movs	r0, #5
 80036e2:	f000 f9ed 	bl	8003ac0 <HW_PRINT_DATA>

				key = getKeyPressed();
 80036e6:	f001 fccb 	bl	8005080 <getKeyPressed>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

				if(key == AVANCAR)
 80036f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80036f4:	2b41      	cmp	r3, #65	; 0x41
 80036f6:	d11b      	bne.n	8003730 <initStateMachine+0x85c>
				{
					resetKeyPressed();
 80036f8:	f001 fcce 	bl	8005098 <resetKeyPressed>
					readyUserInterface(&displayUpdateStatus);
 80036fc:	f107 030f 	add.w	r3, r7, #15
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff fa27 	bl	8002b54 <readyUserInterface>
					testSamples++;
 8003706:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800370a:	3301      	adds	r3, #1
 800370c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					if(testSamples == ptr_result->resultTestAcquiredSamples) testSamples = 0;
 8003710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003712:	785b      	ldrb	r3, [r3, #1]
 8003714:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003718:	429a      	cmp	r2, r3
 800371a:	d102      	bne.n	8003722 <initStateMachine+0x84e>
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					subMenuIniciar->menuState = getNextSub(RESULTS);
 8003722:	200a      	movs	r0, #10
 8003724:	f000 fee8 	bl	80044f8 <getNextSub>
 8003728:	4603      	mov	r3, r0
 800372a:	461a      	mov	r2, r3
 800372c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800372e:	70da      	strb	r2, [r3, #3]
				}

                if(key == PARAR)
 8003730:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003734:	2b50      	cmp	r3, #80	; 0x50
 8003736:	f040 80af 	bne.w	8003898 <initStateMachine+0x9c4>
                {
                	resetKeyPressed();
 800373a:	f001 fcad 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 800373e:	f107 030f 	add.w	r3, r7, #15
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fa06 	bl	8002b54 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8003748:	200b      	movs	r0, #11
 800374a:	f000 fed5 	bl	80044f8 <getNextSub>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003754:	70da      	strb	r2, [r3, #3]
                }

            break;
 8003756:	e09f      	b.n	8003898 <initStateMachine+0x9c4>

            case SAVE_DATA:
                updateUserMsg(0,0,saveUserMsg,&displayUpdateStatus);
 8003758:	4b58      	ldr	r3, [pc, #352]	; (80038bc <initStateMachine+0x9e8>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	f107 030f 	add.w	r3, r7, #15
 8003760:	2100      	movs	r1, #0
 8003762:	2000      	movs	r0, #0
 8003764:	f7ff f9db 	bl	8002b1e <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003768:	4b55      	ldr	r3, [pc, #340]	; (80038c0 <initStateMachine+0x9ec>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	2102      	movs	r1, #2
 8003770:	2000      	movs	r0, #0
 8003772:	f000 f9a5 	bl	8003ac0 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003776:	4b53      	ldr	r3, [pc, #332]	; (80038c4 <initStateMachine+0x9f0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	2103      	movs	r1, #3
 800377e:	2000      	movs	r0, #0
 8003780:	f000 f99e 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 8003784:	f001 fc7c 	bl	8005080 <getKeyPressed>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                if(key == AVANCAR)
 800378e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003792:	2b41      	cmp	r3, #65	; 0x41
 8003794:	d10e      	bne.n	80037b4 <initStateMachine+0x8e0>
                {
                	resetKeyPressed();
 8003796:	f001 fc7f 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 800379a:	f107 030f 	add.w	r3, r7, #15
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff f9d8 	bl	8002b54 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(CANCEL_SAVE);
 80037a4:	200c      	movs	r0, #12
 80037a6:	f000 fea7 	bl	80044f8 <getNextSub>
 80037aa:	4603      	mov	r3, r0
 80037ac:	461a      	mov	r2, r3
 80037ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b0:	70da      	strb	r2, [r3, #3]
 80037b2:	e071      	b.n	8003898 <initStateMachine+0x9c4>
                }
                else if(key == CONFIRMAR)
 80037b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80037b8:	2b43      	cmp	r3, #67	; 0x43
 80037ba:	d16d      	bne.n	8003898 <initStateMachine+0x9c4>
                {
                	resetKeyPressed();
 80037bc:	f001 fc6c 	bl	8005098 <resetKeyPressed>
//                	save_SD_card(ptr_result,indexTest);
//                    save_data(indexTest);
                    readyUserInterface(&displayUpdateStatus);
 80037c0:	f107 030f 	add.w	r3, r7, #15
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff f9c5 	bl	8002b54 <readyUserInterface>
                    updateUserMsg(0,0,savedUserMsg,&displayUpdateStatus);
 80037ca:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <initStateMachine+0x9f4>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	f107 030f 	add.w	r3, r7, #15
 80037d2:	2100      	movs	r1, #0
 80037d4:	2000      	movs	r0, #0
 80037d6:	f7ff f9a2 	bl	8002b1e <updateUserMsg>
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 80037da:	2001      	movs	r0, #1
 80037dc:	f000 fe8c 	bl	80044f8 <getNextSub>
 80037e0:	4603      	mov	r3, r0
 80037e2:	461a      	mov	r2, r3
 80037e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e6:	70da      	strb	r2, [r3, #3]
                    testSamples = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  				                      readyUserInterface(&displayUpdateStatus);
 80037ee:	f107 030f 	add.w	r3, r7, #15
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f9ae 	bl	8002b54 <readyUserInterface>
                    key = MENU;
 80037f8:	234d      	movs	r3, #77	; 0x4d
 80037fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                }
            break;
 80037fe:	e04b      	b.n	8003898 <initStateMachine+0x9c4>

            case CANCEL_SAVE:
                updateUserMsg(0,0,cancelUserMsg,&displayUpdateStatus);
 8003800:	4b32      	ldr	r3, [pc, #200]	; (80038cc <initStateMachine+0x9f8>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	f107 030f 	add.w	r3, r7, #15
 8003808:	2100      	movs	r1, #0
 800380a:	2000      	movs	r0, #0
 800380c:	f7ff f987 	bl	8002b1e <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003810:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <initStateMachine+0x9ec>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	2102      	movs	r1, #2
 8003818:	2000      	movs	r0, #0
 800381a:	f000 f951 	bl	8003ac0 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800381e:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <initStateMachine+0x9f0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	2103      	movs	r1, #3
 8003826:	2000      	movs	r0, #0
 8003828:	f000 f94a 	bl	8003ac0 <HW_PRINT_DATA>
                key = getKeyPressed();
 800382c:	f001 fc28 	bl	8005080 <getKeyPressed>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                if(key == AVANCAR)
 8003836:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800383a:	2b41      	cmp	r3, #65	; 0x41
 800383c:	d10e      	bne.n	800385c <initStateMachine+0x988>
                {
                	resetKeyPressed();
 800383e:	f001 fc2b 	bl	8005098 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003842:	f107 030f 	add.w	r3, r7, #15
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff f984 	bl	8002b54 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 800384c:	200b      	movs	r0, #11
 800384e:	f000 fe53 	bl	80044f8 <getNextSub>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003858:	70da      	strb	r2, [r3, #3]
 800385a:	e01c      	b.n	8003896 <initStateMachine+0x9c2>
                }
                else if(key == CONFIRMAR)
 800385c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003860:	2b43      	cmp	r3, #67	; 0x43
 8003862:	d118      	bne.n	8003896 <initStateMachine+0x9c2>
                {
                	resetKeyPressed();
 8003864:	f001 fc18 	bl	8005098 <resetKeyPressed>
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                    testSamples = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
                    indexTest++;
 800386e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003872:	3301      	adds	r3, #1
 8003874:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
                    //
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8003878:	2001      	movs	r0, #1
 800387a:	f000 fe3d 	bl	80044f8 <getNextSub>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003884:	70da      	strb	r2, [r3, #3]
                    readyUserInterface(&displayUpdateStatus);
 8003886:	f107 030f 	add.w	r3, r7, #15
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f962 	bl	8002b54 <readyUserInterface>
                    key = MENU;
 8003890:	234d      	movs	r3, #77	; 0x4d
 8003892:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                }
            break;
 8003896:	bf00      	nop
    while(key != MENU)
 8003898:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800389c:	2b4d      	cmp	r3, #77	; 0x4d
 800389e:	f47f ab38 	bne.w	8002f12 <initStateMachine+0x3e>
        }
    }
}
 80038a2:	bf00      	nop
 80038a4:	4618      	mov	r0, r3
 80038a6:	3778      	adds	r7, #120	; 0x78
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	2000004c 	.word	0x2000004c
 80038b0:	20000050 	.word	0x20000050
 80038b4:	20000054 	.word	0x20000054
 80038b8:	0800be20 	.word	0x0800be20
 80038bc:	2000005c 	.word	0x2000005c
 80038c0:	200000c8 	.word	0x200000c8
 80038c4:	200000d4 	.word	0x200000d4
 80038c8:	20000060 	.word	0x20000060
 80038cc:	20000064 	.word	0x20000064

080038d0 <startTM2>:
    unsigned char timeout;
    struct samples Measurement[MEASUREMENT_SIZE];
};

void startTM2(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
        SET_HW_TIMER2();
 80038d4:	f000 fe30 	bl	8004538 <SET_HW_TIMER2>
}
 80038d8:	bf00      	nop
 80038da:	bd80      	pop	{r7, pc}

080038dc <stopTM2>:

void stopTM2(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
    RESET_HW_TIMER2();
 80038e0:	f000 fe4c 	bl	800457c <RESET_HW_TIMER2>
}
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <startTM3>:

void startTM3(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
        SET_HW_TIMER3();
 80038ec:	f000 fe64 	bl	80045b8 <SET_HW_TIMER3>
//        resetTimer3Variable();
}
 80038f0:	bf00      	nop
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <stopTM3>:

void stopTM3(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
    RESET_HW_TIMER3();
 80038f8:	f000 fe80 	bl	80045fc <RESET_HW_TIMER3>
}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}

08003900 <eraseDataDisplay>:
//	HW_INSERT_DATA(col, linha,userData);
//}


void eraseDataDisplay()
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
    HW_ERASE_DATA();
 8003904:	f000 f8f8 	bl	8003af8 <HW_ERASE_DATA>
}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}

0800390c <homeDataDisplay>:
//{
//	HW_UPDATE_DATA(col,linha);
//}

void homeDataDisplay(unsigned char* appName,unsigned char* companyName,unsigned char* appVersion)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
//    printf("%s\n",appName);
//    printf("%s\n",companyName);
//    printf("%s\n",appVersion);
    HW_HOME_DISP(appName,companyName,appVersion);
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f915 	bl	8003b4c <HW_HOME_DISP>

}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <startCOMM>:


}

void startCOMM()
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
//    printf("SET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8003930:	f001 fbbe 	bl	80050b0 <getUARTInstance>
 8003934:	4603      	mov	r3, r0
 8003936:	607b      	str	r3, [r7, #4]
	SET_HW_UART(uartInstance);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fe7b 	bl	8004634 <SET_HW_UART>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <stopCOMM>:

void stopCOMM()
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
//    printf("RESET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 800394c:	f001 fbb0 	bl	80050b0 <getUARTInstance>
 8003950:	4603      	mov	r3, r0
 8003952:	607b      	str	r3, [r7, #4]
	RESET_HW_UART(uartInstance);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fe81 	bl	800465c <RESET_HW_UART>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <transmissionCOMM>:

void transmissionCOMM()
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b094      	sub	sp, #80	; 0x50
 8003968:	af00      	add	r7, sp, #0
	//	unsigned char numTeste = 1;
	unsigned char numTeste = getResultTestNumber();
 800396a:	f7fe fafd 	bl	8001f68 <getResultTestNumber>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	unsigned char count = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	unsigned char aux = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	struct results* teste = getUserResultData(numTeste);
 8003980:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe fadd 	bl	8001f44 <getUserResultData>
 800398a:	4603      	mov	r3, r0
 800398c:	63fb      	str	r3, [r7, #60]	; 0x3c
//	teste->Measurement[4].sampleNum = 5;
//	teste->Measurement[4].uiVooTime = 5260;
//	teste->Measurement[4].uiSoloTime = 5010;
//

	uartMsg[0] = teste->resultTestNum;
 800398e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	713b      	strb	r3, [r7, #4]
	uartMsg[1] = teste->resultTestAcquiredSamples;
 8003994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003996:	785b      	ldrb	r3, [r3, #1]
 8003998:	717b      	strb	r3, [r7, #5]
	uartMsg[2] = teste->thereAreData;
 800399a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399c:	789b      	ldrb	r3, [r3, #2]
 800399e:	71bb      	strb	r3, [r7, #6]
	uartMsg[3] = teste->timeout;
 80039a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a2:	78db      	ldrb	r3, [r3, #3]
 80039a4:	71fb      	strb	r3, [r7, #7]

	for(unsigned char i=0;i<teste->resultTestAcquiredSamples;i++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80039ac:	e071      	b.n	8003a92 <transmissionCOMM+0x12e>
	{
		uartMsg[4+aux] = teste->Measurement[i].sampleNum;
 80039ae:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80039b2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80039b6:	1d19      	adds	r1, r3, #4
 80039b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4403      	add	r3, r0
 80039c4:	3304      	adds	r3, #4
 80039c6:	781a      	ldrb	r2, [r3, #0]
 80039c8:	f101 0350 	add.w	r3, r1, #80	; 0x50
 80039cc:	443b      	add	r3, r7
 80039ce:	f803 2c4c 	strb.w	r2, [r3, #-76]
		vooTimeUnion.all = teste->Measurement[i].uiVooTime;
 80039d2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80039d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039d8:	4613      	mov	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3308      	adds	r3, #8
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a34      	ldr	r2, [pc, #208]	; (8003ab8 <transmissionCOMM+0x154>)
 80039e8:	6013      	str	r3, [r2, #0]
		for(unsigned j=2;j>0;j--)
 80039ea:	2302      	movs	r3, #2
 80039ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80039ee:	e015      	b.n	8003a1c <transmissionCOMM+0xb8>
		{
			uartMsg[5+count+aux] = vooTimeUnion.pt[j-1];
 80039f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f2:	1e5a      	subs	r2, r3, #1
 80039f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80039f8:	1d59      	adds	r1, r3, #5
 80039fa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80039fe:	440b      	add	r3, r1
 8003a00:	492d      	ldr	r1, [pc, #180]	; (8003ab8 <transmissionCOMM+0x154>)
 8003a02:	5c8a      	ldrb	r2, [r1, r2]
 8003a04:	3350      	adds	r3, #80	; 0x50
 8003a06:	443b      	add	r3, r7
 8003a08:	f803 2c4c 	strb.w	r2, [r3, #-76]
			count++;
 8003a0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a10:	3301      	adds	r3, #1
 8003a12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		for(unsigned j=2;j>0;j--)
 8003a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e6      	bne.n	80039f0 <transmissionCOMM+0x8c>
		}
		count = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		soloTimeUnion.all = teste->Measurement[i].uiSoloTime;
 8003a28:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a2e:	4613      	mov	r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	330c      	adds	r3, #12
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <transmissionCOMM+0x158>)
 8003a3e:	6013      	str	r3, [r2, #0]
		for(unsigned j=2;j>0;j--)
 8003a40:	2302      	movs	r3, #2
 8003a42:	647b      	str	r3, [r7, #68]	; 0x44
 8003a44:	e015      	b.n	8003a72 <transmissionCOMM+0x10e>
		{
			uartMsg[7+count+aux] = soloTimeUnion.pt[j-1];
 8003a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a48:	1e5a      	subs	r2, r3, #1
 8003a4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a4e:	1dd9      	adds	r1, r3, #7
 8003a50:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003a54:	440b      	add	r3, r1
 8003a56:	4919      	ldr	r1, [pc, #100]	; (8003abc <transmissionCOMM+0x158>)
 8003a58:	5c8a      	ldrb	r2, [r1, r2]
 8003a5a:	3350      	adds	r3, #80	; 0x50
 8003a5c:	443b      	add	r3, r7
 8003a5e:	f803 2c4c 	strb.w	r2, [r3, #-76]
			count++;
 8003a62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a66:	3301      	adds	r3, #1
 8003a68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		for(unsigned j=2;j>0;j--)
 8003a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	647b      	str	r3, [r7, #68]	; 0x44
 8003a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e6      	bne.n	8003a46 <transmissionCOMM+0xe2>
		}
		count = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		aux += 5;
 8003a7e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003a82:	3305      	adds	r3, #5
 8003a84:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	for(unsigned char i=0;i<teste->resultTestAcquiredSamples;i++)
 8003a88:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8003a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a94:	785b      	ldrb	r3, [r3, #1]
 8003a96:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d387      	bcc.n	80039ae <transmissionCOMM+0x4a>
	}
	//Tamanho do pacote = 4+5xresultTestAcquiredSamples
	unsigned long int* uartInstance = getUARTInstance();
 8003a9e:	f001 fb07 	bl	80050b0 <getUARTInstance>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
	TRANSMISSION_HW_UART(uartInstance,uartMsg);
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003aac:	f000 fdea 	bl	8004684 <TRANSMISSION_HW_UART>
}
 8003ab0:	bf00      	nop
 8003ab2:	3750      	adds	r7, #80	; 0x50
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000484 	.word	0x20000484
 8003abc:	20000488 	.word	0x20000488

08003ac0 <HW_PRINT_DATA>:

static LiquidCrystal lcdDisplay;


unsigned char HW_PRINT_DATA(unsigned char col, unsigned char linha,unsigned char* userData)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	603a      	str	r2, [r7, #0]
 8003aca:	71fb      	strb	r3, [r7, #7]
 8003acc:	460b      	mov	r3, r1
 8003ace:	71bb      	strb	r3, [r7, #6]
    setCursor(&lcdDisplay, col, linha);
 8003ad0:	79ba      	ldrb	r2, [r7, #6]
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4807      	ldr	r0, [pc, #28]	; (8003af4 <HW_PRINT_DATA+0x34>)
 8003ad8:	f000 fb04 	bl	80040e4 <setCursor>
    HAL_Delay(10);
 8003adc:	200a      	movs	r0, #10
 8003ade:	f002 fa7b 	bl	8005fd8 <HAL_Delay>
    print(&lcdDisplay,userData);
 8003ae2:	6839      	ldr	r1, [r7, #0]
 8003ae4:	4803      	ldr	r0, [pc, #12]	; (8003af4 <HW_PRINT_DATA+0x34>)
 8003ae6:	f000 f95b 	bl	8003da0 <print>
}
 8003aea:	bf00      	nop
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	2000048c 	.word	0x2000048c

08003af8 <HW_ERASE_DATA>:

unsigned char HW_ERASE_DATA()
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	clear(&lcdDisplay);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <HW_ERASE_DATA+0x10>)
 8003afe:	f000 f970 	bl	8003de2 <clear>
}
 8003b02:	bf00      	nop
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	2000048c 	.word	0x2000048c

08003b0c <HW_UPDATE_DATA>:

unsigned char HW_UPDATE_DATA(unsigned char position, unsigned char linha)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	460a      	mov	r2, r1
 8003b16:	71fb      	strb	r3, [r7, #7]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71bb      	strb	r3, [r7, #6]
	setCursor(&lcdDisplay, position, linha); /***/
 8003b1c:	79ba      	ldrb	r2, [r7, #6]
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	4619      	mov	r1, r3
 8003b22:	4809      	ldr	r0, [pc, #36]	; (8003b48 <HW_UPDATE_DATA+0x3c>)
 8003b24:	f000 fade 	bl	80040e4 <setCursor>
	cursor(&lcdDisplay);
 8003b28:	4807      	ldr	r0, [pc, #28]	; (8003b48 <HW_UPDATE_DATA+0x3c>)
 8003b2a:	f000 f999 	bl	8003e60 <cursor>
	HAL_Delay(500);
 8003b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b32:	f002 fa51 	bl	8005fd8 <HAL_Delay>
	noCursor(&lcdDisplay);
 8003b36:	4804      	ldr	r0, [pc, #16]	; (8003b48 <HW_UPDATE_DATA+0x3c>)
 8003b38:	f000 f97a 	bl	8003e30 <noCursor>
}
 8003b3c:	bf00      	nop
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	2000048c 	.word	0x2000048c

08003b4c <HW_HOME_DISP>:

unsigned char HW_HOME_DISP(unsigned char* appName, unsigned char* companyName, unsigned char* appVersion)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
	begin(&lcdDisplay,16,4,LCD_5x10DOTS);
 8003b58:	2304      	movs	r3, #4
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	2110      	movs	r1, #16
 8003b5e:	4812      	ldr	r0, [pc, #72]	; (8003ba8 <HW_HOME_DISP+0x5c>)
 8003b60:	f000 f824 	bl	8003bac <begin>
	setCursor(&lcdDisplay, 0, 0);
 8003b64:	2200      	movs	r2, #0
 8003b66:	2100      	movs	r1, #0
 8003b68:	480f      	ldr	r0, [pc, #60]	; (8003ba8 <HW_HOME_DISP+0x5c>)
 8003b6a:	f000 fabb 	bl	80040e4 <setCursor>
	print(&lcdDisplay,appName);
 8003b6e:	68f9      	ldr	r1, [r7, #12]
 8003b70:	480d      	ldr	r0, [pc, #52]	; (8003ba8 <HW_HOME_DISP+0x5c>)
 8003b72:	f000 f915 	bl	8003da0 <print>
	setCursor(&lcdDisplay, 0, 1);
 8003b76:	2201      	movs	r2, #1
 8003b78:	2100      	movs	r1, #0
 8003b7a:	480b      	ldr	r0, [pc, #44]	; (8003ba8 <HW_HOME_DISP+0x5c>)
 8003b7c:	f000 fab2 	bl	80040e4 <setCursor>
	print(&lcdDisplay,companyName);
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	4809      	ldr	r0, [pc, #36]	; (8003ba8 <HW_HOME_DISP+0x5c>)
 8003b84:	f000 f90c 	bl	8003da0 <print>
	setCursor(&lcdDisplay, 0, 3);
 8003b88:	2203      	movs	r2, #3
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4806      	ldr	r0, [pc, #24]	; (8003ba8 <HW_HOME_DISP+0x5c>)
 8003b8e:	f000 faa9 	bl	80040e4 <setCursor>
	print(&lcdDisplay,appVersion);
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4804      	ldr	r0, [pc, #16]	; (8003ba8 <HW_HOME_DISP+0x5c>)
 8003b96:	f000 f903 	bl	8003da0 <print>
	return &(lcdDisplay);
 8003b9a:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HW_HOME_DISP+0x5c>)
 8003b9c:	b2db      	uxtb	r3, r3
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	2000048c 	.word	0x2000048c

08003bac <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4603      	mov	r3, r0
 8003bbc:	70fb      	strb	r3, [r7, #3]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70bb      	strb	r3, [r7, #2]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 8003bc6:	f107 0308 	add.w	r3, r7, #8
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f107 0308 	add.w	r3, r7, #8
 8003bd8:	cb03      	ldmia	r3!, {r0, r1}
 8003bda:	6010      	str	r0, [r2, #0]
 8003bdc:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8003bde:	2200      	movs	r2, #0
 8003be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003be4:	486c      	ldr	r0, [pc, #432]	; (8003d98 <begin+0x1ec>)
 8003be6:	f002 ff4b 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8003bea:	2200      	movs	r2, #0
 8003bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bf0:	4869      	ldr	r0, [pc, #420]	; (8003d98 <begin+0x1ec>)
 8003bf2:	f002 ff45 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bfc:	4866      	ldr	r0, [pc, #408]	; (8003d98 <begin+0x1ec>)
 8003bfe:	f002 ff3f 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8003c02:	2200      	movs	r2, #0
 8003c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c08:	4863      	ldr	r0, [pc, #396]	; (8003d98 <begin+0x1ec>)
 8003c0a:	f002 ff39 	bl	8006a80 <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2108      	movs	r1, #8
 8003c12:	4861      	ldr	r0, [pc, #388]	; (8003d98 <begin+0x1ec>)
 8003c14:	f002 ff34 	bl	8006a80 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c1e:	485f      	ldr	r0, [pc, #380]	; (8003d9c <begin+0x1f0>)
 8003c20:	f002 ff2e 	bl	8006a80 <HAL_GPIO_WritePin>

	#if defined(LCD_8BITMODE)
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,GPIO_PIN_RESET);
 8003c24:	2200      	movs	r2, #0
 8003c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c2a:	485c      	ldr	r0, [pc, #368]	; (8003d9c <begin+0x1f0>)
 8003c2c:	f002 ff28 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,GPIO_PIN_RESET);
 8003c30:	2200      	movs	r2, #0
 8003c32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c36:	4859      	ldr	r0, [pc, #356]	; (8003d9c <begin+0x1f0>)
 8003c38:	f002 ff22 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,GPIO_PIN_RESET);
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c42:	4856      	ldr	r0, [pc, #344]	; (8003d9c <begin+0x1f0>)
 8003c44:	f002 ff1c 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,GPIO_PIN_RESET);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c4e:	4853      	ldr	r0, [pc, #332]	; (8003d9c <begin+0x1f0>)
 8003c50:	f002 ff16 	bl	8006a80 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c5a:	4850      	ldr	r0, [pc, #320]	; (8003d9c <begin+0x1f0>)
 8003c5c:	f002 ff10 	bl	8006a80 <HAL_GPIO_WritePin>
	#endif

	if (lines > 1) {
 8003c60:	78bb      	ldrb	r3, [r7, #2]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d906      	bls.n	8003c74 <begin+0xc8>
		lcd->_displayfunction |= LCD_2LINE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	f043 0308 	orr.w	r3, r3, #8
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	78ba      	ldrb	r2, [r7, #2]
 8003c78:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	3340      	adds	r3, #64	; 0x40
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	4613      	mov	r3, r2
 8003c84:	2240      	movs	r2, #64	; 0x40
 8003c86:	2100      	movs	r1, #0
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fa0f 	bl	80040ac <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8003c8e:	787b      	ldrb	r3, [r7, #1]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d009      	beq.n	8003ca8 <begin+0xfc>
 8003c94:	78bb      	ldrb	r3, [r7, #2]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d106      	bne.n	8003ca8 <begin+0xfc>
		lcd->_displayfunction |= LCD_5x10DOTS;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 8003ca8:	2032      	movs	r0, #50	; 0x32
 8003caa:	f002 f995 	bl	8005fd8 <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2108      	movs	r1, #8
 8003cb2:	4839      	ldr	r0, [pc, #228]	; (8003d98 <begin+0x1ec>)
 8003cb4:	f002 fee4 	bl	8006a80 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cbe:	4837      	ldr	r0, [pc, #220]	; (8003d9c <begin+0x1f0>)
 8003cc0:	f002 fede 	bl	8006a80 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cca:	4834      	ldr	r0, [pc, #208]	; (8003d9c <begin+0x1f0>)
 8003ccc:	f002 fed8 	bl	8006a80 <HAL_GPIO_WritePin>
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d015      	beq.n	8003d04 <begin+0x158>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 8003cd8:	2003      	movs	r0, #3
 8003cda:	f000 f931 	bl	8003f40 <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 8003cde:	2005      	movs	r0, #5
 8003ce0:	f002 f97a 	bl	8005fd8 <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 8003ce4:	2003      	movs	r0, #3
 8003ce6:	f000 f92b 	bl	8003f40 <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 8003cea:	2005      	movs	r0, #5
 8003cec:	f002 f974 	bl	8005fd8 <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 8003cf0:	2003      	movs	r0, #3
 8003cf2:	f000 f925 	bl	8003f40 <write4bits>
		HAL_Delay(5);
 8003cf6:	2005      	movs	r0, #5
 8003cf8:	f002 f96e 	bl	8005fd8 <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 8003cfc:	2002      	movs	r0, #2
 8003cfe:	f000 f91f 	bl	8003f40 <write4bits>
 8003d02:	e023      	b.n	8003d4c <begin+0x1a0>

		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 23, pg 45 

		// Envia sequência de comando
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	f043 0320 	orr.w	r3, r3, #32
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f9bb 	bl	800408c <command>
		HAL_Delay(6);  // wait more than 4.1 ms
 8003d16:	2006      	movs	r0, #6
 8003d18:	f002 f95e 	bl	8005fd8 <HAL_Delay>

		// Segundo envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	f043 0320 	orr.w	r3, r3, #32
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f9af 	bl	800408c <command>
		HAL_Delay(1);
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f002 f952 	bl	8005fd8 <HAL_Delay>

		// Terceiro envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	f043 0320 	orr.w	r3, r3, #32
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f9a3 	bl	800408c <command>
		HAL_Delay(1);
 8003d46:	2001      	movs	r0, #1
 8003d48:	f002 f946 	bl	8005fd8 <HAL_Delay>
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	f043 0320 	orr.w	r3, r3, #32
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	4619      	mov	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f997 	bl	800408c <command>
    HAL_Delay(1);
 8003d5e:	2001      	movs	r0, #1
 8003d60:	f002 f93a 	bl	8005fd8 <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2204      	movs	r2, #4
 8003d68:	705a      	strb	r2, [r3, #1]
    display(lcd);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f848 	bl	8003e00 <display>

    // Limpa display
    clear(lcd);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f836 	bl	8003de2 <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	789b      	ldrb	r3, [r3, #2]
 8003d80:	f043 0304 	orr.w	r3, r3, #4
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f97f 	bl	800408c <command>
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40010c00 	.word	0x40010c00
 8003d9c:	40010800 	.word	0x40010800

08003da0 <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 8003daa:	6838      	ldr	r0, [r7, #0]
 8003dac:	f7fc f9ce 	bl	800014c <strlen>
 8003db0:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 8003db2:	2300      	movs	r3, #0
 8003db4:	73fb      	strb	r3, [r7, #15]
 8003db6:	e00b      	b.n	8003dd0 <print+0x30>
		write(lcd ,*(value+i));
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f863 	bl	8003e90 <write>
	for (uint8_t i = 0; i < Lengh; i++){
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d8ef      	bhi.n	8003db8 <print+0x18>
	}
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 8003dea:	2101      	movs	r1, #1
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f94d 	bl	800408c <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 8003df2:	2002      	movs	r0, #2
 8003df4:	f002 f8f0 	bl	8005fd8 <HAL_Delay>
}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	785b      	ldrb	r3, [r3, #1]
 8003e0c:	f043 0304 	orr.w	r3, r3, #4
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	785b      	ldrb	r3, [r3, #1]
 8003e1a:	f043 0308 	orr.w	r3, r3, #8
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f932 	bl	800408c <command>
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <noCursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void noCursor(LiquidCrystal *lcd){
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol &= ~LCD_CURSORON;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	f023 0302 	bic.w	r3, r3, #2
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	f043 0308 	orr.w	r3, r3, #8
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f91a 	bl	800408c <command>
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <cursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void cursor(LiquidCrystal *lcd){
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol |= LCD_CURSORON;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	f043 0302 	orr.w	r3, r3, #2
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	785b      	ldrb	r3, [r3, #1]
 8003e7a:	f043 0308 	orr.w	r3, r3, #8
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f902 	bl	800408c <command>
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f804 	bl	8003eb0 <send>
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	70fb      	strb	r3, [r7, #3]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 8003ec0:	78bb      	ldrb	r3, [r7, #2]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	2108      	movs	r1, #8
 8003ec6:	4811      	ldr	r0, [pc, #68]	; (8003f0c <send+0x5c>)
 8003ec8:	f002 fdda 	bl	8006a80 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ed2:	480f      	ldr	r0, [pc, #60]	; (8003f10 <send+0x60>)
 8003ed4:	f002 fdd4 	bl	8006a80 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <send+0x3e>
	    write8bits(value);
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f866 	bl	8003fb8 <write8bits>
	    write4bits(value);
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 8003eec:	e009      	b.n	8003f02 <send+0x52>
	    write4bits(value>>4);
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f823 	bl	8003f40 <write4bits>
	    write4bits(value);
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f81f 	bl	8003f40 <write4bits>
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40010c00 	.word	0x40010c00
 8003f10:	40010800 	.word	0x40010800

08003f14 <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f1e:	4807      	ldr	r0, [pc, #28]	; (8003f3c <pulseEnable+0x28>)
 8003f20:	f002 fdae 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003f24:	2001      	movs	r0, #1
 8003f26:	f002 f857 	bl	8005fd8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <pulseEnable+0x28>)
 8003f32:	f002 fda5 	bl	8006a80 <HAL_GPIO_WritePin>
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40010800 	.word	0x40010800

08003f40 <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f58:	4816      	ldr	r0, [pc, #88]	; (8003fb4 <write4bits+0x74>)
 8003f5a:	f002 fd91 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f70:	4810      	ldr	r0, [pc, #64]	; (8003fb4 <write4bits+0x74>)
 8003f72:	f002 fd85 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f88:	480a      	ldr	r0, [pc, #40]	; (8003fb4 <write4bits+0x74>)
 8003f8a:	f002 fd79 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	08db      	lsrs	r3, r3, #3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fa0:	4804      	ldr	r0, [pc, #16]	; (8003fb4 <write4bits+0x74>)
 8003fa2:	f002 fd6d 	bl	8006a80 <HAL_GPIO_WritePin>

	pulseEnable();
 8003fa6:	f7ff ffb5 	bl	8003f14 <pulseEnable>
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40010c00 	.word	0x40010c00

08003fb8 <write8bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write8bits(uint8_t value){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,(value >> 0) & 0x01);
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fd0:	482c      	ldr	r0, [pc, #176]	; (8004084 <write8bits+0xcc>)
 8003fd2:	f002 fd55 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,(value >> 1) & 0x01);
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	085b      	lsrs	r3, r3, #1
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fe8:	4826      	ldr	r0, [pc, #152]	; (8004084 <write8bits+0xcc>)
 8003fea:	f002 fd49 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,(value >> 2) & 0x01);
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004000:	4820      	ldr	r0, [pc, #128]	; (8004084 <write8bits+0xcc>)
 8004002:	f002 fd3d 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,(value >> 3) & 0x01);
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	08db      	lsrs	r3, r3, #3
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004018:	481a      	ldr	r0, [pc, #104]	; (8004084 <write8bits+0xcc>)
 800401a:	f002 fd31 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 4) & 0x01);
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004030:	4815      	ldr	r0, [pc, #84]	; (8004088 <write8bits+0xd0>)
 8004032:	f002 fd25 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 5) & 0x01);
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004048:	480f      	ldr	r0, [pc, #60]	; (8004088 <write8bits+0xd0>)
 800404a:	f002 fd19 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 6) & 0x01);
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	099b      	lsrs	r3, r3, #6
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004060:	4809      	ldr	r0, [pc, #36]	; (8004088 <write8bits+0xd0>)
 8004062:	f002 fd0d 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 7) & 0x01);
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	09db      	lsrs	r3, r3, #7
 800406a:	b2db      	uxtb	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004072:	4805      	ldr	r0, [pc, #20]	; (8004088 <write8bits+0xd0>)
 8004074:	f002 fd04 	bl	8006a80 <HAL_GPIO_WritePin>

	pulseEnable();
 8004078:	f7ff ff4c 	bl	8003f14 <pulseEnable>

}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40010800 	.word	0x40010800
 8004088:	40010c00 	.word	0x40010c00

0800408c <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	2200      	movs	r2, #0
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff ff06 	bl	8003eb0 <send>
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	71da      	strb	r2, [r3, #7]
}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	70fb      	strb	r3, [r7, #3]
 80040f0:	4613      	mov	r3, r2
 80040f2:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 80040f4:	2304      	movs	r3, #4
 80040f6:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 80040f8:	78bb      	ldrb	r3, [r7, #2]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d803      	bhi.n	8004108 <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	78db      	ldrb	r3, [r3, #3]
 800410c:	78ba      	ldrb	r2, [r7, #2]
 800410e:	429a      	cmp	r2, r3
 8004110:	d303      	bcc.n	800411a <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	78db      	ldrb	r3, [r3, #3]
 8004116:	3b01      	subs	r3, #1
 8004118:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 800411a:	78bb      	ldrb	r3, [r7, #2]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4413      	add	r3, r2
 8004120:	791a      	ldrb	r2, [r3, #4]
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	4413      	add	r3, r2
 8004126:	b2db      	uxtb	r3, r3
 8004128:	b25b      	sxtb	r3, r3
 800412a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800412e:	b25b      	sxtb	r3, r3
 8004130:	b2db      	uxtb	r3, r3
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff ffa9 	bl	800408c <command>
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <readingSensor>:
};

static struct results measuredData;

unsigned char readingSensor()
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b09a      	sub	sp, #104	; 0x68
 8004148:	af00      	add	r7, sp, #0
	struct dataInsert* configStruct = getUserConfigStruct();
 800414a:	f7fd fe8b 	bl	8001e64 <getUserConfigStruct>
 800414e:	64b8      	str	r0, [r7, #72]	; 0x48

	unsigned char userState = REPOUSO;
 8004150:	2332      	movs	r3, #50	; 0x32
 8004152:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	unsigned char sensorFlag;
	unsigned int referenceTime,currentTime,totalTime,spentTimeVoo,spentTimeSolo = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	65bb      	str	r3, [r7, #88]	; 0x58
	unsigned int contatoTime[5] = {0,0,0,0,0};
 800415a:	f107 0314 	add.w	r3, r7, #20
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	60da      	str	r2, [r3, #12]
 8004168:	611a      	str	r2, [r3, #16]
	unsigned int vooTime[5]= {0,0,0,0,0};
 800416a:	463b      	mov	r3, r7
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	611a      	str	r2, [r3, #16]
	unsigned char key = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	unsigned char samples = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	unsigned long int intervalSaltos = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	647b      	str	r3, [r7, #68]	; 0x44
	unsigned long int intervalSeries = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned char numSaltos = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	unsigned char numSeries = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54


	unsigned char indexTest = getResultTestNumber();
 8004198:	f7fd fee6 	bl	8001f68 <getResultTestNumber>
 800419c:	4603      	mov	r3, r0
 800419e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
//	unsigned long int userIntervalSeries = getUserIntervalSeries();
//	unsigned char userNumSeries = getUserNumSeries();
//	unsigned char userTapete = getUserSelectTapete();
//	unsigned long int userIntervalSaltos = getUserIntervalSaltos();
//	unsigned char userNumSaltos = getUserNumSaltos();
	unsigned int timeMin = getTimeAltMin();
 80041a2:	f7fd fe69 	bl	8001e78 <getTimeAltMin>
 80041a6:	4603      	mov	r3, r0
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned int timeMax = getTimeAltMax();
 80041aa:	f7fd fe6f 	bl	8001e8c <getTimeAltMax>
 80041ae:	4603      	mov	r3, r0
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
//	unsigned char userNumSaltos = 2;
//	unsigned int timeMin = 500;
//	unsigned int timeMax = 5000;

	//
	key = getKeyPressed();
 80041b2:	f000 ff65 	bl	8005080 <getKeyPressed>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

//	while(key != PARAR && totalTime != configStruct->userTime && numSaltos != configStruct->userNumSaltos) //WHILE COMPLETO
//	while(key != PARAR && numSaltos != configStruct->userNumSaltos) //USADO PARA DEBUGGER DESCONSIDERANDO O TIMEOUT
	while(key != PARAR && numSeries != configStruct->userNumSeries) //USADO PARA DEBUGGER DESCONSIDERANDO O TIMEOUT e NUM SALTOS
 80041bc:	bf00      	nop
 80041be:	e0e8      	b.n	8004392 <readingSensor+0x24e>

	{
		totalTime = getTimer3Variable();
 80041c0:	f000 ffa0 	bl	8005104 <getTimer3Variable>
 80041c4:	4603      	mov	r3, r0
 80041c6:	65fb      	str	r3, [r7, #92]	; 0x5c
		key = getKeyPressed();
 80041c8:	f000 ff5a 	bl	8005080 <getKeyPressed>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		switch(userState)
 80041d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80041d6:	3b32      	subs	r3, #50	; 0x32
 80041d8:	2b05      	cmp	r3, #5
 80041da:	f200 80da 	bhi.w	8004392 <readingSensor+0x24e>
 80041de:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <readingSensor+0xa0>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	080041fd 	.word	0x080041fd
 80041e8:	0800424f 	.word	0x0800424f
 80041ec:	08004285 	.word	0x08004285
 80041f0:	08004393 	.word	0x08004393
 80041f4:	08004393 	.word	0x08004393
 80041f8:	08004357 	.word	0x08004357
		{
			case REPOUSO:
				sensorFlag = getTimer2Variable();
 80041fc:	f000 ff76 	bl	80050ec <getTimer2Variable>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if(sensorFlag == 0 && configStruct->userSelectTapete == FALSE) //INICIO FORA DO TAPETE
 8004206:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10c      	bne.n	8004228 <readingSensor+0xe4>
 800420e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004210:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004214:	2b00      	cmp	r3, #0
 8004216:	d107      	bne.n	8004228 <readingSensor+0xe4>
				{
					userState = CONTATO;
 8004218:	2333      	movs	r3, #51	; 0x33
 800421a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					referenceTime = getTimer3Variable();
 800421e:	f000 ff71 	bl	8005104 <getTimer3Variable>
 8004222:	4603      	mov	r3, r0
 8004224:	663b      	str	r3, [r7, #96]	; 0x60
 8004226:	e011      	b.n	800424c <readingSensor+0x108>
				}
				else if(sensorFlag == 0 && configStruct->userSelectTapete == TRUE) // INICIO DENTRO DO TAPETE
 8004228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <readingSensor+0x102>
 8004230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004232:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004236:	2b01      	cmp	r3, #1
 8004238:	d105      	bne.n	8004246 <readingSensor+0x102>
				{
					userState = CONTATO;
 800423a:	2333      	movs	r3, #51	; 0x33
 800423c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					referenceTime = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	663b      	str	r3, [r7, #96]	; 0x60
 8004244:	e002      	b.n	800424c <readingSensor+0x108>
				}
				else userState = REPOUSO;
 8004246:	2332      	movs	r3, #50	; 0x32
 8004248:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			break;
 800424c:	e0a1      	b.n	8004392 <readingSensor+0x24e>

			case CONTATO:
				sensorFlag = getTimer2Variable();
 800424e:	f000 ff4d 	bl	80050ec <getTimer2Variable>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if(sensorFlag == 1)
 8004258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10d      	bne.n	800427c <readingSensor+0x138>
				{
					userState = VOO;
 8004260:	2334      	movs	r3, #52	; 0x34
 8004262:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					currentTime = getTimer3Variable();
 8004266:	f000 ff4d 	bl	8005104 <getTimer3Variable>
 800426a:	4603      	mov	r3, r0
 800426c:	633b      	str	r3, [r7, #48]	; 0x30
					spentTimeSolo = currentTime-referenceTime;
 800426e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004270:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	65bb      	str	r3, [r7, #88]	; 0x58
					referenceTime = currentTime;
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	663b      	str	r3, [r7, #96]	; 0x60
 800427a:	e08a      	b.n	8004392 <readingSensor+0x24e>
				}
				else
				{
					userState = CONTATO;
 800427c:	2333      	movs	r3, #51	; 0x33
 800427e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}

			break;
 8004282:	e086      	b.n	8004392 <readingSensor+0x24e>

			case VOO:
				sensorFlag = getTimer2Variable();
 8004284:	f000 ff32 	bl	80050ec <getTimer2Variable>
 8004288:	4603      	mov	r3, r0
 800428a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if(sensorFlag == 0)
 800428e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004292:	2b00      	cmp	r3, #0
 8004294:	d15b      	bne.n	800434e <readingSensor+0x20a>
				{
					userState = CONTATO;
 8004296:	2333      	movs	r3, #51	; 0x33
 8004298:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					currentTime = getTimer3Variable();
 800429c:	f000 ff32 	bl	8005104 <getTimer3Variable>
 80042a0:	4603      	mov	r3, r0
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
					spentTimeVoo= currentTime - referenceTime;
 80042a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
					if(spentTimeVoo<timeMin)
 80042ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d202      	bcs.n	80042ba <readingSensor+0x176>
					{
						//leitura invalida
						referenceTime = currentTime;
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	663b      	str	r3, [r7, #96]	; 0x60
 80042b8:	e06b      	b.n	8004392 <readingSensor+0x24e>

					}
					else if(spentTimeVoo>timeMax)
 80042ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042be:	429a      	cmp	r2, r3
 80042c0:	d902      	bls.n	80042c8 <readingSensor+0x184>
					{

						referenceTime = currentTime;
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	663b      	str	r3, [r7, #96]	; 0x60
 80042c6:	e064      	b.n	8004392 <readingSensor+0x24e>
						//leitura invalida
					}
					else if((spentTimeVoo+spentTimeSolo)>configStruct->userIntervalSaltos)
 80042c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042cc:	441a      	add	r2, r3
 80042ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d906      	bls.n	80042e4 <readingSensor+0x1a0>
						 * derando que o tempo do ciclo (voo+contato) é um salto
						 * completo e portanto, userIntervalSaltos que é um param
						 * de configuração que limita o valor máximo que o ciclo
						 * deve ter.
						 */
						intervalSaltos = spentTimeVoo+spentTimeSolo;
 80042d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042da:	4413      	add	r3, r2
 80042dc:	647b      	str	r3, [r7, #68]	; 0x44
						referenceTime = currentTime;
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	663b      	str	r3, [r7, #96]	; 0x60
 80042e2:	e056      	b.n	8004392 <readingSensor+0x24e>


					}
					else
					{	//CONDIÇÃO NA QUAL O SALTO É VALIDO
						vooTime[samples] = spentTimeVoo;
 80042e4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	3368      	adds	r3, #104	; 0x68
 80042ec:	443b      	add	r3, r7
 80042ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f0:	f843 2c68 	str.w	r2, [r3, #-104]
						contatoTime[samples] = spentTimeSolo;
 80042f4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	3368      	adds	r3, #104	; 0x68
 80042fc:	443b      	add	r3, r7
 80042fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004300:	f843 2c54 	str.w	r2, [r3, #-84]
						referenceTime = currentTime;
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	663b      	str	r3, [r7, #96]	; 0x60
						numSaltos++;
 8004308:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800430c:	3301      	adds	r3, #1
 800430e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
						samples++;
 8004312:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004316:	3301      	adds	r3, #1
 8004318:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
						if(numSaltos == configStruct->userNumSaltos)
 800431c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431e:	7d1b      	ldrb	r3, [r3, #20]
 8004320:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004324:	429a      	cmp	r2, r3
 8004326:	d10e      	bne.n	8004346 <readingSensor+0x202>
						{
							numSeries++;
 8004328:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800432c:	3301      	adds	r3, #1
 800432e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
							userState = INTERVALO;
 8004332:	2337      	movs	r3, #55	; 0x37
 8004334:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8004338:	2200      	movs	r2, #0
 800433a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800433e:	486c      	ldr	r0, [pc, #432]	; (80044f0 <readingSensor+0x3ac>)
 8004340:	f002 fb9e 	bl	8006a80 <HAL_GPIO_WritePin>
 8004344:	e025      	b.n	8004392 <readingSensor+0x24e>
						}
						else userState = CONTATO;
 8004346:	2333      	movs	r3, #51	; 0x33
 8004348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800434c:	e021      	b.n	8004392 <readingSensor+0x24e>
					}
				}
				else
				{
					userState = VOO;
 800434e:	2334      	movs	r3, #52	; 0x34
 8004350:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			break;
 8004354:	e01d      	b.n	8004392 <readingSensor+0x24e>

			case INTERVALO:
				currentTime = getTimer3Variable();
 8004356:	f000 fed5 	bl	8005104 <getTimer3Variable>
 800435a:	4603      	mov	r3, r0
 800435c:	633b      	str	r3, [r7, #48]	; 0x30
				intervalSeries = currentTime - referenceTime;
 800435e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	643b      	str	r3, [r7, #64]	; 0x40
				if(intervalSeries == configStruct->userIntervalSeries)
 8004366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800436c:	429a      	cmp	r2, r3
 800436e:	d10c      	bne.n	800438a <readingSensor+0x246>
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8004370:	2201      	movs	r2, #1
 8004372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004376:	485e      	ldr	r0, [pc, #376]	; (80044f0 <readingSensor+0x3ac>)
 8004378:	f002 fb82 	bl	8006a80 <HAL_GPIO_WritePin>
					userState = CONTATO;
 800437c:	2333      	movs	r3, #51	; 0x33
 800437e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					numSaltos = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8004388:	e002      	b.n	8004390 <readingSensor+0x24c>
				}
				else userState = INTERVALO;
 800438a:	2337      	movs	r3, #55	; 0x37
 800438c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8004390:	bf00      	nop
	while(key != PARAR && numSeries != configStruct->userNumSeries) //USADO PARA DEBUGGER DESCONSIDERANDO O TIMEOUT e NUM SALTOS
 8004392:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004396:	2b50      	cmp	r3, #80	; 0x50
 8004398:	d006      	beq.n	80043a8 <readingSensor+0x264>
 800439a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800439c:	7f9b      	ldrb	r3, [r3, #30]
 800439e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80043a2:	429a      	cmp	r2, r3
 80043a4:	f47f af0c 	bne.w	80041c0 <readingSensor+0x7c>
		}
	}

	if(totalTime == configStruct->userTime)
 80043a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d109      	bne.n	80043c6 <readingSensor+0x282>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80043b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043b6:	484e      	ldr	r0, [pc, #312]	; (80044f0 <readingSensor+0x3ac>)
 80043b8:	f002 fb7a 	bl	8006ab0 <HAL_GPIO_TogglePin>
		measuredData.timeout = TRUE;
 80043bc:	4b4d      	ldr	r3, [pc, #308]	; (80044f4 <readingSensor+0x3b0>)
 80043be:	2201      	movs	r2, #1
 80043c0:	70da      	strb	r2, [r3, #3]
		return TIMEOUT;
 80043c2:	2335      	movs	r3, #53	; 0x35
 80043c4:	e090      	b.n	80044e8 <readingSensor+0x3a4>
	}

	else if(numSaltos == configStruct->userNumSaltos)
 80043c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c8:	7d1b      	ldrb	r3, [r3, #20]
 80043ca:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d145      	bne.n	800445e <readingSensor+0x31a>
	{
		measuredData.timeout = FALSE;
 80043d2:	4b48      	ldr	r3, [pc, #288]	; (80044f4 <readingSensor+0x3b0>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	70da      	strb	r2, [r3, #3]
		measuredData.resultTestAcquiredSamples = samples;
 80043d8:	4a46      	ldr	r2, [pc, #280]	; (80044f4 <readingSensor+0x3b0>)
 80043da:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80043de:	7053      	strb	r3, [r2, #1]
		for(unsigned i=0;i<samples;i++)
 80043e0:	2300      	movs	r3, #0
 80043e2:	653b      	str	r3, [r7, #80]	; 0x50
 80043e4:	e034      	b.n	8004450 <readingSensor+0x30c>
		{
			measuredData.Measurement[i].sampleNum = i+1;
 80043e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	b2d8      	uxtb	r0, r3
 80043ee:	4941      	ldr	r1, [pc, #260]	; (80044f4 <readingSensor+0x3b0>)
 80043f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043f2:	4613      	mov	r3, r2
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	3304      	adds	r3, #4
 80043fe:	4602      	mov	r2, r0
 8004400:	701a      	strb	r2, [r3, #0]
			measuredData.Measurement[i].uiVooTime = vooTime[i];
 8004402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	3368      	adds	r3, #104	; 0x68
 8004408:	443b      	add	r3, r7
 800440a:	f853 1c68 	ldr.w	r1, [r3, #-104]
 800440e:	4839      	ldr	r0, [pc, #228]	; (80044f4 <readingSensor+0x3b0>)
 8004410:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004412:	4613      	mov	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4403      	add	r3, r0
 800441c:	3308      	adds	r3, #8
 800441e:	6019      	str	r1, [r3, #0]
			measuredData.Measurement[i].uiSoloTime = contatoTime[i];
 8004420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	3368      	adds	r3, #104	; 0x68
 8004426:	443b      	add	r3, r7
 8004428:	f853 1c54 	ldr.w	r1, [r3, #-84]
 800442c:	4831      	ldr	r0, [pc, #196]	; (80044f4 <readingSensor+0x3b0>)
 800442e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004430:	4613      	mov	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4403      	add	r3, r0
 800443a:	330c      	adds	r3, #12
 800443c:	6019      	str	r1, [r3, #0]
			setUserResultData(&measuredData,indexTest);
 800443e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004442:	4619      	mov	r1, r3
 8004444:	482b      	ldr	r0, [pc, #172]	; (80044f4 <readingSensor+0x3b0>)
 8004446:	f7fd fda9 	bl	8001f9c <setUserResultData>
		for(unsigned i=0;i<samples;i++)
 800444a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444c:	3301      	adds	r3, #1
 800444e:	653b      	str	r3, [r7, #80]	; 0x50
 8004450:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004454:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004456:	429a      	cmp	r2, r3
 8004458:	d3c5      	bcc.n	80043e6 <readingSensor+0x2a2>
		}
		return MAX_SALTOS;
 800445a:	2336      	movs	r3, #54	; 0x36
 800445c:	e044      	b.n	80044e8 <readingSensor+0x3a4>
	}

	else
	{
		measuredData.timeout = FALSE;
 800445e:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <readingSensor+0x3b0>)
 8004460:	2200      	movs	r2, #0
 8004462:	70da      	strb	r2, [r3, #3]
		measuredData.resultTestAcquiredSamples = samples;
 8004464:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <readingSensor+0x3b0>)
 8004466:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800446a:	7053      	strb	r3, [r2, #1]
		for(unsigned i=0;i<samples;i++)
 800446c:	2300      	movs	r3, #0
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004470:	e034      	b.n	80044dc <readingSensor+0x398>
		{
			measuredData.Measurement[i].sampleNum = i+1;
 8004472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004474:	b2db      	uxtb	r3, r3
 8004476:	3301      	adds	r3, #1
 8004478:	b2d8      	uxtb	r0, r3
 800447a:	491e      	ldr	r1, [pc, #120]	; (80044f4 <readingSensor+0x3b0>)
 800447c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800447e:	4613      	mov	r3, r2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	3304      	adds	r3, #4
 800448a:	4602      	mov	r2, r0
 800448c:	701a      	strb	r2, [r3, #0]
			measuredData.Measurement[i].uiVooTime = vooTime[i];
 800448e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	3368      	adds	r3, #104	; 0x68
 8004494:	443b      	add	r3, r7
 8004496:	f853 1c68 	ldr.w	r1, [r3, #-104]
 800449a:	4816      	ldr	r0, [pc, #88]	; (80044f4 <readingSensor+0x3b0>)
 800449c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800449e:	4613      	mov	r3, r2
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4403      	add	r3, r0
 80044a8:	3308      	adds	r3, #8
 80044aa:	6019      	str	r1, [r3, #0]
			measuredData.Measurement[i].uiSoloTime = contatoTime[i];
 80044ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	3368      	adds	r3, #104	; 0x68
 80044b2:	443b      	add	r3, r7
 80044b4:	f853 1c54 	ldr.w	r1, [r3, #-84]
 80044b8:	480e      	ldr	r0, [pc, #56]	; (80044f4 <readingSensor+0x3b0>)
 80044ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044bc:	4613      	mov	r3, r2
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	4413      	add	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4403      	add	r3, r0
 80044c6:	330c      	adds	r3, #12
 80044c8:	6019      	str	r1, [r3, #0]
			setUserResultData(&measuredData,indexTest);
 80044ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80044ce:	4619      	mov	r1, r3
 80044d0:	4808      	ldr	r0, [pc, #32]	; (80044f4 <readingSensor+0x3b0>)
 80044d2:	f7fd fd63 	bl	8001f9c <setUserResultData>
		for(unsigned i=0;i<samples;i++)
 80044d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d8:	3301      	adds	r3, #1
 80044da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044dc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80044e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d3c5      	bcc.n	8004472 <readingSensor+0x32e>
		}
		return PARAR;
 80044e6:	2350      	movs	r3, #80	; 0x50
	}
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3768      	adds	r7, #104	; 0x68
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40011000 	.word	0x40011000
 80044f4:	20000494 	.word	0x20000494

080044f8 <getNextSub>:

struct Menu menuSub ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextSub(unsigned char nextState)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]
    menuSub.menuNext = nextState;
 8004502:	4a05      	ldr	r2, [pc, #20]	; (8004518 <getNextSub+0x20>)
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	7013      	strb	r3, [r2, #0]
    return menuSub.menuNext;
 8004508:	4b03      	ldr	r3, [pc, #12]	; (8004518 <getNextSub+0x20>)
 800450a:	781b      	ldrb	r3, [r3, #0]
}
 800450c:	4618      	mov	r0, r3
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	200004d4 	.word	0x200004d4

0800451c <setInsertData>:
//    menuSub.menuSelect = state;
//    return menuSub.menuSelect;
//}

unsigned char setInsertData(struct dataInsert* dataToInsert)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
    struct dataInsert* userDataInput = dataToInsert;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60fb      	str	r3, [r7, #12]
    setUserInputConfigData(userDataInput);
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7fd fcb9 	bl	8001ea0 <setUserInputConfigData>
}
 800452e:	bf00      	nop
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <SET_HW_TIMER2>:

static unsigned char encoderStatus;
static unsigned char timerStatus;

unsigned char SET_HW_TIMER2(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
	encoderStatus = 0;
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <SET_HW_TIMER2+0x40>)
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]
//	TIM_HandleTypeDef* htim2 =  getTimer2Instance();
	unsigned char* htim2 =  getTimer2Instance();
 8004544:	f000 fdbe 	bl	80050c4 <getTimer2Instance>
 8004548:	4603      	mov	r3, r0
 800454a:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Start_IT(htim2, TIM_CHANNEL_ALL);
 800454c:	213c      	movs	r1, #60	; 0x3c
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f003 fc74 	bl	8007e3c <HAL_TIM_Encoder_Start_IT>
 8004554:	4603      	mov	r3, r0
 8004556:	461a      	mov	r2, r3
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <SET_HW_TIMER2+0x40>)
 800455a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800455c:	2064      	movs	r0, #100	; 0x64
 800455e:	f001 fd3b 	bl	8005fd8 <HAL_Delay>
	return !encoderStatus;
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <SET_HW_TIMER2+0x40>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	bf0c      	ite	eq
 800456a:	2301      	moveq	r3, #1
 800456c:	2300      	movne	r3, #0
 800456e:	b2db      	uxtb	r3, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000500 	.word	0x20000500

0800457c <RESET_HW_TIMER2>:

unsigned char RESET_HW_TIMER2(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
    encoderStatus = 1;
 8004582:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <RESET_HW_TIMER2+0x38>)
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
//    TIM_HandleTypeDef* htim2 =  getTimer2Instance();
    unsigned char* htim2 =  getTimer2Instance();
 8004588:	f000 fd9c 	bl	80050c4 <getTimer2Instance>
 800458c:	4603      	mov	r3, r0
 800458e:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Stop_IT(htim2, TIM_CHANNEL_ALL);
 8004590:	213c      	movs	r1, #60	; 0x3c
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f003 fd00 	bl	8007f98 <HAL_TIM_Encoder_Stop_IT>
 8004598:	4603      	mov	r3, r0
 800459a:	461a      	mov	r2, r3
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <RESET_HW_TIMER2+0x38>)
 800459e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 80045a0:	2064      	movs	r0, #100	; 0x64
 80045a2:	f001 fd19 	bl	8005fd8 <HAL_Delay>
	return encoderStatus;
 80045a6:	4b03      	ldr	r3, [pc, #12]	; (80045b4 <RESET_HW_TIMER2+0x38>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000500 	.word	0x20000500

080045b8 <SET_HW_TIMER3>:

unsigned char SET_HW_TIMER3(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
    timerStatus = 0;
 80045be:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <SET_HW_TIMER3+0x40>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 80045c4:	f000 fd88 	bl	80050d8 <getTimer3Instance>
 80045c8:	4603      	mov	r3, r0
 80045ca:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Start_IT(htim3);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f003 fb13 	bl	8007bf8 <HAL_TIM_Base_Start_IT>
 80045d2:	4603      	mov	r3, r0
 80045d4:	461a      	mov	r2, r3
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <SET_HW_TIMER3+0x40>)
 80045d8:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 80045da:	2064      	movs	r0, #100	; 0x64
 80045dc:	f001 fcfc 	bl	8005fd8 <HAL_Delay>
    return !timerStatus;
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <SET_HW_TIMER3+0x40>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000501 	.word	0x20000501

080045fc <RESET_HW_TIMER3>:

unsigned char RESET_HW_TIMER3(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
    timerStatus = 1;
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <RESET_HW_TIMER3+0x34>)
 8004604:	2201      	movs	r2, #1
 8004606:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8004608:	f000 fd66 	bl	80050d8 <getTimer3Instance>
 800460c:	4603      	mov	r3, r0
 800460e:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Stop_IT(htim3);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f003 fb43 	bl	8007c9c <HAL_TIM_Base_Stop_IT>
 8004616:	4603      	mov	r3, r0
 8004618:	461a      	mov	r2, r3
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <RESET_HW_TIMER3+0x34>)
 800461c:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 800461e:	2064      	movs	r0, #100	; 0x64
 8004620:	f001 fcda 	bl	8005fd8 <HAL_Delay>
    return timerStatus;
 8004624:	4b02      	ldr	r3, [pc, #8]	; (8004630 <RESET_HW_TIMER3+0x34>)
 8004626:	781b      	ldrb	r3, [r3, #0]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20000501 	.word	0x20000501

08004634 <SET_HW_UART>:
#include "UARTHW.h"
#include "main.h"


unsigned char SET_HW_UART(unsigned char* addr)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	60fb      	str	r3, [r7, #12]
    __HAL_UART_ENABLE(instance);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800464e:	60da      	str	r2, [r3, #12]
}
 8004650:	bf00      	nop
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <RESET_HW_UART>:

unsigned char RESET_HW_UART(unsigned char* addr)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60fb      	str	r3, [r7, #12]
    __HAL_UART_DISABLE(instance);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004676:	60da      	str	r2, [r3, #12]
}
 8004678:	bf00      	nop
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <TRANSMISSION_HW_UART>:

unsigned char TRANSMISSION_HW_UART(unsigned long int* addr, unsigned char* TX)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b092      	sub	sp, #72	; 0x48
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
	unsigned char buffer[50];
	for(unsigned char i=0;i<50;i++) buffer[i] = TX[i];
 800468e:	2300      	movs	r3, #0
 8004690:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004694:	e00f      	b.n	80046b6 <TRANSMISSION_HW_UART+0x32>
 8004696:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	441a      	add	r2, r3
 800469e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046a2:	7812      	ldrb	r2, [r2, #0]
 80046a4:	3348      	adds	r3, #72	; 0x48
 80046a6:	443b      	add	r3, r7
 80046a8:	f803 2c3c 	strb.w	r2, [r3, #-60]
 80046ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046b0:	3301      	adds	r3, #1
 80046b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80046b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046ba:	2b31      	cmp	r3, #49	; 0x31
 80046bc:	d9eb      	bls.n	8004696 <TRANSMISSION_HW_UART+0x12>
	UART_HandleTypeDef* instance = addr;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_UART_Transmit(instance, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80046c2:	f107 010c 	add.w	r1, r7, #12
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	2232      	movs	r2, #50	; 0x32
 80046cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80046ce:	f004 f8d8 	bl	8008882 <HAL_UART_Transmit>

}
 80046d2:	bf00      	nop
 80046d4:	4618      	mov	r0, r3
 80046d6:	3748      	adds	r7, #72	; 0x48
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80046e0:	2200      	movs	r2, #0
 80046e2:	2110      	movs	r1, #16
 80046e4:	4803      	ldr	r0, [pc, #12]	; (80046f4 <SELECT+0x18>)
 80046e6:	f002 f9cb 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80046ea:	2001      	movs	r0, #1
 80046ec:	f001 fc74 	bl	8005fd8 <HAL_Delay>
}
 80046f0:	bf00      	nop
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40010800 	.word	0x40010800

080046f8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80046fc:	2201      	movs	r2, #1
 80046fe:	2110      	movs	r1, #16
 8004700:	4803      	ldr	r0, [pc, #12]	; (8004710 <DESELECT+0x18>)
 8004702:	f002 f9bd 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004706:	2001      	movs	r0, #1
 8004708:	f001 fc66 	bl	8005fd8 <HAL_Delay>
}
 800470c:	bf00      	nop
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40010800 	.word	0x40010800

08004714 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800471e:	bf00      	nop
 8004720:	4b08      	ldr	r3, [pc, #32]	; (8004744 <SPI_TxByte+0x30>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d1f8      	bne.n	8004720 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800472e:	1df9      	adds	r1, r7, #7
 8004730:	2364      	movs	r3, #100	; 0x64
 8004732:	2201      	movs	r2, #1
 8004734:	4803      	ldr	r0, [pc, #12]	; (8004744 <SPI_TxByte+0x30>)
 8004736:	f002 fe8b 	bl	8007450 <HAL_SPI_Transmit>
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000504 	.word	0x20000504

08004748 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004754:	bf00      	nop
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <SPI_TxBuffer+0x30>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b02      	cmp	r3, #2
 8004762:	d1f8      	bne.n	8004756 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8004764:	887a      	ldrh	r2, [r7, #2]
 8004766:	2364      	movs	r3, #100	; 0x64
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4803      	ldr	r0, [pc, #12]	; (8004778 <SPI_TxBuffer+0x30>)
 800476c:	f002 fe70 	bl	8007450 <HAL_SPI_Transmit>
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000504 	.word	0x20000504

0800477c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8004782:	23ff      	movs	r3, #255	; 0xff
 8004784:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004786:	bf00      	nop
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <SPI_RxByte+0x34>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d1f8      	bne.n	8004788 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8004796:	1dba      	adds	r2, r7, #6
 8004798:	1df9      	adds	r1, r7, #7
 800479a:	2364      	movs	r3, #100	; 0x64
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	2301      	movs	r3, #1
 80047a0:	4803      	ldr	r0, [pc, #12]	; (80047b0 <SPI_RxByte+0x34>)
 80047a2:	f002 ff91 	bl	80076c8 <HAL_SPI_TransmitReceive>

	return data;
 80047a6:	79bb      	ldrb	r3, [r7, #6]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000504 	.word	0x20000504

080047b4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80047bc:	f7ff ffde 	bl	800477c <SPI_RxByte>
 80047c0:	4603      	mov	r3, r0
 80047c2:	461a      	mov	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	701a      	strb	r2, [r3, #0]
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <SD_ReadyWait+0x30>)
 80047d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80047dc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80047de:	f7ff ffcd 	bl	800477c <SPI_RxByte>
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	2bff      	cmp	r3, #255	; 0xff
 80047ea:	d003      	beq.n	80047f4 <SD_ReadyWait+0x24>
 80047ec:	4b04      	ldr	r3, [pc, #16]	; (8004800 <SD_ReadyWait+0x30>)
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f4      	bne.n	80047de <SD_ReadyWait+0xe>

	return res;
 80047f4:	79fb      	ldrb	r3, [r7, #7]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2000069e 	.word	0x2000069e

08004804 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800480a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800480e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8004810:	f7ff ff72 	bl	80046f8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8004814:	2300      	movs	r3, #0
 8004816:	60bb      	str	r3, [r7, #8]
 8004818:	e005      	b.n	8004826 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800481a:	20ff      	movs	r0, #255	; 0xff
 800481c:	f7ff ff7a 	bl	8004714 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	3301      	adds	r3, #1
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b09      	cmp	r3, #9
 800482a:	ddf6      	ble.n	800481a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800482c:	f7ff ff56 	bl	80046dc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8004830:	2340      	movs	r3, #64	; 0x40
 8004832:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004844:	2395      	movs	r3, #149	; 0x95
 8004846:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8004848:	463b      	mov	r3, r7
 800484a:	2106      	movs	r1, #6
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff ff7b 	bl	8004748 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8004852:	e002      	b.n	800485a <SD_PowerOn+0x56>
	{
		cnt--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3b01      	subs	r3, #1
 8004858:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800485a:	f7ff ff8f 	bl	800477c <SPI_RxByte>
 800485e:	4603      	mov	r3, r0
 8004860:	2b01      	cmp	r3, #1
 8004862:	d002      	beq.n	800486a <SD_PowerOn+0x66>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f4      	bne.n	8004854 <SD_PowerOn+0x50>
	}

	DESELECT();
 800486a:	f7ff ff45 	bl	80046f8 <DESELECT>
	SPI_TxByte(0XFF);
 800486e:	20ff      	movs	r0, #255	; 0xff
 8004870:	f7ff ff50 	bl	8004714 <SPI_TxByte>

	PowerFlag = 1;
 8004874:	4b03      	ldr	r3, [pc, #12]	; (8004884 <SD_PowerOn+0x80>)
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000503 	.word	0x20000503

08004888 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800488c:	4b03      	ldr	r3, [pc, #12]	; (800489c <SD_PowerOff+0x14>)
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
}
 8004892:	bf00      	nop
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20000503 	.word	0x20000503

080048a0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80048a4:	4b02      	ldr	r3, [pc, #8]	; (80048b0 <SD_CheckPower+0x10>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	20000503 	.word	0x20000503

080048b4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80048be:	4b13      	ldr	r3, [pc, #76]	; (800490c <SD_RxDataBlock+0x58>)
 80048c0:	22c8      	movs	r2, #200	; 0xc8
 80048c2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80048c4:	f7ff ff5a 	bl	800477c <SPI_RxByte>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2bff      	cmp	r3, #255	; 0xff
 80048d0:	d103      	bne.n	80048da <SD_RxDataBlock+0x26>
 80048d2:	4b0e      	ldr	r3, [pc, #56]	; (800490c <SD_RxDataBlock+0x58>)
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f4      	bne.n	80048c4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	2bfe      	cmp	r3, #254	; 0xfe
 80048de:	d001      	beq.n	80048e4 <SD_RxDataBlock+0x30>
 80048e0:	2300      	movs	r3, #0
 80048e2:	e00f      	b.n	8004904 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff ff62 	bl	80047b4 <SPI_RxBytePtr>
	} while(len--);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	1e5a      	subs	r2, r3, #1
 80048f4:	603a      	str	r2, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f4      	bne.n	80048e4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80048fa:	f7ff ff3f 	bl	800477c <SPI_RxByte>
	SPI_RxByte();
 80048fe:	f7ff ff3d 	bl	800477c <SPI_RxByte>

	return TRUE;
 8004902:	2301      	movs	r3, #1
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	2000069d 	.word	0x2000069d

08004910 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004920:	f7ff ff56 	bl	80047d0 <SD_ReadyWait>
 8004924:	4603      	mov	r3, r0
 8004926:	2bff      	cmp	r3, #255	; 0xff
 8004928:	d001      	beq.n	800492e <SD_TxDataBlock+0x1e>
 800492a:	2300      	movs	r3, #0
 800492c:	e02f      	b.n	800498e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff feef 	bl	8004714 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	2bfd      	cmp	r3, #253	; 0xfd
 800493a:	d020      	beq.n	800497e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800493c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff ff01 	bl	8004748 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8004946:	f7ff ff19 	bl	800477c <SPI_RxByte>
		SPI_RxByte();
 800494a:	f7ff ff17 	bl	800477c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800494e:	e00b      	b.n	8004968 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004950:	f7ff ff14 	bl	800477c <SPI_RxByte>
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	2b05      	cmp	r3, #5
 8004960:	d006      	beq.n	8004970 <SD_TxDataBlock+0x60>
			i++;
 8004962:	7bbb      	ldrb	r3, [r7, #14]
 8004964:	3301      	adds	r3, #1
 8004966:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8004968:	7bbb      	ldrb	r3, [r7, #14]
 800496a:	2b40      	cmp	r3, #64	; 0x40
 800496c:	d9f0      	bls.n	8004950 <SD_TxDataBlock+0x40>
 800496e:	e000      	b.n	8004972 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004970:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8004972:	bf00      	nop
 8004974:	f7ff ff02 	bl	800477c <SPI_RxByte>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0fa      	beq.n	8004974 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	2b05      	cmp	r3, #5
 8004986:	d101      	bne.n	800498c <SD_TxDataBlock+0x7c>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <SD_TxDataBlock+0x7e>

	return FALSE;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	4603      	mov	r3, r0
 800499e:	6039      	str	r1, [r7, #0]
 80049a0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80049a2:	f7ff ff15 	bl	80047d0 <SD_ReadyWait>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2bff      	cmp	r3, #255	; 0xff
 80049aa:	d001      	beq.n	80049b0 <SD_SendCmd+0x1a>
 80049ac:	23ff      	movs	r3, #255	; 0xff
 80049ae:	e042      	b.n	8004a36 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff feae 	bl	8004714 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	0e1b      	lsrs	r3, r3, #24
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fea8 	bl	8004714 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	0c1b      	lsrs	r3, r3, #16
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fea2 	bl	8004714 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fe9c 	bl	8004714 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fe97 	bl	8004714 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d102      	bne.n	80049f2 <SD_SendCmd+0x5c>
 80049ec:	2395      	movs	r3, #149	; 0x95
 80049ee:	73fb      	strb	r3, [r7, #15]
 80049f0:	e007      	b.n	8004a02 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	2b48      	cmp	r3, #72	; 0x48
 80049f6:	d102      	bne.n	80049fe <SD_SendCmd+0x68>
 80049f8:	2387      	movs	r3, #135	; 0x87
 80049fa:	73fb      	strb	r3, [r7, #15]
 80049fc:	e001      	b.n	8004a02 <SD_SendCmd+0x6c>
	else crc = 1;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff fe85 	bl	8004714 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	2b4c      	cmp	r3, #76	; 0x4c
 8004a0e:	d101      	bne.n	8004a14 <SD_SendCmd+0x7e>
 8004a10:	f7ff feb4 	bl	800477c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004a14:	230a      	movs	r3, #10
 8004a16:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8004a18:	f7ff feb0 	bl	800477c <SPI_RxByte>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004a20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	da05      	bge.n	8004a34 <SD_SendCmd+0x9e>
 8004a28:	7bbb      	ldrb	r3, [r7, #14]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	73bb      	strb	r3, [r7, #14]
 8004a2e:	7bbb      	ldrb	r3, [r7, #14]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f1      	bne.n	8004a18 <SD_SendCmd+0x82>

	return res;
 8004a34:	7b7b      	ldrb	r3, [r7, #13]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <SD_disk_initialize+0x14>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0d1      	b.n	8004bf8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004a54:	4b6a      	ldr	r3, [pc, #424]	; (8004c00 <SD_disk_initialize+0x1c0>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <SD_disk_initialize+0x2a>
 8004a62:	4b67      	ldr	r3, [pc, #412]	; (8004c00 <SD_disk_initialize+0x1c0>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	e0c6      	b.n	8004bf8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8004a6a:	f7ff fecb 	bl	8004804 <SD_PowerOn>

	/* slave select */
	SELECT();
 8004a6e:	f7ff fe35 	bl	80046dc <SELECT>

	/* check disk type */
	type = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8004a76:	2100      	movs	r1, #0
 8004a78:	2040      	movs	r0, #64	; 0x40
 8004a7a:	f7ff ff8c 	bl	8004996 <SD_SendCmd>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	f040 80a1 	bne.w	8004bc8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8004a86:	4b5f      	ldr	r3, [pc, #380]	; (8004c04 <SD_disk_initialize+0x1c4>)
 8004a88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a8c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004a8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a92:	2048      	movs	r0, #72	; 0x48
 8004a94:	f7ff ff7f 	bl	8004996 <SD_SendCmd>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d155      	bne.n	8004b4a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	e00c      	b.n	8004abe <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004aa4:	7bfc      	ldrb	r4, [r7, #15]
 8004aa6:	f7ff fe69 	bl	800477c <SPI_RxByte>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	461a      	mov	r2, r3
 8004aae:	f104 0310 	add.w	r3, r4, #16
 8004ab2:	443b      	add	r3, r7
 8004ab4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	3301      	adds	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d9ef      	bls.n	8004aa4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004ac4:	7abb      	ldrb	r3, [r7, #10]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d17e      	bne.n	8004bc8 <SD_disk_initialize+0x188>
 8004aca:	7afb      	ldrb	r3, [r7, #11]
 8004acc:	2baa      	cmp	r3, #170	; 0xaa
 8004ace:	d17b      	bne.n	8004bc8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	2077      	movs	r0, #119	; 0x77
 8004ad4:	f7ff ff5f 	bl	8004996 <SD_SendCmd>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d807      	bhi.n	8004aee <SD_disk_initialize+0xae>
 8004ade:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004ae2:	2069      	movs	r0, #105	; 0x69
 8004ae4:	f7ff ff57 	bl	8004996 <SD_SendCmd>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8004aee:	4b45      	ldr	r3, [pc, #276]	; (8004c04 <SD_disk_initialize+0x1c4>)
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1ec      	bne.n	8004ad0 <SD_disk_initialize+0x90>
 8004af6:	e000      	b.n	8004afa <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004af8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004afa:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <SD_disk_initialize+0x1c4>)
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d062      	beq.n	8004bc8 <SD_disk_initialize+0x188>
 8004b02:	2100      	movs	r1, #0
 8004b04:	207a      	movs	r0, #122	; 0x7a
 8004b06:	f7ff ff46 	bl	8004996 <SD_SendCmd>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d15b      	bne.n	8004bc8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8004b10:	2300      	movs	r3, #0
 8004b12:	73fb      	strb	r3, [r7, #15]
 8004b14:	e00c      	b.n	8004b30 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8004b16:	7bfc      	ldrb	r4, [r7, #15]
 8004b18:	f7ff fe30 	bl	800477c <SPI_RxByte>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f104 0310 	add.w	r3, r4, #16
 8004b24:	443b      	add	r3, r7
 8004b26:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d9ef      	bls.n	8004b16 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004b36:	7a3b      	ldrb	r3, [r7, #8]
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <SD_disk_initialize+0x104>
 8004b40:	230c      	movs	r3, #12
 8004b42:	e000      	b.n	8004b46 <SD_disk_initialize+0x106>
 8004b44:	2304      	movs	r3, #4
 8004b46:	73bb      	strb	r3, [r7, #14]
 8004b48:	e03e      	b.n	8004bc8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	2077      	movs	r0, #119	; 0x77
 8004b4e:	f7ff ff22 	bl	8004996 <SD_SendCmd>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d808      	bhi.n	8004b6a <SD_disk_initialize+0x12a>
 8004b58:	2100      	movs	r1, #0
 8004b5a:	2069      	movs	r0, #105	; 0x69
 8004b5c:	f7ff ff1b 	bl	8004996 <SD_SendCmd>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d801      	bhi.n	8004b6a <SD_disk_initialize+0x12a>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e000      	b.n	8004b6c <SD_disk_initialize+0x12c>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004b6e:	7bbb      	ldrb	r3, [r7, #14]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d10e      	bne.n	8004b92 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8004b74:	2100      	movs	r1, #0
 8004b76:	2077      	movs	r0, #119	; 0x77
 8004b78:	f7ff ff0d 	bl	8004996 <SD_SendCmd>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d80e      	bhi.n	8004ba0 <SD_disk_initialize+0x160>
 8004b82:	2100      	movs	r1, #0
 8004b84:	2069      	movs	r0, #105	; 0x69
 8004b86:	f7ff ff06 	bl	8004996 <SD_SendCmd>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <SD_disk_initialize+0x160>
 8004b90:	e00c      	b.n	8004bac <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004b92:	2100      	movs	r1, #0
 8004b94:	2041      	movs	r0, #65	; 0x41
 8004b96:	f7ff fefe 	bl	8004996 <SD_SendCmd>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8004ba0:	4b18      	ldr	r3, [pc, #96]	; (8004c04 <SD_disk_initialize+0x1c4>)
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e2      	bne.n	8004b6e <SD_disk_initialize+0x12e>
 8004ba8:	e000      	b.n	8004bac <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004baa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004bac:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <SD_disk_initialize+0x1c4>)
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <SD_disk_initialize+0x184>
 8004bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bb8:	2050      	movs	r0, #80	; 0x50
 8004bba:	f7ff feec 	bl	8004996 <SD_SendCmd>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <SD_disk_initialize+0x188>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8004bc8:	4a0f      	ldr	r2, [pc, #60]	; (8004c08 <SD_disk_initialize+0x1c8>)
 8004bca:	7bbb      	ldrb	r3, [r7, #14]
 8004bcc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8004bce:	f7ff fd93 	bl	80046f8 <DESELECT>
	SPI_RxByte();
 8004bd2:	f7ff fdd3 	bl	800477c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004bd6:	7bbb      	ldrb	r3, [r7, #14]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8004bdc:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <SD_disk_initialize+0x1c0>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <SD_disk_initialize+0x1c0>)
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	e001      	b.n	8004bf2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8004bee:	f7ff fe4b 	bl	8004888 <SD_PowerOff>
	}

	return Stat;
 8004bf2:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <SD_disk_initialize+0x1c0>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	b2db      	uxtb	r3, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd90      	pop	{r4, r7, pc}
 8004c00:	200000e0 	.word	0x200000e0
 8004c04:	2000069d 	.word	0x2000069d
 8004c08:	20000502 	.word	0x20000502

08004c0c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <SD_disk_status+0x14>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e002      	b.n	8004c26 <SD_disk_status+0x1a>
	return Stat;
 8004c20:	4b03      	ldr	r3, [pc, #12]	; (8004c30 <SD_disk_status+0x24>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	b2db      	uxtb	r3, r3
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr
 8004c30:	200000e0 	.word	0x200000e0

08004c34 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	603b      	str	r3, [r7, #0]
 8004c40:	4603      	mov	r3, r0
 8004c42:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d102      	bne.n	8004c50 <SD_disk_read+0x1c>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <SD_disk_read+0x20>
 8004c50:	2304      	movs	r3, #4
 8004c52:	e051      	b.n	8004cf8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004c54:	4b2a      	ldr	r3, [pc, #168]	; (8004d00 <SD_disk_read+0xcc>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <SD_disk_read+0x32>
 8004c62:	2303      	movs	r3, #3
 8004c64:	e048      	b.n	8004cf8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004c66:	4b27      	ldr	r3, [pc, #156]	; (8004d04 <SD_disk_read+0xd0>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d102      	bne.n	8004c78 <SD_disk_read+0x44>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	025b      	lsls	r3, r3, #9
 8004c76:	607b      	str	r3, [r7, #4]

	SELECT();
 8004c78:	f7ff fd30 	bl	80046dc <SELECT>

	if (count == 1)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d111      	bne.n	8004ca6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	2051      	movs	r0, #81	; 0x51
 8004c86:	f7ff fe86 	bl	8004996 <SD_SendCmd>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d129      	bne.n	8004ce4 <SD_disk_read+0xb0>
 8004c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c94:	68b8      	ldr	r0, [r7, #8]
 8004c96:	f7ff fe0d 	bl	80048b4 <SD_RxDataBlock>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d021      	beq.n	8004ce4 <SD_disk_read+0xb0>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	e01e      	b.n	8004ce4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	2052      	movs	r0, #82	; 0x52
 8004caa:	f7ff fe74 	bl	8004996 <SD_SendCmd>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d117      	bne.n	8004ce4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cb8:	68b8      	ldr	r0, [r7, #8]
 8004cba:	f7ff fdfb 	bl	80048b4 <SD_RxDataBlock>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <SD_disk_read+0xa6>
				buff += 512;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004cca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1ed      	bne.n	8004cb4 <SD_disk_read+0x80>
 8004cd8:	e000      	b.n	8004cdc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8004cda:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004cdc:	2100      	movs	r1, #0
 8004cde:	204c      	movs	r0, #76	; 0x4c
 8004ce0:	f7ff fe59 	bl	8004996 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004ce4:	f7ff fd08 	bl	80046f8 <DESELECT>
	SPI_RxByte();
 8004ce8:	f7ff fd48 	bl	800477c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bf14      	ite	ne
 8004cf2:	2301      	movne	r3, #1
 8004cf4:	2300      	moveq	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	200000e0 	.word	0x200000e0
 8004d04:	20000502 	.word	0x20000502

08004d08 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	4603      	mov	r3, r0
 8004d16:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d102      	bne.n	8004d24 <SD_disk_write+0x1c>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <SD_disk_write+0x20>
 8004d24:	2304      	movs	r3, #4
 8004d26:	e06b      	b.n	8004e00 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004d28:	4b37      	ldr	r3, [pc, #220]	; (8004e08 <SD_disk_write+0x100>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <SD_disk_write+0x32>
 8004d36:	2303      	movs	r3, #3
 8004d38:	e062      	b.n	8004e00 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004d3a:	4b33      	ldr	r3, [pc, #204]	; (8004e08 <SD_disk_write+0x100>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <SD_disk_write+0x44>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e059      	b.n	8004e00 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004d4c:	4b2f      	ldr	r3, [pc, #188]	; (8004e0c <SD_disk_write+0x104>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d102      	bne.n	8004d5e <SD_disk_write+0x56>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	025b      	lsls	r3, r3, #9
 8004d5c:	607b      	str	r3, [r7, #4]

	SELECT();
 8004d5e:	f7ff fcbd 	bl	80046dc <SELECT>

	if (count == 1)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d110      	bne.n	8004d8a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	2058      	movs	r0, #88	; 0x58
 8004d6c:	f7ff fe13 	bl	8004996 <SD_SendCmd>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d13a      	bne.n	8004dec <SD_disk_write+0xe4>
 8004d76:	21fe      	movs	r1, #254	; 0xfe
 8004d78:	68b8      	ldr	r0, [r7, #8]
 8004d7a:	f7ff fdc9 	bl	8004910 <SD_TxDataBlock>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d033      	beq.n	8004dec <SD_disk_write+0xe4>
			count = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	e030      	b.n	8004dec <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8004d8a:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <SD_disk_write+0x104>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8004d96:	2100      	movs	r1, #0
 8004d98:	2077      	movs	r0, #119	; 0x77
 8004d9a:	f7ff fdfc 	bl	8004996 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8004d9e:	6839      	ldr	r1, [r7, #0]
 8004da0:	2057      	movs	r0, #87	; 0x57
 8004da2:	f7ff fdf8 	bl	8004996 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	2059      	movs	r0, #89	; 0x59
 8004daa:	f7ff fdf4 	bl	8004996 <SD_SendCmd>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d11b      	bne.n	8004dec <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004db4:	21fc      	movs	r1, #252	; 0xfc
 8004db6:	68b8      	ldr	r0, [r7, #8]
 8004db8:	f7ff fdaa 	bl	8004910 <SD_TxDataBlock>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <SD_disk_write+0xd0>
				buff += 512;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004dc8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1ee      	bne.n	8004db4 <SD_disk_write+0xac>
 8004dd6:	e000      	b.n	8004dda <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004dd8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8004dda:	21fd      	movs	r1, #253	; 0xfd
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f7ff fd97 	bl	8004910 <SD_TxDataBlock>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <SD_disk_write+0xe4>
			{
				count = 1;
 8004de8:	2301      	movs	r3, #1
 8004dea:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004dec:	f7ff fc84 	bl	80046f8 <DESELECT>
	SPI_RxByte();
 8004df0:	f7ff fcc4 	bl	800477c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bf14      	ite	ne
 8004dfa:	2301      	movne	r3, #1
 8004dfc:	2300      	moveq	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	200000e0 	.word	0x200000e0
 8004e0c:	20000502 	.word	0x20000502

08004e10 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b08b      	sub	sp, #44	; 0x2c
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	603a      	str	r2, [r7, #0]
 8004e1a:	71fb      	strb	r3, [r7, #7]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <SD_disk_ioctl+0x1e>
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	e115      	b.n	800505a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8004e34:	79bb      	ldrb	r3, [r7, #6]
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d124      	bne.n	8004e84 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d012      	beq.n	8004e68 <SD_disk_ioctl+0x58>
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	dc1a      	bgt.n	8004e7c <SD_disk_ioctl+0x6c>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <SD_disk_ioctl+0x40>
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d006      	beq.n	8004e5c <SD_disk_ioctl+0x4c>
 8004e4e:	e015      	b.n	8004e7c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004e50:	f7ff fd1a 	bl	8004888 <SD_PowerOff>
			res = RES_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004e5a:	e0fc      	b.n	8005056 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8004e5c:	f7ff fcd2 	bl	8004804 <SD_PowerOn>
			res = RES_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004e66:	e0f6      	b.n	8005056 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	1c5c      	adds	r4, r3, #1
 8004e6c:	f7ff fd18 	bl	80048a0 <SD_CheckPower>
 8004e70:	4603      	mov	r3, r0
 8004e72:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004e7a:	e0ec      	b.n	8005056 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e82:	e0e8      	b.n	8005056 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004e84:	4b77      	ldr	r3, [pc, #476]	; (8005064 <SD_disk_ioctl+0x254>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <SD_disk_ioctl+0x86>
 8004e92:	2303      	movs	r3, #3
 8004e94:	e0e1      	b.n	800505a <SD_disk_ioctl+0x24a>

		SELECT();
 8004e96:	f7ff fc21 	bl	80046dc <SELECT>

		switch (ctrl)
 8004e9a:	79bb      	ldrb	r3, [r7, #6]
 8004e9c:	2b0d      	cmp	r3, #13
 8004e9e:	f200 80cb 	bhi.w	8005038 <SD_disk_ioctl+0x228>
 8004ea2:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <SD_disk_ioctl+0x98>)
 8004ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea8:	08004fa3 	.word	0x08004fa3
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004f93 	.word	0x08004f93
 8004eb4:	08005039 	.word	0x08005039
 8004eb8:	08005039 	.word	0x08005039
 8004ebc:	08005039 	.word	0x08005039
 8004ec0:	08005039 	.word	0x08005039
 8004ec4:	08005039 	.word	0x08005039
 8004ec8:	08005039 	.word	0x08005039
 8004ecc:	08005039 	.word	0x08005039
 8004ed0:	08005039 	.word	0x08005039
 8004ed4:	08004fb5 	.word	0x08004fb5
 8004ed8:	08004fd9 	.word	0x08004fd9
 8004edc:	08004ffd 	.word	0x08004ffd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	2049      	movs	r0, #73	; 0x49
 8004ee4:	f7ff fd57 	bl	8004996 <SD_SendCmd>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f040 80a8 	bne.w	8005040 <SD_disk_ioctl+0x230>
 8004ef0:	f107 030c 	add.w	r3, r7, #12
 8004ef4:	2110      	movs	r1, #16
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff fcdc 	bl	80048b4 <SD_RxDataBlock>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 809e 	beq.w	8005040 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8004f04:	7b3b      	ldrb	r3, [r7, #12]
 8004f06:	099b      	lsrs	r3, r3, #6
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d10e      	bne.n	8004f2c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004f0e:	7d7b      	ldrb	r3, [r7, #21]
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	7d3b      	ldrb	r3, [r7, #20]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3301      	adds	r3, #1
 8004f20:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004f22:	8bfb      	ldrh	r3, [r7, #30]
 8004f24:	029a      	lsls	r2, r3, #10
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e02e      	b.n	8004f8a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004f2c:	7c7b      	ldrb	r3, [r7, #17]
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	7dbb      	ldrb	r3, [r7, #22]
 8004f36:	09db      	lsrs	r3, r3, #7
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	7d7b      	ldrb	r3, [r7, #21]
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 0306 	and.w	r3, r3, #6
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	3302      	adds	r3, #2
 8004f50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004f54:	7d3b      	ldrb	r3, [r7, #20]
 8004f56:	099b      	lsrs	r3, r3, #6
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	7cbb      	ldrb	r3, [r7, #18]
 8004f6a:	029b      	lsls	r3, r3, #10
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	4413      	add	r3, r2
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3301      	adds	r3, #1
 8004f7a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004f7c:	8bfa      	ldrh	r2, [r7, #30]
 8004f7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f82:	3b09      	subs	r3, #9
 8004f84:	409a      	lsls	r2, r3
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8004f90:	e056      	b.n	8005040 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f98:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004fa0:	e055      	b.n	800504e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004fa2:	f7ff fc15 	bl	80047d0 <SD_ReadyWait>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2bff      	cmp	r3, #255	; 0xff
 8004faa:	d14b      	bne.n	8005044 <SD_disk_ioctl+0x234>
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004fb2:	e047      	b.n	8005044 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	2049      	movs	r0, #73	; 0x49
 8004fb8:	f7ff fced 	bl	8004996 <SD_SendCmd>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d142      	bne.n	8005048 <SD_disk_ioctl+0x238>
 8004fc2:	2110      	movs	r1, #16
 8004fc4:	6a38      	ldr	r0, [r7, #32]
 8004fc6:	f7ff fc75 	bl	80048b4 <SD_RxDataBlock>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d03b      	beq.n	8005048 <SD_disk_ioctl+0x238>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004fd6:	e037      	b.n	8005048 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004fd8:	2100      	movs	r1, #0
 8004fda:	204a      	movs	r0, #74	; 0x4a
 8004fdc:	f7ff fcdb 	bl	8004996 <SD_SendCmd>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d132      	bne.n	800504c <SD_disk_ioctl+0x23c>
 8004fe6:	2110      	movs	r1, #16
 8004fe8:	6a38      	ldr	r0, [r7, #32]
 8004fea:	f7ff fc63 	bl	80048b4 <SD_RxDataBlock>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02b      	beq.n	800504c <SD_disk_ioctl+0x23c>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004ffa:	e027      	b.n	800504c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	207a      	movs	r0, #122	; 0x7a
 8005000:	f7ff fcc9 	bl	8004996 <SD_SendCmd>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d116      	bne.n	8005038 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800500a:	2300      	movs	r3, #0
 800500c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005010:	e00b      	b.n	800502a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8005012:	6a3c      	ldr	r4, [r7, #32]
 8005014:	1c63      	adds	r3, r4, #1
 8005016:	623b      	str	r3, [r7, #32]
 8005018:	f7ff fbb0 	bl	800477c <SPI_RxByte>
 800501c:	4603      	mov	r3, r0
 800501e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8005020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005024:	3301      	adds	r3, #1
 8005026:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800502a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800502e:	2b03      	cmp	r3, #3
 8005030:	d9ef      	bls.n	8005012 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8005038:	2304      	movs	r3, #4
 800503a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800503e:	e006      	b.n	800504e <SD_disk_ioctl+0x23e>
			break;
 8005040:	bf00      	nop
 8005042:	e004      	b.n	800504e <SD_disk_ioctl+0x23e>
			break;
 8005044:	bf00      	nop
 8005046:	e002      	b.n	800504e <SD_disk_ioctl+0x23e>
			break;
 8005048:	bf00      	nop
 800504a:	e000      	b.n	800504e <SD_disk_ioctl+0x23e>
			break;
 800504c:	bf00      	nop
		}

		DESELECT();
 800504e:	f7ff fb53 	bl	80046f8 <DESELECT>
		SPI_RxByte();
 8005052:	f7ff fb93 	bl	800477c <SPI_RxByte>
	}

	return res;
 8005056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800505a:	4618      	mov	r0, r3
 800505c:	372c      	adds	r7, #44	; 0x2c
 800505e:	46bd      	mov	sp, r7
 8005060:	bd90      	pop	{r4, r7, pc}
 8005062:	bf00      	nop
 8005064:	200000e0 	.word	0x200000e0

08005068 <resetTimer3Variable>:
	return uartFlagRx;
}


void resetTimer3Variable()
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
	timer3Data = 0;
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <resetTimer3Variable+0x14>)
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
}
 8005072:	bf00      	nop
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000678 	.word	0x20000678

08005080 <getKeyPressed>:

unsigned char getKeyPressed()
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
	return key;
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <getKeyPressed+0x14>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	b2db      	uxtb	r3, r3
}
 800508a:	4618      	mov	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000674 	.word	0x20000674

08005098 <resetKeyPressed>:

void resetKeyPressed()
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
	key = IDDLE;
 800509c:	4b03      	ldr	r3, [pc, #12]	; (80050ac <resetKeyPressed+0x14>)
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 80050a2:	20c8      	movs	r0, #200	; 0xc8
 80050a4:	f000 ff98 	bl	8005fd8 <HAL_Delay>
}
 80050a8:	bf00      	nop
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20000674 	.word	0x20000674

080050b0 <getUARTInstance>:

unsigned long int* getUARTInstance()
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
	return &huart2;
 80050b4:	4b02      	ldr	r3, [pc, #8]	; (80050c0 <getUARTInstance+0x10>)
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	200005ec 	.word	0x200005ec

080050c4 <getTimer2Instance>:

unsigned char* getTimer2Instance()
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
	return &htim2;
 80050c8:	4b02      	ldr	r3, [pc, #8]	; (80050d4 <getTimer2Instance+0x10>)
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2000055c 	.word	0x2000055c

080050d8 <getTimer3Instance>:

unsigned char* getTimer3Instance()
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
	return &htim3;
 80050dc:	4b02      	ldr	r3, [pc, #8]	; (80050e8 <getTimer3Instance+0x10>)
}
 80050de:	4618      	mov	r0, r3
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	200005a4 	.word	0x200005a4

080050ec <getTimer2Variable>:

unsigned char getTimer2Variable()
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
	return sensorFlag;
 80050f0:	4b03      	ldr	r3, [pc, #12]	; (8005100 <getTimer2Variable+0x14>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	b2db      	uxtb	r3, r3
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	200000e1 	.word	0x200000e1

08005104 <getTimer3Variable>:

unsigned int getTimer3Variable()
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
	return timer3Data;
 8005108:	4b02      	ldr	r3, [pc, #8]	; (8005114 <getTimer3Variable+0x10>)
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	20000678 	.word	0x20000678

08005118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800511e:	f000 fef9 	bl	8005f14 <HAL_Init>
	  unsigned char menuSelect;
	  unsigned char menuDisplay;
	  unsigned char menuState;
  };

  struct Menu menuTesteMain = {IDDLE,IDDLE,IDDLE,IDDLE};
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
  struct Menu menuTesteSub = {IDDLE,IDDLE,IDDLE,IDDLE};
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
  unsigned char displayUpdateStatus = IDDLE;
 800512a:	2300      	movs	r3, #0
 800512c:	71fb      	strb	r3, [r7, #7]
  //unsigned char cursorPosition[2] = {0,0};

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800512e:	f000 f9c9 	bl	80054c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005132:	f000 fb2d 	bl	8005790 <MX_GPIO_Init>
  MX_DMA_Init();
 8005136:	f000 fb0d 	bl	8005754 <MX_DMA_Init>
  MX_TIM2_Init();
 800513a:	f000 fa3f 	bl	80055bc <MX_TIM2_Init>
  MX_TIM3_Init();
 800513e:	f000 fa91 	bl	8005664 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8005142:	f000 fadd 	bl	8005700 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005146:	f004 f99d 	bl	8009484 <MX_FATFS_Init>
  MX_SPI1_Init();
 800514a:	f000 fa01 	bl	8005550 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800514e:	2201      	movs	r2, #1
 8005150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005154:	48c9      	ldr	r0, [pc, #804]	; (800547c <main+0x364>)
 8005156:	f001 fc93 	bl	8006a80 <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 800515a:	2214      	movs	r2, #20
 800515c:	49c8      	ldr	r1, [pc, #800]	; (8005480 <main+0x368>)
 800515e:	48c9      	ldr	r0, [pc, #804]	; (8005484 <main+0x36c>)
 8005160:	f003 fc21 	bl	80089a6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8005164:	4bc8      	ldr	r3, [pc, #800]	; (8005488 <main+0x370>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4bc7      	ldr	r3, [pc, #796]	; (8005488 <main+0x370>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0204 	bic.w	r2, r2, #4
 8005172:	601a      	str	r2, [r3, #0]
  homeDataDisplay(appNameMsg,companyNameMsg,appVersionMsg);
 8005174:	4bc5      	ldr	r3, [pc, #788]	; (800548c <main+0x374>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4ac5      	ldr	r2, [pc, #788]	; (8005490 <main+0x378>)
 800517a:	6811      	ldr	r1, [r2, #0]
 800517c:	4ac5      	ldr	r2, [pc, #788]	; (8005494 <main+0x37c>)
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe fbc3 	bl	800390c <homeDataDisplay>
  while(1)
  {
	  switch(menuTesteMain.menuState)
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	2b05      	cmp	r3, #5
 800518a:	d8fc      	bhi.n	8005186 <main+0x6e>
 800518c:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <main+0x7c>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051ad 	.word	0x080051ad
 8005198:	080051db 	.word	0x080051db
 800519c:	0800525b 	.word	0x0800525b
 80051a0:	080052e1 	.word	0x080052e1
 80051a4:	08005367 	.word	0x08005367
 80051a8:	080053eb 	.word	0x080053eb
	  {
		  case IDDLE:
			  menuTesteMain.menuState = getNextMain(IDDLE);
 80051ac:	2000      	movs	r0, #0
 80051ae:	f000 fc3b 	bl	8005a28 <getNextMain>
 80051b2:	4603      	mov	r3, r0
 80051b4:	73fb      	strb	r3, [r7, #15]
			  if(key == AVANCAR)
 80051b6:	4bb8      	ldr	r3, [pc, #736]	; (8005498 <main+0x380>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b41      	cmp	r3, #65	; 0x41
 80051be:	f040 8156 	bne.w	800546e <main+0x356>
			  {
				  resetKeyPressed();
 80051c2:	f7ff ff69 	bl	8005098 <resetKeyPressed>
				                      readyUserInterface(&displayUpdateStatus);
 80051c6:	1dfb      	adds	r3, r7, #7
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fd fcc3 	bl	8002b54 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(START_TEST);
 80051ce:	2001      	movs	r0, #1
 80051d0:	f000 fc2a 	bl	8005a28 <getNextMain>
 80051d4:	4603      	mov	r3, r0
 80051d6:	73fb      	strb	r3, [r7, #15]
			  }
		  break;
 80051d8:	e149      	b.n	800546e <main+0x356>

		  case START_TEST:
			  updateUserMsg(0,USERMSG1,startUserMsg,&displayUpdateStatus);
 80051da:	4bb0      	ldr	r3, [pc, #704]	; (800549c <main+0x384>)
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	1dfb      	adds	r3, r7, #7
 80051e0:	2100      	movs	r1, #0
 80051e2:	2000      	movs	r0, #0
 80051e4:	f7fd fc9b 	bl	8002b1e <updateUserMsg>
			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80051e8:	4bad      	ldr	r3, [pc, #692]	; (80054a0 <main+0x388>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	2102      	movs	r1, #2
 80051f0:	2000      	movs	r0, #0
 80051f2:	f7fe fc65 	bl	8003ac0 <HW_PRINT_DATA>
			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80051f6:	4bab      	ldr	r3, [pc, #684]	; (80054a4 <main+0x38c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	2103      	movs	r1, #3
 80051fe:	2000      	movs	r0, #0
 8005200:	f7fe fc5e 	bl	8003ac0 <HW_PRINT_DATA>
			  if(key == AVANCAR)
 8005204:	4ba4      	ldr	r3, [pc, #656]	; (8005498 <main+0x380>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b41      	cmp	r3, #65	; 0x41
 800520c:	d10b      	bne.n	8005226 <main+0x10e>
			  {
				  resetKeyPressed();
 800520e:	f7ff ff43 	bl	8005098 <resetKeyPressed>
				                      readyUserInterface(&displayUpdateStatus);
 8005212:	1dfb      	adds	r3, r7, #7
 8005214:	4618      	mov	r0, r3
 8005216:	f7fd fc9d 	bl	8002b54 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(CONSULT_DATA);
 800521a:	2002      	movs	r0, #2
 800521c:	f000 fc04 	bl	8005a28 <getNextMain>
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]
				  initStateMachine(&menuTesteSub);
				  readyUserInterface(&displayUpdateStatus);

				  menuTesteSub.menuState = IDDLE;
			  }
		  break;
 8005224:	e125      	b.n	8005472 <main+0x35a>
			  else if(key == CONFIRMAR)
 8005226:	4b9c      	ldr	r3, [pc, #624]	; (8005498 <main+0x380>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b43      	cmp	r3, #67	; 0x43
 800522e:	f040 8120 	bne.w	8005472 <main+0x35a>
				  resetKeyPressed();
 8005232:	f7ff ff31 	bl	8005098 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus);
 8005236:	1dfb      	adds	r3, r7, #7
 8005238:	4618      	mov	r0, r3
 800523a:	f7fd fc8b 	bl	8002b54 <readyUserInterface>
				  menuTesteMain.menuSelect = menuTesteMain.menuState;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	737b      	strb	r3, [r7, #13]
				  initStateMachine(&menuTesteSub);
 8005242:	f107 0308 	add.w	r3, r7, #8
 8005246:	4618      	mov	r0, r3
 8005248:	f7fd fe44 	bl	8002ed4 <initStateMachine>
				  readyUserInterface(&displayUpdateStatus);
 800524c:	1dfb      	adds	r3, r7, #7
 800524e:	4618      	mov	r0, r3
 8005250:	f7fd fc80 	bl	8002b54 <readyUserInterface>
				  menuTesteSub.menuState = IDDLE;
 8005254:	2300      	movs	r3, #0
 8005256:	72fb      	strb	r3, [r7, #11]
		  break;
 8005258:	e10b      	b.n	8005472 <main+0x35a>

		  case CONSULT_DATA:
			  updateUserMsg(0,0,consultUserMsg,&displayUpdateStatus);
 800525a:	4b93      	ldr	r3, [pc, #588]	; (80054a8 <main+0x390>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	1dfb      	adds	r3, r7, #7
 8005260:	2100      	movs	r1, #0
 8005262:	2000      	movs	r0, #0
 8005264:	f7fd fc5b 	bl	8002b1e <updateUserMsg>
			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8005268:	4b8d      	ldr	r3, [pc, #564]	; (80054a0 <main+0x388>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	2102      	movs	r1, #2
 8005270:	2000      	movs	r0, #0
 8005272:	f7fe fc25 	bl	8003ac0 <HW_PRINT_DATA>
			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8005276:	4b8b      	ldr	r3, [pc, #556]	; (80054a4 <main+0x38c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	2103      	movs	r1, #3
 800527e:	2000      	movs	r0, #0
 8005280:	f7fe fc1e 	bl	8003ac0 <HW_PRINT_DATA>
			  if(key == AVANCAR)
 8005284:	4b84      	ldr	r3, [pc, #528]	; (8005498 <main+0x380>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b41      	cmp	r3, #65	; 0x41
 800528c:	d10b      	bne.n	80052a6 <main+0x18e>
			  {
				  resetKeyPressed();
 800528e:	f7ff ff03 	bl	8005098 <resetKeyPressed>
				                      readyUserInterface(&displayUpdateStatus);
 8005292:	1dfb      	adds	r3, r7, #7
 8005294:	4618      	mov	r0, r3
 8005296:	f7fd fc5d 	bl	8002b54 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(CONFIG_SENSOR);
 800529a:	2003      	movs	r0, #3
 800529c:	f000 fbc4 	bl	8005a28 <getNextMain>
 80052a0:	4603      	mov	r3, r0
 80052a2:	73fb      	strb	r3, [r7, #15]
				 consultStateMachine(&menuTesteSub);
				  readyUserInterface(&displayUpdateStatus);
				 menuTesteMain.menuState = getNextMain(START_TEST);
				 menuTesteSub.menuState = IDDLE;
			  }
		  break;
 80052a4:	e0e7      	b.n	8005476 <main+0x35e>
			  else if(key == CONFIRMAR)
 80052a6:	4b7c      	ldr	r3, [pc, #496]	; (8005498 <main+0x380>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b43      	cmp	r3, #67	; 0x43
 80052ae:	f040 80e2 	bne.w	8005476 <main+0x35e>
				  resetKeyPressed();
 80052b2:	f7ff fef1 	bl	8005098 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus);
 80052b6:	1dfb      	adds	r3, r7, #7
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fd fc4b 	bl	8002b54 <readyUserInterface>
				 consultStateMachine(&menuTesteSub);
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fc fb78 	bl	80019b8 <consultStateMachine>
				  readyUserInterface(&displayUpdateStatus);
 80052c8:	1dfb      	adds	r3, r7, #7
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fd fc42 	bl	8002b54 <readyUserInterface>
				 menuTesteMain.menuState = getNextMain(START_TEST);
 80052d0:	2001      	movs	r0, #1
 80052d2:	f000 fba9 	bl	8005a28 <getNextMain>
 80052d6:	4603      	mov	r3, r0
 80052d8:	73fb      	strb	r3, [r7, #15]
				 menuTesteSub.menuState = IDDLE;
 80052da:	2300      	movs	r3, #0
 80052dc:	72fb      	strb	r3, [r7, #11]
		  break;
 80052de:	e0ca      	b.n	8005476 <main+0x35e>

		  case CONFIG_SENSOR:
			  updateUserMsg(0,0,configUserMsg,&displayUpdateStatus);
 80052e0:	4b72      	ldr	r3, [pc, #456]	; (80054ac <main+0x394>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	1dfb      	adds	r3, r7, #7
 80052e6:	2100      	movs	r1, #0
 80052e8:	2000      	movs	r0, #0
 80052ea:	f7fd fc18 	bl	8002b1e <updateUserMsg>
			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80052ee:	4b6c      	ldr	r3, [pc, #432]	; (80054a0 <main+0x388>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	2102      	movs	r1, #2
 80052f6:	2000      	movs	r0, #0
 80052f8:	f7fe fbe2 	bl	8003ac0 <HW_PRINT_DATA>
			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80052fc:	4b69      	ldr	r3, [pc, #420]	; (80054a4 <main+0x38c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	2103      	movs	r1, #3
 8005304:	2000      	movs	r0, #0
 8005306:	f7fe fbdb 	bl	8003ac0 <HW_PRINT_DATA>
			  if(key == AVANCAR)
 800530a:	4b63      	ldr	r3, [pc, #396]	; (8005498 <main+0x380>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b41      	cmp	r3, #65	; 0x41
 8005312:	d10b      	bne.n	800532c <main+0x214>
			  {
				  resetKeyPressed();
 8005314:	f7ff fec0 	bl	8005098 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus);
 8005318:	1dfb      	adds	r3, r7, #7
 800531a:	4618      	mov	r0, r3
 800531c:	f7fd fc1a 	bl	8002b54 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(EXPORT_DATA);
 8005320:	2004      	movs	r0, #4
 8005322:	f000 fb81 	bl	8005a28 <getNextMain>
 8005326:	4603      	mov	r3, r0
 8005328:	73fb      	strb	r3, [r7, #15]
				  configStateMachine(&menuTesteSub);
				  readyUserInterface(&displayUpdateStatus);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 800532a:	e0c5      	b.n	80054b8 <main+0x3a0>
			  else if(key == CONFIRMAR)
 800532c:	4b5a      	ldr	r3, [pc, #360]	; (8005498 <main+0x380>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b43      	cmp	r3, #67	; 0x43
 8005334:	f040 80c0 	bne.w	80054b8 <main+0x3a0>
				  resetKeyPressed();
 8005338:	f7ff feae 	bl	8005098 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus);
 800533c:	1dfb      	adds	r3, r7, #7
 800533e:	4618      	mov	r0, r3
 8005340:	f7fd fc08 	bl	8002b54 <readyUserInterface>
				  configStateMachine(&menuTesteSub);
 8005344:	f107 0308 	add.w	r3, r7, #8
 8005348:	4618      	mov	r0, r3
 800534a:	f7fb fd59 	bl	8000e00 <configStateMachine>
				  readyUserInterface(&displayUpdateStatus);
 800534e:	1dfb      	adds	r3, r7, #7
 8005350:	4618      	mov	r0, r3
 8005352:	f7fd fbff 	bl	8002b54 <readyUserInterface>
				  menuTesteSub.menuState = IDDLE;
 8005356:	2300      	movs	r3, #0
 8005358:	72fb      	strb	r3, [r7, #11]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 800535a:	2001      	movs	r0, #1
 800535c:	f000 fb64 	bl	8005a28 <getNextMain>
 8005360:	4603      	mov	r3, r0
 8005362:	73fb      	strb	r3, [r7, #15]
		  break;
 8005364:	e0a8      	b.n	80054b8 <main+0x3a0>

		  case EXPORT_DATA:
			  updateUserMsg(0,0,exportUserMsg,&displayUpdateStatus);
 8005366:	4b52      	ldr	r3, [pc, #328]	; (80054b0 <main+0x398>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	1dfb      	adds	r3, r7, #7
 800536c:	2100      	movs	r1, #0
 800536e:	2000      	movs	r0, #0
 8005370:	f7fd fbd5 	bl	8002b1e <updateUserMsg>
			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8005374:	4b4a      	ldr	r3, [pc, #296]	; (80054a0 <main+0x388>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	2102      	movs	r1, #2
 800537c:	2000      	movs	r0, #0
 800537e:	f7fe fb9f 	bl	8003ac0 <HW_PRINT_DATA>
			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8005382:	4b48      	ldr	r3, [pc, #288]	; (80054a4 <main+0x38c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	2103      	movs	r1, #3
 800538a:	2000      	movs	r0, #0
 800538c:	f7fe fb98 	bl	8003ac0 <HW_PRINT_DATA>
			  if(key == AVANCAR)
 8005390:	4b41      	ldr	r3, [pc, #260]	; (8005498 <main+0x380>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b41      	cmp	r3, #65	; 0x41
 8005398:	d10b      	bne.n	80053b2 <main+0x29a>
			  {
				  resetKeyPressed();
 800539a:	f7ff fe7d 	bl	8005098 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus);
 800539e:	1dfb      	adds	r3, r7, #7
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fd fbd7 	bl	8002b54 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(ERASE_DATA);
 80053a6:	2005      	movs	r0, #5
 80053a8:	f000 fb3e 	bl	8005a28 <getNextMain>
 80053ac:	4603      	mov	r3, r0
 80053ae:	73fb      	strb	r3, [r7, #15]
				  readyUserInterface(&displayUpdateStatus);

				  menuTesteSub.menuState = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 80053b0:	e084      	b.n	80054bc <main+0x3a4>
			  else if(key == CONFIRMAR)
 80053b2:	4b39      	ldr	r3, [pc, #228]	; (8005498 <main+0x380>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b43      	cmp	r3, #67	; 0x43
 80053ba:	d17f      	bne.n	80054bc <main+0x3a4>
				  resetKeyPressed();
 80053bc:	f7ff fe6c 	bl	8005098 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus);
 80053c0:	1dfb      	adds	r3, r7, #7
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fd fbc6 	bl	8002b54 <readyUserInterface>
				  exportStateMachine(&menuTesteSub);
 80053c8:	f107 0308 	add.w	r3, r7, #8
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fd fbdf 	bl	8002b90 <exportStateMachine>
				  readyUserInterface(&displayUpdateStatus);
 80053d2:	1dfb      	adds	r3, r7, #7
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fd fbbd 	bl	8002b54 <readyUserInterface>
				  menuTesteSub.menuState = IDDLE;
 80053da:	2300      	movs	r3, #0
 80053dc:	72fb      	strb	r3, [r7, #11]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 80053de:	2001      	movs	r0, #1
 80053e0:	f000 fb22 	bl	8005a28 <getNextMain>
 80053e4:	4603      	mov	r3, r0
 80053e6:	73fb      	strb	r3, [r7, #15]
		  break;
 80053e8:	e068      	b.n	80054bc <main+0x3a4>

		  case ERASE_DATA:
			  updateUserMsg(0,0,eraseUserMsg,&displayUpdateStatus);
 80053ea:	4b32      	ldr	r3, [pc, #200]	; (80054b4 <main+0x39c>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	1dfb      	adds	r3, r7, #7
 80053f0:	2100      	movs	r1, #0
 80053f2:	2000      	movs	r0, #0
 80053f4:	f7fd fb93 	bl	8002b1e <updateUserMsg>
			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80053f8:	4b29      	ldr	r3, [pc, #164]	; (80054a0 <main+0x388>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	461a      	mov	r2, r3
 80053fe:	2102      	movs	r1, #2
 8005400:	2000      	movs	r0, #0
 8005402:	f7fe fb5d 	bl	8003ac0 <HW_PRINT_DATA>
			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8005406:	4b27      	ldr	r3, [pc, #156]	; (80054a4 <main+0x38c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	2103      	movs	r1, #3
 800540e:	2000      	movs	r0, #0
 8005410:	f7fe fb56 	bl	8003ac0 <HW_PRINT_DATA>
			  if(key == AVANCAR)
 8005414:	4b20      	ldr	r3, [pc, #128]	; (8005498 <main+0x380>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b41      	cmp	r3, #65	; 0x41
 800541c:	d10b      	bne.n	8005436 <main+0x31e>
			  {
				  resetKeyPressed();
 800541e:	f7ff fe3b 	bl	8005098 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus);
 8005422:	1dfb      	adds	r3, r7, #7
 8005424:	4618      	mov	r0, r3
 8005426:	f7fd fb95 	bl	8002b54 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(START_TEST);
 800542a:	2001      	movs	r0, #1
 800542c:	f000 fafc 	bl	8005a28 <getNextMain>
 8005430:	4603      	mov	r3, r0
 8005432:	73fb      	strb	r3, [r7, #15]
				  readyUserInterface(&displayUpdateStatus);

				  menuTesteSub.menuState = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 8005434:	e044      	b.n	80054c0 <main+0x3a8>
			  else if(key == CONFIRMAR)
 8005436:	4b18      	ldr	r3, [pc, #96]	; (8005498 <main+0x380>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b43      	cmp	r3, #67	; 0x43
 800543e:	d13f      	bne.n	80054c0 <main+0x3a8>
				  resetKeyPressed();
 8005440:	f7ff fe2a 	bl	8005098 <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus);
 8005444:	1dfb      	adds	r3, r7, #7
 8005446:	4618      	mov	r0, r3
 8005448:	f7fd fb84 	bl	8002b54 <readyUserInterface>
				  eraseStateMachine(&menuTesteSub);
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	4618      	mov	r0, r3
 8005452:	f7fb fc27 	bl	8000ca4 <eraseStateMachine>
				  readyUserInterface(&displayUpdateStatus);
 8005456:	1dfb      	adds	r3, r7, #7
 8005458:	4618      	mov	r0, r3
 800545a:	f7fd fb7b 	bl	8002b54 <readyUserInterface>
				  menuTesteSub.menuState = IDDLE;
 800545e:	2300      	movs	r3, #0
 8005460:	72fb      	strb	r3, [r7, #11]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005462:	2001      	movs	r0, #1
 8005464:	f000 fae0 	bl	8005a28 <getNextMain>
 8005468:	4603      	mov	r3, r0
 800546a:	73fb      	strb	r3, [r7, #15]
		  break;
 800546c:	e028      	b.n	80054c0 <main+0x3a8>
		  break;
 800546e:	bf00      	nop
 8005470:	e689      	b.n	8005186 <main+0x6e>
		  break;
 8005472:	bf00      	nop
 8005474:	e687      	b.n	8005186 <main+0x6e>
		  break;
 8005476:	bf00      	nop
 8005478:	e685      	b.n	8005186 <main+0x6e>
 800547a:	bf00      	nop
 800547c:	40011000 	.word	0x40011000
 8005480:	20000680 	.word	0x20000680
 8005484:	200005ec 	.word	0x200005ec
 8005488:	20000630 	.word	0x20000630
 800548c:	20000018 	.word	0x20000018
 8005490:	2000001c 	.word	0x2000001c
 8005494:	20000020 	.word	0x20000020
 8005498:	20000674 	.word	0x20000674
 800549c:	20000024 	.word	0x20000024
 80054a0:	200000c8 	.word	0x200000c8
 80054a4:	200000d4 	.word	0x200000d4
 80054a8:	20000068 	.word	0x20000068
 80054ac:	20000078 	.word	0x20000078
 80054b0:	200000ac 	.word	0x200000ac
 80054b4:	200000b8 	.word	0x200000b8
		  break;
 80054b8:	bf00      	nop
 80054ba:	e664      	b.n	8005186 <main+0x6e>
		  break;
 80054bc:	bf00      	nop
 80054be:	e662      	b.n	8005186 <main+0x6e>
		  break;
 80054c0:	bf00      	nop
	  switch(menuTesteMain.menuState)
 80054c2:	e660      	b.n	8005186 <main+0x6e>

080054c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b090      	sub	sp, #64	; 0x40
 80054c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054ca:	f107 0318 	add.w	r3, r7, #24
 80054ce:	2228      	movs	r2, #40	; 0x28
 80054d0:	2100      	movs	r1, #0
 80054d2:	4618      	mov	r0, r3
 80054d4:	f004 f8d8 	bl	8009688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054d8:	1d3b      	adds	r3, r7, #4
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	605a      	str	r2, [r3, #4]
 80054e0:	609a      	str	r2, [r3, #8]
 80054e2:	60da      	str	r2, [r3, #12]
 80054e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80054e6:	2301      	movs	r3, #1
 80054e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80054f0:	2300      	movs	r3, #0
 80054f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80054f4:	2301      	movs	r3, #1
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054f8:	2302      	movs	r3, #2
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005500:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005502:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005506:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005508:	f107 0318 	add.w	r3, r7, #24
 800550c:	4618      	mov	r0, r3
 800550e:	f001 fb01 	bl	8006b14 <HAL_RCC_OscConfig>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005518:	f000 fa80 	bl	8005a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800551c:	230f      	movs	r3, #15
 800551e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005520:	2302      	movs	r3, #2
 8005522:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800552c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	2102      	movs	r1, #2
 8005536:	4618      	mov	r0, r3
 8005538:	f001 fd6e 	bl	8007018 <HAL_RCC_ClockConfig>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005542:	f000 fa6b 	bl	8005a1c <Error_Handler>
  }
}
 8005546:	bf00      	nop
 8005548:	3740      	adds	r7, #64	; 0x40
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005554:	4b17      	ldr	r3, [pc, #92]	; (80055b4 <MX_SPI1_Init+0x64>)
 8005556:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <MX_SPI1_Init+0x68>)
 8005558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800555a:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <MX_SPI1_Init+0x64>)
 800555c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005562:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <MX_SPI1_Init+0x64>)
 8005564:	2200      	movs	r2, #0
 8005566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005568:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <MX_SPI1_Init+0x64>)
 800556a:	2200      	movs	r2, #0
 800556c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800556e:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <MX_SPI1_Init+0x64>)
 8005570:	2200      	movs	r2, #0
 8005572:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005574:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <MX_SPI1_Init+0x64>)
 8005576:	2200      	movs	r2, #0
 8005578:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800557a:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <MX_SPI1_Init+0x64>)
 800557c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005580:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005582:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <MX_SPI1_Init+0x64>)
 8005584:	2208      	movs	r2, #8
 8005586:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005588:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <MX_SPI1_Init+0x64>)
 800558a:	2200      	movs	r2, #0
 800558c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800558e:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <MX_SPI1_Init+0x64>)
 8005590:	2200      	movs	r2, #0
 8005592:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <MX_SPI1_Init+0x64>)
 8005596:	2200      	movs	r2, #0
 8005598:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800559a:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <MX_SPI1_Init+0x64>)
 800559c:	220a      	movs	r2, #10
 800559e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80055a0:	4804      	ldr	r0, [pc, #16]	; (80055b4 <MX_SPI1_Init+0x64>)
 80055a2:	f001 fed1 	bl	8007348 <HAL_SPI_Init>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80055ac:	f000 fa36 	bl	8005a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80055b0:	bf00      	nop
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000504 	.word	0x20000504
 80055b8:	40013000 	.word	0x40013000

080055bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08c      	sub	sp, #48	; 0x30
 80055c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80055c2:	f107 030c 	add.w	r3, r7, #12
 80055c6:	2224      	movs	r2, #36	; 0x24
 80055c8:	2100      	movs	r1, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f004 f85c 	bl	8009688 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80055d8:	4b21      	ldr	r3, [pc, #132]	; (8005660 <MX_TIM2_Init+0xa4>)
 80055da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80055e0:	4b1f      	ldr	r3, [pc, #124]	; (8005660 <MX_TIM2_Init+0xa4>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055e6:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <MX_TIM2_Init+0xa4>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80055ec:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <MX_TIM2_Init+0xa4>)
 80055ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055f4:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <MX_TIM2_Init+0xa4>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055fa:	4b19      	ldr	r3, [pc, #100]	; (8005660 <MX_TIM2_Init+0xa4>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005600:	2301      	movs	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005604:	2302      	movs	r3, #2
 8005606:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005608:	2301      	movs	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800560c:	2300      	movs	r3, #0
 800560e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005610:	230f      	movs	r3, #15
 8005612:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005614:	2300      	movs	r3, #0
 8005616:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005618:	2301      	movs	r3, #1
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800561c:	2300      	movs	r3, #0
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005620:	230f      	movs	r3, #15
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005624:	f107 030c 	add.w	r3, r7, #12
 8005628:	4619      	mov	r1, r3
 800562a:	480d      	ldr	r0, [pc, #52]	; (8005660 <MX_TIM2_Init+0xa4>)
 800562c:	f002 fb64 	bl	8007cf8 <HAL_TIM_Encoder_Init>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005636:	f000 f9f1 	bl	8005a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800563a:	2300      	movs	r3, #0
 800563c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800563e:	2300      	movs	r3, #0
 8005640:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	4619      	mov	r1, r3
 8005646:	4806      	ldr	r0, [pc, #24]	; (8005660 <MX_TIM2_Init+0xa4>)
 8005648:	f003 f85e 	bl	8008708 <HAL_TIMEx_MasterConfigSynchronization>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005652:	f000 f9e3 	bl	8005a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005656:	bf00      	nop
 8005658:	3730      	adds	r7, #48	; 0x30
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	2000055c 	.word	0x2000055c

08005664 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800566a:	f107 0308 	add.w	r3, r7, #8
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	605a      	str	r2, [r3, #4]
 8005674:	609a      	str	r2, [r3, #8]
 8005676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005678:	463b      	mov	r3, r7
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005680:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <MX_TIM3_Init+0x94>)
 8005682:	4a1e      	ldr	r2, [pc, #120]	; (80056fc <MX_TIM3_Init+0x98>)
 8005684:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8005686:	4b1c      	ldr	r3, [pc, #112]	; (80056f8 <MX_TIM3_Init+0x94>)
 8005688:	2247      	movs	r2, #71	; 0x47
 800568a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800568c:	4b1a      	ldr	r3, [pc, #104]	; (80056f8 <MX_TIM3_Init+0x94>)
 800568e:	2200      	movs	r2, #0
 8005690:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8005692:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <MX_TIM3_Init+0x94>)
 8005694:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005698:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800569a:	4b17      	ldr	r3, [pc, #92]	; (80056f8 <MX_TIM3_Init+0x94>)
 800569c:	2200      	movs	r2, #0
 800569e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056a0:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <MX_TIM3_Init+0x94>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80056a6:	4814      	ldr	r0, [pc, #80]	; (80056f8 <MX_TIM3_Init+0x94>)
 80056a8:	f002 fa56 	bl	8007b58 <HAL_TIM_Base_Init>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80056b2:	f000 f9b3 	bl	8005a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80056bc:	f107 0308 	add.w	r3, r7, #8
 80056c0:	4619      	mov	r1, r3
 80056c2:	480d      	ldr	r0, [pc, #52]	; (80056f8 <MX_TIM3_Init+0x94>)
 80056c4:	f002 fe25 	bl	8008312 <HAL_TIM_ConfigClockSource>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80056ce:	f000 f9a5 	bl	8005a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056d2:	2300      	movs	r3, #0
 80056d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056da:	463b      	mov	r3, r7
 80056dc:	4619      	mov	r1, r3
 80056de:	4806      	ldr	r0, [pc, #24]	; (80056f8 <MX_TIM3_Init+0x94>)
 80056e0:	f003 f812 	bl	8008708 <HAL_TIMEx_MasterConfigSynchronization>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80056ea:	f000 f997 	bl	8005a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	200005a4 	.word	0x200005a4
 80056fc:	40000400 	.word	0x40000400

08005700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005704:	4b11      	ldr	r3, [pc, #68]	; (800574c <MX_USART2_UART_Init+0x4c>)
 8005706:	4a12      	ldr	r2, [pc, #72]	; (8005750 <MX_USART2_UART_Init+0x50>)
 8005708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800570a:	4b10      	ldr	r3, [pc, #64]	; (800574c <MX_USART2_UART_Init+0x4c>)
 800570c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005712:	4b0e      	ldr	r3, [pc, #56]	; (800574c <MX_USART2_UART_Init+0x4c>)
 8005714:	2200      	movs	r2, #0
 8005716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <MX_USART2_UART_Init+0x4c>)
 800571a:	2200      	movs	r2, #0
 800571c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <MX_USART2_UART_Init+0x4c>)
 8005720:	2200      	movs	r2, #0
 8005722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005724:	4b09      	ldr	r3, [pc, #36]	; (800574c <MX_USART2_UART_Init+0x4c>)
 8005726:	220c      	movs	r2, #12
 8005728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800572a:	4b08      	ldr	r3, [pc, #32]	; (800574c <MX_USART2_UART_Init+0x4c>)
 800572c:	2200      	movs	r2, #0
 800572e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005730:	4b06      	ldr	r3, [pc, #24]	; (800574c <MX_USART2_UART_Init+0x4c>)
 8005732:	2200      	movs	r2, #0
 8005734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005736:	4805      	ldr	r0, [pc, #20]	; (800574c <MX_USART2_UART_Init+0x4c>)
 8005738:	f003 f856 	bl	80087e8 <HAL_UART_Init>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005742:	f000 f96b 	bl	8005a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	200005ec 	.word	0x200005ec
 8005750:	40004400 	.word	0x40004400

08005754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800575a:	4b0c      	ldr	r3, [pc, #48]	; (800578c <MX_DMA_Init+0x38>)
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	4a0b      	ldr	r2, [pc, #44]	; (800578c <MX_DMA_Init+0x38>)
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	6153      	str	r3, [r2, #20]
 8005766:	4b09      	ldr	r3, [pc, #36]	; (800578c <MX_DMA_Init+0x38>)
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	607b      	str	r3, [r7, #4]
 8005770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005772:	2200      	movs	r2, #0
 8005774:	2100      	movs	r1, #0
 8005776:	2010      	movs	r0, #16
 8005778:	f000 fd29 	bl	80061ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800577c:	2010      	movs	r0, #16
 800577e:	f000 fd42 	bl	8006206 <HAL_NVIC_EnableIRQ>

}
 8005782:	bf00      	nop
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40021000 	.word	0x40021000

08005790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005796:	f107 0310 	add.w	r3, r7, #16
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	605a      	str	r2, [r3, #4]
 80057a0:	609a      	str	r2, [r3, #8]
 80057a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80057a4:	4b47      	ldr	r3, [pc, #284]	; (80058c4 <MX_GPIO_Init+0x134>)
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	4a46      	ldr	r2, [pc, #280]	; (80058c4 <MX_GPIO_Init+0x134>)
 80057aa:	f043 0310 	orr.w	r3, r3, #16
 80057ae:	6193      	str	r3, [r2, #24]
 80057b0:	4b44      	ldr	r3, [pc, #272]	; (80058c4 <MX_GPIO_Init+0x134>)
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80057bc:	4b41      	ldr	r3, [pc, #260]	; (80058c4 <MX_GPIO_Init+0x134>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	4a40      	ldr	r2, [pc, #256]	; (80058c4 <MX_GPIO_Init+0x134>)
 80057c2:	f043 0320 	orr.w	r3, r3, #32
 80057c6:	6193      	str	r3, [r2, #24]
 80057c8:	4b3e      	ldr	r3, [pc, #248]	; (80058c4 <MX_GPIO_Init+0x134>)
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80057d4:	4b3b      	ldr	r3, [pc, #236]	; (80058c4 <MX_GPIO_Init+0x134>)
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	4a3a      	ldr	r2, [pc, #232]	; (80058c4 <MX_GPIO_Init+0x134>)
 80057da:	f043 0304 	orr.w	r3, r3, #4
 80057de:	6193      	str	r3, [r2, #24]
 80057e0:	4b38      	ldr	r3, [pc, #224]	; (80058c4 <MX_GPIO_Init+0x134>)
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	607b      	str	r3, [r7, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ec:	4b35      	ldr	r3, [pc, #212]	; (80058c4 <MX_GPIO_Init+0x134>)
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	4a34      	ldr	r2, [pc, #208]	; (80058c4 <MX_GPIO_Init+0x134>)
 80057f2:	f043 0308 	orr.w	r3, r3, #8
 80057f6:	6193      	str	r3, [r2, #24]
 80057f8:	4b32      	ldr	r3, [pc, #200]	; (80058c4 <MX_GPIO_Init+0x134>)
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005804:	2200      	movs	r2, #0
 8005806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800580a:	482f      	ldr	r0, [pc, #188]	; (80058c8 <MX_GPIO_Init+0x138>)
 800580c:	f001 f938 	bl	8006a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8005810:	2200      	movs	r2, #0
 8005812:	f649 7110 	movw	r1, #40720	; 0x9f10
 8005816:	482d      	ldr	r0, [pc, #180]	; (80058cc <MX_GPIO_Init+0x13c>)
 8005818:	f001 f932 	bl	8006a80 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 800581c:	2200      	movs	r2, #0
 800581e:	f24f 2108 	movw	r1, #61960	; 0xf208
 8005822:	482b      	ldr	r0, [pc, #172]	; (80058d0 <MX_GPIO_Init+0x140>)
 8005824:	f001 f92c 	bl	8006a80 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800582c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800582e:	2301      	movs	r3, #1
 8005830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005832:	2300      	movs	r3, #0
 8005834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005836:	2302      	movs	r3, #2
 8005838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800583a:	f107 0310 	add.w	r3, r7, #16
 800583e:	4619      	mov	r1, r3
 8005840:	4821      	ldr	r0, [pc, #132]	; (80058c8 <MX_GPIO_Init+0x138>)
 8005842:	f000 ff99 	bl	8006778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LCD_D3_Pin LCD_D2_Pin LCD_D1_Pin
                           LCD_D0_Pin LCD_EN_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8005846:	f649 7310 	movw	r3, #40720	; 0x9f10
 800584a:	613b      	str	r3, [r7, #16]
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800584c:	2301      	movs	r3, #1
 800584e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005850:	2300      	movs	r3, #0
 8005852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005854:	2302      	movs	r3, #2
 8005856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005858:	f107 0310 	add.w	r3, r7, #16
 800585c:	4619      	mov	r1, r3
 800585e:	481b      	ldr	r0, [pc, #108]	; (80058cc <MX_GPIO_Init+0x13c>)
 8005860:	f000 ff8a 	bl	8006778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_RS_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8005864:	f24f 2308 	movw	r3, #61960	; 0xf208
 8005868:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800586a:	2301      	movs	r3, #1
 800586c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005872:	2302      	movs	r3, #2
 8005874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005876:	f107 0310 	add.w	r3, r7, #16
 800587a:	4619      	mov	r1, r3
 800587c:	4814      	ldr	r0, [pc, #80]	; (80058d0 <MX_GPIO_Init+0x140>)
 800587e:	f000 ff7b 	bl	8006778 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_MENU_Pin BT_AVANCA_Pin BT_SELECT_Pin BT_STOP_Pin
                           BT_INSERT_Pin */
  GPIO_InitStruct.Pin = BT_MENU_Pin|BT_AVANCA_Pin|BT_SELECT_Pin|BT_STOP_Pin
 8005882:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8005886:	613b      	str	r3, [r7, #16]
                          |BT_INSERT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005888:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <MX_GPIO_Init+0x144>)
 800588a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800588c:	2301      	movs	r3, #1
 800588e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005890:	f107 0310 	add.w	r3, r7, #16
 8005894:	4619      	mov	r1, r3
 8005896:	480e      	ldr	r0, [pc, #56]	; (80058d0 <MX_GPIO_Init+0x140>)
 8005898:	f000 ff6e 	bl	8006778 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800589c:	2200      	movs	r2, #0
 800589e:	2100      	movs	r1, #0
 80058a0:	200a      	movs	r0, #10
 80058a2:	f000 fc94 	bl	80061ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80058a6:	200a      	movs	r0, #10
 80058a8:	f000 fcad 	bl	8006206 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80058ac:	2200      	movs	r2, #0
 80058ae:	2100      	movs	r1, #0
 80058b0:	2017      	movs	r0, #23
 80058b2:	f000 fc8c 	bl	80061ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80058b6:	2017      	movs	r0, #23
 80058b8:	f000 fca5 	bl	8006206 <HAL_NVIC_EnableIRQ>

}
 80058bc:	bf00      	nop
 80058be:	3720      	adds	r7, #32
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40011000 	.word	0x40011000
 80058cc:	40010800 	.word	0x40010800
 80058d0:	40010c00 	.word	0x40010c00
 80058d4:	10210000 	.word	0x10210000

080058d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a0c      	ldr	r2, [pc, #48]	; (8005914 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d110      	bne.n	800590a <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		timer3Count+=1;  //1ms
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80058f0:	6013      	str	r3, [r2, #0]
		if(timer3Count == 10) //10ms
 80058f2:	4b09      	ldr	r3, [pc, #36]	; (8005918 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b0a      	cmp	r3, #10
 80058f8:	d107      	bne.n	800590a <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			timer3Data += 10;
 80058fa:	4b08      	ldr	r3, [pc, #32]	; (800591c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	330a      	adds	r3, #10
 8005900:	4a06      	ldr	r2, [pc, #24]	; (800591c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005902:	6013      	str	r3, [r2, #0]
			timer3Count = 0;
 8005904:	4b04      	ldr	r3, [pc, #16]	; (8005918 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
		}
	}

}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr
 8005914:	200005a4 	.word	0x200005a4
 8005918:	2000067c 	.word	0x2000067c
 800591c:	20000678 	.word	0x20000678

08005920 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	807b      	strh	r3, [r7, #2]

	//uartBuffer[0]+=1;
	uartFlagRx = TRUE;
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <HAL_UARTEx_RxEventCallback+0x40>)
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005932:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005936:	480b      	ldr	r0, [pc, #44]	; (8005964 <HAL_UARTEx_RxEventCallback+0x44>)
 8005938:	f001 f8ba 	bl	8006ab0 <HAL_GPIO_TogglePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 800593c:	2214      	movs	r2, #20
 800593e:	490a      	ldr	r1, [pc, #40]	; (8005968 <HAL_UARTEx_RxEventCallback+0x48>)
 8005940:	480a      	ldr	r0, [pc, #40]	; (800596c <HAL_UARTEx_RxEventCallback+0x4c>)
 8005942:	f003 f830 	bl	80089a6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8005946:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <HAL_UARTEx_RxEventCallback+0x50>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	4b08      	ldr	r3, [pc, #32]	; (8005970 <HAL_UARTEx_RxEventCallback+0x50>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0204 	bic.w	r2, r2, #4
 8005954:	601a      	str	r2, [r3, #0]

}
 8005956:	bf00      	nop
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000694 	.word	0x20000694
 8005964:	40011000 	.word	0x40011000
 8005968:	20000680 	.word	0x20000680
 800596c:	200005ec 	.word	0x200005ec
 8005970:	20000630 	.word	0x20000630

08005974 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a0b      	ldr	r2, [pc, #44]	; (80059ac <HAL_TIM_IC_CaptureCallback+0x38>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d10e      	bne.n	80059a2 <HAL_TIM_IC_CaptureCallback+0x2e>
	{
		if(htim->Channel == 2)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	7f1b      	ldrb	r3, [r3, #28]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d103      	bne.n	8005994 <HAL_TIM_IC_CaptureCallback+0x20>
		{
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
			sensorFlag = 1;
 800598c:	4b08      	ldr	r3, [pc, #32]	; (80059b0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800598e:	2201      	movs	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
			sensorFlag = 0;
		}
	}

}
 8005992:	e006      	b.n	80059a2 <HAL_TIM_IC_CaptureCallback+0x2e>
		else if(htim->Channel == 1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	7f1b      	ldrb	r3, [r3, #28]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d102      	bne.n	80059a2 <HAL_TIM_IC_CaptureCallback+0x2e>
			sensorFlag = 0;
 800599c:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr
 80059ac:	2000055c 	.word	0x2000055c
 80059b0:	200000e1 	.word	0x200000e1

080059b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80059be:	88fb      	ldrh	r3, [r7, #6]
 80059c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c4:	d012      	beq.n	80059ec <HAL_GPIO_EXTI_Callback+0x38>
 80059c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ca:	dc1f      	bgt.n	8005a0c <HAL_GPIO_EXTI_Callback+0x58>
 80059cc:	2b80      	cmp	r3, #128	; 0x80
 80059ce:	d019      	beq.n	8005a04 <HAL_GPIO_EXTI_Callback+0x50>
 80059d0:	2b80      	cmp	r3, #128	; 0x80
 80059d2:	dc1b      	bgt.n	8005a0c <HAL_GPIO_EXTI_Callback+0x58>
 80059d4:	2b40      	cmp	r3, #64	; 0x40
 80059d6:	d011      	beq.n	80059fc <HAL_GPIO_EXTI_Callback+0x48>
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	dc17      	bgt.n	8005a0c <HAL_GPIO_EXTI_Callback+0x58>
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d009      	beq.n	80059f4 <HAL_GPIO_EXTI_Callback+0x40>
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	d113      	bne.n	8005a0c <HAL_GPIO_EXTI_Callback+0x58>
	{
		case BT_AVANCA_Pin:
			key = AVANCAR;
 80059e4:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <HAL_GPIO_EXTI_Callback+0x64>)
 80059e6:	2241      	movs	r2, #65	; 0x41
 80059e8:	701a      	strb	r2, [r3, #0]
		break;
 80059ea:	e00f      	b.n	8005a0c <HAL_GPIO_EXTI_Callback+0x58>
		case BT_INSERT_Pin:
			key = INSERIR;
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <HAL_GPIO_EXTI_Callback+0x64>)
 80059ee:	2249      	movs	r2, #73	; 0x49
 80059f0:	701a      	strb	r2, [r3, #0]
		break;
 80059f2:	e00b      	b.n	8005a0c <HAL_GPIO_EXTI_Callback+0x58>
		case BT_MENU_Pin:
			key = MENU;
 80059f4:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <HAL_GPIO_EXTI_Callback+0x64>)
 80059f6:	224d      	movs	r2, #77	; 0x4d
 80059f8:	701a      	strb	r2, [r3, #0]
		break;
 80059fa:	e007      	b.n	8005a0c <HAL_GPIO_EXTI_Callback+0x58>
		case BT_SELECT_Pin:
			key = CONFIRMAR;
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <HAL_GPIO_EXTI_Callback+0x64>)
 80059fe:	2243      	movs	r2, #67	; 0x43
 8005a00:	701a      	strb	r2, [r3, #0]
		break;
 8005a02:	e003      	b.n	8005a0c <HAL_GPIO_EXTI_Callback+0x58>
		case BT_STOP_Pin:
			key = PARAR;
 8005a04:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <HAL_GPIO_EXTI_Callback+0x64>)
 8005a06:	2250      	movs	r2, #80	; 0x50
 8005a08:	701a      	strb	r2, [r3, #0]
		break;
 8005a0a:	bf00      	nop
	}

}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	20000674 	.word	0x20000674

08005a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a20:	b672      	cpsid	i
}
 8005a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a24:	e7fe      	b.n	8005a24 <Error_Handler+0x8>
	...

08005a28 <getNextMain>:

struct Menu menuMain ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextMain(unsigned char nextState)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	71fb      	strb	r3, [r7, #7]

    menuMain.menuNext = nextState;
 8005a32:	4a05      	ldr	r2, [pc, #20]	; (8005a48 <getNextMain+0x20>)
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	7013      	strb	r3, [r2, #0]
    return menuMain.menuNext;
 8005a38:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <getNextMain+0x20>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	20000698 	.word	0x20000698

08005a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a52:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <HAL_MspInit+0x5c>)
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <HAL_MspInit+0x5c>)
 8005a58:	f043 0301 	orr.w	r3, r3, #1
 8005a5c:	6193      	str	r3, [r2, #24]
 8005a5e:	4b12      	ldr	r3, [pc, #72]	; (8005aa8 <HAL_MspInit+0x5c>)
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	60bb      	str	r3, [r7, #8]
 8005a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a6a:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <HAL_MspInit+0x5c>)
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	4a0e      	ldr	r2, [pc, #56]	; (8005aa8 <HAL_MspInit+0x5c>)
 8005a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a74:	61d3      	str	r3, [r2, #28]
 8005a76:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <HAL_MspInit+0x5c>)
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	607b      	str	r3, [r7, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005a82:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <HAL_MspInit+0x60>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	4a04      	ldr	r2, [pc, #16]	; (8005aac <HAL_MspInit+0x60>)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	40010000 	.word	0x40010000

08005ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ab8:	f107 0310 	add.w	r3, r7, #16
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	609a      	str	r2, [r3, #8]
 8005ac4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1b      	ldr	r2, [pc, #108]	; (8005b38 <HAL_SPI_MspInit+0x88>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d12f      	bne.n	8005b30 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <HAL_SPI_MspInit+0x8c>)
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	4a19      	ldr	r2, [pc, #100]	; (8005b3c <HAL_SPI_MspInit+0x8c>)
 8005ad6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ada:	6193      	str	r3, [r2, #24]
 8005adc:	4b17      	ldr	r3, [pc, #92]	; (8005b3c <HAL_SPI_MspInit+0x8c>)
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ae8:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <HAL_SPI_MspInit+0x8c>)
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	4a13      	ldr	r2, [pc, #76]	; (8005b3c <HAL_SPI_MspInit+0x8c>)
 8005aee:	f043 0304 	orr.w	r3, r3, #4
 8005af2:	6193      	str	r3, [r2, #24]
 8005af4:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <HAL_SPI_MspInit+0x8c>)
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005b00:	23a0      	movs	r3, #160	; 0xa0
 8005b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b04:	2302      	movs	r3, #2
 8005b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b0c:	f107 0310 	add.w	r3, r7, #16
 8005b10:	4619      	mov	r1, r3
 8005b12:	480b      	ldr	r0, [pc, #44]	; (8005b40 <HAL_SPI_MspInit+0x90>)
 8005b14:	f000 fe30 	bl	8006778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005b18:	2340      	movs	r3, #64	; 0x40
 8005b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b24:	f107 0310 	add.w	r3, r7, #16
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4805      	ldr	r0, [pc, #20]	; (8005b40 <HAL_SPI_MspInit+0x90>)
 8005b2c:	f000 fe24 	bl	8006778 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005b30:	bf00      	nop
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40013000 	.word	0x40013000
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	40010800 	.word	0x40010800

08005b44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b4c:	f107 0310 	add.w	r3, r7, #16
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b62:	d12b      	bne.n	8005bbc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b64:	4b17      	ldr	r3, [pc, #92]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x80>)
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x80>)
 8005b6a:	f043 0301 	orr.w	r3, r3, #1
 8005b6e:	61d3      	str	r3, [r2, #28]
 8005b70:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x80>)
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b7c:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x80>)
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	4a10      	ldr	r2, [pc, #64]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x80>)
 8005b82:	f043 0304 	orr.w	r3, r3, #4
 8005b86:	6193      	str	r3, [r2, #24]
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x80>)
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005b94:	2303      	movs	r3, #3
 8005b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ba0:	f107 0310 	add.w	r3, r7, #16
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4808      	ldr	r0, [pc, #32]	; (8005bc8 <HAL_TIM_Encoder_MspInit+0x84>)
 8005ba8:	f000 fde6 	bl	8006778 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005bac:	2200      	movs	r2, #0
 8005bae:	2100      	movs	r1, #0
 8005bb0:	201c      	movs	r0, #28
 8005bb2:	f000 fb0c 	bl	80061ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005bb6:	201c      	movs	r0, #28
 8005bb8:	f000 fb25 	bl	8006206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005bbc:	bf00      	nop
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	40010800 	.word	0x40010800

08005bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a0d      	ldr	r2, [pc, #52]	; (8005c10 <HAL_TIM_Base_MspInit+0x44>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d113      	bne.n	8005c06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005bde:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <HAL_TIM_Base_MspInit+0x48>)
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	4a0c      	ldr	r2, [pc, #48]	; (8005c14 <HAL_TIM_Base_MspInit+0x48>)
 8005be4:	f043 0302 	orr.w	r3, r3, #2
 8005be8:	61d3      	str	r3, [r2, #28]
 8005bea:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <HAL_TIM_Base_MspInit+0x48>)
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	201d      	movs	r0, #29
 8005bfc:	f000 fae7 	bl	80061ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005c00:	201d      	movs	r0, #29
 8005c02:	f000 fb00 	bl	8006206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005c06:	bf00      	nop
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40000400 	.word	0x40000400
 8005c14:	40021000 	.word	0x40021000

08005c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c20:	f107 0310 	add.w	r3, r7, #16
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a32      	ldr	r2, [pc, #200]	; (8005cfc <HAL_UART_MspInit+0xe4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d15d      	bne.n	8005cf4 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c38:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <HAL_UART_MspInit+0xe8>)
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	4a30      	ldr	r2, [pc, #192]	; (8005d00 <HAL_UART_MspInit+0xe8>)
 8005c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c42:	61d3      	str	r3, [r2, #28]
 8005c44:	4b2e      	ldr	r3, [pc, #184]	; (8005d00 <HAL_UART_MspInit+0xe8>)
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c50:	4b2b      	ldr	r3, [pc, #172]	; (8005d00 <HAL_UART_MspInit+0xe8>)
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	4a2a      	ldr	r2, [pc, #168]	; (8005d00 <HAL_UART_MspInit+0xe8>)
 8005c56:	f043 0304 	orr.w	r3, r3, #4
 8005c5a:	6193      	str	r3, [r2, #24]
 8005c5c:	4b28      	ldr	r3, [pc, #160]	; (8005d00 <HAL_UART_MspInit+0xe8>)
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	60bb      	str	r3, [r7, #8]
 8005c66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005c68:	2304      	movs	r3, #4
 8005c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c70:	2303      	movs	r3, #3
 8005c72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c74:	f107 0310 	add.w	r3, r7, #16
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4822      	ldr	r0, [pc, #136]	; (8005d04 <HAL_UART_MspInit+0xec>)
 8005c7c:	f000 fd7c 	bl	8006778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005c80:	2308      	movs	r3, #8
 8005c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c8c:	f107 0310 	add.w	r3, r7, #16
 8005c90:	4619      	mov	r1, r3
 8005c92:	481c      	ldr	r0, [pc, #112]	; (8005d04 <HAL_UART_MspInit+0xec>)
 8005c94:	f000 fd70 	bl	8006778 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005c98:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <HAL_UART_MspInit+0xf0>)
 8005c9a:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <HAL_UART_MspInit+0xf4>)
 8005c9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c9e:	4b1a      	ldr	r3, [pc, #104]	; (8005d08 <HAL_UART_MspInit+0xf0>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ca4:	4b18      	ldr	r3, [pc, #96]	; (8005d08 <HAL_UART_MspInit+0xf0>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005caa:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <HAL_UART_MspInit+0xf0>)
 8005cac:	2280      	movs	r2, #128	; 0x80
 8005cae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cb0:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <HAL_UART_MspInit+0xf0>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cb6:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <HAL_UART_MspInit+0xf0>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005cbc:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <HAL_UART_MspInit+0xf0>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005cc2:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <HAL_UART_MspInit+0xf0>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005cc8:	480f      	ldr	r0, [pc, #60]	; (8005d08 <HAL_UART_MspInit+0xf0>)
 8005cca:	f000 fab7 	bl	800623c <HAL_DMA_Init>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8005cd4:	f7ff fea2 	bl	8005a1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a0b      	ldr	r2, [pc, #44]	; (8005d08 <HAL_UART_MspInit+0xf0>)
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8005cde:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <HAL_UART_MspInit+0xf0>)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	2026      	movs	r0, #38	; 0x26
 8005cea:	f000 fa70 	bl	80061ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005cee:	2026      	movs	r0, #38	; 0x26
 8005cf0:	f000 fa89 	bl	8006206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005cf4:	bf00      	nop
 8005cf6:	3720      	adds	r7, #32
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40004400 	.word	0x40004400
 8005d00:	40021000 	.word	0x40021000
 8005d04:	40010800 	.word	0x40010800
 8005d08:	20000630 	.word	0x20000630
 8005d0c:	4002006c 	.word	0x4002006c

08005d10 <SDTimerHandler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1,Timer2;

void SDTimerHandler(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
	if(Timer1>0)
 8005d14:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <SDTimerHandler+0x3c>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d006      	beq.n	8005d2c <SDTimerHandler+0x1c>
		Timer1--;
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <SDTimerHandler+0x3c>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <SDTimerHandler+0x3c>)
 8005d2a:	701a      	strb	r2, [r3, #0]

	if(Timer2>0)
 8005d2c:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <SDTimerHandler+0x40>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d006      	beq.n	8005d44 <SDTimerHandler+0x34>
		Timer2--;
 8005d36:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <SDTimerHandler+0x40>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	4b03      	ldr	r3, [pc, #12]	; (8005d50 <SDTimerHandler+0x40>)
 8005d42:	701a      	strb	r2, [r3, #0]
}
 8005d44:	bf00      	nop
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr
 8005d4c:	2000069d 	.word	0x2000069d
 8005d50:	2000069e 	.word	0x2000069e

08005d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d58:	e7fe      	b.n	8005d58 <NMI_Handler+0x4>

08005d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d5e:	e7fe      	b.n	8005d5e <HardFault_Handler+0x4>

08005d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d64:	e7fe      	b.n	8005d64 <MemManage_Handler+0x4>

08005d66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d6a:	e7fe      	b.n	8005d6a <BusFault_Handler+0x4>

08005d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d70:	e7fe      	b.n	8005d70 <UsageFault_Handler+0x4>

08005d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d72:	b480      	push	{r7}
 8005d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d76:	bf00      	nop
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr

08005d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d82:	bf00      	nop
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d8e:	bf00      	nop
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bc80      	pop	{r7}
 8005d94:	4770      	bx	lr
	...

08005d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <SysTick_Handler+0x30>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	3301      	adds	r3, #1
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <SysTick_Handler+0x30>)
 8005da8:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt >=10)
 8005daa:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <SysTick_Handler+0x30>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b09      	cmp	r3, #9
 8005db2:	d904      	bls.n	8005dbe <SysTick_Handler+0x26>
		{
			FatFsCnt = 0;
 8005db4:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <SysTick_Handler+0x30>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
			SDTimerHandler();
 8005dba:	f7ff ffa9 	bl	8005d10 <SDTimerHandler>
		}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005dbe:	f000 f8ef 	bl	8005fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005dc2:	bf00      	nop
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	2000069c 	.word	0x2000069c

08005dcc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_MENU_Pin);
 8005dd0:	2010      	movs	r0, #16
 8005dd2:	f000 fe87 	bl	8006ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005dd6:	bf00      	nop
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005de0:	4802      	ldr	r0, [pc, #8]	; (8005dec <DMA1_Channel6_IRQHandler+0x10>)
 8005de2:	f000 fb95 	bl	8006510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005de6:	bf00      	nop
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20000630 	.word	0x20000630

08005df0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_AVANCA_Pin);
 8005df4:	2020      	movs	r0, #32
 8005df6:	f000 fe75 	bl	8006ae4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_SELECT_Pin);
 8005dfa:	2040      	movs	r0, #64	; 0x40
 8005dfc:	f000 fe72 	bl	8006ae4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_STOP_Pin);
 8005e00:	2080      	movs	r0, #128	; 0x80
 8005e02:	f000 fe6f 	bl	8006ae4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_INSERT_Pin);
 8005e06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005e0a:	f000 fe6b 	bl	8006ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005e0e:	bf00      	nop
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005e18:	4802      	ldr	r0, [pc, #8]	; (8005e24 <TIM2_IRQHandler+0x10>)
 8005e1a:	f002 f972 	bl	8008102 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	2000055c 	.word	0x2000055c

08005e28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005e2c:	4802      	ldr	r0, [pc, #8]	; (8005e38 <TIM3_IRQHandler+0x10>)
 8005e2e:	f002 f968 	bl	8008102 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005e32:	bf00      	nop
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	200005a4 	.word	0x200005a4

08005e3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005e40:	4802      	ldr	r0, [pc, #8]	; (8005e4c <USART2_IRQHandler+0x10>)
 8005e42:	f002 fdff 	bl	8008a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005e46:	bf00      	nop
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200005ec 	.word	0x200005ec

08005e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e58:	4a14      	ldr	r2, [pc, #80]	; (8005eac <_sbrk+0x5c>)
 8005e5a:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <_sbrk+0x60>)
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e64:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <_sbrk+0x64>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e6c:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <_sbrk+0x64>)
 8005e6e:	4a12      	ldr	r2, [pc, #72]	; (8005eb8 <_sbrk+0x68>)
 8005e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <_sbrk+0x64>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4413      	add	r3, r2
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d207      	bcs.n	8005e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e80:	f003 fbc6 	bl	8009610 <__errno>
 8005e84:	4603      	mov	r3, r0
 8005e86:	220c      	movs	r2, #12
 8005e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8e:	e009      	b.n	8005ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e90:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <_sbrk+0x64>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e96:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <_sbrk+0x64>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	4a05      	ldr	r2, [pc, #20]	; (8005eb4 <_sbrk+0x64>)
 8005ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20005000 	.word	0x20005000
 8005eb0:	00000400 	.word	0x00000400
 8005eb4:	200006a4 	.word	0x200006a4
 8005eb8:	200006f8 	.word	0x200006f8

08005ebc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ec0:	bf00      	nop
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr

08005ec8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ec8:	480c      	ldr	r0, [pc, #48]	; (8005efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005eca:	490d      	ldr	r1, [pc, #52]	; (8005f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005ecc:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ed0:	e002      	b.n	8005ed8 <LoopCopyDataInit>

08005ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ed6:	3304      	adds	r3, #4

08005ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005edc:	d3f9      	bcc.n	8005ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ede:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005ee0:	4c0a      	ldr	r4, [pc, #40]	; (8005f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ee4:	e001      	b.n	8005eea <LoopFillZerobss>

08005ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ee8:	3204      	adds	r2, #4

08005eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005eec:	d3fb      	bcc.n	8005ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005eee:	f7ff ffe5 	bl	8005ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ef2:	f003 fb93 	bl	800961c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005ef6:	f7ff f90f 	bl	8005118 <main>
  bx lr
 8005efa:	4770      	bx	lr
  ldr r0, =_sdata
 8005efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f00:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8005f04:	0800c330 	.word	0x0800c330
  ldr r2, =_sbss
 8005f08:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8005f0c:	200006f4 	.word	0x200006f4

08005f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005f10:	e7fe      	b.n	8005f10 <ADC1_2_IRQHandler>
	...

08005f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f18:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <HAL_Init+0x28>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a07      	ldr	r2, [pc, #28]	; (8005f3c <HAL_Init+0x28>)
 8005f1e:	f043 0310 	orr.w	r3, r3, #16
 8005f22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f24:	2003      	movs	r0, #3
 8005f26:	f000 f947 	bl	80061b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f2a:	200f      	movs	r0, #15
 8005f2c:	f000 f808 	bl	8005f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f30:	f7ff fd8c 	bl	8005a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40022000 	.word	0x40022000

08005f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f48:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <HAL_InitTick+0x54>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <HAL_InitTick+0x58>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	4619      	mov	r1, r3
 8005f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f95f 	bl	8006222 <HAL_SYSTICK_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e00e      	b.n	8005f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b0f      	cmp	r3, #15
 8005f72:	d80a      	bhi.n	8005f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f74:	2200      	movs	r2, #0
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7c:	f000 f927 	bl	80061ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f80:	4a06      	ldr	r2, [pc, #24]	; (8005f9c <HAL_InitTick+0x5c>)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e000      	b.n	8005f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	200000e8 	.word	0x200000e8
 8005f98:	200000f0 	.word	0x200000f0
 8005f9c:	200000ec 	.word	0x200000ec

08005fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fa4:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <HAL_IncTick+0x1c>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <HAL_IncTick+0x20>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4413      	add	r3, r2
 8005fb0:	4a03      	ldr	r2, [pc, #12]	; (8005fc0 <HAL_IncTick+0x20>)
 8005fb2:	6013      	str	r3, [r2, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr
 8005fbc:	200000f0 	.word	0x200000f0
 8005fc0:	200006a8 	.word	0x200006a8

08005fc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8005fc8:	4b02      	ldr	r3, [pc, #8]	; (8005fd4 <HAL_GetTick+0x10>)
 8005fca:	681b      	ldr	r3, [r3, #0]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr
 8005fd4:	200006a8 	.word	0x200006a8

08005fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fe0:	f7ff fff0 	bl	8005fc4 <HAL_GetTick>
 8005fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d005      	beq.n	8005ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	; (800601c <HAL_Delay+0x44>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ffe:	bf00      	nop
 8006000:	f7ff ffe0 	bl	8005fc4 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	429a      	cmp	r2, r3
 800600e:	d8f7      	bhi.n	8006000 <HAL_Delay+0x28>
  {
  }
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	200000f0 	.word	0x200000f0

08006020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006030:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <__NVIC_SetPriorityGrouping+0x44>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800603c:	4013      	ands	r3, r2
 800603e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800604c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006052:	4a04      	ldr	r2, [pc, #16]	; (8006064 <__NVIC_SetPriorityGrouping+0x44>)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	60d3      	str	r3, [r2, #12]
}
 8006058:	bf00      	nop
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	e000ed00 	.word	0xe000ed00

08006068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800606c:	4b04      	ldr	r3, [pc, #16]	; (8006080 <__NVIC_GetPriorityGrouping+0x18>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	0a1b      	lsrs	r3, r3, #8
 8006072:	f003 0307 	and.w	r3, r3, #7
}
 8006076:	4618      	mov	r0, r3
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	e000ed00 	.word	0xe000ed00

08006084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800608e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006092:	2b00      	cmp	r3, #0
 8006094:	db0b      	blt.n	80060ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006096:	79fb      	ldrb	r3, [r7, #7]
 8006098:	f003 021f 	and.w	r2, r3, #31
 800609c:	4906      	ldr	r1, [pc, #24]	; (80060b8 <__NVIC_EnableIRQ+0x34>)
 800609e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	2001      	movs	r0, #1
 80060a6:	fa00 f202 	lsl.w	r2, r0, r2
 80060aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr
 80060b8:	e000e100 	.word	0xe000e100

080060bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	4603      	mov	r3, r0
 80060c4:	6039      	str	r1, [r7, #0]
 80060c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	db0a      	blt.n	80060e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	490c      	ldr	r1, [pc, #48]	; (8006108 <__NVIC_SetPriority+0x4c>)
 80060d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060da:	0112      	lsls	r2, r2, #4
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	440b      	add	r3, r1
 80060e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060e4:	e00a      	b.n	80060fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	4908      	ldr	r1, [pc, #32]	; (800610c <__NVIC_SetPriority+0x50>)
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	3b04      	subs	r3, #4
 80060f4:	0112      	lsls	r2, r2, #4
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	440b      	add	r3, r1
 80060fa:	761a      	strb	r2, [r3, #24]
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	e000e100 	.word	0xe000e100
 800610c:	e000ed00 	.word	0xe000ed00

08006110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006110:	b480      	push	{r7}
 8006112:	b089      	sub	sp, #36	; 0x24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f1c3 0307 	rsb	r3, r3, #7
 800612a:	2b04      	cmp	r3, #4
 800612c:	bf28      	it	cs
 800612e:	2304      	movcs	r3, #4
 8006130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	3304      	adds	r3, #4
 8006136:	2b06      	cmp	r3, #6
 8006138:	d902      	bls.n	8006140 <NVIC_EncodePriority+0x30>
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	3b03      	subs	r3, #3
 800613e:	e000      	b.n	8006142 <NVIC_EncodePriority+0x32>
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006144:	f04f 32ff 	mov.w	r2, #4294967295
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	43da      	mvns	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	401a      	ands	r2, r3
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006158:	f04f 31ff 	mov.w	r1, #4294967295
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	fa01 f303 	lsl.w	r3, r1, r3
 8006162:	43d9      	mvns	r1, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006168:	4313      	orrs	r3, r2
         );
}
 800616a:	4618      	mov	r0, r3
 800616c:	3724      	adds	r7, #36	; 0x24
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr

08006174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3b01      	subs	r3, #1
 8006180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006184:	d301      	bcc.n	800618a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006186:	2301      	movs	r3, #1
 8006188:	e00f      	b.n	80061aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800618a:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <SysTick_Config+0x40>)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3b01      	subs	r3, #1
 8006190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006192:	210f      	movs	r1, #15
 8006194:	f04f 30ff 	mov.w	r0, #4294967295
 8006198:	f7ff ff90 	bl	80060bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <SysTick_Config+0x40>)
 800619e:	2200      	movs	r2, #0
 80061a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061a2:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <SysTick_Config+0x40>)
 80061a4:	2207      	movs	r2, #7
 80061a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	e000e010 	.word	0xe000e010

080061b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff ff2d 	bl	8006020 <__NVIC_SetPriorityGrouping>
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	4603      	mov	r3, r0
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
 80061da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061dc:	2300      	movs	r3, #0
 80061de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061e0:	f7ff ff42 	bl	8006068 <__NVIC_GetPriorityGrouping>
 80061e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	6978      	ldr	r0, [r7, #20]
 80061ec:	f7ff ff90 	bl	8006110 <NVIC_EncodePriority>
 80061f0:	4602      	mov	r2, r0
 80061f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f6:	4611      	mov	r1, r2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff ff5f 	bl	80060bc <__NVIC_SetPriority>
}
 80061fe:	bf00      	nop
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	4603      	mov	r3, r0
 800620e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff ff35 	bl	8006084 <__NVIC_EnableIRQ>
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff ffa2 	bl	8006174 <SysTick_Config>
 8006230:	4603      	mov	r3, r0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e043      	b.n	80062da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	4b22      	ldr	r3, [pc, #136]	; (80062e4 <HAL_DMA_Init+0xa8>)
 800625a:	4413      	add	r3, r2
 800625c:	4a22      	ldr	r2, [pc, #136]	; (80062e8 <HAL_DMA_Init+0xac>)
 800625e:	fba2 2303 	umull	r2, r3, r2, r3
 8006262:	091b      	lsrs	r3, r3, #4
 8006264:	009a      	lsls	r2, r3, #2
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a1f      	ldr	r2, [pc, #124]	; (80062ec <HAL_DMA_Init+0xb0>)
 800626e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006286:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800628a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006294:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr
 80062e4:	bffdfff8 	.word	0xbffdfff8
 80062e8:	cccccccd 	.word	0xcccccccd
 80062ec:	40020000 	.word	0x40020000

080062f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_DMA_Start_IT+0x20>
 800630c:	2302      	movs	r3, #2
 800630e:	e04a      	b.n	80063a6 <HAL_DMA_Start_IT+0xb6>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800631e:	2b01      	cmp	r3, #1
 8006320:	d13a      	bne.n	8006398 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2202      	movs	r2, #2
 8006326:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0201 	bic.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 f9e8 	bl	800671c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 020e 	orr.w	r2, r2, #14
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	e00f      	b.n	8006386 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0204 	bic.w	r2, r2, #4
 8006374:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f042 020a 	orr.w	r2, r2, #10
 8006384:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f042 0201 	orr.w	r2, r2, #1
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	e005      	b.n	80063a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
 80063a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b085      	sub	sp, #20
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d008      	beq.n	80063d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2204      	movs	r2, #4
 80063c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e020      	b.n	8006418 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 020e 	bic.w	r2, r2, #14
 80063e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0201 	bic.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	2101      	movs	r1, #1
 8006400:	fa01 f202 	lsl.w	r2, r1, r2
 8006404:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006416:	7bfb      	ldrb	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	bc80      	pop	{r7}
 8006420:	4770      	bx	lr
	...

08006424 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006436:	2b02      	cmp	r3, #2
 8006438:	d005      	beq.n	8006446 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2204      	movs	r2, #4
 800643e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	73fb      	strb	r3, [r7, #15]
 8006444:	e051      	b.n	80064ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 020e 	bic.w	r2, r2, #14
 8006454:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0201 	bic.w	r2, r2, #1
 8006464:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a22      	ldr	r2, [pc, #136]	; (80064f4 <HAL_DMA_Abort_IT+0xd0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d029      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xa0>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a20      	ldr	r2, [pc, #128]	; (80064f8 <HAL_DMA_Abort_IT+0xd4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d022      	beq.n	80064c0 <HAL_DMA_Abort_IT+0x9c>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1f      	ldr	r2, [pc, #124]	; (80064fc <HAL_DMA_Abort_IT+0xd8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d01a      	beq.n	80064ba <HAL_DMA_Abort_IT+0x96>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1d      	ldr	r2, [pc, #116]	; (8006500 <HAL_DMA_Abort_IT+0xdc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d012      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x90>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1c      	ldr	r2, [pc, #112]	; (8006504 <HAL_DMA_Abort_IT+0xe0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00a      	beq.n	80064ae <HAL_DMA_Abort_IT+0x8a>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a1a      	ldr	r2, [pc, #104]	; (8006508 <HAL_DMA_Abort_IT+0xe4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d102      	bne.n	80064a8 <HAL_DMA_Abort_IT+0x84>
 80064a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80064a6:	e00e      	b.n	80064c6 <HAL_DMA_Abort_IT+0xa2>
 80064a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064ac:	e00b      	b.n	80064c6 <HAL_DMA_Abort_IT+0xa2>
 80064ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80064b2:	e008      	b.n	80064c6 <HAL_DMA_Abort_IT+0xa2>
 80064b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064b8:	e005      	b.n	80064c6 <HAL_DMA_Abort_IT+0xa2>
 80064ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064be:	e002      	b.n	80064c6 <HAL_DMA_Abort_IT+0xa2>
 80064c0:	2310      	movs	r3, #16
 80064c2:	e000      	b.n	80064c6 <HAL_DMA_Abort_IT+0xa2>
 80064c4:	2301      	movs	r3, #1
 80064c6:	4a11      	ldr	r2, [pc, #68]	; (800650c <HAL_DMA_Abort_IT+0xe8>)
 80064c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
    } 
  }
  return status;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	40020008 	.word	0x40020008
 80064f8:	4002001c 	.word	0x4002001c
 80064fc:	40020030 	.word	0x40020030
 8006500:	40020044 	.word	0x40020044
 8006504:	40020058 	.word	0x40020058
 8006508:	4002006c 	.word	0x4002006c
 800650c:	40020000 	.word	0x40020000

08006510 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652c:	2204      	movs	r2, #4
 800652e:	409a      	lsls	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4013      	ands	r3, r2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d04f      	beq.n	80065d8 <HAL_DMA_IRQHandler+0xc8>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	2b00      	cmp	r3, #0
 8006540:	d04a      	beq.n	80065d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b00      	cmp	r3, #0
 800654e:	d107      	bne.n	8006560 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0204 	bic.w	r2, r2, #4
 800655e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a66      	ldr	r2, [pc, #408]	; (8006700 <HAL_DMA_IRQHandler+0x1f0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d029      	beq.n	80065be <HAL_DMA_IRQHandler+0xae>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a65      	ldr	r2, [pc, #404]	; (8006704 <HAL_DMA_IRQHandler+0x1f4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d022      	beq.n	80065ba <HAL_DMA_IRQHandler+0xaa>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a63      	ldr	r2, [pc, #396]	; (8006708 <HAL_DMA_IRQHandler+0x1f8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01a      	beq.n	80065b4 <HAL_DMA_IRQHandler+0xa4>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a62      	ldr	r2, [pc, #392]	; (800670c <HAL_DMA_IRQHandler+0x1fc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d012      	beq.n	80065ae <HAL_DMA_IRQHandler+0x9e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a60      	ldr	r2, [pc, #384]	; (8006710 <HAL_DMA_IRQHandler+0x200>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00a      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x98>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a5f      	ldr	r2, [pc, #380]	; (8006714 <HAL_DMA_IRQHandler+0x204>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d102      	bne.n	80065a2 <HAL_DMA_IRQHandler+0x92>
 800659c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80065a0:	e00e      	b.n	80065c0 <HAL_DMA_IRQHandler+0xb0>
 80065a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80065a6:	e00b      	b.n	80065c0 <HAL_DMA_IRQHandler+0xb0>
 80065a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80065ac:	e008      	b.n	80065c0 <HAL_DMA_IRQHandler+0xb0>
 80065ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065b2:	e005      	b.n	80065c0 <HAL_DMA_IRQHandler+0xb0>
 80065b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065b8:	e002      	b.n	80065c0 <HAL_DMA_IRQHandler+0xb0>
 80065ba:	2340      	movs	r3, #64	; 0x40
 80065bc:	e000      	b.n	80065c0 <HAL_DMA_IRQHandler+0xb0>
 80065be:	2304      	movs	r3, #4
 80065c0:	4a55      	ldr	r2, [pc, #340]	; (8006718 <HAL_DMA_IRQHandler+0x208>)
 80065c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8094 	beq.w	80066f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80065d6:	e08e      	b.n	80066f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065dc:	2202      	movs	r2, #2
 80065de:	409a      	lsls	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d056      	beq.n	8006696 <HAL_DMA_IRQHandler+0x186>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d051      	beq.n	8006696 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10b      	bne.n	8006618 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 020a 	bic.w	r2, r2, #10
 800660e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a38      	ldr	r2, [pc, #224]	; (8006700 <HAL_DMA_IRQHandler+0x1f0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d029      	beq.n	8006676 <HAL_DMA_IRQHandler+0x166>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a37      	ldr	r2, [pc, #220]	; (8006704 <HAL_DMA_IRQHandler+0x1f4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d022      	beq.n	8006672 <HAL_DMA_IRQHandler+0x162>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a35      	ldr	r2, [pc, #212]	; (8006708 <HAL_DMA_IRQHandler+0x1f8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d01a      	beq.n	800666c <HAL_DMA_IRQHandler+0x15c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a34      	ldr	r2, [pc, #208]	; (800670c <HAL_DMA_IRQHandler+0x1fc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d012      	beq.n	8006666 <HAL_DMA_IRQHandler+0x156>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a32      	ldr	r2, [pc, #200]	; (8006710 <HAL_DMA_IRQHandler+0x200>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00a      	beq.n	8006660 <HAL_DMA_IRQHandler+0x150>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a31      	ldr	r2, [pc, #196]	; (8006714 <HAL_DMA_IRQHandler+0x204>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d102      	bne.n	800665a <HAL_DMA_IRQHandler+0x14a>
 8006654:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006658:	e00e      	b.n	8006678 <HAL_DMA_IRQHandler+0x168>
 800665a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800665e:	e00b      	b.n	8006678 <HAL_DMA_IRQHandler+0x168>
 8006660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006664:	e008      	b.n	8006678 <HAL_DMA_IRQHandler+0x168>
 8006666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800666a:	e005      	b.n	8006678 <HAL_DMA_IRQHandler+0x168>
 800666c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006670:	e002      	b.n	8006678 <HAL_DMA_IRQHandler+0x168>
 8006672:	2320      	movs	r3, #32
 8006674:	e000      	b.n	8006678 <HAL_DMA_IRQHandler+0x168>
 8006676:	2302      	movs	r3, #2
 8006678:	4a27      	ldr	r2, [pc, #156]	; (8006718 <HAL_DMA_IRQHandler+0x208>)
 800667a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	2b00      	cmp	r3, #0
 800668a:	d034      	beq.n	80066f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006694:	e02f      	b.n	80066f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	2208      	movs	r2, #8
 800669c:	409a      	lsls	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4013      	ands	r3, r2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d028      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x1e8>
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f003 0308 	and.w	r3, r3, #8
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d023      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 020e 	bic.w	r2, r2, #14
 80066be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c8:	2101      	movs	r1, #1
 80066ca:	fa01 f202 	lsl.w	r2, r1, r2
 80066ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
    }
  }
  return;
 80066f6:	bf00      	nop
 80066f8:	bf00      	nop
}
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40020008 	.word	0x40020008
 8006704:	4002001c 	.word	0x4002001c
 8006708:	40020030 	.word	0x40020030
 800670c:	40020044 	.word	0x40020044
 8006710:	40020058 	.word	0x40020058
 8006714:	4002006c 	.word	0x4002006c
 8006718:	40020000 	.word	0x40020000

0800671c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006732:	2101      	movs	r1, #1
 8006734:	fa01 f202 	lsl.w	r2, r1, r2
 8006738:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2b10      	cmp	r3, #16
 8006748:	d108      	bne.n	800675c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800675a:	e007      	b.n	800676c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	60da      	str	r2, [r3, #12]
}
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr
	...

08006778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006778:	b480      	push	{r7}
 800677a:	b08b      	sub	sp, #44	; 0x2c
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006782:	2300      	movs	r3, #0
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006786:	2300      	movs	r3, #0
 8006788:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800678a:	e169      	b.n	8006a60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800678c:	2201      	movs	r2, #1
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	4013      	ands	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	f040 8158 	bne.w	8006a5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	4a9a      	ldr	r2, [pc, #616]	; (8006a18 <HAL_GPIO_Init+0x2a0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d05e      	beq.n	8006872 <HAL_GPIO_Init+0xfa>
 80067b4:	4a98      	ldr	r2, [pc, #608]	; (8006a18 <HAL_GPIO_Init+0x2a0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d875      	bhi.n	80068a6 <HAL_GPIO_Init+0x12e>
 80067ba:	4a98      	ldr	r2, [pc, #608]	; (8006a1c <HAL_GPIO_Init+0x2a4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d058      	beq.n	8006872 <HAL_GPIO_Init+0xfa>
 80067c0:	4a96      	ldr	r2, [pc, #600]	; (8006a1c <HAL_GPIO_Init+0x2a4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d86f      	bhi.n	80068a6 <HAL_GPIO_Init+0x12e>
 80067c6:	4a96      	ldr	r2, [pc, #600]	; (8006a20 <HAL_GPIO_Init+0x2a8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d052      	beq.n	8006872 <HAL_GPIO_Init+0xfa>
 80067cc:	4a94      	ldr	r2, [pc, #592]	; (8006a20 <HAL_GPIO_Init+0x2a8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d869      	bhi.n	80068a6 <HAL_GPIO_Init+0x12e>
 80067d2:	4a94      	ldr	r2, [pc, #592]	; (8006a24 <HAL_GPIO_Init+0x2ac>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d04c      	beq.n	8006872 <HAL_GPIO_Init+0xfa>
 80067d8:	4a92      	ldr	r2, [pc, #584]	; (8006a24 <HAL_GPIO_Init+0x2ac>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d863      	bhi.n	80068a6 <HAL_GPIO_Init+0x12e>
 80067de:	4a92      	ldr	r2, [pc, #584]	; (8006a28 <HAL_GPIO_Init+0x2b0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d046      	beq.n	8006872 <HAL_GPIO_Init+0xfa>
 80067e4:	4a90      	ldr	r2, [pc, #576]	; (8006a28 <HAL_GPIO_Init+0x2b0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d85d      	bhi.n	80068a6 <HAL_GPIO_Init+0x12e>
 80067ea:	2b12      	cmp	r3, #18
 80067ec:	d82a      	bhi.n	8006844 <HAL_GPIO_Init+0xcc>
 80067ee:	2b12      	cmp	r3, #18
 80067f0:	d859      	bhi.n	80068a6 <HAL_GPIO_Init+0x12e>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <HAL_GPIO_Init+0x80>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	08006873 	.word	0x08006873
 80067fc:	0800684d 	.word	0x0800684d
 8006800:	0800685f 	.word	0x0800685f
 8006804:	080068a1 	.word	0x080068a1
 8006808:	080068a7 	.word	0x080068a7
 800680c:	080068a7 	.word	0x080068a7
 8006810:	080068a7 	.word	0x080068a7
 8006814:	080068a7 	.word	0x080068a7
 8006818:	080068a7 	.word	0x080068a7
 800681c:	080068a7 	.word	0x080068a7
 8006820:	080068a7 	.word	0x080068a7
 8006824:	080068a7 	.word	0x080068a7
 8006828:	080068a7 	.word	0x080068a7
 800682c:	080068a7 	.word	0x080068a7
 8006830:	080068a7 	.word	0x080068a7
 8006834:	080068a7 	.word	0x080068a7
 8006838:	080068a7 	.word	0x080068a7
 800683c:	08006855 	.word	0x08006855
 8006840:	08006869 	.word	0x08006869
 8006844:	4a79      	ldr	r2, [pc, #484]	; (8006a2c <HAL_GPIO_Init+0x2b4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d013      	beq.n	8006872 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800684a:	e02c      	b.n	80068a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	623b      	str	r3, [r7, #32]
          break;
 8006852:	e029      	b.n	80068a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	3304      	adds	r3, #4
 800685a:	623b      	str	r3, [r7, #32]
          break;
 800685c:	e024      	b.n	80068a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	3308      	adds	r3, #8
 8006864:	623b      	str	r3, [r7, #32]
          break;
 8006866:	e01f      	b.n	80068a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	330c      	adds	r3, #12
 800686e:	623b      	str	r3, [r7, #32]
          break;
 8006870:	e01a      	b.n	80068a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800687a:	2304      	movs	r3, #4
 800687c:	623b      	str	r3, [r7, #32]
          break;
 800687e:	e013      	b.n	80068a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d105      	bne.n	8006894 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006888:	2308      	movs	r3, #8
 800688a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	611a      	str	r2, [r3, #16]
          break;
 8006892:	e009      	b.n	80068a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006894:	2308      	movs	r3, #8
 8006896:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	615a      	str	r2, [r3, #20]
          break;
 800689e:	e003      	b.n	80068a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80068a0:	2300      	movs	r3, #0
 80068a2:	623b      	str	r3, [r7, #32]
          break;
 80068a4:	e000      	b.n	80068a8 <HAL_GPIO_Init+0x130>
          break;
 80068a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2bff      	cmp	r3, #255	; 0xff
 80068ac:	d801      	bhi.n	80068b2 <HAL_GPIO_Init+0x13a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	e001      	b.n	80068b6 <HAL_GPIO_Init+0x13e>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3304      	adds	r3, #4
 80068b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	2bff      	cmp	r3, #255	; 0xff
 80068bc:	d802      	bhi.n	80068c4 <HAL_GPIO_Init+0x14c>
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	e002      	b.n	80068ca <HAL_GPIO_Init+0x152>
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	3b08      	subs	r3, #8
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	210f      	movs	r1, #15
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	fa01 f303 	lsl.w	r3, r1, r3
 80068d8:	43db      	mvns	r3, r3
 80068da:	401a      	ands	r2, r3
 80068dc:	6a39      	ldr	r1, [r7, #32]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	fa01 f303 	lsl.w	r3, r1, r3
 80068e4:	431a      	orrs	r2, r3
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 80b1 	beq.w	8006a5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80068f8:	4b4d      	ldr	r3, [pc, #308]	; (8006a30 <HAL_GPIO_Init+0x2b8>)
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	4a4c      	ldr	r2, [pc, #304]	; (8006a30 <HAL_GPIO_Init+0x2b8>)
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	6193      	str	r3, [r2, #24]
 8006904:	4b4a      	ldr	r3, [pc, #296]	; (8006a30 <HAL_GPIO_Init+0x2b8>)
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006910:	4a48      	ldr	r2, [pc, #288]	; (8006a34 <HAL_GPIO_Init+0x2bc>)
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	089b      	lsrs	r3, r3, #2
 8006916:	3302      	adds	r3, #2
 8006918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800691c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	f003 0303 	and.w	r3, r3, #3
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	220f      	movs	r2, #15
 8006928:	fa02 f303 	lsl.w	r3, r2, r3
 800692c:	43db      	mvns	r3, r3
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4013      	ands	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a40      	ldr	r2, [pc, #256]	; (8006a38 <HAL_GPIO_Init+0x2c0>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d013      	beq.n	8006964 <HAL_GPIO_Init+0x1ec>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a3f      	ldr	r2, [pc, #252]	; (8006a3c <HAL_GPIO_Init+0x2c4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00d      	beq.n	8006960 <HAL_GPIO_Init+0x1e8>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a3e      	ldr	r2, [pc, #248]	; (8006a40 <HAL_GPIO_Init+0x2c8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d007      	beq.n	800695c <HAL_GPIO_Init+0x1e4>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a3d      	ldr	r2, [pc, #244]	; (8006a44 <HAL_GPIO_Init+0x2cc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d101      	bne.n	8006958 <HAL_GPIO_Init+0x1e0>
 8006954:	2303      	movs	r3, #3
 8006956:	e006      	b.n	8006966 <HAL_GPIO_Init+0x1ee>
 8006958:	2304      	movs	r3, #4
 800695a:	e004      	b.n	8006966 <HAL_GPIO_Init+0x1ee>
 800695c:	2302      	movs	r3, #2
 800695e:	e002      	b.n	8006966 <HAL_GPIO_Init+0x1ee>
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <HAL_GPIO_Init+0x1ee>
 8006964:	2300      	movs	r3, #0
 8006966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006968:	f002 0203 	and.w	r2, r2, #3
 800696c:	0092      	lsls	r2, r2, #2
 800696e:	4093      	lsls	r3, r2
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006976:	492f      	ldr	r1, [pc, #188]	; (8006a34 <HAL_GPIO_Init+0x2bc>)
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	089b      	lsrs	r3, r3, #2
 800697c:	3302      	adds	r3, #2
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d006      	beq.n	800699e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006990:	4b2d      	ldr	r3, [pc, #180]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	492c      	ldr	r1, [pc, #176]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	4313      	orrs	r3, r2
 800699a:	600b      	str	r3, [r1, #0]
 800699c:	e006      	b.n	80069ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800699e:	4b2a      	ldr	r3, [pc, #168]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	43db      	mvns	r3, r3
 80069a6:	4928      	ldr	r1, [pc, #160]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d006      	beq.n	80069c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80069b8:	4b23      	ldr	r3, [pc, #140]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	4922      	ldr	r1, [pc, #136]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	604b      	str	r3, [r1, #4]
 80069c4:	e006      	b.n	80069d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80069c6:	4b20      	ldr	r3, [pc, #128]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	43db      	mvns	r3, r3
 80069ce:	491e      	ldr	r1, [pc, #120]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d006      	beq.n	80069ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80069e0:	4b19      	ldr	r3, [pc, #100]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	4918      	ldr	r1, [pc, #96]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	608b      	str	r3, [r1, #8]
 80069ec:	e006      	b.n	80069fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80069ee:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	43db      	mvns	r3, r3
 80069f6:	4914      	ldr	r1, [pc, #80]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d021      	beq.n	8006a4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	490e      	ldr	r1, [pc, #56]	; (8006a48 <HAL_GPIO_Init+0x2d0>)
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60cb      	str	r3, [r1, #12]
 8006a14:	e021      	b.n	8006a5a <HAL_GPIO_Init+0x2e2>
 8006a16:	bf00      	nop
 8006a18:	10320000 	.word	0x10320000
 8006a1c:	10310000 	.word	0x10310000
 8006a20:	10220000 	.word	0x10220000
 8006a24:	10210000 	.word	0x10210000
 8006a28:	10120000 	.word	0x10120000
 8006a2c:	10110000 	.word	0x10110000
 8006a30:	40021000 	.word	0x40021000
 8006a34:	40010000 	.word	0x40010000
 8006a38:	40010800 	.word	0x40010800
 8006a3c:	40010c00 	.word	0x40010c00
 8006a40:	40011000 	.word	0x40011000
 8006a44:	40011400 	.word	0x40011400
 8006a48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <HAL_GPIO_Init+0x304>)
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	43db      	mvns	r3, r3
 8006a54:	4909      	ldr	r1, [pc, #36]	; (8006a7c <HAL_GPIO_Init+0x304>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f47f ae8e 	bne.w	800678c <HAL_GPIO_Init+0x14>
  }
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop
 8006a74:	372c      	adds	r7, #44	; 0x2c
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr
 8006a7c:	40010400 	.word	0x40010400

08006a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	807b      	strh	r3, [r7, #2]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a90:	787b      	ldrb	r3, [r7, #1]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a96:	887a      	ldrh	r2, [r7, #2]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006a9c:	e003      	b.n	8006aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006a9e:	887b      	ldrh	r3, [r7, #2]
 8006aa0:	041a      	lsls	r2, r3, #16
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	611a      	str	r2, [r3, #16]
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ac2:	887a      	ldrh	r2, [r7, #2]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	041a      	lsls	r2, r3, #16
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	43d9      	mvns	r1, r3
 8006ace:	887b      	ldrh	r3, [r7, #2]
 8006ad0:	400b      	ands	r3, r1
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	611a      	str	r2, [r3, #16]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr
	...

08006ae4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006aee:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006af0:	695a      	ldr	r2, [r3, #20]
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	4013      	ands	r3, r2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d006      	beq.n	8006b08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006afa:	4a05      	ldr	r2, [pc, #20]	; (8006b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006afc:	88fb      	ldrh	r3, [r7, #6]
 8006afe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b00:	88fb      	ldrh	r3, [r7, #6]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe ff56 	bl	80059b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40010400 	.word	0x40010400

08006b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e272      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8087 	beq.w	8006c42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b34:	4b92      	ldr	r3, [pc, #584]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f003 030c 	and.w	r3, r3, #12
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d00c      	beq.n	8006b5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b40:	4b8f      	ldr	r3, [pc, #572]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f003 030c 	and.w	r3, r3, #12
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d112      	bne.n	8006b72 <HAL_RCC_OscConfig+0x5e>
 8006b4c:	4b8c      	ldr	r3, [pc, #560]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b58:	d10b      	bne.n	8006b72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b5a:	4b89      	ldr	r3, [pc, #548]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d06c      	beq.n	8006c40 <HAL_RCC_OscConfig+0x12c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d168      	bne.n	8006c40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e24c      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7a:	d106      	bne.n	8006b8a <HAL_RCC_OscConfig+0x76>
 8006b7c:	4b80      	ldr	r3, [pc, #512]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a7f      	ldr	r2, [pc, #508]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	e02e      	b.n	8006be8 <HAL_RCC_OscConfig+0xd4>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10c      	bne.n	8006bac <HAL_RCC_OscConfig+0x98>
 8006b92:	4b7b      	ldr	r3, [pc, #492]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a7a      	ldr	r2, [pc, #488]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	4b78      	ldr	r3, [pc, #480]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a77      	ldr	r2, [pc, #476]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e01d      	b.n	8006be8 <HAL_RCC_OscConfig+0xd4>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bb4:	d10c      	bne.n	8006bd0 <HAL_RCC_OscConfig+0xbc>
 8006bb6:	4b72      	ldr	r3, [pc, #456]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a71      	ldr	r2, [pc, #452]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	4b6f      	ldr	r3, [pc, #444]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a6e      	ldr	r2, [pc, #440]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	e00b      	b.n	8006be8 <HAL_RCC_OscConfig+0xd4>
 8006bd0:	4b6b      	ldr	r3, [pc, #428]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a6a      	ldr	r2, [pc, #424]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	4b68      	ldr	r3, [pc, #416]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a67      	ldr	r2, [pc, #412]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006be6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d013      	beq.n	8006c18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf0:	f7ff f9e8 	bl	8005fc4 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bf8:	f7ff f9e4 	bl	8005fc4 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b64      	cmp	r3, #100	; 0x64
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e200      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c0a:	4b5d      	ldr	r3, [pc, #372]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0xe4>
 8006c16:	e014      	b.n	8006c42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c18:	f7ff f9d4 	bl	8005fc4 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c20:	f7ff f9d0 	bl	8005fc4 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b64      	cmp	r3, #100	; 0x64
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e1ec      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c32:	4b53      	ldr	r3, [pc, #332]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f0      	bne.n	8006c20 <HAL_RCC_OscConfig+0x10c>
 8006c3e:	e000      	b.n	8006c42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d063      	beq.n	8006d16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c4e:	4b4c      	ldr	r3, [pc, #304]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f003 030c 	and.w	r3, r3, #12
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00b      	beq.n	8006c72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c5a:	4b49      	ldr	r3, [pc, #292]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f003 030c 	and.w	r3, r3, #12
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d11c      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x18c>
 8006c66:	4b46      	ldr	r3, [pc, #280]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d116      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c72:	4b43      	ldr	r3, [pc, #268]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d005      	beq.n	8006c8a <HAL_RCC_OscConfig+0x176>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d001      	beq.n	8006c8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e1c0      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8a:	4b3d      	ldr	r3, [pc, #244]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	4939      	ldr	r1, [pc, #228]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c9e:	e03a      	b.n	8006d16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d020      	beq.n	8006cea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ca8:	4b36      	ldr	r3, [pc, #216]	; (8006d84 <HAL_RCC_OscConfig+0x270>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cae:	f7ff f989 	bl	8005fc4 <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cb6:	f7ff f985 	bl	8005fc4 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e1a1      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc8:	4b2d      	ldr	r3, [pc, #180]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd4:	4b2a      	ldr	r3, [pc, #168]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	4927      	ldr	r1, [pc, #156]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	600b      	str	r3, [r1, #0]
 8006ce8:	e015      	b.n	8006d16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cea:	4b26      	ldr	r3, [pc, #152]	; (8006d84 <HAL_RCC_OscConfig+0x270>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf0:	f7ff f968 	bl	8005fc4 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cf8:	f7ff f964 	bl	8005fc4 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e180      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d0a:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f0      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d03a      	beq.n	8006d98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d019      	beq.n	8006d5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d2a:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <HAL_RCC_OscConfig+0x274>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d30:	f7ff f948 	bl	8005fc4 <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d38:	f7ff f944 	bl	8005fc4 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e160      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <HAL_RCC_OscConfig+0x26c>)
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0f0      	beq.n	8006d38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006d56:	2001      	movs	r0, #1
 8006d58:	f000 fad8 	bl	800730c <RCC_Delay>
 8006d5c:	e01c      	b.n	8006d98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d5e:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <HAL_RCC_OscConfig+0x274>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d64:	f7ff f92e 	bl	8005fc4 <HAL_GetTick>
 8006d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d6a:	e00f      	b.n	8006d8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d6c:	f7ff f92a 	bl	8005fc4 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d908      	bls.n	8006d8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e146      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
 8006d7e:	bf00      	nop
 8006d80:	40021000 	.word	0x40021000
 8006d84:	42420000 	.word	0x42420000
 8006d88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d8c:	4b92      	ldr	r3, [pc, #584]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e9      	bne.n	8006d6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 80a6 	beq.w	8006ef2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006da6:	2300      	movs	r3, #0
 8006da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006daa:	4b8b      	ldr	r3, [pc, #556]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10d      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006db6:	4b88      	ldr	r3, [pc, #544]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	4a87      	ldr	r2, [pc, #540]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc0:	61d3      	str	r3, [r2, #28]
 8006dc2:	4b85      	ldr	r3, [pc, #532]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dca:	60bb      	str	r3, [r7, #8]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd2:	4b82      	ldr	r3, [pc, #520]	; (8006fdc <HAL_RCC_OscConfig+0x4c8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d118      	bne.n	8006e10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dde:	4b7f      	ldr	r3, [pc, #508]	; (8006fdc <HAL_RCC_OscConfig+0x4c8>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a7e      	ldr	r2, [pc, #504]	; (8006fdc <HAL_RCC_OscConfig+0x4c8>)
 8006de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dea:	f7ff f8eb 	bl	8005fc4 <HAL_GetTick>
 8006dee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df0:	e008      	b.n	8006e04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006df2:	f7ff f8e7 	bl	8005fc4 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b64      	cmp	r3, #100	; 0x64
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e103      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e04:	4b75      	ldr	r3, [pc, #468]	; (8006fdc <HAL_RCC_OscConfig+0x4c8>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0f0      	beq.n	8006df2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d106      	bne.n	8006e26 <HAL_RCC_OscConfig+0x312>
 8006e18:	4b6f      	ldr	r3, [pc, #444]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	4a6e      	ldr	r2, [pc, #440]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e1e:	f043 0301 	orr.w	r3, r3, #1
 8006e22:	6213      	str	r3, [r2, #32]
 8006e24:	e02d      	b.n	8006e82 <HAL_RCC_OscConfig+0x36e>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10c      	bne.n	8006e48 <HAL_RCC_OscConfig+0x334>
 8006e2e:	4b6a      	ldr	r3, [pc, #424]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	4a69      	ldr	r2, [pc, #420]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e34:	f023 0301 	bic.w	r3, r3, #1
 8006e38:	6213      	str	r3, [r2, #32]
 8006e3a:	4b67      	ldr	r3, [pc, #412]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	4a66      	ldr	r2, [pc, #408]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e40:	f023 0304 	bic.w	r3, r3, #4
 8006e44:	6213      	str	r3, [r2, #32]
 8006e46:	e01c      	b.n	8006e82 <HAL_RCC_OscConfig+0x36e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	2b05      	cmp	r3, #5
 8006e4e:	d10c      	bne.n	8006e6a <HAL_RCC_OscConfig+0x356>
 8006e50:	4b61      	ldr	r3, [pc, #388]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	4a60      	ldr	r2, [pc, #384]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e56:	f043 0304 	orr.w	r3, r3, #4
 8006e5a:	6213      	str	r3, [r2, #32]
 8006e5c:	4b5e      	ldr	r3, [pc, #376]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	4a5d      	ldr	r2, [pc, #372]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e62:	f043 0301 	orr.w	r3, r3, #1
 8006e66:	6213      	str	r3, [r2, #32]
 8006e68:	e00b      	b.n	8006e82 <HAL_RCC_OscConfig+0x36e>
 8006e6a:	4b5b      	ldr	r3, [pc, #364]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	4a5a      	ldr	r2, [pc, #360]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e70:	f023 0301 	bic.w	r3, r3, #1
 8006e74:	6213      	str	r3, [r2, #32]
 8006e76:	4b58      	ldr	r3, [pc, #352]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	4a57      	ldr	r2, [pc, #348]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006e7c:	f023 0304 	bic.w	r3, r3, #4
 8006e80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d015      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e8a:	f7ff f89b 	bl	8005fc4 <HAL_GetTick>
 8006e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e90:	e00a      	b.n	8006ea8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e92:	f7ff f897 	bl	8005fc4 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e0b1      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea8:	4b4b      	ldr	r3, [pc, #300]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0ee      	beq.n	8006e92 <HAL_RCC_OscConfig+0x37e>
 8006eb4:	e014      	b.n	8006ee0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eb6:	f7ff f885 	bl	8005fc4 <HAL_GetTick>
 8006eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ebc:	e00a      	b.n	8006ed4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ebe:	f7ff f881 	bl	8005fc4 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e09b      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ed4:	4b40      	ldr	r3, [pc, #256]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1ee      	bne.n	8006ebe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d105      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ee6:	4b3c      	ldr	r3, [pc, #240]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	4a3b      	ldr	r2, [pc, #236]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ef0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 8087 	beq.w	800700a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006efc:	4b36      	ldr	r3, [pc, #216]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f003 030c 	and.w	r3, r3, #12
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d061      	beq.n	8006fcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d146      	bne.n	8006f9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f10:	4b33      	ldr	r3, [pc, #204]	; (8006fe0 <HAL_RCC_OscConfig+0x4cc>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f16:	f7ff f855 	bl	8005fc4 <HAL_GetTick>
 8006f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f1c:	e008      	b.n	8006f30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f1e:	f7ff f851 	bl	8005fc4 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e06d      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f30:	4b29      	ldr	r3, [pc, #164]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1f0      	bne.n	8006f1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f44:	d108      	bne.n	8006f58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f46:	4b24      	ldr	r3, [pc, #144]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	4921      	ldr	r1, [pc, #132]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f58:	4b1f      	ldr	r3, [pc, #124]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a19      	ldr	r1, [r3, #32]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	491b      	ldr	r1, [pc, #108]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f70:	4b1b      	ldr	r3, [pc, #108]	; (8006fe0 <HAL_RCC_OscConfig+0x4cc>)
 8006f72:	2201      	movs	r2, #1
 8006f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f76:	f7ff f825 	bl	8005fc4 <HAL_GetTick>
 8006f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f7c:	e008      	b.n	8006f90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f7e:	f7ff f821 	bl	8005fc4 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e03d      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f90:	4b11      	ldr	r3, [pc, #68]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0f0      	beq.n	8006f7e <HAL_RCC_OscConfig+0x46a>
 8006f9c:	e035      	b.n	800700a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f9e:	4b10      	ldr	r3, [pc, #64]	; (8006fe0 <HAL_RCC_OscConfig+0x4cc>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa4:	f7ff f80e 	bl	8005fc4 <HAL_GetTick>
 8006fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006faa:	e008      	b.n	8006fbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fac:	f7ff f80a 	bl	8005fc4 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e026      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fbe:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <HAL_RCC_OscConfig+0x4c4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1f0      	bne.n	8006fac <HAL_RCC_OscConfig+0x498>
 8006fca:	e01e      	b.n	800700a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d107      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e019      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	40007000 	.word	0x40007000
 8006fe0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <HAL_RCC_OscConfig+0x500>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d106      	bne.n	8007006 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007002:	429a      	cmp	r2, r3
 8007004:	d001      	beq.n	800700a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	40021000 	.word	0x40021000

08007018 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e0d0      	b.n	80071ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800702c:	4b6a      	ldr	r3, [pc, #424]	; (80071d8 <HAL_RCC_ClockConfig+0x1c0>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d910      	bls.n	800705c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800703a:	4b67      	ldr	r3, [pc, #412]	; (80071d8 <HAL_RCC_ClockConfig+0x1c0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f023 0207 	bic.w	r2, r3, #7
 8007042:	4965      	ldr	r1, [pc, #404]	; (80071d8 <HAL_RCC_ClockConfig+0x1c0>)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	4313      	orrs	r3, r2
 8007048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800704a:	4b63      	ldr	r3, [pc, #396]	; (80071d8 <HAL_RCC_ClockConfig+0x1c0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d001      	beq.n	800705c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e0b8      	b.n	80071ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d020      	beq.n	80070aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0304 	and.w	r3, r3, #4
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007074:	4b59      	ldr	r3, [pc, #356]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	4a58      	ldr	r2, [pc, #352]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 800707a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800707e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800708c:	4b53      	ldr	r3, [pc, #332]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	4a52      	ldr	r2, [pc, #328]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 8007092:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007096:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007098:	4b50      	ldr	r3, [pc, #320]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	494d      	ldr	r1, [pc, #308]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d040      	beq.n	8007138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d107      	bne.n	80070ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070be:	4b47      	ldr	r3, [pc, #284]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d115      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e07f      	b.n	80071ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d107      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070d6:	4b41      	ldr	r3, [pc, #260]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d109      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e073      	b.n	80071ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e6:	4b3d      	ldr	r3, [pc, #244]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e06b      	b.n	80071ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070f6:	4b39      	ldr	r3, [pc, #228]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f023 0203 	bic.w	r2, r3, #3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	4936      	ldr	r1, [pc, #216]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 8007104:	4313      	orrs	r3, r2
 8007106:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007108:	f7fe ff5c 	bl	8005fc4 <HAL_GetTick>
 800710c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710e:	e00a      	b.n	8007126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007110:	f7fe ff58 	bl	8005fc4 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	f241 3288 	movw	r2, #5000	; 0x1388
 800711e:	4293      	cmp	r3, r2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e053      	b.n	80071ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007126:	4b2d      	ldr	r3, [pc, #180]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f003 020c 	and.w	r2, r3, #12
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	429a      	cmp	r2, r3
 8007136:	d1eb      	bne.n	8007110 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007138:	4b27      	ldr	r3, [pc, #156]	; (80071d8 <HAL_RCC_ClockConfig+0x1c0>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d210      	bcs.n	8007168 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007146:	4b24      	ldr	r3, [pc, #144]	; (80071d8 <HAL_RCC_ClockConfig+0x1c0>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f023 0207 	bic.w	r2, r3, #7
 800714e:	4922      	ldr	r1, [pc, #136]	; (80071d8 <HAL_RCC_ClockConfig+0x1c0>)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	4313      	orrs	r3, r2
 8007154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007156:	4b20      	ldr	r3, [pc, #128]	; (80071d8 <HAL_RCC_ClockConfig+0x1c0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d001      	beq.n	8007168 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e032      	b.n	80071ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d008      	beq.n	8007186 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007174:	4b19      	ldr	r3, [pc, #100]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	4916      	ldr	r1, [pc, #88]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 8007182:	4313      	orrs	r3, r2
 8007184:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007192:	4b12      	ldr	r3, [pc, #72]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	490e      	ldr	r1, [pc, #56]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071a6:	f000 f821 	bl	80071ec <HAL_RCC_GetSysClockFreq>
 80071aa:	4602      	mov	r2, r0
 80071ac:	4b0b      	ldr	r3, [pc, #44]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	091b      	lsrs	r3, r3, #4
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	490a      	ldr	r1, [pc, #40]	; (80071e0 <HAL_RCC_ClockConfig+0x1c8>)
 80071b8:	5ccb      	ldrb	r3, [r1, r3]
 80071ba:	fa22 f303 	lsr.w	r3, r2, r3
 80071be:	4a09      	ldr	r2, [pc, #36]	; (80071e4 <HAL_RCC_ClockConfig+0x1cc>)
 80071c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80071c2:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <HAL_RCC_ClockConfig+0x1d0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe feba 	bl	8005f40 <HAL_InitTick>

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40022000 	.word	0x40022000
 80071dc:	40021000 	.word	0x40021000
 80071e0:	0800be44 	.word	0x0800be44
 80071e4:	200000e8 	.word	0x200000e8
 80071e8:	200000ec 	.word	0x200000ec

080071ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071ec:	b490      	push	{r4, r7}
 80071ee:	b08a      	sub	sp, #40	; 0x28
 80071f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80071f2:	4b29      	ldr	r3, [pc, #164]	; (8007298 <HAL_RCC_GetSysClockFreq+0xac>)
 80071f4:	1d3c      	adds	r4, r7, #4
 80071f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80071fc:	f240 2301 	movw	r3, #513	; 0x201
 8007200:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	61fb      	str	r3, [r7, #28]
 8007206:	2300      	movs	r3, #0
 8007208:	61bb      	str	r3, [r7, #24]
 800720a:	2300      	movs	r3, #0
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007216:	4b21      	ldr	r3, [pc, #132]	; (800729c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	f003 030c 	and.w	r3, r3, #12
 8007222:	2b04      	cmp	r3, #4
 8007224:	d002      	beq.n	800722c <HAL_RCC_GetSysClockFreq+0x40>
 8007226:	2b08      	cmp	r3, #8
 8007228:	d003      	beq.n	8007232 <HAL_RCC_GetSysClockFreq+0x46>
 800722a:	e02b      	b.n	8007284 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800722c:	4b1c      	ldr	r3, [pc, #112]	; (80072a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800722e:	623b      	str	r3, [r7, #32]
      break;
 8007230:	e02b      	b.n	800728a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	0c9b      	lsrs	r3, r3, #18
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	3328      	adds	r3, #40	; 0x28
 800723c:	443b      	add	r3, r7
 800723e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007242:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d012      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800724e:	4b13      	ldr	r3, [pc, #76]	; (800729c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	0c5b      	lsrs	r3, r3, #17
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	3328      	adds	r3, #40	; 0x28
 800725a:	443b      	add	r3, r7
 800725c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007260:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	4a0e      	ldr	r2, [pc, #56]	; (80072a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007266:	fb03 f202 	mul.w	r2, r3, r2
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
 8007272:	e004      	b.n	800727e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	4a0b      	ldr	r2, [pc, #44]	; (80072a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007278:	fb02 f303 	mul.w	r3, r2, r3
 800727c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	623b      	str	r3, [r7, #32]
      break;
 8007282:	e002      	b.n	800728a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007286:	623b      	str	r3, [r7, #32]
      break;
 8007288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800728a:	6a3b      	ldr	r3, [r7, #32]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3728      	adds	r7, #40	; 0x28
 8007290:	46bd      	mov	sp, r7
 8007292:	bc90      	pop	{r4, r7}
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	0800be28 	.word	0x0800be28
 800729c:	40021000 	.word	0x40021000
 80072a0:	007a1200 	.word	0x007a1200
 80072a4:	003d0900 	.word	0x003d0900

080072a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80072ae:	681b      	ldr	r3, [r3, #0]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr
 80072b8:	200000e8 	.word	0x200000e8

080072bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072c0:	f7ff fff2 	bl	80072a8 <HAL_RCC_GetHCLKFreq>
 80072c4:	4602      	mov	r2, r0
 80072c6:	4b05      	ldr	r3, [pc, #20]	; (80072dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	4903      	ldr	r1, [pc, #12]	; (80072e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072d2:	5ccb      	ldrb	r3, [r1, r3]
 80072d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072d8:	4618      	mov	r0, r3
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40021000 	.word	0x40021000
 80072e0:	0800be54 	.word	0x0800be54

080072e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072e8:	f7ff ffde 	bl	80072a8 <HAL_RCC_GetHCLKFreq>
 80072ec:	4602      	mov	r2, r0
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	0adb      	lsrs	r3, r3, #11
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	4903      	ldr	r1, [pc, #12]	; (8007308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072fa:	5ccb      	ldrb	r3, [r1, r3]
 80072fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007300:	4618      	mov	r0, r3
 8007302:	bd80      	pop	{r7, pc}
 8007304:	40021000 	.word	0x40021000
 8007308:	0800be54 	.word	0x0800be54

0800730c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007314:	4b0a      	ldr	r3, [pc, #40]	; (8007340 <RCC_Delay+0x34>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a0a      	ldr	r2, [pc, #40]	; (8007344 <RCC_Delay+0x38>)
 800731a:	fba2 2303 	umull	r2, r3, r2, r3
 800731e:	0a5b      	lsrs	r3, r3, #9
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	fb02 f303 	mul.w	r3, r2, r3
 8007326:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007328:	bf00      	nop
  }
  while (Delay --);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1e5a      	subs	r2, r3, #1
 800732e:	60fa      	str	r2, [r7, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f9      	bne.n	8007328 <RCC_Delay+0x1c>
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	bc80      	pop	{r7}
 800733e:	4770      	bx	lr
 8007340:	200000e8 	.word	0x200000e8
 8007344:	10624dd3 	.word	0x10624dd3

08007348 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e076      	b.n	8007448 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d108      	bne.n	8007374 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800736a:	d009      	beq.n	8007380 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	61da      	str	r2, [r3, #28]
 8007372:	e005      	b.n	8007380 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fe fb88 	bl	8005ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073f0:	431a      	orrs	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007404:	ea42 0103 	orr.w	r1, r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	0c1a      	lsrs	r2, r3, #16
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f002 0204 	and.w	r2, r2, #4
 8007426:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	69da      	ldr	r2, [r3, #28]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007436:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	603b      	str	r3, [r7, #0]
 800745c:	4613      	mov	r3, r2
 800745e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_SPI_Transmit+0x22>
 800746e:	2302      	movs	r3, #2
 8007470:	e126      	b.n	80076c0 <HAL_SPI_Transmit+0x270>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800747a:	f7fe fda3 	bl	8005fc4 <HAL_GetTick>
 800747e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b01      	cmp	r3, #1
 800748e:	d002      	beq.n	8007496 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007490:	2302      	movs	r3, #2
 8007492:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007494:	e10b      	b.n	80076ae <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <HAL_SPI_Transmit+0x52>
 800749c:	88fb      	ldrh	r3, [r7, #6]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074a6:	e102      	b.n	80076ae <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2203      	movs	r2, #3
 80074ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	88fa      	ldrh	r2, [r7, #6]
 80074c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	88fa      	ldrh	r2, [r7, #6]
 80074c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ee:	d10f      	bne.n	8007510 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800750e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751a:	2b40      	cmp	r3, #64	; 0x40
 800751c:	d007      	beq.n	800752e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800752c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007536:	d14b      	bne.n	80075d0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <HAL_SPI_Transmit+0xf6>
 8007540:	8afb      	ldrh	r3, [r7, #22]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d13e      	bne.n	80075c4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754a:	881a      	ldrh	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	1c9a      	adds	r2, r3, #2
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007560:	b29b      	uxth	r3, r3
 8007562:	3b01      	subs	r3, #1
 8007564:	b29a      	uxth	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800756a:	e02b      	b.n	80075c4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b02      	cmp	r3, #2
 8007578:	d112      	bne.n	80075a0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757e:	881a      	ldrh	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	1c9a      	adds	r2, r3, #2
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007594:	b29b      	uxth	r3, r3
 8007596:	3b01      	subs	r3, #1
 8007598:	b29a      	uxth	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	86da      	strh	r2, [r3, #54]	; 0x36
 800759e:	e011      	b.n	80075c4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075a0:	f7fe fd10 	bl	8005fc4 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d803      	bhi.n	80075b8 <HAL_SPI_Transmit+0x168>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b6:	d102      	bne.n	80075be <HAL_SPI_Transmit+0x16e>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d102      	bne.n	80075c4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075c2:	e074      	b.n	80076ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1ce      	bne.n	800756c <HAL_SPI_Transmit+0x11c>
 80075ce:	e04c      	b.n	800766a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <HAL_SPI_Transmit+0x18e>
 80075d8:	8afb      	ldrh	r3, [r7, #22]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d140      	bne.n	8007660 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	330c      	adds	r3, #12
 80075e8:	7812      	ldrb	r2, [r2, #0]
 80075ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007604:	e02c      	b.n	8007660 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b02      	cmp	r3, #2
 8007612:	d113      	bne.n	800763c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	330c      	adds	r3, #12
 800761e:	7812      	ldrb	r2, [r2, #0]
 8007620:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	86da      	strh	r2, [r3, #54]	; 0x36
 800763a:	e011      	b.n	8007660 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800763c:	f7fe fcc2 	bl	8005fc4 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d803      	bhi.n	8007654 <HAL_SPI_Transmit+0x204>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007652:	d102      	bne.n	800765a <HAL_SPI_Transmit+0x20a>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800765e:	e026      	b.n	80076ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1cd      	bne.n	8007606 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 fa54 	bl	8007b1c <SPI_EndRxTxTransaction>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2220      	movs	r2, #32
 800767e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007688:	2300      	movs	r3, #0
 800768a:	613b      	str	r3, [r7, #16]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	613b      	str	r3, [r7, #16]
 800769c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	77fb      	strb	r3, [r7, #31]
 80076aa:	e000      	b.n	80076ae <HAL_SPI_Transmit+0x25e>
  }

error:
 80076ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076be:	7ffb      	ldrb	r3, [r7, #31]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3720      	adds	r7, #32
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08c      	sub	sp, #48	; 0x30
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076d6:	2301      	movs	r3, #1
 80076d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d101      	bne.n	80076ee <HAL_SPI_TransmitReceive+0x26>
 80076ea:	2302      	movs	r3, #2
 80076ec:	e18a      	b.n	8007a04 <HAL_SPI_TransmitReceive+0x33c>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076f6:	f7fe fc65 	bl	8005fc4 <HAL_GetTick>
 80076fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800770c:	887b      	ldrh	r3, [r7, #2]
 800770e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007714:	2b01      	cmp	r3, #1
 8007716:	d00f      	beq.n	8007738 <HAL_SPI_TransmitReceive+0x70>
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800771e:	d107      	bne.n	8007730 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d103      	bne.n	8007730 <HAL_SPI_TransmitReceive+0x68>
 8007728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800772c:	2b04      	cmp	r3, #4
 800772e:	d003      	beq.n	8007738 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007730:	2302      	movs	r3, #2
 8007732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007736:	e15b      	b.n	80079f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <HAL_SPI_TransmitReceive+0x82>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <HAL_SPI_TransmitReceive+0x82>
 8007744:	887b      	ldrh	r3, [r7, #2]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d103      	bne.n	8007752 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007750:	e14e      	b.n	80079f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b04      	cmp	r3, #4
 800775c:	d003      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2205      	movs	r2, #5
 8007762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	887a      	ldrh	r2, [r7, #2]
 8007776:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	887a      	ldrh	r2, [r7, #2]
 800777c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	887a      	ldrh	r2, [r7, #2]
 8007788:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	887a      	ldrh	r2, [r7, #2]
 800778e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b40      	cmp	r3, #64	; 0x40
 80077a8:	d007      	beq.n	80077ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c2:	d178      	bne.n	80078b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <HAL_SPI_TransmitReceive+0x10a>
 80077cc:	8b7b      	ldrh	r3, [r7, #26]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d166      	bne.n	80078a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d6:	881a      	ldrh	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	1c9a      	adds	r2, r3, #2
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077f6:	e053      	b.n	80078a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b02      	cmp	r3, #2
 8007804:	d11b      	bne.n	800783e <HAL_SPI_TransmitReceive+0x176>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800780a:	b29b      	uxth	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d016      	beq.n	800783e <HAL_SPI_TransmitReceive+0x176>
 8007810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007812:	2b01      	cmp	r3, #1
 8007814:	d113      	bne.n	800783e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	881a      	ldrh	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	1c9a      	adds	r2, r3, #2
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b01      	cmp	r3, #1
 800784a:	d119      	bne.n	8007880 <HAL_SPI_TransmitReceive+0x1b8>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d014      	beq.n	8007880 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	b292      	uxth	r2, r2
 8007862:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007868:	1c9a      	adds	r2, r3, #2
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007872:	b29b      	uxth	r3, r3
 8007874:	3b01      	subs	r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800787c:	2301      	movs	r3, #1
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007880:	f7fe fba0 	bl	8005fc4 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800788c:	429a      	cmp	r2, r3
 800788e:	d807      	bhi.n	80078a0 <HAL_SPI_TransmitReceive+0x1d8>
 8007890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d003      	beq.n	80078a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800789e:	e0a7      	b.n	80079f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1a6      	bne.n	80077f8 <HAL_SPI_TransmitReceive+0x130>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1a1      	bne.n	80077f8 <HAL_SPI_TransmitReceive+0x130>
 80078b4:	e07c      	b.n	80079b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <HAL_SPI_TransmitReceive+0x1fc>
 80078be:	8b7b      	ldrh	r3, [r7, #26]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d16b      	bne.n	800799c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	330c      	adds	r3, #12
 80078ce:	7812      	ldrb	r2, [r2, #0]
 80078d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078ea:	e057      	b.n	800799c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 0302 	and.w	r3, r3, #2
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d11c      	bne.n	8007934 <HAL_SPI_TransmitReceive+0x26c>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078fe:	b29b      	uxth	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d017      	beq.n	8007934 <HAL_SPI_TransmitReceive+0x26c>
 8007904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007906:	2b01      	cmp	r3, #1
 8007908:	d114      	bne.n	8007934 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	330c      	adds	r3, #12
 8007914:	7812      	ldrb	r2, [r2, #0]
 8007916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b01      	cmp	r3, #1
 8007940:	d119      	bne.n	8007976 <HAL_SPI_TransmitReceive+0x2ae>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007946:	b29b      	uxth	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d014      	beq.n	8007976 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68da      	ldr	r2, [r3, #12]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007972:	2301      	movs	r3, #1
 8007974:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007976:	f7fe fb25 	bl	8005fc4 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007982:	429a      	cmp	r2, r3
 8007984:	d803      	bhi.n	800798e <HAL_SPI_TransmitReceive+0x2c6>
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798c:	d102      	bne.n	8007994 <HAL_SPI_TransmitReceive+0x2cc>
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	2b00      	cmp	r3, #0
 8007992:	d103      	bne.n	800799c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800799a:	e029      	b.n	80079f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1a2      	bne.n	80078ec <HAL_SPI_TransmitReceive+0x224>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d19d      	bne.n	80078ec <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f8b1 	bl	8007b1c <SPI_EndRxTxTransaction>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d006      	beq.n	80079ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80079cc:	e010      	b.n	80079f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10b      	bne.n	80079ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079d6:	2300      	movs	r3, #0
 80079d8:	617b      	str	r3, [r7, #20]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	e000      	b.n	80079f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80079ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3730      	adds	r7, #48	; 0x30
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	603b      	str	r3, [r7, #0]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a1c:	f7fe fad2 	bl	8005fc4 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	4413      	add	r3, r2
 8007a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a2c:	f7fe faca 	bl	8005fc4 <HAL_GetTick>
 8007a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a32:	4b39      	ldr	r3, [pc, #228]	; (8007b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	015b      	lsls	r3, r3, #5
 8007a38:	0d1b      	lsrs	r3, r3, #20
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	fb02 f303 	mul.w	r3, r2, r3
 8007a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a42:	e054      	b.n	8007aee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4a:	d050      	beq.n	8007aee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a4c:	f7fe faba 	bl	8005fc4 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d902      	bls.n	8007a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d13d      	bne.n	8007ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a7a:	d111      	bne.n	8007aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a84:	d004      	beq.n	8007a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a8e:	d107      	bne.n	8007aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa8:	d10f      	bne.n	8007aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e017      	b.n	8007b0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	4013      	ands	r3, r2
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	bf0c      	ite	eq
 8007afe:	2301      	moveq	r3, #1
 8007b00:	2300      	movne	r3, #0
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	461a      	mov	r2, r3
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d19b      	bne.n	8007a44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3720      	adds	r7, #32
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200000e8 	.word	0x200000e8

08007b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	2180      	movs	r1, #128	; 0x80
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7ff ff6a 	bl	8007a0c <SPI_WaitFlagStateUntilTimeout>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d007      	beq.n	8007b4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b42:	f043 0220 	orr.w	r2, r3, #32
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e000      	b.n	8007b50 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e041      	b.n	8007bee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d106      	bne.n	8007b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7fe f824 	bl	8005bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f000 fc9a 	bl	80084d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d001      	beq.n	8007c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e03a      	b.n	8007c86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0201 	orr.w	r2, r2, #1
 8007c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a18      	ldr	r2, [pc, #96]	; (8007c90 <HAL_TIM_Base_Start_IT+0x98>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00e      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x58>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3a:	d009      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x58>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a14      	ldr	r2, [pc, #80]	; (8007c94 <HAL_TIM_Base_Start_IT+0x9c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d004      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x58>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a13      	ldr	r2, [pc, #76]	; (8007c98 <HAL_TIM_Base_Start_IT+0xa0>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d111      	bne.n	8007c74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b06      	cmp	r3, #6
 8007c60:	d010      	beq.n	8007c84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0201 	orr.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c72:	e007      	b.n	8007c84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f042 0201 	orr.w	r2, r2, #1
 8007c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr
 8007c90:	40012c00 	.word	0x40012c00
 8007c94:	40000400 	.word	0x40000400
 8007c98:	40000800 	.word	0x40000800

08007c9c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0201 	bic.w	r2, r2, #1
 8007cb2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6a1a      	ldr	r2, [r3, #32]
 8007cba:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10f      	bne.n	8007ce4 <HAL_TIM_Base_Stop_IT+0x48>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6a1a      	ldr	r2, [r3, #32]
 8007cca:	f240 4344 	movw	r3, #1092	; 0x444
 8007cce:	4013      	ands	r3, r2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d107      	bne.n	8007ce4 <HAL_TIM_Base_Stop_IT+0x48>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0201 	bic.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e093      	b.n	8007e34 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d106      	bne.n	8007d26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fd ff0f 	bl	8005b44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6812      	ldr	r2, [r2, #0]
 8007d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d3c:	f023 0307 	bic.w	r3, r3, #7
 8007d40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	f000 fbbf 	bl	80084d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7a:	f023 0303 	bic.w	r3, r3, #3
 8007d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	021b      	lsls	r3, r3, #8
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007d98:	f023 030c 	bic.w	r3, r3, #12
 8007d9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007da4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	4313      	orrs	r3, r2
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	011a      	lsls	r2, r3, #4
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	031b      	lsls	r3, r3, #12
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007dd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	011b      	lsls	r3, r3, #4
 8007de2:	4313      	orrs	r3, r2
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d110      	bne.n	8007e8e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d102      	bne.n	8007e78 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e72:	7b7b      	ldrb	r3, [r7, #13]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d001      	beq.n	8007e7c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e089      	b.n	8007f90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e8c:	e031      	b.n	8007ef2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d110      	bne.n	8007eb6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d102      	bne.n	8007ea0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e9a:	7b3b      	ldrb	r3, [r7, #12]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d001      	beq.n	8007ea4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e075      	b.n	8007f90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007eb4:	e01d      	b.n	8007ef2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d108      	bne.n	8007ece <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d105      	bne.n	8007ece <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ec2:	7b7b      	ldrb	r3, [r7, #13]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d102      	bne.n	8007ece <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ec8:	7b3b      	ldrb	r3, [r7, #12]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d001      	beq.n	8007ed2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e05e      	b.n	8007f90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2202      	movs	r2, #2
 8007ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2202      	movs	r2, #2
 8007eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d010      	beq.n	8007f20 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007efe:	e01f      	b.n	8007f40 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2201      	movs	r2, #1
 8007f06:	2100      	movs	r1, #0
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 fbd9 	bl	80086c0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f042 0202 	orr.w	r2, r2, #2
 8007f1c:	60da      	str	r2, [r3, #12]
      break;
 8007f1e:	e02e      	b.n	8007f7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2201      	movs	r2, #1
 8007f26:	2104      	movs	r1, #4
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fbc9 	bl	80086c0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68da      	ldr	r2, [r3, #12]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 0204 	orr.w	r2, r2, #4
 8007f3c:	60da      	str	r2, [r3, #12]
      break;
 8007f3e:	e01e      	b.n	8007f7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2201      	movs	r2, #1
 8007f46:	2100      	movs	r1, #0
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fbb9 	bl	80086c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2201      	movs	r2, #1
 8007f54:	2104      	movs	r1, #4
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fbb2 	bl	80086c0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0202 	orr.w	r2, r2, #2
 8007f6a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0204 	orr.w	r2, r2, #4
 8007f7a:	60da      	str	r2, [r3, #12]
      break;
 8007f7c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f042 0201 	orr.w	r2, r2, #1
 8007f8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10f      	bne.n	8007fc8 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2200      	movs	r2, #0
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 fb85 	bl	80086c0 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0202 	bic.w	r2, r2, #2
 8007fc4:	60da      	str	r2, [r3, #12]
 8007fc6:	e030      	b.n	800802a <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d10f      	bne.n	8007fee <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2104      	movs	r1, #4
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fb72 	bl	80086c0 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0204 	bic.w	r2, r2, #4
 8007fea:	60da      	str	r2, [r3, #12]
 8007fec:	e01d      	b.n	800802a <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fb62 	bl	80086c0 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2200      	movs	r2, #0
 8008002:	2104      	movs	r1, #4
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fb5b 	bl	80086c0 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0202 	bic.w	r2, r2, #2
 8008018:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0204 	bic.w	r2, r2, #4
 8008028:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6a1a      	ldr	r2, [r3, #32]
 8008030:	f241 1311 	movw	r3, #4369	; 0x1111
 8008034:	4013      	ands	r3, r2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10f      	bne.n	800805a <HAL_TIM_Encoder_Stop_IT+0xc2>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6a1a      	ldr	r2, [r3, #32]
 8008040:	f240 4344 	movw	r3, #1092	; 0x444
 8008044:	4013      	ands	r3, r2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d107      	bne.n	800805a <HAL_TIM_Encoder_Stop_IT+0xc2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f022 0201 	bic.w	r2, r2, #1
 8008058:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <HAL_TIM_Encoder_Stop_IT+0xce>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	2b04      	cmp	r3, #4
 8008064:	d138      	bne.n	80080d8 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d104      	bne.n	8008076 <HAL_TIM_Encoder_Stop_IT+0xde>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008074:	e013      	b.n	800809e <HAL_TIM_Encoder_Stop_IT+0x106>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b04      	cmp	r3, #4
 800807a:	d104      	bne.n	8008086 <HAL_TIM_Encoder_Stop_IT+0xee>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008084:	e00b      	b.n	800809e <HAL_TIM_Encoder_Stop_IT+0x106>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b08      	cmp	r3, #8
 800808a:	d104      	bne.n	8008096 <HAL_TIM_Encoder_Stop_IT+0xfe>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008094:	e003      	b.n	800809e <HAL_TIM_Encoder_Stop_IT+0x106>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d104      	bne.n	80080ae <HAL_TIM_Encoder_Stop_IT+0x116>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080ac:	e024      	b.n	80080f8 <HAL_TIM_Encoder_Stop_IT+0x160>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b04      	cmp	r3, #4
 80080b2:	d104      	bne.n	80080be <HAL_TIM_Encoder_Stop_IT+0x126>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080bc:	e01c      	b.n	80080f8 <HAL_TIM_Encoder_Stop_IT+0x160>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d104      	bne.n	80080ce <HAL_TIM_Encoder_Stop_IT+0x136>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080cc:	e014      	b.n	80080f8 <HAL_TIM_Encoder_Stop_IT+0x160>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080d6:	e00f      	b.n	80080f8 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b02      	cmp	r3, #2
 8008116:	d122      	bne.n	800815e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b02      	cmp	r3, #2
 8008124:	d11b      	bne.n	800815e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f06f 0202 	mvn.w	r2, #2
 800812e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	f003 0303 	and.w	r3, r3, #3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7fd fc15 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 800814a:	e005      	b.n	8008158 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f9a4 	bl	800849a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f9aa 	bl	80084ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b04      	cmp	r3, #4
 800816a:	d122      	bne.n	80081b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f003 0304 	and.w	r3, r3, #4
 8008176:	2b04      	cmp	r3, #4
 8008178:	d11b      	bne.n	80081b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f06f 0204 	mvn.w	r2, #4
 8008182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2202      	movs	r2, #2
 8008188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7fd fbeb 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 800819e:	e005      	b.n	80081ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f97a 	bl	800849a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f980 	bl	80084ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d122      	bne.n	8008206 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b08      	cmp	r3, #8
 80081cc:	d11b      	bne.n	8008206 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f06f 0208 	mvn.w	r2, #8
 80081d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2204      	movs	r2, #4
 80081dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	f003 0303 	and.w	r3, r3, #3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7fd fbc1 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 80081f2:	e005      	b.n	8008200 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f950 	bl	800849a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f956 	bl	80084ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	f003 0310 	and.w	r3, r3, #16
 8008210:	2b10      	cmp	r3, #16
 8008212:	d122      	bne.n	800825a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f003 0310 	and.w	r3, r3, #16
 800821e:	2b10      	cmp	r3, #16
 8008220:	d11b      	bne.n	800825a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f06f 0210 	mvn.w	r2, #16
 800822a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2208      	movs	r2, #8
 8008230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7fd fb97 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8008246:	e005      	b.n	8008254 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f926 	bl	800849a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f92c 	bl	80084ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b01      	cmp	r3, #1
 8008266:	d10e      	bne.n	8008286 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b01      	cmp	r3, #1
 8008274:	d107      	bne.n	8008286 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f06f 0201 	mvn.w	r2, #1
 800827e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7fd fb29 	bl	80058d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008290:	2b80      	cmp	r3, #128	; 0x80
 8008292:	d10e      	bne.n	80082b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829e:	2b80      	cmp	r3, #128	; 0x80
 80082a0:	d107      	bne.n	80082b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fa92 	bl	80087d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082bc:	2b40      	cmp	r3, #64	; 0x40
 80082be:	d10e      	bne.n	80082de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ca:	2b40      	cmp	r3, #64	; 0x40
 80082cc:	d107      	bne.n	80082de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f8f0 	bl	80084be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	f003 0320 	and.w	r3, r3, #32
 80082e8:	2b20      	cmp	r3, #32
 80082ea:	d10e      	bne.n	800830a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f003 0320 	and.w	r3, r3, #32
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	d107      	bne.n	800830a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f06f 0220 	mvn.w	r2, #32
 8008302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fa5d 	bl	80087c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008322:	2b01      	cmp	r3, #1
 8008324:	d101      	bne.n	800832a <HAL_TIM_ConfigClockSource+0x18>
 8008326:	2302      	movs	r3, #2
 8008328:	e0b3      	b.n	8008492 <HAL_TIM_ConfigClockSource+0x180>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2202      	movs	r2, #2
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008348:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008350:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008362:	d03e      	beq.n	80083e2 <HAL_TIM_ConfigClockSource+0xd0>
 8008364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008368:	f200 8087 	bhi.w	800847a <HAL_TIM_ConfigClockSource+0x168>
 800836c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008370:	f000 8085 	beq.w	800847e <HAL_TIM_ConfigClockSource+0x16c>
 8008374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008378:	d87f      	bhi.n	800847a <HAL_TIM_ConfigClockSource+0x168>
 800837a:	2b70      	cmp	r3, #112	; 0x70
 800837c:	d01a      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0xa2>
 800837e:	2b70      	cmp	r3, #112	; 0x70
 8008380:	d87b      	bhi.n	800847a <HAL_TIM_ConfigClockSource+0x168>
 8008382:	2b60      	cmp	r3, #96	; 0x60
 8008384:	d050      	beq.n	8008428 <HAL_TIM_ConfigClockSource+0x116>
 8008386:	2b60      	cmp	r3, #96	; 0x60
 8008388:	d877      	bhi.n	800847a <HAL_TIM_ConfigClockSource+0x168>
 800838a:	2b50      	cmp	r3, #80	; 0x50
 800838c:	d03c      	beq.n	8008408 <HAL_TIM_ConfigClockSource+0xf6>
 800838e:	2b50      	cmp	r3, #80	; 0x50
 8008390:	d873      	bhi.n	800847a <HAL_TIM_ConfigClockSource+0x168>
 8008392:	2b40      	cmp	r3, #64	; 0x40
 8008394:	d058      	beq.n	8008448 <HAL_TIM_ConfigClockSource+0x136>
 8008396:	2b40      	cmp	r3, #64	; 0x40
 8008398:	d86f      	bhi.n	800847a <HAL_TIM_ConfigClockSource+0x168>
 800839a:	2b30      	cmp	r3, #48	; 0x30
 800839c:	d064      	beq.n	8008468 <HAL_TIM_ConfigClockSource+0x156>
 800839e:	2b30      	cmp	r3, #48	; 0x30
 80083a0:	d86b      	bhi.n	800847a <HAL_TIM_ConfigClockSource+0x168>
 80083a2:	2b20      	cmp	r3, #32
 80083a4:	d060      	beq.n	8008468 <HAL_TIM_ConfigClockSource+0x156>
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	d867      	bhi.n	800847a <HAL_TIM_ConfigClockSource+0x168>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d05c      	beq.n	8008468 <HAL_TIM_ConfigClockSource+0x156>
 80083ae:	2b10      	cmp	r3, #16
 80083b0:	d05a      	beq.n	8008468 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80083b2:	e062      	b.n	800847a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	6899      	ldr	r1, [r3, #8]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f000 f95d 	bl	8008682 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	609a      	str	r2, [r3, #8]
      break;
 80083e0:	e04e      	b.n	8008480 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	6899      	ldr	r1, [r3, #8]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	f000 f946 	bl	8008682 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008404:	609a      	str	r2, [r3, #8]
      break;
 8008406:	e03b      	b.n	8008480 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	6859      	ldr	r1, [r3, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	461a      	mov	r2, r3
 8008416:	f000 f8bd 	bl	8008594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2150      	movs	r1, #80	; 0x50
 8008420:	4618      	mov	r0, r3
 8008422:	f000 f914 	bl	800864e <TIM_ITRx_SetConfig>
      break;
 8008426:	e02b      	b.n	8008480 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	6859      	ldr	r1, [r3, #4]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	461a      	mov	r2, r3
 8008436:	f000 f8db 	bl	80085f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2160      	movs	r1, #96	; 0x60
 8008440:	4618      	mov	r0, r3
 8008442:	f000 f904 	bl	800864e <TIM_ITRx_SetConfig>
      break;
 8008446:	e01b      	b.n	8008480 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6818      	ldr	r0, [r3, #0]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	6859      	ldr	r1, [r3, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	461a      	mov	r2, r3
 8008456:	f000 f89d 	bl	8008594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2140      	movs	r1, #64	; 0x40
 8008460:	4618      	mov	r0, r3
 8008462:	f000 f8f4 	bl	800864e <TIM_ITRx_SetConfig>
      break;
 8008466:	e00b      	b.n	8008480 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4619      	mov	r1, r3
 8008472:	4610      	mov	r0, r2
 8008474:	f000 f8eb 	bl	800864e <TIM_ITRx_SetConfig>
        break;
 8008478:	e002      	b.n	8008480 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800847a:	bf00      	nop
 800847c:	e000      	b.n	8008480 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800847e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800849a:	b480      	push	{r7}
 800849c:	b083      	sub	sp, #12
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084a2:	bf00      	nop
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bc80      	pop	{r7}
 80084aa:	4770      	bx	lr

080084ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bc80      	pop	{r7}
 80084bc:	4770      	bx	lr

080084be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084c6:	bf00      	nop
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bc80      	pop	{r7}
 80084ce:	4770      	bx	lr

080084d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a29      	ldr	r2, [pc, #164]	; (8008588 <TIM_Base_SetConfig+0xb8>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00b      	beq.n	8008500 <TIM_Base_SetConfig+0x30>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ee:	d007      	beq.n	8008500 <TIM_Base_SetConfig+0x30>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a26      	ldr	r2, [pc, #152]	; (800858c <TIM_Base_SetConfig+0xbc>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d003      	beq.n	8008500 <TIM_Base_SetConfig+0x30>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a25      	ldr	r2, [pc, #148]	; (8008590 <TIM_Base_SetConfig+0xc0>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d108      	bne.n	8008512 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	4313      	orrs	r3, r2
 8008510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a1c      	ldr	r2, [pc, #112]	; (8008588 <TIM_Base_SetConfig+0xb8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00b      	beq.n	8008532 <TIM_Base_SetConfig+0x62>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008520:	d007      	beq.n	8008532 <TIM_Base_SetConfig+0x62>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a19      	ldr	r2, [pc, #100]	; (800858c <TIM_Base_SetConfig+0xbc>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d003      	beq.n	8008532 <TIM_Base_SetConfig+0x62>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a18      	ldr	r2, [pc, #96]	; (8008590 <TIM_Base_SetConfig+0xc0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d108      	bne.n	8008544 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	4313      	orrs	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a07      	ldr	r2, [pc, #28]	; (8008588 <TIM_Base_SetConfig+0xb8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d103      	bne.n	8008578 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	691a      	ldr	r2, [r3, #16]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	615a      	str	r2, [r3, #20]
}
 800857e:	bf00      	nop
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	bc80      	pop	{r7}
 8008586:	4770      	bx	lr
 8008588:	40012c00 	.word	0x40012c00
 800858c:	40000400 	.word	0x40000400
 8008590:	40000800 	.word	0x40000800

08008594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	f023 0201 	bic.w	r2, r3, #1
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	011b      	lsls	r3, r3, #4
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f023 030a 	bic.w	r3, r3, #10
 80085d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	621a      	str	r2, [r3, #32]
}
 80085e6:	bf00      	nop
 80085e8:	371c      	adds	r7, #28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bc80      	pop	{r7}
 80085ee:	4770      	bx	lr

080085f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	f023 0210 	bic.w	r2, r3, #16
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800861a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	031b      	lsls	r3, r3, #12
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	4313      	orrs	r3, r2
 8008624:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800862c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	011b      	lsls	r3, r3, #4
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	4313      	orrs	r3, r2
 8008636:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	621a      	str	r2, [r3, #32]
}
 8008644:	bf00      	nop
 8008646:	371c      	adds	r7, #28
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr

0800864e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800864e:	b480      	push	{r7}
 8008650:	b085      	sub	sp, #20
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4313      	orrs	r3, r2
 800866c:	f043 0307 	orr.w	r3, r3, #7
 8008670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	609a      	str	r2, [r3, #8]
}
 8008678:	bf00      	nop
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	bc80      	pop	{r7}
 8008680:	4770      	bx	lr

08008682 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008682:	b480      	push	{r7}
 8008684:	b087      	sub	sp, #28
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	607a      	str	r2, [r7, #4]
 800868e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800869c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	021a      	lsls	r2, r3, #8
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	431a      	orrs	r2, r3
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	609a      	str	r2, [r3, #8]
}
 80086b6:	bf00      	nop
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f003 031f 	and.w	r3, r3, #31
 80086d2:	2201      	movs	r2, #1
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a1a      	ldr	r2, [r3, #32]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	43db      	mvns	r3, r3
 80086e2:	401a      	ands	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6a1a      	ldr	r2, [r3, #32]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f003 031f 	and.w	r3, r3, #31
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	fa01 f303 	lsl.w	r3, r1, r3
 80086f8:	431a      	orrs	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	621a      	str	r2, [r3, #32]
}
 80086fe:	bf00      	nop
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr

08008708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800871c:	2302      	movs	r3, #2
 800871e:	e046      	b.n	80087ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a16      	ldr	r2, [pc, #88]	; (80087b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d00e      	beq.n	8008782 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800876c:	d009      	beq.n	8008782 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a12      	ldr	r2, [pc, #72]	; (80087bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d004      	beq.n	8008782 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a10      	ldr	r2, [pc, #64]	; (80087c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d10c      	bne.n	800879c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	4313      	orrs	r3, r2
 8008792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bc80      	pop	{r7}
 80087b6:	4770      	bx	lr
 80087b8:	40012c00 	.word	0x40012c00
 80087bc:	40000400 	.word	0x40000400
 80087c0:	40000800 	.word	0x40000800

080087c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr

080087d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bc80      	pop	{r7}
 80087e6:	4770      	bx	lr

080087e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e03f      	b.n	800887a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7fd fa02 	bl	8005c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2224      	movs	r2, #36	; 0x24
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800882a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fd9b 	bl	8009368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	691a      	ldr	r2, [r3, #16]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	695a      	ldr	r2, [r3, #20]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2220      	movs	r2, #32
 8008874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b08a      	sub	sp, #40	; 0x28
 8008886:	af02      	add	r7, sp, #8
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	603b      	str	r3, [r7, #0]
 800888e:	4613      	mov	r3, r2
 8008890:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d17c      	bne.n	800899c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <HAL_UART_Transmit+0x2c>
 80088a8:	88fb      	ldrh	r3, [r7, #6]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e075      	b.n	800899e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d101      	bne.n	80088c0 <HAL_UART_Transmit+0x3e>
 80088bc:	2302      	movs	r3, #2
 80088be:	e06e      	b.n	800899e <HAL_UART_Transmit+0x11c>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2221      	movs	r2, #33	; 0x21
 80088d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088d6:	f7fd fb75 	bl	8005fc4 <HAL_GetTick>
 80088da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	88fa      	ldrh	r2, [r7, #6]
 80088e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	88fa      	ldrh	r2, [r7, #6]
 80088e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f0:	d108      	bne.n	8008904 <HAL_UART_Transmit+0x82>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d104      	bne.n	8008904 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	61bb      	str	r3, [r7, #24]
 8008902:	e003      	b.n	800890c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008908:	2300      	movs	r3, #0
 800890a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008914:	e02a      	b.n	800896c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	2200      	movs	r2, #0
 800891e:	2180      	movs	r1, #128	; 0x80
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 fb0d 	bl	8008f40 <UART_WaitOnFlagUntilTimeout>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e036      	b.n	800899e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10b      	bne.n	800894e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008944:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	3302      	adds	r3, #2
 800894a:	61bb      	str	r3, [r7, #24]
 800894c:	e007      	b.n	800895e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	781a      	ldrb	r2, [r3, #0]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	3301      	adds	r3, #1
 800895c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008962:	b29b      	uxth	r3, r3
 8008964:	3b01      	subs	r3, #1
 8008966:	b29a      	uxth	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008970:	b29b      	uxth	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1cf      	bne.n	8008916 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2200      	movs	r2, #0
 800897e:	2140      	movs	r1, #64	; 0x40
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 fadd 	bl	8008f40 <UART_WaitOnFlagUntilTimeout>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e006      	b.n	800899e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2220      	movs	r2, #32
 8008994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	e000      	b.n	800899e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800899c:	2302      	movs	r3, #2
  }
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3720      	adds	r7, #32
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b086      	sub	sp, #24
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	4613      	mov	r3, r2
 80089b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b20      	cmp	r3, #32
 80089be:	d13c      	bne.n	8008a3a <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80089c6:	88fb      	ldrh	r3, [r7, #6]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e035      	b.n	8008a3c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80089da:	2302      	movs	r3, #2
 80089dc:	e02e      	b.n	8008a3c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2201      	movs	r2, #1
 80089ea:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80089ec:	88fb      	ldrh	r3, [r7, #6]
 80089ee:	461a      	mov	r2, r3
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 faee 	bl	8008fd4 <UART_Start_Receive_DMA>
 80089f8:	4603      	mov	r3, r0
 80089fa:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80089fc:	7dfb      	ldrb	r3, [r7, #23]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d119      	bne.n	8008a36 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d113      	bne.n	8008a32 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	613b      	str	r3, [r7, #16]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	613b      	str	r3, [r7, #16]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	613b      	str	r3, [r7, #16]
 8008a1e:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0210 	orr.w	r2, r2, #16
 8008a2e:	60da      	str	r2, [r3, #12]
 8008a30:	e001      	b.n	8008a36 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	e000      	b.n	8008a3c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8008a3a:	2302      	movs	r3, #2
  }
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08a      	sub	sp, #40	; 0x28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	f003 030f 	and.w	r3, r3, #15
 8008a72:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10d      	bne.n	8008a96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	f003 0320 	and.w	r3, r3, #32
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d008      	beq.n	8008a96 <HAL_UART_IRQHandler+0x52>
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fbc0 	bl	8009214 <UART_Receive_IT>
      return;
 8008a94:	e17b      	b.n	8008d8e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 80b1 	beq.w	8008c00 <HAL_UART_IRQHandler+0x1bc>
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d105      	bne.n	8008ab4 <HAL_UART_IRQHandler+0x70>
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 80a6 	beq.w	8008c00 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <HAL_UART_IRQHandler+0x90>
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d005      	beq.n	8008ad4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008acc:	f043 0201 	orr.w	r2, r3, #1
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	f003 0304 	and.w	r3, r3, #4
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00a      	beq.n	8008af4 <HAL_UART_IRQHandler+0xb0>
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d005      	beq.n	8008af4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	f043 0202 	orr.w	r2, r3, #2
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00a      	beq.n	8008b14 <HAL_UART_IRQHandler+0xd0>
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0c:	f043 0204 	orr.w	r2, r3, #4
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	f003 0308 	and.w	r3, r3, #8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00f      	beq.n	8008b3e <HAL_UART_IRQHandler+0xfa>
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	f003 0320 	and.w	r3, r3, #32
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d104      	bne.n	8008b32 <HAL_UART_IRQHandler+0xee>
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d005      	beq.n	8008b3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	f043 0208 	orr.w	r2, r3, #8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 811e 	beq.w	8008d84 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	f003 0320 	and.w	r3, r3, #32
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <HAL_UART_IRQHandler+0x11e>
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	f003 0320 	and.w	r3, r3, #32
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d002      	beq.n	8008b62 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fb59 	bl	8009214 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bf14      	ite	ne
 8008b70:	2301      	movne	r3, #1
 8008b72:	2300      	moveq	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d102      	bne.n	8008b8a <HAL_UART_IRQHandler+0x146>
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d031      	beq.n	8008bee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa9b 	bl	80090c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d023      	beq.n	8008be6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	695a      	ldr	r2, [r3, #20]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d013      	beq.n	8008bde <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bba:	4a76      	ldr	r2, [pc, #472]	; (8008d94 <HAL_UART_IRQHandler+0x350>)
 8008bbc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fd fc2e 	bl	8006424 <HAL_DMA_Abort_IT>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d016      	beq.n	8008bfc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bdc:	e00e      	b.n	8008bfc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f8f5 	bl	8008dce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be4:	e00a      	b.n	8008bfc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f8f1 	bl	8008dce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bec:	e006      	b.n	8008bfc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f8ed 	bl	8008dce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008bfa:	e0c3      	b.n	8008d84 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bfc:	bf00      	nop
    return;
 8008bfe:	e0c1      	b.n	8008d84 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	f040 80a1 	bne.w	8008d4c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	f003 0310 	and.w	r3, r3, #16
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 809b 	beq.w	8008d4c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 8095 	beq.w	8008d4c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	60fb      	str	r3, [r7, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	60fb      	str	r3, [r7, #12]
 8008c36:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d04e      	beq.n	8008ce4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008c50:	8a3b      	ldrh	r3, [r7, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 8098 	beq.w	8008d88 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c5c:	8a3a      	ldrh	r2, [r7, #16]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	f080 8092 	bcs.w	8008d88 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	8a3a      	ldrh	r2, [r7, #16]
 8008c68:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	2b20      	cmp	r3, #32
 8008c72:	d02b      	beq.n	8008ccc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68da      	ldr	r2, [r3, #12]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c82:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	695a      	ldr	r2, [r3, #20]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f022 0201 	bic.w	r2, r2, #1
 8008c92:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	695a      	ldr	r2, [r3, #20]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ca2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68da      	ldr	r2, [r3, #12]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 0210 	bic.w	r2, r2, #16
 8008cc0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fd fb71 	bl	80063ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7fc fe1f 	bl	8005920 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008ce2:	e051      	b.n	8008d88 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d047      	beq.n	8008d8c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008cfc:	8a7b      	ldrh	r3, [r7, #18]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d044      	beq.n	8008d8c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68da      	ldr	r2, [r3, #12]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d10:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	695a      	ldr	r2, [r3, #20]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0201 	bic.w	r2, r2, #1
 8008d20:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2220      	movs	r2, #32
 8008d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0210 	bic.w	r2, r2, #16
 8008d3e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d40:	8a7b      	ldrh	r3, [r7, #18]
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7fc fdeb 	bl	8005920 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008d4a:	e01f      	b.n	8008d8c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d008      	beq.n	8008d68 <HAL_UART_IRQHandler+0x324>
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d003      	beq.n	8008d68 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f9f0 	bl	8009146 <UART_Transmit_IT>
    return;
 8008d66:	e012      	b.n	8008d8e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00d      	beq.n	8008d8e <HAL_UART_IRQHandler+0x34a>
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d008      	beq.n	8008d8e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fa31 	bl	80091e4 <UART_EndTransmit_IT>
    return;
 8008d82:	e004      	b.n	8008d8e <HAL_UART_IRQHandler+0x34a>
    return;
 8008d84:	bf00      	nop
 8008d86:	e002      	b.n	8008d8e <HAL_UART_IRQHandler+0x34a>
      return;
 8008d88:	bf00      	nop
 8008d8a:	e000      	b.n	8008d8e <HAL_UART_IRQHandler+0x34a>
      return;
 8008d8c:	bf00      	nop
  }
}
 8008d8e:	3728      	adds	r7, #40	; 0x28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	0800911f 	.word	0x0800911f

08008d98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bc80      	pop	{r7}
 8008da8:	4770      	bx	lr

08008daa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b083      	sub	sp, #12
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008db2:	bf00      	nop
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bc80      	pop	{r7}
 8008dba:	4770      	bx	lr

08008dbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bc80      	pop	{r7}
 8008dcc:	4770      	bx	lr

08008dce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bc80      	pop	{r7}
 8008dde:	4770      	bx	lr

08008de0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d12a      	bne.n	8008e52 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e10:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	695a      	ldr	r2, [r3, #20]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0201 	bic.w	r2, r2, #1
 8008e20:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	695a      	ldr	r2, [r3, #20]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e30:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2220      	movs	r2, #32
 8008e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d107      	bne.n	8008e52 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68da      	ldr	r2, [r3, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 0210 	bic.w	r2, r2, #16
 8008e50:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d106      	bne.n	8008e68 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e5e:	4619      	mov	r1, r3
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f7fc fd5d 	bl	8005920 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e66:	e002      	b.n	8008e6e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7ff ff9e 	bl	8008daa <HAL_UART_RxCpltCallback>
}
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d108      	bne.n	8008e9e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e90:	085b      	lsrs	r3, r3, #1
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4619      	mov	r1, r3
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f7fc fd42 	bl	8005920 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e9c:	e002      	b.n	8008ea4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f7ff ff8c 	bl	8008dbc <HAL_UART_RxHalfCpltCallback>
}
 8008ea4:	bf00      	nop
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	bf14      	ite	ne
 8008ecc:	2301      	movne	r3, #1
 8008ece:	2300      	moveq	r3, #0
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b21      	cmp	r3, #33	; 0x21
 8008ede:	d108      	bne.n	8008ef2 <UART_DMAError+0x46>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d005      	beq.n	8008ef2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008eec:	68b8      	ldr	r0, [r7, #8]
 8008eee:	f000 f8d5 	bl	800909c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	bf14      	ite	ne
 8008f00:	2301      	movne	r3, #1
 8008f02:	2300      	moveq	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b22      	cmp	r3, #34	; 0x22
 8008f12:	d108      	bne.n	8008f26 <UART_DMAError+0x7a>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d005      	beq.n	8008f26 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008f20:	68b8      	ldr	r0, [r7, #8]
 8008f22:	f000 f8d0 	bl	80090c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	f043 0210 	orr.w	r2, r3, #16
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f32:	68b8      	ldr	r0, [r7, #8]
 8008f34:	f7ff ff4b 	bl	8008dce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f38:	bf00      	nop
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	603b      	str	r3, [r7, #0]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f50:	e02c      	b.n	8008fac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f58:	d028      	beq.n	8008fac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d007      	beq.n	8008f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f60:	f7fd f830 	bl	8005fc4 <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d21d      	bcs.n	8008fac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68da      	ldr	r2, [r3, #12]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	695a      	ldr	r2, [r3, #20]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0201 	bic.w	r2, r2, #1
 8008f8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2220      	movs	r2, #32
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e00f      	b.n	8008fcc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	bf0c      	ite	eq
 8008fbc:	2301      	moveq	r3, #1
 8008fbe:	2300      	movne	r3, #0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d0c3      	beq.n	8008f52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	88fa      	ldrh	r2, [r7, #6]
 8008fec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2222      	movs	r2, #34	; 0x22
 8008ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009000:	4a23      	ldr	r2, [pc, #140]	; (8009090 <UART_Start_Receive_DMA+0xbc>)
 8009002:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009008:	4a22      	ldr	r2, [pc, #136]	; (8009094 <UART_Start_Receive_DMA+0xc0>)
 800900a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	4a21      	ldr	r2, [pc, #132]	; (8009098 <UART_Start_Receive_DMA+0xc4>)
 8009012:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009018:	2200      	movs	r2, #0
 800901a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800901c:	f107 0308 	add.w	r3, r7, #8
 8009020:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3304      	adds	r3, #4
 800902c:	4619      	mov	r1, r3
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	88fb      	ldrh	r3, [r7, #6]
 8009034:	f7fd f95c 	bl	80062f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009038:	2300      	movs	r3, #0
 800903a:	613b      	str	r3, [r7, #16]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	613b      	str	r3, [r7, #16]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	613b      	str	r3, [r7, #16]
 800904c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009064:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	695a      	ldr	r2, [r3, #20]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f042 0201 	orr.w	r2, r2, #1
 8009074:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695a      	ldr	r2, [r3, #20]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009084:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	08008de1 	.word	0x08008de1
 8009094:	08008e77 	.word	0x08008e77
 8009098:	08008ead 	.word	0x08008ead

0800909c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80090b2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr

080090c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80090dc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	695a      	ldr	r2, [r3, #20]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0201 	bic.w	r2, r2, #1
 80090ec:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d107      	bne.n	8009106 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f022 0210 	bic.w	r2, r2, #16
 8009104:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2220      	movs	r2, #32
 800910a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	bc80      	pop	{r7}
 800911c:	4770      	bx	lr

0800911e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b084      	sub	sp, #16
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f7ff fe48 	bl	8008dce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800913e:	bf00      	nop
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b21      	cmp	r3, #33	; 0x21
 8009158:	d13e      	bne.n	80091d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009162:	d114      	bne.n	800918e <UART_Transmit_IT+0x48>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d110      	bne.n	800918e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009180:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	1c9a      	adds	r2, r3, #2
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	621a      	str	r2, [r3, #32]
 800918c:	e008      	b.n	80091a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	1c59      	adds	r1, r3, #1
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	6211      	str	r1, [r2, #32]
 8009198:	781a      	ldrb	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	3b01      	subs	r3, #1
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	4619      	mov	r1, r3
 80091ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10f      	bne.n	80091d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	e000      	b.n	80091da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091d8:	2302      	movs	r3, #2
  }
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	bc80      	pop	{r7}
 80091e2:	4770      	bx	lr

080091e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68da      	ldr	r2, [r3, #12]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2220      	movs	r2, #32
 8009200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff fdc7 	bl	8008d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b22      	cmp	r3, #34	; 0x22
 8009226:	f040 8099 	bne.w	800935c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009232:	d117      	bne.n	8009264 <UART_Receive_IT+0x50>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d113      	bne.n	8009264 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800923c:	2300      	movs	r3, #0
 800923e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	b29b      	uxth	r3, r3
 800924e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009252:	b29a      	uxth	r2, r3
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925c:	1c9a      	adds	r2, r3, #2
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	629a      	str	r2, [r3, #40]	; 0x28
 8009262:	e026      	b.n	80092b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009268:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800926a:	2300      	movs	r3, #0
 800926c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009276:	d007      	beq.n	8009288 <UART_Receive_IT+0x74>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <UART_Receive_IT+0x82>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d106      	bne.n	8009296 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	b2da      	uxtb	r2, r3
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	701a      	strb	r2, [r3, #0]
 8009294:	e008      	b.n	80092a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	4619      	mov	r1, r3
 80092c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d148      	bne.n	8009358 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68da      	ldr	r2, [r3, #12]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0220 	bic.w	r2, r2, #32
 80092d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	695a      	ldr	r2, [r3, #20]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f022 0201 	bic.w	r2, r2, #1
 80092f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2220      	movs	r2, #32
 80092fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009302:	2b01      	cmp	r3, #1
 8009304:	d123      	bne.n	800934e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f022 0210 	bic.w	r2, r2, #16
 800931a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0310 	and.w	r3, r3, #16
 8009326:	2b10      	cmp	r3, #16
 8009328:	d10a      	bne.n	8009340 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800932a:	2300      	movs	r3, #0
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	60fb      	str	r3, [r7, #12]
 800933e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7fc faea 	bl	8005920 <HAL_UARTEx_RxEventCallback>
 800934c:	e002      	b.n	8009354 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7ff fd2b 	bl	8008daa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	e002      	b.n	800935e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	e000      	b.n	800935e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800935c:	2302      	movs	r3, #2
  }
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68da      	ldr	r2, [r3, #12]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689a      	ldr	r2, [r3, #8]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	431a      	orrs	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	4313      	orrs	r3, r2
 8009396:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80093a2:	f023 030c 	bic.w	r3, r3, #12
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	6812      	ldr	r2, [r2, #0]
 80093aa:	68b9      	ldr	r1, [r7, #8]
 80093ac:	430b      	orrs	r3, r1
 80093ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	699a      	ldr	r2, [r3, #24]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a2c      	ldr	r2, [pc, #176]	; (800947c <UART_SetConfig+0x114>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d103      	bne.n	80093d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80093d0:	f7fd ff88 	bl	80072e4 <HAL_RCC_GetPCLK2Freq>
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	e002      	b.n	80093de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80093d8:	f7fd ff70 	bl	80072bc <HAL_RCC_GetPCLK1Freq>
 80093dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4613      	mov	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	009a      	lsls	r2, r3, #2
 80093e8:	441a      	add	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f4:	4a22      	ldr	r2, [pc, #136]	; (8009480 <UART_SetConfig+0x118>)
 80093f6:	fba2 2303 	umull	r2, r3, r2, r3
 80093fa:	095b      	lsrs	r3, r3, #5
 80093fc:	0119      	lsls	r1, r3, #4
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	009a      	lsls	r2, r3, #2
 8009408:	441a      	add	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	fbb2 f2f3 	udiv	r2, r2, r3
 8009414:	4b1a      	ldr	r3, [pc, #104]	; (8009480 <UART_SetConfig+0x118>)
 8009416:	fba3 0302 	umull	r0, r3, r3, r2
 800941a:	095b      	lsrs	r3, r3, #5
 800941c:	2064      	movs	r0, #100	; 0x64
 800941e:	fb00 f303 	mul.w	r3, r0, r3
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	011b      	lsls	r3, r3, #4
 8009426:	3332      	adds	r3, #50	; 0x32
 8009428:	4a15      	ldr	r2, [pc, #84]	; (8009480 <UART_SetConfig+0x118>)
 800942a:	fba2 2303 	umull	r2, r3, r2, r3
 800942e:	095b      	lsrs	r3, r3, #5
 8009430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009434:	4419      	add	r1, r3
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009a      	lsls	r2, r3, #2
 8009440:	441a      	add	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	fbb2 f2f3 	udiv	r2, r2, r3
 800944c:	4b0c      	ldr	r3, [pc, #48]	; (8009480 <UART_SetConfig+0x118>)
 800944e:	fba3 0302 	umull	r0, r3, r3, r2
 8009452:	095b      	lsrs	r3, r3, #5
 8009454:	2064      	movs	r0, #100	; 0x64
 8009456:	fb00 f303 	mul.w	r3, r0, r3
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	011b      	lsls	r3, r3, #4
 800945e:	3332      	adds	r3, #50	; 0x32
 8009460:	4a07      	ldr	r2, [pc, #28]	; (8009480 <UART_SetConfig+0x118>)
 8009462:	fba2 2303 	umull	r2, r3, r2, r3
 8009466:	095b      	lsrs	r3, r3, #5
 8009468:	f003 020f 	and.w	r2, r3, #15
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	440a      	add	r2, r1
 8009472:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009474:	bf00      	nop
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	40013800 	.word	0x40013800
 8009480:	51eb851f 	.word	0x51eb851f

08009484 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009488:	4904      	ldr	r1, [pc, #16]	; (800949c <MX_FATFS_Init+0x18>)
 800948a:	4805      	ldr	r0, [pc, #20]	; (80094a0 <MX_FATFS_Init+0x1c>)
 800948c:	f000 f8b0 	bl	80095f0 <FATFS_LinkDriver>
 8009490:	4603      	mov	r3, r0
 8009492:	461a      	mov	r2, r3
 8009494:	4b03      	ldr	r3, [pc, #12]	; (80094a4 <MX_FATFS_Init+0x20>)
 8009496:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009498:	bf00      	nop
 800949a:	bd80      	pop	{r7, pc}
 800949c:	200006b0 	.word	0x200006b0
 80094a0:	200000f4 	.word	0x200000f4
 80094a4:	200006ac 	.word	0x200006ac

080094a8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	4603      	mov	r3, r0
 80094b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_initialize(pdrv);
 80094b2:	79fb      	ldrb	r3, [r7, #7]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fb fac3 	bl	8004a40 <SD_disk_initialize>
 80094ba:	4603      	mov	r3, r0
 80094bc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b082      	sub	sp, #8
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	4603      	mov	r3, r0
 80094ce:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fb fb9a 	bl	8004c0c <SD_disk_status>
 80094d8:	4603      	mov	r3, r0
 80094da:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60b9      	str	r1, [r7, #8]
 80094ec:	607a      	str	r2, [r7, #4]
 80094ee:	603b      	str	r3, [r7, #0]
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80094f4:	7bf8      	ldrb	r0, [r7, #15]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	68b9      	ldr	r1, [r7, #8]
 80094fc:	f7fb fb9a 	bl	8004c34 <SD_disk_read>
 8009500:	4603      	mov	r3, r0
 8009502:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	607a      	str	r2, [r7, #4]
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800951c:	7bf8      	ldrb	r0, [r7, #15]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	68b9      	ldr	r1, [r7, #8]
 8009524:	f7fb fbf0 	bl	8004d08 <SD_disk_write>
 8009528:	4603      	mov	r3, r0
 800952a:	b2db      	uxtb	r3, r3
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	4603      	mov	r3, r0
 800953c:	603a      	str	r2, [r7, #0]
 800953e:	71fb      	strb	r3, [r7, #7]
 8009540:	460b      	mov	r3, r1
 8009542:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8009544:	79fb      	ldrb	r3, [r7, #7]
 8009546:	79b9      	ldrb	r1, [r7, #6]
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	4618      	mov	r0, r3
 800954c:	f7fb fc60 	bl	8004e10 <SD_disk_ioctl>
 8009550:	4603      	mov	r3, r0
 8009552:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800955c:	b480      	push	{r7}
 800955e:	b087      	sub	sp, #28
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	4613      	mov	r3, r2
 8009568:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800956a:	2301      	movs	r3, #1
 800956c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009572:	4b1e      	ldr	r3, [pc, #120]	; (80095ec <FATFS_LinkDriverEx+0x90>)
 8009574:	7a5b      	ldrb	r3, [r3, #9]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b01      	cmp	r3, #1
 800957a:	d831      	bhi.n	80095e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800957c:	4b1b      	ldr	r3, [pc, #108]	; (80095ec <FATFS_LinkDriverEx+0x90>)
 800957e:	7a5b      	ldrb	r3, [r3, #9]
 8009580:	b2db      	uxtb	r3, r3
 8009582:	461a      	mov	r2, r3
 8009584:	4b19      	ldr	r3, [pc, #100]	; (80095ec <FATFS_LinkDriverEx+0x90>)
 8009586:	2100      	movs	r1, #0
 8009588:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800958a:	4b18      	ldr	r3, [pc, #96]	; (80095ec <FATFS_LinkDriverEx+0x90>)
 800958c:	7a5b      	ldrb	r3, [r3, #9]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	4a16      	ldr	r2, [pc, #88]	; (80095ec <FATFS_LinkDriverEx+0x90>)
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800959a:	4b14      	ldr	r3, [pc, #80]	; (80095ec <FATFS_LinkDriverEx+0x90>)
 800959c:	7a5b      	ldrb	r3, [r3, #9]
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	461a      	mov	r2, r3
 80095a2:	4b12      	ldr	r3, [pc, #72]	; (80095ec <FATFS_LinkDriverEx+0x90>)
 80095a4:	4413      	add	r3, r2
 80095a6:	79fa      	ldrb	r2, [r7, #7]
 80095a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80095aa:	4b10      	ldr	r3, [pc, #64]	; (80095ec <FATFS_LinkDriverEx+0x90>)
 80095ac:	7a5b      	ldrb	r3, [r3, #9]
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	b2d1      	uxtb	r1, r2
 80095b4:	4a0d      	ldr	r2, [pc, #52]	; (80095ec <FATFS_LinkDriverEx+0x90>)
 80095b6:	7251      	strb	r1, [r2, #9]
 80095b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80095ba:	7dbb      	ldrb	r3, [r7, #22]
 80095bc:	3330      	adds	r3, #48	; 0x30
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	3301      	adds	r3, #1
 80095c8:	223a      	movs	r2, #58	; 0x3a
 80095ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	3302      	adds	r3, #2
 80095d0:	222f      	movs	r2, #47	; 0x2f
 80095d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	3303      	adds	r3, #3
 80095d8:	2200      	movs	r2, #0
 80095da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80095e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	371c      	adds	r7, #28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bc80      	pop	{r7}
 80095ea:	4770      	bx	lr
 80095ec:	200006b4 	.word	0x200006b4

080095f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80095fa:	2200      	movs	r2, #0
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7ff ffac 	bl	800955c <FATFS_LinkDriverEx>
 8009604:	4603      	mov	r3, r0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <__errno>:
 8009610:	4b01      	ldr	r3, [pc, #4]	; (8009618 <__errno+0x8>)
 8009612:	6818      	ldr	r0, [r3, #0]
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	20000108 	.word	0x20000108

0800961c <__libc_init_array>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	2600      	movs	r6, #0
 8009620:	4d0c      	ldr	r5, [pc, #48]	; (8009654 <__libc_init_array+0x38>)
 8009622:	4c0d      	ldr	r4, [pc, #52]	; (8009658 <__libc_init_array+0x3c>)
 8009624:	1b64      	subs	r4, r4, r5
 8009626:	10a4      	asrs	r4, r4, #2
 8009628:	42a6      	cmp	r6, r4
 800962a:	d109      	bne.n	8009640 <__libc_init_array+0x24>
 800962c:	f002 fa62 	bl	800baf4 <_init>
 8009630:	2600      	movs	r6, #0
 8009632:	4d0a      	ldr	r5, [pc, #40]	; (800965c <__libc_init_array+0x40>)
 8009634:	4c0a      	ldr	r4, [pc, #40]	; (8009660 <__libc_init_array+0x44>)
 8009636:	1b64      	subs	r4, r4, r5
 8009638:	10a4      	asrs	r4, r4, #2
 800963a:	42a6      	cmp	r6, r4
 800963c:	d105      	bne.n	800964a <__libc_init_array+0x2e>
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	f855 3b04 	ldr.w	r3, [r5], #4
 8009644:	4798      	blx	r3
 8009646:	3601      	adds	r6, #1
 8009648:	e7ee      	b.n	8009628 <__libc_init_array+0xc>
 800964a:	f855 3b04 	ldr.w	r3, [r5], #4
 800964e:	4798      	blx	r3
 8009650:	3601      	adds	r6, #1
 8009652:	e7f2      	b.n	800963a <__libc_init_array+0x1e>
 8009654:	0800c328 	.word	0x0800c328
 8009658:	0800c328 	.word	0x0800c328
 800965c:	0800c328 	.word	0x0800c328
 8009660:	0800c32c 	.word	0x0800c32c

08009664 <__retarget_lock_acquire>:
 8009664:	4770      	bx	lr

08009666 <__retarget_lock_acquire_recursive>:
 8009666:	4770      	bx	lr

08009668 <__retarget_lock_release>:
 8009668:	4770      	bx	lr

0800966a <__retarget_lock_release_recursive>:
 800966a:	4770      	bx	lr

0800966c <memcpy>:
 800966c:	440a      	add	r2, r1
 800966e:	4291      	cmp	r1, r2
 8009670:	f100 33ff 	add.w	r3, r0, #4294967295
 8009674:	d100      	bne.n	8009678 <memcpy+0xc>
 8009676:	4770      	bx	lr
 8009678:	b510      	push	{r4, lr}
 800967a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800967e:	4291      	cmp	r1, r2
 8009680:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009684:	d1f9      	bne.n	800967a <memcpy+0xe>
 8009686:	bd10      	pop	{r4, pc}

08009688 <memset>:
 8009688:	4603      	mov	r3, r0
 800968a:	4402      	add	r2, r0
 800968c:	4293      	cmp	r3, r2
 800968e:	d100      	bne.n	8009692 <memset+0xa>
 8009690:	4770      	bx	lr
 8009692:	f803 1b01 	strb.w	r1, [r3], #1
 8009696:	e7f9      	b.n	800968c <memset+0x4>

08009698 <_free_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4605      	mov	r5, r0
 800969c:	2900      	cmp	r1, #0
 800969e:	d040      	beq.n	8009722 <_free_r+0x8a>
 80096a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a4:	1f0c      	subs	r4, r1, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bfb8      	it	lt
 80096aa:	18e4      	addlt	r4, r4, r3
 80096ac:	f001 f92a 	bl	800a904 <__malloc_lock>
 80096b0:	4a1c      	ldr	r2, [pc, #112]	; (8009724 <_free_r+0x8c>)
 80096b2:	6813      	ldr	r3, [r2, #0]
 80096b4:	b933      	cbnz	r3, 80096c4 <_free_r+0x2c>
 80096b6:	6063      	str	r3, [r4, #4]
 80096b8:	6014      	str	r4, [r2, #0]
 80096ba:	4628      	mov	r0, r5
 80096bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096c0:	f001 b926 	b.w	800a910 <__malloc_unlock>
 80096c4:	42a3      	cmp	r3, r4
 80096c6:	d908      	bls.n	80096da <_free_r+0x42>
 80096c8:	6820      	ldr	r0, [r4, #0]
 80096ca:	1821      	adds	r1, r4, r0
 80096cc:	428b      	cmp	r3, r1
 80096ce:	bf01      	itttt	eq
 80096d0:	6819      	ldreq	r1, [r3, #0]
 80096d2:	685b      	ldreq	r3, [r3, #4]
 80096d4:	1809      	addeq	r1, r1, r0
 80096d6:	6021      	streq	r1, [r4, #0]
 80096d8:	e7ed      	b.n	80096b6 <_free_r+0x1e>
 80096da:	461a      	mov	r2, r3
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	b10b      	cbz	r3, 80096e4 <_free_r+0x4c>
 80096e0:	42a3      	cmp	r3, r4
 80096e2:	d9fa      	bls.n	80096da <_free_r+0x42>
 80096e4:	6811      	ldr	r1, [r2, #0]
 80096e6:	1850      	adds	r0, r2, r1
 80096e8:	42a0      	cmp	r0, r4
 80096ea:	d10b      	bne.n	8009704 <_free_r+0x6c>
 80096ec:	6820      	ldr	r0, [r4, #0]
 80096ee:	4401      	add	r1, r0
 80096f0:	1850      	adds	r0, r2, r1
 80096f2:	4283      	cmp	r3, r0
 80096f4:	6011      	str	r1, [r2, #0]
 80096f6:	d1e0      	bne.n	80096ba <_free_r+0x22>
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	4401      	add	r1, r0
 80096fe:	6011      	str	r1, [r2, #0]
 8009700:	6053      	str	r3, [r2, #4]
 8009702:	e7da      	b.n	80096ba <_free_r+0x22>
 8009704:	d902      	bls.n	800970c <_free_r+0x74>
 8009706:	230c      	movs	r3, #12
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	e7d6      	b.n	80096ba <_free_r+0x22>
 800970c:	6820      	ldr	r0, [r4, #0]
 800970e:	1821      	adds	r1, r4, r0
 8009710:	428b      	cmp	r3, r1
 8009712:	bf01      	itttt	eq
 8009714:	6819      	ldreq	r1, [r3, #0]
 8009716:	685b      	ldreq	r3, [r3, #4]
 8009718:	1809      	addeq	r1, r1, r0
 800971a:	6021      	streq	r1, [r4, #0]
 800971c:	6063      	str	r3, [r4, #4]
 800971e:	6054      	str	r4, [r2, #4]
 8009720:	e7cb      	b.n	80096ba <_free_r+0x22>
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	200006c4 	.word	0x200006c4

08009728 <sbrk_aligned>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	4e0e      	ldr	r6, [pc, #56]	; (8009764 <sbrk_aligned+0x3c>)
 800972c:	460c      	mov	r4, r1
 800972e:	6831      	ldr	r1, [r6, #0]
 8009730:	4605      	mov	r5, r0
 8009732:	b911      	cbnz	r1, 800973a <sbrk_aligned+0x12>
 8009734:	f000 f88c 	bl	8009850 <_sbrk_r>
 8009738:	6030      	str	r0, [r6, #0]
 800973a:	4621      	mov	r1, r4
 800973c:	4628      	mov	r0, r5
 800973e:	f000 f887 	bl	8009850 <_sbrk_r>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d00a      	beq.n	800975c <sbrk_aligned+0x34>
 8009746:	1cc4      	adds	r4, r0, #3
 8009748:	f024 0403 	bic.w	r4, r4, #3
 800974c:	42a0      	cmp	r0, r4
 800974e:	d007      	beq.n	8009760 <sbrk_aligned+0x38>
 8009750:	1a21      	subs	r1, r4, r0
 8009752:	4628      	mov	r0, r5
 8009754:	f000 f87c 	bl	8009850 <_sbrk_r>
 8009758:	3001      	adds	r0, #1
 800975a:	d101      	bne.n	8009760 <sbrk_aligned+0x38>
 800975c:	f04f 34ff 	mov.w	r4, #4294967295
 8009760:	4620      	mov	r0, r4
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	200006c8 	.word	0x200006c8

08009768 <_malloc_r>:
 8009768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976c:	1ccd      	adds	r5, r1, #3
 800976e:	f025 0503 	bic.w	r5, r5, #3
 8009772:	3508      	adds	r5, #8
 8009774:	2d0c      	cmp	r5, #12
 8009776:	bf38      	it	cc
 8009778:	250c      	movcc	r5, #12
 800977a:	2d00      	cmp	r5, #0
 800977c:	4607      	mov	r7, r0
 800977e:	db01      	blt.n	8009784 <_malloc_r+0x1c>
 8009780:	42a9      	cmp	r1, r5
 8009782:	d905      	bls.n	8009790 <_malloc_r+0x28>
 8009784:	230c      	movs	r3, #12
 8009786:	2600      	movs	r6, #0
 8009788:	603b      	str	r3, [r7, #0]
 800978a:	4630      	mov	r0, r6
 800978c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009790:	4e2e      	ldr	r6, [pc, #184]	; (800984c <_malloc_r+0xe4>)
 8009792:	f001 f8b7 	bl	800a904 <__malloc_lock>
 8009796:	6833      	ldr	r3, [r6, #0]
 8009798:	461c      	mov	r4, r3
 800979a:	bb34      	cbnz	r4, 80097ea <_malloc_r+0x82>
 800979c:	4629      	mov	r1, r5
 800979e:	4638      	mov	r0, r7
 80097a0:	f7ff ffc2 	bl	8009728 <sbrk_aligned>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	4604      	mov	r4, r0
 80097a8:	d14d      	bne.n	8009846 <_malloc_r+0xde>
 80097aa:	6834      	ldr	r4, [r6, #0]
 80097ac:	4626      	mov	r6, r4
 80097ae:	2e00      	cmp	r6, #0
 80097b0:	d140      	bne.n	8009834 <_malloc_r+0xcc>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	4631      	mov	r1, r6
 80097b6:	4638      	mov	r0, r7
 80097b8:	eb04 0803 	add.w	r8, r4, r3
 80097bc:	f000 f848 	bl	8009850 <_sbrk_r>
 80097c0:	4580      	cmp	r8, r0
 80097c2:	d13a      	bne.n	800983a <_malloc_r+0xd2>
 80097c4:	6821      	ldr	r1, [r4, #0]
 80097c6:	3503      	adds	r5, #3
 80097c8:	1a6d      	subs	r5, r5, r1
 80097ca:	f025 0503 	bic.w	r5, r5, #3
 80097ce:	3508      	adds	r5, #8
 80097d0:	2d0c      	cmp	r5, #12
 80097d2:	bf38      	it	cc
 80097d4:	250c      	movcc	r5, #12
 80097d6:	4638      	mov	r0, r7
 80097d8:	4629      	mov	r1, r5
 80097da:	f7ff ffa5 	bl	8009728 <sbrk_aligned>
 80097de:	3001      	adds	r0, #1
 80097e0:	d02b      	beq.n	800983a <_malloc_r+0xd2>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	442b      	add	r3, r5
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	e00e      	b.n	8009808 <_malloc_r+0xa0>
 80097ea:	6822      	ldr	r2, [r4, #0]
 80097ec:	1b52      	subs	r2, r2, r5
 80097ee:	d41e      	bmi.n	800982e <_malloc_r+0xc6>
 80097f0:	2a0b      	cmp	r2, #11
 80097f2:	d916      	bls.n	8009822 <_malloc_r+0xba>
 80097f4:	1961      	adds	r1, r4, r5
 80097f6:	42a3      	cmp	r3, r4
 80097f8:	6025      	str	r5, [r4, #0]
 80097fa:	bf18      	it	ne
 80097fc:	6059      	strne	r1, [r3, #4]
 80097fe:	6863      	ldr	r3, [r4, #4]
 8009800:	bf08      	it	eq
 8009802:	6031      	streq	r1, [r6, #0]
 8009804:	5162      	str	r2, [r4, r5]
 8009806:	604b      	str	r3, [r1, #4]
 8009808:	4638      	mov	r0, r7
 800980a:	f104 060b 	add.w	r6, r4, #11
 800980e:	f001 f87f 	bl	800a910 <__malloc_unlock>
 8009812:	f026 0607 	bic.w	r6, r6, #7
 8009816:	1d23      	adds	r3, r4, #4
 8009818:	1af2      	subs	r2, r6, r3
 800981a:	d0b6      	beq.n	800978a <_malloc_r+0x22>
 800981c:	1b9b      	subs	r3, r3, r6
 800981e:	50a3      	str	r3, [r4, r2]
 8009820:	e7b3      	b.n	800978a <_malloc_r+0x22>
 8009822:	6862      	ldr	r2, [r4, #4]
 8009824:	42a3      	cmp	r3, r4
 8009826:	bf0c      	ite	eq
 8009828:	6032      	streq	r2, [r6, #0]
 800982a:	605a      	strne	r2, [r3, #4]
 800982c:	e7ec      	b.n	8009808 <_malloc_r+0xa0>
 800982e:	4623      	mov	r3, r4
 8009830:	6864      	ldr	r4, [r4, #4]
 8009832:	e7b2      	b.n	800979a <_malloc_r+0x32>
 8009834:	4634      	mov	r4, r6
 8009836:	6876      	ldr	r6, [r6, #4]
 8009838:	e7b9      	b.n	80097ae <_malloc_r+0x46>
 800983a:	230c      	movs	r3, #12
 800983c:	4638      	mov	r0, r7
 800983e:	603b      	str	r3, [r7, #0]
 8009840:	f001 f866 	bl	800a910 <__malloc_unlock>
 8009844:	e7a1      	b.n	800978a <_malloc_r+0x22>
 8009846:	6025      	str	r5, [r4, #0]
 8009848:	e7de      	b.n	8009808 <_malloc_r+0xa0>
 800984a:	bf00      	nop
 800984c:	200006c4 	.word	0x200006c4

08009850 <_sbrk_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	2300      	movs	r3, #0
 8009854:	4d05      	ldr	r5, [pc, #20]	; (800986c <_sbrk_r+0x1c>)
 8009856:	4604      	mov	r4, r0
 8009858:	4608      	mov	r0, r1
 800985a:	602b      	str	r3, [r5, #0]
 800985c:	f7fc faf8 	bl	8005e50 <_sbrk>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_sbrk_r+0x1a>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	b103      	cbz	r3, 800986a <_sbrk_r+0x1a>
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	200006cc 	.word	0x200006cc

08009870 <siprintf>:
 8009870:	b40e      	push	{r1, r2, r3}
 8009872:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009876:	b500      	push	{lr}
 8009878:	b09c      	sub	sp, #112	; 0x70
 800987a:	ab1d      	add	r3, sp, #116	; 0x74
 800987c:	9002      	str	r0, [sp, #8]
 800987e:	9006      	str	r0, [sp, #24]
 8009880:	9107      	str	r1, [sp, #28]
 8009882:	9104      	str	r1, [sp, #16]
 8009884:	4808      	ldr	r0, [pc, #32]	; (80098a8 <siprintf+0x38>)
 8009886:	4909      	ldr	r1, [pc, #36]	; (80098ac <siprintf+0x3c>)
 8009888:	f853 2b04 	ldr.w	r2, [r3], #4
 800988c:	9105      	str	r1, [sp, #20]
 800988e:	6800      	ldr	r0, [r0, #0]
 8009890:	a902      	add	r1, sp, #8
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	f001 f89e 	bl	800a9d4 <_svfiprintf_r>
 8009898:	2200      	movs	r2, #0
 800989a:	9b02      	ldr	r3, [sp, #8]
 800989c:	701a      	strb	r2, [r3, #0]
 800989e:	b01c      	add	sp, #112	; 0x70
 80098a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a4:	b003      	add	sp, #12
 80098a6:	4770      	bx	lr
 80098a8:	20000108 	.word	0x20000108
 80098ac:	ffff0208 	.word	0xffff0208

080098b0 <__seofread>:
 80098b0:	2000      	movs	r0, #0
 80098b2:	4770      	bx	lr

080098b4 <iso_year_adjust>:
 80098b4:	6942      	ldr	r2, [r0, #20]
 80098b6:	f240 736c 	movw	r3, #1900	; 0x76c
 80098ba:	2a00      	cmp	r2, #0
 80098bc:	bfa8      	it	ge
 80098be:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80098c2:	4413      	add	r3, r2
 80098c4:	0792      	lsls	r2, r2, #30
 80098c6:	d105      	bne.n	80098d4 <iso_year_adjust+0x20>
 80098c8:	2164      	movs	r1, #100	; 0x64
 80098ca:	fb93 f2f1 	sdiv	r2, r3, r1
 80098ce:	fb01 3212 	mls	r2, r1, r2, r3
 80098d2:	b9da      	cbnz	r2, 800990c <iso_year_adjust+0x58>
 80098d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80098d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80098dc:	fb02 3311 	mls	r3, r2, r1, r3
 80098e0:	fab3 f383 	clz	r3, r3
 80098e4:	095b      	lsrs	r3, r3, #5
 80098e6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80098ea:	0040      	lsls	r0, r0, #1
 80098ec:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80098f0:	4418      	add	r0, r3
 80098f2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80098f6:	4298      	cmp	r0, r3
 80098f8:	d03a      	beq.n	8009970 <iso_year_adjust+0xbc>
 80098fa:	dc21      	bgt.n	8009940 <iso_year_adjust+0x8c>
 80098fc:	2801      	cmp	r0, #1
 80098fe:	dc1a      	bgt.n	8009936 <iso_year_adjust+0x82>
 8009900:	2800      	cmp	r0, #0
 8009902:	bfb4      	ite	lt
 8009904:	2000      	movlt	r0, #0
 8009906:	f04f 30ff 	movge.w	r0, #4294967295
 800990a:	4770      	bx	lr
 800990c:	2301      	movs	r3, #1
 800990e:	e7ea      	b.n	80098e6 <iso_year_adjust+0x32>
 8009910:	2817      	cmp	r0, #23
 8009912:	d813      	bhi.n	800993c <iso_year_adjust+0x88>
 8009914:	e8df f000 	tbb	[pc, r0]
 8009918:	0c0c0c0c 	.word	0x0c0c0c0c
 800991c:	0c0c1212 	.word	0x0c0c1212
 8009920:	12121212 	.word	0x12121212
 8009924:	12121212 	.word	0x12121212
 8009928:	0c0c1212 	.word	0x0c0c1212
 800992c:	0c0c1212 	.word	0x0c0c1212
 8009930:	f04f 30ff 	mov.w	r0, #4294967295
 8009934:	4770      	bx	lr
 8009936:	380a      	subs	r0, #10
 8009938:	2817      	cmp	r0, #23
 800993a:	d9e9      	bls.n	8009910 <iso_year_adjust+0x5c>
 800993c:	2000      	movs	r0, #0
 800993e:	4770      	bx	lr
 8009940:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8009944:	4298      	cmp	r0, r3
 8009946:	dc06      	bgt.n	8009956 <iso_year_adjust+0xa2>
 8009948:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800994c:	4298      	cmp	r0, r3
 800994e:	bfd4      	ite	le
 8009950:	2000      	movle	r0, #0
 8009952:	2001      	movgt	r0, #1
 8009954:	4770      	bx	lr
 8009956:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800995a:	3802      	subs	r0, #2
 800995c:	2815      	cmp	r0, #21
 800995e:	d8ed      	bhi.n	800993c <iso_year_adjust+0x88>
 8009960:	2301      	movs	r3, #1
 8009962:	4083      	lsls	r3, r0
 8009964:	4803      	ldr	r0, [pc, #12]	; (8009974 <iso_year_adjust+0xc0>)
 8009966:	4018      	ands	r0, r3
 8009968:	3800      	subs	r0, #0
 800996a:	bf18      	it	ne
 800996c:	2001      	movne	r0, #1
 800996e:	4770      	bx	lr
 8009970:	2001      	movs	r0, #1
 8009972:	4770      	bx	lr
 8009974:	002a001f 	.word	0x002a001f

08009978 <__strftime.isra.0>:
 8009978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997c:	461e      	mov	r6, r3
 800997e:	2300      	movs	r3, #0
 8009980:	4607      	mov	r7, r0
 8009982:	460d      	mov	r5, r1
 8009984:	461c      	mov	r4, r3
 8009986:	b08f      	sub	sp, #60	; 0x3c
 8009988:	9302      	str	r3, [sp, #8]
 800998a:	7813      	ldrb	r3, [r2, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 84b5 	beq.w	800a2fc <__strftime.isra.0+0x984>
 8009992:	2b25      	cmp	r3, #37	; 0x25
 8009994:	d11f      	bne.n	80099d6 <__strftime.isra.0+0x5e>
 8009996:	f892 b001 	ldrb.w	fp, [r2, #1]
 800999a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800999e:	d024      	beq.n	80099ea <__strftime.isra.0+0x72>
 80099a0:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80099a4:	d021      	beq.n	80099ea <__strftime.isra.0+0x72>
 80099a6:	f04f 0b00 	mov.w	fp, #0
 80099aa:	f102 0801 	add.w	r8, r2, #1
 80099ae:	f898 2000 	ldrb.w	r2, [r8]
 80099b2:	3a31      	subs	r2, #49	; 0x31
 80099b4:	2a08      	cmp	r2, #8
 80099b6:	d81b      	bhi.n	80099f0 <__strftime.isra.0+0x78>
 80099b8:	4640      	mov	r0, r8
 80099ba:	220a      	movs	r2, #10
 80099bc:	a906      	add	r1, sp, #24
 80099be:	f000 fdab 	bl	800a518 <strtoul>
 80099c2:	4681      	mov	r9, r0
 80099c4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80099c8:	f898 2000 	ldrb.w	r2, [r8]
 80099cc:	2a45      	cmp	r2, #69	; 0x45
 80099ce:	d112      	bne.n	80099f6 <__strftime.isra.0+0x7e>
 80099d0:	f108 0801 	add.w	r8, r8, #1
 80099d4:	e011      	b.n	80099fa <__strftime.isra.0+0x82>
 80099d6:	1e69      	subs	r1, r5, #1
 80099d8:	42a1      	cmp	r1, r4
 80099da:	d802      	bhi.n	80099e2 <__strftime.isra.0+0x6a>
 80099dc:	2400      	movs	r4, #0
 80099de:	f000 bc90 	b.w	800a302 <__strftime.isra.0+0x98a>
 80099e2:	553b      	strb	r3, [r7, r4]
 80099e4:	3201      	adds	r2, #1
 80099e6:	3401      	adds	r4, #1
 80099e8:	e7cf      	b.n	800998a <__strftime.isra.0+0x12>
 80099ea:	f102 0802 	add.w	r8, r2, #2
 80099ee:	e7de      	b.n	80099ae <__strftime.isra.0+0x36>
 80099f0:	f04f 0900 	mov.w	r9, #0
 80099f4:	e7e8      	b.n	80099c8 <__strftime.isra.0+0x50>
 80099f6:	2a4f      	cmp	r2, #79	; 0x4f
 80099f8:	d0ea      	beq.n	80099d0 <__strftime.isra.0+0x58>
 80099fa:	f898 0000 	ldrb.w	r0, [r8]
 80099fe:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8009a02:	2a55      	cmp	r2, #85	; 0x55
 8009a04:	d8ea      	bhi.n	80099dc <__strftime.isra.0+0x64>
 8009a06:	a301      	add	r3, pc, #4	; (adr r3, 8009a0c <__strftime.isra.0+0x94>)
 8009a08:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8009a0c:	0800a2f1 	.word	0x0800a2f1
 8009a10:	080099dd 	.word	0x080099dd
 8009a14:	080099dd 	.word	0x080099dd
 8009a18:	080099dd 	.word	0x080099dd
 8009a1c:	080099dd 	.word	0x080099dd
 8009a20:	080099dd 	.word	0x080099dd
 8009a24:	080099dd 	.word	0x080099dd
 8009a28:	080099dd 	.word	0x080099dd
 8009a2c:	080099dd 	.word	0x080099dd
 8009a30:	080099dd 	.word	0x080099dd
 8009a34:	080099dd 	.word	0x080099dd
 8009a38:	080099dd 	.word	0x080099dd
 8009a3c:	080099dd 	.word	0x080099dd
 8009a40:	080099dd 	.word	0x080099dd
 8009a44:	080099dd 	.word	0x080099dd
 8009a48:	080099dd 	.word	0x080099dd
 8009a4c:	080099dd 	.word	0x080099dd
 8009a50:	080099dd 	.word	0x080099dd
 8009a54:	080099dd 	.word	0x080099dd
 8009a58:	080099dd 	.word	0x080099dd
 8009a5c:	080099dd 	.word	0x080099dd
 8009a60:	080099dd 	.word	0x080099dd
 8009a64:	080099dd 	.word	0x080099dd
 8009a68:	080099dd 	.word	0x080099dd
 8009a6c:	080099dd 	.word	0x080099dd
 8009a70:	080099dd 	.word	0x080099dd
 8009a74:	080099dd 	.word	0x080099dd
 8009a78:	080099dd 	.word	0x080099dd
 8009a7c:	08009ba1 	.word	0x08009ba1
 8009a80:	08009bf9 	.word	0x08009bf9
 8009a84:	08009c67 	.word	0x08009c67
 8009a88:	08009d05 	.word	0x08009d05
 8009a8c:	080099dd 	.word	0x080099dd
 8009a90:	08009d4f 	.word	0x08009d4f
 8009a94:	08009e3d 	.word	0x08009e3d
 8009a98:	08009f13 	.word	0x08009f13
 8009a9c:	08009f21 	.word	0x08009f21
 8009aa0:	080099dd 	.word	0x080099dd
 8009aa4:	080099dd 	.word	0x080099dd
 8009aa8:	080099dd 	.word	0x080099dd
 8009aac:	08009f51 	.word	0x08009f51
 8009ab0:	080099dd 	.word	0x080099dd
 8009ab4:	080099dd 	.word	0x080099dd
 8009ab8:	08009f65 	.word	0x08009f65
 8009abc:	080099dd 	.word	0x080099dd
 8009ac0:	08009fb7 	.word	0x08009fb7
 8009ac4:	0800a0c9 	.word	0x0800a0c9
 8009ac8:	0800a0d9 	.word	0x0800a0d9
 8009acc:	0800a101 	.word	0x0800a101
 8009ad0:	0800a111 	.word	0x0800a111
 8009ad4:	0800a1ab 	.word	0x0800a1ab
 8009ad8:	08009c5f 	.word	0x08009c5f
 8009adc:	0800a1d7 	.word	0x0800a1d7
 8009ae0:	0800a29f 	.word	0x0800a29f
 8009ae4:	080099dd 	.word	0x080099dd
 8009ae8:	080099dd 	.word	0x080099dd
 8009aec:	080099dd 	.word	0x080099dd
 8009af0:	080099dd 	.word	0x080099dd
 8009af4:	080099dd 	.word	0x080099dd
 8009af8:	080099dd 	.word	0x080099dd
 8009afc:	08009b65 	.word	0x08009b65
 8009b00:	08009bcf 	.word	0x08009bcf
 8009b04:	08009c25 	.word	0x08009c25
 8009b08:	08009ce1 	.word	0x08009ce1
 8009b0c:	08009ce1 	.word	0x08009ce1
 8009b10:	080099dd 	.word	0x080099dd
 8009b14:	08009da1 	.word	0x08009da1
 8009b18:	08009bcf 	.word	0x08009bcf
 8009b1c:	080099dd 	.word	0x080099dd
 8009b20:	08009f43 	.word	0x08009f43
 8009b24:	08009f13 	.word	0x08009f13
 8009b28:	08009f21 	.word	0x08009f21
 8009b2c:	08009f4b 	.word	0x08009f4b
 8009b30:	08009f55 	.word	0x08009f55
 8009b34:	080099dd 	.word	0x080099dd
 8009b38:	08009f65 	.word	0x08009f65
 8009b3c:	080099dd 	.word	0x080099dd
 8009b40:	08009c4f 	.word	0x08009c4f
 8009b44:	08009fc9 	.word	0x08009fc9
 8009b48:	0800a0cd 	.word	0x0800a0cd
 8009b4c:	0800a0e7 	.word	0x0800a0e7
 8009b50:	080099dd 	.word	0x080099dd
 8009b54:	0800a19d 	.word	0x0800a19d
 8009b58:	08009c57 	.word	0x08009c57
 8009b5c:	0800a1bb 	.word	0x0800a1bb
 8009b60:	0800a229 	.word	0x0800a229
 8009b64:	69b3      	ldr	r3, [r6, #24]
 8009b66:	4aa9      	ldr	r2, [pc, #676]	; (8009e0c <__strftime.isra.0+0x494>)
 8009b68:	3318      	adds	r3, #24
 8009b6a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8009b6e:	4648      	mov	r0, r9
 8009b70:	f7f6 faec 	bl	800014c <strlen>
 8009b74:	f109 39ff 	add.w	r9, r9, #4294967295
 8009b78:	4420      	add	r0, r4
 8009b7a:	1e6b      	subs	r3, r5, #1
 8009b7c:	42a0      	cmp	r0, r4
 8009b7e:	d107      	bne.n	8009b90 <__strftime.isra.0+0x218>
 8009b80:	f898 3000 	ldrb.w	r3, [r8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 83b9 	beq.w	800a2fc <__strftime.isra.0+0x984>
 8009b8a:	f108 0201 	add.w	r2, r8, #1
 8009b8e:	e6fc      	b.n	800998a <__strftime.isra.0+0x12>
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	f67f af23 	bls.w	80099dc <__strftime.isra.0+0x64>
 8009b96:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009b9a:	553a      	strb	r2, [r7, r4]
 8009b9c:	3401      	adds	r4, #1
 8009b9e:	e7ed      	b.n	8009b7c <__strftime.isra.0+0x204>
 8009ba0:	69b2      	ldr	r2, [r6, #24]
 8009ba2:	4b9a      	ldr	r3, [pc, #616]	; (8009e0c <__strftime.isra.0+0x494>)
 8009ba4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009ba8:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8009bac:	4648      	mov	r0, r9
 8009bae:	f7f6 facd 	bl	800014c <strlen>
 8009bb2:	f109 39ff 	add.w	r9, r9, #4294967295
 8009bb6:	4420      	add	r0, r4
 8009bb8:	1e6b      	subs	r3, r5, #1
 8009bba:	42a0      	cmp	r0, r4
 8009bbc:	d0e0      	beq.n	8009b80 <__strftime.isra.0+0x208>
 8009bbe:	42a3      	cmp	r3, r4
 8009bc0:	f67f af0c 	bls.w	80099dc <__strftime.isra.0+0x64>
 8009bc4:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009bc8:	553a      	strb	r2, [r7, r4]
 8009bca:	3401      	adds	r4, #1
 8009bcc:	e7f5      	b.n	8009bba <__strftime.isra.0+0x242>
 8009bce:	4b8f      	ldr	r3, [pc, #572]	; (8009e0c <__strftime.isra.0+0x494>)
 8009bd0:	6932      	ldr	r2, [r6, #16]
 8009bd2:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8009bd6:	4648      	mov	r0, r9
 8009bd8:	f7f6 fab8 	bl	800014c <strlen>
 8009bdc:	f109 39ff 	add.w	r9, r9, #4294967295
 8009be0:	4420      	add	r0, r4
 8009be2:	1e6b      	subs	r3, r5, #1
 8009be4:	42a0      	cmp	r0, r4
 8009be6:	d0cb      	beq.n	8009b80 <__strftime.isra.0+0x208>
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	f67f aef7 	bls.w	80099dc <__strftime.isra.0+0x64>
 8009bee:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009bf2:	553a      	strb	r2, [r7, r4]
 8009bf4:	3401      	adds	r4, #1
 8009bf6:	e7f5      	b.n	8009be4 <__strftime.isra.0+0x26c>
 8009bf8:	6933      	ldr	r3, [r6, #16]
 8009bfa:	4a84      	ldr	r2, [pc, #528]	; (8009e0c <__strftime.isra.0+0x494>)
 8009bfc:	330c      	adds	r3, #12
 8009bfe:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8009c02:	4648      	mov	r0, r9
 8009c04:	f7f6 faa2 	bl	800014c <strlen>
 8009c08:	f109 39ff 	add.w	r9, r9, #4294967295
 8009c0c:	4420      	add	r0, r4
 8009c0e:	1e6b      	subs	r3, r5, #1
 8009c10:	42a0      	cmp	r0, r4
 8009c12:	d0b5      	beq.n	8009b80 <__strftime.isra.0+0x208>
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	f67f aee1 	bls.w	80099dc <__strftime.isra.0+0x64>
 8009c1a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009c1e:	553a      	strb	r2, [r7, r4]
 8009c20:	3401      	adds	r4, #1
 8009c22:	e7f5      	b.n	8009c10 <__strftime.isra.0+0x298>
 8009c24:	4b79      	ldr	r3, [pc, #484]	; (8009e0c <__strftime.isra.0+0x494>)
 8009c26:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8009c2a:	4648      	mov	r0, r9
 8009c2c:	f7f6 fa8e 	bl	800014c <strlen>
 8009c30:	f899 3000 	ldrb.w	r3, [r9]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0a3      	beq.n	8009b80 <__strftime.isra.0+0x208>
 8009c38:	4633      	mov	r3, r6
 8009c3a:	464a      	mov	r2, r9
 8009c3c:	1b29      	subs	r1, r5, r4
 8009c3e:	1938      	adds	r0, r7, r4
 8009c40:	f7ff fe9a 	bl	8009978 <__strftime.isra.0>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f77f aec9 	ble.w	80099dc <__strftime.isra.0+0x64>
 8009c4a:	4404      	add	r4, r0
 8009c4c:	e798      	b.n	8009b80 <__strftime.isra.0+0x208>
 8009c4e:	4b6f      	ldr	r3, [pc, #444]	; (8009e0c <__strftime.isra.0+0x494>)
 8009c50:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8009c54:	e7e9      	b.n	8009c2a <__strftime.isra.0+0x2b2>
 8009c56:	4b6d      	ldr	r3, [pc, #436]	; (8009e0c <__strftime.isra.0+0x494>)
 8009c58:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8009c5c:	e7e5      	b.n	8009c2a <__strftime.isra.0+0x2b2>
 8009c5e:	4b6b      	ldr	r3, [pc, #428]	; (8009e0c <__strftime.isra.0+0x494>)
 8009c60:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8009c64:	e7e1      	b.n	8009c2a <__strftime.isra.0+0x2b2>
 8009c66:	496a      	ldr	r1, [pc, #424]	; (8009e10 <__strftime.isra.0+0x498>)
 8009c68:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8009c6c:	458a      	cmp	sl, r1
 8009c6e:	bfac      	ite	ge
 8009c70:	2100      	movge	r1, #0
 8009c72:	2101      	movlt	r1, #1
 8009c74:	f1ba 0f00 	cmp.w	sl, #0
 8009c78:	db11      	blt.n	8009c9e <__strftime.isra.0+0x326>
 8009c7a:	2064      	movs	r0, #100	; 0x64
 8009c7c:	fb9a f0f0 	sdiv	r0, sl, r0
 8009c80:	3013      	adds	r0, #19
 8009c82:	f1bb 0f00 	cmp.w	fp, #0
 8009c86:	d014      	beq.n	8009cb2 <__strftime.isra.0+0x33a>
 8009c88:	2863      	cmp	r0, #99	; 0x63
 8009c8a:	dd27      	ble.n	8009cdc <__strftime.isra.0+0x364>
 8009c8c:	4b61      	ldr	r3, [pc, #388]	; (8009e14 <__strftime.isra.0+0x49c>)
 8009c8e:	4a62      	ldr	r2, [pc, #392]	; (8009e18 <__strftime.isra.0+0x4a0>)
 8009c90:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8009c94:	bf18      	it	ne
 8009c96:	461a      	movne	r2, r3
 8009c98:	f8df c180 	ldr.w	ip, [pc, #384]	; 8009e1c <__strftime.isra.0+0x4a4>
 8009c9c:	e00c      	b.n	8009cb8 <__strftime.isra.0+0x340>
 8009c9e:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8009ca2:	9103      	str	r1, [sp, #12]
 8009ca4:	f000 fdd6 	bl	800a854 <abs>
 8009ca8:	2264      	movs	r2, #100	; 0x64
 8009caa:	9903      	ldr	r1, [sp, #12]
 8009cac:	fb90 f0f2 	sdiv	r0, r0, r2
 8009cb0:	e7e7      	b.n	8009c82 <__strftime.isra.0+0x30a>
 8009cb2:	4a58      	ldr	r2, [pc, #352]	; (8009e14 <__strftime.isra.0+0x49c>)
 8009cb4:	f8df c168 	ldr.w	ip, [pc, #360]	; 8009e20 <__strftime.isra.0+0x4a8>
 8009cb8:	f1b9 0f02 	cmp.w	r9, #2
 8009cbc:	bf2c      	ite	cs
 8009cbe:	ebc1 0109 	rsbcs	r1, r1, r9
 8009cc2:	f1c1 0102 	rsbcc	r1, r1, #2
 8009cc6:	4b57      	ldr	r3, [pc, #348]	; (8009e24 <__strftime.isra.0+0x4ac>)
 8009cc8:	9100      	str	r1, [sp, #0]
 8009cca:	4951      	ldr	r1, [pc, #324]	; (8009e10 <__strftime.isra.0+0x498>)
 8009ccc:	9001      	str	r0, [sp, #4]
 8009cce:	458a      	cmp	sl, r1
 8009cd0:	bfa8      	it	ge
 8009cd2:	4613      	movge	r3, r2
 8009cd4:	4662      	mov	r2, ip
 8009cd6:	1b29      	subs	r1, r5, r4
 8009cd8:	1938      	adds	r0, r7, r4
 8009cda:	e029      	b.n	8009d30 <__strftime.isra.0+0x3b8>
 8009cdc:	4a4d      	ldr	r2, [pc, #308]	; (8009e14 <__strftime.isra.0+0x49c>)
 8009cde:	e7db      	b.n	8009c98 <__strftime.isra.0+0x320>
 8009ce0:	4951      	ldr	r1, [pc, #324]	; (8009e28 <__strftime.isra.0+0x4b0>)
 8009ce2:	4a52      	ldr	r2, [pc, #328]	; (8009e2c <__strftime.isra.0+0x4b4>)
 8009ce4:	68f3      	ldr	r3, [r6, #12]
 8009ce6:	2864      	cmp	r0, #100	; 0x64
 8009ce8:	bf08      	it	eq
 8009cea:	460a      	moveq	r2, r1
 8009cec:	1b29      	subs	r1, r5, r4
 8009cee:	1938      	adds	r0, r7, r4
 8009cf0:	f001 f906 	bl	800af00 <sniprintf>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	f6ff ae71 	blt.w	80099dc <__strftime.isra.0+0x64>
 8009cfa:	4404      	add	r4, r0
 8009cfc:	42a5      	cmp	r5, r4
 8009cfe:	f63f af3f 	bhi.w	8009b80 <__strftime.isra.0+0x208>
 8009d02:	e66b      	b.n	80099dc <__strftime.isra.0+0x64>
 8009d04:	6970      	ldr	r0, [r6, #20]
 8009d06:	6933      	ldr	r3, [r6, #16]
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	68f2      	ldr	r2, [r6, #12]
 8009d0c:	eb07 0904 	add.w	r9, r7, r4
 8009d10:	eba5 0a04 	sub.w	sl, r5, r4
 8009d14:	f103 0b01 	add.w	fp, r3, #1
 8009d18:	db0d      	blt.n	8009d36 <__strftime.isra.0+0x3be>
 8009d1a:	2164      	movs	r1, #100	; 0x64
 8009d1c:	fb90 fcf1 	sdiv	ip, r0, r1
 8009d20:	fb01 001c 	mls	r0, r1, ip, r0
 8009d24:	e9cd 2000 	strd	r2, r0, [sp]
 8009d28:	465b      	mov	r3, fp
 8009d2a:	4651      	mov	r1, sl
 8009d2c:	4648      	mov	r0, r9
 8009d2e:	4a40      	ldr	r2, [pc, #256]	; (8009e30 <__strftime.isra.0+0x4b8>)
 8009d30:	f001 f8e6 	bl	800af00 <sniprintf>
 8009d34:	e7de      	b.n	8009cf4 <__strftime.isra.0+0x37c>
 8009d36:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009d3a:	9203      	str	r2, [sp, #12]
 8009d3c:	f000 fd8a 	bl	800a854 <abs>
 8009d40:	2164      	movs	r1, #100	; 0x64
 8009d42:	fb90 fcf1 	sdiv	ip, r0, r1
 8009d46:	9a03      	ldr	r2, [sp, #12]
 8009d48:	fb0c 0011 	mls	r0, ip, r1, r0
 8009d4c:	e7ea      	b.n	8009d24 <__strftime.isra.0+0x3ac>
 8009d4e:	2225      	movs	r2, #37	; 0x25
 8009d50:	f88d 2018 	strb.w	r2, [sp, #24]
 8009d54:	f1bb 0f00 	cmp.w	fp, #0
 8009d58:	d011      	beq.n	8009d7e <__strftime.isra.0+0x406>
 8009d5a:	f1b9 0f06 	cmp.w	r9, #6
 8009d5e:	bf38      	it	cc
 8009d60:	f04f 0906 	movcc.w	r9, #6
 8009d64:	f1b9 0306 	subs.w	r3, r9, #6
 8009d68:	f88d b019 	strb.w	fp, [sp, #25]
 8009d6c:	d10c      	bne.n	8009d88 <__strftime.isra.0+0x410>
 8009d6e:	f10d 001a 	add.w	r0, sp, #26
 8009d72:	4930      	ldr	r1, [pc, #192]	; (8009e34 <__strftime.isra.0+0x4bc>)
 8009d74:	f001 f922 	bl	800afbc <strcpy>
 8009d78:	4633      	mov	r3, r6
 8009d7a:	aa06      	add	r2, sp, #24
 8009d7c:	e75e      	b.n	8009c3c <__strftime.isra.0+0x2c4>
 8009d7e:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8009d82:	f04f 090a 	mov.w	r9, #10
 8009d86:	e7ed      	b.n	8009d64 <__strftime.isra.0+0x3ec>
 8009d88:	211e      	movs	r1, #30
 8009d8a:	4a2b      	ldr	r2, [pc, #172]	; (8009e38 <__strftime.isra.0+0x4c0>)
 8009d8c:	f10d 001a 	add.w	r0, sp, #26
 8009d90:	f001 f8b6 	bl	800af00 <sniprintf>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	ddea      	ble.n	8009d6e <__strftime.isra.0+0x3f6>
 8009d98:	f10d 031a 	add.w	r3, sp, #26
 8009d9c:	4418      	add	r0, r3
 8009d9e:	e7e8      	b.n	8009d72 <__strftime.isra.0+0x3fa>
 8009da0:	4630      	mov	r0, r6
 8009da2:	f7ff fd87 	bl	80098b4 <iso_year_adjust>
 8009da6:	4681      	mov	r9, r0
 8009da8:	6970      	ldr	r0, [r6, #20]
 8009daa:	2800      	cmp	r0, #0
 8009dac:	db11      	blt.n	8009dd2 <__strftime.isra.0+0x45a>
 8009dae:	2364      	movs	r3, #100	; 0x64
 8009db0:	fb90 f2f3 	sdiv	r2, r0, r3
 8009db4:	fb03 0012 	mls	r0, r3, r2, r0
 8009db8:	2264      	movs	r2, #100	; 0x64
 8009dba:	4481      	add	r9, r0
 8009dbc:	fb99 f3f2 	sdiv	r3, r9, r2
 8009dc0:	fb02 9913 	mls	r9, r2, r3, r9
 8009dc4:	4491      	add	r9, r2
 8009dc6:	fbb9 f3f2 	udiv	r3, r9, r2
 8009dca:	fb02 9313 	mls	r3, r2, r3, r9
 8009dce:	4a16      	ldr	r2, [pc, #88]	; (8009e28 <__strftime.isra.0+0x4b0>)
 8009dd0:	e78c      	b.n	8009cec <__strftime.isra.0+0x374>
 8009dd2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009dd6:	f000 fd3d 	bl	800a854 <abs>
 8009dda:	2364      	movs	r3, #100	; 0x64
 8009ddc:	fb90 f2f3 	sdiv	r2, r0, r3
 8009de0:	f1b9 0f00 	cmp.w	r9, #0
 8009de4:	fb02 0013 	mls	r0, r2, r3, r0
 8009de8:	da07      	bge.n	8009dfa <__strftime.isra.0+0x482>
 8009dea:	6972      	ldr	r2, [r6, #20]
 8009dec:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8009df0:	429a      	cmp	r2, r3
 8009df2:	bfb8      	it	lt
 8009df4:	f04f 0901 	movlt.w	r9, #1
 8009df8:	e7de      	b.n	8009db8 <__strftime.isra.0+0x440>
 8009dfa:	d0dd      	beq.n	8009db8 <__strftime.isra.0+0x440>
 8009dfc:	6972      	ldr	r2, [r6, #20]
 8009dfe:	4b04      	ldr	r3, [pc, #16]	; (8009e10 <__strftime.isra.0+0x498>)
 8009e00:	429a      	cmp	r2, r3
 8009e02:	bfb8      	it	lt
 8009e04:	f04f 39ff 	movlt.w	r9, #4294967295
 8009e08:	e7d6      	b.n	8009db8 <__strftime.isra.0+0x440>
 8009e0a:	bf00      	nop
 8009e0c:	0800c040 	.word	0x0800c040
 8009e10:	fffff894 	.word	0xfffff894
 8009e14:	0800c27e 	.word	0x0800c27e
 8009e18:	0800becb 	.word	0x0800becb
 8009e1c:	0800bec3 	.word	0x0800bec3
 8009e20:	0800bebc 	.word	0x0800bebc
 8009e24:	0800c30d 	.word	0x0800c30d
 8009e28:	0800bedb 	.word	0x0800bedb
 8009e2c:	0800becd 	.word	0x0800becd
 8009e30:	0800bed1 	.word	0x0800bed1
 8009e34:	0800bee4 	.word	0x0800bee4
 8009e38:	0800bee0 	.word	0x0800bee0
 8009e3c:	6971      	ldr	r1, [r6, #20]
 8009e3e:	4aba      	ldr	r2, [pc, #744]	; (800a128 <__strftime.isra.0+0x7b0>)
 8009e40:	4630      	mov	r0, r6
 8009e42:	4291      	cmp	r1, r2
 8009e44:	bfac      	ite	ge
 8009e46:	2300      	movge	r3, #0
 8009e48:	2301      	movlt	r3, #1
 8009e4a:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8009e4e:	f7ff fd31 	bl	80098b4 <iso_year_adjust>
 8009e52:	9904      	ldr	r1, [sp, #16]
 8009e54:	4682      	mov	sl, r0
 8009e56:	2900      	cmp	r1, #0
 8009e58:	db2c      	blt.n	8009eb4 <__strftime.isra.0+0x53c>
 8009e5a:	2264      	movs	r2, #100	; 0x64
 8009e5c:	fb91 f2f2 	sdiv	r2, r1, r2
 8009e60:	3213      	adds	r2, #19
 8009e62:	6970      	ldr	r0, [r6, #20]
 8009e64:	2800      	cmp	r0, #0
 8009e66:	db2f      	blt.n	8009ec8 <__strftime.isra.0+0x550>
 8009e68:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8009e6c:	fb90 fefc 	sdiv	lr, r0, ip
 8009e70:	fb0c 001e 	mls	r0, ip, lr, r0
 8009e74:	f1ba 0f00 	cmp.w	sl, #0
 8009e78:	da35      	bge.n	8009ee6 <__strftime.isra.0+0x56e>
 8009e7a:	6971      	ldr	r1, [r6, #20]
 8009e7c:	4bab      	ldr	r3, [pc, #684]	; (800a12c <__strftime.isra.0+0x7b4>)
 8009e7e:	4299      	cmp	r1, r3
 8009e80:	db3b      	blt.n	8009efa <__strftime.isra.0+0x582>
 8009e82:	4482      	add	sl, r0
 8009e84:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009e88:	d13c      	bne.n	8009f04 <__strftime.isra.0+0x58c>
 8009e8a:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8009e8e:	3a01      	subs	r2, #1
 8009e90:	2064      	movs	r0, #100	; 0x64
 8009e92:	9b03      	ldr	r3, [sp, #12]
 8009e94:	fb00 aa02 	mla	sl, r0, r2, sl
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 81a8 	beq.w	800a1ee <__strftime.isra.0+0x876>
 8009e9e:	222d      	movs	r2, #45	; 0x2d
 8009ea0:	f88d 2018 	strb.w	r2, [sp, #24]
 8009ea4:	f1b9 0f00 	cmp.w	r9, #0
 8009ea8:	d001      	beq.n	8009eae <__strftime.isra.0+0x536>
 8009eaa:	f109 39ff 	add.w	r9, r9, #4294967295
 8009eae:	f10d 0219 	add.w	r2, sp, #25
 8009eb2:	e1a7      	b.n	800a204 <__strftime.isra.0+0x88c>
 8009eb4:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8009eb8:	9104      	str	r1, [sp, #16]
 8009eba:	f000 fccb 	bl	800a854 <abs>
 8009ebe:	2264      	movs	r2, #100	; 0x64
 8009ec0:	9904      	ldr	r1, [sp, #16]
 8009ec2:	fb90 f2f2 	sdiv	r2, r0, r2
 8009ec6:	e7cc      	b.n	8009e62 <__strftime.isra.0+0x4ea>
 8009ec8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009ecc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009ed0:	f000 fcc0 	bl	800a854 <abs>
 8009ed4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009ed8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8009edc:	fb90 fefc 	sdiv	lr, r0, ip
 8009ee0:	fb0e 001c 	mls	r0, lr, ip, r0
 8009ee4:	e7c6      	b.n	8009e74 <__strftime.isra.0+0x4fc>
 8009ee6:	d0cc      	beq.n	8009e82 <__strftime.isra.0+0x50a>
 8009ee8:	4b8f      	ldr	r3, [pc, #572]	; (800a128 <__strftime.isra.0+0x7b0>)
 8009eea:	4299      	cmp	r1, r3
 8009eec:	bfb6      	itet	lt
 8009eee:	2301      	movlt	r3, #1
 8009ef0:	2300      	movge	r3, #0
 8009ef2:	f04f 3aff 	movlt.w	sl, #4294967295
 8009ef6:	9303      	str	r3, [sp, #12]
 8009ef8:	e7c3      	b.n	8009e82 <__strftime.isra.0+0x50a>
 8009efa:	f04f 0a01 	mov.w	sl, #1
 8009efe:	f8cd a00c 	str.w	sl, [sp, #12]
 8009f02:	e7be      	b.n	8009e82 <__strftime.isra.0+0x50a>
 8009f04:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8009f08:	bf04      	itt	eq
 8009f0a:	f04f 0a00 	moveq.w	sl, #0
 8009f0e:	3201      	addeq	r2, #1
 8009f10:	e7be      	b.n	8009e90 <__strftime.isra.0+0x518>
 8009f12:	4987      	ldr	r1, [pc, #540]	; (800a130 <__strftime.isra.0+0x7b8>)
 8009f14:	4a87      	ldr	r2, [pc, #540]	; (800a134 <__strftime.isra.0+0x7bc>)
 8009f16:	68b3      	ldr	r3, [r6, #8]
 8009f18:	286b      	cmp	r0, #107	; 0x6b
 8009f1a:	bf08      	it	eq
 8009f1c:	460a      	moveq	r2, r1
 8009f1e:	e6e5      	b.n	8009cec <__strftime.isra.0+0x374>
 8009f20:	68b3      	ldr	r3, [r6, #8]
 8009f22:	b163      	cbz	r3, 8009f3e <__strftime.isra.0+0x5c6>
 8009f24:	2b0c      	cmp	r3, #12
 8009f26:	d004      	beq.n	8009f32 <__strftime.isra.0+0x5ba>
 8009f28:	210c      	movs	r1, #12
 8009f2a:	fb93 f2f1 	sdiv	r2, r3, r1
 8009f2e:	fb01 3312 	mls	r3, r1, r2, r3
 8009f32:	4980      	ldr	r1, [pc, #512]	; (800a134 <__strftime.isra.0+0x7bc>)
 8009f34:	4a7e      	ldr	r2, [pc, #504]	; (800a130 <__strftime.isra.0+0x7b8>)
 8009f36:	2849      	cmp	r0, #73	; 0x49
 8009f38:	bf08      	it	eq
 8009f3a:	460a      	moveq	r2, r1
 8009f3c:	e6d6      	b.n	8009cec <__strftime.isra.0+0x374>
 8009f3e:	230c      	movs	r3, #12
 8009f40:	e7f7      	b.n	8009f32 <__strftime.isra.0+0x5ba>
 8009f42:	69f3      	ldr	r3, [r6, #28]
 8009f44:	4a7c      	ldr	r2, [pc, #496]	; (800a138 <__strftime.isra.0+0x7c0>)
 8009f46:	3301      	adds	r3, #1
 8009f48:	e6d0      	b.n	8009cec <__strftime.isra.0+0x374>
 8009f4a:	6933      	ldr	r3, [r6, #16]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	e73e      	b.n	8009dce <__strftime.isra.0+0x456>
 8009f50:	6873      	ldr	r3, [r6, #4]
 8009f52:	e73c      	b.n	8009dce <__strftime.isra.0+0x456>
 8009f54:	1e6b      	subs	r3, r5, #1
 8009f56:	429c      	cmp	r4, r3
 8009f58:	f4bf ad40 	bcs.w	80099dc <__strftime.isra.0+0x64>
 8009f5c:	230a      	movs	r3, #10
 8009f5e:	553b      	strb	r3, [r7, r4]
 8009f60:	3401      	adds	r4, #1
 8009f62:	e60d      	b.n	8009b80 <__strftime.isra.0+0x208>
 8009f64:	68b3      	ldr	r3, [r6, #8]
 8009f66:	2b0b      	cmp	r3, #11
 8009f68:	bfd4      	ite	le
 8009f6a:	2200      	movle	r2, #0
 8009f6c:	2201      	movgt	r2, #1
 8009f6e:	4b73      	ldr	r3, [pc, #460]	; (800a13c <__strftime.isra.0+0x7c4>)
 8009f70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009f74:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8009f78:	4648      	mov	r0, r9
 8009f7a:	f7f6 f8e7 	bl	800014c <strlen>
 8009f7e:	f109 32ff 	add.w	r2, r9, #4294967295
 8009f82:	4420      	add	r0, r4
 8009f84:	f105 3cff 	add.w	ip, r5, #4294967295
 8009f88:	42a0      	cmp	r0, r4
 8009f8a:	f43f adf9 	beq.w	8009b80 <__strftime.isra.0+0x208>
 8009f8e:	45a4      	cmp	ip, r4
 8009f90:	f67f ad24 	bls.w	80099dc <__strftime.isra.0+0x64>
 8009f94:	f898 1000 	ldrb.w	r1, [r8]
 8009f98:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009f9c:	2950      	cmp	r1, #80	; 0x50
 8009f9e:	d107      	bne.n	8009fb0 <__strftime.isra.0+0x638>
 8009fa0:	4967      	ldr	r1, [pc, #412]	; (800a140 <__strftime.isra.0+0x7c8>)
 8009fa2:	5cc9      	ldrb	r1, [r1, r3]
 8009fa4:	f001 0103 	and.w	r1, r1, #3
 8009fa8:	2901      	cmp	r1, #1
 8009faa:	bf08      	it	eq
 8009fac:	3320      	addeq	r3, #32
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	553b      	strb	r3, [r7, r4]
 8009fb2:	3401      	adds	r4, #1
 8009fb4:	e7e8      	b.n	8009f88 <__strftime.isra.0+0x610>
 8009fb6:	6873      	ldr	r3, [r6, #4]
 8009fb8:	4a62      	ldr	r2, [pc, #392]	; (800a144 <__strftime.isra.0+0x7cc>)
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	68b3      	ldr	r3, [r6, #8]
 8009fbe:	1b29      	subs	r1, r5, r4
 8009fc0:	1938      	adds	r0, r7, r4
 8009fc2:	f000 ff9d 	bl	800af00 <sniprintf>
 8009fc6:	e695      	b.n	8009cf4 <__strftime.isra.0+0x37c>
 8009fc8:	6a33      	ldr	r3, [r6, #32]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	db79      	blt.n	800a0c2 <__strftime.isra.0+0x74a>
 8009fce:	f000 faad 	bl	800a52c <__tz_lock>
 8009fd2:	9b02      	ldr	r3, [sp, #8]
 8009fd4:	b90b      	cbnz	r3, 8009fda <__strftime.isra.0+0x662>
 8009fd6:	f000 fab5 	bl	800a544 <_tzset_unlocked>
 8009fda:	f000 fc83 	bl	800a8e4 <__gettzinfo>
 8009fde:	6a33      	ldr	r3, [r6, #32]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bfd4      	ite	le
 8009fe4:	2200      	movle	r2, #0
 8009fe6:	2201      	movgt	r2, #1
 8009fe8:	2328      	movs	r3, #40	; 0x28
 8009fea:	fb02 3303 	mla	r3, r2, r3, r3
 8009fee:	58c3      	ldr	r3, [r0, r3]
 8009ff0:	f1c3 0900 	rsb	r9, r3, #0
 8009ff4:	f000 faa0 	bl	800a538 <__tz_unlock>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	9302      	str	r3, [sp, #8]
 8009ffc:	6972      	ldr	r2, [r6, #20]
 8009ffe:	1b29      	subs	r1, r5, r4
 800a000:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800a004:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800a008:	f16c 0c00 	sbc.w	ip, ip, #0
 800a00c:	f1bc 0f00 	cmp.w	ip, #0
 800a010:	eb07 0004 	add.w	r0, r7, r4
 800a014:	da02      	bge.n	800a01c <__strftime.isra.0+0x6a4>
 800a016:	3303      	adds	r3, #3
 800a018:	f14c 0c00 	adc.w	ip, ip, #0
 800a01c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800a020:	f102 3aff 	add.w	sl, r2, #4294967295
 800a024:	fb9a fefe 	sdiv	lr, sl, lr
 800a028:	089b      	lsrs	r3, r3, #2
 800a02a:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800a02e:	ebb3 030e 	subs.w	r3, r3, lr
 800a032:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800a036:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800a03a:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800a03e:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800a042:	fb9a fefe 	sdiv	lr, sl, lr
 800a046:	eb13 030e 	adds.w	r3, r3, lr
 800a04a:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800a04e:	f240 1c6d 	movw	ip, #365	; 0x16d
 800a052:	3a46      	subs	r2, #70	; 0x46
 800a054:	fb0c f202 	mul.w	r2, ip, r2
 800a058:	f04f 0c18 	mov.w	ip, #24
 800a05c:	189b      	adds	r3, r3, r2
 800a05e:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800a062:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800a066:	eb13 030e 	adds.w	r3, r3, lr
 800a06a:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800a06e:	fba3 3e0c 	umull	r3, lr, r3, ip
 800a072:	fb0c e202 	mla	r2, ip, r2, lr
 800a076:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800a07a:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800a07e:	eb13 030e 	adds.w	r3, r3, lr
 800a082:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800a086:	fba3 320c 	umull	r3, r2, r3, ip
 800a08a:	fb0c 220e 	mla	r2, ip, lr, r2
 800a08e:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800a092:	eb13 030e 	adds.w	r3, r3, lr
 800a096:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800a09a:	fba3 3e0c 	umull	r3, lr, r3, ip
 800a09e:	fb0c e202 	mla	r2, ip, r2, lr
 800a0a2:	f8d6 e000 	ldr.w	lr, [r6]
 800a0a6:	eb13 030e 	adds.w	r3, r3, lr
 800a0aa:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800a0ae:	ebb3 0309 	subs.w	r3, r3, r9
 800a0b2:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800a0b6:	e9cd 3200 	strd	r3, r2, [sp]
 800a0ba:	4a23      	ldr	r2, [pc, #140]	; (800a148 <__strftime.isra.0+0x7d0>)
 800a0bc:	f000 ff20 	bl	800af00 <sniprintf>
 800a0c0:	e618      	b.n	8009cf4 <__strftime.isra.0+0x37c>
 800a0c2:	f04f 0900 	mov.w	r9, #0
 800a0c6:	e799      	b.n	8009ffc <__strftime.isra.0+0x684>
 800a0c8:	6833      	ldr	r3, [r6, #0]
 800a0ca:	e680      	b.n	8009dce <__strftime.isra.0+0x456>
 800a0cc:	1e6b      	subs	r3, r5, #1
 800a0ce:	429c      	cmp	r4, r3
 800a0d0:	f4bf ac84 	bcs.w	80099dc <__strftime.isra.0+0x64>
 800a0d4:	2309      	movs	r3, #9
 800a0d6:	e742      	b.n	8009f5e <__strftime.isra.0+0x5e6>
 800a0d8:	6833      	ldr	r3, [r6, #0]
 800a0da:	4a1c      	ldr	r2, [pc, #112]	; (800a14c <__strftime.isra.0+0x7d4>)
 800a0dc:	9301      	str	r3, [sp, #4]
 800a0de:	6873      	ldr	r3, [r6, #4]
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	68b3      	ldr	r3, [r6, #8]
 800a0e4:	e5f7      	b.n	8009cd6 <__strftime.isra.0+0x35e>
 800a0e6:	1e6b      	subs	r3, r5, #1
 800a0e8:	429c      	cmp	r4, r3
 800a0ea:	f4bf ac77 	bcs.w	80099dc <__strftime.isra.0+0x64>
 800a0ee:	69b3      	ldr	r3, [r6, #24]
 800a0f0:	1c62      	adds	r2, r4, #1
 800a0f2:	b91b      	cbnz	r3, 800a0fc <__strftime.isra.0+0x784>
 800a0f4:	2337      	movs	r3, #55	; 0x37
 800a0f6:	553b      	strb	r3, [r7, r4]
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	e541      	b.n	8009b80 <__strftime.isra.0+0x208>
 800a0fc:	3330      	adds	r3, #48	; 0x30
 800a0fe:	e7fa      	b.n	800a0f6 <__strftime.isra.0+0x77e>
 800a100:	69f3      	ldr	r3, [r6, #28]
 800a102:	69b2      	ldr	r2, [r6, #24]
 800a104:	3307      	adds	r3, #7
 800a106:	1a9b      	subs	r3, r3, r2
 800a108:	2207      	movs	r2, #7
 800a10a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a10e:	e65e      	b.n	8009dce <__strftime.isra.0+0x456>
 800a110:	4630      	mov	r0, r6
 800a112:	f7ff fbcf 	bl	80098b4 <iso_year_adjust>
 800a116:	69b2      	ldr	r2, [r6, #24]
 800a118:	b1d2      	cbz	r2, 800a150 <__strftime.isra.0+0x7d8>
 800a11a:	3a01      	subs	r2, #1
 800a11c:	2800      	cmp	r0, #0
 800a11e:	dc3b      	bgt.n	800a198 <__strftime.isra.0+0x820>
 800a120:	69f3      	ldr	r3, [r6, #28]
 800a122:	d117      	bne.n	800a154 <__strftime.isra.0+0x7dc>
 800a124:	330a      	adds	r3, #10
 800a126:	e7ee      	b.n	800a106 <__strftime.isra.0+0x78e>
 800a128:	fffff894 	.word	0xfffff894
 800a12c:	fffff895 	.word	0xfffff895
 800a130:	0800becd 	.word	0x0800becd
 800a134:	0800bedb 	.word	0x0800bedb
 800a138:	0800bef0 	.word	0x0800bef0
 800a13c:	0800c040 	.word	0x0800c040
 800a140:	0800c179 	.word	0x0800c179
 800a144:	0800beff 	.word	0x0800beff
 800a148:	0800bef5 	.word	0x0800bef5
 800a14c:	0800befa 	.word	0x0800befa
 800a150:	2206      	movs	r2, #6
 800a152:	e7e3      	b.n	800a11c <__strftime.isra.0+0x7a4>
 800a154:	6971      	ldr	r1, [r6, #20]
 800a156:	1ad2      	subs	r2, r2, r3
 800a158:	2900      	cmp	r1, #0
 800a15a:	f240 736b 	movw	r3, #1899	; 0x76b
 800a15e:	bfa8      	it	ge
 800a160:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800a164:	440b      	add	r3, r1
 800a166:	0799      	lsls	r1, r3, #30
 800a168:	d105      	bne.n	800a176 <__strftime.isra.0+0x7fe>
 800a16a:	2064      	movs	r0, #100	; 0x64
 800a16c:	fb93 f1f0 	sdiv	r1, r3, r0
 800a170:	fb00 3111 	mls	r1, r0, r1, r3
 800a174:	b971      	cbnz	r1, 800a194 <__strftime.isra.0+0x81c>
 800a176:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a17a:	fb93 f0f1 	sdiv	r0, r3, r1
 800a17e:	fb01 3310 	mls	r3, r1, r0, r3
 800a182:	fab3 f383 	clz	r3, r3
 800a186:	095b      	lsrs	r3, r3, #5
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	2b05      	cmp	r3, #5
 800a18c:	bfb4      	ite	lt
 800a18e:	2335      	movlt	r3, #53	; 0x35
 800a190:	2334      	movge	r3, #52	; 0x34
 800a192:	e61c      	b.n	8009dce <__strftime.isra.0+0x456>
 800a194:	2301      	movs	r3, #1
 800a196:	e7f7      	b.n	800a188 <__strftime.isra.0+0x810>
 800a198:	2301      	movs	r3, #1
 800a19a:	e618      	b.n	8009dce <__strftime.isra.0+0x456>
 800a19c:	1e6b      	subs	r3, r5, #1
 800a19e:	429c      	cmp	r4, r3
 800a1a0:	f4bf ac1c 	bcs.w	80099dc <__strftime.isra.0+0x64>
 800a1a4:	69b3      	ldr	r3, [r6, #24]
 800a1a6:	3330      	adds	r3, #48	; 0x30
 800a1a8:	e6d9      	b.n	8009f5e <__strftime.isra.0+0x5e6>
 800a1aa:	69b2      	ldr	r2, [r6, #24]
 800a1ac:	b11a      	cbz	r2, 800a1b6 <__strftime.isra.0+0x83e>
 800a1ae:	3a01      	subs	r2, #1
 800a1b0:	69f3      	ldr	r3, [r6, #28]
 800a1b2:	3307      	adds	r3, #7
 800a1b4:	e7a7      	b.n	800a106 <__strftime.isra.0+0x78e>
 800a1b6:	2206      	movs	r2, #6
 800a1b8:	e7fa      	b.n	800a1b0 <__strftime.isra.0+0x838>
 800a1ba:	6970      	ldr	r0, [r6, #20]
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	db05      	blt.n	800a1cc <__strftime.isra.0+0x854>
 800a1c0:	2364      	movs	r3, #100	; 0x64
 800a1c2:	fb90 f2f3 	sdiv	r2, r0, r3
 800a1c6:	fb02 0313 	mls	r3, r2, r3, r0
 800a1ca:	e600      	b.n	8009dce <__strftime.isra.0+0x456>
 800a1cc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800a1d0:	f000 fb40 	bl	800a854 <abs>
 800a1d4:	e7f4      	b.n	800a1c0 <__strftime.isra.0+0x848>
 800a1d6:	6972      	ldr	r2, [r6, #20]
 800a1d8:	494c      	ldr	r1, [pc, #304]	; (800a30c <__strftime.isra.0+0x994>)
 800a1da:	428a      	cmp	r2, r1
 800a1dc:	da05      	bge.n	800a1ea <__strftime.isra.0+0x872>
 800a1de:	202d      	movs	r0, #45	; 0x2d
 800a1e0:	eba1 0a02 	sub.w	sl, r1, r2
 800a1e4:	f88d 0018 	strb.w	r0, [sp, #24]
 800a1e8:	e65c      	b.n	8009ea4 <__strftime.isra.0+0x52c>
 800a1ea:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800a1ee:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800a1f2:	d106      	bne.n	800a202 <__strftime.isra.0+0x88a>
 800a1f4:	f242 720f 	movw	r2, #9999	; 0x270f
 800a1f8:	4592      	cmp	sl, r2
 800a1fa:	d902      	bls.n	800a202 <__strftime.isra.0+0x88a>
 800a1fc:	f88d b018 	strb.w	fp, [sp, #24]
 800a200:	e650      	b.n	8009ea4 <__strftime.isra.0+0x52c>
 800a202:	aa06      	add	r2, sp, #24
 800a204:	2125      	movs	r1, #37	; 0x25
 800a206:	7011      	strb	r1, [r2, #0]
 800a208:	f1bb 0f00 	cmp.w	fp, #0
 800a20c:	d108      	bne.n	800a220 <__strftime.isra.0+0x8a8>
 800a20e:	1c50      	adds	r0, r2, #1
 800a210:	493f      	ldr	r1, [pc, #252]	; (800a310 <__strftime.isra.0+0x998>)
 800a212:	f000 fed3 	bl	800afbc <strcpy>
 800a216:	464b      	mov	r3, r9
 800a218:	f8cd a000 	str.w	sl, [sp]
 800a21c:	aa06      	add	r2, sp, #24
 800a21e:	e6ce      	b.n	8009fbe <__strftime.isra.0+0x646>
 800a220:	2330      	movs	r3, #48	; 0x30
 800a222:	1c90      	adds	r0, r2, #2
 800a224:	7053      	strb	r3, [r2, #1]
 800a226:	e7f3      	b.n	800a210 <__strftime.isra.0+0x898>
 800a228:	6a33      	ldr	r3, [r6, #32]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f6ff aca8 	blt.w	8009b80 <__strftime.isra.0+0x208>
 800a230:	f000 f97c 	bl	800a52c <__tz_lock>
 800a234:	9b02      	ldr	r3, [sp, #8]
 800a236:	b90b      	cbnz	r3, 800a23c <__strftime.isra.0+0x8c4>
 800a238:	f000 f984 	bl	800a544 <_tzset_unlocked>
 800a23c:	f000 fb52 	bl	800a8e4 <__gettzinfo>
 800a240:	6a33      	ldr	r3, [r6, #32]
 800a242:	eb07 0a04 	add.w	sl, r7, r4
 800a246:	2b00      	cmp	r3, #0
 800a248:	bfd4      	ite	le
 800a24a:	2200      	movle	r2, #0
 800a24c:	2201      	movgt	r2, #1
 800a24e:	2328      	movs	r3, #40	; 0x28
 800a250:	fb02 3303 	mla	r3, r2, r3, r3
 800a254:	58c3      	ldr	r3, [r0, r3]
 800a256:	eba5 0b04 	sub.w	fp, r5, r4
 800a25a:	f1c3 0900 	rsb	r9, r3, #0
 800a25e:	f000 f96b 	bl	800a538 <__tz_unlock>
 800a262:	233c      	movs	r3, #60	; 0x3c
 800a264:	fb99 f0f3 	sdiv	r0, r9, r3
 800a268:	f000 fb40 	bl	800a8ec <labs>
 800a26c:	233c      	movs	r3, #60	; 0x3c
 800a26e:	fb90 f2f3 	sdiv	r2, r0, r3
 800a272:	fb02 0013 	mls	r0, r2, r3, r0
 800a276:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800a27a:	9000      	str	r0, [sp, #0]
 800a27c:	fb99 f3f3 	sdiv	r3, r9, r3
 800a280:	4659      	mov	r1, fp
 800a282:	4650      	mov	r0, sl
 800a284:	4a23      	ldr	r2, [pc, #140]	; (800a314 <__strftime.isra.0+0x99c>)
 800a286:	f000 fe3b 	bl	800af00 <sniprintf>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	f6ff aba6 	blt.w	80099dc <__strftime.isra.0+0x64>
 800a290:	4404      	add	r4, r0
 800a292:	42a5      	cmp	r5, r4
 800a294:	f67f aba2 	bls.w	80099dc <__strftime.isra.0+0x64>
 800a298:	2301      	movs	r3, #1
 800a29a:	9302      	str	r3, [sp, #8]
 800a29c:	e470      	b.n	8009b80 <__strftime.isra.0+0x208>
 800a29e:	6a33      	ldr	r3, [r6, #32]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f6ff ac6d 	blt.w	8009b80 <__strftime.isra.0+0x208>
 800a2a6:	f000 f941 	bl	800a52c <__tz_lock>
 800a2aa:	9b02      	ldr	r3, [sp, #8]
 800a2ac:	b90b      	cbnz	r3, 800a2b2 <__strftime.isra.0+0x93a>
 800a2ae:	f000 f949 	bl	800a544 <_tzset_unlocked>
 800a2b2:	6a33      	ldr	r3, [r6, #32]
 800a2b4:	4a18      	ldr	r2, [pc, #96]	; (800a318 <__strftime.isra.0+0x9a0>)
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	bfd4      	ite	le
 800a2ba:	2300      	movle	r3, #0
 800a2bc:	2301      	movgt	r3, #1
 800a2be:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800a2c2:	4648      	mov	r0, r9
 800a2c4:	f7f5 ff42 	bl	800014c <strlen>
 800a2c8:	f109 39ff 	add.w	r9, r9, #4294967295
 800a2cc:	4420      	add	r0, r4
 800a2ce:	1e6b      	subs	r3, r5, #1
 800a2d0:	42a0      	cmp	r0, r4
 800a2d2:	d102      	bne.n	800a2da <__strftime.isra.0+0x962>
 800a2d4:	f000 f930 	bl	800a538 <__tz_unlock>
 800a2d8:	e7de      	b.n	800a298 <__strftime.isra.0+0x920>
 800a2da:	42a3      	cmp	r3, r4
 800a2dc:	d904      	bls.n	800a2e8 <__strftime.isra.0+0x970>
 800a2de:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800a2e2:	553a      	strb	r2, [r7, r4]
 800a2e4:	3401      	adds	r4, #1
 800a2e6:	e7f3      	b.n	800a2d0 <__strftime.isra.0+0x958>
 800a2e8:	f000 f926 	bl	800a538 <__tz_unlock>
 800a2ec:	f7ff bb76 	b.w	80099dc <__strftime.isra.0+0x64>
 800a2f0:	1e6b      	subs	r3, r5, #1
 800a2f2:	429c      	cmp	r4, r3
 800a2f4:	f4bf ab72 	bcs.w	80099dc <__strftime.isra.0+0x64>
 800a2f8:	2325      	movs	r3, #37	; 0x25
 800a2fa:	e630      	b.n	8009f5e <__strftime.isra.0+0x5e6>
 800a2fc:	b10d      	cbz	r5, 800a302 <__strftime.isra.0+0x98a>
 800a2fe:	2300      	movs	r3, #0
 800a300:	553b      	strb	r3, [r7, r4]
 800a302:	4620      	mov	r0, r4
 800a304:	b00f      	add	sp, #60	; 0x3c
 800a306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30a:	bf00      	nop
 800a30c:	fffff894 	.word	0xfffff894
 800a310:	0800beec 	.word	0x0800beec
 800a314:	0800bf09 	.word	0x0800bf09
 800a318:	2000016c 	.word	0x2000016c

0800a31c <strftime>:
 800a31c:	f7ff bb2c 	b.w	8009978 <__strftime.isra.0>

0800a320 <_strtol_l.constprop.0>:
 800a320:	2b01      	cmp	r3, #1
 800a322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a326:	4680      	mov	r8, r0
 800a328:	d001      	beq.n	800a32e <_strtol_l.constprop.0+0xe>
 800a32a:	2b24      	cmp	r3, #36	; 0x24
 800a32c:	d906      	bls.n	800a33c <_strtol_l.constprop.0+0x1c>
 800a32e:	f7ff f96f 	bl	8009610 <__errno>
 800a332:	2316      	movs	r3, #22
 800a334:	6003      	str	r3, [r0, #0]
 800a336:	2000      	movs	r0, #0
 800a338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a33c:	460d      	mov	r5, r1
 800a33e:	4f35      	ldr	r7, [pc, #212]	; (800a414 <_strtol_l.constprop.0+0xf4>)
 800a340:	4628      	mov	r0, r5
 800a342:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a346:	5de6      	ldrb	r6, [r4, r7]
 800a348:	f016 0608 	ands.w	r6, r6, #8
 800a34c:	d1f8      	bne.n	800a340 <_strtol_l.constprop.0+0x20>
 800a34e:	2c2d      	cmp	r4, #45	; 0x2d
 800a350:	d12f      	bne.n	800a3b2 <_strtol_l.constprop.0+0x92>
 800a352:	2601      	movs	r6, #1
 800a354:	782c      	ldrb	r4, [r5, #0]
 800a356:	1c85      	adds	r5, r0, #2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d057      	beq.n	800a40c <_strtol_l.constprop.0+0xec>
 800a35c:	2b10      	cmp	r3, #16
 800a35e:	d109      	bne.n	800a374 <_strtol_l.constprop.0+0x54>
 800a360:	2c30      	cmp	r4, #48	; 0x30
 800a362:	d107      	bne.n	800a374 <_strtol_l.constprop.0+0x54>
 800a364:	7828      	ldrb	r0, [r5, #0]
 800a366:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a36a:	2858      	cmp	r0, #88	; 0x58
 800a36c:	d149      	bne.n	800a402 <_strtol_l.constprop.0+0xe2>
 800a36e:	2310      	movs	r3, #16
 800a370:	786c      	ldrb	r4, [r5, #1]
 800a372:	3502      	adds	r5, #2
 800a374:	2700      	movs	r7, #0
 800a376:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a37a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a37e:	fbbe f9f3 	udiv	r9, lr, r3
 800a382:	4638      	mov	r0, r7
 800a384:	fb03 ea19 	mls	sl, r3, r9, lr
 800a388:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a38c:	f1bc 0f09 	cmp.w	ip, #9
 800a390:	d814      	bhi.n	800a3bc <_strtol_l.constprop.0+0x9c>
 800a392:	4664      	mov	r4, ip
 800a394:	42a3      	cmp	r3, r4
 800a396:	dd22      	ble.n	800a3de <_strtol_l.constprop.0+0xbe>
 800a398:	2f00      	cmp	r7, #0
 800a39a:	db1d      	blt.n	800a3d8 <_strtol_l.constprop.0+0xb8>
 800a39c:	4581      	cmp	r9, r0
 800a39e:	d31b      	bcc.n	800a3d8 <_strtol_l.constprop.0+0xb8>
 800a3a0:	d101      	bne.n	800a3a6 <_strtol_l.constprop.0+0x86>
 800a3a2:	45a2      	cmp	sl, r4
 800a3a4:	db18      	blt.n	800a3d8 <_strtol_l.constprop.0+0xb8>
 800a3a6:	2701      	movs	r7, #1
 800a3a8:	fb00 4003 	mla	r0, r0, r3, r4
 800a3ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3b0:	e7ea      	b.n	800a388 <_strtol_l.constprop.0+0x68>
 800a3b2:	2c2b      	cmp	r4, #43	; 0x2b
 800a3b4:	bf04      	itt	eq
 800a3b6:	782c      	ldrbeq	r4, [r5, #0]
 800a3b8:	1c85      	addeq	r5, r0, #2
 800a3ba:	e7cd      	b.n	800a358 <_strtol_l.constprop.0+0x38>
 800a3bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a3c0:	f1bc 0f19 	cmp.w	ip, #25
 800a3c4:	d801      	bhi.n	800a3ca <_strtol_l.constprop.0+0xaa>
 800a3c6:	3c37      	subs	r4, #55	; 0x37
 800a3c8:	e7e4      	b.n	800a394 <_strtol_l.constprop.0+0x74>
 800a3ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a3ce:	f1bc 0f19 	cmp.w	ip, #25
 800a3d2:	d804      	bhi.n	800a3de <_strtol_l.constprop.0+0xbe>
 800a3d4:	3c57      	subs	r4, #87	; 0x57
 800a3d6:	e7dd      	b.n	800a394 <_strtol_l.constprop.0+0x74>
 800a3d8:	f04f 37ff 	mov.w	r7, #4294967295
 800a3dc:	e7e6      	b.n	800a3ac <_strtol_l.constprop.0+0x8c>
 800a3de:	2f00      	cmp	r7, #0
 800a3e0:	da07      	bge.n	800a3f2 <_strtol_l.constprop.0+0xd2>
 800a3e2:	2322      	movs	r3, #34	; 0x22
 800a3e4:	4670      	mov	r0, lr
 800a3e6:	f8c8 3000 	str.w	r3, [r8]
 800a3ea:	2a00      	cmp	r2, #0
 800a3ec:	d0a4      	beq.n	800a338 <_strtol_l.constprop.0+0x18>
 800a3ee:	1e69      	subs	r1, r5, #1
 800a3f0:	e005      	b.n	800a3fe <_strtol_l.constprop.0+0xde>
 800a3f2:	b106      	cbz	r6, 800a3f6 <_strtol_l.constprop.0+0xd6>
 800a3f4:	4240      	negs	r0, r0
 800a3f6:	2a00      	cmp	r2, #0
 800a3f8:	d09e      	beq.n	800a338 <_strtol_l.constprop.0+0x18>
 800a3fa:	2f00      	cmp	r7, #0
 800a3fc:	d1f7      	bne.n	800a3ee <_strtol_l.constprop.0+0xce>
 800a3fe:	6011      	str	r1, [r2, #0]
 800a400:	e79a      	b.n	800a338 <_strtol_l.constprop.0+0x18>
 800a402:	2430      	movs	r4, #48	; 0x30
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1b5      	bne.n	800a374 <_strtol_l.constprop.0+0x54>
 800a408:	2308      	movs	r3, #8
 800a40a:	e7b3      	b.n	800a374 <_strtol_l.constprop.0+0x54>
 800a40c:	2c30      	cmp	r4, #48	; 0x30
 800a40e:	d0a9      	beq.n	800a364 <_strtol_l.constprop.0+0x44>
 800a410:	230a      	movs	r3, #10
 800a412:	e7af      	b.n	800a374 <_strtol_l.constprop.0+0x54>
 800a414:	0800c179 	.word	0x0800c179

0800a418 <_strtol_r>:
 800a418:	f7ff bf82 	b.w	800a320 <_strtol_l.constprop.0>

0800a41c <strtol>:
 800a41c:	4613      	mov	r3, r2
 800a41e:	460a      	mov	r2, r1
 800a420:	4601      	mov	r1, r0
 800a422:	4802      	ldr	r0, [pc, #8]	; (800a42c <strtol+0x10>)
 800a424:	6800      	ldr	r0, [r0, #0]
 800a426:	f7ff bf7b 	b.w	800a320 <_strtol_l.constprop.0>
 800a42a:	bf00      	nop
 800a42c:	20000108 	.word	0x20000108

0800a430 <_strtoul_l.constprop.0>:
 800a430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a434:	4686      	mov	lr, r0
 800a436:	460d      	mov	r5, r1
 800a438:	4f35      	ldr	r7, [pc, #212]	; (800a510 <_strtoul_l.constprop.0+0xe0>)
 800a43a:	4628      	mov	r0, r5
 800a43c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a440:	5de6      	ldrb	r6, [r4, r7]
 800a442:	f016 0608 	ands.w	r6, r6, #8
 800a446:	d1f8      	bne.n	800a43a <_strtoul_l.constprop.0+0xa>
 800a448:	2c2d      	cmp	r4, #45	; 0x2d
 800a44a:	d12f      	bne.n	800a4ac <_strtoul_l.constprop.0+0x7c>
 800a44c:	2601      	movs	r6, #1
 800a44e:	782c      	ldrb	r4, [r5, #0]
 800a450:	1c85      	adds	r5, r0, #2
 800a452:	2b00      	cmp	r3, #0
 800a454:	d057      	beq.n	800a506 <_strtoul_l.constprop.0+0xd6>
 800a456:	2b10      	cmp	r3, #16
 800a458:	d109      	bne.n	800a46e <_strtoul_l.constprop.0+0x3e>
 800a45a:	2c30      	cmp	r4, #48	; 0x30
 800a45c:	d107      	bne.n	800a46e <_strtoul_l.constprop.0+0x3e>
 800a45e:	7828      	ldrb	r0, [r5, #0]
 800a460:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a464:	2858      	cmp	r0, #88	; 0x58
 800a466:	d149      	bne.n	800a4fc <_strtoul_l.constprop.0+0xcc>
 800a468:	2310      	movs	r3, #16
 800a46a:	786c      	ldrb	r4, [r5, #1]
 800a46c:	3502      	adds	r5, #2
 800a46e:	f04f 38ff 	mov.w	r8, #4294967295
 800a472:	fbb8 f8f3 	udiv	r8, r8, r3
 800a476:	2700      	movs	r7, #0
 800a478:	fb03 f908 	mul.w	r9, r3, r8
 800a47c:	4638      	mov	r0, r7
 800a47e:	ea6f 0909 	mvn.w	r9, r9
 800a482:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a486:	f1bc 0f09 	cmp.w	ip, #9
 800a48a:	d814      	bhi.n	800a4b6 <_strtoul_l.constprop.0+0x86>
 800a48c:	4664      	mov	r4, ip
 800a48e:	42a3      	cmp	r3, r4
 800a490:	dd22      	ble.n	800a4d8 <_strtoul_l.constprop.0+0xa8>
 800a492:	2f00      	cmp	r7, #0
 800a494:	db1d      	blt.n	800a4d2 <_strtoul_l.constprop.0+0xa2>
 800a496:	4580      	cmp	r8, r0
 800a498:	d31b      	bcc.n	800a4d2 <_strtoul_l.constprop.0+0xa2>
 800a49a:	d101      	bne.n	800a4a0 <_strtoul_l.constprop.0+0x70>
 800a49c:	45a1      	cmp	r9, r4
 800a49e:	db18      	blt.n	800a4d2 <_strtoul_l.constprop.0+0xa2>
 800a4a0:	2701      	movs	r7, #1
 800a4a2:	fb00 4003 	mla	r0, r0, r3, r4
 800a4a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4aa:	e7ea      	b.n	800a482 <_strtoul_l.constprop.0+0x52>
 800a4ac:	2c2b      	cmp	r4, #43	; 0x2b
 800a4ae:	bf04      	itt	eq
 800a4b0:	782c      	ldrbeq	r4, [r5, #0]
 800a4b2:	1c85      	addeq	r5, r0, #2
 800a4b4:	e7cd      	b.n	800a452 <_strtoul_l.constprop.0+0x22>
 800a4b6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a4ba:	f1bc 0f19 	cmp.w	ip, #25
 800a4be:	d801      	bhi.n	800a4c4 <_strtoul_l.constprop.0+0x94>
 800a4c0:	3c37      	subs	r4, #55	; 0x37
 800a4c2:	e7e4      	b.n	800a48e <_strtoul_l.constprop.0+0x5e>
 800a4c4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a4c8:	f1bc 0f19 	cmp.w	ip, #25
 800a4cc:	d804      	bhi.n	800a4d8 <_strtoul_l.constprop.0+0xa8>
 800a4ce:	3c57      	subs	r4, #87	; 0x57
 800a4d0:	e7dd      	b.n	800a48e <_strtoul_l.constprop.0+0x5e>
 800a4d2:	f04f 37ff 	mov.w	r7, #4294967295
 800a4d6:	e7e6      	b.n	800a4a6 <_strtoul_l.constprop.0+0x76>
 800a4d8:	2f00      	cmp	r7, #0
 800a4da:	da07      	bge.n	800a4ec <_strtoul_l.constprop.0+0xbc>
 800a4dc:	2322      	movs	r3, #34	; 0x22
 800a4de:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e2:	f8ce 3000 	str.w	r3, [lr]
 800a4e6:	b932      	cbnz	r2, 800a4f6 <_strtoul_l.constprop.0+0xc6>
 800a4e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4ec:	b106      	cbz	r6, 800a4f0 <_strtoul_l.constprop.0+0xc0>
 800a4ee:	4240      	negs	r0, r0
 800a4f0:	2a00      	cmp	r2, #0
 800a4f2:	d0f9      	beq.n	800a4e8 <_strtoul_l.constprop.0+0xb8>
 800a4f4:	b107      	cbz	r7, 800a4f8 <_strtoul_l.constprop.0+0xc8>
 800a4f6:	1e69      	subs	r1, r5, #1
 800a4f8:	6011      	str	r1, [r2, #0]
 800a4fa:	e7f5      	b.n	800a4e8 <_strtoul_l.constprop.0+0xb8>
 800a4fc:	2430      	movs	r4, #48	; 0x30
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1b5      	bne.n	800a46e <_strtoul_l.constprop.0+0x3e>
 800a502:	2308      	movs	r3, #8
 800a504:	e7b3      	b.n	800a46e <_strtoul_l.constprop.0+0x3e>
 800a506:	2c30      	cmp	r4, #48	; 0x30
 800a508:	d0a9      	beq.n	800a45e <_strtoul_l.constprop.0+0x2e>
 800a50a:	230a      	movs	r3, #10
 800a50c:	e7af      	b.n	800a46e <_strtoul_l.constprop.0+0x3e>
 800a50e:	bf00      	nop
 800a510:	0800c179 	.word	0x0800c179

0800a514 <_strtoul_r>:
 800a514:	f7ff bf8c 	b.w	800a430 <_strtoul_l.constprop.0>

0800a518 <strtoul>:
 800a518:	4613      	mov	r3, r2
 800a51a:	460a      	mov	r2, r1
 800a51c:	4601      	mov	r1, r0
 800a51e:	4802      	ldr	r0, [pc, #8]	; (800a528 <strtoul+0x10>)
 800a520:	6800      	ldr	r0, [r0, #0]
 800a522:	f7ff bf85 	b.w	800a430 <_strtoul_l.constprop.0>
 800a526:	bf00      	nop
 800a528:	20000108 	.word	0x20000108

0800a52c <__tz_lock>:
 800a52c:	4801      	ldr	r0, [pc, #4]	; (800a534 <__tz_lock+0x8>)
 800a52e:	f7ff b899 	b.w	8009664 <__retarget_lock_acquire>
 800a532:	bf00      	nop
 800a534:	200006c2 	.word	0x200006c2

0800a538 <__tz_unlock>:
 800a538:	4801      	ldr	r0, [pc, #4]	; (800a540 <__tz_unlock+0x8>)
 800a53a:	f7ff b895 	b.w	8009668 <__retarget_lock_release>
 800a53e:	bf00      	nop
 800a540:	200006c2 	.word	0x200006c2

0800a544 <_tzset_unlocked>:
 800a544:	4b01      	ldr	r3, [pc, #4]	; (800a54c <_tzset_unlocked+0x8>)
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	f000 b802 	b.w	800a550 <_tzset_unlocked_r>
 800a54c:	20000108 	.word	0x20000108

0800a550 <_tzset_unlocked_r>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	b08d      	sub	sp, #52	; 0x34
 800a556:	4607      	mov	r7, r0
 800a558:	f000 f9c4 	bl	800a8e4 <__gettzinfo>
 800a55c:	49b1      	ldr	r1, [pc, #708]	; (800a824 <_tzset_unlocked_r+0x2d4>)
 800a55e:	4605      	mov	r5, r0
 800a560:	4638      	mov	r0, r7
 800a562:	f000 f9b7 	bl	800a8d4 <_getenv_r>
 800a566:	4eb0      	ldr	r6, [pc, #704]	; (800a828 <_tzset_unlocked_r+0x2d8>)
 800a568:	4604      	mov	r4, r0
 800a56a:	b970      	cbnz	r0, 800a58a <_tzset_unlocked_r+0x3a>
 800a56c:	4baf      	ldr	r3, [pc, #700]	; (800a82c <_tzset_unlocked_r+0x2dc>)
 800a56e:	4ab0      	ldr	r2, [pc, #704]	; (800a830 <_tzset_unlocked_r+0x2e0>)
 800a570:	6018      	str	r0, [r3, #0]
 800a572:	4bb0      	ldr	r3, [pc, #704]	; (800a834 <_tzset_unlocked_r+0x2e4>)
 800a574:	6018      	str	r0, [r3, #0]
 800a576:	4bb0      	ldr	r3, [pc, #704]	; (800a838 <_tzset_unlocked_r+0x2e8>)
 800a578:	6830      	ldr	r0, [r6, #0]
 800a57a:	e9c3 2200 	strd	r2, r2, [r3]
 800a57e:	f000 f9b9 	bl	800a8f4 <free>
 800a582:	6034      	str	r4, [r6, #0]
 800a584:	b00d      	add	sp, #52	; 0x34
 800a586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58a:	6831      	ldr	r1, [r6, #0]
 800a58c:	2900      	cmp	r1, #0
 800a58e:	d162      	bne.n	800a656 <_tzset_unlocked_r+0x106>
 800a590:	6830      	ldr	r0, [r6, #0]
 800a592:	f000 f9af 	bl	800a8f4 <free>
 800a596:	4620      	mov	r0, r4
 800a598:	f7f5 fdd8 	bl	800014c <strlen>
 800a59c:	1c41      	adds	r1, r0, #1
 800a59e:	4638      	mov	r0, r7
 800a5a0:	f7ff f8e2 	bl	8009768 <_malloc_r>
 800a5a4:	6030      	str	r0, [r6, #0]
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d15a      	bne.n	800a660 <_tzset_unlocked_r+0x110>
 800a5aa:	7823      	ldrb	r3, [r4, #0]
 800a5ac:	ae0a      	add	r6, sp, #40	; 0x28
 800a5ae:	2b3a      	cmp	r3, #58	; 0x3a
 800a5b0:	bf08      	it	eq
 800a5b2:	3401      	addeq	r4, #1
 800a5b4:	4633      	mov	r3, r6
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	4aa0      	ldr	r2, [pc, #640]	; (800a83c <_tzset_unlocked_r+0x2ec>)
 800a5ba:	49a1      	ldr	r1, [pc, #644]	; (800a840 <_tzset_unlocked_r+0x2f0>)
 800a5bc:	f000 fcd4 	bl	800af68 <siscanf>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	dddf      	ble.n	800a584 <_tzset_unlocked_r+0x34>
 800a5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5c6:	18e7      	adds	r7, r4, r3
 800a5c8:	5ce3      	ldrb	r3, [r4, r3]
 800a5ca:	2b2d      	cmp	r3, #45	; 0x2d
 800a5cc:	d14c      	bne.n	800a668 <_tzset_unlocked_r+0x118>
 800a5ce:	f04f 38ff 	mov.w	r8, #4294967295
 800a5d2:	3701      	adds	r7, #1
 800a5d4:	2400      	movs	r4, #0
 800a5d6:	f10d 0a20 	add.w	sl, sp, #32
 800a5da:	f10d 0b1e 	add.w	fp, sp, #30
 800a5de:	4633      	mov	r3, r6
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800a5e6:	4997      	ldr	r1, [pc, #604]	; (800a844 <_tzset_unlocked_r+0x2f4>)
 800a5e8:	9603      	str	r6, [sp, #12]
 800a5ea:	f8cd b000 	str.w	fp, [sp]
 800a5ee:	aa07      	add	r2, sp, #28
 800a5f0:	f8ad 401e 	strh.w	r4, [sp, #30]
 800a5f4:	f8ad 4020 	strh.w	r4, [sp, #32]
 800a5f8:	f000 fcb6 	bl	800af68 <siscanf>
 800a5fc:	42a0      	cmp	r0, r4
 800a5fe:	ddc1      	ble.n	800a584 <_tzset_unlocked_r+0x34>
 800a600:	213c      	movs	r1, #60	; 0x3c
 800a602:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a606:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a60a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800a848 <_tzset_unlocked_r+0x2f8>
 800a60e:	fb01 3302 	mla	r3, r1, r2, r3
 800a612:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a616:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a61a:	fb01 3302 	mla	r3, r1, r2, r3
 800a61e:	fb08 f303 	mul.w	r3, r8, r3
 800a622:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800a838 <_tzset_unlocked_r+0x2e8>
 800a626:	62ab      	str	r3, [r5, #40]	; 0x28
 800a628:	4b84      	ldr	r3, [pc, #528]	; (800a83c <_tzset_unlocked_r+0x2ec>)
 800a62a:	464a      	mov	r2, r9
 800a62c:	f8c8 3000 	str.w	r3, [r8]
 800a630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a632:	4983      	ldr	r1, [pc, #524]	; (800a840 <_tzset_unlocked_r+0x2f0>)
 800a634:	441f      	add	r7, r3
 800a636:	4638      	mov	r0, r7
 800a638:	4633      	mov	r3, r6
 800a63a:	f000 fc95 	bl	800af68 <siscanf>
 800a63e:	42a0      	cmp	r0, r4
 800a640:	dc18      	bgt.n	800a674 <_tzset_unlocked_r+0x124>
 800a642:	f8d8 3000 	ldr.w	r3, [r8]
 800a646:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a648:	f8c8 3004 	str.w	r3, [r8, #4]
 800a64c:	4b77      	ldr	r3, [pc, #476]	; (800a82c <_tzset_unlocked_r+0x2dc>)
 800a64e:	601a      	str	r2, [r3, #0]
 800a650:	4b78      	ldr	r3, [pc, #480]	; (800a834 <_tzset_unlocked_r+0x2e4>)
 800a652:	601c      	str	r4, [r3, #0]
 800a654:	e796      	b.n	800a584 <_tzset_unlocked_r+0x34>
 800a656:	f7f5 fd81 	bl	800015c <strcmp>
 800a65a:	2800      	cmp	r0, #0
 800a65c:	d198      	bne.n	800a590 <_tzset_unlocked_r+0x40>
 800a65e:	e791      	b.n	800a584 <_tzset_unlocked_r+0x34>
 800a660:	4621      	mov	r1, r4
 800a662:	f000 fcab 	bl	800afbc <strcpy>
 800a666:	e7a0      	b.n	800a5aa <_tzset_unlocked_r+0x5a>
 800a668:	2b2b      	cmp	r3, #43	; 0x2b
 800a66a:	f04f 0801 	mov.w	r8, #1
 800a66e:	bf08      	it	eq
 800a670:	3701      	addeq	r7, #1
 800a672:	e7af      	b.n	800a5d4 <_tzset_unlocked_r+0x84>
 800a674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a676:	f8c8 9004 	str.w	r9, [r8, #4]
 800a67a:	18fc      	adds	r4, r7, r3
 800a67c:	5cfb      	ldrb	r3, [r7, r3]
 800a67e:	2b2d      	cmp	r3, #45	; 0x2d
 800a680:	f040 808c 	bne.w	800a79c <_tzset_unlocked_r+0x24c>
 800a684:	f04f 37ff 	mov.w	r7, #4294967295
 800a688:	3401      	adds	r4, #1
 800a68a:	2300      	movs	r3, #0
 800a68c:	4620      	mov	r0, r4
 800a68e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a692:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a696:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a69a:	930a      	str	r3, [sp, #40]	; 0x28
 800a69c:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a6a0:	4633      	mov	r3, r6
 800a6a2:	e9cd b600 	strd	fp, r6, [sp]
 800a6a6:	4967      	ldr	r1, [pc, #412]	; (800a844 <_tzset_unlocked_r+0x2f4>)
 800a6a8:	aa07      	add	r2, sp, #28
 800a6aa:	f000 fc5d 	bl	800af68 <siscanf>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	dc7a      	bgt.n	800a7a8 <_tzset_unlocked_r+0x258>
 800a6b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a6b4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800a6b8:	462f      	mov	r7, r5
 800a6ba:	f04f 0900 	mov.w	r9, #0
 800a6be:	652b      	str	r3, [r5, #80]	; 0x50
 800a6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6c2:	441c      	add	r4, r3
 800a6c4:	7823      	ldrb	r3, [r4, #0]
 800a6c6:	2b2c      	cmp	r3, #44	; 0x2c
 800a6c8:	bf08      	it	eq
 800a6ca:	3401      	addeq	r4, #1
 800a6cc:	f894 8000 	ldrb.w	r8, [r4]
 800a6d0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800a6d4:	d17a      	bne.n	800a7cc <_tzset_unlocked_r+0x27c>
 800a6d6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800a6da:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800a6de:	ab09      	add	r3, sp, #36	; 0x24
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	4633      	mov	r3, r6
 800a6e6:	4959      	ldr	r1, [pc, #356]	; (800a84c <_tzset_unlocked_r+0x2fc>)
 800a6e8:	9603      	str	r6, [sp, #12]
 800a6ea:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800a6ee:	f000 fc3b 	bl	800af68 <siscanf>
 800a6f2:	2803      	cmp	r0, #3
 800a6f4:	f47f af46 	bne.w	800a584 <_tzset_unlocked_r+0x34>
 800a6f8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800a6fc:	1e4b      	subs	r3, r1, #1
 800a6fe:	2b0b      	cmp	r3, #11
 800a700:	f63f af40 	bhi.w	800a584 <_tzset_unlocked_r+0x34>
 800a704:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800a708:	1e53      	subs	r3, r2, #1
 800a70a:	2b04      	cmp	r3, #4
 800a70c:	f63f af3a 	bhi.w	800a584 <_tzset_unlocked_r+0x34>
 800a710:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a714:	2b06      	cmp	r3, #6
 800a716:	f63f af35 	bhi.w	800a584 <_tzset_unlocked_r+0x34>
 800a71a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800a71e:	f887 8008 	strb.w	r8, [r7, #8]
 800a722:	617b      	str	r3, [r7, #20]
 800a724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a726:	eb04 0803 	add.w	r8, r4, r3
 800a72a:	2302      	movs	r3, #2
 800a72c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a730:	2300      	movs	r3, #0
 800a732:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a736:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a73a:	930a      	str	r3, [sp, #40]	; 0x28
 800a73c:	f898 3000 	ldrb.w	r3, [r8]
 800a740:	2b2f      	cmp	r3, #47	; 0x2f
 800a742:	d109      	bne.n	800a758 <_tzset_unlocked_r+0x208>
 800a744:	4633      	mov	r3, r6
 800a746:	4640      	mov	r0, r8
 800a748:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a74c:	e9cd b600 	strd	fp, r6, [sp]
 800a750:	493f      	ldr	r1, [pc, #252]	; (800a850 <_tzset_unlocked_r+0x300>)
 800a752:	aa07      	add	r2, sp, #28
 800a754:	f000 fc08 	bl	800af68 <siscanf>
 800a758:	213c      	movs	r1, #60	; 0x3c
 800a75a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a75e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a762:	3728      	adds	r7, #40	; 0x28
 800a764:	fb01 3302 	mla	r3, r1, r2, r3
 800a768:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a76c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a770:	fb01 3302 	mla	r3, r1, r2, r3
 800a774:	f847 3c10 	str.w	r3, [r7, #-16]
 800a778:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a77a:	4444      	add	r4, r8
 800a77c:	f1b9 0f00 	cmp.w	r9, #0
 800a780:	d021      	beq.n	800a7c6 <_tzset_unlocked_r+0x276>
 800a782:	6868      	ldr	r0, [r5, #4]
 800a784:	f000 fc36 	bl	800aff4 <__tzcalc_limits>
 800a788:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a78a:	4b28      	ldr	r3, [pc, #160]	; (800a82c <_tzset_unlocked_r+0x2dc>)
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a790:	1a9b      	subs	r3, r3, r2
 800a792:	bf18      	it	ne
 800a794:	2301      	movne	r3, #1
 800a796:	4a27      	ldr	r2, [pc, #156]	; (800a834 <_tzset_unlocked_r+0x2e4>)
 800a798:	6013      	str	r3, [r2, #0]
 800a79a:	e6f3      	b.n	800a584 <_tzset_unlocked_r+0x34>
 800a79c:	2b2b      	cmp	r3, #43	; 0x2b
 800a79e:	f04f 0701 	mov.w	r7, #1
 800a7a2:	bf08      	it	eq
 800a7a4:	3401      	addeq	r4, #1
 800a7a6:	e770      	b.n	800a68a <_tzset_unlocked_r+0x13a>
 800a7a8:	213c      	movs	r1, #60	; 0x3c
 800a7aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a7ae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a7b2:	fb01 3302 	mla	r3, r1, r2, r3
 800a7b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a7ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a7be:	fb01 3302 	mla	r3, r1, r2, r3
 800a7c2:	437b      	muls	r3, r7
 800a7c4:	e778      	b.n	800a6b8 <_tzset_unlocked_r+0x168>
 800a7c6:	f04f 0901 	mov.w	r9, #1
 800a7ca:	e77b      	b.n	800a6c4 <_tzset_unlocked_r+0x174>
 800a7cc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a7d0:	bf0a      	itet	eq
 800a7d2:	4643      	moveq	r3, r8
 800a7d4:	2344      	movne	r3, #68	; 0x44
 800a7d6:	3401      	addeq	r4, #1
 800a7d8:	220a      	movs	r2, #10
 800a7da:	4620      	mov	r0, r4
 800a7dc:	a90b      	add	r1, sp, #44	; 0x2c
 800a7de:	9305      	str	r3, [sp, #20]
 800a7e0:	f7ff fe9a 	bl	800a518 <strtoul>
 800a7e4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a7e8:	9b05      	ldr	r3, [sp, #20]
 800a7ea:	45a0      	cmp	r8, r4
 800a7ec:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a7f0:	d114      	bne.n	800a81c <_tzset_unlocked_r+0x2cc>
 800a7f2:	234d      	movs	r3, #77	; 0x4d
 800a7f4:	f1b9 0f00 	cmp.w	r9, #0
 800a7f8:	d107      	bne.n	800a80a <_tzset_unlocked_r+0x2ba>
 800a7fa:	2103      	movs	r1, #3
 800a7fc:	722b      	strb	r3, [r5, #8]
 800a7fe:	2302      	movs	r3, #2
 800a800:	f8c5 9014 	str.w	r9, [r5, #20]
 800a804:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a808:	e78f      	b.n	800a72a <_tzset_unlocked_r+0x1da>
 800a80a:	220b      	movs	r2, #11
 800a80c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a810:	2301      	movs	r3, #1
 800a812:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a816:	2300      	movs	r3, #0
 800a818:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a81a:	e786      	b.n	800a72a <_tzset_unlocked_r+0x1da>
 800a81c:	b280      	uxth	r0, r0
 800a81e:	723b      	strb	r3, [r7, #8]
 800a820:	6178      	str	r0, [r7, #20]
 800a822:	e782      	b.n	800a72a <_tzset_unlocked_r+0x1da>
 800a824:	0800c13c 	.word	0x0800c13c
 800a828:	200006e8 	.word	0x200006e8
 800a82c:	200006f0 	.word	0x200006f0
 800a830:	0800c13f 	.word	0x0800c13f
 800a834:	200006ec 	.word	0x200006ec
 800a838:	2000016c 	.word	0x2000016c
 800a83c:	200006db 	.word	0x200006db
 800a840:	0800c143 	.word	0x0800c143
 800a844:	0800c166 	.word	0x0800c166
 800a848:	200006d0 	.word	0x200006d0
 800a84c:	0800c152 	.word	0x0800c152
 800a850:	0800c165 	.word	0x0800c165

0800a854 <abs>:
 800a854:	2800      	cmp	r0, #0
 800a856:	bfb8      	it	lt
 800a858:	4240      	neglt	r0, r0
 800a85a:	4770      	bx	lr

0800a85c <_findenv_r>:
 800a85c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a860:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800a8d0 <_findenv_r+0x74>
 800a864:	4607      	mov	r7, r0
 800a866:	4689      	mov	r9, r1
 800a868:	4616      	mov	r6, r2
 800a86a:	f000 fc6d 	bl	800b148 <__env_lock>
 800a86e:	f8da 4000 	ldr.w	r4, [sl]
 800a872:	b134      	cbz	r4, 800a882 <_findenv_r+0x26>
 800a874:	464b      	mov	r3, r9
 800a876:	4698      	mov	r8, r3
 800a878:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a87c:	b13a      	cbz	r2, 800a88e <_findenv_r+0x32>
 800a87e:	2a3d      	cmp	r2, #61	; 0x3d
 800a880:	d1f9      	bne.n	800a876 <_findenv_r+0x1a>
 800a882:	4638      	mov	r0, r7
 800a884:	f000 fc66 	bl	800b154 <__env_unlock>
 800a888:	2000      	movs	r0, #0
 800a88a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88e:	eba8 0809 	sub.w	r8, r8, r9
 800a892:	46a3      	mov	fp, r4
 800a894:	f854 0b04 	ldr.w	r0, [r4], #4
 800a898:	2800      	cmp	r0, #0
 800a89a:	d0f2      	beq.n	800a882 <_findenv_r+0x26>
 800a89c:	4642      	mov	r2, r8
 800a89e:	4649      	mov	r1, r9
 800a8a0:	f000 fb94 	bl	800afcc <strncmp>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d1f4      	bne.n	800a892 <_findenv_r+0x36>
 800a8a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a8ac:	eb03 0508 	add.w	r5, r3, r8
 800a8b0:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a8b4:	2b3d      	cmp	r3, #61	; 0x3d
 800a8b6:	d1ec      	bne.n	800a892 <_findenv_r+0x36>
 800a8b8:	f8da 3000 	ldr.w	r3, [sl]
 800a8bc:	4638      	mov	r0, r7
 800a8be:	ebab 0303 	sub.w	r3, fp, r3
 800a8c2:	109b      	asrs	r3, r3, #2
 800a8c4:	6033      	str	r3, [r6, #0]
 800a8c6:	f000 fc45 	bl	800b154 <__env_unlock>
 800a8ca:	1c68      	adds	r0, r5, #1
 800a8cc:	e7dd      	b.n	800a88a <_findenv_r+0x2e>
 800a8ce:	bf00      	nop
 800a8d0:	200000e4 	.word	0x200000e4

0800a8d4 <_getenv_r>:
 800a8d4:	b507      	push	{r0, r1, r2, lr}
 800a8d6:	aa01      	add	r2, sp, #4
 800a8d8:	f7ff ffc0 	bl	800a85c <_findenv_r>
 800a8dc:	b003      	add	sp, #12
 800a8de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a8e4 <__gettzinfo>:
 800a8e4:	4800      	ldr	r0, [pc, #0]	; (800a8e8 <__gettzinfo+0x4>)
 800a8e6:	4770      	bx	lr
 800a8e8:	20000178 	.word	0x20000178

0800a8ec <labs>:
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	bfb8      	it	lt
 800a8f0:	4240      	neglt	r0, r0
 800a8f2:	4770      	bx	lr

0800a8f4 <free>:
 800a8f4:	4b02      	ldr	r3, [pc, #8]	; (800a900 <free+0xc>)
 800a8f6:	4601      	mov	r1, r0
 800a8f8:	6818      	ldr	r0, [r3, #0]
 800a8fa:	f7fe becd 	b.w	8009698 <_free_r>
 800a8fe:	bf00      	nop
 800a900:	20000108 	.word	0x20000108

0800a904 <__malloc_lock>:
 800a904:	4801      	ldr	r0, [pc, #4]	; (800a90c <__malloc_lock+0x8>)
 800a906:	f7fe beae 	b.w	8009666 <__retarget_lock_acquire_recursive>
 800a90a:	bf00      	nop
 800a90c:	200006c1 	.word	0x200006c1

0800a910 <__malloc_unlock>:
 800a910:	4801      	ldr	r0, [pc, #4]	; (800a918 <__malloc_unlock+0x8>)
 800a912:	f7fe beaa 	b.w	800966a <__retarget_lock_release_recursive>
 800a916:	bf00      	nop
 800a918:	200006c1 	.word	0x200006c1

0800a91c <__ssputs_r>:
 800a91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a920:	688e      	ldr	r6, [r1, #8]
 800a922:	4682      	mov	sl, r0
 800a924:	429e      	cmp	r6, r3
 800a926:	460c      	mov	r4, r1
 800a928:	4690      	mov	r8, r2
 800a92a:	461f      	mov	r7, r3
 800a92c:	d838      	bhi.n	800a9a0 <__ssputs_r+0x84>
 800a92e:	898a      	ldrh	r2, [r1, #12]
 800a930:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a934:	d032      	beq.n	800a99c <__ssputs_r+0x80>
 800a936:	6825      	ldr	r5, [r4, #0]
 800a938:	6909      	ldr	r1, [r1, #16]
 800a93a:	3301      	adds	r3, #1
 800a93c:	eba5 0901 	sub.w	r9, r5, r1
 800a940:	6965      	ldr	r5, [r4, #20]
 800a942:	444b      	add	r3, r9
 800a944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a948:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a94c:	106d      	asrs	r5, r5, #1
 800a94e:	429d      	cmp	r5, r3
 800a950:	bf38      	it	cc
 800a952:	461d      	movcc	r5, r3
 800a954:	0553      	lsls	r3, r2, #21
 800a956:	d531      	bpl.n	800a9bc <__ssputs_r+0xa0>
 800a958:	4629      	mov	r1, r5
 800a95a:	f7fe ff05 	bl	8009768 <_malloc_r>
 800a95e:	4606      	mov	r6, r0
 800a960:	b950      	cbnz	r0, 800a978 <__ssputs_r+0x5c>
 800a962:	230c      	movs	r3, #12
 800a964:	f04f 30ff 	mov.w	r0, #4294967295
 800a968:	f8ca 3000 	str.w	r3, [sl]
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a972:	81a3      	strh	r3, [r4, #12]
 800a974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a978:	464a      	mov	r2, r9
 800a97a:	6921      	ldr	r1, [r4, #16]
 800a97c:	f7fe fe76 	bl	800966c <memcpy>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	6126      	str	r6, [r4, #16]
 800a98e:	444e      	add	r6, r9
 800a990:	6026      	str	r6, [r4, #0]
 800a992:	463e      	mov	r6, r7
 800a994:	6165      	str	r5, [r4, #20]
 800a996:	eba5 0509 	sub.w	r5, r5, r9
 800a99a:	60a5      	str	r5, [r4, #8]
 800a99c:	42be      	cmp	r6, r7
 800a99e:	d900      	bls.n	800a9a2 <__ssputs_r+0x86>
 800a9a0:	463e      	mov	r6, r7
 800a9a2:	4632      	mov	r2, r6
 800a9a4:	4641      	mov	r1, r8
 800a9a6:	6820      	ldr	r0, [r4, #0]
 800a9a8:	f000 fbe8 	bl	800b17c <memmove>
 800a9ac:	68a3      	ldr	r3, [r4, #8]
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	1b9b      	subs	r3, r3, r6
 800a9b2:	60a3      	str	r3, [r4, #8]
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	4433      	add	r3, r6
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	e7db      	b.n	800a974 <__ssputs_r+0x58>
 800a9bc:	462a      	mov	r2, r5
 800a9be:	f000 fbf7 	bl	800b1b0 <_realloc_r>
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d1e1      	bne.n	800a98c <__ssputs_r+0x70>
 800a9c8:	4650      	mov	r0, sl
 800a9ca:	6921      	ldr	r1, [r4, #16]
 800a9cc:	f7fe fe64 	bl	8009698 <_free_r>
 800a9d0:	e7c7      	b.n	800a962 <__ssputs_r+0x46>
	...

0800a9d4 <_svfiprintf_r>:
 800a9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	4698      	mov	r8, r3
 800a9da:	898b      	ldrh	r3, [r1, #12]
 800a9dc:	4607      	mov	r7, r0
 800a9de:	061b      	lsls	r3, r3, #24
 800a9e0:	460d      	mov	r5, r1
 800a9e2:	4614      	mov	r4, r2
 800a9e4:	b09d      	sub	sp, #116	; 0x74
 800a9e6:	d50e      	bpl.n	800aa06 <_svfiprintf_r+0x32>
 800a9e8:	690b      	ldr	r3, [r1, #16]
 800a9ea:	b963      	cbnz	r3, 800aa06 <_svfiprintf_r+0x32>
 800a9ec:	2140      	movs	r1, #64	; 0x40
 800a9ee:	f7fe febb 	bl	8009768 <_malloc_r>
 800a9f2:	6028      	str	r0, [r5, #0]
 800a9f4:	6128      	str	r0, [r5, #16]
 800a9f6:	b920      	cbnz	r0, 800aa02 <_svfiprintf_r+0x2e>
 800a9f8:	230c      	movs	r3, #12
 800a9fa:	603b      	str	r3, [r7, #0]
 800a9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800aa00:	e0d1      	b.n	800aba6 <_svfiprintf_r+0x1d2>
 800aa02:	2340      	movs	r3, #64	; 0x40
 800aa04:	616b      	str	r3, [r5, #20]
 800aa06:	2300      	movs	r3, #0
 800aa08:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0a:	2320      	movs	r3, #32
 800aa0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa10:	2330      	movs	r3, #48	; 0x30
 800aa12:	f04f 0901 	mov.w	r9, #1
 800aa16:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800abc0 <_svfiprintf_r+0x1ec>
 800aa1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa22:	4623      	mov	r3, r4
 800aa24:	469a      	mov	sl, r3
 800aa26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa2a:	b10a      	cbz	r2, 800aa30 <_svfiprintf_r+0x5c>
 800aa2c:	2a25      	cmp	r2, #37	; 0x25
 800aa2e:	d1f9      	bne.n	800aa24 <_svfiprintf_r+0x50>
 800aa30:	ebba 0b04 	subs.w	fp, sl, r4
 800aa34:	d00b      	beq.n	800aa4e <_svfiprintf_r+0x7a>
 800aa36:	465b      	mov	r3, fp
 800aa38:	4622      	mov	r2, r4
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	f7ff ff6d 	bl	800a91c <__ssputs_r>
 800aa42:	3001      	adds	r0, #1
 800aa44:	f000 80aa 	beq.w	800ab9c <_svfiprintf_r+0x1c8>
 800aa48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa4a:	445a      	add	r2, fp
 800aa4c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa4e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 80a2 	beq.w	800ab9c <_svfiprintf_r+0x1c8>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa62:	f10a 0a01 	add.w	sl, sl, #1
 800aa66:	9304      	str	r3, [sp, #16]
 800aa68:	9307      	str	r3, [sp, #28]
 800aa6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa6e:	931a      	str	r3, [sp, #104]	; 0x68
 800aa70:	4654      	mov	r4, sl
 800aa72:	2205      	movs	r2, #5
 800aa74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa78:	4851      	ldr	r0, [pc, #324]	; (800abc0 <_svfiprintf_r+0x1ec>)
 800aa7a:	f000 fb71 	bl	800b160 <memchr>
 800aa7e:	9a04      	ldr	r2, [sp, #16]
 800aa80:	b9d8      	cbnz	r0, 800aaba <_svfiprintf_r+0xe6>
 800aa82:	06d0      	lsls	r0, r2, #27
 800aa84:	bf44      	itt	mi
 800aa86:	2320      	movmi	r3, #32
 800aa88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa8c:	0711      	lsls	r1, r2, #28
 800aa8e:	bf44      	itt	mi
 800aa90:	232b      	movmi	r3, #43	; 0x2b
 800aa92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa96:	f89a 3000 	ldrb.w	r3, [sl]
 800aa9a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa9c:	d015      	beq.n	800aaca <_svfiprintf_r+0xf6>
 800aa9e:	4654      	mov	r4, sl
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	f04f 0c0a 	mov.w	ip, #10
 800aaa6:	9a07      	ldr	r2, [sp, #28]
 800aaa8:	4621      	mov	r1, r4
 800aaaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaae:	3b30      	subs	r3, #48	; 0x30
 800aab0:	2b09      	cmp	r3, #9
 800aab2:	d94e      	bls.n	800ab52 <_svfiprintf_r+0x17e>
 800aab4:	b1b0      	cbz	r0, 800aae4 <_svfiprintf_r+0x110>
 800aab6:	9207      	str	r2, [sp, #28]
 800aab8:	e014      	b.n	800aae4 <_svfiprintf_r+0x110>
 800aaba:	eba0 0308 	sub.w	r3, r0, r8
 800aabe:	fa09 f303 	lsl.w	r3, r9, r3
 800aac2:	4313      	orrs	r3, r2
 800aac4:	46a2      	mov	sl, r4
 800aac6:	9304      	str	r3, [sp, #16]
 800aac8:	e7d2      	b.n	800aa70 <_svfiprintf_r+0x9c>
 800aaca:	9b03      	ldr	r3, [sp, #12]
 800aacc:	1d19      	adds	r1, r3, #4
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	9103      	str	r1, [sp, #12]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	bfbb      	ittet	lt
 800aad6:	425b      	neglt	r3, r3
 800aad8:	f042 0202 	orrlt.w	r2, r2, #2
 800aadc:	9307      	strge	r3, [sp, #28]
 800aade:	9307      	strlt	r3, [sp, #28]
 800aae0:	bfb8      	it	lt
 800aae2:	9204      	strlt	r2, [sp, #16]
 800aae4:	7823      	ldrb	r3, [r4, #0]
 800aae6:	2b2e      	cmp	r3, #46	; 0x2e
 800aae8:	d10c      	bne.n	800ab04 <_svfiprintf_r+0x130>
 800aaea:	7863      	ldrb	r3, [r4, #1]
 800aaec:	2b2a      	cmp	r3, #42	; 0x2a
 800aaee:	d135      	bne.n	800ab5c <_svfiprintf_r+0x188>
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	3402      	adds	r4, #2
 800aaf4:	1d1a      	adds	r2, r3, #4
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	9203      	str	r2, [sp, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bfb8      	it	lt
 800aafe:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab02:	9305      	str	r3, [sp, #20]
 800ab04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800abc4 <_svfiprintf_r+0x1f0>
 800ab08:	2203      	movs	r2, #3
 800ab0a:	4650      	mov	r0, sl
 800ab0c:	7821      	ldrb	r1, [r4, #0]
 800ab0e:	f000 fb27 	bl	800b160 <memchr>
 800ab12:	b140      	cbz	r0, 800ab26 <_svfiprintf_r+0x152>
 800ab14:	2340      	movs	r3, #64	; 0x40
 800ab16:	eba0 000a 	sub.w	r0, r0, sl
 800ab1a:	fa03 f000 	lsl.w	r0, r3, r0
 800ab1e:	9b04      	ldr	r3, [sp, #16]
 800ab20:	3401      	adds	r4, #1
 800ab22:	4303      	orrs	r3, r0
 800ab24:	9304      	str	r3, [sp, #16]
 800ab26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab2a:	2206      	movs	r2, #6
 800ab2c:	4826      	ldr	r0, [pc, #152]	; (800abc8 <_svfiprintf_r+0x1f4>)
 800ab2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab32:	f000 fb15 	bl	800b160 <memchr>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d038      	beq.n	800abac <_svfiprintf_r+0x1d8>
 800ab3a:	4b24      	ldr	r3, [pc, #144]	; (800abcc <_svfiprintf_r+0x1f8>)
 800ab3c:	bb1b      	cbnz	r3, 800ab86 <_svfiprintf_r+0x1b2>
 800ab3e:	9b03      	ldr	r3, [sp, #12]
 800ab40:	3307      	adds	r3, #7
 800ab42:	f023 0307 	bic.w	r3, r3, #7
 800ab46:	3308      	adds	r3, #8
 800ab48:	9303      	str	r3, [sp, #12]
 800ab4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4c:	4433      	add	r3, r6
 800ab4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab50:	e767      	b.n	800aa22 <_svfiprintf_r+0x4e>
 800ab52:	460c      	mov	r4, r1
 800ab54:	2001      	movs	r0, #1
 800ab56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab5a:	e7a5      	b.n	800aaa8 <_svfiprintf_r+0xd4>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f04f 0c0a 	mov.w	ip, #10
 800ab62:	4619      	mov	r1, r3
 800ab64:	3401      	adds	r4, #1
 800ab66:	9305      	str	r3, [sp, #20]
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab6e:	3a30      	subs	r2, #48	; 0x30
 800ab70:	2a09      	cmp	r2, #9
 800ab72:	d903      	bls.n	800ab7c <_svfiprintf_r+0x1a8>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d0c5      	beq.n	800ab04 <_svfiprintf_r+0x130>
 800ab78:	9105      	str	r1, [sp, #20]
 800ab7a:	e7c3      	b.n	800ab04 <_svfiprintf_r+0x130>
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	2301      	movs	r3, #1
 800ab80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab84:	e7f0      	b.n	800ab68 <_svfiprintf_r+0x194>
 800ab86:	ab03      	add	r3, sp, #12
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	462a      	mov	r2, r5
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	4b10      	ldr	r3, [pc, #64]	; (800abd0 <_svfiprintf_r+0x1fc>)
 800ab90:	a904      	add	r1, sp, #16
 800ab92:	f3af 8000 	nop.w
 800ab96:	1c42      	adds	r2, r0, #1
 800ab98:	4606      	mov	r6, r0
 800ab9a:	d1d6      	bne.n	800ab4a <_svfiprintf_r+0x176>
 800ab9c:	89ab      	ldrh	r3, [r5, #12]
 800ab9e:	065b      	lsls	r3, r3, #25
 800aba0:	f53f af2c 	bmi.w	800a9fc <_svfiprintf_r+0x28>
 800aba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aba6:	b01d      	add	sp, #116	; 0x74
 800aba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	ab03      	add	r3, sp, #12
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	462a      	mov	r2, r5
 800abb2:	4638      	mov	r0, r7
 800abb4:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <_svfiprintf_r+0x1fc>)
 800abb6:	a904      	add	r1, sp, #16
 800abb8:	f000 f87c 	bl	800acb4 <_printf_i>
 800abbc:	e7eb      	b.n	800ab96 <_svfiprintf_r+0x1c2>
 800abbe:	bf00      	nop
 800abc0:	0800c279 	.word	0x0800c279
 800abc4:	0800c27f 	.word	0x0800c27f
 800abc8:	0800c283 	.word	0x0800c283
 800abcc:	00000000 	.word	0x00000000
 800abd0:	0800a91d 	.word	0x0800a91d

0800abd4 <_printf_common>:
 800abd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd8:	4616      	mov	r6, r2
 800abda:	4699      	mov	r9, r3
 800abdc:	688a      	ldr	r2, [r1, #8]
 800abde:	690b      	ldr	r3, [r1, #16]
 800abe0:	4607      	mov	r7, r0
 800abe2:	4293      	cmp	r3, r2
 800abe4:	bfb8      	it	lt
 800abe6:	4613      	movlt	r3, r2
 800abe8:	6033      	str	r3, [r6, #0]
 800abea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abee:	460c      	mov	r4, r1
 800abf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abf4:	b10a      	cbz	r2, 800abfa <_printf_common+0x26>
 800abf6:	3301      	adds	r3, #1
 800abf8:	6033      	str	r3, [r6, #0]
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	0699      	lsls	r1, r3, #26
 800abfe:	bf42      	ittt	mi
 800ac00:	6833      	ldrmi	r3, [r6, #0]
 800ac02:	3302      	addmi	r3, #2
 800ac04:	6033      	strmi	r3, [r6, #0]
 800ac06:	6825      	ldr	r5, [r4, #0]
 800ac08:	f015 0506 	ands.w	r5, r5, #6
 800ac0c:	d106      	bne.n	800ac1c <_printf_common+0x48>
 800ac0e:	f104 0a19 	add.w	sl, r4, #25
 800ac12:	68e3      	ldr	r3, [r4, #12]
 800ac14:	6832      	ldr	r2, [r6, #0]
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	42ab      	cmp	r3, r5
 800ac1a:	dc28      	bgt.n	800ac6e <_printf_common+0x9a>
 800ac1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac20:	1e13      	subs	r3, r2, #0
 800ac22:	6822      	ldr	r2, [r4, #0]
 800ac24:	bf18      	it	ne
 800ac26:	2301      	movne	r3, #1
 800ac28:	0692      	lsls	r2, r2, #26
 800ac2a:	d42d      	bmi.n	800ac88 <_printf_common+0xb4>
 800ac2c:	4649      	mov	r1, r9
 800ac2e:	4638      	mov	r0, r7
 800ac30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac34:	47c0      	blx	r8
 800ac36:	3001      	adds	r0, #1
 800ac38:	d020      	beq.n	800ac7c <_printf_common+0xa8>
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	68e5      	ldr	r5, [r4, #12]
 800ac3e:	f003 0306 	and.w	r3, r3, #6
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	bf18      	it	ne
 800ac46:	2500      	movne	r5, #0
 800ac48:	6832      	ldr	r2, [r6, #0]
 800ac4a:	f04f 0600 	mov.w	r6, #0
 800ac4e:	68a3      	ldr	r3, [r4, #8]
 800ac50:	bf08      	it	eq
 800ac52:	1aad      	subeq	r5, r5, r2
 800ac54:	6922      	ldr	r2, [r4, #16]
 800ac56:	bf08      	it	eq
 800ac58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	bfc4      	itt	gt
 800ac60:	1a9b      	subgt	r3, r3, r2
 800ac62:	18ed      	addgt	r5, r5, r3
 800ac64:	341a      	adds	r4, #26
 800ac66:	42b5      	cmp	r5, r6
 800ac68:	d11a      	bne.n	800aca0 <_printf_common+0xcc>
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	e008      	b.n	800ac80 <_printf_common+0xac>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	4652      	mov	r2, sl
 800ac72:	4649      	mov	r1, r9
 800ac74:	4638      	mov	r0, r7
 800ac76:	47c0      	blx	r8
 800ac78:	3001      	adds	r0, #1
 800ac7a:	d103      	bne.n	800ac84 <_printf_common+0xb0>
 800ac7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac84:	3501      	adds	r5, #1
 800ac86:	e7c4      	b.n	800ac12 <_printf_common+0x3e>
 800ac88:	2030      	movs	r0, #48	; 0x30
 800ac8a:	18e1      	adds	r1, r4, r3
 800ac8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac96:	4422      	add	r2, r4
 800ac98:	3302      	adds	r3, #2
 800ac9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac9e:	e7c5      	b.n	800ac2c <_printf_common+0x58>
 800aca0:	2301      	movs	r3, #1
 800aca2:	4622      	mov	r2, r4
 800aca4:	4649      	mov	r1, r9
 800aca6:	4638      	mov	r0, r7
 800aca8:	47c0      	blx	r8
 800acaa:	3001      	adds	r0, #1
 800acac:	d0e6      	beq.n	800ac7c <_printf_common+0xa8>
 800acae:	3601      	adds	r6, #1
 800acb0:	e7d9      	b.n	800ac66 <_printf_common+0x92>
	...

0800acb4 <_printf_i>:
 800acb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acb8:	7e0f      	ldrb	r7, [r1, #24]
 800acba:	4691      	mov	r9, r2
 800acbc:	2f78      	cmp	r7, #120	; 0x78
 800acbe:	4680      	mov	r8, r0
 800acc0:	460c      	mov	r4, r1
 800acc2:	469a      	mov	sl, r3
 800acc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acca:	d807      	bhi.n	800acdc <_printf_i+0x28>
 800accc:	2f62      	cmp	r7, #98	; 0x62
 800acce:	d80a      	bhi.n	800ace6 <_printf_i+0x32>
 800acd0:	2f00      	cmp	r7, #0
 800acd2:	f000 80d9 	beq.w	800ae88 <_printf_i+0x1d4>
 800acd6:	2f58      	cmp	r7, #88	; 0x58
 800acd8:	f000 80a4 	beq.w	800ae24 <_printf_i+0x170>
 800acdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ace0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ace4:	e03a      	b.n	800ad5c <_printf_i+0xa8>
 800ace6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acea:	2b15      	cmp	r3, #21
 800acec:	d8f6      	bhi.n	800acdc <_printf_i+0x28>
 800acee:	a101      	add	r1, pc, #4	; (adr r1, 800acf4 <_printf_i+0x40>)
 800acf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acf4:	0800ad4d 	.word	0x0800ad4d
 800acf8:	0800ad61 	.word	0x0800ad61
 800acfc:	0800acdd 	.word	0x0800acdd
 800ad00:	0800acdd 	.word	0x0800acdd
 800ad04:	0800acdd 	.word	0x0800acdd
 800ad08:	0800acdd 	.word	0x0800acdd
 800ad0c:	0800ad61 	.word	0x0800ad61
 800ad10:	0800acdd 	.word	0x0800acdd
 800ad14:	0800acdd 	.word	0x0800acdd
 800ad18:	0800acdd 	.word	0x0800acdd
 800ad1c:	0800acdd 	.word	0x0800acdd
 800ad20:	0800ae6f 	.word	0x0800ae6f
 800ad24:	0800ad91 	.word	0x0800ad91
 800ad28:	0800ae51 	.word	0x0800ae51
 800ad2c:	0800acdd 	.word	0x0800acdd
 800ad30:	0800acdd 	.word	0x0800acdd
 800ad34:	0800ae91 	.word	0x0800ae91
 800ad38:	0800acdd 	.word	0x0800acdd
 800ad3c:	0800ad91 	.word	0x0800ad91
 800ad40:	0800acdd 	.word	0x0800acdd
 800ad44:	0800acdd 	.word	0x0800acdd
 800ad48:	0800ae59 	.word	0x0800ae59
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	1d1a      	adds	r2, r3, #4
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	602a      	str	r2, [r5, #0]
 800ad54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e0a4      	b.n	800aeaa <_printf_i+0x1f6>
 800ad60:	6820      	ldr	r0, [r4, #0]
 800ad62:	6829      	ldr	r1, [r5, #0]
 800ad64:	0606      	lsls	r6, r0, #24
 800ad66:	f101 0304 	add.w	r3, r1, #4
 800ad6a:	d50a      	bpl.n	800ad82 <_printf_i+0xce>
 800ad6c:	680e      	ldr	r6, [r1, #0]
 800ad6e:	602b      	str	r3, [r5, #0]
 800ad70:	2e00      	cmp	r6, #0
 800ad72:	da03      	bge.n	800ad7c <_printf_i+0xc8>
 800ad74:	232d      	movs	r3, #45	; 0x2d
 800ad76:	4276      	negs	r6, r6
 800ad78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad7c:	230a      	movs	r3, #10
 800ad7e:	485e      	ldr	r0, [pc, #376]	; (800aef8 <_printf_i+0x244>)
 800ad80:	e019      	b.n	800adb6 <_printf_i+0x102>
 800ad82:	680e      	ldr	r6, [r1, #0]
 800ad84:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad88:	602b      	str	r3, [r5, #0]
 800ad8a:	bf18      	it	ne
 800ad8c:	b236      	sxthne	r6, r6
 800ad8e:	e7ef      	b.n	800ad70 <_printf_i+0xbc>
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	6820      	ldr	r0, [r4, #0]
 800ad94:	1d19      	adds	r1, r3, #4
 800ad96:	6029      	str	r1, [r5, #0]
 800ad98:	0601      	lsls	r1, r0, #24
 800ad9a:	d501      	bpl.n	800ada0 <_printf_i+0xec>
 800ad9c:	681e      	ldr	r6, [r3, #0]
 800ad9e:	e002      	b.n	800ada6 <_printf_i+0xf2>
 800ada0:	0646      	lsls	r6, r0, #25
 800ada2:	d5fb      	bpl.n	800ad9c <_printf_i+0xe8>
 800ada4:	881e      	ldrh	r6, [r3, #0]
 800ada6:	2f6f      	cmp	r7, #111	; 0x6f
 800ada8:	bf0c      	ite	eq
 800adaa:	2308      	moveq	r3, #8
 800adac:	230a      	movne	r3, #10
 800adae:	4852      	ldr	r0, [pc, #328]	; (800aef8 <_printf_i+0x244>)
 800adb0:	2100      	movs	r1, #0
 800adb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adb6:	6865      	ldr	r5, [r4, #4]
 800adb8:	2d00      	cmp	r5, #0
 800adba:	bfa8      	it	ge
 800adbc:	6821      	ldrge	r1, [r4, #0]
 800adbe:	60a5      	str	r5, [r4, #8]
 800adc0:	bfa4      	itt	ge
 800adc2:	f021 0104 	bicge.w	r1, r1, #4
 800adc6:	6021      	strge	r1, [r4, #0]
 800adc8:	b90e      	cbnz	r6, 800adce <_printf_i+0x11a>
 800adca:	2d00      	cmp	r5, #0
 800adcc:	d04d      	beq.n	800ae6a <_printf_i+0x1b6>
 800adce:	4615      	mov	r5, r2
 800add0:	fbb6 f1f3 	udiv	r1, r6, r3
 800add4:	fb03 6711 	mls	r7, r3, r1, r6
 800add8:	5dc7      	ldrb	r7, [r0, r7]
 800adda:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800adde:	4637      	mov	r7, r6
 800ade0:	42bb      	cmp	r3, r7
 800ade2:	460e      	mov	r6, r1
 800ade4:	d9f4      	bls.n	800add0 <_printf_i+0x11c>
 800ade6:	2b08      	cmp	r3, #8
 800ade8:	d10b      	bne.n	800ae02 <_printf_i+0x14e>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	07de      	lsls	r6, r3, #31
 800adee:	d508      	bpl.n	800ae02 <_printf_i+0x14e>
 800adf0:	6923      	ldr	r3, [r4, #16]
 800adf2:	6861      	ldr	r1, [r4, #4]
 800adf4:	4299      	cmp	r1, r3
 800adf6:	bfde      	ittt	le
 800adf8:	2330      	movle	r3, #48	; 0x30
 800adfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae02:	1b52      	subs	r2, r2, r5
 800ae04:	6122      	str	r2, [r4, #16]
 800ae06:	464b      	mov	r3, r9
 800ae08:	4621      	mov	r1, r4
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	f8cd a000 	str.w	sl, [sp]
 800ae10:	aa03      	add	r2, sp, #12
 800ae12:	f7ff fedf 	bl	800abd4 <_printf_common>
 800ae16:	3001      	adds	r0, #1
 800ae18:	d14c      	bne.n	800aeb4 <_printf_i+0x200>
 800ae1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1e:	b004      	add	sp, #16
 800ae20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae24:	4834      	ldr	r0, [pc, #208]	; (800aef8 <_printf_i+0x244>)
 800ae26:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae2a:	6829      	ldr	r1, [r5, #0]
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae32:	6029      	str	r1, [r5, #0]
 800ae34:	061d      	lsls	r5, r3, #24
 800ae36:	d514      	bpl.n	800ae62 <_printf_i+0x1ae>
 800ae38:	07df      	lsls	r7, r3, #31
 800ae3a:	bf44      	itt	mi
 800ae3c:	f043 0320 	orrmi.w	r3, r3, #32
 800ae40:	6023      	strmi	r3, [r4, #0]
 800ae42:	b91e      	cbnz	r6, 800ae4c <_printf_i+0x198>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	f023 0320 	bic.w	r3, r3, #32
 800ae4a:	6023      	str	r3, [r4, #0]
 800ae4c:	2310      	movs	r3, #16
 800ae4e:	e7af      	b.n	800adb0 <_printf_i+0xfc>
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	f043 0320 	orr.w	r3, r3, #32
 800ae56:	6023      	str	r3, [r4, #0]
 800ae58:	2378      	movs	r3, #120	; 0x78
 800ae5a:	4828      	ldr	r0, [pc, #160]	; (800aefc <_printf_i+0x248>)
 800ae5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae60:	e7e3      	b.n	800ae2a <_printf_i+0x176>
 800ae62:	0659      	lsls	r1, r3, #25
 800ae64:	bf48      	it	mi
 800ae66:	b2b6      	uxthmi	r6, r6
 800ae68:	e7e6      	b.n	800ae38 <_printf_i+0x184>
 800ae6a:	4615      	mov	r5, r2
 800ae6c:	e7bb      	b.n	800ade6 <_printf_i+0x132>
 800ae6e:	682b      	ldr	r3, [r5, #0]
 800ae70:	6826      	ldr	r6, [r4, #0]
 800ae72:	1d18      	adds	r0, r3, #4
 800ae74:	6961      	ldr	r1, [r4, #20]
 800ae76:	6028      	str	r0, [r5, #0]
 800ae78:	0635      	lsls	r5, r6, #24
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	d501      	bpl.n	800ae82 <_printf_i+0x1ce>
 800ae7e:	6019      	str	r1, [r3, #0]
 800ae80:	e002      	b.n	800ae88 <_printf_i+0x1d4>
 800ae82:	0670      	lsls	r0, r6, #25
 800ae84:	d5fb      	bpl.n	800ae7e <_printf_i+0x1ca>
 800ae86:	8019      	strh	r1, [r3, #0]
 800ae88:	2300      	movs	r3, #0
 800ae8a:	4615      	mov	r5, r2
 800ae8c:	6123      	str	r3, [r4, #16]
 800ae8e:	e7ba      	b.n	800ae06 <_printf_i+0x152>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	2100      	movs	r1, #0
 800ae94:	1d1a      	adds	r2, r3, #4
 800ae96:	602a      	str	r2, [r5, #0]
 800ae98:	681d      	ldr	r5, [r3, #0]
 800ae9a:	6862      	ldr	r2, [r4, #4]
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f000 f95f 	bl	800b160 <memchr>
 800aea2:	b108      	cbz	r0, 800aea8 <_printf_i+0x1f4>
 800aea4:	1b40      	subs	r0, r0, r5
 800aea6:	6060      	str	r0, [r4, #4]
 800aea8:	6863      	ldr	r3, [r4, #4]
 800aeaa:	6123      	str	r3, [r4, #16]
 800aeac:	2300      	movs	r3, #0
 800aeae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeb2:	e7a8      	b.n	800ae06 <_printf_i+0x152>
 800aeb4:	462a      	mov	r2, r5
 800aeb6:	4649      	mov	r1, r9
 800aeb8:	4640      	mov	r0, r8
 800aeba:	6923      	ldr	r3, [r4, #16]
 800aebc:	47d0      	blx	sl
 800aebe:	3001      	adds	r0, #1
 800aec0:	d0ab      	beq.n	800ae1a <_printf_i+0x166>
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	079b      	lsls	r3, r3, #30
 800aec6:	d413      	bmi.n	800aef0 <_printf_i+0x23c>
 800aec8:	68e0      	ldr	r0, [r4, #12]
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	4298      	cmp	r0, r3
 800aece:	bfb8      	it	lt
 800aed0:	4618      	movlt	r0, r3
 800aed2:	e7a4      	b.n	800ae1e <_printf_i+0x16a>
 800aed4:	2301      	movs	r3, #1
 800aed6:	4632      	mov	r2, r6
 800aed8:	4649      	mov	r1, r9
 800aeda:	4640      	mov	r0, r8
 800aedc:	47d0      	blx	sl
 800aede:	3001      	adds	r0, #1
 800aee0:	d09b      	beq.n	800ae1a <_printf_i+0x166>
 800aee2:	3501      	adds	r5, #1
 800aee4:	68e3      	ldr	r3, [r4, #12]
 800aee6:	9903      	ldr	r1, [sp, #12]
 800aee8:	1a5b      	subs	r3, r3, r1
 800aeea:	42ab      	cmp	r3, r5
 800aeec:	dcf2      	bgt.n	800aed4 <_printf_i+0x220>
 800aeee:	e7eb      	b.n	800aec8 <_printf_i+0x214>
 800aef0:	2500      	movs	r5, #0
 800aef2:	f104 0619 	add.w	r6, r4, #25
 800aef6:	e7f5      	b.n	800aee4 <_printf_i+0x230>
 800aef8:	0800c28a 	.word	0x0800c28a
 800aefc:	0800c29b 	.word	0x0800c29b

0800af00 <sniprintf>:
 800af00:	b40c      	push	{r2, r3}
 800af02:	b530      	push	{r4, r5, lr}
 800af04:	4b17      	ldr	r3, [pc, #92]	; (800af64 <sniprintf+0x64>)
 800af06:	1e0c      	subs	r4, r1, #0
 800af08:	681d      	ldr	r5, [r3, #0]
 800af0a:	b09d      	sub	sp, #116	; 0x74
 800af0c:	da08      	bge.n	800af20 <sniprintf+0x20>
 800af0e:	238b      	movs	r3, #139	; 0x8b
 800af10:	f04f 30ff 	mov.w	r0, #4294967295
 800af14:	602b      	str	r3, [r5, #0]
 800af16:	b01d      	add	sp, #116	; 0x74
 800af18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af1c:	b002      	add	sp, #8
 800af1e:	4770      	bx	lr
 800af20:	f44f 7302 	mov.w	r3, #520	; 0x208
 800af24:	f8ad 3014 	strh.w	r3, [sp, #20]
 800af28:	bf0c      	ite	eq
 800af2a:	4623      	moveq	r3, r4
 800af2c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800af30:	9304      	str	r3, [sp, #16]
 800af32:	9307      	str	r3, [sp, #28]
 800af34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af38:	9002      	str	r0, [sp, #8]
 800af3a:	9006      	str	r0, [sp, #24]
 800af3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800af40:	4628      	mov	r0, r5
 800af42:	ab21      	add	r3, sp, #132	; 0x84
 800af44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800af46:	a902      	add	r1, sp, #8
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	f7ff fd43 	bl	800a9d4 <_svfiprintf_r>
 800af4e:	1c43      	adds	r3, r0, #1
 800af50:	bfbc      	itt	lt
 800af52:	238b      	movlt	r3, #139	; 0x8b
 800af54:	602b      	strlt	r3, [r5, #0]
 800af56:	2c00      	cmp	r4, #0
 800af58:	d0dd      	beq.n	800af16 <sniprintf+0x16>
 800af5a:	2200      	movs	r2, #0
 800af5c:	9b02      	ldr	r3, [sp, #8]
 800af5e:	701a      	strb	r2, [r3, #0]
 800af60:	e7d9      	b.n	800af16 <sniprintf+0x16>
 800af62:	bf00      	nop
 800af64:	20000108 	.word	0x20000108

0800af68 <siscanf>:
 800af68:	b40e      	push	{r1, r2, r3}
 800af6a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800af6e:	b530      	push	{r4, r5, lr}
 800af70:	b09c      	sub	sp, #112	; 0x70
 800af72:	ac1f      	add	r4, sp, #124	; 0x7c
 800af74:	f854 5b04 	ldr.w	r5, [r4], #4
 800af78:	f8ad 2014 	strh.w	r2, [sp, #20]
 800af7c:	9002      	str	r0, [sp, #8]
 800af7e:	9006      	str	r0, [sp, #24]
 800af80:	f7f5 f8e4 	bl	800014c <strlen>
 800af84:	4b0b      	ldr	r3, [pc, #44]	; (800afb4 <siscanf+0x4c>)
 800af86:	9003      	str	r0, [sp, #12]
 800af88:	930b      	str	r3, [sp, #44]	; 0x2c
 800af8a:	2300      	movs	r3, #0
 800af8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800af8e:	9314      	str	r3, [sp, #80]	; 0x50
 800af90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af94:	9007      	str	r0, [sp, #28]
 800af96:	4808      	ldr	r0, [pc, #32]	; (800afb8 <siscanf+0x50>)
 800af98:	f8ad 3016 	strh.w	r3, [sp, #22]
 800af9c:	462a      	mov	r2, r5
 800af9e:	4623      	mov	r3, r4
 800afa0:	a902      	add	r1, sp, #8
 800afa2:	6800      	ldr	r0, [r0, #0]
 800afa4:	9401      	str	r4, [sp, #4]
 800afa6:	f000 f98d 	bl	800b2c4 <__ssvfiscanf_r>
 800afaa:	b01c      	add	sp, #112	; 0x70
 800afac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afb0:	b003      	add	sp, #12
 800afb2:	4770      	bx	lr
 800afb4:	080098b1 	.word	0x080098b1
 800afb8:	20000108 	.word	0x20000108

0800afbc <strcpy>:
 800afbc:	4603      	mov	r3, r0
 800afbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afc2:	f803 2b01 	strb.w	r2, [r3], #1
 800afc6:	2a00      	cmp	r2, #0
 800afc8:	d1f9      	bne.n	800afbe <strcpy+0x2>
 800afca:	4770      	bx	lr

0800afcc <strncmp>:
 800afcc:	4603      	mov	r3, r0
 800afce:	b510      	push	{r4, lr}
 800afd0:	b172      	cbz	r2, 800aff0 <strncmp+0x24>
 800afd2:	3901      	subs	r1, #1
 800afd4:	1884      	adds	r4, r0, r2
 800afd6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800afda:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800afde:	4290      	cmp	r0, r2
 800afe0:	d101      	bne.n	800afe6 <strncmp+0x1a>
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	d101      	bne.n	800afea <strncmp+0x1e>
 800afe6:	1a80      	subs	r0, r0, r2
 800afe8:	bd10      	pop	{r4, pc}
 800afea:	2800      	cmp	r0, #0
 800afec:	d1f3      	bne.n	800afd6 <strncmp+0xa>
 800afee:	e7fa      	b.n	800afe6 <strncmp+0x1a>
 800aff0:	4610      	mov	r0, r2
 800aff2:	e7f9      	b.n	800afe8 <strncmp+0x1c>

0800aff4 <__tzcalc_limits>:
 800aff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff8:	4605      	mov	r5, r0
 800affa:	f7ff fc73 	bl	800a8e4 <__gettzinfo>
 800affe:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800b002:	429d      	cmp	r5, r3
 800b004:	f340 809a 	ble.w	800b13c <__tzcalc_limits+0x148>
 800b008:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800b00c:	18ac      	adds	r4, r5, r2
 800b00e:	f240 126d 	movw	r2, #365	; 0x16d
 800b012:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800b016:	10a4      	asrs	r4, r4, #2
 800b018:	fb02 4403 	mla	r4, r2, r3, r4
 800b01c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800b020:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800b024:	fb93 f3f2 	sdiv	r3, r3, r2
 800b028:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800b02c:	441c      	add	r4, r3
 800b02e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b032:	186a      	adds	r2, r5, r1
 800b034:	fbb2 f2f3 	udiv	r2, r2, r3
 800b038:	fb95 fcf3 	sdiv	ip, r5, r3
 800b03c:	4414      	add	r4, r2
 800b03e:	2264      	movs	r2, #100	; 0x64
 800b040:	fb03 5c1c 	mls	ip, r3, ip, r5
 800b044:	fb95 f7f2 	sdiv	r7, r5, r2
 800b048:	fabc f68c 	clz	r6, ip
 800b04c:	4601      	mov	r1, r0
 800b04e:	fb02 5717 	mls	r7, r2, r7, r5
 800b052:	6045      	str	r5, [r0, #4]
 800b054:	0976      	lsrs	r6, r6, #5
 800b056:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800b05a:	f005 0203 	and.w	r2, r5, #3
 800b05e:	7a0d      	ldrb	r5, [r1, #8]
 800b060:	694b      	ldr	r3, [r1, #20]
 800b062:	2d4a      	cmp	r5, #74	; 0x4a
 800b064:	d12d      	bne.n	800b0c2 <__tzcalc_limits+0xce>
 800b066:	eb04 0e03 	add.w	lr, r4, r3
 800b06a:	b902      	cbnz	r2, 800b06e <__tzcalc_limits+0x7a>
 800b06c:	b917      	cbnz	r7, 800b074 <__tzcalc_limits+0x80>
 800b06e:	f1bc 0f00 	cmp.w	ip, #0
 800b072:	d124      	bne.n	800b0be <__tzcalc_limits+0xca>
 800b074:	2b3b      	cmp	r3, #59	; 0x3b
 800b076:	bfd4      	ite	le
 800b078:	2300      	movle	r3, #0
 800b07a:	2301      	movgt	r3, #1
 800b07c:	4473      	add	r3, lr
 800b07e:	3b01      	subs	r3, #1
 800b080:	698d      	ldr	r5, [r1, #24]
 800b082:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800b140 <__tzcalc_limits+0x14c>
 800b086:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800b08a:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800b08e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b090:	18ed      	adds	r5, r5, r3
 800b092:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800b096:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800b09a:	3128      	adds	r1, #40	; 0x28
 800b09c:	458b      	cmp	fp, r1
 800b09e:	d1de      	bne.n	800b05e <__tzcalc_limits+0x6a>
 800b0a0:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800b0a4:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800b0a8:	428c      	cmp	r4, r1
 800b0aa:	eb72 0303 	sbcs.w	r3, r2, r3
 800b0ae:	bfb4      	ite	lt
 800b0b0:	2301      	movlt	r3, #1
 800b0b2:	2300      	movge	r3, #0
 800b0b4:	6003      	str	r3, [r0, #0]
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	b003      	add	sp, #12
 800b0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e7dc      	b.n	800b07c <__tzcalc_limits+0x88>
 800b0c2:	2d44      	cmp	r5, #68	; 0x44
 800b0c4:	d101      	bne.n	800b0ca <__tzcalc_limits+0xd6>
 800b0c6:	4423      	add	r3, r4
 800b0c8:	e7da      	b.n	800b080 <__tzcalc_limits+0x8c>
 800b0ca:	bb8a      	cbnz	r2, 800b130 <__tzcalc_limits+0x13c>
 800b0cc:	2f00      	cmp	r7, #0
 800b0ce:	bf0c      	ite	eq
 800b0d0:	4635      	moveq	r5, r6
 800b0d2:	2501      	movne	r5, #1
 800b0d4:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800b0d8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800b0dc:	f04f 0800 	mov.w	r8, #0
 800b0e0:	f8cd e004 	str.w	lr, [sp, #4]
 800b0e4:	46a6      	mov	lr, r4
 800b0e6:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800b144 <__tzcalc_limits+0x150>
 800b0ea:	fb0a 9505 	mla	r5, sl, r5, r9
 800b0ee:	3d04      	subs	r5, #4
 800b0f0:	f8dd a004 	ldr.w	sl, [sp, #4]
 800b0f4:	f108 0801 	add.w	r8, r8, #1
 800b0f8:	45c2      	cmp	sl, r8
 800b0fa:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800b0fe:	dc19      	bgt.n	800b134 <__tzcalc_limits+0x140>
 800b100:	f04f 0807 	mov.w	r8, #7
 800b104:	f10e 0504 	add.w	r5, lr, #4
 800b108:	fb95 f8f8 	sdiv	r8, r5, r8
 800b10c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800b110:	eba5 0808 	sub.w	r8, r5, r8
 800b114:	ebb3 0808 	subs.w	r8, r3, r8
 800b118:	690b      	ldr	r3, [r1, #16]
 800b11a:	bf48      	it	mi
 800b11c:	f108 0807 	addmi.w	r8, r8, #7
 800b120:	3b01      	subs	r3, #1
 800b122:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b126:	4443      	add	r3, r8
 800b128:	454b      	cmp	r3, r9
 800b12a:	da05      	bge.n	800b138 <__tzcalc_limits+0x144>
 800b12c:	4473      	add	r3, lr
 800b12e:	e7a7      	b.n	800b080 <__tzcalc_limits+0x8c>
 800b130:	4635      	mov	r5, r6
 800b132:	e7cf      	b.n	800b0d4 <__tzcalc_limits+0xe0>
 800b134:	44ce      	add	lr, r9
 800b136:	e7db      	b.n	800b0f0 <__tzcalc_limits+0xfc>
 800b138:	3b07      	subs	r3, #7
 800b13a:	e7f5      	b.n	800b128 <__tzcalc_limits+0x134>
 800b13c:	2000      	movs	r0, #0
 800b13e:	e7bb      	b.n	800b0b8 <__tzcalc_limits+0xc4>
 800b140:	00015180 	.word	0x00015180
 800b144:	0800c2ac 	.word	0x0800c2ac

0800b148 <__env_lock>:
 800b148:	4801      	ldr	r0, [pc, #4]	; (800b150 <__env_lock+0x8>)
 800b14a:	f7fe ba8c 	b.w	8009666 <__retarget_lock_acquire_recursive>
 800b14e:	bf00      	nop
 800b150:	200006c0 	.word	0x200006c0

0800b154 <__env_unlock>:
 800b154:	4801      	ldr	r0, [pc, #4]	; (800b15c <__env_unlock+0x8>)
 800b156:	f7fe ba88 	b.w	800966a <__retarget_lock_release_recursive>
 800b15a:	bf00      	nop
 800b15c:	200006c0 	.word	0x200006c0

0800b160 <memchr>:
 800b160:	4603      	mov	r3, r0
 800b162:	b510      	push	{r4, lr}
 800b164:	b2c9      	uxtb	r1, r1
 800b166:	4402      	add	r2, r0
 800b168:	4293      	cmp	r3, r2
 800b16a:	4618      	mov	r0, r3
 800b16c:	d101      	bne.n	800b172 <memchr+0x12>
 800b16e:	2000      	movs	r0, #0
 800b170:	e003      	b.n	800b17a <memchr+0x1a>
 800b172:	7804      	ldrb	r4, [r0, #0]
 800b174:	3301      	adds	r3, #1
 800b176:	428c      	cmp	r4, r1
 800b178:	d1f6      	bne.n	800b168 <memchr+0x8>
 800b17a:	bd10      	pop	{r4, pc}

0800b17c <memmove>:
 800b17c:	4288      	cmp	r0, r1
 800b17e:	b510      	push	{r4, lr}
 800b180:	eb01 0402 	add.w	r4, r1, r2
 800b184:	d902      	bls.n	800b18c <memmove+0x10>
 800b186:	4284      	cmp	r4, r0
 800b188:	4623      	mov	r3, r4
 800b18a:	d807      	bhi.n	800b19c <memmove+0x20>
 800b18c:	1e43      	subs	r3, r0, #1
 800b18e:	42a1      	cmp	r1, r4
 800b190:	d008      	beq.n	800b1a4 <memmove+0x28>
 800b192:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b19a:	e7f8      	b.n	800b18e <memmove+0x12>
 800b19c:	4601      	mov	r1, r0
 800b19e:	4402      	add	r2, r0
 800b1a0:	428a      	cmp	r2, r1
 800b1a2:	d100      	bne.n	800b1a6 <memmove+0x2a>
 800b1a4:	bd10      	pop	{r4, pc}
 800b1a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1ae:	e7f7      	b.n	800b1a0 <memmove+0x24>

0800b1b0 <_realloc_r>:
 800b1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b4:	4680      	mov	r8, r0
 800b1b6:	4614      	mov	r4, r2
 800b1b8:	460e      	mov	r6, r1
 800b1ba:	b921      	cbnz	r1, 800b1c6 <_realloc_r+0x16>
 800b1bc:	4611      	mov	r1, r2
 800b1be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c2:	f7fe bad1 	b.w	8009768 <_malloc_r>
 800b1c6:	b92a      	cbnz	r2, 800b1d4 <_realloc_r+0x24>
 800b1c8:	f7fe fa66 	bl	8009698 <_free_r>
 800b1cc:	4625      	mov	r5, r4
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d4:	f000 fbb2 	bl	800b93c <_malloc_usable_size_r>
 800b1d8:	4284      	cmp	r4, r0
 800b1da:	4607      	mov	r7, r0
 800b1dc:	d802      	bhi.n	800b1e4 <_realloc_r+0x34>
 800b1de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1e2:	d812      	bhi.n	800b20a <_realloc_r+0x5a>
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	4640      	mov	r0, r8
 800b1e8:	f7fe fabe 	bl	8009768 <_malloc_r>
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d0ed      	beq.n	800b1ce <_realloc_r+0x1e>
 800b1f2:	42bc      	cmp	r4, r7
 800b1f4:	4622      	mov	r2, r4
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	bf28      	it	cs
 800b1fa:	463a      	movcs	r2, r7
 800b1fc:	f7fe fa36 	bl	800966c <memcpy>
 800b200:	4631      	mov	r1, r6
 800b202:	4640      	mov	r0, r8
 800b204:	f7fe fa48 	bl	8009698 <_free_r>
 800b208:	e7e1      	b.n	800b1ce <_realloc_r+0x1e>
 800b20a:	4635      	mov	r5, r6
 800b20c:	e7df      	b.n	800b1ce <_realloc_r+0x1e>

0800b20e <_sungetc_r>:
 800b20e:	b538      	push	{r3, r4, r5, lr}
 800b210:	1c4b      	adds	r3, r1, #1
 800b212:	4614      	mov	r4, r2
 800b214:	d103      	bne.n	800b21e <_sungetc_r+0x10>
 800b216:	f04f 35ff 	mov.w	r5, #4294967295
 800b21a:	4628      	mov	r0, r5
 800b21c:	bd38      	pop	{r3, r4, r5, pc}
 800b21e:	8993      	ldrh	r3, [r2, #12]
 800b220:	b2cd      	uxtb	r5, r1
 800b222:	f023 0320 	bic.w	r3, r3, #32
 800b226:	8193      	strh	r3, [r2, #12]
 800b228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b22a:	6852      	ldr	r2, [r2, #4]
 800b22c:	b18b      	cbz	r3, 800b252 <_sungetc_r+0x44>
 800b22e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b230:	4293      	cmp	r3, r2
 800b232:	dd08      	ble.n	800b246 <_sungetc_r+0x38>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	1e5a      	subs	r2, r3, #1
 800b238:	6022      	str	r2, [r4, #0]
 800b23a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b23e:	6863      	ldr	r3, [r4, #4]
 800b240:	3301      	adds	r3, #1
 800b242:	6063      	str	r3, [r4, #4]
 800b244:	e7e9      	b.n	800b21a <_sungetc_r+0xc>
 800b246:	4621      	mov	r1, r4
 800b248:	f000 fb40 	bl	800b8cc <__submore>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d0f1      	beq.n	800b234 <_sungetc_r+0x26>
 800b250:	e7e1      	b.n	800b216 <_sungetc_r+0x8>
 800b252:	6921      	ldr	r1, [r4, #16]
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	b151      	cbz	r1, 800b26e <_sungetc_r+0x60>
 800b258:	4299      	cmp	r1, r3
 800b25a:	d208      	bcs.n	800b26e <_sungetc_r+0x60>
 800b25c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b260:	42a9      	cmp	r1, r5
 800b262:	d104      	bne.n	800b26e <_sungetc_r+0x60>
 800b264:	3b01      	subs	r3, #1
 800b266:	3201      	adds	r2, #1
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	6062      	str	r2, [r4, #4]
 800b26c:	e7d5      	b.n	800b21a <_sungetc_r+0xc>
 800b26e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b276:	6363      	str	r3, [r4, #52]	; 0x34
 800b278:	2303      	movs	r3, #3
 800b27a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b27c:	4623      	mov	r3, r4
 800b27e:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b282:	6023      	str	r3, [r4, #0]
 800b284:	2301      	movs	r3, #1
 800b286:	e7dc      	b.n	800b242 <_sungetc_r+0x34>

0800b288 <__ssrefill_r>:
 800b288:	b510      	push	{r4, lr}
 800b28a:	460c      	mov	r4, r1
 800b28c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b28e:	b169      	cbz	r1, 800b2ac <__ssrefill_r+0x24>
 800b290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b294:	4299      	cmp	r1, r3
 800b296:	d001      	beq.n	800b29c <__ssrefill_r+0x14>
 800b298:	f7fe f9fe 	bl	8009698 <_free_r>
 800b29c:	2000      	movs	r0, #0
 800b29e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2a0:	6360      	str	r0, [r4, #52]	; 0x34
 800b2a2:	6063      	str	r3, [r4, #4]
 800b2a4:	b113      	cbz	r3, 800b2ac <__ssrefill_r+0x24>
 800b2a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	bd10      	pop	{r4, pc}
 800b2ac:	6923      	ldr	r3, [r4, #16]
 800b2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b2:	6023      	str	r3, [r4, #0]
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	6063      	str	r3, [r4, #4]
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	f043 0320 	orr.w	r3, r3, #32
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	e7f3      	b.n	800b2aa <__ssrefill_r+0x22>
	...

0800b2c4 <__ssvfiscanf_r>:
 800b2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b2d2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b2d6:	49a7      	ldr	r1, [pc, #668]	; (800b574 <__ssvfiscanf_r+0x2b0>)
 800b2d8:	f10d 0804 	add.w	r8, sp, #4
 800b2dc:	91a0      	str	r1, [sp, #640]	; 0x280
 800b2de:	49a6      	ldr	r1, [pc, #664]	; (800b578 <__ssvfiscanf_r+0x2b4>)
 800b2e0:	4fa6      	ldr	r7, [pc, #664]	; (800b57c <__ssvfiscanf_r+0x2b8>)
 800b2e2:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b580 <__ssvfiscanf_r+0x2bc>
 800b2e6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b2ea:	91a1      	str	r1, [sp, #644]	; 0x284
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	7813      	ldrb	r3, [r2, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 815c 	beq.w	800b5ae <__ssvfiscanf_r+0x2ea>
 800b2f6:	5dd9      	ldrb	r1, [r3, r7]
 800b2f8:	1c55      	adds	r5, r2, #1
 800b2fa:	f011 0108 	ands.w	r1, r1, #8
 800b2fe:	d019      	beq.n	800b334 <__ssvfiscanf_r+0x70>
 800b300:	6863      	ldr	r3, [r4, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	dd0f      	ble.n	800b326 <__ssvfiscanf_r+0x62>
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	781a      	ldrb	r2, [r3, #0]
 800b30a:	5cba      	ldrb	r2, [r7, r2]
 800b30c:	0712      	lsls	r2, r2, #28
 800b30e:	d401      	bmi.n	800b314 <__ssvfiscanf_r+0x50>
 800b310:	462a      	mov	r2, r5
 800b312:	e7ec      	b.n	800b2ee <__ssvfiscanf_r+0x2a>
 800b314:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b316:	3301      	adds	r3, #1
 800b318:	3201      	adds	r2, #1
 800b31a:	9245      	str	r2, [sp, #276]	; 0x114
 800b31c:	6862      	ldr	r2, [r4, #4]
 800b31e:	6023      	str	r3, [r4, #0]
 800b320:	3a01      	subs	r2, #1
 800b322:	6062      	str	r2, [r4, #4]
 800b324:	e7ec      	b.n	800b300 <__ssvfiscanf_r+0x3c>
 800b326:	4621      	mov	r1, r4
 800b328:	4630      	mov	r0, r6
 800b32a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b32c:	4798      	blx	r3
 800b32e:	2800      	cmp	r0, #0
 800b330:	d0e9      	beq.n	800b306 <__ssvfiscanf_r+0x42>
 800b332:	e7ed      	b.n	800b310 <__ssvfiscanf_r+0x4c>
 800b334:	2b25      	cmp	r3, #37	; 0x25
 800b336:	d012      	beq.n	800b35e <__ssvfiscanf_r+0x9a>
 800b338:	469a      	mov	sl, r3
 800b33a:	6863      	ldr	r3, [r4, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f340 8094 	ble.w	800b46a <__ssvfiscanf_r+0x1a6>
 800b342:	6822      	ldr	r2, [r4, #0]
 800b344:	7813      	ldrb	r3, [r2, #0]
 800b346:	4553      	cmp	r3, sl
 800b348:	f040 8131 	bne.w	800b5ae <__ssvfiscanf_r+0x2ea>
 800b34c:	6863      	ldr	r3, [r4, #4]
 800b34e:	3201      	adds	r2, #1
 800b350:	3b01      	subs	r3, #1
 800b352:	6063      	str	r3, [r4, #4]
 800b354:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b356:	6022      	str	r2, [r4, #0]
 800b358:	3301      	adds	r3, #1
 800b35a:	9345      	str	r3, [sp, #276]	; 0x114
 800b35c:	e7d8      	b.n	800b310 <__ssvfiscanf_r+0x4c>
 800b35e:	9141      	str	r1, [sp, #260]	; 0x104
 800b360:	9143      	str	r1, [sp, #268]	; 0x10c
 800b362:	7853      	ldrb	r3, [r2, #1]
 800b364:	2b2a      	cmp	r3, #42	; 0x2a
 800b366:	bf04      	itt	eq
 800b368:	2310      	moveq	r3, #16
 800b36a:	1c95      	addeq	r5, r2, #2
 800b36c:	f04f 020a 	mov.w	r2, #10
 800b370:	bf08      	it	eq
 800b372:	9341      	streq	r3, [sp, #260]	; 0x104
 800b374:	46aa      	mov	sl, r5
 800b376:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b37a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b37e:	2b09      	cmp	r3, #9
 800b380:	d91d      	bls.n	800b3be <__ssvfiscanf_r+0xfa>
 800b382:	2203      	movs	r2, #3
 800b384:	487e      	ldr	r0, [pc, #504]	; (800b580 <__ssvfiscanf_r+0x2bc>)
 800b386:	f7ff feeb 	bl	800b160 <memchr>
 800b38a:	b140      	cbz	r0, 800b39e <__ssvfiscanf_r+0xda>
 800b38c:	2301      	movs	r3, #1
 800b38e:	4655      	mov	r5, sl
 800b390:	eba0 0009 	sub.w	r0, r0, r9
 800b394:	fa03 f000 	lsl.w	r0, r3, r0
 800b398:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b39a:	4318      	orrs	r0, r3
 800b39c:	9041      	str	r0, [sp, #260]	; 0x104
 800b39e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b3a2:	2b78      	cmp	r3, #120	; 0x78
 800b3a4:	d806      	bhi.n	800b3b4 <__ssvfiscanf_r+0xf0>
 800b3a6:	2b57      	cmp	r3, #87	; 0x57
 800b3a8:	d810      	bhi.n	800b3cc <__ssvfiscanf_r+0x108>
 800b3aa:	2b25      	cmp	r3, #37	; 0x25
 800b3ac:	d0c4      	beq.n	800b338 <__ssvfiscanf_r+0x74>
 800b3ae:	d857      	bhi.n	800b460 <__ssvfiscanf_r+0x19c>
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d065      	beq.n	800b480 <__ssvfiscanf_r+0x1bc>
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	9347      	str	r3, [sp, #284]	; 0x11c
 800b3b8:	230a      	movs	r3, #10
 800b3ba:	9342      	str	r3, [sp, #264]	; 0x108
 800b3bc:	e072      	b.n	800b4a4 <__ssvfiscanf_r+0x1e0>
 800b3be:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b3c0:	4655      	mov	r5, sl
 800b3c2:	fb02 1103 	mla	r1, r2, r3, r1
 800b3c6:	3930      	subs	r1, #48	; 0x30
 800b3c8:	9143      	str	r1, [sp, #268]	; 0x10c
 800b3ca:	e7d3      	b.n	800b374 <__ssvfiscanf_r+0xb0>
 800b3cc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b3d0:	2a20      	cmp	r2, #32
 800b3d2:	d8ef      	bhi.n	800b3b4 <__ssvfiscanf_r+0xf0>
 800b3d4:	a101      	add	r1, pc, #4	; (adr r1, 800b3dc <__ssvfiscanf_r+0x118>)
 800b3d6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b3da:	bf00      	nop
 800b3dc:	0800b48f 	.word	0x0800b48f
 800b3e0:	0800b3b5 	.word	0x0800b3b5
 800b3e4:	0800b3b5 	.word	0x0800b3b5
 800b3e8:	0800b4ed 	.word	0x0800b4ed
 800b3ec:	0800b3b5 	.word	0x0800b3b5
 800b3f0:	0800b3b5 	.word	0x0800b3b5
 800b3f4:	0800b3b5 	.word	0x0800b3b5
 800b3f8:	0800b3b5 	.word	0x0800b3b5
 800b3fc:	0800b3b5 	.word	0x0800b3b5
 800b400:	0800b3b5 	.word	0x0800b3b5
 800b404:	0800b3b5 	.word	0x0800b3b5
 800b408:	0800b503 	.word	0x0800b503
 800b40c:	0800b4d9 	.word	0x0800b4d9
 800b410:	0800b467 	.word	0x0800b467
 800b414:	0800b467 	.word	0x0800b467
 800b418:	0800b467 	.word	0x0800b467
 800b41c:	0800b3b5 	.word	0x0800b3b5
 800b420:	0800b4dd 	.word	0x0800b4dd
 800b424:	0800b3b5 	.word	0x0800b3b5
 800b428:	0800b3b5 	.word	0x0800b3b5
 800b42c:	0800b3b5 	.word	0x0800b3b5
 800b430:	0800b3b5 	.word	0x0800b3b5
 800b434:	0800b513 	.word	0x0800b513
 800b438:	0800b4e5 	.word	0x0800b4e5
 800b43c:	0800b487 	.word	0x0800b487
 800b440:	0800b3b5 	.word	0x0800b3b5
 800b444:	0800b3b5 	.word	0x0800b3b5
 800b448:	0800b50f 	.word	0x0800b50f
 800b44c:	0800b3b5 	.word	0x0800b3b5
 800b450:	0800b4d9 	.word	0x0800b4d9
 800b454:	0800b3b5 	.word	0x0800b3b5
 800b458:	0800b3b5 	.word	0x0800b3b5
 800b45c:	0800b48f 	.word	0x0800b48f
 800b460:	3b45      	subs	r3, #69	; 0x45
 800b462:	2b02      	cmp	r3, #2
 800b464:	d8a6      	bhi.n	800b3b4 <__ssvfiscanf_r+0xf0>
 800b466:	2305      	movs	r3, #5
 800b468:	e01b      	b.n	800b4a2 <__ssvfiscanf_r+0x1de>
 800b46a:	4621      	mov	r1, r4
 800b46c:	4630      	mov	r0, r6
 800b46e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b470:	4798      	blx	r3
 800b472:	2800      	cmp	r0, #0
 800b474:	f43f af65 	beq.w	800b342 <__ssvfiscanf_r+0x7e>
 800b478:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b47a:	2800      	cmp	r0, #0
 800b47c:	f040 808d 	bne.w	800b59a <__ssvfiscanf_r+0x2d6>
 800b480:	f04f 30ff 	mov.w	r0, #4294967295
 800b484:	e08f      	b.n	800b5a6 <__ssvfiscanf_r+0x2e2>
 800b486:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b488:	f042 0220 	orr.w	r2, r2, #32
 800b48c:	9241      	str	r2, [sp, #260]	; 0x104
 800b48e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b494:	9241      	str	r2, [sp, #260]	; 0x104
 800b496:	2210      	movs	r2, #16
 800b498:	2b6f      	cmp	r3, #111	; 0x6f
 800b49a:	bf34      	ite	cc
 800b49c:	2303      	movcc	r3, #3
 800b49e:	2304      	movcs	r3, #4
 800b4a0:	9242      	str	r2, [sp, #264]	; 0x108
 800b4a2:	9347      	str	r3, [sp, #284]	; 0x11c
 800b4a4:	6863      	ldr	r3, [r4, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	dd42      	ble.n	800b530 <__ssvfiscanf_r+0x26c>
 800b4aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b4ac:	0659      	lsls	r1, r3, #25
 800b4ae:	d404      	bmi.n	800b4ba <__ssvfiscanf_r+0x1f6>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	781a      	ldrb	r2, [r3, #0]
 800b4b4:	5cba      	ldrb	r2, [r7, r2]
 800b4b6:	0712      	lsls	r2, r2, #28
 800b4b8:	d441      	bmi.n	800b53e <__ssvfiscanf_r+0x27a>
 800b4ba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	dc50      	bgt.n	800b562 <__ssvfiscanf_r+0x29e>
 800b4c0:	466b      	mov	r3, sp
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	a941      	add	r1, sp, #260	; 0x104
 800b4c8:	f000 f876 	bl	800b5b8 <_scanf_chars>
 800b4cc:	2801      	cmp	r0, #1
 800b4ce:	d06e      	beq.n	800b5ae <__ssvfiscanf_r+0x2ea>
 800b4d0:	2802      	cmp	r0, #2
 800b4d2:	f47f af1d 	bne.w	800b310 <__ssvfiscanf_r+0x4c>
 800b4d6:	e7cf      	b.n	800b478 <__ssvfiscanf_r+0x1b4>
 800b4d8:	220a      	movs	r2, #10
 800b4da:	e7dd      	b.n	800b498 <__ssvfiscanf_r+0x1d4>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	9342      	str	r3, [sp, #264]	; 0x108
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	e7de      	b.n	800b4a2 <__ssvfiscanf_r+0x1de>
 800b4e4:	2308      	movs	r3, #8
 800b4e6:	9342      	str	r3, [sp, #264]	; 0x108
 800b4e8:	2304      	movs	r3, #4
 800b4ea:	e7da      	b.n	800b4a2 <__ssvfiscanf_r+0x1de>
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	4640      	mov	r0, r8
 800b4f0:	f000 f9b4 	bl	800b85c <__sccl>
 800b4f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b4f6:	4605      	mov	r5, r0
 800b4f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4fc:	9341      	str	r3, [sp, #260]	; 0x104
 800b4fe:	2301      	movs	r3, #1
 800b500:	e7cf      	b.n	800b4a2 <__ssvfiscanf_r+0x1de>
 800b502:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b508:	9341      	str	r3, [sp, #260]	; 0x104
 800b50a:	2300      	movs	r3, #0
 800b50c:	e7c9      	b.n	800b4a2 <__ssvfiscanf_r+0x1de>
 800b50e:	2302      	movs	r3, #2
 800b510:	e7c7      	b.n	800b4a2 <__ssvfiscanf_r+0x1de>
 800b512:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b514:	06c3      	lsls	r3, r0, #27
 800b516:	f53f aefb 	bmi.w	800b310 <__ssvfiscanf_r+0x4c>
 800b51a:	9b00      	ldr	r3, [sp, #0]
 800b51c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b51e:	1d19      	adds	r1, r3, #4
 800b520:	9100      	str	r1, [sp, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f010 0f01 	tst.w	r0, #1
 800b528:	bf14      	ite	ne
 800b52a:	801a      	strhne	r2, [r3, #0]
 800b52c:	601a      	streq	r2, [r3, #0]
 800b52e:	e6ef      	b.n	800b310 <__ssvfiscanf_r+0x4c>
 800b530:	4621      	mov	r1, r4
 800b532:	4630      	mov	r0, r6
 800b534:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b536:	4798      	blx	r3
 800b538:	2800      	cmp	r0, #0
 800b53a:	d0b6      	beq.n	800b4aa <__ssvfiscanf_r+0x1e6>
 800b53c:	e79c      	b.n	800b478 <__ssvfiscanf_r+0x1b4>
 800b53e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b540:	3201      	adds	r2, #1
 800b542:	9245      	str	r2, [sp, #276]	; 0x114
 800b544:	6862      	ldr	r2, [r4, #4]
 800b546:	3a01      	subs	r2, #1
 800b548:	2a00      	cmp	r2, #0
 800b54a:	6062      	str	r2, [r4, #4]
 800b54c:	dd02      	ble.n	800b554 <__ssvfiscanf_r+0x290>
 800b54e:	3301      	adds	r3, #1
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	e7ad      	b.n	800b4b0 <__ssvfiscanf_r+0x1ec>
 800b554:	4621      	mov	r1, r4
 800b556:	4630      	mov	r0, r6
 800b558:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b55a:	4798      	blx	r3
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d0a7      	beq.n	800b4b0 <__ssvfiscanf_r+0x1ec>
 800b560:	e78a      	b.n	800b478 <__ssvfiscanf_r+0x1b4>
 800b562:	2b04      	cmp	r3, #4
 800b564:	dc0e      	bgt.n	800b584 <__ssvfiscanf_r+0x2c0>
 800b566:	466b      	mov	r3, sp
 800b568:	4622      	mov	r2, r4
 800b56a:	4630      	mov	r0, r6
 800b56c:	a941      	add	r1, sp, #260	; 0x104
 800b56e:	f000 f87d 	bl	800b66c <_scanf_i>
 800b572:	e7ab      	b.n	800b4cc <__ssvfiscanf_r+0x208>
 800b574:	0800b20f 	.word	0x0800b20f
 800b578:	0800b289 	.word	0x0800b289
 800b57c:	0800c179 	.word	0x0800c179
 800b580:	0800c27f 	.word	0x0800c27f
 800b584:	4b0b      	ldr	r3, [pc, #44]	; (800b5b4 <__ssvfiscanf_r+0x2f0>)
 800b586:	2b00      	cmp	r3, #0
 800b588:	f43f aec2 	beq.w	800b310 <__ssvfiscanf_r+0x4c>
 800b58c:	466b      	mov	r3, sp
 800b58e:	4622      	mov	r2, r4
 800b590:	4630      	mov	r0, r6
 800b592:	a941      	add	r1, sp, #260	; 0x104
 800b594:	f3af 8000 	nop.w
 800b598:	e798      	b.n	800b4cc <__ssvfiscanf_r+0x208>
 800b59a:	89a3      	ldrh	r3, [r4, #12]
 800b59c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b5a0:	bf18      	it	ne
 800b5a2:	f04f 30ff 	movne.w	r0, #4294967295
 800b5a6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ae:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b5b0:	e7f9      	b.n	800b5a6 <__ssvfiscanf_r+0x2e2>
 800b5b2:	bf00      	nop
 800b5b4:	00000000 	.word	0x00000000

0800b5b8 <_scanf_chars>:
 800b5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5bc:	4615      	mov	r5, r2
 800b5be:	688a      	ldr	r2, [r1, #8]
 800b5c0:	4680      	mov	r8, r0
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	b932      	cbnz	r2, 800b5d4 <_scanf_chars+0x1c>
 800b5c6:	698a      	ldr	r2, [r1, #24]
 800b5c8:	2a00      	cmp	r2, #0
 800b5ca:	bf0c      	ite	eq
 800b5cc:	2201      	moveq	r2, #1
 800b5ce:	f04f 32ff 	movne.w	r2, #4294967295
 800b5d2:	608a      	str	r2, [r1, #8]
 800b5d4:	2700      	movs	r7, #0
 800b5d6:	6822      	ldr	r2, [r4, #0]
 800b5d8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b668 <_scanf_chars+0xb0>
 800b5dc:	06d1      	lsls	r1, r2, #27
 800b5de:	bf5f      	itttt	pl
 800b5e0:	681a      	ldrpl	r2, [r3, #0]
 800b5e2:	1d11      	addpl	r1, r2, #4
 800b5e4:	6019      	strpl	r1, [r3, #0]
 800b5e6:	6816      	ldrpl	r6, [r2, #0]
 800b5e8:	69a0      	ldr	r0, [r4, #24]
 800b5ea:	b188      	cbz	r0, 800b610 <_scanf_chars+0x58>
 800b5ec:	2801      	cmp	r0, #1
 800b5ee:	d107      	bne.n	800b600 <_scanf_chars+0x48>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	781a      	ldrb	r2, [r3, #0]
 800b5f4:	6963      	ldr	r3, [r4, #20]
 800b5f6:	5c9b      	ldrb	r3, [r3, r2]
 800b5f8:	b953      	cbnz	r3, 800b610 <_scanf_chars+0x58>
 800b5fa:	2f00      	cmp	r7, #0
 800b5fc:	d031      	beq.n	800b662 <_scanf_chars+0xaa>
 800b5fe:	e022      	b.n	800b646 <_scanf_chars+0x8e>
 800b600:	2802      	cmp	r0, #2
 800b602:	d120      	bne.n	800b646 <_scanf_chars+0x8e>
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b60c:	071b      	lsls	r3, r3, #28
 800b60e:	d41a      	bmi.n	800b646 <_scanf_chars+0x8e>
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	3701      	adds	r7, #1
 800b614:	06da      	lsls	r2, r3, #27
 800b616:	bf5e      	ittt	pl
 800b618:	682b      	ldrpl	r3, [r5, #0]
 800b61a:	781b      	ldrbpl	r3, [r3, #0]
 800b61c:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b620:	682a      	ldr	r2, [r5, #0]
 800b622:	686b      	ldr	r3, [r5, #4]
 800b624:	3201      	adds	r2, #1
 800b626:	602a      	str	r2, [r5, #0]
 800b628:	68a2      	ldr	r2, [r4, #8]
 800b62a:	3b01      	subs	r3, #1
 800b62c:	3a01      	subs	r2, #1
 800b62e:	606b      	str	r3, [r5, #4]
 800b630:	60a2      	str	r2, [r4, #8]
 800b632:	b142      	cbz	r2, 800b646 <_scanf_chars+0x8e>
 800b634:	2b00      	cmp	r3, #0
 800b636:	dcd7      	bgt.n	800b5e8 <_scanf_chars+0x30>
 800b638:	4629      	mov	r1, r5
 800b63a:	4640      	mov	r0, r8
 800b63c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b640:	4798      	blx	r3
 800b642:	2800      	cmp	r0, #0
 800b644:	d0d0      	beq.n	800b5e8 <_scanf_chars+0x30>
 800b646:	6823      	ldr	r3, [r4, #0]
 800b648:	f013 0310 	ands.w	r3, r3, #16
 800b64c:	d105      	bne.n	800b65a <_scanf_chars+0xa2>
 800b64e:	68e2      	ldr	r2, [r4, #12]
 800b650:	3201      	adds	r2, #1
 800b652:	60e2      	str	r2, [r4, #12]
 800b654:	69a2      	ldr	r2, [r4, #24]
 800b656:	b102      	cbz	r2, 800b65a <_scanf_chars+0xa2>
 800b658:	7033      	strb	r3, [r6, #0]
 800b65a:	2000      	movs	r0, #0
 800b65c:	6923      	ldr	r3, [r4, #16]
 800b65e:	443b      	add	r3, r7
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b666:	bf00      	nop
 800b668:	0800c179 	.word	0x0800c179

0800b66c <_scanf_i>:
 800b66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b670:	460c      	mov	r4, r1
 800b672:	4698      	mov	r8, r3
 800b674:	4b75      	ldr	r3, [pc, #468]	; (800b84c <_scanf_i+0x1e0>)
 800b676:	b087      	sub	sp, #28
 800b678:	4682      	mov	sl, r0
 800b67a:	4616      	mov	r6, r2
 800b67c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b680:	ab03      	add	r3, sp, #12
 800b682:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b686:	4b72      	ldr	r3, [pc, #456]	; (800b850 <_scanf_i+0x1e4>)
 800b688:	69a1      	ldr	r1, [r4, #24]
 800b68a:	4a72      	ldr	r2, [pc, #456]	; (800b854 <_scanf_i+0x1e8>)
 800b68c:	4627      	mov	r7, r4
 800b68e:	2903      	cmp	r1, #3
 800b690:	bf18      	it	ne
 800b692:	461a      	movne	r2, r3
 800b694:	68a3      	ldr	r3, [r4, #8]
 800b696:	9201      	str	r2, [sp, #4]
 800b698:	1e5a      	subs	r2, r3, #1
 800b69a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b69e:	bf81      	itttt	hi
 800b6a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b6a4:	eb03 0905 	addhi.w	r9, r3, r5
 800b6a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b6ac:	60a3      	strhi	r3, [r4, #8]
 800b6ae:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b6b2:	bf98      	it	ls
 800b6b4:	f04f 0900 	movls.w	r9, #0
 800b6b8:	463d      	mov	r5, r7
 800b6ba:	f04f 0b00 	mov.w	fp, #0
 800b6be:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b6c2:	6023      	str	r3, [r4, #0]
 800b6c4:	6831      	ldr	r1, [r6, #0]
 800b6c6:	ab03      	add	r3, sp, #12
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	7809      	ldrb	r1, [r1, #0]
 800b6cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b6d0:	f7ff fd46 	bl	800b160 <memchr>
 800b6d4:	b328      	cbz	r0, 800b722 <_scanf_i+0xb6>
 800b6d6:	f1bb 0f01 	cmp.w	fp, #1
 800b6da:	d159      	bne.n	800b790 <_scanf_i+0x124>
 800b6dc:	6862      	ldr	r2, [r4, #4]
 800b6de:	b92a      	cbnz	r2, 800b6ec <_scanf_i+0x80>
 800b6e0:	2308      	movs	r3, #8
 800b6e2:	6822      	ldr	r2, [r4, #0]
 800b6e4:	6063      	str	r3, [r4, #4]
 800b6e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ea:	6022      	str	r2, [r4, #0]
 800b6ec:	6822      	ldr	r2, [r4, #0]
 800b6ee:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b6f2:	6022      	str	r2, [r4, #0]
 800b6f4:	68a2      	ldr	r2, [r4, #8]
 800b6f6:	1e51      	subs	r1, r2, #1
 800b6f8:	60a1      	str	r1, [r4, #8]
 800b6fa:	b192      	cbz	r2, 800b722 <_scanf_i+0xb6>
 800b6fc:	6832      	ldr	r2, [r6, #0]
 800b6fe:	1c51      	adds	r1, r2, #1
 800b700:	6031      	str	r1, [r6, #0]
 800b702:	7812      	ldrb	r2, [r2, #0]
 800b704:	f805 2b01 	strb.w	r2, [r5], #1
 800b708:	6872      	ldr	r2, [r6, #4]
 800b70a:	3a01      	subs	r2, #1
 800b70c:	2a00      	cmp	r2, #0
 800b70e:	6072      	str	r2, [r6, #4]
 800b710:	dc07      	bgt.n	800b722 <_scanf_i+0xb6>
 800b712:	4631      	mov	r1, r6
 800b714:	4650      	mov	r0, sl
 800b716:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b71a:	4790      	blx	r2
 800b71c:	2800      	cmp	r0, #0
 800b71e:	f040 8085 	bne.w	800b82c <_scanf_i+0x1c0>
 800b722:	f10b 0b01 	add.w	fp, fp, #1
 800b726:	f1bb 0f03 	cmp.w	fp, #3
 800b72a:	d1cb      	bne.n	800b6c4 <_scanf_i+0x58>
 800b72c:	6863      	ldr	r3, [r4, #4]
 800b72e:	b90b      	cbnz	r3, 800b734 <_scanf_i+0xc8>
 800b730:	230a      	movs	r3, #10
 800b732:	6063      	str	r3, [r4, #4]
 800b734:	6863      	ldr	r3, [r4, #4]
 800b736:	4948      	ldr	r1, [pc, #288]	; (800b858 <_scanf_i+0x1ec>)
 800b738:	6960      	ldr	r0, [r4, #20]
 800b73a:	1ac9      	subs	r1, r1, r3
 800b73c:	f000 f88e 	bl	800b85c <__sccl>
 800b740:	f04f 0b00 	mov.w	fp, #0
 800b744:	68a3      	ldr	r3, [r4, #8]
 800b746:	6822      	ldr	r2, [r4, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d03d      	beq.n	800b7c8 <_scanf_i+0x15c>
 800b74c:	6831      	ldr	r1, [r6, #0]
 800b74e:	6960      	ldr	r0, [r4, #20]
 800b750:	f891 c000 	ldrb.w	ip, [r1]
 800b754:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b758:	2800      	cmp	r0, #0
 800b75a:	d035      	beq.n	800b7c8 <_scanf_i+0x15c>
 800b75c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b760:	d124      	bne.n	800b7ac <_scanf_i+0x140>
 800b762:	0510      	lsls	r0, r2, #20
 800b764:	d522      	bpl.n	800b7ac <_scanf_i+0x140>
 800b766:	f10b 0b01 	add.w	fp, fp, #1
 800b76a:	f1b9 0f00 	cmp.w	r9, #0
 800b76e:	d003      	beq.n	800b778 <_scanf_i+0x10c>
 800b770:	3301      	adds	r3, #1
 800b772:	f109 39ff 	add.w	r9, r9, #4294967295
 800b776:	60a3      	str	r3, [r4, #8]
 800b778:	6873      	ldr	r3, [r6, #4]
 800b77a:	3b01      	subs	r3, #1
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	6073      	str	r3, [r6, #4]
 800b780:	dd1b      	ble.n	800b7ba <_scanf_i+0x14e>
 800b782:	6833      	ldr	r3, [r6, #0]
 800b784:	3301      	adds	r3, #1
 800b786:	6033      	str	r3, [r6, #0]
 800b788:	68a3      	ldr	r3, [r4, #8]
 800b78a:	3b01      	subs	r3, #1
 800b78c:	60a3      	str	r3, [r4, #8]
 800b78e:	e7d9      	b.n	800b744 <_scanf_i+0xd8>
 800b790:	f1bb 0f02 	cmp.w	fp, #2
 800b794:	d1ae      	bne.n	800b6f4 <_scanf_i+0x88>
 800b796:	6822      	ldr	r2, [r4, #0]
 800b798:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b79c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b7a0:	d1bf      	bne.n	800b722 <_scanf_i+0xb6>
 800b7a2:	2310      	movs	r3, #16
 800b7a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7a8:	6063      	str	r3, [r4, #4]
 800b7aa:	e7a2      	b.n	800b6f2 <_scanf_i+0x86>
 800b7ac:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b7b0:	6022      	str	r2, [r4, #0]
 800b7b2:	780b      	ldrb	r3, [r1, #0]
 800b7b4:	f805 3b01 	strb.w	r3, [r5], #1
 800b7b8:	e7de      	b.n	800b778 <_scanf_i+0x10c>
 800b7ba:	4631      	mov	r1, r6
 800b7bc:	4650      	mov	r0, sl
 800b7be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b7c2:	4798      	blx	r3
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d0df      	beq.n	800b788 <_scanf_i+0x11c>
 800b7c8:	6823      	ldr	r3, [r4, #0]
 800b7ca:	05db      	lsls	r3, r3, #23
 800b7cc:	d50d      	bpl.n	800b7ea <_scanf_i+0x17e>
 800b7ce:	42bd      	cmp	r5, r7
 800b7d0:	d909      	bls.n	800b7e6 <_scanf_i+0x17a>
 800b7d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b7d6:	4632      	mov	r2, r6
 800b7d8:	4650      	mov	r0, sl
 800b7da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7de:	f105 39ff 	add.w	r9, r5, #4294967295
 800b7e2:	4798      	blx	r3
 800b7e4:	464d      	mov	r5, r9
 800b7e6:	42bd      	cmp	r5, r7
 800b7e8:	d02d      	beq.n	800b846 <_scanf_i+0x1da>
 800b7ea:	6822      	ldr	r2, [r4, #0]
 800b7ec:	f012 0210 	ands.w	r2, r2, #16
 800b7f0:	d113      	bne.n	800b81a <_scanf_i+0x1ae>
 800b7f2:	702a      	strb	r2, [r5, #0]
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	6863      	ldr	r3, [r4, #4]
 800b7f8:	4650      	mov	r0, sl
 800b7fa:	9e01      	ldr	r6, [sp, #4]
 800b7fc:	47b0      	blx	r6
 800b7fe:	6821      	ldr	r1, [r4, #0]
 800b800:	f8d8 3000 	ldr.w	r3, [r8]
 800b804:	f011 0f20 	tst.w	r1, #32
 800b808:	d013      	beq.n	800b832 <_scanf_i+0x1c6>
 800b80a:	1d1a      	adds	r2, r3, #4
 800b80c:	f8c8 2000 	str.w	r2, [r8]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	6018      	str	r0, [r3, #0]
 800b814:	68e3      	ldr	r3, [r4, #12]
 800b816:	3301      	adds	r3, #1
 800b818:	60e3      	str	r3, [r4, #12]
 800b81a:	2000      	movs	r0, #0
 800b81c:	1bed      	subs	r5, r5, r7
 800b81e:	44ab      	add	fp, r5
 800b820:	6925      	ldr	r5, [r4, #16]
 800b822:	445d      	add	r5, fp
 800b824:	6125      	str	r5, [r4, #16]
 800b826:	b007      	add	sp, #28
 800b828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82c:	f04f 0b00 	mov.w	fp, #0
 800b830:	e7ca      	b.n	800b7c8 <_scanf_i+0x15c>
 800b832:	1d1a      	adds	r2, r3, #4
 800b834:	f8c8 2000 	str.w	r2, [r8]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f011 0f01 	tst.w	r1, #1
 800b83e:	bf14      	ite	ne
 800b840:	8018      	strhne	r0, [r3, #0]
 800b842:	6018      	streq	r0, [r3, #0]
 800b844:	e7e6      	b.n	800b814 <_scanf_i+0x1a8>
 800b846:	2001      	movs	r0, #1
 800b848:	e7ed      	b.n	800b826 <_scanf_i+0x1ba>
 800b84a:	bf00      	nop
 800b84c:	0800be38 	.word	0x0800be38
 800b850:	0800a515 	.word	0x0800a515
 800b854:	0800a419 	.word	0x0800a419
 800b858:	0800c325 	.word	0x0800c325

0800b85c <__sccl>:
 800b85c:	b570      	push	{r4, r5, r6, lr}
 800b85e:	780b      	ldrb	r3, [r1, #0]
 800b860:	4604      	mov	r4, r0
 800b862:	2b5e      	cmp	r3, #94	; 0x5e
 800b864:	bf13      	iteet	ne
 800b866:	2200      	movne	r2, #0
 800b868:	2201      	moveq	r2, #1
 800b86a:	784b      	ldrbeq	r3, [r1, #1]
 800b86c:	1c48      	addne	r0, r1, #1
 800b86e:	bf08      	it	eq
 800b870:	1c88      	addeq	r0, r1, #2
 800b872:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b876:	1e61      	subs	r1, r4, #1
 800b878:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b87c:	42a9      	cmp	r1, r5
 800b87e:	d1fb      	bne.n	800b878 <__sccl+0x1c>
 800b880:	b90b      	cbnz	r3, 800b886 <__sccl+0x2a>
 800b882:	3801      	subs	r0, #1
 800b884:	bd70      	pop	{r4, r5, r6, pc}
 800b886:	f082 0201 	eor.w	r2, r2, #1
 800b88a:	4605      	mov	r5, r0
 800b88c:	54e2      	strb	r2, [r4, r3]
 800b88e:	4628      	mov	r0, r5
 800b890:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b894:	292d      	cmp	r1, #45	; 0x2d
 800b896:	d006      	beq.n	800b8a6 <__sccl+0x4a>
 800b898:	295d      	cmp	r1, #93	; 0x5d
 800b89a:	d0f3      	beq.n	800b884 <__sccl+0x28>
 800b89c:	b909      	cbnz	r1, 800b8a2 <__sccl+0x46>
 800b89e:	4628      	mov	r0, r5
 800b8a0:	e7f0      	b.n	800b884 <__sccl+0x28>
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	e7f1      	b.n	800b88a <__sccl+0x2e>
 800b8a6:	786e      	ldrb	r6, [r5, #1]
 800b8a8:	2e5d      	cmp	r6, #93	; 0x5d
 800b8aa:	d0fa      	beq.n	800b8a2 <__sccl+0x46>
 800b8ac:	42b3      	cmp	r3, r6
 800b8ae:	dcf8      	bgt.n	800b8a2 <__sccl+0x46>
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	3502      	adds	r5, #2
 800b8b4:	3101      	adds	r1, #1
 800b8b6:	428e      	cmp	r6, r1
 800b8b8:	5462      	strb	r2, [r4, r1]
 800b8ba:	dcfb      	bgt.n	800b8b4 <__sccl+0x58>
 800b8bc:	1af1      	subs	r1, r6, r3
 800b8be:	3901      	subs	r1, #1
 800b8c0:	42b3      	cmp	r3, r6
 800b8c2:	bfa8      	it	ge
 800b8c4:	2100      	movge	r1, #0
 800b8c6:	1c58      	adds	r0, r3, #1
 800b8c8:	1843      	adds	r3, r0, r1
 800b8ca:	e7e0      	b.n	800b88e <__sccl+0x32>

0800b8cc <__submore>:
 800b8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b8d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8d8:	4299      	cmp	r1, r3
 800b8da:	d11b      	bne.n	800b914 <__submore+0x48>
 800b8dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b8e0:	f7fd ff42 	bl	8009768 <_malloc_r>
 800b8e4:	b918      	cbnz	r0, 800b8ee <__submore+0x22>
 800b8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8f2:	63a3      	str	r3, [r4, #56]	; 0x38
 800b8f4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b8f8:	6360      	str	r0, [r4, #52]	; 0x34
 800b8fa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b8fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b902:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b906:	7043      	strb	r3, [r0, #1]
 800b908:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b90c:	7003      	strb	r3, [r0, #0]
 800b90e:	6020      	str	r0, [r4, #0]
 800b910:	2000      	movs	r0, #0
 800b912:	e7ea      	b.n	800b8ea <__submore+0x1e>
 800b914:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b916:	0077      	lsls	r7, r6, #1
 800b918:	463a      	mov	r2, r7
 800b91a:	f7ff fc49 	bl	800b1b0 <_realloc_r>
 800b91e:	4605      	mov	r5, r0
 800b920:	2800      	cmp	r0, #0
 800b922:	d0e0      	beq.n	800b8e6 <__submore+0x1a>
 800b924:	eb00 0806 	add.w	r8, r0, r6
 800b928:	4601      	mov	r1, r0
 800b92a:	4632      	mov	r2, r6
 800b92c:	4640      	mov	r0, r8
 800b92e:	f7fd fe9d 	bl	800966c <memcpy>
 800b932:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b936:	f8c4 8000 	str.w	r8, [r4]
 800b93a:	e7e9      	b.n	800b910 <__submore+0x44>

0800b93c <_malloc_usable_size_r>:
 800b93c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b940:	1f18      	subs	r0, r3, #4
 800b942:	2b00      	cmp	r3, #0
 800b944:	bfbc      	itt	lt
 800b946:	580b      	ldrlt	r3, [r1, r0]
 800b948:	18c0      	addlt	r0, r0, r3
 800b94a:	4770      	bx	lr

0800b94c <sqrt>:
 800b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94e:	4606      	mov	r6, r0
 800b950:	460f      	mov	r7, r1
 800b952:	f000 f81f 	bl	800b994 <__ieee754_sqrt>
 800b956:	4632      	mov	r2, r6
 800b958:	4604      	mov	r4, r0
 800b95a:	460d      	mov	r5, r1
 800b95c:	463b      	mov	r3, r7
 800b95e:	4630      	mov	r0, r6
 800b960:	4639      	mov	r1, r7
 800b962:	f7f5 f85b 	bl	8000a1c <__aeabi_dcmpun>
 800b966:	b990      	cbnz	r0, 800b98e <sqrt+0x42>
 800b968:	2200      	movs	r2, #0
 800b96a:	2300      	movs	r3, #0
 800b96c:	4630      	mov	r0, r6
 800b96e:	4639      	mov	r1, r7
 800b970:	f7f5 f82c 	bl	80009cc <__aeabi_dcmplt>
 800b974:	b158      	cbz	r0, 800b98e <sqrt+0x42>
 800b976:	f7fd fe4b 	bl	8009610 <__errno>
 800b97a:	2321      	movs	r3, #33	; 0x21
 800b97c:	2200      	movs	r2, #0
 800b97e:	6003      	str	r3, [r0, #0]
 800b980:	2300      	movs	r3, #0
 800b982:	4610      	mov	r0, r2
 800b984:	4619      	mov	r1, r3
 800b986:	f7f4 fed9 	bl	800073c <__aeabi_ddiv>
 800b98a:	4604      	mov	r4, r0
 800b98c:	460d      	mov	r5, r1
 800b98e:	4620      	mov	r0, r4
 800b990:	4629      	mov	r1, r5
 800b992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b994 <__ieee754_sqrt>:
 800b994:	f8df c158 	ldr.w	ip, [pc, #344]	; 800baf0 <__ieee754_sqrt+0x15c>
 800b998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99c:	ea3c 0c01 	bics.w	ip, ip, r1
 800b9a0:	4606      	mov	r6, r0
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	460a      	mov	r2, r1
 800b9a8:	4607      	mov	r7, r0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	d10f      	bne.n	800b9ce <__ieee754_sqrt+0x3a>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	f7f4 fd99 	bl	80004e8 <__aeabi_dmul>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	4629      	mov	r1, r5
 800b9be:	f7f4 fbdd 	bl	800017c <__adddf3>
 800b9c2:	4606      	mov	r6, r0
 800b9c4:	460d      	mov	r5, r1
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ce:	2900      	cmp	r1, #0
 800b9d0:	dc0e      	bgt.n	800b9f0 <__ieee754_sqrt+0x5c>
 800b9d2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b9d6:	ea5c 0707 	orrs.w	r7, ip, r7
 800b9da:	d0f4      	beq.n	800b9c6 <__ieee754_sqrt+0x32>
 800b9dc:	b141      	cbz	r1, 800b9f0 <__ieee754_sqrt+0x5c>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	f7f4 fbc9 	bl	8000178 <__aeabi_dsub>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	f7f4 fea7 	bl	800073c <__aeabi_ddiv>
 800b9ee:	e7e8      	b.n	800b9c2 <__ieee754_sqrt+0x2e>
 800b9f0:	1521      	asrs	r1, r4, #20
 800b9f2:	d075      	beq.n	800bae0 <__ieee754_sqrt+0x14c>
 800b9f4:	07cc      	lsls	r4, r1, #31
 800b9f6:	f04f 0400 	mov.w	r4, #0
 800b9fa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b9fe:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800ba02:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ba06:	bf5e      	ittt	pl
 800ba08:	0fd9      	lsrpl	r1, r3, #31
 800ba0a:	005b      	lslpl	r3, r3, #1
 800ba0c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800ba10:	0fd9      	lsrs	r1, r3, #31
 800ba12:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ba16:	2516      	movs	r5, #22
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba1e:	107f      	asrs	r7, r7, #1
 800ba20:	005b      	lsls	r3, r3, #1
 800ba22:	1846      	adds	r6, r0, r1
 800ba24:	4296      	cmp	r6, r2
 800ba26:	bfde      	ittt	le
 800ba28:	1b92      	suble	r2, r2, r6
 800ba2a:	1870      	addle	r0, r6, r1
 800ba2c:	1864      	addle	r4, r4, r1
 800ba2e:	0052      	lsls	r2, r2, #1
 800ba30:	3d01      	subs	r5, #1
 800ba32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ba36:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ba3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba3e:	d1f0      	bne.n	800ba22 <__ieee754_sqrt+0x8e>
 800ba40:	4629      	mov	r1, r5
 800ba42:	f04f 0e20 	mov.w	lr, #32
 800ba46:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ba4a:	4282      	cmp	r2, r0
 800ba4c:	eb06 0c05 	add.w	ip, r6, r5
 800ba50:	dc02      	bgt.n	800ba58 <__ieee754_sqrt+0xc4>
 800ba52:	d113      	bne.n	800ba7c <__ieee754_sqrt+0xe8>
 800ba54:	459c      	cmp	ip, r3
 800ba56:	d811      	bhi.n	800ba7c <__ieee754_sqrt+0xe8>
 800ba58:	f1bc 0f00 	cmp.w	ip, #0
 800ba5c:	eb0c 0506 	add.w	r5, ip, r6
 800ba60:	da43      	bge.n	800baea <__ieee754_sqrt+0x156>
 800ba62:	2d00      	cmp	r5, #0
 800ba64:	db41      	blt.n	800baea <__ieee754_sqrt+0x156>
 800ba66:	f100 0801 	add.w	r8, r0, #1
 800ba6a:	1a12      	subs	r2, r2, r0
 800ba6c:	4640      	mov	r0, r8
 800ba6e:	459c      	cmp	ip, r3
 800ba70:	bf88      	it	hi
 800ba72:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ba76:	eba3 030c 	sub.w	r3, r3, ip
 800ba7a:	4431      	add	r1, r6
 800ba7c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ba80:	f1be 0e01 	subs.w	lr, lr, #1
 800ba84:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800ba88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba8c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ba90:	d1db      	bne.n	800ba4a <__ieee754_sqrt+0xb6>
 800ba92:	4313      	orrs	r3, r2
 800ba94:	d006      	beq.n	800baa4 <__ieee754_sqrt+0x110>
 800ba96:	1c48      	adds	r0, r1, #1
 800ba98:	bf0b      	itete	eq
 800ba9a:	4671      	moveq	r1, lr
 800ba9c:	3101      	addne	r1, #1
 800ba9e:	3401      	addeq	r4, #1
 800baa0:	f021 0101 	bicne.w	r1, r1, #1
 800baa4:	1063      	asrs	r3, r4, #1
 800baa6:	0849      	lsrs	r1, r1, #1
 800baa8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800baac:	07e2      	lsls	r2, r4, #31
 800baae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bab2:	bf48      	it	mi
 800bab4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bab8:	460e      	mov	r6, r1
 800baba:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800babe:	e782      	b.n	800b9c6 <__ieee754_sqrt+0x32>
 800bac0:	0ada      	lsrs	r2, r3, #11
 800bac2:	3815      	subs	r0, #21
 800bac4:	055b      	lsls	r3, r3, #21
 800bac6:	2a00      	cmp	r2, #0
 800bac8:	d0fa      	beq.n	800bac0 <__ieee754_sqrt+0x12c>
 800baca:	02d5      	lsls	r5, r2, #11
 800bacc:	d50a      	bpl.n	800bae4 <__ieee754_sqrt+0x150>
 800bace:	f1c1 0420 	rsb	r4, r1, #32
 800bad2:	fa23 f404 	lsr.w	r4, r3, r4
 800bad6:	1e4d      	subs	r5, r1, #1
 800bad8:	408b      	lsls	r3, r1
 800bada:	4322      	orrs	r2, r4
 800badc:	1b41      	subs	r1, r0, r5
 800bade:	e789      	b.n	800b9f4 <__ieee754_sqrt+0x60>
 800bae0:	4608      	mov	r0, r1
 800bae2:	e7f0      	b.n	800bac6 <__ieee754_sqrt+0x132>
 800bae4:	0052      	lsls	r2, r2, #1
 800bae6:	3101      	adds	r1, #1
 800bae8:	e7ef      	b.n	800baca <__ieee754_sqrt+0x136>
 800baea:	4680      	mov	r8, r0
 800baec:	e7bd      	b.n	800ba6a <__ieee754_sqrt+0xd6>
 800baee:	bf00      	nop
 800baf0:	7ff00000 	.word	0x7ff00000

0800baf4 <_init>:
 800baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf6:	bf00      	nop
 800baf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bafa:	bc08      	pop	{r3}
 800bafc:	469e      	mov	lr, r3
 800bafe:	4770      	bx	lr

0800bb00 <_fini>:
 800bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb02:	bf00      	nop
 800bb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb06:	bc08      	pop	{r3}
 800bb08:	469e      	mov	lr, r3
 800bb0a:	4770      	bx	lr
