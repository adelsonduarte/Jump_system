
JMP_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  0800b6d0  0800b6d0  0001b6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bee4  0800bee4  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800bee4  0800bee4  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bee4  0800bee4  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee4  0800bee4  0001bee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bee8  0800bee8  0001bee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  0800beec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  200001a8  0800c094  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  0800c094  000206ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001581d  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004011  00000000  00000000  000359ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  00039a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  0003b138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d2d1  00000000  00000000  0003c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b930  00000000  00000000  00059921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f58  00000000  00000000  00075251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001061a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac8  00000000  00000000  001061fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b6b8 	.word	0x0800b6b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	0800b6b8 	.word	0x0800b6b8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2uiz>:
 8000a48:	004a      	lsls	r2, r1, #1
 8000a4a:	d211      	bcs.n	8000a70 <__aeabi_d2uiz+0x28>
 8000a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a50:	d211      	bcs.n	8000a76 <__aeabi_d2uiz+0x2e>
 8000a52:	d50d      	bpl.n	8000a70 <__aeabi_d2uiz+0x28>
 8000a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a5c:	d40e      	bmi.n	8000a7c <__aeabi_d2uiz+0x34>
 8000a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7a:	d102      	bne.n	8000a82 <__aeabi_d2uiz+0x3a>
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	4770      	bx	lr
 8000a82:	f04f 0000 	mov.w	r0, #0
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <eraseStateMachine>:
        unsigned char menuState;
        struct dataInsert menuInsert;
    };

unsigned char eraseStateMachine(struct Menu* subMenu)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuErase = subMenu;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	613b      	str	r3, [r7, #16]
    unsigned char key = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	75fb      	strb	r3, [r7, #23]
    unsigned char index = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	72fb      	strb	r3, [r7, #11]
    unsigned char displayUpdateStatus = IDDLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	72bb      	strb	r3, [r7, #10]
    unsigned char* ptr_eraseString;
    while(key != MENU)
 8000cbc:	e07c      	b.n	8000db8 <eraseStateMachine+0x114>
    {
        switch(subMenuErase->menuState)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	78db      	ldrb	r3, [r3, #3]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d066      	beq.n	8000d94 <eraseStateMachine+0xf0>
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	dc76      	bgt.n	8000db8 <eraseStateMachine+0x114>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <eraseStateMachine+0x30>
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d008      	beq.n	8000ce4 <eraseStateMachine+0x40>
 8000cd2:	e071      	b.n	8000db8 <eraseStateMachine+0x114>
        {
            case IDDLE:
                subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f003 fae1 	bl	800429c <getNextSub>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	70da      	strb	r2, [r3, #3]
            break;
 8000ce2:	e069      	b.n	8000db8 <eraseStateMachine+0x114>

            case VERFICA_APAGAR:
                updateUserMsg(3,2,eraseselectUserMsg,&displayUpdateStatus);
 8000ce4:	4b39      	ldr	r3, [pc, #228]	; (8000dcc <eraseStateMachine+0x128>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	f107 030a 	add.w	r3, r7, #10
 8000cec:	2102      	movs	r1, #2
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f001 fecb 	bl	8002a8a <updateUserMsg>
                ptr_eraseString = getEraseTestString();
 8000cf4:	f001 fbb6 	bl	8002464 <getEraseTestString>
 8000cf8:	60f8      	str	r0, [r7, #12]
                printDataDisplay(0,0,ptr_eraseString);
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f002 fdfc 	bl	80038fc <printDataDisplay>
                key = getKeyPressed();
 8000d04:	f004 f876 	bl	8004df4 <getKeyPressed>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	75fb      	strb	r3, [r7, #23]

                if(key == INSERIR)
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	2b49      	cmp	r3, #73	; 0x49
 8000d10:	d10e      	bne.n	8000d30 <eraseStateMachine+0x8c>
                {
                	resetKeyPressed();
 8000d12:	f004 f87b 	bl	8004e0c <resetKeyPressed>
                    setUserErase(&index);
 8000d16:	f107 030b 	add.w	r3, r7, #11
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fc1a 	bl	8002554 <setUserErase>
                    subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f003 fabb 	bl	800429c <getNextSub>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	70da      	strb	r2, [r3, #3]
 8000d2e:	e043      	b.n	8000db8 <eraseStateMachine+0x114>
                }
                else if(key == CONFIRMAR)
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
 8000d32:	2b43      	cmp	r3, #67	; 0x43
 8000d34:	d140      	bne.n	8000db8 <eraseStateMachine+0x114>
                {
                	resetKeyPressed();
 8000d36:	f004 f869 	bl	8004e0c <resetKeyPressed>
                    if(*ptr_eraseString == '5')
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b35      	cmp	r3, #53	; 0x35
 8000d40:	d11a      	bne.n	8000d78 <eraseStateMachine+0xd4>
                    {
                        updateUserMsg(3,2,erasingUserMsg,&displayUpdateStatus);
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <eraseStateMachine+0x12c>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	f107 030a 	add.w	r3, r7, #10
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f001 fe9c 	bl	8002a8a <updateUserMsg>
                        resetMyResults();
 8000d52:	f001 f92d 	bl	8001fb0 <resetMyResults>
                        subMenuErase->menuSelect = setSelectSub(&subMenuErase->menuState);
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	3303      	adds	r3, #3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fab0 	bl	80042c0 <setSelectSub>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	705a      	strb	r2, [r3, #1]
                        subMenuErase->menuState = getNextSub(CONFIRMA_APAGAR);
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f003 fa97 	bl	800429c <getNextSub>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	70da      	strb	r2, [r3, #3]
 8000d76:	e01f      	b.n	8000db8 <eraseStateMachine+0x114>
                    }
                    else if(*ptr_eraseString == '2')
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b32      	cmp	r3, #50	; 0x32
 8000d7e:	d11b      	bne.n	8000db8 <eraseStateMachine+0x114>
                    {
                     subMenuErase->menuState = getNextSub(IDDLE);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f003 fa8b 	bl	800429c <getNextSub>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	70da      	strb	r2, [r3, #3]
                      key = MENU;
 8000d8e:	234d      	movs	r3, #77	; 0x4d
 8000d90:	75fb      	strb	r3, [r7, #23]
                    }
                }

            break;
 8000d92:	e011      	b.n	8000db8 <eraseStateMachine+0x114>

            case CONFIRMA_APAGAR:
                updateUserMsg(3,2,erasedUserMsg,&displayUpdateStatus);
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <eraseStateMachine+0x130>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	f107 030a 	add.w	r3, r7, #10
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f001 fe73 	bl	8002a8a <updateUserMsg>
                subMenuErase->menuState = getNextSub(IDDLE);
 8000da4:	2000      	movs	r0, #0
 8000da6:	f003 fa79 	bl	800429c <getNextSub>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	70da      	strb	r2, [r3, #3]
                key = MENU;
 8000db2:	234d      	movs	r3, #77	; 0x4d
 8000db4:	75fb      	strb	r3, [r7, #23]
                break;
 8000db6:	bf00      	nop
    while(key != MENU)
 8000db8:	7dfb      	ldrb	r3, [r7, #23]
 8000dba:	2b4d      	cmp	r3, #77	; 0x4d
 8000dbc:	f47f af7f 	bne.w	8000cbe <eraseStateMachine+0x1a>
        }
    }
}
 8000dc0:	bf00      	nop
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000ac 	.word	0x200000ac
 8000dd0:	200000b0 	.word	0x200000b0
 8000dd4:	200000b4 	.word	0x200000b4

08000dd8 <configStateMachine>:
//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
//verificar se vou usar o codigo abaixo


unsigned char configStateMachine(struct Menu* subMenu)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0b0      	sub	sp, #192	; 0xc0
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    unsigned char* ptr_numSeriesString;
    unsigned char* ptr_intervalSeriesString;

    unsigned char userIntervalSaltosTimeString[9];
    struct tm myTime;
	struct tm* configIntervalTimeStruct = &myTime;
 8000de0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000de4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    struct Menu* subMenuTesteConfigurar = subMenu;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    unsigned char cursorPosition[2] = {0,0};
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    //verificar se vou usar
    struct dataInsert measurementSensor1;
    struct dataInsert measurementSensor2;
    //
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 8000df4:	f000 ff68 	bl	8001cc8 <getUserConfigStruct>
 8000df8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
    resetConfigStruct(ptr_userConfiguration);
 8000dfc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000e00:	f001 f89c 	bl	8001f3c <resetConfigStruct>

    //
    unsigned char key = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
    unsigned char displayUpdateStatus = IDDLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
    short index = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	81bb      	strh	r3, [r7, #12]
    unsigned int altMin = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    unsigned int altMax = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    unsigned int tmin = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    unsigned int tmax = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    while(key != MENU)
 8000e2a:	bf00      	nop
 8000e2c:	f000 bcd9 	b.w	80017e2 <configStateMachine+0xa0a>
    {
        switch(subMenuTesteConfigurar->menuState)
 8000e30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e34:	78db      	ldrb	r3, [r3, #3]
 8000e36:	2b0d      	cmp	r3, #13
 8000e38:	f200 84d3 	bhi.w	80017e2 <configStateMachine+0xa0a>
 8000e3c:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <configStateMachine+0x6c>)
 8000e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e42:	bf00      	nop
 8000e44:	08000e7d 	.word	0x08000e7d
 8000e48:	08000e91 	.word	0x08000e91
 8000e4c:	08000f2b 	.word	0x08000f2b
 8000e50:	08000fc5 	.word	0x08000fc5
 8000e54:	080010b3 	.word	0x080010b3
 8000e58:	080011a1 	.word	0x080011a1
 8000e5c:	0800127b 	.word	0x0800127b
 8000e60:	08001355 	.word	0x08001355
 8000e64:	08001437 	.word	0x08001437
 8000e68:	080014e3 	.word	0x080014e3
 8000e6c:	080015a9 	.word	0x080015a9
 8000e70:	08001689 	.word	0x08001689
 8000e74:	0800171f 	.word	0x0800171f
 8000e78:	080017b3 	.word	0x080017b3
        {
        case IDDLE:
            subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f003 fa0d 	bl	800429c <getNextSub>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e8a:	70da      	strb	r2, [r3, #3]

            break;
 8000e8c:	f000 bca9 	b.w	80017e2 <configStateMachine+0xa0a>
            case CONFIG_SENSOR_1:
                updateUserMsg(0,0,sensor1UserMsg,&displayUpdateStatus);
 8000e90:	4be2      	ldr	r3, [pc, #904]	; (800121c <configStateMachine+0x444>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	f107 030f 	add.w	r3, r7, #15
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f001 fdf5 	bl	8002a8a <updateUserMsg>
                key = getKeyPressed();
 8000ea0:	f003 ffa8 	bl	8004df4 <getKeyPressed>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

                if(key == AVANCAR)
 8000eaa:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000eae:	2b41      	cmp	r3, #65	; 0x41
 8000eb0:	d113      	bne.n	8000eda <configStateMachine+0x102>
                {
                	resetKeyPressed();
 8000eb2:	f003 ffab 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000eb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000eba:	f107 030f 	add.w	r3, r7, #15
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fe00 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_2);
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f003 f9e8 	bl	800429c <getNextSub>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ed4:	70da      	strb	r2, [r3, #3]
 8000ed6:	f000 bc84 	b.w	80017e2 <configStateMachine+0xa0a>
                }
                else if(key == CONFIRMAR)
 8000eda:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000ede:	2b43      	cmp	r3, #67	; 0x43
 8000ee0:	f040 847f 	bne.w	80017e2 <configStateMachine+0xa0a>
                {
                	resetKeyPressed();
 8000ee4:	f003 ff92 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000ee8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000eec:	f107 030f 	add.w	r3, r7, #15
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fde7 	bl	8002ac6 <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 1;
 8000ef8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000efc:	2201      	movs	r2, #1
 8000efe:	771a      	strb	r2, [r3, #28]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000f00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000f04:	3303      	adds	r3, #3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 f9da 	bl	80042c0 <setSelectSub>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000f14:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8000f16:	2003      	movs	r0, #3
 8000f18:	f003 f9c0 	bl	800429c <getNextSub>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000f24:	70da      	strb	r2, [r3, #3]
                }

                break;
 8000f26:	f000 bc5c 	b.w	80017e2 <configStateMachine+0xa0a>

            case CONFIG_SENSOR_2:
                updateUserMsg(0,0,sensor2UserMsg,&displayUpdateStatus);
 8000f2a:	4bbd      	ldr	r3, [pc, #756]	; (8001220 <configStateMachine+0x448>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	f107 030f 	add.w	r3, r7, #15
 8000f32:	2100      	movs	r1, #0
 8000f34:	2000      	movs	r0, #0
 8000f36:	f001 fda8 	bl	8002a8a <updateUserMsg>
                key = getKeyPressed();
 8000f3a:	f003 ff5b 	bl	8004df4 <getKeyPressed>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

                if(key == AVANCAR)
 8000f44:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000f48:	2b41      	cmp	r3, #65	; 0x41
 8000f4a:	d113      	bne.n	8000f74 <configStateMachine+0x19c>
                {
                	resetKeyPressed();
 8000f4c:	f003 ff5e 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000f50:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000f54:	f107 030f 	add.w	r3, r7, #15
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fdb3 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f003 f99b 	bl	800429c <getNextSub>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000f6e:	70da      	strb	r2, [r3, #3]
 8000f70:	f000 bc37 	b.w	80017e2 <configStateMachine+0xa0a>
                }
                else if(key == CONFIRMAR)
 8000f74:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000f78:	2b43      	cmp	r3, #67	; 0x43
 8000f7a:	f040 8432 	bne.w	80017e2 <configStateMachine+0xa0a>
                {
                	resetKeyPressed();
 8000f7e:	f003 ff45 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8000f82:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000f86:	f107 030f 	add.w	r3, r7, #15
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fd9a 	bl	8002ac6 <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 2;
 8000f92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f96:	2202      	movs	r2, #2
 8000f98:	771a      	strb	r2, [r3, #28]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8000f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000f9e:	3303      	adds	r3, #3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 f98d 	bl	80042c0 <setSelectSub>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000fae:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f003 f973 	bl	800429c <getNextSub>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000fbe:	70da      	strb	r2, [r3, #3]
                }
                break;
 8000fc0:	f000 bc0f 	b.w	80017e2 <configStateMachine+0xa0a>

            case SENSOR_ALTMIN:
                updateUserMsg(0,0,altminUserMsg,&displayUpdateStatus);
 8000fc4:	4b97      	ldr	r3, [pc, #604]	; (8001224 <configStateMachine+0x44c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	f107 030f 	add.w	r3, r7, #15
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f001 fd5b 	bl	8002a8a <updateUserMsg>
                ptr_altMinString = getAltMinString();
 8000fd4:	f001 f90a 	bl	80021ec <getAltMinString>
 8000fd8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                printDataDisplay(0,1,ptr_altMinString);
 8000fdc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f002 fc8a 	bl	80038fc <printDataDisplay>
                updateDataDisplay(index,1);
 8000fe8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fec:	2101      	movs	r1, #1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fc9e 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 8000ff4:	f003 fefe 	bl	8004df4 <getKeyPressed>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

                if(key == INSERIR)
 8000ffe:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001002:	2b49      	cmp	r3, #73	; 0x49
 8001004:	d10f      	bne.n	8001026 <configStateMachine+0x24e>
                {
                	resetKeyPressed();
 8001006:	f003 ff01 	bl	8004e0c <resetKeyPressed>
                    setUserAltMin(&index);
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fa7c 	bl	800250c <setUserAltMin>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8001014:	2003      	movs	r0, #3
 8001016:	f003 f941 	bl	800429c <getNextSub>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001022:	70da      	strb	r2, [r3, #3]
 8001024:	e3dd      	b.n	80017e2 <configStateMachine+0xa0a>
                }
                else if(key == AVANCAR)
 8001026:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800102a:	2b41      	cmp	r3, #65	; 0x41
 800102c:	d108      	bne.n	8001040 <configStateMachine+0x268>
                {
                	resetKeyPressed();
 800102e:	f003 feed 	bl	8004e0c <resetKeyPressed>
                    indexChange(&index,2);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	2102      	movs	r1, #2
 8001038:	4618      	mov	r0, r3
 800103a:	f001 f8b8 	bl	80021ae <indexChange>
 800103e:	e3d0      	b.n	80017e2 <configStateMachine+0xa0a>
                }
                else if(key == CONFIRMAR)
 8001040:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001044:	2b43      	cmp	r3, #67	; 0x43
 8001046:	f040 83cc 	bne.w	80017e2 <configStateMachine+0xa0a>
                {
                	resetKeyPressed();
 800104a:	f003 fedf 	bl	8004e0c <resetKeyPressed>
                    index = 2;
 800104e:	2302      	movs	r3, #2
 8001050:	81bb      	strh	r3, [r7, #12]

                    altMin = stringToInt(getAltMinString());
 8001052:	f001 f8cb 	bl	80021ec <getAltMinString>
 8001056:	4603      	mov	r3, r0
 8001058:	4618      	mov	r0, r3
 800105a:	f001 f86d 	bl	8002138 <stringToInt>
 800105e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    tmin = alturaToTempo(altMin);
 8001062:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001066:	f001 fcdf 	bl	8002a28 <alturaToTempo>
 800106a:	4603      	mov	r3, r0
 800106c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                    ptr_userConfiguration->userAlturaMin = tmin;
 8001070:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001074:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001078:	60da      	str	r2, [r3, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800107a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800107e:	f107 030f 	add.w	r3, r7, #15
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f001 fd1e 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 800108a:	2004      	movs	r0, #4
 800108c:	f003 f906 	bl	800429c <getNextSub>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001098:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 800109a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800109e:	3303      	adds	r3, #3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 f90d 	bl	80042c0 <setSelectSub>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80010ae:	705a      	strb	r2, [r3, #1]
                }
                break;
 80010b0:	e397      	b.n	80017e2 <configStateMachine+0xa0a>

            case SENSOR_ALTMAX:
                updateUserMsg(0,0,altmaxUserMsg,&displayUpdateStatus);
 80010b2:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <configStateMachine+0x450>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	f107 030f 	add.w	r3, r7, #15
 80010ba:	2100      	movs	r1, #0
 80010bc:	2000      	movs	r0, #0
 80010be:	f001 fce4 	bl	8002a8a <updateUserMsg>
                ptr_altMaxString = getAltMaxString();
 80010c2:	f001 f8b3 	bl	800222c <getAltMaxString>
 80010c6:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                printDataDisplay(0,1,ptr_altMaxString);
 80010ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80010ce:	2101      	movs	r1, #1
 80010d0:	2000      	movs	r0, #0
 80010d2:	f002 fc13 	bl	80038fc <printDataDisplay>
                updateDataDisplay(index,1);
 80010d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010da:	2101      	movs	r1, #1
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fc27 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 80010e2:	f003 fe87 	bl	8004df4 <getKeyPressed>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

                if(key == INSERIR)
 80010ec:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80010f0:	2b49      	cmp	r3, #73	; 0x49
 80010f2:	d10f      	bne.n	8001114 <configStateMachine+0x33c>
                {
                	resetKeyPressed();
 80010f4:	f003 fe8a 	bl	8004e0c <resetKeyPressed>
                    setUserAltMax(&index);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fa4e 	bl	800259e <setUserAltMax>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 8001102:	2004      	movs	r0, #4
 8001104:	f003 f8ca 	bl	800429c <getNextSub>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001110:	70da      	strb	r2, [r3, #3]
 8001112:	e366      	b.n	80017e2 <configStateMachine+0xa0a>
                }
                else if(key == AVANCAR)
 8001114:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001118:	2b41      	cmp	r3, #65	; 0x41
 800111a:	d108      	bne.n	800112e <configStateMachine+0x356>
                {
                	resetKeyPressed();
 800111c:	f003 fe76 	bl	8004e0c <resetKeyPressed>
                    indexChange(&index,2);
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2102      	movs	r1, #2
 8001126:	4618      	mov	r0, r3
 8001128:	f001 f841 	bl	80021ae <indexChange>
 800112c:	e359      	b.n	80017e2 <configStateMachine+0xa0a>
                }
                else if(key == CONFIRMAR)
 800112e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001132:	2b43      	cmp	r3, #67	; 0x43
 8001134:	f040 8355 	bne.w	80017e2 <configStateMachine+0xa0a>
                {
                	resetKeyPressed();
 8001138:	f003 fe68 	bl	8004e0c <resetKeyPressed>
                    index = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	81bb      	strh	r3, [r7, #12]
                    altMax = stringToInt(getAltMaxString());
 8001140:	f001 f874 	bl	800222c <getAltMaxString>
 8001144:	4603      	mov	r3, r0
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fff6 	bl	8002138 <stringToInt>
 800114c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                    tmax = alturaToTempo(altMax);
 8001150:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001154:	f001 fc68 	bl	8002a28 <alturaToTempo>
 8001158:	4603      	mov	r3, r0
 800115a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                    ptr_userConfiguration->userAlturaMax = tmax;
 800115e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001162:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001166:	611a      	str	r2, [r3, #16]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001168:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800116c:	f107 030f 	add.w	r3, r7, #15
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f001 fca7 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 8001178:	2005      	movs	r0, #5
 800117a:	f003 f88f 	bl	800429c <getNextSub>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001186:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001188:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800118c:	3303      	adds	r3, #3
 800118e:	4618      	mov	r0, r3
 8001190:	f003 f896 	bl	80042c0 <setSelectSub>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800119c:	705a      	strb	r2, [r3, #1]
                }

                break;
 800119e:	e320      	b.n	80017e2 <configStateMachine+0xa0a>

            case SENSOR_SALTOS:
                updateUserMsg(0,0,numsaltosUserMsg,&displayUpdateStatus);
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <configStateMachine+0x454>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	f107 030f 	add.w	r3, r7, #15
 80011a8:	2100      	movs	r1, #0
 80011aa:	2000      	movs	r0, #0
 80011ac:	f001 fc6d 	bl	8002a8a <updateUserMsg>
                ptr_numSaltosString = getNumSaltosString();
 80011b0:	f001 f85c 	bl	800226c <getNumSaltosString>
 80011b4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                printDataDisplay(0,1,ptr_numSaltosString);
 80011b8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80011bc:	2101      	movs	r1, #1
 80011be:	2000      	movs	r0, #0
 80011c0:	f002 fb9c 	bl	80038fc <printDataDisplay>
                updateDataDisplay(index,1);
 80011c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011c8:	2101      	movs	r1, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fbb0 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 80011d0:	f003 fe10 	bl	8004df4 <getKeyPressed>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

                if(key == INSERIR)
 80011da:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80011de:	2b49      	cmp	r3, #73	; 0x49
 80011e0:	d10f      	bne.n	8001202 <configStateMachine+0x42a>
                {
                	resetKeyPressed();
 80011e2:	f003 fe13 	bl	8004e0c <resetKeyPressed>
                    setUserNumSaltos(&index);
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 f9fb 	bl	80025e6 <setUserNumSaltos>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 80011f0:	2005      	movs	r0, #5
 80011f2:	f003 f853 	bl	800429c <getNextSub>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011fe:	70da      	strb	r2, [r3, #3]
 8001200:	e2ef      	b.n	80017e2 <configStateMachine+0xa0a>
                }
                else if(key == AVANCAR)
 8001202:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001206:	2b41      	cmp	r3, #65	; 0x41
 8001208:	d112      	bne.n	8001230 <configStateMachine+0x458>
                {
                	resetKeyPressed();
 800120a:	f003 fdff 	bl	8004e0c <resetKeyPressed>
                    indexChange(&index,2);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2102      	movs	r1, #2
 8001214:	4618      	mov	r0, r3
 8001216:	f000 ffca 	bl	80021ae <indexChange>
 800121a:	e2e2      	b.n	80017e2 <configStateMachine+0xa0a>
 800121c:	2000006c 	.word	0x2000006c
 8001220:	20000070 	.word	0x20000070
 8001224:	20000074 	.word	0x20000074
 8001228:	20000078 	.word	0x20000078
 800122c:	2000007c 	.word	0x2000007c
                }
                else if(key == CONFIRMAR)
 8001230:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001234:	2b43      	cmp	r3, #67	; 0x43
 8001236:	f040 82d4 	bne.w	80017e2 <configStateMachine+0xa0a>
                {
                	resetKeyPressed();
 800123a:	f003 fde7 	bl	8004e0c <resetKeyPressed>
                    index = 4;
 800123e:	2304      	movs	r3, #4
 8001240:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001242:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001246:	f107 030f 	add.w	r3, r7, #15
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f001 fc3a 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 8001252:	2006      	movs	r0, #6
 8001254:	f003 f822 	bl	800429c <getNextSub>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001260:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001266:	3303      	adds	r3, #3
 8001268:	4618      	mov	r0, r3
 800126a:	f003 f829 	bl	80042c0 <setSelectSub>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001276:	705a      	strb	r2, [r3, #1]
                }
                break;
 8001278:	e2b3      	b.n	80017e2 <configStateMachine+0xa0a>

            case SENSOR_INT_SALTOS:
                updateUserMsg(0,0,intersaltosUserMsg,&displayUpdateStatus);
 800127a:	4be4      	ldr	r3, [pc, #912]	; (800160c <configStateMachine+0x834>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	f107 030f 	add.w	r3, r7, #15
 8001282:	2100      	movs	r1, #0
 8001284:	2000      	movs	r0, #0
 8001286:	f001 fc00 	bl	8002a8a <updateUserMsg>
                configIntervalTimeStruct = getIntervalTimeStruct();
 800128a:	f000 fca5 	bl	8001bd8 <getIntervalTimeStruct>
 800128e:	4603      	mov	r3, r0
 8001290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                strftime(userIntervalSaltosTimeString, sizeof(userIntervalSaltosTimeString), "%M:%S", configIntervalTimeStruct);
 8001294:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001298:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800129c:	4adc      	ldr	r2, [pc, #880]	; (8001610 <configStateMachine+0x838>)
 800129e:	2109      	movs	r1, #9
 80012a0:	f008 fe10 	bl	8009ec4 <strftime>
                printDataDisplay(0,1,userIntervalSaltosTimeString);
 80012a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012a8:	461a      	mov	r2, r3
 80012aa:	2101      	movs	r1, #1
 80012ac:	2000      	movs	r0, #0
 80012ae:	f002 fb25 	bl	80038fc <printDataDisplay>
                updateDataDisplay(index,1);
 80012b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012b6:	2101      	movs	r1, #1
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fb39 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 80012be:	f003 fd99 	bl	8004df4 <getKeyPressed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

                if(key == INSERIR)
 80012c8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80012cc:	2b49      	cmp	r3, #73	; 0x49
 80012ce:	d10f      	bne.n	80012f0 <configStateMachine+0x518>
                {
                	resetKeyPressed();
 80012d0:	f003 fd9c 	bl	8004e0c <resetKeyPressed>
                	setIntervalSaltosTime(&index);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 faa5 	bl	8002828 <setIntervalSaltosTime>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 80012de:	2006      	movs	r0, #6
 80012e0:	f002 ffdc 	bl	800429c <getNextSub>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80012ec:	70da      	strb	r2, [r3, #3]
 80012ee:	e278      	b.n	80017e2 <configStateMachine+0xa0a>
                }
                else if(key == AVANCAR)
 80012f0:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80012f4:	2b41      	cmp	r3, #65	; 0x41
 80012f6:	d108      	bne.n	800130a <configStateMachine+0x532>
				{
					resetKeyPressed();
 80012f8:	f003 fd88 	bl	8004e0c <resetKeyPressed>
					indexColumn(&index,4);
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2104      	movs	r1, #4
 8001302:	4618      	mov	r0, r3
 8001304:	f000 feb2 	bl	800206c <indexColumn>
 8001308:	e26b      	b.n	80017e2 <configStateMachine+0xa0a>
				}
                else if(key == CONFIRMAR)
 800130a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800130e:	2b43      	cmp	r3, #67	; 0x43
 8001310:	f040 8267 	bne.w	80017e2 <configStateMachine+0xa0a>
                {
                	resetKeyPressed();
 8001314:	f003 fd7a 	bl	8004e0c <resetKeyPressed>
                    index = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800131c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001320:	f107 030f 	add.w	r3, r7, #15
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fbcd 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 800132c:	2007      	movs	r0, #7
 800132e:	f002 ffb5 	bl	800429c <getNextSub>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800133a:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 800133c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001340:	3303      	adds	r3, #3
 8001342:	4618      	mov	r0, r3
 8001344:	f002 ffbc 	bl	80042c0 <setSelectSub>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001350:	705a      	strb	r2, [r3, #1]
                }

                break;
 8001352:	e246      	b.n	80017e2 <configStateMachine+0xa0a>

            case SENSOR_JMP_SELECT:
                updateUserMsg(0,0,tiposaltoUserMsg,&displayUpdateStatus);
 8001354:	4baf      	ldr	r3, [pc, #700]	; (8001614 <configStateMachine+0x83c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	f107 030f 	add.w	r3, r7, #15
 800135c:	2100      	movs	r1, #0
 800135e:	2000      	movs	r0, #0
 8001360:	f001 fb93 	bl	8002a8a <updateUserMsg>
                ptr_jumpSelectString = getTypeJumpString();
 8001364:	f000 ffa2 	bl	80022ac <getTypeJumpString>
 8001368:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                printDataDisplay(0,1,ptr_jumpSelectString);
 800136c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001370:	2101      	movs	r1, #1
 8001372:	2000      	movs	r0, #0
 8001374:	f002 fac2 	bl	80038fc <printDataDisplay>
                updateDataDisplay(index,1);
 8001378:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800137c:	2101      	movs	r1, #1
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fad6 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 8001384:	f003 fd36 	bl	8004df4 <getKeyPressed>
 8001388:	4603      	mov	r3, r0
 800138a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

                if(key == INSERIR)
 800138e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001392:	2b49      	cmp	r3, #73	; 0x49
 8001394:	d10f      	bne.n	80013b6 <configStateMachine+0x5de>
                {
                	resetKeyPressed();
 8001396:	f003 fd39 	bl	8004e0c <resetKeyPressed>
                    setUserTypeJump(&index);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 f945 	bl	800262e <setUserTypeJump>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 80013a4:	2007      	movs	r0, #7
 80013a6:	f002 ff79 	bl	800429c <getNextSub>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013b2:	70da      	strb	r2, [r3, #3]
 80013b4:	e215      	b.n	80017e2 <configStateMachine+0xa0a>

                }
                else if(key == CONFIRMAR)
 80013b6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80013ba:	2b43      	cmp	r3, #67	; 0x43
 80013bc:	f040 8211 	bne.w	80017e2 <configStateMachine+0xa0a>
                {
                	resetKeyPressed();
 80013c0:	f003 fd24 	bl	8004e0c <resetKeyPressed>
                    if(*ptr_jumpSelectString == '3')
 80013c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b33      	cmp	r3, #51	; 0x33
 80013cc:	d115      	bne.n	80013fa <configStateMachine+0x622>
                    {
                    	index = 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 80013d2:	2008      	movs	r0, #8
 80013d4:	f002 ff62 	bl	800429c <getNextSub>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013e0:	70da      	strb	r2, [r3, #3]
                        subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80013e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013e6:	3303      	adds	r3, #3
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 ff69 	bl	80042c0 <setSelectSub>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013f6:	705a      	strb	r2, [r3, #1]
 80013f8:	e014      	b.n	8001424 <configStateMachine+0x64c>
                    }
                    else
                    {
                    	index = 2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 80013fe:	2009      	movs	r0, #9
 8001400:	f002 ff4c 	bl	800429c <getNextSub>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800140c:	70da      	strb	r2, [r3, #3]
                        subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 800140e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001412:	3303      	adds	r3, #3
 8001414:	4618      	mov	r0, r3
 8001416:	f002 ff53 	bl	80042c0 <setSelectSub>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001422:	705a      	strb	r2, [r3, #1]
                    }
                    //TESTE trocar a variavel por uma local e o resultado enviar para ptr_userConfiguration->userCMJ.
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001424:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001428:	f107 030f 	add.w	r3, r7, #15
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f001 fb49 	bl	8002ac6 <readyUserInterface>

                }

                break;
 8001434:	e1d5      	b.n	80017e2 <configStateMachine+0xa0a>

            case SENSOR_ALTDJ:
                updateUserMsg(0,0,altdjUserMsg,&displayUpdateStatus);
 8001436:	4b78      	ldr	r3, [pc, #480]	; (8001618 <configStateMachine+0x840>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	f107 030f 	add.w	r3, r7, #15
 800143e:	2100      	movs	r1, #0
 8001440:	2000      	movs	r0, #0
 8001442:	f001 fb22 	bl	8002a8a <updateUserMsg>
                ptr_altDJString = getAltDJString();
 8001446:	f000 ff47 	bl	80022d8 <getAltDJString>
 800144a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                printDataDisplay(0,1,ptr_altDJString);
 800144e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001452:	2101      	movs	r1, #1
 8001454:	2000      	movs	r0, #0
 8001456:	f002 fa51 	bl	80038fc <printDataDisplay>
                updateDataDisplay(index,1);
 800145a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800145e:	2101      	movs	r1, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fa65 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 8001466:	f003 fcc5 	bl	8004df4 <getKeyPressed>
 800146a:	4603      	mov	r3, r0
 800146c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

                if(key == INSERIR)
 8001470:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001474:	2b49      	cmp	r3, #73	; 0x49
 8001476:	d10f      	bne.n	8001498 <configStateMachine+0x6c0>
                {
                	resetKeyPressed();
 8001478:	f003 fcc8 	bl	8004e0c <resetKeyPressed>
                    setUserAltDJ(&index);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4618      	mov	r0, r3
 8001482:	f001 f8f8 	bl	8002676 <setUserAltDJ>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 8001486:	2008      	movs	r0, #8
 8001488:	f002 ff08 	bl	800429c <getNextSub>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001494:	70da      	strb	r2, [r3, #3]
 8001496:	e1a4      	b.n	80017e2 <configStateMachine+0xa0a>
                }
                else if(key == CONFIRMAR)
 8001498:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800149c:	2b43      	cmp	r3, #67	; 0x43
 800149e:	f040 81a0 	bne.w	80017e2 <configStateMachine+0xa0a>
                {
                	resetKeyPressed();
 80014a2:	f003 fcb3 	bl	8004e0c <resetKeyPressed>
                    index = 2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80014aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80014ae:	f107 030f 	add.w	r3, r7, #15
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 fb06 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 80014ba:	2009      	movs	r0, #9
 80014bc:	f002 feee 	bl	800429c <getNextSub>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014c8:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80014ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014ce:	3303      	adds	r3, #3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fef5 	bl	80042c0 <setSelectSub>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014de:	705a      	strb	r2, [r3, #1]
                }

                break;
 80014e0:	e17f      	b.n	80017e2 <configStateMachine+0xa0a>

            case SENSOR_SERIES:
                updateUserMsg(0,0,numserieUserMsg,&displayUpdateStatus);
 80014e2:	4b4e      	ldr	r3, [pc, #312]	; (800161c <configStateMachine+0x844>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f107 030f 	add.w	r3, r7, #15
 80014ea:	2100      	movs	r1, #0
 80014ec:	2000      	movs	r0, #0
 80014ee:	f001 facc 	bl	8002a8a <updateUserMsg>
                ptr_numSeriesString = getNumSeriesString();
 80014f2:	f000 ff0b 	bl	800230c <getNumSeriesString>
 80014f6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                printDataDisplay(0,1,ptr_numSeriesString);
 80014fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80014fe:	2101      	movs	r1, #1
 8001500:	2000      	movs	r0, #0
 8001502:	f002 f9fb 	bl	80038fc <printDataDisplay>
                updateDataDisplay(index,1);
 8001506:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fa0f 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 8001512:	f003 fc6f 	bl	8004df4 <getKeyPressed>
 8001516:	4603      	mov	r3, r0
 8001518:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

                if(key == INSERIR)
 800151c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001520:	2b49      	cmp	r3, #73	; 0x49
 8001522:	d10f      	bne.n	8001544 <configStateMachine+0x76c>
                {
                	resetKeyPressed();
 8001524:	f003 fc72 	bl	8004e0c <resetKeyPressed>
                    setUserNumSeries(&index);
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4618      	mov	r0, r3
 800152e:	f001 f8c6 	bl	80026be <setUserNumSeries>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8001532:	2009      	movs	r0, #9
 8001534:	f002 feb2 	bl	800429c <getNextSub>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001540:	70da      	strb	r2, [r3, #3]
 8001542:	e14e      	b.n	80017e2 <configStateMachine+0xa0a>
                }
                else if(key == AVANCAR)
 8001544:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001548:	2b41      	cmp	r3, #65	; 0x41
 800154a:	d108      	bne.n	800155e <configStateMachine+0x786>
				{
					resetKeyPressed();
 800154c:	f003 fc5e 	bl	8004e0c <resetKeyPressed>
					indexColumn(&index,2);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2102      	movs	r1, #2
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fd88 	bl	800206c <indexColumn>
 800155c:	e141      	b.n	80017e2 <configStateMachine+0xa0a>
				}
                else if(key == CONFIRMAR)
 800155e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001562:	2b43      	cmp	r3, #67	; 0x43
 8001564:	f040 813d 	bne.w	80017e2 <configStateMachine+0xa0a>
                {
                	resetKeyPressed();
 8001568:	f003 fc50 	bl	8004e0c <resetKeyPressed>
                    index = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001570:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001574:	f107 030f 	add.w	r3, r7, #15
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f001 faa3 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 8001580:	200a      	movs	r0, #10
 8001582:	f002 fe8b 	bl	800429c <getNextSub>
 8001586:	4603      	mov	r3, r0
 8001588:	461a      	mov	r2, r3
 800158a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800158e:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001594:	3303      	adds	r3, #3
 8001596:	4618      	mov	r0, r3
 8001598:	f002 fe92 	bl	80042c0 <setSelectSub>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015a4:	705a      	strb	r2, [r3, #1]
                }

                break;
 80015a6:	e11c      	b.n	80017e2 <configStateMachine+0xa0a>

            case SENSOR_INT_SERIES:
                updateUserMsg(0,0,interseriesUserMsg,&displayUpdateStatus);
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <configStateMachine+0x848>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	f107 030f 	add.w	r3, r7, #15
 80015b0:	2100      	movs	r1, #0
 80015b2:	2000      	movs	r0, #0
 80015b4:	f001 fa69 	bl	8002a8a <updateUserMsg>
                ptr_intervalSeriesString = getIntervalSeriesString();
 80015b8:	f000 fec8 	bl	800234c <getIntervalSeriesString>
 80015bc:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                printDataDisplay(0,1,ptr_intervalSeriesString);
 80015c0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80015c4:	2101      	movs	r1, #1
 80015c6:	2000      	movs	r0, #0
 80015c8:	f002 f998 	bl	80038fc <printDataDisplay>
                updateDataDisplay(index,1);
 80015cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015d0:	2101      	movs	r1, #1
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 f9ac 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 80015d8:	f003 fc0c 	bl	8004df4 <getKeyPressed>
 80015dc:	4603      	mov	r3, r0
 80015de:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

                if(key == INSERIR)
 80015e2:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80015e6:	2b49      	cmp	r3, #73	; 0x49
 80015e8:	d11c      	bne.n	8001624 <configStateMachine+0x84c>
                {
                	resetKeyPressed();
 80015ea:	f003 fc0f 	bl	8004e0c <resetKeyPressed>
                    setUserIntervalSeries(&index);
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 f887 	bl	8002706 <setUserIntervalSeries>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 80015f8:	200a      	movs	r0, #10
 80015fa:	f002 fe4f 	bl	800429c <getNextSub>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001606:	70da      	strb	r2, [r3, #3]
 8001608:	e0eb      	b.n	80017e2 <configStateMachine+0xa0a>
 800160a:	bf00      	nop
 800160c:	20000080 	.word	0x20000080
 8001610:	0800b6d0 	.word	0x0800b6d0
 8001614:	20000084 	.word	0x20000084
 8001618:	20000088 	.word	0x20000088
 800161c:	2000008c 	.word	0x2000008c
 8001620:	20000090 	.word	0x20000090
                }
                else if(key == AVANCAR)
 8001624:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001628:	2b41      	cmp	r3, #65	; 0x41
 800162a:	d108      	bne.n	800163e <configStateMachine+0x866>
				{
					resetKeyPressed();
 800162c:	f003 fbee 	bl	8004e0c <resetKeyPressed>
					indexColumn(&index,2);
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	2102      	movs	r1, #2
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fd18 	bl	800206c <indexColumn>
 800163c:	e0d1      	b.n	80017e2 <configStateMachine+0xa0a>
				}
                else if(key == CONFIRMAR)
 800163e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001642:	2b43      	cmp	r3, #67	; 0x43
 8001644:	f040 80cd 	bne.w	80017e2 <configStateMachine+0xa0a>
                {
                	resetKeyPressed();
 8001648:	f003 fbe0 	bl	8004e0c <resetKeyPressed>
                    index = 2;
 800164c:	2302      	movs	r3, #2
 800164e:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001650:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001654:	f107 030f 	add.w	r3, r7, #15
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fa33 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8001660:	200b      	movs	r0, #11
 8001662:	f002 fe1b 	bl	800429c <getNextSub>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800166e:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001674:	3303      	adds	r3, #3
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fe22 	bl	80042c0 <setSelectSub>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001684:	705a      	strb	r2, [r3, #1]
                }

            break;
 8001686:	e0ac      	b.n	80017e2 <configStateMachine+0xa0a>

            case TAPETE_ON:
                updateUserMsg(0,0,intapeteUserMsg,&displayUpdateStatus);
 8001688:	4b5b      	ldr	r3, [pc, #364]	; (80017f8 <configStateMachine+0xa20>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	f107 030f 	add.w	r3, r7, #15
 8001690:	2100      	movs	r1, #0
 8001692:	2000      	movs	r0, #0
 8001694:	f001 f9f9 	bl	8002a8a <updateUserMsg>
                key = getKeyPressed();
 8001698:	f003 fbac 	bl	8004df4 <getKeyPressed>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

                if(key == AVANCAR)
 80016a2:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80016a6:	2b41      	cmp	r3, #65	; 0x41
 80016a8:	d112      	bne.n	80016d0 <configStateMachine+0x8f8>
                {
                	resetKeyPressed();
 80016aa:	f003 fbaf 	bl	8004e0c <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 80016ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80016b2:	f107 030f 	add.w	r3, r7, #15
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 fa04 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_OFF);
 80016be:	200c      	movs	r0, #12
 80016c0:	f002 fdec 	bl	800429c <getNextSub>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016cc:	70da      	strb	r2, [r3, #3]
 80016ce:	e088      	b.n	80017e2 <configStateMachine+0xa0a>
                }
                else if(key == CONFIRMAR)
 80016d0:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80016d4:	2b43      	cmp	r3, #67	; 0x43
 80016d6:	f040 8084 	bne.w	80017e2 <configStateMachine+0xa0a>
                {
                	resetKeyPressed();
 80016da:	f003 fb97 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80016de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80016e2:	f107 030f 	add.w	r3, r7, #15
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 f9ec 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 80016ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016f2:	3303      	adds	r3, #3
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 fde3 	bl	80042c0 <setSelectSub>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001702:	705a      	strb	r2, [r3, #1]
                    ptr_userConfiguration->userSelectTapete = TRUE;
 8001704:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001708:	2201      	movs	r2, #1
 800170a:	76da      	strb	r2, [r3, #27]
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 800170c:	200d      	movs	r0, #13
 800170e:	f002 fdc5 	bl	800429c <getNextSub>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800171a:	70da      	strb	r2, [r3, #3]
                }
                break;
 800171c:	e061      	b.n	80017e2 <configStateMachine+0xa0a>

            case TAPETE_OFF:
                updateUserMsg(0,0,outtapeteUserMsg,&displayUpdateStatus);
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <configStateMachine+0xa24>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	f107 030f 	add.w	r3, r7, #15
 8001726:	2100      	movs	r1, #0
 8001728:	2000      	movs	r0, #0
 800172a:	f001 f9ae 	bl	8002a8a <updateUserMsg>
                key = getKeyPressed();
 800172e:	f003 fb61 	bl	8004df4 <getKeyPressed>
 8001732:	4603      	mov	r3, r0
 8001734:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

                if(key == AVANCAR)
 8001738:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800173c:	2b41      	cmp	r3, #65	; 0x41
 800173e:	d112      	bne.n	8001766 <configStateMachine+0x98e>
                {
                	resetKeyPressed();
 8001740:	f003 fb64 	bl	8004e0c <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001744:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001748:	f107 030f 	add.w	r3, r7, #15
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f001 f9b9 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8001754:	200b      	movs	r0, #11
 8001756:	f002 fda1 	bl	800429c <getNextSub>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001762:	70da      	strb	r2, [r3, #3]
 8001764:	e03d      	b.n	80017e2 <configStateMachine+0xa0a>
                }
                else if(key == CONFIRMAR)
 8001766:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800176a:	2b43      	cmp	r3, #67	; 0x43
 800176c:	d139      	bne.n	80017e2 <configStateMachine+0xa0a>
                {
                	resetKeyPressed();
 800176e:	f003 fb4d 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001772:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001776:	f107 030f 	add.w	r3, r7, #15
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f001 f9a2 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
 8001782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001786:	3303      	adds	r3, #3
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fd99 	bl	80042c0 <setSelectSub>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001796:	705a      	strb	r2, [r3, #1]
                    ptr_userConfiguration->userSelectTapete = FALSE;
 8001798:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800179c:	2200      	movs	r2, #0
 800179e:	76da      	strb	r2, [r3, #27]
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 80017a0:	200d      	movs	r0, #13
 80017a2:	f002 fd7b 	bl	800429c <getNextSub>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017ae:	70da      	strb	r2, [r3, #3]
                }
                break;
 80017b0:	e017      	b.n	80017e2 <configStateMachine+0xa0a>

            case SAVE_CONFIGS:
                subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f002 fd72 	bl	800429c <getNextSub>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017c0:	70da      	strb	r2, [r3, #3]
                setInsertData(ptr_userConfiguration);
 80017c2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80017c6:	f002 fd8f 	bl	80042e8 <setInsertData>
                readyUserInterface(&displayUpdateStatus,cursorPosition);
 80017ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80017ce:	f107 030f 	add.w	r3, r7, #15
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 f976 	bl	8002ac6 <readyUserInterface>
                key = MENU;
 80017da:	234d      	movs	r3, #77	; 0x4d
 80017dc:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
                break;
 80017e0:	bf00      	nop
    while(key != MENU)
 80017e2:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80017e6:	2b4d      	cmp	r3, #77	; 0x4d
 80017e8:	f47f ab22 	bne.w	8000e30 <configStateMachine+0x58>
        }
    }
}
 80017ec:	bf00      	nop
 80017ee:	4618      	mov	r0, r3
 80017f0:	37c0      	adds	r7, #192	; 0xc0
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000094 	.word	0x20000094
 80017fc:	20000098 	.word	0x20000098

08001800 <consultStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char consultStateMachine(struct Menu* subMenu)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08c      	sub	sp, #48	; 0x30
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuTesteConsultar = subMenu;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char* ptr_consultTestString;
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    struct results* ptr_structConsultResult;
    unsigned char selectedUserTest = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char testSamples=0;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    unsigned char cursorPosition[2] = {0,0};
 8001818:	2300      	movs	r3, #0
 800181a:	81bb      	strh	r3, [r7, #12]
    short index = 2; //(000 MENU)
 800181c:	2302      	movs	r3, #2
 800181e:	817b      	strh	r3, [r7, #10]
    unsigned char key = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    static unsigned char results = 0;
    unsigned char displayUpdateStatus = IDDLE;
 8001826:	2300      	movs	r3, #0
 8001828:	727b      	strb	r3, [r7, #9]

    while(key != MENU)
 800182a:	bf00      	nop
 800182c:	e19e      	b.n	8001b6c <consultStateMachine+0x36c>
    {
        switch(subMenuTesteConsultar->menuState)
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	78db      	ldrb	r3, [r3, #3]
 8001832:	2b03      	cmp	r3, #3
 8001834:	f200 819a 	bhi.w	8001b6c <consultStateMachine+0x36c>
 8001838:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <consultStateMachine+0x40>)
 800183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183e:	bf00      	nop
 8001840:	08001851 	.word	0x08001851
 8001844:	08001861 	.word	0x08001861
 8001848:	08001917 	.word	0x08001917
 800184c:	08001acd 	.word	0x08001acd
        {
            case IDDLE:
                subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001850:	2001      	movs	r0, #1
 8001852:	f002 fd23 	bl	800429c <getNextSub>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	70da      	strb	r2, [r3, #3]
            break;
 800185e:	e185      	b.n	8001b6c <consultStateMachine+0x36c>

            case CONSULTA_TESTE:
                updateUserMsg(0,0,consultTestUserMsg,&displayUpdateStatus);
 8001860:	4bc7      	ldr	r3, [pc, #796]	; (8001b80 <consultStateMachine+0x380>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	f107 0309 	add.w	r3, r7, #9
 8001868:	2100      	movs	r1, #0
 800186a:	2000      	movs	r0, #0
 800186c:	f001 f90d 	bl	8002a8a <updateUserMsg>
                ptr_consultTestString = getNumTestString();
 8001870:	f000 fdd8 	bl	8002424 <getNumTestString>
 8001874:	62f8      	str	r0, [r7, #44]	; 0x2c
                printDataDisplay(0,1,ptr_consultTestString);
 8001876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001878:	2101      	movs	r1, #1
 800187a:	2000      	movs	r0, #0
 800187c:	f002 f83e 	bl	80038fc <printDataDisplay>
                updateDataDisplay(index,1);
 8001880:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001884:	2101      	movs	r1, #1
 8001886:	4618      	mov	r0, r3
 8001888:	f002 f852 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 800188c:	f003 fab2 	bl	8004df4 <getKeyPressed>
 8001890:	4603      	mov	r3, r0
 8001892:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if(key == INSERIR)
 8001896:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800189a:	2b49      	cmp	r3, #73	; 0x49
 800189c:	d10e      	bne.n	80018bc <consultStateMachine+0xbc>
                {
                	resetKeyPressed();
 800189e:	f003 fab5 	bl	8004e0c <resetKeyPressed>
                    setUserNumTest(&index);
 80018a2:	f107 030a 	add.w	r3, r7, #10
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 ff99 	bl	80027de <setUserNumTest>
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 80018ac:	2001      	movs	r0, #1
 80018ae:	f002 fcf5 	bl	800429c <getNextSub>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	70da      	strb	r2, [r3, #3]
 80018ba:	e157      	b.n	8001b6c <consultStateMachine+0x36c>
                }
                else if(key == AVANCAR)
 80018bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80018c0:	2b41      	cmp	r3, #65	; 0x41
 80018c2:	d108      	bne.n	80018d6 <consultStateMachine+0xd6>
                {
                	resetKeyPressed();
 80018c4:	f003 faa2 	bl	8004e0c <resetKeyPressed>
                    indexChange(&index,2);
 80018c8:	f107 030a 	add.w	r3, r7, #10
 80018cc:	2102      	movs	r1, #2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fc6d 	bl	80021ae <indexChange>
 80018d4:	e14a      	b.n	8001b6c <consultStateMachine+0x36c>
                }
                else if(key == CONFIRMAR)
 80018d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80018da:	2b43      	cmp	r3, #67	; 0x43
 80018dc:	f040 8146 	bne.w	8001b6c <consultStateMachine+0x36c>
                {
                	resetKeyPressed();
 80018e0:	f003 fa94 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80018e4:	f107 020c 	add.w	r2, r7, #12
 80018e8:	f107 0309 	add.w	r3, r7, #9
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 f8e9 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 80018f4:	2002      	movs	r0, #2
 80018f6:	f002 fcd1 	bl	800429c <getNextSub>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	70da      	strb	r2, [r3, #3]
                    subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	3303      	adds	r3, #3
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fcda 	bl	80042c0 <setSelectSub>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	705a      	strb	r2, [r3, #1]
                }
            break;
 8001914:	e12a      	b.n	8001b6c <consultStateMachine+0x36c>

            case RESULT_TESTE:
            	updateUserMsg(0,0,consultTestUserMsg,&displayUpdateStatus);
 8001916:	4b9a      	ldr	r3, [pc, #616]	; (8001b80 <consultStateMachine+0x380>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f107 0309 	add.w	r3, r7, #9
 800191e:	2100      	movs	r1, #0
 8001920:	2000      	movs	r0, #0
 8001922:	f001 f8b2 	bl	8002a8a <updateUserMsg>
                selectedUserTest = stringToInt(ptr_consultTestString);
 8001926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001928:	f000 fc06 	bl	8002138 <stringToInt>
 800192c:	4603      	mov	r3, r0
 800192e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//                ptr_structConsultResult = load_data(selectedUserTest); //APENAS PARA APLICAÇÃO COM SD
                ptr_structConsultResult = getUserResultData(selectedUserTest);
 8001932:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fa28 	bl	8001d8c <getUserResultData>
 800193c:	61f8      	str	r0, [r7, #28]
//                    updateUserMsg(0,1,ptr_alturaString,&displayUpdateStatus);
//                    readyUserInterface(&displayUpdateStatus,cursorPosition);
//                }
//                else  printDataDisplay(0,0,"VAZIO");

                key = getKeyPressed();
 800193e:	f003 fa59 	bl	8004df4 <getKeyPressed>
 8001942:	4603      	mov	r3, r0
 8001944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == AVANCAR)
 8001948:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800194c:	2b41      	cmp	r3, #65	; 0x41
 800194e:	f040 80a7 	bne.w	8001aa0 <consultStateMachine+0x2a0>
                {
                	resetKeyPressed();
 8001952:	f003 fa5b 	bl	8004e0c <resetKeyPressed>
                    if(testSamples<(ptr_structConsultResult->resultTestAcquiredSamples))
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	785b      	ldrb	r3, [r3, #1]
 800195a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800195e:	429a      	cmp	r2, r3
 8001960:	f080 8083 	bcs.w	8001a6a <consultStateMachine+0x26a>
                    {
                        updateUserMsg(0,0,"Amostra",&displayUpdateStatus);
 8001964:	f107 0309 	add.w	r3, r7, #9
 8001968:	4a86      	ldr	r2, [pc, #536]	; (8001b84 <consultStateMachine+0x384>)
 800196a:	2100      	movs	r1, #0
 800196c:	2000      	movs	r0, #0
 800196e:	f001 f88c 	bl	8002a8a <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001972:	f107 020c 	add.w	r2, r7, #12
 8001976:	f107 0309 	add.w	r3, r7, #9
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f001 f8a2 	bl	8002ac6 <readyUserInterface>
                        ptr_sampleString = param_1_toString(&ptr_structConsultResult->Measurement[testSamples].sampleNum);
 8001982:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	4413      	add	r3, r2
 8001992:	3304      	adds	r3, #4
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fd7d 	bl	8002494 <param_1_toString>
 800199a:	61b8      	str	r0, [r7, #24]
                        updateUserMsg(9,0,ptr_sampleString,&displayUpdateStatus);
 800199c:	f107 0309 	add.w	r3, r7, #9
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	2100      	movs	r1, #0
 80019a4:	2009      	movs	r0, #9
 80019a6:	f001 f870 	bl	8002a8a <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 80019aa:	f107 020c 	add.w	r2, r7, #12
 80019ae:	f107 0309 	add.w	r3, r7, #9
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 f886 	bl	8002ac6 <readyUserInterface>

                        updateUserMsg(0,1,"Tempo de Voo",&displayUpdateStatus);
 80019ba:	f107 0309 	add.w	r3, r7, #9
 80019be:	4a72      	ldr	r2, [pc, #456]	; (8001b88 <consultStateMachine+0x388>)
 80019c0:	2101      	movs	r1, #1
 80019c2:	2000      	movs	r0, #0
 80019c4:	f001 f861 	bl	8002a8a <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 80019c8:	f107 020c 	add.w	r2, r7, #12
 80019cc:	f107 0309 	add.w	r3, r7, #9
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f001 f877 	bl	8002ac6 <readyUserInterface>
                        ptr_vooTimeString = param_2_toString(&ptr_structConsultResult->Measurement[testSamples].uiVooTime);
 80019d8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	4413      	add	r3, r2
 80019e8:	3308      	adds	r3, #8
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fd66 	bl	80024bc <param_2_toString>
 80019f0:	6178      	str	r0, [r7, #20]
                        updateUserMsg(9,1,ptr_vooTimeString,&displayUpdateStatus);
 80019f2:	f107 0309 	add.w	r3, r7, #9
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	2101      	movs	r1, #1
 80019fa:	2009      	movs	r0, #9
 80019fc:	f001 f845 	bl	8002a8a <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001a00:	f107 020c 	add.w	r2, r7, #12
 8001a04:	f107 0309 	add.w	r3, r7, #9
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f001 f85b 	bl	8002ac6 <readyUserInterface>

                        updateUserMsg(0,2,"Altura do salto",&displayUpdateStatus);
 8001a10:	f107 0309 	add.w	r3, r7, #9
 8001a14:	4a5d      	ldr	r2, [pc, #372]	; (8001b8c <consultStateMachine+0x38c>)
 8001a16:	2102      	movs	r1, #2
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f001 f836 	bl	8002a8a <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001a1e:	f107 020c 	add.w	r2, r7, #12
 8001a22:	f107 0309 	add.w	r3, r7, #9
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 f84c 	bl	8002ac6 <readyUserInterface>
                        ptr_alturaString = param_3_toString(&ptr_structConsultResult->Measurement[testSamples].uiSoloTime);
 8001a2e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	4413      	add	r3, r2
 8001a40:	3304      	adds	r3, #4
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fd4e 	bl	80024e4 <param_3_toString>
 8001a48:	6138      	str	r0, [r7, #16]
                        updateUserMsg(9,2,ptr_alturaString,&displayUpdateStatus);
 8001a4a:	f107 0309 	add.w	r3, r7, #9
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	2102      	movs	r1, #2
 8001a52:	2009      	movs	r0, #9
 8001a54:	f001 f819 	bl	8002a8a <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001a58:	f107 020c 	add.w	r2, r7, #12
 8001a5c:	f107 0309 	add.w	r3, r7, #9
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 f82f 	bl	8002ac6 <readyUserInterface>
 8001a68:	e004      	b.n	8001a74 <consultStateMachine+0x274>
                    }
                    else  printDataDisplay(0,0,"VAZIO");
 8001a6a:	4a49      	ldr	r2, [pc, #292]	; (8001b90 <consultStateMachine+0x390>)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f001 ff44 	bl	80038fc <printDataDisplay>
                    testSamples++;
 8001a74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if(testSamples == ptr_structConsultResult->resultTestAcquiredSamples) testSamples = 0;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	785b      	ldrb	r3, [r3, #1]
 8001a82:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d102      	bne.n	8001a90 <consultStateMachine+0x290>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8001a90:	2002      	movs	r0, #2
 8001a92:	f002 fc03 	bl	800429c <getNextSub>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	70da      	strb	r2, [r3, #3]
 8001a9e:	e065      	b.n	8001b6c <consultStateMachine+0x36c>
                }
                else if(key == PARAR)
 8001aa0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001aa4:	2b50      	cmp	r3, #80	; 0x50
 8001aa6:	d161      	bne.n	8001b6c <consultStateMachine+0x36c>
                {
                	resetKeyPressed();
 8001aa8:	f003 f9b0 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001aac:	f107 020c 	add.w	r2, r7, #12
 8001ab0:	f107 0309 	add.w	r3, r7, #9
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 f805 	bl	8002ac6 <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(EXPORTAR);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f002 fbed 	bl	800429c <getNextSub>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001aca:	e04f      	b.n	8001b6c <consultStateMachine+0x36c>

            case EXPORTAR:
                updateUserMsg(0,0,consultExportUserMsg,&displayUpdateStatus);
 8001acc:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <consultStateMachine+0x394>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	f107 0309 	add.w	r3, r7, #9
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 ffd7 	bl	8002a8a <updateUserMsg>
                key = getKeyPressed();
 8001adc:	f003 f98a 	bl	8004df4 <getKeyPressed>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == PARAR)
 8001ae6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001aea:	2b50      	cmp	r3, #80	; 0x50
 8001aec:	d114      	bne.n	8001b18 <consultStateMachine+0x318>
                {
                	resetKeyPressed();
 8001aee:	f003 f98d 	bl	8004e0c <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001af2:	f107 020c 	add.w	r2, r7, #12
 8001af6:	f107 0309 	add.w	r3, r7, #9
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 ffe2 	bl	8002ac6 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8001b02:	234d      	movs	r3, #77	; 0x4d
 8001b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f002 fbc7 	bl	800429c <getNextSub>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	70da      	strb	r2, [r3, #3]
 8001b16:	e028      	b.n	8001b6a <consultStateMachine+0x36a>
                }
                else if(key == CONFIRMAR)
 8001b18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b1c:	2b43      	cmp	r3, #67	; 0x43
 8001b1e:	d124      	bne.n	8001b6a <consultStateMachine+0x36a>
                {
                    //display
                	resetKeyPressed();
 8001b20:	f003 f974 	bl	8004e0c <resetKeyPressed>
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <consultStateMachine+0x398>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	f107 0309 	add.w	r3, r7, #9
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f000 ffab 	bl	8002a8a <updateUserMsg>
                    subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	3303      	adds	r3, #3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 fbc1 	bl	80042c0 <setSelectSub>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	705a      	strb	r2, [r3, #1]
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f002 fba8 	bl	800429c <getNextSub>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	70da      	strb	r2, [r3, #3]
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8001b54:	f107 020c 	add.w	r2, r7, #12
 8001b58:	f107 0309 	add.w	r3, r7, #9
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 ffb1 	bl	8002ac6 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8001b64:	234d      	movs	r3, #77	; 0x4d
 8001b66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                }
                break;
 8001b6a:	bf00      	nop
    while(key != MENU)
 8001b6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b70:	2b4d      	cmp	r3, #77	; 0x4d
 8001b72:	f47f ae5c 	bne.w	800182e <consultStateMachine+0x2e>
        }
    }
}
 8001b76:	bf00      	nop
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3730      	adds	r7, #48	; 0x30
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000005c 	.word	0x2000005c
 8001b84:	0800b6d8 	.word	0x0800b6d8
 8001b88:	0800b6e0 	.word	0x0800b6e0
 8001b8c:	0800b6f0 	.word	0x0800b6f0
 8001b90:	0800b700 	.word	0x0800b700
 8001b94:	20000060 	.word	0x20000060
 8001b98:	20000064 	.word	0x20000064

08001b9c <getUserTime>:
unsigned long int getUserTest() //apagar
{
   return myData.userTest;
}
unsigned long int getUserTime()
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
    return myData.userTime;
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <getUserTime+0x10>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	200001c4 	.word	0x200001c4

08001bb0 <getUserSelectTapete>:
{
    return myData.userSelectSensorChannel;
}

unsigned char getUserSelectTapete()
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
    return myData.userSelectTapete;
 8001bb4:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <getUserSelectTapete+0x10>)
 8001bb6:	7edb      	ldrb	r3, [r3, #27]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	200001c4 	.word	0x200001c4

08001bc4 <getTimeStruct>:

unsigned char* getTimeStruct()
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
    return insertTime;
 8001bc8:	4b02      	ldr	r3, [pc, #8]	; (8001bd4 <getTimeStruct+0x10>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <getIntervalTimeStruct>:

unsigned char* getIntervalTimeStruct()
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
    return intervalTime;
 8001bdc:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <getIntervalTimeStruct+0x10>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	20000004 	.word	0x20000004

08001bec <getMassArray>:

unsigned char* getMassArray()
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
    return massArray;
 8001bf0:	4b02      	ldr	r3, [pc, #8]	; (8001bfc <getMassArray+0x10>)
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	2000036c 	.word	0x2000036c

08001c00 <getOverMassArray>:

unsigned char* getOverMassArray()
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
    return overMassArray;
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <getOverMassArray+0x10>)
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000374 	.word	0x20000374

08001c14 <getAltMinArray>:

unsigned char* getAltMinArray()
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
    return altMinArray;
 8001c18:	4b02      	ldr	r3, [pc, #8]	; (8001c24 <getAltMinArray+0x10>)
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000008 	.word	0x20000008

08001c28 <getAltMaxArray>:

unsigned char* getAltMaxArray()
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
    return altMaxArray;
 8001c2c:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <getAltMaxArray+0x10>)
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	2000000c 	.word	0x2000000c

08001c3c <getNumSaltosArray>:

unsigned char* getNumSaltosArray()
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
    return numSaltosArray;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <getNumSaltosArray+0x10>)
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	2000037c 	.word	0x2000037c

08001c50 <getTypeJumpArray>:
//{
//    return intervalSaltosArray;
//}

unsigned char* getTypeJumpArray()
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
    return JumpTypeArray;
 8001c54:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <getTypeJumpArray+0x10>)
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000384 	.word	0x20000384

08001c64 <getAltDJArray>:

unsigned char* getAltDJArray()
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
    return altDJArray;
 8001c68:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <getAltDJArray+0x10>)
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000380 	.word	0x20000380

08001c78 <getNumSeriesArray>:

unsigned char* getNumSeriesArray()
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
    return numSeriesArray;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <getNumSeriesArray+0x10>)
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000388 	.word	0x20000388

08001c8c <getIntervalSeriesArray>:

unsigned char* getIntervalSeriesArray()
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
    return intervalSeriesArray;
 8001c90:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <getIntervalSeriesArray+0x10>)
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	2000038c 	.word	0x2000038c

08001ca0 <getNumTestArray>:

unsigned char* getNumTestArray()
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
    return numTestArray;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <getNumTestArray+0x10>)
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000010 	.word	0x20000010

08001cb4 <getEraseTestArray>:

unsigned char* getEraseTestArray()
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
    return selectEraseArray;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <getEraseTestArray+0x10>)
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000390 	.word	0x20000390

08001cc8 <getUserConfigStruct>:

unsigned char* getUserConfigStruct() //VERIFICAR SE VOU USAR
{
 8001cc8:	b4b0      	push	{r4, r5, r7}
 8001cca:	af00      	add	r7, sp, #0
    static struct dataInsert configStruct;
    configStruct = myData;
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <getUserConfigStruct+0x24>)
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <getUserConfigStruct+0x28>)
 8001cd0:	4614      	mov	r4, r2
 8001cd2:	461d      	mov	r5, r3
 8001cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return &configStruct;
 8001ce0:	4b02      	ldr	r3, [pc, #8]	; (8001cec <getUserConfigStruct+0x24>)
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bcb0      	pop	{r4, r5, r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000394 	.word	0x20000394
 8001cf0:	200001c4 	.word	0x200001c4

08001cf4 <setUserInputConfigData>:
	return myData.userAlturaMax;
}


unsigned char setUserInputConfigData(struct dataInsert* dataToInsert)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    myData.userTest = dataToInsert->userTest;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d02:	701a      	strb	r2, [r3, #0]
    myData.userTime = dataToInsert->userTime;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d0a:	6053      	str	r3, [r2, #4]
    myData.userMass = dataToInsert->userMass;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7a1a      	ldrb	r2, [r3, #8]
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d12:	721a      	strb	r2, [r3, #8]
    myData.userOverMass = dataToInsert->userOverMass;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7a5a      	ldrb	r2, [r3, #9]
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d1a:	725a      	strb	r2, [r3, #9]
    myData.userConsultTest = dataToInsert->userConsultTest;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	7a9a      	ldrb	r2, [r3, #10]
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d22:	729a      	strb	r2, [r3, #10]
    myData.userAlturaMin = dataToInsert->userAlturaMin;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d2a:	60d3      	str	r3, [r2, #12]
    myData.userAlturaMax = dataToInsert->userAlturaMax;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	4a15      	ldr	r2, [pc, #84]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d32:	6113      	str	r3, [r2, #16]
    myData.userNumSaltos = dataToInsert->userNumSaltos;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7d1a      	ldrb	r2, [r3, #20]
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d3a:	751a      	strb	r2, [r3, #20]
    myData.userIntervalSaltos = dataToInsert->userIntervalSaltos;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7d5a      	ldrb	r2, [r3, #21]
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d42:	755a      	strb	r2, [r3, #21]
    myData.userCMJ = dataToInsert->userCMJ;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7d9a      	ldrb	r2, [r3, #22]
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d4a:	759a      	strb	r2, [r3, #22]
    myData.userAlturaDJ = dataToInsert->userAlturaDJ;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7dda      	ldrb	r2, [r3, #23]
 8001d50:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d52:	75da      	strb	r2, [r3, #23]
    myData.userNumSeries = dataToInsert->userNumSeries;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7e1a      	ldrb	r2, [r3, #24]
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d5a:	761a      	strb	r2, [r3, #24]
    myData.userIntervalSeries = dataToInsert->userIntervalSeries;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7e5a      	ldrb	r2, [r3, #25]
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d62:	765a      	strb	r2, [r3, #25]
    myData.userCommConfig = dataToInsert->userCommConfig;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7e9a      	ldrb	r2, [r3, #26]
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d6a:	769a      	strb	r2, [r3, #26]
    myData.userSelectTapete = dataToInsert->userSelectTapete;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7eda      	ldrb	r2, [r3, #27]
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d72:	76da      	strb	r2, [r3, #27]
    myData.userSelectSensorChannel = dataToInsert->userSelectSensorChannel;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7f1a      	ldrb	r2, [r3, #28]
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <setUserInputConfigData+0x94>)
 8001d7a:	771a      	strb	r2, [r3, #28]
}
 8001d7c:	bf00      	nop
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	200001c4 	.word	0x200001c4

08001d8c <getUserResultData>:

unsigned char* getUserResultData(unsigned char numTest)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
    return &myResults[numTest-1];
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	019b      	lsls	r3, r3, #6
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <getUserResultData+0x20>)
 8001d9e:	4413      	add	r3, r2
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	200001e4 	.word	0x200001e4

08001db0 <getResultTestNumber>:

unsigned char getResultTestNumber()
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
    return numberTest;
 8001db4:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <getResultTestNumber+0x10>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	20000391 	.word	0x20000391

08001dc4 <setResultTestNumber>:
{
     myResults[numTest].thereAreData = TRUE;
}

unsigned char setResultTestNumber()
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
     numberTest++;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <setResultTestNumber+0x1c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <setResultTestNumber+0x1c>)
 8001dd2:	701a      	strb	r2, [r3, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000391 	.word	0x20000391

08001de4 <setUserResultData>:

unsigned char setUserResultData(struct results* structDataResult, unsigned char numTest)
{
 8001de4:	b490      	push	{r4, r7}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	70fb      	strb	r3, [r7, #3]
	unsigned char numSample = structDataResult->resultTestAcquiredSamples;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	785b      	ldrb	r3, [r3, #1]
 8001df4:	73bb      	strb	r3, [r7, #14]
    myResults[numTest].resultTestNum = numTest+1;
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	3201      	adds	r2, #1
 8001dfc:	b2d1      	uxtb	r1, r2
 8001dfe:	4a31      	ldr	r2, [pc, #196]	; (8001ec4 <setUserResultData+0xe0>)
 8001e00:	019b      	lsls	r3, r3, #6
 8001e02:	4413      	add	r3, r2
 8001e04:	460a      	mov	r2, r1
 8001e06:	701a      	strb	r2, [r3, #0]
    myResults[numTest].resultTestAcquiredSamples = numSample;
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	4a2e      	ldr	r2, [pc, #184]	; (8001ec4 <setUserResultData+0xe0>)
 8001e0c:	019b      	lsls	r3, r3, #6
 8001e0e:	4413      	add	r3, r2
 8001e10:	3301      	adds	r3, #1
 8001e12:	7bba      	ldrb	r2, [r7, #14]
 8001e14:	701a      	strb	r2, [r3, #0]
    myResults[numTest].thereAreData = TRUE;
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	4a2a      	ldr	r2, [pc, #168]	; (8001ec4 <setUserResultData+0xe0>)
 8001e1a:	019b      	lsls	r3, r3, #6
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	e042      	b.n	8001eb0 <setUserResultData+0xcc>
    {
        myResults[numTest].Measurement[i].sampleNum = structDataResult->Measurement[i].sampleNum;
 8001e2a:	7bf9      	ldrb	r1, [r7, #15]
 8001e2c:	78f8      	ldrb	r0, [r7, #3]
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	687c      	ldr	r4, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	440b      	add	r3, r1
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4423      	add	r3, r4
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	781c      	ldrb	r4, [r3, #0]
 8001e40:	4920      	ldr	r1, [pc, #128]	; (8001ec4 <setUserResultData+0xe0>)
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	0182      	lsls	r2, r0, #6
 8001e4c:	4413      	add	r3, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	3304      	adds	r3, #4
 8001e52:	4622      	mov	r2, r4
 8001e54:	701a      	strb	r2, [r3, #0]
        myResults[numTest].Measurement[i].uiVooTime = structDataResult->Measurement[i].uiVooTime;
 8001e56:	7bf9      	ldrb	r1, [r7, #15]
 8001e58:	78f8      	ldrb	r0, [r7, #3]
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	687c      	ldr	r4, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	440b      	add	r3, r1
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4423      	add	r3, r4
 8001e68:	3308      	adds	r3, #8
 8001e6a:	6819      	ldr	r1, [r3, #0]
 8001e6c:	4c15      	ldr	r4, [pc, #84]	; (8001ec4 <setUserResultData+0xe0>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	0182      	lsls	r2, r0, #6
 8001e78:	4413      	add	r3, r2
 8001e7a:	4423      	add	r3, r4
 8001e7c:	3308      	adds	r3, #8
 8001e7e:	6019      	str	r1, [r3, #0]
        myResults[numTest].Measurement[i].uiSoloTime = structDataResult->Measurement[i].uiSoloTime;
 8001e80:	7bf9      	ldrb	r1, [r7, #15]
 8001e82:	78f8      	ldrb	r0, [r7, #3]
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	687c      	ldr	r4, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	440b      	add	r3, r1
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4423      	add	r3, r4
 8001e92:	330c      	adds	r3, #12
 8001e94:	6819      	ldr	r1, [r3, #0]
 8001e96:	4c0b      	ldr	r4, [pc, #44]	; (8001ec4 <setUserResultData+0xe0>)
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	0182      	lsls	r2, r0, #6
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4423      	add	r3, r4
 8001ea6:	330c      	adds	r3, #12
 8001ea8:	6019      	str	r1, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	3301      	adds	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	7bbb      	ldrb	r3, [r7, #14]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d3b8      	bcc.n	8001e2a <setUserResultData+0x46>
    }
}
 8001eb8:	bf00      	nop
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc90      	pop	{r4, r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	200001e4 	.word	0x200001e4

08001ec8 <resetResultStruct>:

unsigned char resetResultStruct(struct results* structToReset) //verificar se vai precisar
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    structToReset->resultTestNum = 0;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
    structToReset->resultTestAcquiredSamples = 0;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	705a      	strb	r2, [r3, #1]
    structToReset->thereAreData = FALSE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	709a      	strb	r2, [r3, #2]
    for(unsigned char i = 0;i<MEASUREMENT_SIZE;i++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	e020      	b.n	8001f2a <resetResultStruct+0x62>
    {
        structToReset->Measurement[i].sampleNum = 0;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
        structToReset->Measurement[i].uiVooTime = 0;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
        structToReset->Measurement[i].uiSoloTime = 0;
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	330c      	adds	r3, #12
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
    for(unsigned char i = 0;i<MEASUREMENT_SIZE;i++)
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	3301      	adds	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d9db      	bls.n	8001ee8 <resetResultStruct+0x20>
    }

}
 8001f30:	bf00      	nop
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <resetConfigStruct>:

unsigned char resetConfigStruct(struct dataInsert* structToReset)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
    structToReset->userTest = 0;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
    structToReset->userAlturaDJ = 0;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	75da      	strb	r2, [r3, #23]
    structToReset->userAlturaMax = 0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
    structToReset->userAlturaMin = 0;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
    structToReset->userCMJ = 0;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	759a      	strb	r2, [r3, #22]
    structToReset->userCommConfig = 0;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	769a      	strb	r2, [r3, #26]
    structToReset->userConsultTest = 0;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	729a      	strb	r2, [r3, #10]
    structToReset->userIntervalSaltos = 0;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	755a      	strb	r2, [r3, #21]
    structToReset->userIntervalSeries = 0;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	765a      	strb	r2, [r3, #25]
    structToReset->userMass = 0;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	721a      	strb	r2, [r3, #8]
    structToReset->userNumSaltos = 0;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	751a      	strb	r2, [r3, #20]
    structToReset->userNumSeries = 0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	761a      	strb	r2, [r3, #24]
    structToReset->userOverMass = 0;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	725a      	strb	r2, [r3, #9]
    structToReset->userSelectSensorChannel = 0;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
    structToReset->userSelectTapete = 0;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	76da      	strb	r2, [r3, #27]
    structToReset->userTime = 0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]

}
 8001fa4:	bf00      	nop
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <resetMyResults>:

void resetMyResults()
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
    numberTest = 0;
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <resetMyResults+0xb4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
    for(unsigned char test=0;test<TEST_SIZE;test++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	71fb      	strb	r3, [r7, #7]
 8001fc0:	e046      	b.n	8002050 <resetMyResults+0xa0>
    {
        myResults[test].resultTestNum = 0;
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4a28      	ldr	r2, [pc, #160]	; (8002068 <resetMyResults+0xb8>)
 8001fc6:	019b      	lsls	r3, r3, #6
 8001fc8:	4413      	add	r3, r2
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
        myResults[test].resultTestAcquiredSamples = 0;
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	4a25      	ldr	r2, [pc, #148]	; (8002068 <resetMyResults+0xb8>)
 8001fd2:	019b      	lsls	r3, r3, #6
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
        myResults[test].thereAreData = FALSE;
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	4a22      	ldr	r2, [pc, #136]	; (8002068 <resetMyResults+0xb8>)
 8001fe0:	019b      	lsls	r3, r3, #6
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	e029      	b.n	8002044 <resetMyResults+0x94>
        {
            myResults[test].Measurement[sample].sampleNum = 0;
 8001ff0:	79f9      	ldrb	r1, [r7, #7]
 8001ff2:	481d      	ldr	r0, [pc, #116]	; (8002068 <resetMyResults+0xb8>)
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	018a      	lsls	r2, r1, #6
 8002000:	4413      	add	r3, r2
 8002002:	4403      	add	r3, r0
 8002004:	3304      	adds	r3, #4
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
            myResults[test].Measurement[sample].uiVooTime = 0;
 800200a:	79f9      	ldrb	r1, [r7, #7]
 800200c:	4816      	ldr	r0, [pc, #88]	; (8002068 <resetMyResults+0xb8>)
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	018a      	lsls	r2, r1, #6
 800201a:	4413      	add	r3, r2
 800201c:	4403      	add	r3, r0
 800201e:	3308      	adds	r3, #8
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
            myResults[test].Measurement[sample].uiSoloTime = 0;
 8002024:	79f9      	ldrb	r1, [r7, #7]
 8002026:	4810      	ldr	r0, [pc, #64]	; (8002068 <resetMyResults+0xb8>)
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	018a      	lsls	r2, r1, #6
 8002034:	4413      	add	r3, r2
 8002036:	4403      	add	r3, r0
 8002038:	330c      	adds	r3, #12
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d9d2      	bls.n	8001ff0 <resetMyResults+0x40>
    for(unsigned char test=0;test<TEST_SIZE;test++)
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	3301      	adds	r3, #1
 800204e:	71fb      	strb	r3, [r7, #7]
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b04      	cmp	r3, #4
 8002054:	d9b5      	bls.n	8001fc2 <resetMyResults+0x12>
        }

    }
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000391 	.word	0x20000391
 8002068:	200001e4 	.word	0x200001e4

0800206c <indexColumn>:
        *index = 0;
    }
}

unsigned char indexColumn(short* currentColumn, unsigned char size)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
    *currentColumn = *currentColumn -1;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	b21a      	sxth	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	801a      	strh	r2, [r3, #0]
    if(*currentColumn == 5) *currentColumn = *currentColumn -1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002090:	2b05      	cmp	r3, #5
 8002092:	d109      	bne.n	80020a8 <indexColumn+0x3c>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29b      	uxth	r3, r3
 80020a0:	b21a      	sxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	801a      	strh	r2, [r3, #0]
 80020a6:	e00d      	b.n	80020c4 <indexColumn+0x58>
    else if(*currentColumn == 2) *currentColumn = *currentColumn -1;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d108      	bne.n	80020c4 <indexColumn+0x58>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b21a      	sxth	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	801a      	strh	r2, [r3, #0]
    if(*currentColumn <0)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da03      	bge.n	80020d6 <indexColumn+0x6a>
    {
        *currentColumn = size;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	b21a      	sxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	801a      	strh	r2, [r3, #0]
    }
}
 80020d6:	bf00      	nop
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <milisecondsTime>:

unsigned long milisecondsTime(unsigned char* ptr_inputTime)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
	struct tm* time = ptr_inputTime;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]
	unsigned long int msTime = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]

	msTime = time->tm_hour*3600;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	60bb      	str	r3, [r7, #8]
	msTime += time->tm_min*60;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4413      	add	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
	msTime += time->tm_sec;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4413      	add	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
	msTime = msTime*1000;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	60bb      	str	r3, [r7, #8]

	return msTime;
 800212c:	68bb      	ldr	r3, [r7, #8]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <stringToInt>:
    //fazer a convers�o de hhmmss para ms
    return intTime;
}

unsigned int stringToInt(unsigned char* string)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    char *ptr;
    unsigned int x = strtol(string,&ptr,10);
 8002140:	f107 0308 	add.w	r3, r7, #8
 8002144:	220a      	movs	r2, #10
 8002146:	4619      	mov	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f007 ff3b 	bl	8009fc4 <strtol>
 800214e:	4603      	mov	r3, r0
 8002150:	60fb      	str	r3, [r7, #12]
    return x;
 8002152:	68fb      	ldr	r3, [r7, #12]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <indexMass>:
    float x = strtof(string,NULL);
    return x;
}

unsigned char indexMass(short* index)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    *index = *index -1;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29b      	uxth	r3, r3
 8002170:	b21a      	sxth	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	801a      	strh	r2, [r3, #0]
    if(*index == 3) *index = *index -1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d108      	bne.n	8002192 <indexMass+0x36>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29b      	uxth	r3, r3
 800218c:	b21a      	sxth	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002198:	2b00      	cmp	r3, #0
 800219a:	da02      	bge.n	80021a2 <indexMass+0x46>
    {
        *index = 4;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2204      	movs	r2, #4
 80021a0:	801a      	strh	r2, [r3, #0]
    }
}
 80021a2:	bf00      	nop
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <indexChange>:

unsigned char indexChange(short* index, unsigned char size)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70fb      	strb	r3, [r7, #3]
    *index = *index - 1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da03      	bge.n	80021de <indexChange+0x30>
    {
        *index = size;
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	b21a      	sxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	801a      	strh	r2, [r3, #0]
    }
}
 80021de:	bf00      	nop
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
	...

080021ec <getAltMinString>:

unsigned char* getAltMinString()
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af02      	add	r7, sp, #8
    unsigned char* altMinArray = getAltMinArray();
 80021f2:	f7ff fd0f 	bl	8001c14 <getAltMinArray>
 80021f6:	6078      	str	r0, [r7, #4]
    sprintf(altMinString,"%d%d%d",altMinArray[0],altMinArray[1],altMinArray[2]);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3301      	adds	r3, #1
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3302      	adds	r3, #2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	460b      	mov	r3, r1
 8002210:	4904      	ldr	r1, [pc, #16]	; (8002224 <getAltMinString+0x38>)
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <getAltMinString+0x3c>)
 8002214:	f007 f900 	bl	8009418 <siprintf>
    return altMinString;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <getAltMinString+0x3c>)
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	0800b708 	.word	0x0800b708
 8002228:	200003cc 	.word	0x200003cc

0800222c <getAltMaxString>:

unsigned char* getAltMaxString()
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af02      	add	r7, sp, #8
    unsigned char* altMaxArray = getAltMaxArray();
 8002232:	f7ff fcf9 	bl	8001c28 <getAltMaxArray>
 8002236:	6078      	str	r0, [r7, #4]
    sprintf(altMaxString,"%d%d%d",altMaxArray[0],altMaxArray[1],altMaxArray[2]);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3301      	adds	r3, #1
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3302      	adds	r3, #2
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	460b      	mov	r3, r1
 8002250:	4904      	ldr	r1, [pc, #16]	; (8002264 <getAltMaxString+0x38>)
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <getAltMaxString+0x3c>)
 8002254:	f007 f8e0 	bl	8009418 <siprintf>
    return altMaxString;
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <getAltMaxString+0x3c>)
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	0800b708 	.word	0x0800b708
 8002268:	200003d8 	.word	0x200003d8

0800226c <getNumSaltosString>:

unsigned char* getNumSaltosString()
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af02      	add	r7, sp, #8
    unsigned char* numSaltosArray = getNumSaltosArray();
 8002272:	f7ff fce3 	bl	8001c3c <getNumSaltosArray>
 8002276:	6078      	str	r0, [r7, #4]
    sprintf(numSaltosString,"%d%d%d",numSaltosArray[0],numSaltosArray[1],numSaltosArray[2]);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3301      	adds	r3, #1
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3302      	adds	r3, #2
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	460b      	mov	r3, r1
 8002290:	4904      	ldr	r1, [pc, #16]	; (80022a4 <getNumSaltosString+0x38>)
 8002292:	4805      	ldr	r0, [pc, #20]	; (80022a8 <getNumSaltosString+0x3c>)
 8002294:	f007 f8c0 	bl	8009418 <siprintf>
    return numSaltosString;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <getNumSaltosString+0x3c>)
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	0800b708 	.word	0x0800b708
 80022a8:	200003e4 	.word	0x200003e4

080022ac <getTypeJumpString>:

unsigned char* getTypeJumpString()
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
    unsigned char* typeJumpArray = getTypeJumpArray();
 80022b2:	f7ff fccd 	bl	8001c50 <getTypeJumpArray>
 80022b6:	6078      	str	r0, [r7, #4]
    sprintf(tipoSaltoString,"%d",typeJumpArray[0]);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	4904      	ldr	r1, [pc, #16]	; (80022d0 <getTypeJumpString+0x24>)
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <getTypeJumpString+0x28>)
 80022c2:	f007 f8a9 	bl	8009418 <siprintf>
    return tipoSaltoString;
 80022c6:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <getTypeJumpString+0x28>)
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	0800b710 	.word	0x0800b710
 80022d4:	200003f0 	.word	0x200003f0

080022d8 <getAltDJString>:

unsigned char* getAltDJString()
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
    unsigned char* altDJArray = getAltDJArray();
 80022de:	f7ff fcc1 	bl	8001c64 <getAltDJArray>
 80022e2:	6078      	str	r0, [r7, #4]
    sprintf(altDJString,"%d%d%",altDJArray[0],altDJArray[1]);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3301      	adds	r3, #1
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4904      	ldr	r1, [pc, #16]	; (8002304 <getAltDJString+0x2c>)
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <getAltDJString+0x30>)
 80022f4:	f007 f890 	bl	8009418 <siprintf>
    return altDJString;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <getAltDJString+0x30>)
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	0800b714 	.word	0x0800b714
 8002308:	200003fc 	.word	0x200003fc

0800230c <getNumSeriesString>:

unsigned char* getNumSeriesString()
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af02      	add	r7, sp, #8
    unsigned char* numSeriesArray = getNumSeriesArray();
 8002312:	f7ff fcb1 	bl	8001c78 <getNumSeriesArray>
 8002316:	6078      	str	r0, [r7, #4]
    sprintf(numSeriesString,"%d%d%d",numSeriesArray[0],numSeriesArray[1],numSeriesArray[2]);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3301      	adds	r3, #1
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3302      	adds	r3, #2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	460b      	mov	r3, r1
 8002330:	4904      	ldr	r1, [pc, #16]	; (8002344 <getNumSeriesString+0x38>)
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <getNumSeriesString+0x3c>)
 8002334:	f007 f870 	bl	8009418 <siprintf>
    return numSeriesString;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <getNumSeriesString+0x3c>)
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	0800b708 	.word	0x0800b708
 8002348:	20000408 	.word	0x20000408

0800234c <getIntervalSeriesString>:

unsigned char* getIntervalSeriesString()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af02      	add	r7, sp, #8
    unsigned char* intervalSeriesArray = getIntervalSeriesArray();
 8002352:	f7ff fc9b 	bl	8001c8c <getIntervalSeriesArray>
 8002356:	6078      	str	r0, [r7, #4]
    sprintf(interSeriesString,"%d%d%d",intervalSeriesArray[0],intervalSeriesArray[1],intervalSeriesArray[2]);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3301      	adds	r3, #1
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3302      	adds	r3, #2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	460b      	mov	r3, r1
 8002370:	4904      	ldr	r1, [pc, #16]	; (8002384 <getIntervalSeriesString+0x38>)
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <getIntervalSeriesString+0x3c>)
 8002374:	f007 f850 	bl	8009418 <siprintf>
    return interSeriesString;
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <getIntervalSeriesString+0x3c>)
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	0800b708 	.word	0x0800b708
 8002388:	20000414 	.word	0x20000414

0800238c <getMassString>:

unsigned char* getMassString()
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af02      	add	r7, sp, #8
    unsigned char* massArray = getMassArray();
 8002392:	f7ff fc2b 	bl	8001bec <getMassArray>
 8002396:	6078      	str	r0, [r7, #4]
    sprintf(massString,"%d%d%d.%d",massArray[0],massArray[1],massArray[2],massArray[4]);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3301      	adds	r3, #1
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3302      	adds	r3, #2
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3304      	adds	r3, #4
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	9200      	str	r2, [sp, #0]
 80023b8:	4603      	mov	r3, r0
 80023ba:	460a      	mov	r2, r1
 80023bc:	4904      	ldr	r1, [pc, #16]	; (80023d0 <getMassString+0x44>)
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <getMassString+0x48>)
 80023c0:	f007 f82a 	bl	8009418 <siprintf>
    //massArray[3] ficou representando o "." no display
    return massString;
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <getMassString+0x48>)
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	0800b71c 	.word	0x0800b71c
 80023d4:	200003b4 	.word	0x200003b4

080023d8 <getOverMassString>:

unsigned char* getOverMassString()
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af02      	add	r7, sp, #8
    unsigned char* overMassArray = getOverMassArray();
 80023de:	f7ff fc0f 	bl	8001c00 <getOverMassArray>
 80023e2:	6078      	str	r0, [r7, #4]
    sprintf(overMassString,"%d%d%d.%d",overMassArray[0],overMassArray[1],overMassArray[2],overMassArray[4]);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3301      	adds	r3, #1
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3302      	adds	r3, #2
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	9200      	str	r2, [sp, #0]
 8002404:	4603      	mov	r3, r0
 8002406:	460a      	mov	r2, r1
 8002408:	4904      	ldr	r1, [pc, #16]	; (800241c <getOverMassString+0x44>)
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <getOverMassString+0x48>)
 800240c:	f007 f804 	bl	8009418 <siprintf>
    return overMassString;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <getOverMassString+0x48>)
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	0800b71c 	.word	0x0800b71c
 8002420:	200003c0 	.word	0x200003c0

08002424 <getNumTestString>:

unsigned char* getNumTestString()
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af02      	add	r7, sp, #8
    unsigned char* numTestArray = getNumTestArray();
 800242a:	f7ff fc39 	bl	8001ca0 <getNumTestArray>
 800242e:	6078      	str	r0, [r7, #4]
    sprintf(numTestString,"%d%d%d",numTestArray[0],numTestArray[1],numTestArray[2]);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3301      	adds	r3, #1
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3302      	adds	r3, #2
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	460b      	mov	r3, r1
 8002448:	4904      	ldr	r1, [pc, #16]	; (800245c <getNumTestString+0x38>)
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <getNumTestString+0x3c>)
 800244c:	f006 ffe4 	bl	8009418 <siprintf>
    return numTestString;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <getNumTestString+0x3c>)
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	0800b708 	.word	0x0800b708
 8002460:	20000420 	.word	0x20000420

08002464 <getEraseTestString>:

unsigned char* getEraseTestString()
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
    unsigned char* eraseTestArray = getEraseTestArray();
 800246a:	f7ff fc23 	bl	8001cb4 <getEraseTestArray>
 800246e:	4603      	mov	r3, r0
 8002470:	607b      	str	r3, [r7, #4]
    sprintf(eraseTestString,"%d",eraseTestArray[0]);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	4904      	ldr	r1, [pc, #16]	; (800248c <getEraseTestString+0x28>)
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <getEraseTestString+0x2c>)
 800247c:	f006 ffcc 	bl	8009418 <siprintf>
    return eraseTestString;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <getEraseTestString+0x2c>)
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	0800b710 	.word	0x0800b710
 8002490:	2000042c 	.word	0x2000042c

08002494 <param_1_toString>:
	static unsigned char saveResultString[50];
	return saveResultString;
}

unsigned int* param_1_toString(unsigned char* string)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    static unsigned char result[TEST_SIZE];
    sprintf(result,"%d",*string);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4904      	ldr	r1, [pc, #16]	; (80024b4 <param_1_toString+0x20>)
 80024a4:	4804      	ldr	r0, [pc, #16]	; (80024b8 <param_1_toString+0x24>)
 80024a6:	f006 ffb7 	bl	8009418 <siprintf>
    return result;
 80024aa:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <param_1_toString+0x24>)
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	0800b710 	.word	0x0800b710
 80024b8:	20000438 	.word	0x20000438

080024bc <param_2_toString>:

unsigned int* param_2_toString(unsigned char* string)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
    static unsigned char result[TEST_SIZE];
    sprintf(result,"%d",*string);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4904      	ldr	r1, [pc, #16]	; (80024dc <param_2_toString+0x20>)
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <param_2_toString+0x24>)
 80024ce:	f006 ffa3 	bl	8009418 <siprintf>
    return result;
 80024d2:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <param_2_toString+0x24>)
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	0800b710 	.word	0x0800b710
 80024e0:	20000440 	.word	0x20000440

080024e4 <param_3_toString>:

unsigned int* param_3_toString(unsigned char* string)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
    static unsigned char result[TEST_SIZE];
    sprintf(result,"%d",*string);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4904      	ldr	r1, [pc, #16]	; (8002504 <param_3_toString+0x20>)
 80024f4:	4804      	ldr	r0, [pc, #16]	; (8002508 <param_3_toString+0x24>)
 80024f6:	f006 ff8f 	bl	8009418 <siprintf>
    return result;
 80024fa:	4b03      	ldr	r3, [pc, #12]	; (8002508 <param_3_toString+0x24>)
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	0800b710 	.word	0x0800b710
 8002508:	20000448 	.word	0x20000448

0800250c <setUserAltMin>:

unsigned char setUserAltMin(unsigned char* idx)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    unsigned char* altMinArray = getAltMinArray();
 8002514:	f7ff fb7e 	bl	8001c14 <getAltMinArray>
 8002518:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	72fb      	strb	r3, [r7, #11]
    altMinArray[index] = altMinArray[index]+1;
 8002520:	7afb      	ldrb	r3, [r7, #11]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4413      	add	r3, r2
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	7afb      	ldrb	r3, [r7, #11]
 800252a:	68f9      	ldr	r1, [r7, #12]
 800252c:	440b      	add	r3, r1
 800252e:	3201      	adds	r2, #1
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
    if(altMinArray[index]>9) altMinArray[index]= 0;
 8002534:	7afb      	ldrb	r3, [r7, #11]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b09      	cmp	r3, #9
 800253e:	d904      	bls.n	800254a <setUserAltMin+0x3e>
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4413      	add	r3, r2
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
}
 800254a:	bf00      	nop
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <setUserErase>:

unsigned char setUserErase(unsigned char* idx)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
    unsigned char* eraseArray = getEraseTestArray();
 800255c:	f7ff fbaa 	bl	8001cb4 <getEraseTestArray>
 8002560:	4603      	mov	r3, r0
 8002562:	60fb      	str	r3, [r7, #12]
    unsigned char index = *idx;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	72fb      	strb	r3, [r7, #11]
    eraseArray[index] = eraseArray[index]+1;
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	7afb      	ldrb	r3, [r7, #11]
 8002574:	68f9      	ldr	r1, [r7, #12]
 8002576:	440b      	add	r3, r1
 8002578:	3201      	adds	r2, #1
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]
    if(eraseArray[index]>9) eraseArray[index]= 0;
 800257e:	7afb      	ldrb	r3, [r7, #11]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b09      	cmp	r3, #9
 8002588:	d904      	bls.n	8002594 <setUserErase+0x40>
 800258a:	7afb      	ldrb	r3, [r7, #11]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <setUserAltMax>:

unsigned char setUserAltMax(unsigned char* idx)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
    unsigned char* altMaxArray = getAltMaxArray();
 80025a6:	f7ff fb3f 	bl	8001c28 <getAltMaxArray>
 80025aa:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	72fb      	strb	r3, [r7, #11]
    altMaxArray[index] = altMaxArray[index]+1;
 80025b2:	7afb      	ldrb	r3, [r7, #11]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	7afb      	ldrb	r3, [r7, #11]
 80025bc:	68f9      	ldr	r1, [r7, #12]
 80025be:	440b      	add	r3, r1
 80025c0:	3201      	adds	r2, #1
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
    if(altMaxArray[index]>9) altMaxArray[index]= 0;
 80025c6:	7afb      	ldrb	r3, [r7, #11]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4413      	add	r3, r2
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b09      	cmp	r3, #9
 80025d0:	d904      	bls.n	80025dc <setUserAltMax+0x3e>
 80025d2:	7afb      	ldrb	r3, [r7, #11]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
}
 80025dc:	bf00      	nop
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <setUserNumSaltos>:

unsigned char setUserNumSaltos(unsigned char* idx)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
    unsigned char* numSaltosArray = getNumSaltosArray();
 80025ee:	f7ff fb25 	bl	8001c3c <getNumSaltosArray>
 80025f2:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	72fb      	strb	r3, [r7, #11]
    numSaltosArray[index] = numSaltosArray[index]+1;
 80025fa:	7afb      	ldrb	r3, [r7, #11]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4413      	add	r3, r2
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	7afb      	ldrb	r3, [r7, #11]
 8002604:	68f9      	ldr	r1, [r7, #12]
 8002606:	440b      	add	r3, r1
 8002608:	3201      	adds	r2, #1
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]
    if(numSaltosArray[index]>9) numSaltosArray[index]= 0;
 800260e:	7afb      	ldrb	r3, [r7, #11]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b09      	cmp	r3, #9
 8002618:	d904      	bls.n	8002624 <setUserNumSaltos+0x3e>
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
}
 8002624:	bf00      	nop
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <setUserTypeJump>:

unsigned char setUserTypeJump(unsigned char* idx)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
    unsigned char* typeJumpArray = getTypeJumpArray();
 8002636:	f7ff fb0b 	bl	8001c50 <getTypeJumpArray>
 800263a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	72fb      	strb	r3, [r7, #11]
    typeJumpArray[index] = typeJumpArray[index]+1;
 8002642:	7afb      	ldrb	r3, [r7, #11]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	7afb      	ldrb	r3, [r7, #11]
 800264c:	68f9      	ldr	r1, [r7, #12]
 800264e:	440b      	add	r3, r1
 8002650:	3201      	adds	r2, #1
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]
    if(typeJumpArray[index]>3) typeJumpArray[index]= 0;
 8002656:	7afb      	ldrb	r3, [r7, #11]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d904      	bls.n	800266c <setUserTypeJump+0x3e>
 8002662:	7afb      	ldrb	r3, [r7, #11]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
}
 800266c:	bf00      	nop
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <setUserAltDJ>:

unsigned char setUserAltDJ(unsigned char* idx)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
    unsigned char* AltDJArray = getAltDJArray();
 800267e:	f7ff faf1 	bl	8001c64 <getAltDJArray>
 8002682:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	72fb      	strb	r3, [r7, #11]
    AltDJArray[index] = AltDJArray[index]+1;
 800268a:	7afb      	ldrb	r3, [r7, #11]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4413      	add	r3, r2
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	7afb      	ldrb	r3, [r7, #11]
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	440b      	add	r3, r1
 8002698:	3201      	adds	r2, #1
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]
    if(AltDJArray[index]>9) AltDJArray[index]= 0;
 800269e:	7afb      	ldrb	r3, [r7, #11]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b09      	cmp	r3, #9
 80026a8:	d904      	bls.n	80026b4 <setUserAltDJ+0x3e>
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <setUserNumSeries>:

unsigned char setUserNumSeries(unsigned char* idx)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
    unsigned char* numSeriesArray = getNumSeriesArray();
 80026c6:	f7ff fad7 	bl	8001c78 <getNumSeriesArray>
 80026ca:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	72fb      	strb	r3, [r7, #11]
    numSeriesArray[index] = numSeriesArray[index]+1;
 80026d2:	7afb      	ldrb	r3, [r7, #11]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	7afb      	ldrb	r3, [r7, #11]
 80026dc:	68f9      	ldr	r1, [r7, #12]
 80026de:	440b      	add	r3, r1
 80026e0:	3201      	adds	r2, #1
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
    if(numSeriesArray[index]>9) numSeriesArray[index]= 0;
 80026e6:	7afb      	ldrb	r3, [r7, #11]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b09      	cmp	r3, #9
 80026f0:	d904      	bls.n	80026fc <setUserNumSeries+0x3e>
 80026f2:	7afb      	ldrb	r3, [r7, #11]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
}
 80026fc:	bf00      	nop
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <setUserIntervalSeries>:

unsigned char setUserIntervalSeries(unsigned char* idx)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
    unsigned char* IntervalSeriesArray = getIntervalSeriesArray();
 800270e:	f7ff fabd 	bl	8001c8c <getIntervalSeriesArray>
 8002712:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	72fb      	strb	r3, [r7, #11]
    IntervalSeriesArray[index] = IntervalSeriesArray[index]+1;
 800271a:	7afb      	ldrb	r3, [r7, #11]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	7afb      	ldrb	r3, [r7, #11]
 8002724:	68f9      	ldr	r1, [r7, #12]
 8002726:	440b      	add	r3, r1
 8002728:	3201      	adds	r2, #1
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
    if(IntervalSeriesArray[index]>9) IntervalSeriesArray[index]= 0;
 800272e:	7afb      	ldrb	r3, [r7, #11]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b09      	cmp	r3, #9
 8002738:	d904      	bls.n	8002744 <setUserIntervalSeries+0x3e>
 800273a:	7afb      	ldrb	r3, [r7, #11]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4413      	add	r3, r2
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <setUserMass>:

unsigned char setUserMass(unsigned char* idx)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
    unsigned char* massArray = getMassArray();
 8002756:	f7ff fa49 	bl	8001bec <getMassArray>
 800275a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	72fb      	strb	r3, [r7, #11]
    massArray[index] = massArray[index]+1;
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	7afb      	ldrb	r3, [r7, #11]
 800276c:	68f9      	ldr	r1, [r7, #12]
 800276e:	440b      	add	r3, r1
 8002770:	3201      	adds	r2, #1
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
    if(massArray[index]>9) massArray[index]= 0;
 8002776:	7afb      	ldrb	r3, [r7, #11]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b09      	cmp	r3, #9
 8002780:	d904      	bls.n	800278c <setUserMass+0x3e>
 8002782:	7afb      	ldrb	r3, [r7, #11]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
}
 800278c:	bf00      	nop
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <setUserOverMass>:

unsigned char setUserOverMass(unsigned char* idx)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
    unsigned char* overMassArray = getOverMassArray();
 800279e:	f7ff fa2f 	bl	8001c00 <getOverMassArray>
 80027a2:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	72fb      	strb	r3, [r7, #11]
    overMassArray[index] = overMassArray[index]+1;
 80027aa:	7afb      	ldrb	r3, [r7, #11]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	7afb      	ldrb	r3, [r7, #11]
 80027b4:	68f9      	ldr	r1, [r7, #12]
 80027b6:	440b      	add	r3, r1
 80027b8:	3201      	adds	r2, #1
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]
    if(overMassArray[index]>9) overMassArray[index]= 0;
 80027be:	7afb      	ldrb	r3, [r7, #11]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b09      	cmp	r3, #9
 80027c8:	d904      	bls.n	80027d4 <setUserOverMass+0x3e>
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
}
 80027d4:	bf00      	nop
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <setUserNumTest>:

unsigned char setUserNumTest(unsigned char* idx)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
    unsigned char* numTestArray = getNumTestArray();
 80027e6:	f7ff fa5b 	bl	8001ca0 <getNumTestArray>
 80027ea:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	72fb      	strb	r3, [r7, #11]
    numTestArray[index] = numTestArray[index]+1;
 80027f2:	7afb      	ldrb	r3, [r7, #11]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	440b      	add	r3, r1
 8002800:	3201      	adds	r2, #1
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]
    if(numTestArray[index]>9) numTestArray[index]= 0;
 8002806:	7afb      	ldrb	r3, [r7, #11]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b09      	cmp	r3, #9
 8002810:	d904      	bls.n	800281c <setUserNumTest+0x3e>
 8002812:	7afb      	ldrb	r3, [r7, #11]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
}
 800281c:	bf00      	nop
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <setIntervalSaltosTime>:

unsigned char* setIntervalSaltosTime(unsigned char* configInputTimer)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	unsigned char index = *configInputTimer + 3;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	3303      	adds	r3, #3
 8002836:	73fb      	strb	r3, [r7, #15]
	struct tm* insertTime = getIntervalTimeStruct();
 8002838:	f7ff f9ce 	bl	8001bd8 <getIntervalTimeStruct>
 800283c:	4603      	mov	r3, r0
 800283e:	60bb      	str	r3, [r7, #8]

	switch(index)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	3b03      	subs	r3, #3
 8002844:	2b04      	cmp	r3, #4
 8002846:	d84a      	bhi.n	80028de <setIntervalSaltosTime+0xb6>
 8002848:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <setIntervalSaltosTime+0x28>)
 800284a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284e:	bf00      	nop
 8002850:	08002865 	.word	0x08002865
 8002854:	08002881 	.word	0x08002881
 8002858:	080028df 	.word	0x080028df
 800285c:	0800289b 	.word	0x0800289b
 8002860:	080028b7 	.word	0x080028b7
	{
		case DEZENA_M:
			insertTime->tm_min = insertTime->tm_min+10;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f103 020a 	add.w	r2, r3, #10
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b3c      	cmp	r3, #60	; 0x3c
 8002876:	dd2b      	ble.n	80028d0 <setIntervalSaltosTime+0xa8>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2200      	movs	r2, #0
 800287c:	605a      	str	r2, [r3, #4]
		break;
 800287e:	e027      	b.n	80028d0 <setIntervalSaltosTime+0xa8>

		case UNIDADE_M:
			insertTime->tm_min = insertTime->tm_min+1;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b3c      	cmp	r3, #60	; 0x3c
 8002890:	dd20      	ble.n	80028d4 <setIntervalSaltosTime+0xac>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2200      	movs	r2, #0
 8002896:	605a      	str	r2, [r3, #4]
		break;
 8002898:	e01c      	b.n	80028d4 <setIntervalSaltosTime+0xac>

		case DEZENA_S:
			insertTime->tm_sec =insertTime->tm_sec+10 ;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f103 020a 	add.w	r2, r3, #10
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b3c      	cmp	r3, #60	; 0x3c
 80028ac:	dd14      	ble.n	80028d8 <setIntervalSaltosTime+0xb0>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

		break;
 80028b4:	e010      	b.n	80028d8 <setIntervalSaltosTime+0xb0>

		case UNIDADE_S:
			insertTime->tm_sec =insertTime->tm_sec+1 ;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b3c      	cmp	r3, #60	; 0x3c
 80028c6:	dd09      	ble.n	80028dc <setIntervalSaltosTime+0xb4>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
		break;
 80028ce:	e005      	b.n	80028dc <setIntervalSaltosTime+0xb4>
		break;
 80028d0:	bf00      	nop
 80028d2:	e004      	b.n	80028de <setIntervalSaltosTime+0xb6>
		break;
 80028d4:	bf00      	nop
 80028d6:	e002      	b.n	80028de <setIntervalSaltosTime+0xb6>
		break;
 80028d8:	bf00      	nop
 80028da:	e000      	b.n	80028de <setIntervalSaltosTime+0xb6>
		break;
 80028dc:	bf00      	nop
	}

}
 80028de:	bf00      	nop
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <setUserTime>:

unsigned char* setUserTime(unsigned char* inputUserTimer)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
    unsigned char index = *inputUserTimer;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	73fb      	strb	r3, [r7, #15]
    struct tm* insertTime = getTimeStruct();
 80028f6:	f7ff f965 	bl	8001bc4 <getTimeStruct>
 80028fa:	60b8      	str	r0, [r7, #8]
    static unsigned char timeString[9];

    switch(index)
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b07      	cmp	r3, #7
 8002900:	f200 8089 	bhi.w	8002a16 <setUserTime+0x12e>
 8002904:	a201      	add	r2, pc, #4	; (adr r2, 800290c <setUserTime+0x24>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	0800292d 	.word	0x0800292d
 8002910:	08002955 	.word	0x08002955
 8002914:	08002a17 	.word	0x08002a17
 8002918:	0800297b 	.word	0x0800297b
 800291c:	080029a3 	.word	0x080029a3
 8002920:	08002a17 	.word	0x08002a17
 8002924:	080029c9 	.word	0x080029c9
 8002928:	080029f1 	.word	0x080029f1
    {
        case DEZENA_H:
            insertTime->tm_hour = insertTime->tm_hour+10;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f103 020a 	add.w	r2, r3, #10
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b17      	cmp	r3, #23
 800293e:	dd02      	ble.n	8002946 <setUserTime+0x5e>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	4a35      	ldr	r2, [pc, #212]	; (8002a20 <setUserTime+0x138>)
 800294a:	2109      	movs	r1, #9
 800294c:	4835      	ldr	r0, [pc, #212]	; (8002a24 <setUserTime+0x13c>)
 800294e:	f007 fab9 	bl	8009ec4 <strftime>
        break;
 8002952:	e060      	b.n	8002a16 <setUserTime+0x12e>

        case UNIDADE_H:
            insertTime->tm_hour = insertTime->tm_hour+1;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b17      	cmp	r3, #23
 8002964:	dd02      	ble.n	800296c <setUserTime+0x84>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4a2c      	ldr	r2, [pc, #176]	; (8002a20 <setUserTime+0x138>)
 8002970:	2109      	movs	r1, #9
 8002972:	482c      	ldr	r0, [pc, #176]	; (8002a24 <setUserTime+0x13c>)
 8002974:	f007 faa6 	bl	8009ec4 <strftime>
        break;
 8002978:	e04d      	b.n	8002a16 <setUserTime+0x12e>

        case DEZENA_M:
            insertTime->tm_min = insertTime->tm_min+10;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f103 020a 	add.w	r2, r3, #10
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b3c      	cmp	r3, #60	; 0x3c
 800298c:	dd02      	ble.n	8002994 <setUserTime+0xac>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2200      	movs	r2, #0
 8002992:	605a      	str	r2, [r3, #4]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <setUserTime+0x138>)
 8002998:	2109      	movs	r1, #9
 800299a:	4822      	ldr	r0, [pc, #136]	; (8002a24 <setUserTime+0x13c>)
 800299c:	f007 fa92 	bl	8009ec4 <strftime>
        break;
 80029a0:	e039      	b.n	8002a16 <setUserTime+0x12e>

        case UNIDADE_M:
        	insertTime->tm_min = insertTime->tm_min+1;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b3c      	cmp	r3, #60	; 0x3c
 80029b2:	dd02      	ble.n	80029ba <setUserTime+0xd2>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2200      	movs	r2, #0
 80029b8:	605a      	str	r2, [r3, #4]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <setUserTime+0x138>)
 80029be:	2109      	movs	r1, #9
 80029c0:	4818      	ldr	r0, [pc, #96]	; (8002a24 <setUserTime+0x13c>)
 80029c2:	f007 fa7f 	bl	8009ec4 <strftime>
        break;
 80029c6:	e026      	b.n	8002a16 <setUserTime+0x12e>

        case DEZENA_S:
            insertTime->tm_sec =insertTime->tm_sec+10 ;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f103 020a 	add.w	r2, r3, #10
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b3c      	cmp	r3, #60	; 0x3c
 80029da:	dd02      	ble.n	80029e2 <setUserTime+0xfa>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <setUserTime+0x138>)
 80029e6:	2109      	movs	r1, #9
 80029e8:	480e      	ldr	r0, [pc, #56]	; (8002a24 <setUserTime+0x13c>)
 80029ea:	f007 fa6b 	bl	8009ec4 <strftime>
        break;
 80029ee:	e012      	b.n	8002a16 <setUserTime+0x12e>

        case UNIDADE_S:
            insertTime->tm_sec =insertTime->tm_sec+1 ;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b3c      	cmp	r3, #60	; 0x3c
 8002a00:	dd02      	ble.n	8002a08 <setUserTime+0x120>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <setUserTime+0x138>)
 8002a0c:	2109      	movs	r1, #9
 8002a0e:	4805      	ldr	r0, [pc, #20]	; (8002a24 <setUserTime+0x13c>)
 8002a10:	f007 fa58 	bl	8009ec4 <strftime>
        break;
 8002a14:	bf00      	nop
    }
}
 8002a16:	bf00      	nop
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	0800b728 	.word	0x0800b728
 8002a24:	20000450 	.word	0x20000450

08002a28 <alturaToTempo>:

unsigned int alturaToTempo(unsigned int altura)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	unsigned int tempo = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
	unsigned int nominator = 8 * altura;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	613b      	str	r3, [r7, #16]
	unsigned int  g = 981; // cm/s^2
 8002a3a:	f240 33d5 	movw	r3, #981	; 0x3d5
 8002a3e:	60fb      	str	r3, [r7, #12]
	float relation =  nominator/g;
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe f8d3 	bl	8000bf4 <__aeabi_ui2f>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	60bb      	str	r3, [r7, #8]
	tempo = sqrt(relation);
 8002a52:	68b8      	ldr	r0, [r7, #8]
 8002a54:	f7fd fcf0 	bl	8000438 <__aeabi_f2d>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f008 fd56 	bl	800b510 <sqrt>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f7fd ffec 	bl	8000a48 <__aeabi_d2uiz>
 8002a70:	4603      	mov	r3, r0
 8002a72:	617b      	str	r3, [r7, #20]
	tempo = tempo*1000;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	617b      	str	r3, [r7, #20]
	return tempo;
 8002a80:	697b      	ldr	r3, [r7, #20]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <updateUserMsg>:
#include "time.h"
#include "stdlib.h"


unsigned char updateUserMsg(unsigned char col, unsigned char linha, unsigned char *userMessage, unsigned char* status)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60ba      	str	r2, [r7, #8]
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	4603      	mov	r3, r0
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	73bb      	strb	r3, [r7, #14]
	if(*status == IDDLE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10b      	bne.n	8002abc <updateUserMsg+0x32>
	{
	    printDataDisplay(col,linha,userMessage);
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	7bb9      	ldrb	r1, [r7, #14]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 ff26 	bl	80038fc <printDataDisplay>
		*status = PRINTED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(250);
 8002ab6:	20fa      	movs	r0, #250	; 0xfa
 8002ab8:	f003 f94c 	bl	8005d54 <HAL_Delay>
	}
}
 8002abc:	bf00      	nop
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <readyUserInterface>:

unsigned char readyUserInterface(unsigned char* displayStatus,unsigned char* cursorPosition)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
	statusUserInterface(displayStatus);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f80c 	bl	8002aee <statusUserInterface>
	resetKeyPressed();
 8002ad6:	f002 f999 	bl	8004e0c <resetKeyPressed>
	resetCursorInterface(cursorPosition);
 8002ada:	6838      	ldr	r0, [r7, #0]
 8002adc:	f000 f814 	bl	8002b08 <resetCursorInterface>
	eraseDataDisplay();
 8002ae0:	f000 ff1f 	bl	8003922 <eraseDataDisplay>
}
 8002ae4:	bf00      	nop
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <statusUserInterface>:

unsigned char statusUserInterface(unsigned char* displayStatus)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
	*displayStatus = IDDLE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
}
 8002afc:	bf00      	nop
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <resetCursorInterface>:
	HW_UPDATE_DATA(actualposition,linha);
	return actualposition;
}

unsigned char resetCursorInterface(unsigned char* cursorPosition)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	cursorPosition[0] = 0;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]
	cursorPosition[1] = 0;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
	...

08002b2c <exportStateMachine>:
        struct dataInsert menuInsert;
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
unsigned char exportStateMachine(struct Menu* subMenu)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08c      	sub	sp, #48	; 0x30
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuExport = subMenu;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	623b      	str	r3, [r7, #32]
    unsigned char key = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    short index = 2;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	81fb      	strh	r3, [r7, #14]
    unsigned char indexTest = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	77fb      	strb	r3, [r7, #31]
    unsigned char testSamples = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    unsigned char selectedUserTest=0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	77bb      	strb	r3, [r7, #30]
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    struct results* ptr_structExportResult;
    unsigned char dataVerify;
    unsigned char cursorPosition[2] = {0,0};
 8002b50:	2300      	movs	r3, #0
 8002b52:	81bb      	strh	r3, [r7, #12]
    unsigned char displayUpdateStatus = IDDLE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	72fb      	strb	r3, [r7, #11]
    while(key != MENU)
 8002b58:	bf00      	nop
 8002b5a:	e200      	b.n	8002f5e <exportStateMachine+0x432>
    {
        switch(subMenuExport->menuState)
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	78db      	ldrb	r3, [r3, #3]
 8002b60:	2b06      	cmp	r3, #6
 8002b62:	f200 81fc 	bhi.w	8002f5e <exportStateMachine+0x432>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <exportStateMachine+0x40>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002b89 	.word	0x08002b89
 8002b70:	08002b99 	.word	0x08002b99
 8002b74:	08002bcd 	.word	0x08002bcd
 8002b78:	08002cd9 	.word	0x08002cd9
 8002b7c:	08002d8f 	.word	0x08002d8f
 8002b80:	08002c53 	.word	0x08002c53
 8002b84:	08002f29 	.word	0x08002f29
        {
            case IDDLE:
                subMenuExport->menuState = getNextSub(VERIFICA_COMM);
 8002b88:	2001      	movs	r0, #1
 8002b8a:	f001 fb87 	bl	800429c <getNextSub>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	70da      	strb	r2, [r3, #3]
            break;
 8002b96:	e1e2      	b.n	8002f5e <exportStateMachine+0x432>

            case VERIFICA_COMM:
                //funcao para habilitar comunicacao
            	startCOMM(); //verificar se nao preciso deixar uma flag de comm no data.c para acessar o valor dela
 8002b98:	f000 feed 	bl	8003976 <startCOMM>
            	// e comparar para verificar se a comm já está ligada antes de liga-la novamente.
                updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 8002b9c:	4bda      	ldr	r3, [pc, #872]	; (8002f08 <exportStateMachine+0x3dc>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	f107 030b 	add.w	r3, r7, #11
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7ff ff6f 	bl	8002a8a <updateUserMsg>
                subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8002bac:	2002      	movs	r0, #2
 8002bae:	f001 fb75 	bl	800429c <getNextSub>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	70da      	strb	r2, [r3, #3]
                readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002bba:	f107 020c 	add.w	r2, r7, #12
 8002bbe:	f107 030b 	add.w	r3, r7, #11
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff7e 	bl	8002ac6 <readyUserInterface>
            break;
 8002bca:	e1c8      	b.n	8002f5e <exportStateMachine+0x432>

            case EXPORTAR_UNITARIO:
                updateUserMsg(0,0,exportunitUserMsg,&displayUpdateStatus);
 8002bcc:	4bcf      	ldr	r3, [pc, #828]	; (8002f0c <exportStateMachine+0x3e0>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	f107 030b 	add.w	r3, r7, #11
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f7ff ff57 	bl	8002a8a <updateUserMsg>
                key = getKeyPressed();
 8002bdc:	f002 f90a 	bl	8004df4 <getKeyPressed>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if(key == AVANCAR)
 8002be6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bea:	2b41      	cmp	r3, #65	; 0x41
 8002bec:	d111      	bne.n	8002c12 <exportStateMachine+0xe6>
                {
                	resetKeyPressed();
 8002bee:	f002 f90d 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002bf2:	f107 020c 	add.w	r2, r7, #12
 8002bf6:	f107 030b 	add.w	r3, r7, #11
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff62 	bl	8002ac6 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_TODOS);
 8002c02:	2005      	movs	r0, #5
 8002c04:	f001 fb4a 	bl	800429c <getNextSub>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	70da      	strb	r2, [r3, #3]
 8002c10:	e1a5      	b.n	8002f5e <exportStateMachine+0x432>
                }

                else if(key == CONFIRMAR)
 8002c12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c16:	2b43      	cmp	r3, #67	; 0x43
 8002c18:	f040 81a1 	bne.w	8002f5e <exportStateMachine+0x432>
                {
                	resetKeyPressed();
 8002c1c:	f002 f8f6 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002c20:	f107 020c 	add.w	r2, r7, #12
 8002c24:	f107 030b 	add.w	r3, r7, #11
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff4b 	bl	8002ac6 <readyUserInterface>
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	3303      	adds	r3, #3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 fb43 	bl	80042c0 <setSelectSub>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	705a      	strb	r2, [r3, #1]
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 8002c42:	2003      	movs	r0, #3
 8002c44:	f001 fb2a 	bl	800429c <getNextSub>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	70da      	strb	r2, [r3, #3]
                }
                break;
 8002c50:	e185      	b.n	8002f5e <exportStateMachine+0x432>

            case EXPORTAR_TODOS:
                updateUserMsg(0,0,exportallUserMsg,&displayUpdateStatus);
 8002c52:	4baf      	ldr	r3, [pc, #700]	; (8002f10 <exportStateMachine+0x3e4>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	f107 030b 	add.w	r3, r7, #11
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f7ff ff14 	bl	8002a8a <updateUserMsg>
                key = getKeyPressed();
 8002c62:	f002 f8c7 	bl	8004df4 <getKeyPressed>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if(key == AVANCAR)
 8002c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c70:	2b41      	cmp	r3, #65	; 0x41
 8002c72:	d111      	bne.n	8002c98 <exportStateMachine+0x16c>
                {
                	resetKeyPressed();
 8002c74:	f002 f8ca 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002c78:	f107 020c 	add.w	r2, r7, #12
 8002c7c:	f107 030b 	add.w	r3, r7, #11
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ff1f 	bl	8002ac6 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8002c88:	2002      	movs	r0, #2
 8002c8a:	f001 fb07 	bl	800429c <getNextSub>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	70da      	strb	r2, [r3, #3]
 8002c96:	e162      	b.n	8002f5e <exportStateMachine+0x432>
                }

                else if(key == CONFIRMAR)
 8002c98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c9c:	2b43      	cmp	r3, #67	; 0x43
 8002c9e:	f040 815e 	bne.w	8002f5e <exportStateMachine+0x432>
                {
                	resetKeyPressed();
 8002ca2:	f002 f8b3 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002ca6:	f107 020c 	add.w	r2, r7, #12
 8002caa:	f107 030b 	add.w	r3, r7, #11
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff08 	bl	8002ac6 <readyUserInterface>
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	3303      	adds	r3, #3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f001 fb00 	bl	80042c0 <setSelectSub>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	705a      	strb	r2, [r3, #1]
                    subMenuExport->menuState = getNextSub(PROCESS_TODOS);
 8002cc8:	2006      	movs	r0, #6
 8002cca:	f001 fae7 	bl	800429c <getNextSub>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	70da      	strb	r2, [r3, #3]
                }
                break;
 8002cd6:	e142      	b.n	8002f5e <exportStateMachine+0x432>


            case NUM_TESTE_EXPORT:
                updateUserMsg(0,0,consultTestUserMsg,&displayUpdateStatus);
 8002cd8:	4b8e      	ldr	r3, [pc, #568]	; (8002f14 <exportStateMachine+0x3e8>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	f107 030b 	add.w	r3, r7, #11
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7ff fed1 	bl	8002a8a <updateUserMsg>
                ptr_exportTestString = getNumTestString();
 8002ce8:	f7ff fb9c 	bl	8002424 <getNumTestString>
 8002cec:	62b8      	str	r0, [r7, #40]	; 0x28
                printDataDisplay(0,1,ptr_exportTestString);
 8002cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f000 fe02 	bl	80038fc <printDataDisplay>
                updateDataDisplay(index,1);
 8002cf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fe16 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 8002d04:	f002 f876 	bl	8004df4 <getKeyPressed>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if(key == INSERIR)
 8002d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d12:	2b49      	cmp	r3, #73	; 0x49
 8002d14:	d10e      	bne.n	8002d34 <exportStateMachine+0x208>
                {
                	resetKeyPressed();
 8002d16:	f002 f879 	bl	8004e0c <resetKeyPressed>
                    setUserNumTest(&index);
 8002d1a:	f107 030e 	add.w	r3, r7, #14
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fd5d 	bl	80027de <setUserNumTest>
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 8002d24:	2003      	movs	r0, #3
 8002d26:	f001 fab9 	bl	800429c <getNextSub>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	70da      	strb	r2, [r3, #3]
 8002d32:	e114      	b.n	8002f5e <exportStateMachine+0x432>
                }
                else if(key == AVANCAR)
 8002d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d38:	2b41      	cmp	r3, #65	; 0x41
 8002d3a:	d108      	bne.n	8002d4e <exportStateMachine+0x222>
                {
                	resetKeyPressed();
 8002d3c:	f002 f866 	bl	8004e0c <resetKeyPressed>
                    indexChange(&index,2);
 8002d40:	f107 030e 	add.w	r3, r7, #14
 8002d44:	2102      	movs	r1, #2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fa31 	bl	80021ae <indexChange>
 8002d4c:	e107      	b.n	8002f5e <exportStateMachine+0x432>
                }
                else if(key == CONFIRMAR)
 8002d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d52:	2b43      	cmp	r3, #67	; 0x43
 8002d54:	f040 8103 	bne.w	8002f5e <exportStateMachine+0x432>
                {
                	resetKeyPressed();
 8002d58:	f002 f858 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002d5c:	f107 020c 	add.w	r2, r7, #12
 8002d60:	f107 030b 	add.w	r3, r7, #11
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fead 	bl	8002ac6 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(PROCESS_UNITARIO);
 8002d6c:	2004      	movs	r0, #4
 8002d6e:	f001 fa95 	bl	800429c <getNextSub>
 8002d72:	4603      	mov	r3, r0
 8002d74:	461a      	mov	r2, r3
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	70da      	strb	r2, [r3, #3]
                    subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	3303      	adds	r3, #3
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f001 fa9e 	bl	80042c0 <setSelectSub>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	705a      	strb	r2, [r3, #1]
                }

                break;
 8002d8c:	e0e7      	b.n	8002f5e <exportStateMachine+0x432>

                case PROCESS_UNITARIO:
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8002d8e:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <exportStateMachine+0x3ec>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	f107 030b 	add.w	r3, r7, #11
 8002d96:	2100      	movs	r1, #0
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7ff fe76 	bl	8002a8a <updateUserMsg>
                    selectedUserTest = stringToInt(ptr_exportTestString);
 8002d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002da0:	f7ff f9ca 	bl	8002138 <stringToInt>
 8002da4:	4603      	mov	r3, r0
 8002da6:	77bb      	strb	r3, [r7, #30]
                    ptr_structExportResult = getUserResultData(selectedUserTest);
 8002da8:	7fbb      	ldrb	r3, [r7, #30]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe ffee 	bl	8001d8c <getUserResultData>
 8002db0:	6278      	str	r0, [r7, #36]	; 0x24

                   //ESSE FOR � S� PARA TESTE NO CONSOLE, AO INVES DESSE MONTE DE "PRINT", COLOCAREI FU��O PARA ENVIAR BT

                    for(testSamples=0;testSamples<(ptr_structExportResult->resultTestAcquiredSamples);testSamples++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002db8:	e093      	b.n	8002ee2 <exportStateMachine+0x3b6>
                    {
                        ptr_structExportResult = getUserResultData(selectedUserTest);
 8002dba:	7fbb      	ldrb	r3, [r7, #30]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe ffe5 	bl	8001d8c <getUserResultData>
 8002dc2:	6278      	str	r0, [r7, #36]	; 0x24
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002dc4:	f107 020c 	add.w	r2, r7, #12
 8002dc8:	f107 030b 	add.w	r3, r7, #11
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fe79 	bl	8002ac6 <readyUserInterface>
                        updateUserMsg(0,0,"Amostra",&displayUpdateStatus);
 8002dd4:	f107 030b 	add.w	r3, r7, #11
 8002dd8:	4a50      	ldr	r2, [pc, #320]	; (8002f1c <exportStateMachine+0x3f0>)
 8002dda:	2100      	movs	r1, #0
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7ff fe54 	bl	8002a8a <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002de2:	f107 020c 	add.w	r2, r7, #12
 8002de6:	f107 030b 	add.w	r3, r7, #11
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fe6a 	bl	8002ac6 <readyUserInterface>
                        ptr_sampleString = param_1_toString(&ptr_structExportResult->Measurement[testSamples].sampleNum);
 8002df2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e00:	4413      	add	r3, r2
 8002e02:	3304      	adds	r3, #4
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fb45 	bl	8002494 <param_1_toString>
 8002e0a:	61b8      	str	r0, [r7, #24]
                        updateUserMsg(0,0,ptr_sampleString,&displayUpdateStatus);
 8002e0c:	f107 030b 	add.w	r3, r7, #11
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	2100      	movs	r1, #0
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7ff fe38 	bl	8002a8a <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002e1a:	f107 020c 	add.w	r2, r7, #12
 8002e1e:	f107 030b 	add.w	r3, r7, #11
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fe4e 	bl	8002ac6 <readyUserInterface>

                        updateUserMsg(0,0,"Tempo de Voo",&displayUpdateStatus);
 8002e2a:	f107 030b 	add.w	r3, r7, #11
 8002e2e:	4a3c      	ldr	r2, [pc, #240]	; (8002f20 <exportStateMachine+0x3f4>)
 8002e30:	2100      	movs	r1, #0
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7ff fe29 	bl	8002a8a <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002e38:	f107 020c 	add.w	r2, r7, #12
 8002e3c:	f107 030b 	add.w	r3, r7, #11
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fe3f 	bl	8002ac6 <readyUserInterface>
                        ptr_vooTimeString = param_2_toString(&ptr_structExportResult->Measurement[testSamples].uiVooTime);
 8002e48:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	4413      	add	r3, r2
 8002e58:	3308      	adds	r3, #8
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fb2e 	bl	80024bc <param_2_toString>
 8002e60:	6178      	str	r0, [r7, #20]
                        updateUserMsg(0,0,ptr_vooTimeString,&displayUpdateStatus);
 8002e62:	f107 030b 	add.w	r3, r7, #11
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7ff fe0d 	bl	8002a8a <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002e70:	f107 020c 	add.w	r2, r7, #12
 8002e74:	f107 030b 	add.w	r3, r7, #11
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fe23 	bl	8002ac6 <readyUserInterface>

                        updateUserMsg(0,0,"Altura do salto",&displayUpdateStatus);
 8002e80:	f107 030b 	add.w	r3, r7, #11
 8002e84:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <exportStateMachine+0x3f8>)
 8002e86:	2100      	movs	r1, #0
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7ff fdfe 	bl	8002a8a <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002e8e:	f107 020c 	add.w	r2, r7, #12
 8002e92:	f107 030b 	add.w	r3, r7, #11
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fe14 	bl	8002ac6 <readyUserInterface>
                        ptr_alturaString = param_3_toString(&ptr_structExportResult->Measurement[testSamples].uiSoloTime);
 8002e9e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	3308      	adds	r3, #8
 8002eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eae:	4413      	add	r3, r2
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fb16 	bl	80024e4 <param_3_toString>
 8002eb8:	6138      	str	r0, [r7, #16]
                        updateUserMsg(0,0,ptr_alturaString,&displayUpdateStatus);
 8002eba:	f107 030b 	add.w	r3, r7, #11
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7ff fde1 	bl	8002a8a <updateUserMsg>
                        readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002ec8:	f107 020c 	add.w	r2, r7, #12
 8002ecc:	f107 030b 	add.w	r3, r7, #11
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fdf7 	bl	8002ac6 <readyUserInterface>
                    for(testSamples=0;testSamples<(ptr_structExportResult->resultTestAcquiredSamples);testSamples++)
 8002ed8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002edc:	3301      	adds	r3, #1
 8002ede:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	785b      	ldrb	r3, [r3, #1]
 8002ee6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002eea:	429a      	cmp	r2, r3
 8002eec:	f4ff af65 	bcc.w	8002dba <exportStateMachine+0x28e>
                    }
//                    transmissionCOMM();
                    //Acessa os dados referente ao Teste e envia apenas o selecionado por BT
                subMenuExport->menuState = getNextSub(IDDLE);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f001 f9d3 	bl	800429c <getNextSub>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	70da      	strb	r2, [r3, #3]
                key = MENU;
 8002efe:	234d      	movs	r3, #77	; 0x4d
 8002f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 8002f04:	e02b      	b.n	8002f5e <exportStateMachine+0x432>
 8002f06:	bf00      	nop
 8002f08:	2000002c 	.word	0x2000002c
 8002f0c:	200000a0 	.word	0x200000a0
 8002f10:	200000a4 	.word	0x200000a4
 8002f14:	2000005c 	.word	0x2000005c
 8002f18:	20000064 	.word	0x20000064
 8002f1c:	0800b99c 	.word	0x0800b99c
 8002f20:	0800b9a4 	.word	0x0800b9a4
 8002f24:	0800b9b4 	.word	0x0800b9b4

                case PROCESS_TODOS: //
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <exportStateMachine+0x448>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	f107 030b 	add.w	r3, r7, #11
 8002f30:	2100      	movs	r1, #0
 8002f32:	2000      	movs	r0, #0
 8002f34:	f7ff fda9 	bl	8002a8a <updateUserMsg>
//                            printf("Teste %d existe\n",i);
//                       }
//                       else printf("Teste %d nao existe\n",i);
//
//                    }
                    subMenuExport->menuState = getNextSub(IDDLE);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f001 f9af 	bl	800429c <getNextSub>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	461a      	mov	r2, r3
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	70da      	strb	r2, [r3, #3]
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8002f46:	f107 020c 	add.w	r2, r7, #12
 8002f4a:	f107 030b 	add.w	r3, r7, #11
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fdb8 	bl	8002ac6 <readyUserInterface>
                    key = MENU;
 8002f56:	234d      	movs	r3, #77	; 0x4d
 8002f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    break;
 8002f5c:	bf00      	nop
    while(key != MENU)
 8002f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f62:	2b4d      	cmp	r3, #77	; 0x4d
 8002f64:	f47f adfa 	bne.w	8002b5c <exportStateMachine+0x30>
        }
    }
}
 8002f68:	bf00      	nop
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3730      	adds	r7, #48	; 0x30
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000064 	.word	0x20000064

08002f78 <initStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char initStateMachine(struct Menu* subMenu)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b0ea      	sub	sp, #424	; 0x1a8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f82:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002f86:	6018      	str	r0, [r3, #0]
    struct Menu* subMenuIniciar = subMenu;
 8002f88:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f8c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 8002f96:	f7fe fe97 	bl	8001cc8 <getUserConfigStruct>
 8002f9a:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
    unsigned char key = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
    short insertColumn = 7;
 8002fa4:	2307      	movs	r3, #7
 8002fa6:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a

    struct tm myTime;
    struct tm* userTimeStruct = &myTime;
 8002faa:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002fae:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    unsigned char userTimeString[9];
    unsigned char procTimeString[9];
    unsigned char* ptr_massString;
    unsigned char* ptr_overMassString;

    unsigned char displayUpdateStatus = IDDLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
    unsigned char cursorPosition[2] = {0,0};
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
    unsigned char* ptr_Sample;
    unsigned char* ptr_ulReadingTime;
    unsigned char* ptr_uiVooTime;
    unsigned char* ptr_ucAltDistance;
    struct results result[TEST_SIZE]; //verificar se vou usar o endere�o de data.c assim como fiz com a estrutura de configuracao
    unsigned char i = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
    unsigned char sampleCount=0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
    unsigned char indexTest;
    unsigned char readingStatus = IDDLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5

    //
    resetResultStruct(&result[0]);
 8002fd0:	f107 0308 	add.w	r3, r7, #8
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fe ff77 	bl	8001ec8 <resetResultStruct>
    resetResultStruct(&result[1]);
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	3340      	adds	r3, #64	; 0x40
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe ff71 	bl	8001ec8 <resetResultStruct>
    resetResultStruct(&result[2]);
 8002fe6:	f107 0308 	add.w	r3, r7, #8
 8002fea:	3380      	adds	r3, #128	; 0x80
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe ff6b 	bl	8001ec8 <resetResultStruct>
    resetResultStruct(&result[3]);
 8002ff2:	f107 0308 	add.w	r3, r7, #8
 8002ff6:	33c0      	adds	r3, #192	; 0xc0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fe ff65 	bl	8001ec8 <resetResultStruct>
    resetResultStruct(&result[4]);
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe ff5e 	bl	8001ec8 <resetResultStruct>


    unsigned char startTapete,readingState;


    while(key != MENU)
 800300c:	bf00      	nop
 800300e:	f000 bc43 	b.w	8003898 <initStateMachine+0x920>
    {
        switch(subMenuIniciar->menuState)
 8003012:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003016:	78db      	ldrb	r3, [r3, #3]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	f200 843d 	bhi.w	8003898 <initStateMachine+0x920>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <initStateMachine+0xac>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003059 	.word	0x08003059
 8003028:	0800306d 	.word	0x0800306d
 800302c:	08003107 	.word	0x08003107
 8003030:	080031c1 	.word	0x080031c1
 8003034:	080032bf 	.word	0x080032bf
 8003038:	0800339b 	.word	0x0800339b
 800303c:	08003497 	.word	0x08003497
 8003040:	08003537 	.word	0x08003537
 8003044:	080035b9 	.word	0x080035b9
 8003048:	08003625 	.word	0x08003625
 800304c:	080036b3 	.word	0x080036b3
 8003050:	080036e3 	.word	0x080036e3
 8003054:	080037b3 	.word	0x080037b3
        {
            case IDDLE:
                subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8003058:	2001      	movs	r0, #1
 800305a:	f001 f91f 	bl	800429c <getNextSub>
 800305e:	4603      	mov	r3, r0
 8003060:	461a      	mov	r2, r3
 8003062:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003066:	70da      	strb	r2, [r3, #3]
                //RESET
            break;
 8003068:	f000 bc16 	b.w	8003898 <initStateMachine+0x920>

            case COMM_OFF:
                updateUserMsg(0,0,noTransmissionMsg,&displayUpdateStatus);
 800306c:	4be4      	ldr	r3, [pc, #912]	; (8003400 <initStateMachine+0x488>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003074:	2100      	movs	r1, #0
 8003076:	2000      	movs	r0, #0
 8003078:	f7ff fd07 	bl	8002a8a <updateUserMsg>
                key = getKeyPressed();
 800307c:	f001 feba 	bl	8004df4 <getKeyPressed>
 8003080:	4603      	mov	r3, r0
 8003082:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                if(key == AVANCAR)
 8003086:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800308a:	2b41      	cmp	r3, #65	; 0x41
 800308c:	d112      	bne.n	80030b4 <initStateMachine+0x13c>
                {
                	resetKeyPressed();
 800308e:	f001 febd 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003092:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003096:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fd12 	bl	8002ac6 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(COMM_ON);
 80030a2:	2002      	movs	r0, #2
 80030a4:	f001 f8fa 	bl	800429c <getNextSub>
 80030a8:	4603      	mov	r3, r0
 80030aa:	461a      	mov	r2, r3
 80030ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80030b0:	70da      	strb	r2, [r3, #3]
 80030b2:	e3f1      	b.n	8003898 <initStateMachine+0x920>
                }
                else if(key == CONFIRMAR)
 80030b4:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80030b8:	2b43      	cmp	r3, #67	; 0x43
 80030ba:	f040 83ed 	bne.w	8003898 <initStateMachine+0x920>
                {
                	resetKeyPressed();
 80030be:	f001 fea5 	bl	8004e0c <resetKeyPressed>
                    stopCOMM();
 80030c2:	f000 fc67 	bl	8003994 <stopCOMM>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80030c6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80030ca:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fcf8 	bl	8002ac6 <readyUserInterface>
                    ptr_userConfiguration->userCommConfig = COMM_OFF;
 80030d6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80030da:	2201      	movs	r2, #1
 80030dc:	769a      	strb	r2, [r3, #26]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80030de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80030e2:	3303      	adds	r3, #3
 80030e4:	4618      	mov	r0, r3
 80030e6:	f001 f8eb 	bl	80042c0 <setSelectSub>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80030f2:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 80030f4:	2003      	movs	r0, #3
 80030f6:	f001 f8d1 	bl	800429c <getNextSub>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003102:	70da      	strb	r2, [r3, #3]
                }
            break;
 8003104:	e3c8      	b.n	8003898 <initStateMachine+0x920>

            case COMM_ON:
				updateUserMsg(0,0,yesTransmissionMsg,&displayUpdateStatus);
 8003106:	4bbf      	ldr	r3, [pc, #764]	; (8003404 <initStateMachine+0x48c>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800310e:	2100      	movs	r1, #0
 8003110:	2000      	movs	r0, #0
 8003112:	f7ff fcba 	bl	8002a8a <updateUserMsg>
				key = getKeyPressed();
 8003116:	f001 fe6d 	bl	8004df4 <getKeyPressed>
 800311a:	4603      	mov	r3, r0
 800311c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                if(key == AVANCAR)
 8003120:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003124:	2b41      	cmp	r3, #65	; 0x41
 8003126:	d112      	bne.n	800314e <initStateMachine+0x1d6>
				{
                	resetKeyPressed();
 8003128:	f001 fe70 	bl	8004e0c <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 800312c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003130:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fcc5 	bl	8002ac6 <readyUserInterface>
					subMenuIniciar->menuState = getNextSub(COMM_OFF);
 800313c:	2001      	movs	r0, #1
 800313e:	f001 f8ad 	bl	800429c <getNextSub>
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
 8003146:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800314a:	70da      	strb	r2, [r3, #3]
 800314c:	e3a4      	b.n	8003898 <initStateMachine+0x920>
				}
                else if(key == CONFIRMAR)
 800314e:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003152:	2b43      	cmp	r3, #67	; 0x43
 8003154:	f040 83a0 	bne.w	8003898 <initStateMachine+0x920>
                {
                	resetKeyPressed();
 8003158:	f001 fe58 	bl	8004e0c <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 800315c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003160:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fcad 	bl	8002ac6 <readyUserInterface>
                    startCOMM();
 800316c:	f000 fc03 	bl	8003976 <startCOMM>
                	updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 8003170:	4ba5      	ldr	r3, [pc, #660]	; (8003408 <initStateMachine+0x490>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003178:	2100      	movs	r1, #0
 800317a:	2000      	movs	r0, #0
 800317c:	f7ff fc85 	bl	8002a8a <updateUserMsg>
                	readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003180:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003184:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fc9b 	bl	8002ac6 <readyUserInterface>
                     ptr_userConfiguration->userCommConfig = COMM_ON;
 8003190:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003194:	2202      	movs	r2, #2
 8003196:	769a      	strb	r2, [r3, #26]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003198:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800319c:	3303      	adds	r3, #3
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 f88e 	bl	80042c0 <setSelectSub>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461a      	mov	r2, r3
 80031a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80031ac:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 80031ae:	2003      	movs	r0, #3
 80031b0:	f001 f874 	bl	800429c <getNextSub>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80031bc:	70da      	strb	r2, [r3, #3]
                }
                break;
 80031be:	e36b      	b.n	8003898 <initStateMachine+0x920>

            case TEMPO_READ:
                updateUserMsg(0,0,timeUserMsg,&displayUpdateStatus);
 80031c0:	4b92      	ldr	r3, [pc, #584]	; (800340c <initStateMachine+0x494>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80031c8:	2100      	movs	r1, #0
 80031ca:	2000      	movs	r0, #0
 80031cc:	f7ff fc5d 	bl	8002a8a <updateUserMsg>
                userTimeStruct = getTimeStruct();
 80031d0:	f7fe fcf8 	bl	8001bc4 <getTimeStruct>
 80031d4:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
                strftime(userTimeString, sizeof(userTimeString), "%H:%M:%S", userTimeStruct);
 80031d8:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80031dc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80031e0:	4a8b      	ldr	r2, [pc, #556]	; (8003410 <initStateMachine+0x498>)
 80031e2:	2109      	movs	r1, #9
 80031e4:	f006 fe6e 	bl	8009ec4 <strftime>
                printDataDisplay(0,1,userTimeString);
 80031e8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80031ec:	461a      	mov	r2, r3
 80031ee:	2101      	movs	r1, #1
 80031f0:	2000      	movs	r0, #0
 80031f2:	f000 fb83 	bl	80038fc <printDataDisplay>
                updateDataDisplay(insertColumn,1);
 80031f6:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	; 0x18a
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2101      	movs	r1, #1
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fb96 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 8003204:	f001 fdf6 	bl	8004df4 <getKeyPressed>
 8003208:	4603      	mov	r3, r0
 800320a:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == INSERIR)
 800320e:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003212:	2b49      	cmp	r3, #73	; 0x49
 8003214:	d10f      	bne.n	8003236 <initStateMachine+0x2be>
                {
                	resetKeyPressed();
 8003216:	f001 fdf9 	bl	8004e0c <resetKeyPressed>
                    setUserTime(&insertColumn);
 800321a:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fb62 	bl	80028e8 <setUserTime>
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 8003224:	2003      	movs	r0, #3
 8003226:	f001 f839 	bl	800429c <getNextSub>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003232:	70da      	strb	r2, [r3, #3]
 8003234:	e330      	b.n	8003898 <initStateMachine+0x920>
                }
                else if (key == AVANCAR)
 8003236:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800323a:	2b41      	cmp	r3, #65	; 0x41
 800323c:	d108      	bne.n	8003250 <initStateMachine+0x2d8>
                {
                	resetKeyPressed();
 800323e:	f001 fde5 	bl	8004e0c <resetKeyPressed>
                    indexColumn(&insertColumn,7);
 8003242:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 8003246:	2107      	movs	r1, #7
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe ff0f 	bl	800206c <indexColumn>
 800324e:	e323      	b.n	8003898 <initStateMachine+0x920>
                }
                else if(key == CONFIRMAR)
 8003250:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003254:	2b43      	cmp	r3, #67	; 0x43
 8003256:	f040 831f 	bne.w	8003898 <initStateMachine+0x920>
                {
                	resetKeyPressed();
 800325a:	f001 fdd7 	bl	8004e0c <resetKeyPressed>
                	insertColumn = 4; //colocar um define talvez -> definicao de caracteres no display massa e overmass
 800325e:	2304      	movs	r3, #4
 8003260:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003264:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003268:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fc29 	bl	8002ac6 <readyUserInterface>
                    //COLOCAR UMA FUNCAO PARA TRANSFORMAR O TEMPO CAPTURADO EM ms
                    strftime(procTimeString, sizeof(procTimeString), "%H%M%S", userTimeStruct);
 8003274:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8003278:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800327c:	4a65      	ldr	r2, [pc, #404]	; (8003414 <initStateMachine+0x49c>)
 800327e:	2109      	movs	r1, #9
 8003280:	f006 fe20 	bl	8009ec4 <strftime>
					ptr_userConfiguration->userTime = milisecondsTime(userTimeStruct);
 8003284:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8003288:	f7fe ff2b 	bl	80020e2 <milisecondsTime>
 800328c:	4603      	mov	r3, r0
 800328e:	461a      	mov	r2, r3
 8003290:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003294:	605a      	str	r2, [r3, #4]
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 8003296:	2004      	movs	r0, #4
 8003298:	f001 f800 	bl	800429c <getNextSub>
 800329c:	4603      	mov	r3, r0
 800329e:	461a      	mov	r2, r3
 80032a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80032a4:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 80032a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80032aa:	3303      	adds	r3, #3
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 f807 	bl	80042c0 <setSelectSub>
 80032b2:	4603      	mov	r3, r0
 80032b4:	461a      	mov	r2, r3
 80032b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80032ba:	705a      	strb	r2, [r3, #1]
                }
                break;
 80032bc:	e2ec      	b.n	8003898 <initStateMachine+0x920>

            case MASSA_READ:
                 updateUserMsg(0,0,massUserMsg,&displayUpdateStatus);
 80032be:	4b56      	ldr	r3, [pc, #344]	; (8003418 <initStateMachine+0x4a0>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80032c6:	2100      	movs	r1, #0
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7ff fbde 	bl	8002a8a <updateUserMsg>
                 ptr_massString = getMassString();
 80032ce:	f7ff f85d 	bl	800238c <getMassString>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
                 printDataDisplay(0,1,ptr_massString);
 80032d8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80032dc:	2101      	movs	r1, #1
 80032de:	2000      	movs	r0, #0
 80032e0:	f000 fb0c 	bl	80038fc <printDataDisplay>
                 updateDataDisplay(insertColumn,1);
 80032e4:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	; 0x18a
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2101      	movs	r1, #1
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fb1f 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 80032f2:	f001 fd7f 	bl	8004df4 <getKeyPressed>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                if(key == INSERIR)
 80032fc:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003300:	2b49      	cmp	r3, #73	; 0x49
 8003302:	d10f      	bne.n	8003324 <initStateMachine+0x3ac>
                {
                	resetKeyPressed();
 8003304:	f001 fd82 	bl	8004e0c <resetKeyPressed>
                    setUserMass(&insertColumn); //criar variavel adicional para separar insertcolumn
 8003308:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fa1e 	bl	800274e <setUserMass>
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 8003312:	2004      	movs	r0, #4
 8003314:	f000 ffc2 	bl	800429c <getNextSub>
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003320:	70da      	strb	r2, [r3, #3]
 8003322:	e2b9      	b.n	8003898 <initStateMachine+0x920>
                }
                else if(key == AVANCAR)
 8003324:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003328:	2b41      	cmp	r3, #65	; 0x41
 800332a:	d107      	bne.n	800333c <initStateMachine+0x3c4>
                {
                	resetKeyPressed();
 800332c:	f001 fd6e 	bl	8004e0c <resetKeyPressed>
                    indexMass(&insertColumn);
 8003330:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe ff11 	bl	800215c <indexMass>
 800333a:	e2ad      	b.n	8003898 <initStateMachine+0x920>
                }
                else if(key == CONFIRMAR)
 800333c:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003340:	2b43      	cmp	r3, #67	; 0x43
 8003342:	f040 82a9 	bne.w	8003898 <initStateMachine+0x920>
                {
                	resetKeyPressed();
 8003346:	f001 fd61 	bl	8004e0c <resetKeyPressed>
                	insertColumn = 4;
 800334a:	2304      	movs	r3, #4
 800334c:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003350:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003354:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fbb3 	bl	8002ac6 <readyUserInterface>
                    ptr_userConfiguration->userMass= stringToInt(ptr_massString);
 8003360:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8003364:	f7fe fee8 	bl	8002138 <stringToInt>
 8003368:	4603      	mov	r3, r0
 800336a:	b2da      	uxtb	r2, r3
 800336c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003370:	721a      	strb	r2, [r3, #8]
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 8003372:	2005      	movs	r0, #5
 8003374:	f000 ff92 	bl	800429c <getNextSub>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003380:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003382:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003386:	3303      	adds	r3, #3
 8003388:	4618      	mov	r0, r3
 800338a:	f000 ff99 	bl	80042c0 <setSelectSub>
 800338e:	4603      	mov	r3, r0
 8003390:	461a      	mov	r2, r3
 8003392:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003396:	705a      	strb	r2, [r3, #1]
                }
                break;
 8003398:	e27e      	b.n	8003898 <initStateMachine+0x920>

            case SOBREC_READ:
                updateUserMsg(0,0,overmassUserMsg,&displayUpdateStatus);
 800339a:	4b20      	ldr	r3, [pc, #128]	; (800341c <initStateMachine+0x4a4>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80033a2:	2100      	movs	r1, #0
 80033a4:	2000      	movs	r0, #0
 80033a6:	f7ff fb70 	bl	8002a8a <updateUserMsg>
                ptr_overMassString = getOverMassString();
 80033aa:	f7ff f815 	bl	80023d8 <getOverMassString>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
                printDataDisplay(0,1,ptr_overMassString);
 80033b4:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80033b8:	2101      	movs	r1, #1
 80033ba:	2000      	movs	r0, #0
 80033bc:	f000 fa9e 	bl	80038fc <printDataDisplay>
                updateDataDisplay(insertColumn,1);
 80033c0:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	; 0x18a
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2101      	movs	r1, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fab1 	bl	8003930 <updateDataDisplay>
                key = getKeyPressed();
 80033ce:	f001 fd11 	bl	8004df4 <getKeyPressed>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == INSERIR)
 80033d8:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80033dc:	2b49      	cmp	r3, #73	; 0x49
 80033de:	d11f      	bne.n	8003420 <initStateMachine+0x4a8>
                {
                	resetKeyPressed();
 80033e0:	f001 fd14 	bl	8004e0c <resetKeyPressed>
                    setUserOverMass(&insertColumn);
 80033e4:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff f9d4 	bl	8002796 <setUserOverMass>
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 80033ee:	2005      	movs	r0, #5
 80033f0:	f000 ff54 	bl	800429c <getNextSub>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80033fc:	70da      	strb	r2, [r3, #3]
 80033fe:	e24b      	b.n	8003898 <initStateMachine+0x920>
 8003400:	20000024 	.word	0x20000024
 8003404:	20000028 	.word	0x20000028
 8003408:	2000002c 	.word	0x2000002c
 800340c:	20000030 	.word	0x20000030
 8003410:	0800b9c4 	.word	0x0800b9c4
 8003414:	0800b9d0 	.word	0x0800b9d0
 8003418:	20000034 	.word	0x20000034
 800341c:	20000038 	.word	0x20000038
                }
                else if(key == AVANCAR)
 8003420:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003424:	2b41      	cmp	r3, #65	; 0x41
 8003426:	d107      	bne.n	8003438 <initStateMachine+0x4c0>
                {
                	resetKeyPressed();
 8003428:	f001 fcf0 	bl	8004e0c <resetKeyPressed>
                    indexMass(&insertColumn);
 800342c:	f507 73c5 	add.w	r3, r7, #394	; 0x18a
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe fe93 	bl	800215c <indexMass>
 8003436:	e22f      	b.n	8003898 <initStateMachine+0x920>
                }
                else if(key == CONFIRMAR)
 8003438:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800343c:	2b43      	cmp	r3, #67	; 0x43
 800343e:	f040 822b 	bne.w	8003898 <initStateMachine+0x920>
                {
                	resetKeyPressed();
 8003442:	f001 fce3 	bl	8004e0c <resetKeyPressed>
                	insertColumn = 7; //definicao de caracteres para TIME
 8003446:	2307      	movs	r3, #7
 8003448:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800344c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003450:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fb35 	bl	8002ac6 <readyUserInterface>
                    ptr_userConfiguration->userOverMass= stringToInt(ptr_overMassString);
 800345c:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8003460:	f7fe fe6a 	bl	8002138 <stringToInt>
 8003464:	4603      	mov	r3, r0
 8003466:	b2da      	uxtb	r2, r3
 8003468:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800346c:	725a      	strb	r2, [r3, #9]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 800346e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003472:	3303      	adds	r3, #3
 8003474:	4618      	mov	r0, r3
 8003476:	f000 ff23 	bl	80042c0 <setSelectSub>
 800347a:	4603      	mov	r3, r0
 800347c:	461a      	mov	r2, r3
 800347e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003482:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(START);
 8003484:	2006      	movs	r0, #6
 8003486:	f000 ff09 	bl	800429c <getNextSub>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003492:	70da      	strb	r2, [r3, #3]
                }
                break;
 8003494:	e200      	b.n	8003898 <initStateMachine+0x920>

            case START:
                setInsertData(ptr_userConfiguration);
 8003496:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800349a:	f000 ff25 	bl	80042e8 <setInsertData>
                updateUserMsg(0,0,startreadUserMsg,&displayUpdateStatus);
 800349e:	4bd7      	ldr	r3, [pc, #860]	; (80037fc <initStateMachine+0x884>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80034a6:	2100      	movs	r1, #0
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7ff faee 	bl	8002a8a <updateUserMsg>
                printDataDisplay(0,1,userTimeString);
 80034ae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80034b2:	461a      	mov	r2, r3
 80034b4:	2101      	movs	r1, #1
 80034b6:	2000      	movs	r0, #0
 80034b8:	f000 fa20 	bl	80038fc <printDataDisplay>
                key = getKeyPressed();
 80034bc:	f001 fc9a 	bl	8004df4 <getKeyPressed>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == CONFIRMAR)
 80034c6:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80034ca:	2b43      	cmp	r3, #67	; 0x43
 80034cc:	f040 81e4 	bne.w	8003898 <initStateMachine+0x920>
                {
                	resetKeyPressed();
 80034d0:	f001 fc9c 	bl	8004e0c <resetKeyPressed>
                	startTapete = getUserSelectTapete();
 80034d4:	f7fe fb6c 	bl	8001bb0 <getUserSelectTapete>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
                	if(startTapete == TRUE) readingState = DENTRO;
 80034de:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d103      	bne.n	80034ee <initStateMachine+0x576>
 80034e6:	2331      	movs	r3, #49	; 0x31
 80034e8:	f887 31a4 	strb.w	r3, [r7, #420]	; 0x1a4
 80034ec:	e002      	b.n	80034f4 <initStateMachine+0x57c>
                	else readingState = FORA;
 80034ee:	2330      	movs	r3, #48	; 0x30
 80034f0:	f887 31a4 	strb.w	r3, [r7, #420]	; 0x1a4

                    indexTest = getResultTestNumber();
 80034f4:	f7fe fc5c 	bl	8001db0 <getResultTestNumber>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80034fe:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003502:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fadc 	bl	8002ac6 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(READING);
 800350e:	2007      	movs	r0, #7
 8003510:	f000 fec4 	bl	800429c <getNextSub>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800351c:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 800351e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003522:	3303      	adds	r3, #3
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fecb 	bl	80042c0 <setSelectSub>
 800352a:	4603      	mov	r3, r0
 800352c:	461a      	mov	r2, r3
 800352e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003532:	705a      	strb	r2, [r3, #1]
                }
            break;
 8003534:	e1b0      	b.n	8003898 <initStateMachine+0x920>

            case READING:
            	 updateUserMsg(0,0,"READING...",&displayUpdateStatus);
 8003536:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800353a:	4ab1      	ldr	r2, [pc, #708]	; (8003800 <initStateMachine+0x888>)
 800353c:	2100      	movs	r1, #0
 800353e:	2000      	movs	r0, #0
 8003540:	f7ff faa3 	bl	8002a8a <updateUserMsg>
            	 resetTimer3Variable();
 8003544:	f001 fc4a 	bl	8004ddc <resetTimer3Variable>
            	 startTM2();
 8003548:	f000 f9bc 	bl	80038c4 <startTM2>
				 startTM3();
 800354c:	f000 f9c8 	bl	80038e0 <startTM3>

				 switch(readingState)
 8003550:	f897 31a4 	ldrb.w	r3, [r7, #420]	; 0x1a4
 8003554:	2b30      	cmp	r3, #48	; 0x30
 8003556:	d002      	beq.n	800355e <initStateMachine+0x5e6>
 8003558:	2b31      	cmp	r3, #49	; 0x31
 800355a:	d006      	beq.n	800356a <initStateMachine+0x5f2>
 800355c:	e00b      	b.n	8003576 <initStateMachine+0x5fe>
				 {
					 case FORA:
						 readingStatus = startReadingOutsideSensor();
 800355e:	f000 fd6d 	bl	800403c <startReadingOutsideSensor>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5
					 break;
 8003568:	e005      	b.n	8003576 <initStateMachine+0x5fe>
					 case DENTRO:
						 readingStatus = startReadingInsideSensor();
 800356a:	f000 fe8f 	bl	800428c <startReadingInsideSensor>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5
					 break;
 8003574:	bf00      	nop
				 }

				 key = getKeyPressed();
 8003576:	f001 fc3d 	bl	8004df4 <getKeyPressed>
 800357a:	4603      	mov	r3, r0
 800357c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				 3 - PRESSIONAR O BOTAO PARAR

				 */


				if(key == PARAR || readingStatus == TIMEOUT)
 8003580:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003584:	2b50      	cmp	r3, #80	; 0x50
 8003586:	d004      	beq.n	8003592 <initStateMachine+0x61a>
 8003588:	f897 31a5 	ldrb.w	r3, [r7, #421]	; 0x1a5
 800358c:	2b35      	cmp	r3, #53	; 0x35
 800358e:	f040 8183 	bne.w	8003898 <initStateMachine+0x920>
				{
					resetKeyPressed();
 8003592:	f001 fc3b 	bl	8004e0c <resetKeyPressed>
					readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003596:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800359a:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fa90 	bl	8002ac6 <readyUserInterface>
					subMenuIniciar->menuState = getNextSub(STOP);
 80035a6:	2008      	movs	r0, #8
 80035a8:	f000 fe78 	bl	800429c <getNextSub>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80035b4:	70da      	strb	r2, [r3, #3]
				}
            break;
 80035b6:	e16f      	b.n	8003898 <initStateMachine+0x920>

            case STOP:
                updateUserMsg(0,0,stopreadUserMsg,&displayUpdateStatus);
 80035b8:	4b92      	ldr	r3, [pc, #584]	; (8003804 <initStateMachine+0x88c>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80035c0:	2100      	movs	r1, #0
 80035c2:	2000      	movs	r0, #0
 80035c4:	f7ff fa61 	bl	8002a8a <updateUserMsg>
                key = getKeyPressed();
 80035c8:	f001 fc14 	bl	8004df4 <getKeyPressed>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == CONFIRMAR)
 80035d2:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80035d6:	2b43      	cmp	r3, #67	; 0x43
 80035d8:	f040 815e 	bne.w	8003898 <initStateMachine+0x920>
                {
//                	transmissionCOMM(&timer3Data);
//                	transmissionCOMM();
                	resetKeyPressed();
 80035dc:	f001 fc16 	bl	8004e0c <resetKeyPressed>
                    stopTM2();
 80035e0:	f000 f977 	bl	80038d2 <stopTM2>
                    stopTM3();
 80035e4:	f000 f983 	bl	80038ee <stopTM3>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80035e8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80035ec:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fa67 	bl	8002ac6 <readyUserInterface>
                    //PARA LEITURA, DESLIGA TIMER, ENCODER, O QUE FOR I0_INTERFACE
//                    setUserResultData(&result[indexTest],indexTest,sampleCount);
                    setResultTestNumber();
 80035f8:	f7fe fbe4 	bl	8001dc4 <setResultTestNumber>
                    subMenuIniciar->menuState = getNextSub(DISP_RESULTS);
 80035fc:	2009      	movs	r0, #9
 80035fe:	f000 fe4d 	bl	800429c <getNextSub>
 8003602:	4603      	mov	r3, r0
 8003604:	461a      	mov	r2, r3
 8003606:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800360a:	70da      	strb	r2, [r3, #3]
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 800360c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003610:	3303      	adds	r3, #3
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fe54 	bl	80042c0 <setSelectSub>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003620:	705a      	strb	r2, [r3, #1]

                }
                break;
 8003622:	e139      	b.n	8003898 <initStateMachine+0x920>

            case DISP_RESULTS:
                updateUserMsg(0,0,resultsUserMsg,&displayUpdateStatus);
 8003624:	4b78      	ldr	r3, [pc, #480]	; (8003808 <initStateMachine+0x890>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800362c:	2100      	movs	r1, #0
 800362e:	2000      	movs	r0, #0
 8003630:	f7ff fa2b 	bl	8002a8a <updateUserMsg>
                key = getKeyPressed();
 8003634:	f001 fbde 	bl	8004df4 <getKeyPressed>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == PARAR)
 800363e:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003642:	2b50      	cmp	r3, #80	; 0x50
 8003644:	d112      	bne.n	800366c <initStateMachine+0x6f4>
                {
                	resetKeyPressed();
 8003646:	f001 fbe1 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800364a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800364e:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fa36 	bl	8002ac6 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 800365a:	200b      	movs	r0, #11
 800365c:	f000 fe1e 	bl	800429c <getNextSub>
 8003660:	4603      	mov	r3, r0
 8003662:	461a      	mov	r2, r3
 8003664:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003668:	70da      	strb	r2, [r3, #3]
 800366a:	e115      	b.n	8003898 <initStateMachine+0x920>
                }
                else if(key == CONFIRMAR)
 800366c:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003670:	2b43      	cmp	r3, #67	; 0x43
 8003672:	f040 8111 	bne.w	8003898 <initStateMachine+0x920>
                {
                	resetKeyPressed();
 8003676:	f001 fbc9 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 800367a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800367e:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fa1e 	bl	8002ac6 <readyUserInterface>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 800368a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800368e:	3303      	adds	r3, #3
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fe15 	bl	80042c0 <setSelectSub>
 8003696:	4603      	mov	r3, r0
 8003698:	461a      	mov	r2, r3
 800369a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800369e:	705a      	strb	r2, [r3, #1]
                    subMenuIniciar->menuState = getNextSub(RESULTS);
 80036a0:	200a      	movs	r0, #10
 80036a2:	f000 fdfb 	bl	800429c <getNextSub>
 80036a6:	4603      	mov	r3, r0
 80036a8:	461a      	mov	r2, r3
 80036aa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80036ae:	70da      	strb	r2, [r3, #3]
                }
            break;
 80036b0:	e0f2      	b.n	8003898 <initStateMachine+0x920>
//                        i=0;
//                    }
//                    //
//                    subMenuIniciar->menuState = getNextSub(RESULTS);
//                }
                if(key == PARAR)
 80036b2:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80036b6:	2b50      	cmp	r3, #80	; 0x50
 80036b8:	f040 80ee 	bne.w	8003898 <initStateMachine+0x920>
                {
                	resetKeyPressed();
 80036bc:	f001 fba6 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80036c0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80036c4:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff f9fb 	bl	8002ac6 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 80036d0:	200b      	movs	r0, #11
 80036d2:	f000 fde3 	bl	800429c <getNextSub>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80036de:	70da      	strb	r2, [r3, #3]
                }

            break;
 80036e0:	e0da      	b.n	8003898 <initStateMachine+0x920>

            case SAVE_DATA:
                updateUserMsg(0,0,saveUserMsg,&displayUpdateStatus);
 80036e2:	4b4a      	ldr	r3, [pc, #296]	; (800380c <initStateMachine+0x894>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80036ea:	2100      	movs	r1, #0
 80036ec:	2000      	movs	r0, #0
 80036ee:	f7ff f9cc 	bl	8002a8a <updateUserMsg>
                key = getKeyPressed();
 80036f2:	f001 fb7f 	bl	8004df4 <getKeyPressed>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == AVANCAR)
 80036fc:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8003700:	2b41      	cmp	r3, #65	; 0x41
 8003702:	d11a      	bne.n	800373a <initStateMachine+0x7c2>
                {
                	resetKeyPressed();
 8003704:	f001 fb82 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003708:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800370c:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff f9d7 	bl	8002ac6 <readyUserInterface>
                    updateUserMsg(0,0,cancelUserMsg,&displayUpdateStatus);
 8003718:	4b3d      	ldr	r3, [pc, #244]	; (8003810 <initStateMachine+0x898>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003720:	2100      	movs	r1, #0
 8003722:	2000      	movs	r0, #0
 8003724:	f7ff f9b1 	bl	8002a8a <updateUserMsg>
                    subMenuIniciar->menuState = getNextSub(CANCEL_SAVE);
 8003728:	200c      	movs	r0, #12
 800372a:	f000 fdb7 	bl	800429c <getNextSub>
 800372e:	4603      	mov	r3, r0
 8003730:	461a      	mov	r2, r3
 8003732:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003736:	70da      	strb	r2, [r3, #3]
 8003738:	e0ae      	b.n	8003898 <initStateMachine+0x920>
                }
                else if(key == CONFIRMAR)
 800373a:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800373e:	2b43      	cmp	r3, #67	; 0x43
 8003740:	f040 80aa 	bne.w	8003898 <initStateMachine+0x920>
                {
                	resetKeyPressed();
 8003744:	f001 fb62 	bl	8004e0c <resetKeyPressed>
//                    save_data(indexTest);
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003748:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800374c:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f9b7 	bl	8002ac6 <readyUserInterface>
                    updateUserMsg(0,0,savedUserMsg,&displayUpdateStatus);
 8003758:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <initStateMachine+0x89c>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003760:	2100      	movs	r1, #0
 8003762:	2000      	movs	r0, #0
 8003764:	f7ff f991 	bl	8002a8a <updateUserMsg>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003768:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800376c:	3303      	adds	r3, #3
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fda6 	bl	80042c0 <setSelectSub>
 8003774:	4603      	mov	r3, r0
 8003776:	461a      	mov	r2, r3
 8003778:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800377c:	705a      	strb	r2, [r3, #1]
                    //display
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 800377e:	2001      	movs	r0, #1
 8003780:	f000 fd8c 	bl	800429c <getNextSub>
 8003784:	4603      	mov	r3, r0
 8003786:	461a      	mov	r2, r3
 8003788:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800378c:	70da      	strb	r2, [r3, #3]
                    sampleCount = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
                    i=0;
 8003794:	2300      	movs	r3, #0
 8003796:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800379a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800379e:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff f98e 	bl	8002ac6 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 80037aa:	234d      	movs	r3, #77	; 0x4d
 80037ac:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                }
            break;
 80037b0:	e072      	b.n	8003898 <initStateMachine+0x920>

            case CANCEL_SAVE:
                updateUserMsg(0,0,cancelUserMsg,&displayUpdateStatus);
 80037b2:	4b17      	ldr	r3, [pc, #92]	; (8003810 <initStateMachine+0x898>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80037ba:	2100      	movs	r1, #0
 80037bc:	2000      	movs	r0, #0
 80037be:	f7ff f964 	bl	8002a8a <updateUserMsg>
                key = getKeyPressed();
 80037c2:	f001 fb17 	bl	8004df4 <getKeyPressed>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

                if(key == AVANCAR)
 80037cc:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80037d0:	2b41      	cmp	r3, #65	; 0x41
 80037d2:	d121      	bne.n	8003818 <initStateMachine+0x8a0>
                {
                	resetKeyPressed();
 80037d4:	f001 fb1a 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80037d8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80037dc:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff f96f 	bl	8002ac6 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 80037e8:	200b      	movs	r0, #11
 80037ea:	f000 fd57 	bl	800429c <getNextSub>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80037f6:	70da      	strb	r2, [r3, #3]
 80037f8:	e04d      	b.n	8003896 <initStateMachine+0x91e>
 80037fa:	bf00      	nop
 80037fc:	2000003c 	.word	0x2000003c
 8003800:	0800b9d8 	.word	0x0800b9d8
 8003804:	20000040 	.word	0x20000040
 8003808:	20000044 	.word	0x20000044
 800380c:	20000048 	.word	0x20000048
 8003810:	20000050 	.word	0x20000050
 8003814:	2000004c 	.word	0x2000004c
                }
                else if(key == CONFIRMAR)
 8003818:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800381c:	2b43      	cmp	r3, #67	; 0x43
 800381e:	d13a      	bne.n	8003896 <initStateMachine+0x91e>
                {
                	resetKeyPressed();
 8003820:	f001 faf4 	bl	8004e0c <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003824:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003828:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff f949 	bl	8002ac6 <readyUserInterface>
                    updateUserMsg(0,0,canceledUserMsg,&displayUpdateStatus);
 8003834:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <initStateMachine+0x948>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	f207 134b 	addw	r3, r7, #331	; 0x14b
 800383c:	2100      	movs	r1, #0
 800383e:	2000      	movs	r0, #0
 8003840:	f7ff f923 	bl	8002a8a <updateUserMsg>
                    subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
 8003844:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003848:	3303      	adds	r3, #3
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fd38 	bl	80042c0 <setSelectSub>
 8003850:	4603      	mov	r3, r0
 8003852:	461a      	mov	r2, r3
 8003854:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003858:	705a      	strb	r2, [r3, #1]
                    sampleCount = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
                    i=0;
 8003860:	2300      	movs	r3, #0
 8003862:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
                    indexTest++;
 8003866:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800386a:	3301      	adds	r3, #1
 800386c:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
                    //
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8003870:	2001      	movs	r0, #1
 8003872:	f000 fd13 	bl	800429c <getNextSub>
 8003876:	4603      	mov	r3, r0
 8003878:	461a      	mov	r2, r3
 800387a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800387e:	70da      	strb	r2, [r3, #3]
  				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8003880:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003884:	f207 134b 	addw	r3, r7, #331	; 0x14b
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f91b 	bl	8002ac6 <readyUserInterface>
                    key = MENU; // ta errado mas coloquei aqui pra teste
 8003890:	234d      	movs	r3, #77	; 0x4d
 8003892:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                }
            break;
 8003896:	bf00      	nop
    while(key != MENU)
 8003898:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800389c:	2b4d      	cmp	r3, #77	; 0x4d
 800389e:	f47f abb8 	bne.w	8003012 <initStateMachine+0x9a>
        }
    }
    readyUserInterface(&displayUpdateStatus,cursorPosition);
 80038a2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80038a6:	f207 134b 	addw	r3, r7, #331	; 0x14b
 80038aa:	4611      	mov	r1, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff f90a 	bl	8002ac6 <readyUserInterface>
}
 80038b2:	bf00      	nop
 80038b4:	4618      	mov	r0, r3
 80038b6:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000054 	.word	0x20000054

080038c4 <startTM2>:
    unsigned char timeout;
    struct samples Measurement[MEASUREMENT_SIZE];
};

unsigned char startTM2(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
        SET_HW_TIMER2();
 80038c8:	f000 fd1c 	bl	8004304 <SET_HW_TIMER2>
}
 80038cc:	bf00      	nop
 80038ce:	4618      	mov	r0, r3
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <stopTM2>:

unsigned char stopTM2(void)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	af00      	add	r7, sp, #0
    RESET_HW_TIMER2();
 80038d6:	f000 fd37 	bl	8004348 <RESET_HW_TIMER2>
}
 80038da:	bf00      	nop
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}

080038e0 <startTM3>:

unsigned char startTM3(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
        SET_HW_TIMER3();
 80038e4:	f000 fd4e 	bl	8004384 <SET_HW_TIMER3>
//        resetTimer3Variable();
}
 80038e8:	bf00      	nop
 80038ea:	4618      	mov	r0, r3
 80038ec:	bd80      	pop	{r7, pc}

080038ee <stopTM3>:

unsigned char stopTM3(void)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	af00      	add	r7, sp, #0
    RESET_HW_TIMER3();
 80038f2:	f000 fd69 	bl	80043c8 <RESET_HW_TIMER3>
}
 80038f6:	bf00      	nop
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}

080038fc <printDataDisplay>:
{
//    RESET_HARDWARE();
}

unsigned char printDataDisplay(unsigned char col, unsigned char linha,unsigned char* userData)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	603a      	str	r2, [r7, #0]
 8003906:	71fb      	strb	r3, [r7, #7]
 8003908:	460b      	mov	r3, r1
 800390a:	71bb      	strb	r3, [r7, #6]
    HW_PRINT_DATA(col, linha,userData);
 800390c:	79b9      	ldrb	r1, [r7, #6]
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f84e 	bl	80039b4 <HW_PRINT_DATA>
}
 8003918:	bf00      	nop
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <eraseDataDisplay>:
	HW_INSERT_DATA(col, linha,userData);
}


unsigned char eraseDataDisplay()
{
 8003922:	b580      	push	{r7, lr}
 8003924:	af00      	add	r7, sp, #0
    HW_ERASE_DATA();
 8003926:	f000 f861 	bl	80039ec <HW_ERASE_DATA>
}
 800392a:	bf00      	nop
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}

08003930 <updateDataDisplay>:

unsigned char updateDataDisplay(unsigned char col, unsigned char linha)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	460a      	mov	r2, r1
 800393a:	71fb      	strb	r3, [r7, #7]
 800393c:	4613      	mov	r3, r2
 800393e:	71bb      	strb	r3, [r7, #6]
	HW_UPDATE_DATA(col,linha);
 8003940:	79ba      	ldrb	r2, [r7, #6]
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f85a 	bl	8003a00 <HW_UPDATE_DATA>
}
 800394c:	bf00      	nop
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <homeDataDisplay>:

unsigned char homeDataDisplay(unsigned char* appName,unsigned char* companyName,unsigned char* appVersion)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
//    printf("%s\n",appName);
//    printf("%s\n",companyName);
//    printf("%s\n",appVersion);
    HW_HOME_DISP(appName,companyName,appVersion);
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f86a 	bl	8003a40 <HW_HOME_DISP>

}
 800396c:	bf00      	nop
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <startCOMM>:


}

unsigned char startCOMM()
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
//    printf("SET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 800397c:	f001 fa54 	bl	8004e28 <getUARTInstance>
 8003980:	4603      	mov	r3, r0
 8003982:	607b      	str	r3, [r7, #4]
	SET_HW_UART(uartInstance);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fd3b 	bl	8004400 <SET_HW_UART>
}
 800398a:	bf00      	nop
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <stopCOMM>:

unsigned char stopCOMM()
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
//    printf("RESET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 800399a:	f001 fa45 	bl	8004e28 <getUARTInstance>
 800399e:	4603      	mov	r3, r0
 80039a0:	607b      	str	r3, [r7, #4]
	RESET_HW_UART(uartInstance);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fd40 	bl	8004428 <RESET_HW_UART>
}
 80039a8:	bf00      	nop
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HW_PRINT_DATA>:
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	603a      	str	r2, [r7, #0]
 80039be:	71fb      	strb	r3, [r7, #7]
 80039c0:	460b      	mov	r3, r1
 80039c2:	71bb      	strb	r3, [r7, #6]
 80039c4:	79ba      	ldrb	r2, [r7, #6]
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	4619      	mov	r1, r3
 80039ca:	4807      	ldr	r0, [pc, #28]	; (80039e8 <HW_PRINT_DATA+0x34>)
 80039cc:	f000 fb06 	bl	8003fdc <setCursor>
 80039d0:	20fa      	movs	r0, #250	; 0xfa
 80039d2:	f002 f9bf 	bl	8005d54 <HAL_Delay>
 80039d6:	6839      	ldr	r1, [r7, #0]
 80039d8:	4803      	ldr	r0, [pc, #12]	; (80039e8 <HW_PRINT_DATA+0x34>)
 80039da:	f000 f95b 	bl	8003c94 <print>
 80039de:	bf00      	nop
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	2000045c 	.word	0x2000045c

080039ec <HW_ERASE_DATA>:
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <HW_ERASE_DATA+0x10>)
 80039f2:	f000 f971 	bl	8003cd8 <clear>
 80039f6:	bf00      	nop
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	2000045c 	.word	0x2000045c

08003a00 <HW_UPDATE_DATA>:
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	460a      	mov	r2, r1
 8003a0a:	71fb      	strb	r3, [r7, #7]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	71bb      	strb	r3, [r7, #6]
 8003a10:	79ba      	ldrb	r2, [r7, #6]
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	4619      	mov	r1, r3
 8003a16:	4809      	ldr	r0, [pc, #36]	; (8003a3c <HW_UPDATE_DATA+0x3c>)
 8003a18:	f000 fae0 	bl	8003fdc <setCursor>
 8003a1c:	4807      	ldr	r0, [pc, #28]	; (8003a3c <HW_UPDATE_DATA+0x3c>)
 8003a1e:	f000 f99a 	bl	8003d56 <cursor>
 8003a22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a26:	f002 f995 	bl	8005d54 <HAL_Delay>
 8003a2a:	4804      	ldr	r0, [pc, #16]	; (8003a3c <HW_UPDATE_DATA+0x3c>)
 8003a2c:	f000 f97b 	bl	8003d26 <noCursor>
 8003a30:	bf00      	nop
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	2000045c 	.word	0x2000045c

08003a40 <HW_HOME_DISP>:
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	2204      	movs	r2, #4
 8003a50:	2110      	movs	r1, #16
 8003a52:	4812      	ldr	r0, [pc, #72]	; (8003a9c <HW_HOME_DISP+0x5c>)
 8003a54:	f000 f824 	bl	8003aa0 <begin>
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	480f      	ldr	r0, [pc, #60]	; (8003a9c <HW_HOME_DISP+0x5c>)
 8003a5e:	f000 fabd 	bl	8003fdc <setCursor>
 8003a62:	68f9      	ldr	r1, [r7, #12]
 8003a64:	480d      	ldr	r0, [pc, #52]	; (8003a9c <HW_HOME_DISP+0x5c>)
 8003a66:	f000 f915 	bl	8003c94 <print>
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	480b      	ldr	r0, [pc, #44]	; (8003a9c <HW_HOME_DISP+0x5c>)
 8003a70:	f000 fab4 	bl	8003fdc <setCursor>
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4809      	ldr	r0, [pc, #36]	; (8003a9c <HW_HOME_DISP+0x5c>)
 8003a78:	f000 f90c 	bl	8003c94 <print>
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4806      	ldr	r0, [pc, #24]	; (8003a9c <HW_HOME_DISP+0x5c>)
 8003a82:	f000 faab 	bl	8003fdc <setCursor>
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4804      	ldr	r0, [pc, #16]	; (8003a9c <HW_HOME_DISP+0x5c>)
 8003a8a:	f000 f903 	bl	8003c94 <print>
 8003a8e:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <HW_HOME_DISP+0x5c>)
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000045c 	.word	0x2000045c

08003aa0 <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	4611      	mov	r1, r2
 8003aac:	461a      	mov	r2, r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	70fb      	strb	r3, [r7, #3]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	70bb      	strb	r3, [r7, #2]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 8003aba:	f107 0308 	add.w	r3, r7, #8
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f107 0308 	add.w	r3, r7, #8
 8003acc:	cb03      	ldmia	r3!, {r0, r1}
 8003ace:	6010      	str	r0, [r2, #0]
 8003ad0:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ad8:	486c      	ldr	r0, [pc, #432]	; (8003c8c <begin+0x1ec>)
 8003ada:	f002 fe8f 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ae4:	4869      	ldr	r0, [pc, #420]	; (8003c8c <begin+0x1ec>)
 8003ae6:	f002 fe89 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8003aea:	2200      	movs	r2, #0
 8003aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003af0:	4866      	ldr	r0, [pc, #408]	; (8003c8c <begin+0x1ec>)
 8003af2:	f002 fe83 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8003af6:	2200      	movs	r2, #0
 8003af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003afc:	4863      	ldr	r0, [pc, #396]	; (8003c8c <begin+0x1ec>)
 8003afe:	f002 fe7d 	bl	80067fc <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2108      	movs	r1, #8
 8003b06:	4861      	ldr	r0, [pc, #388]	; (8003c8c <begin+0x1ec>)
 8003b08:	f002 fe78 	bl	80067fc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b12:	485f      	ldr	r0, [pc, #380]	; (8003c90 <begin+0x1f0>)
 8003b14:	f002 fe72 	bl	80067fc <HAL_GPIO_WritePin>

	#if defined(LCD_8BITMODE)
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,GPIO_PIN_RESET);
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b1e:	485c      	ldr	r0, [pc, #368]	; (8003c90 <begin+0x1f0>)
 8003b20:	f002 fe6c 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,GPIO_PIN_RESET);
 8003b24:	2200      	movs	r2, #0
 8003b26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b2a:	4859      	ldr	r0, [pc, #356]	; (8003c90 <begin+0x1f0>)
 8003b2c:	f002 fe66 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,GPIO_PIN_RESET);
 8003b30:	2200      	movs	r2, #0
 8003b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b36:	4856      	ldr	r0, [pc, #344]	; (8003c90 <begin+0x1f0>)
 8003b38:	f002 fe60 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,GPIO_PIN_RESET);
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b42:	4853      	ldr	r0, [pc, #332]	; (8003c90 <begin+0x1f0>)
 8003b44:	f002 fe5a 	bl	80067fc <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b4e:	4850      	ldr	r0, [pc, #320]	; (8003c90 <begin+0x1f0>)
 8003b50:	f002 fe54 	bl	80067fc <HAL_GPIO_WritePin>
	#endif

	if (lines > 1) {
 8003b54:	78bb      	ldrb	r3, [r7, #2]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d906      	bls.n	8003b68 <begin+0xc8>
		lcd->_displayfunction |= LCD_2LINE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	f043 0308 	orr.w	r3, r3, #8
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	78ba      	ldrb	r2, [r7, #2]
 8003b6c:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	3340      	adds	r3, #64	; 0x40
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	4613      	mov	r3, r2
 8003b78:	2240      	movs	r2, #64	; 0x40
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fa11 	bl	8003fa4 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8003b82:	787b      	ldrb	r3, [r7, #1]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <begin+0xfc>
 8003b88:	78bb      	ldrb	r3, [r7, #2]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d106      	bne.n	8003b9c <begin+0xfc>
		lcd->_displayfunction |= LCD_5x10DOTS;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	f043 0304 	orr.w	r3, r3, #4
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 8003b9c:	2032      	movs	r0, #50	; 0x32
 8003b9e:	f002 f8d9 	bl	8005d54 <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2108      	movs	r1, #8
 8003ba6:	4839      	ldr	r0, [pc, #228]	; (8003c8c <begin+0x1ec>)
 8003ba8:	f002 fe28 	bl	80067fc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003bac:	2200      	movs	r2, #0
 8003bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bb2:	4837      	ldr	r0, [pc, #220]	; (8003c90 <begin+0x1f0>)
 8003bb4:	f002 fe22 	bl	80067fc <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bbe:	4834      	ldr	r0, [pc, #208]	; (8003c90 <begin+0x1f0>)
 8003bc0:	f002 fe1c 	bl	80067fc <HAL_GPIO_WritePin>
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <begin+0x158>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 8003bcc:	2003      	movs	r0, #3
 8003bce:	f000 f933 	bl	8003e38 <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 8003bd2:	2005      	movs	r0, #5
 8003bd4:	f002 f8be 	bl	8005d54 <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 8003bd8:	2003      	movs	r0, #3
 8003bda:	f000 f92d 	bl	8003e38 <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 8003bde:	2005      	movs	r0, #5
 8003be0:	f002 f8b8 	bl	8005d54 <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 8003be4:	2003      	movs	r0, #3
 8003be6:	f000 f927 	bl	8003e38 <write4bits>
		HAL_Delay(5);
 8003bea:	2005      	movs	r0, #5
 8003bec:	f002 f8b2 	bl	8005d54 <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 8003bf0:	2002      	movs	r0, #2
 8003bf2:	f000 f921 	bl	8003e38 <write4bits>
 8003bf6:	e023      	b.n	8003c40 <begin+0x1a0>

		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 23, pg 45 

		// Envia sequência de comando
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	f043 0320 	orr.w	r3, r3, #32
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f9bd 	bl	8003f84 <command>
		HAL_Delay(6);  // wait more than 4.1 ms
 8003c0a:	2006      	movs	r0, #6
 8003c0c:	f002 f8a2 	bl	8005d54 <HAL_Delay>

		// Segundo envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	f043 0320 	orr.w	r3, r3, #32
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f9b1 	bl	8003f84 <command>
		HAL_Delay(1);
 8003c22:	2001      	movs	r0, #1
 8003c24:	f002 f896 	bl	8005d54 <HAL_Delay>

		// Terceiro envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	f043 0320 	orr.w	r3, r3, #32
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	4619      	mov	r1, r3
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f9a5 	bl	8003f84 <command>
		HAL_Delay(1);
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	f002 f88a 	bl	8005d54 <HAL_Delay>
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	f043 0320 	orr.w	r3, r3, #32
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f999 	bl	8003f84 <command>
    HAL_Delay(1);
 8003c52:	2001      	movs	r0, #1
 8003c54:	f002 f87e 	bl	8005d54 <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	705a      	strb	r2, [r3, #1]
    display(lcd);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f849 	bl	8003cf6 <display>

    // Limpa display
    clear(lcd);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f837 	bl	8003cd8 <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	789b      	ldrb	r3, [r3, #2]
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f981 	bl	8003f84 <command>
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40010c00 	.word	0x40010c00
 8003c90:	40010800 	.word	0x40010800

08003c94 <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 8003c9e:	6838      	ldr	r0, [r7, #0]
 8003ca0:	f7fc fa54 	bl	800014c <strlen>
 8003ca4:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
 8003caa:	e00c      	b.n	8003cc6 <print+0x32>
		write(lcd ,*(value+i));
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f863 	bl	8003d86 <write>
	for (uint8_t i = 0; i < Lengh; i++){
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d8ee      	bhi.n	8003cac <print+0x18>
	}
}
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f94e 	bl	8003f84 <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 8003ce8:	2002      	movs	r0, #2
 8003cea:	f002 f833 	bl	8005d54 <HAL_Delay>
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	785b      	ldrb	r3, [r3, #1]
 8003d02:	f043 0304 	orr.w	r3, r3, #4
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	785b      	ldrb	r3, [r3, #1]
 8003d10:	f043 0308 	orr.w	r3, r3, #8
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	4619      	mov	r1, r3
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f933 	bl	8003f84 <command>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <noCursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void noCursor(LiquidCrystal *lcd){
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol &= ~LCD_CURSORON;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	785b      	ldrb	r3, [r3, #1]
 8003d32:	f023 0302 	bic.w	r3, r3, #2
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	f043 0308 	orr.w	r3, r3, #8
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f91b 	bl	8003f84 <command>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <cursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void cursor(LiquidCrystal *lcd){
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol |= LCD_CURSORON;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	785b      	ldrb	r3, [r3, #1]
 8003d62:	f043 0302 	orr.w	r3, r3, #2
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	f043 0308 	orr.w	r3, r3, #8
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f903 	bl	8003f84 <command>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	2201      	movs	r2, #1
 8003d96:	4619      	mov	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f805 	bl	8003da8 <send>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
 8003db4:	4613      	mov	r3, r2
 8003db6:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 8003db8:	78bb      	ldrb	r3, [r7, #2]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2108      	movs	r1, #8
 8003dbe:	4811      	ldr	r0, [pc, #68]	; (8003e04 <send+0x5c>)
 8003dc0:	f002 fd1c 	bl	80067fc <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dca:	480f      	ldr	r0, [pc, #60]	; (8003e08 <send+0x60>)
 8003dcc:	f002 fd16 	bl	80067fc <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <send+0x3e>
	    write8bits(value);
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f866 	bl	8003eb0 <write8bits>
	    write4bits(value);
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 8003de4:	e009      	b.n	8003dfa <send+0x52>
	    write4bits(value>>4);
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f823 	bl	8003e38 <write4bits>
	    write4bits(value);
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f81f 	bl	8003e38 <write4bits>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40010c00 	.word	0x40010c00
 8003e08:	40010800 	.word	0x40010800

08003e0c <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8003e10:	2201      	movs	r2, #1
 8003e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e16:	4807      	ldr	r0, [pc, #28]	; (8003e34 <pulseEnable+0x28>)
 8003e18:	f002 fcf0 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f001 ff99 	bl	8005d54 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003e22:	2200      	movs	r2, #0
 8003e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <pulseEnable+0x28>)
 8003e2a:	f002 fce7 	bl	80067fc <HAL_GPIO_WritePin>
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40010800 	.word	0x40010800

08003e38 <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e50:	4816      	ldr	r0, [pc, #88]	; (8003eac <write4bits+0x74>)
 8003e52:	f002 fcd3 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e68:	4810      	ldr	r0, [pc, #64]	; (8003eac <write4bits+0x74>)
 8003e6a:	f002 fcc7 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	089b      	lsrs	r3, r3, #2
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e80:	480a      	ldr	r0, [pc, #40]	; (8003eac <write4bits+0x74>)
 8003e82:	f002 fcbb 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	08db      	lsrs	r3, r3, #3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e98:	4804      	ldr	r0, [pc, #16]	; (8003eac <write4bits+0x74>)
 8003e9a:	f002 fcaf 	bl	80067fc <HAL_GPIO_WritePin>

	pulseEnable();
 8003e9e:	f7ff ffb5 	bl	8003e0c <pulseEnable>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40010c00 	.word	0x40010c00

08003eb0 <write8bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write8bits(uint8_t value){
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,(value >> 0) & 0x01);
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ec8:	482c      	ldr	r0, [pc, #176]	; (8003f7c <write8bits+0xcc>)
 8003eca:	f002 fc97 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,(value >> 1) & 0x01);
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ee0:	4826      	ldr	r0, [pc, #152]	; (8003f7c <write8bits+0xcc>)
 8003ee2:	f002 fc8b 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,(value >> 2) & 0x01);
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	089b      	lsrs	r3, r3, #2
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ef8:	4820      	ldr	r0, [pc, #128]	; (8003f7c <write8bits+0xcc>)
 8003efa:	f002 fc7f 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,(value >> 3) & 0x01);
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	08db      	lsrs	r3, r3, #3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f10:	481a      	ldr	r0, [pc, #104]	; (8003f7c <write8bits+0xcc>)
 8003f12:	f002 fc73 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 4) & 0x01);
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f28:	4815      	ldr	r0, [pc, #84]	; (8003f80 <write8bits+0xd0>)
 8003f2a:	f002 fc67 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 5) & 0x01);
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f40:	480f      	ldr	r0, [pc, #60]	; (8003f80 <write8bits+0xd0>)
 8003f42:	f002 fc5b 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 6) & 0x01);
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	099b      	lsrs	r3, r3, #6
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f58:	4809      	ldr	r0, [pc, #36]	; (8003f80 <write8bits+0xd0>)
 8003f5a:	f002 fc4f 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 7) & 0x01);
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	09db      	lsrs	r3, r3, #7
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f6a:	4805      	ldr	r0, [pc, #20]	; (8003f80 <write8bits+0xd0>)
 8003f6c:	f002 fc46 	bl	80067fc <HAL_GPIO_WritePin>

	pulseEnable();
 8003f70:	f7ff ff4c 	bl	8003e0c <pulseEnable>

}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40010800 	.word	0x40010800
 8003f80:	40010c00 	.word	0x40010c00

08003f84 <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	2200      	movs	r2, #0
 8003f94:	4619      	mov	r1, r3
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff ff06 	bl	8003da8 <send>
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	71da      	strb	r2, [r3, #7]
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 8003fec:	2304      	movs	r3, #4
 8003fee:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 8003ff0:	78bb      	ldrb	r3, [r7, #2]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d803      	bhi.n	8004000 <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	78db      	ldrb	r3, [r3, #3]
 8004004:	78ba      	ldrb	r2, [r7, #2]
 8004006:	429a      	cmp	r2, r3
 8004008:	d303      	bcc.n	8004012 <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	78db      	ldrb	r3, [r3, #3]
 800400e:	3b01      	subs	r3, #1
 8004010:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 8004012:	78bb      	ldrb	r3, [r7, #2]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	791a      	ldrb	r2, [r3, #4]
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	4413      	add	r3, r2
 800401e:	b2db      	uxtb	r3, r3
 8004020:	b25b      	sxtb	r3, r3
 8004022:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004026:	b25b      	sxtb	r3, r3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	4619      	mov	r1, r3
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ffa9 	bl	8003f84 <command>
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <startReadingOutsideSensor>:
};

static struct results measuredData;

unsigned char startReadingOutsideSensor()
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b096      	sub	sp, #88	; 0x58
 8004040:	af00      	add	r7, sp, #0
	unsigned char userState = REPOUSO;
 8004042:	2332      	movs	r3, #50	; 0x32
 8004044:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	unsigned char sensorFlag;
	unsigned int referenceTime,currentTime,totalTime,spentTimeVoo,spentTimeSolo = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	64bb      	str	r3, [r7, #72]	; 0x48
	unsigned int contatoTime[5] = {0,0,0,0,0};
 800404c:	f107 0314 	add.w	r3, r7, #20
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]
	unsigned int vooTime[5]= {0,0,0,0,0};
 800405c:	463b      	mov	r3, r7
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	605a      	str	r2, [r3, #4]
 8004064:	609a      	str	r2, [r3, #8]
 8004066:	60da      	str	r2, [r3, #12]
 8004068:	611a      	str	r2, [r3, #16]
	unsigned char key = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	unsigned char samples = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46


	unsigned char indexTest = getResultTestNumber();
 8004076:	f7fd fe9b 	bl	8001db0 <getResultTestNumber>
 800407a:	4603      	mov	r3, r0
 800407c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	unsigned long int userTime = getUserTime();
 8004080:	f7fd fd8c 	bl	8001b9c <getUserTime>
 8004084:	6438      	str	r0, [r7, #64]	; 0x40
//	unsigned int timeMin = getTimeAltMin();
//	unsigned int timeMax = getTimeAltMax();
	unsigned int timeMin = 2000;
 8004086:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned int timeMax = 5000;
 800408c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004090:	63bb      	str	r3, [r7, #56]	; 0x38
//	userTime = userTime/100;
	key = getKeyPressed();
 8004092:	f000 feaf 	bl	8004df4 <getKeyPressed>
 8004096:	4603      	mov	r3, r0
 8004098:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

//	while(key != PARAR && totalTime != userTime)
	while(key != PARAR)
 800409c:	e092      	b.n	80041c4 <startReadingOutsideSensor+0x188>
	{
		totalTime = getTimer3Variable();
 800409e:	f000 feed 	bl	8004e7c <getTimer3Variable>
 80040a2:	4603      	mov	r3, r0
 80040a4:	64fb      	str	r3, [r7, #76]	; 0x4c
		key = getKeyPressed();
 80040a6:	f000 fea5 	bl	8004df4 <getKeyPressed>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch(userState)
 80040b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80040b4:	2b34      	cmp	r3, #52	; 0x34
 80040b6:	d037      	beq.n	8004128 <startReadingOutsideSensor+0xec>
 80040b8:	2b34      	cmp	r3, #52	; 0x34
 80040ba:	f300 8083 	bgt.w	80041c4 <startReadingOutsideSensor+0x188>
 80040be:	2b32      	cmp	r3, #50	; 0x32
 80040c0:	d002      	beq.n	80040c8 <startReadingOutsideSensor+0x8c>
 80040c2:	2b33      	cmp	r3, #51	; 0x33
 80040c4:	d015      	beq.n	80040f2 <startReadingOutsideSensor+0xb6>
 80040c6:	e07d      	b.n	80041c4 <startReadingOutsideSensor+0x188>
		{
			case REPOUSO:
				sensorFlag = getTimer2Variable();
 80040c8:	f000 fecc 	bl	8004e64 <getTimer2Variable>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(sensorFlag == 0)
 80040d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d107      	bne.n	80040ea <startReadingOutsideSensor+0xae>
				{
					userState = CONTATO;
 80040da:	2333      	movs	r3, #51	; 0x33
 80040dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					referenceTime = getTimer3Variable();
 80040e0:	f000 fecc 	bl	8004e7c <getTimer3Variable>
 80040e4:	4603      	mov	r3, r0
 80040e6:	653b      	str	r3, [r7, #80]	; 0x50
 80040e8:	e06c      	b.n	80041c4 <startReadingOutsideSensor+0x188>
				}
				else userState = REPOUSO;
 80040ea:	2332      	movs	r3, #50	; 0x32
 80040ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

			break;
 80040f0:	e068      	b.n	80041c4 <startReadingOutsideSensor+0x188>

			case CONTATO:
				sensorFlag = getTimer2Variable();
 80040f2:	f000 feb7 	bl	8004e64 <getTimer2Variable>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(sensorFlag == 1)
 80040fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004100:	2b01      	cmp	r3, #1
 8004102:	d10d      	bne.n	8004120 <startReadingOutsideSensor+0xe4>
				{
					userState = VOO;
 8004104:	2334      	movs	r3, #52	; 0x34
 8004106:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentTime = getTimer3Variable();
 800410a:	f000 feb7 	bl	8004e7c <getTimer3Variable>
 800410e:	4603      	mov	r3, r0
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
					spentTimeSolo = currentTime-referenceTime;
 8004112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	64bb      	str	r3, [r7, #72]	; 0x48
//					contatoTime[samples] = currentTime-referenceTime;
					referenceTime = currentTime;
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	653b      	str	r3, [r7, #80]	; 0x50
 800411e:	e051      	b.n	80041c4 <startReadingOutsideSensor+0x188>
				}
				else
				{
//					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
					userState = CONTATO;
 8004120:	2333      	movs	r3, #51	; 0x33
 8004122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}

			break;
 8004126:	e04d      	b.n	80041c4 <startReadingOutsideSensor+0x188>

			case VOO:
				sensorFlag = getTimer2Variable();
 8004128:	f000 fe9c 	bl	8004e64 <getTimer2Variable>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(sensorFlag == 0)
 8004132:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004136:	2b00      	cmp	r3, #0
 8004138:	d140      	bne.n	80041bc <startReadingOutsideSensor+0x180>
				{
					userState = CONTATO;
 800413a:	2333      	movs	r3, #51	; 0x33
 800413c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentTime = getTimer3Variable();
 8004140:	f000 fe9c 	bl	8004e7c <getTimer3Variable>
 8004144:	4603      	mov	r3, r0
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
					spentTimeVoo= currentTime - referenceTime;
 8004148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800414a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
					if(spentTimeVoo<timeMin)
 8004150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004154:	429a      	cmp	r2, r3
 8004156:	d20a      	bcs.n	800416e <startReadingOutsideSensor+0x132>
					{
						//leitura invalida
//						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
						contatoTime[samples] = 0;
 8004158:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	3358      	adds	r3, #88	; 0x58
 8004160:	443b      	add	r3, r7
 8004162:	2200      	movs	r2, #0
 8004164:	f843 2c44 	str.w	r2, [r3, #-68]
						referenceTime = currentTime;
 8004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416a:	653b      	str	r3, [r7, #80]	; 0x50
 800416c:	e029      	b.n	80041c2 <startReadingOutsideSensor+0x186>

					}
					else if(spentTimeVoo>timeMax)
 800416e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	429a      	cmp	r2, r3
 8004174:	d90a      	bls.n	800418c <startReadingOutsideSensor+0x150>
					{
						contatoTime[samples] = 0;
 8004176:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	3358      	adds	r3, #88	; 0x58
 800417e:	443b      	add	r3, r7
 8004180:	2200      	movs	r2, #0
 8004182:	f843 2c44 	str.w	r2, [r3, #-68]
						referenceTime = currentTime;
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	653b      	str	r3, [r7, #80]	; 0x50
 800418a:	e01a      	b.n	80041c2 <startReadingOutsideSensor+0x186>
//						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
						//leitura invalida
					}
					else
					{
						vooTime[samples] = spentTimeVoo;
 800418c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	3358      	adds	r3, #88	; 0x58
 8004194:	443b      	add	r3, r7
 8004196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004198:	f843 2c58 	str.w	r2, [r3, #-88]
						contatoTime[samples] = spentTimeSolo;
 800419c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	3358      	adds	r3, #88	; 0x58
 80041a4:	443b      	add	r3, r7
 80041a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041a8:	f843 2c44 	str.w	r2, [r3, #-68]
						referenceTime = currentTime;
 80041ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ae:	653b      	str	r3, [r7, #80]	; 0x50
						samples++;
 80041b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80041b4:	3301      	adds	r3, #1
 80041b6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80041ba:	e002      	b.n	80041c2 <startReadingOutsideSensor+0x186>
					}
				}
				else
				{
//					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
					userState = VOO;
 80041bc:	2334      	movs	r3, #52	; 0x34
 80041be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			break;
 80041c2:	bf00      	nop
	while(key != PARAR)
 80041c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041c8:	2b50      	cmp	r3, #80	; 0x50
 80041ca:	f47f af68 	bne.w	800409e <startReadingOutsideSensor+0x62>

		}
	}

	if(totalTime == userTime)
 80041ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d109      	bne.n	80041ea <startReadingOutsideSensor+0x1ae>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80041d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041da:	482a      	ldr	r0, [pc, #168]	; (8004284 <startReadingOutsideSensor+0x248>)
 80041dc:	f002 fb26 	bl	800682c <HAL_GPIO_TogglePin>
		measuredData.timeout = TRUE;
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <startReadingOutsideSensor+0x24c>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	70da      	strb	r2, [r3, #3]
		return TIMEOUT;
 80041e6:	2335      	movs	r3, #53	; 0x35
 80041e8:	e048      	b.n	800427c <startReadingOutsideSensor+0x240>
	}

	else
	{
		measuredData.timeout = FALSE;
 80041ea:	4b27      	ldr	r3, [pc, #156]	; (8004288 <startReadingOutsideSensor+0x24c>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	70da      	strb	r2, [r3, #3]
		measuredData.resultTestAcquiredSamples = samples;
 80041f0:	4a25      	ldr	r2, [pc, #148]	; (8004288 <startReadingOutsideSensor+0x24c>)
 80041f2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80041f6:	7053      	strb	r3, [r2, #1]
		for(unsigned i=0;i<samples;i++)
 80041f8:	2300      	movs	r3, #0
 80041fa:	637b      	str	r3, [r7, #52]	; 0x34
 80041fc:	bf00      	nop
 80041fe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004204:	429a      	cmp	r2, r3
 8004206:	d239      	bcs.n	800427c <startReadingOutsideSensor+0x240>
		{
			measuredData.Measurement[i].sampleNum = i+1;
 8004208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	b2d8      	uxtb	r0, r3
 8004210:	491d      	ldr	r1, [pc, #116]	; (8004288 <startReadingOutsideSensor+0x24c>)
 8004212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004214:	4613      	mov	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	3304      	adds	r3, #4
 8004220:	4602      	mov	r2, r0
 8004222:	701a      	strb	r2, [r3, #0]
			measuredData.Measurement[i].uiVooTime = vooTime[i]*100;
 8004224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	3358      	adds	r3, #88	; 0x58
 800422a:	443b      	add	r3, r7
 800422c:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8004230:	2264      	movs	r2, #100	; 0x64
 8004232:	fb02 f103 	mul.w	r1, r2, r3
 8004236:	4814      	ldr	r0, [pc, #80]	; (8004288 <startReadingOutsideSensor+0x24c>)
 8004238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800423a:	4613      	mov	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4403      	add	r3, r0
 8004244:	3308      	adds	r3, #8
 8004246:	6019      	str	r1, [r3, #0]
			measuredData.Measurement[i].uiSoloTime = contatoTime[i]*100;
 8004248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	3358      	adds	r3, #88	; 0x58
 800424e:	443b      	add	r3, r7
 8004250:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004254:	2264      	movs	r2, #100	; 0x64
 8004256:	fb02 f103 	mul.w	r1, r2, r3
 800425a:	480b      	ldr	r0, [pc, #44]	; (8004288 <startReadingOutsideSensor+0x24c>)
 800425c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800425e:	4613      	mov	r3, r2
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4403      	add	r3, r0
 8004268:	330c      	adds	r3, #12
 800426a:	6019      	str	r1, [r3, #0]
			setUserResultData(&measuredData,indexTest);
 800426c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004270:	4619      	mov	r1, r3
 8004272:	4805      	ldr	r0, [pc, #20]	; (8004288 <startReadingOutsideSensor+0x24c>)
 8004274:	f7fd fdb6 	bl	8001de4 <setUserResultData>
			return PARAR;
 8004278:	2350      	movs	r3, #80	; 0x50
 800427a:	e7ff      	b.n	800427c <startReadingOutsideSensor+0x240>
		}
	}
}
 800427c:	4618      	mov	r0, r3
 800427e:	3758      	adds	r7, #88	; 0x58
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40011000 	.word	0x40011000
 8004288:	20000464 	.word	0x20000464

0800428c <startReadingInsideSensor>:

unsigned char startReadingInsideSensor()
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
//
//			start_dentro_state = CONTATO;
//		break;
//	}

}
 8004290:	bf00      	nop
 8004292:	4618      	mov	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
	...

0800429c <getNextSub>:

struct Menu menuSub ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextSub(unsigned char nextState)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
    menuSub.menuNext = nextState;
 80042a6:	4a05      	ldr	r2, [pc, #20]	; (80042bc <getNextSub+0x20>)
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	7013      	strb	r3, [r2, #0]
    return menuSub.menuNext;
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <getNextSub+0x20>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	200004a4 	.word	0x200004a4

080042c0 <setSelectSub>:

unsigned char setSelectSub(unsigned char *selectedState)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    unsigned char state = *selectedState;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	73fb      	strb	r3, [r7, #15]
    menuSub.menuSelect = state;
 80042ce:	4a05      	ldr	r2, [pc, #20]	; (80042e4 <setSelectSub+0x24>)
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	7053      	strb	r3, [r2, #1]
    return menuSub.menuSelect;
 80042d4:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <setSelectSub+0x24>)
 80042d6:	785b      	ldrb	r3, [r3, #1]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	200004a4 	.word	0x200004a4

080042e8 <setInsertData>:

unsigned char setInsertData(struct dataInsert* dataToInsert)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
    struct dataInsert* userDataInput = dataToInsert;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60fb      	str	r3, [r7, #12]
    setUserInputConfigData(userDataInput);
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f7fd fcfd 	bl	8001cf4 <setUserInputConfigData>
}
 80042fa:	bf00      	nop
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <SET_HW_TIMER2>:

static unsigned char encoderStatus;
static unsigned char timerStatus;

unsigned char SET_HW_TIMER2(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
	encoderStatus = 0;
 800430a:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <SET_HW_TIMER2+0x40>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
//	TIM_HandleTypeDef* htim2 =  getTimer2Instance();
	unsigned char* htim2 =  getTimer2Instance();
 8004310:	f000 fd94 	bl	8004e3c <getTimer2Instance>
 8004314:	4603      	mov	r3, r0
 8004316:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Start_IT(htim2, TIM_CHANNEL_ALL);
 8004318:	213c      	movs	r1, #60	; 0x3c
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f003 fc4c 	bl	8007bb8 <HAL_TIM_Encoder_Start_IT>
 8004320:	4603      	mov	r3, r0
 8004322:	461a      	mov	r2, r3
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <SET_HW_TIMER2+0x40>)
 8004326:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004328:	2064      	movs	r0, #100	; 0x64
 800432a:	f001 fd13 	bl	8005d54 <HAL_Delay>
	return !encoderStatus;
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <SET_HW_TIMER2+0x40>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf0c      	ite	eq
 8004336:	2301      	moveq	r3, #1
 8004338:	2300      	movne	r3, #0
 800433a:	b2db      	uxtb	r3, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200004c8 	.word	0x200004c8

08004348 <RESET_HW_TIMER2>:

unsigned char RESET_HW_TIMER2(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
    encoderStatus = 1;
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <RESET_HW_TIMER2+0x38>)
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
//    TIM_HandleTypeDef* htim2 =  getTimer2Instance();
    unsigned char* htim2 =  getTimer2Instance();
 8004354:	f000 fd72 	bl	8004e3c <getTimer2Instance>
 8004358:	4603      	mov	r3, r0
 800435a:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Stop_IT(htim2, TIM_CHANNEL_ALL);
 800435c:	213c      	movs	r1, #60	; 0x3c
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f003 fcd8 	bl	8007d14 <HAL_TIM_Encoder_Stop_IT>
 8004364:	4603      	mov	r3, r0
 8004366:	461a      	mov	r2, r3
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <RESET_HW_TIMER2+0x38>)
 800436a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800436c:	2064      	movs	r0, #100	; 0x64
 800436e:	f001 fcf1 	bl	8005d54 <HAL_Delay>
	return encoderStatus;
 8004372:	4b03      	ldr	r3, [pc, #12]	; (8004380 <RESET_HW_TIMER2+0x38>)
 8004374:	781b      	ldrb	r3, [r3, #0]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	200004c8 	.word	0x200004c8

08004384 <SET_HW_TIMER3>:

unsigned char SET_HW_TIMER3(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
    timerStatus = 0;
 800438a:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <SET_HW_TIMER3+0x40>)
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8004390:	f000 fd5e 	bl	8004e50 <getTimer3Instance>
 8004394:	4603      	mov	r3, r0
 8004396:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Start_IT(htim3);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f003 faeb 	bl	8007974 <HAL_TIM_Base_Start_IT>
 800439e:	4603      	mov	r3, r0
 80043a0:	461a      	mov	r2, r3
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <SET_HW_TIMER3+0x40>)
 80043a4:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 80043a6:	2064      	movs	r0, #100	; 0x64
 80043a8:	f001 fcd4 	bl	8005d54 <HAL_Delay>
    return !timerStatus;
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <SET_HW_TIMER3+0x40>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200004c9 	.word	0x200004c9

080043c8 <RESET_HW_TIMER3>:

unsigned char RESET_HW_TIMER3(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
    timerStatus = 1;
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <RESET_HW_TIMER3+0x34>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 80043d4:	f000 fd3c 	bl	8004e50 <getTimer3Instance>
 80043d8:	4603      	mov	r3, r0
 80043da:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Stop_IT(htim3);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f003 fb1b 	bl	8007a18 <HAL_TIM_Base_Stop_IT>
 80043e2:	4603      	mov	r3, r0
 80043e4:	461a      	mov	r2, r3
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <RESET_HW_TIMER3+0x34>)
 80043e8:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 80043ea:	2064      	movs	r0, #100	; 0x64
 80043ec:	f001 fcb2 	bl	8005d54 <HAL_Delay>
    return timerStatus;
 80043f0:	4b02      	ldr	r3, [pc, #8]	; (80043fc <RESET_HW_TIMER3+0x34>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	200004c9 	.word	0x200004c9

08004400 <SET_HW_UART>:
#include "UARTHW.h"
#include "main.h"


unsigned char SET_HW_UART(unsigned char* addr)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	60fb      	str	r3, [r7, #12]
    __HAL_UART_ENABLE(instance);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800441a:	60da      	str	r2, [r3, #12]
}
 800441c:	bf00      	nop
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <RESET_HW_UART>:

unsigned char RESET_HW_UART(unsigned char* addr)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60fb      	str	r3, [r7, #12]
    __HAL_UART_DISABLE(instance);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004442:	60da      	str	r2, [r3, #12]
}
 8004444:	bf00      	nop
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8004454:	2200      	movs	r2, #0
 8004456:	2110      	movs	r1, #16
 8004458:	4803      	ldr	r0, [pc, #12]	; (8004468 <SELECT+0x18>)
 800445a:	f002 f9cf 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800445e:	2001      	movs	r0, #1
 8004460:	f001 fc78 	bl	8005d54 <HAL_Delay>
}
 8004464:	bf00      	nop
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40010800 	.word	0x40010800

0800446c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004470:	2201      	movs	r2, #1
 8004472:	2110      	movs	r1, #16
 8004474:	4803      	ldr	r0, [pc, #12]	; (8004484 <DESELECT+0x18>)
 8004476:	f002 f9c1 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800447a:	2001      	movs	r0, #1
 800447c:	f001 fc6a 	bl	8005d54 <HAL_Delay>
}
 8004480:	bf00      	nop
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40010800 	.word	0x40010800

08004488 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004492:	bf00      	nop
 8004494:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <SPI_TxByte+0x30>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d1f8      	bne.n	8004494 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80044a2:	1df9      	adds	r1, r7, #7
 80044a4:	2364      	movs	r3, #100	; 0x64
 80044a6:	2201      	movs	r2, #1
 80044a8:	4803      	ldr	r0, [pc, #12]	; (80044b8 <SPI_TxByte+0x30>)
 80044aa:	f002 fe8f 	bl	80071cc <HAL_SPI_Transmit>
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	200004cc 	.word	0x200004cc

080044bc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80044c8:	bf00      	nop
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <SPI_TxBuffer+0x30>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d1f8      	bne.n	80044ca <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80044d8:	887a      	ldrh	r2, [r7, #2]
 80044da:	2364      	movs	r3, #100	; 0x64
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4803      	ldr	r0, [pc, #12]	; (80044ec <SPI_TxBuffer+0x30>)
 80044e0:	f002 fe74 	bl	80071cc <HAL_SPI_Transmit>
}
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	200004cc 	.word	0x200004cc

080044f0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80044f6:	23ff      	movs	r3, #255	; 0xff
 80044f8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80044fa:	bf00      	nop
 80044fc:	4b09      	ldr	r3, [pc, #36]	; (8004524 <SPI_RxByte+0x34>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b02      	cmp	r3, #2
 8004508:	d1f8      	bne.n	80044fc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800450a:	1dba      	adds	r2, r7, #6
 800450c:	1df9      	adds	r1, r7, #7
 800450e:	2364      	movs	r3, #100	; 0x64
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2301      	movs	r3, #1
 8004514:	4803      	ldr	r0, [pc, #12]	; (8004524 <SPI_RxByte+0x34>)
 8004516:	f002 ff95 	bl	8007444 <HAL_SPI_TransmitReceive>

	return data;
 800451a:	79bb      	ldrb	r3, [r7, #6]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	200004cc 	.word	0x200004cc

08004528 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8004530:	f7ff ffde 	bl	80044f0 <SPI_RxByte>
 8004534:	4603      	mov	r3, r0
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	701a      	strb	r2, [r3, #0]
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <SD_ReadyWait+0x30>)
 800454c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004550:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8004552:	f7ff ffcd 	bl	80044f0 <SPI_RxByte>
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	2bff      	cmp	r3, #255	; 0xff
 800455e:	d003      	beq.n	8004568 <SD_ReadyWait+0x24>
 8004560:	4b04      	ldr	r3, [pc, #16]	; (8004574 <SD_ReadyWait+0x30>)
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f4      	bne.n	8004552 <SD_ReadyWait+0xe>

	return res;
 8004568:	79fb      	ldrb	r3, [r7, #7]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000656 	.word	0x20000656

08004578 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800457e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004582:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8004584:	f7ff ff72 	bl	800446c <DESELECT>
	for(int i = 0; i < 10; i++)
 8004588:	2300      	movs	r3, #0
 800458a:	60bb      	str	r3, [r7, #8]
 800458c:	e005      	b.n	800459a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800458e:	20ff      	movs	r0, #255	; 0xff
 8004590:	f7ff ff7a 	bl	8004488 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	3301      	adds	r3, #1
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b09      	cmp	r3, #9
 800459e:	ddf6      	ble.n	800458e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80045a0:	f7ff ff56 	bl	8004450 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80045a4:	2340      	movs	r3, #64	; 0x40
 80045a6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80045b8:	2395      	movs	r3, #149	; 0x95
 80045ba:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80045bc:	463b      	mov	r3, r7
 80045be:	2106      	movs	r1, #6
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ff7b 	bl	80044bc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80045c6:	e002      	b.n	80045ce <SD_PowerOn+0x56>
	{
		cnt--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80045ce:	f7ff ff8f 	bl	80044f0 <SPI_RxByte>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d002      	beq.n	80045de <SD_PowerOn+0x66>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f4      	bne.n	80045c8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80045de:	f7ff ff45 	bl	800446c <DESELECT>
	SPI_TxByte(0XFF);
 80045e2:	20ff      	movs	r0, #255	; 0xff
 80045e4:	f7ff ff50 	bl	8004488 <SPI_TxByte>

	PowerFlag = 1;
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <SD_PowerOn+0x80>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	701a      	strb	r2, [r3, #0]
}
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	200004cb 	.word	0x200004cb

080045fc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <SD_PowerOff+0x14>)
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	200004cb 	.word	0x200004cb

08004614 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004618:	4b02      	ldr	r3, [pc, #8]	; (8004624 <SD_CheckPower+0x10>)
 800461a:	781b      	ldrb	r3, [r3, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	200004cb 	.word	0x200004cb

08004628 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <SD_RxDataBlock+0x58>)
 8004634:	22c8      	movs	r2, #200	; 0xc8
 8004636:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8004638:	f7ff ff5a 	bl	80044f0 <SPI_RxByte>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	2bff      	cmp	r3, #255	; 0xff
 8004644:	d103      	bne.n	800464e <SD_RxDataBlock+0x26>
 8004646:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <SD_RxDataBlock+0x58>)
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f4      	bne.n	8004638 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2bfe      	cmp	r3, #254	; 0xfe
 8004652:	d001      	beq.n	8004658 <SD_RxDataBlock+0x30>
 8004654:	2300      	movs	r3, #0
 8004656:	e00f      	b.n	8004678 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff ff62 	bl	8004528 <SPI_RxBytePtr>
	} while(len--);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	1e5a      	subs	r2, r3, #1
 8004668:	603a      	str	r2, [r7, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f4      	bne.n	8004658 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800466e:	f7ff ff3f 	bl	80044f0 <SPI_RxByte>
	SPI_RxByte();
 8004672:	f7ff ff3d 	bl	80044f0 <SPI_RxByte>

	return TRUE;
 8004676:	2301      	movs	r3, #1
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000655 	.word	0x20000655

08004684 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004694:	f7ff ff56 	bl	8004544 <SD_ReadyWait>
 8004698:	4603      	mov	r3, r0
 800469a:	2bff      	cmp	r3, #255	; 0xff
 800469c:	d001      	beq.n	80046a2 <SD_TxDataBlock+0x1e>
 800469e:	2300      	movs	r3, #0
 80046a0:	e02f      	b.n	8004702 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff feef 	bl	8004488 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	2bfd      	cmp	r3, #253	; 0xfd
 80046ae:	d020      	beq.n	80046f2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80046b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ff01 	bl	80044bc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80046ba:	f7ff ff19 	bl	80044f0 <SPI_RxByte>
		SPI_RxByte();
 80046be:	f7ff ff17 	bl	80044f0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80046c2:	e00b      	b.n	80046dc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80046c4:	f7ff ff14 	bl	80044f0 <SPI_RxByte>
 80046c8:	4603      	mov	r3, r0
 80046ca:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d006      	beq.n	80046e4 <SD_TxDataBlock+0x60>
			i++;
 80046d6:	7bbb      	ldrb	r3, [r7, #14]
 80046d8:	3301      	adds	r3, #1
 80046da:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80046dc:	7bbb      	ldrb	r3, [r7, #14]
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d9f0      	bls.n	80046c4 <SD_TxDataBlock+0x40>
 80046e2:	e000      	b.n	80046e6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80046e4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80046e6:	bf00      	nop
 80046e8:	f7ff ff02 	bl	80044f0 <SPI_RxByte>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0fa      	beq.n	80046e8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	2b05      	cmp	r3, #5
 80046fa:	d101      	bne.n	8004700 <SD_TxDataBlock+0x7c>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <SD_TxDataBlock+0x7e>

	return FALSE;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	4603      	mov	r3, r0
 8004712:	6039      	str	r1, [r7, #0]
 8004714:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8004716:	f7ff ff15 	bl	8004544 <SD_ReadyWait>
 800471a:	4603      	mov	r3, r0
 800471c:	2bff      	cmp	r3, #255	; 0xff
 800471e:	d001      	beq.n	8004724 <SD_SendCmd+0x1a>
 8004720:	23ff      	movs	r3, #255	; 0xff
 8004722:	e042      	b.n	80047aa <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff feae 	bl	8004488 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	0e1b      	lsrs	r3, r3, #24
 8004730:	b2db      	uxtb	r3, r3
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fea8 	bl	8004488 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	0c1b      	lsrs	r3, r3, #16
 800473c:	b2db      	uxtb	r3, r3
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fea2 	bl	8004488 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	b2db      	uxtb	r3, r3
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fe9c 	bl	8004488 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fe97 	bl	8004488 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d102      	bne.n	8004766 <SD_SendCmd+0x5c>
 8004760:	2395      	movs	r3, #149	; 0x95
 8004762:	73fb      	strb	r3, [r7, #15]
 8004764:	e007      	b.n	8004776 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	2b48      	cmp	r3, #72	; 0x48
 800476a:	d102      	bne.n	8004772 <SD_SendCmd+0x68>
 800476c:	2387      	movs	r3, #135	; 0x87
 800476e:	73fb      	strb	r3, [r7, #15]
 8004770:	e001      	b.n	8004776 <SD_SendCmd+0x6c>
	else crc = 1;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fe85 	bl	8004488 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	2b4c      	cmp	r3, #76	; 0x4c
 8004782:	d101      	bne.n	8004788 <SD_SendCmd+0x7e>
 8004784:	f7ff feb4 	bl	80044f0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004788:	230a      	movs	r3, #10
 800478a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800478c:	f7ff feb0 	bl	80044f0 <SPI_RxByte>
 8004790:	4603      	mov	r3, r0
 8004792:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004794:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004798:	2b00      	cmp	r3, #0
 800479a:	da05      	bge.n	80047a8 <SD_SendCmd+0x9e>
 800479c:	7bbb      	ldrb	r3, [r7, #14]
 800479e:	3b01      	subs	r3, #1
 80047a0:	73bb      	strb	r3, [r7, #14]
 80047a2:	7bbb      	ldrb	r3, [r7, #14]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f1      	bne.n	800478c <SD_SendCmd+0x82>

	return res;
 80047a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <SD_disk_initialize+0x14>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0d1      	b.n	800496c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80047c8:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <SD_disk_initialize+0x1c0>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <SD_disk_initialize+0x2a>
 80047d6:	4b67      	ldr	r3, [pc, #412]	; (8004974 <SD_disk_initialize+0x1c0>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	e0c6      	b.n	800496c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80047de:	f7ff fecb 	bl	8004578 <SD_PowerOn>

	/* slave select */
	SELECT();
 80047e2:	f7ff fe35 	bl	8004450 <SELECT>

	/* check disk type */
	type = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80047ea:	2100      	movs	r1, #0
 80047ec:	2040      	movs	r0, #64	; 0x40
 80047ee:	f7ff ff8c 	bl	800470a <SD_SendCmd>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	f040 80a1 	bne.w	800493c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80047fa:	4b5f      	ldr	r3, [pc, #380]	; (8004978 <SD_disk_initialize+0x1c4>)
 80047fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004800:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004802:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004806:	2048      	movs	r0, #72	; 0x48
 8004808:	f7ff ff7f 	bl	800470a <SD_SendCmd>
 800480c:	4603      	mov	r3, r0
 800480e:	2b01      	cmp	r3, #1
 8004810:	d155      	bne.n	80048be <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	e00c      	b.n	8004832 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004818:	7bfc      	ldrb	r4, [r7, #15]
 800481a:	f7ff fe69 	bl	80044f0 <SPI_RxByte>
 800481e:	4603      	mov	r3, r0
 8004820:	461a      	mov	r2, r3
 8004822:	f104 0310 	add.w	r3, r4, #16
 8004826:	443b      	add	r3, r7
 8004828:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	3301      	adds	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d9ef      	bls.n	8004818 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004838:	7abb      	ldrb	r3, [r7, #10]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d17e      	bne.n	800493c <SD_disk_initialize+0x188>
 800483e:	7afb      	ldrb	r3, [r7, #11]
 8004840:	2baa      	cmp	r3, #170	; 0xaa
 8004842:	d17b      	bne.n	800493c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004844:	2100      	movs	r1, #0
 8004846:	2077      	movs	r0, #119	; 0x77
 8004848:	f7ff ff5f 	bl	800470a <SD_SendCmd>
 800484c:	4603      	mov	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d807      	bhi.n	8004862 <SD_disk_initialize+0xae>
 8004852:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004856:	2069      	movs	r0, #105	; 0x69
 8004858:	f7ff ff57 	bl	800470a <SD_SendCmd>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8004862:	4b45      	ldr	r3, [pc, #276]	; (8004978 <SD_disk_initialize+0x1c4>)
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1ec      	bne.n	8004844 <SD_disk_initialize+0x90>
 800486a:	e000      	b.n	800486e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800486c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800486e:	4b42      	ldr	r3, [pc, #264]	; (8004978 <SD_disk_initialize+0x1c4>)
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d062      	beq.n	800493c <SD_disk_initialize+0x188>
 8004876:	2100      	movs	r1, #0
 8004878:	207a      	movs	r0, #122	; 0x7a
 800487a:	f7ff ff46 	bl	800470a <SD_SendCmd>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d15b      	bne.n	800493c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8004884:	2300      	movs	r3, #0
 8004886:	73fb      	strb	r3, [r7, #15]
 8004888:	e00c      	b.n	80048a4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800488a:	7bfc      	ldrb	r4, [r7, #15]
 800488c:	f7ff fe30 	bl	80044f0 <SPI_RxByte>
 8004890:	4603      	mov	r3, r0
 8004892:	461a      	mov	r2, r3
 8004894:	f104 0310 	add.w	r3, r4, #16
 8004898:	443b      	add	r3, r7
 800489a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	3301      	adds	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d9ef      	bls.n	800488a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80048aa:	7a3b      	ldrb	r3, [r7, #8]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <SD_disk_initialize+0x104>
 80048b4:	230c      	movs	r3, #12
 80048b6:	e000      	b.n	80048ba <SD_disk_initialize+0x106>
 80048b8:	2304      	movs	r3, #4
 80048ba:	73bb      	strb	r3, [r7, #14]
 80048bc:	e03e      	b.n	800493c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80048be:	2100      	movs	r1, #0
 80048c0:	2077      	movs	r0, #119	; 0x77
 80048c2:	f7ff ff22 	bl	800470a <SD_SendCmd>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d808      	bhi.n	80048de <SD_disk_initialize+0x12a>
 80048cc:	2100      	movs	r1, #0
 80048ce:	2069      	movs	r0, #105	; 0x69
 80048d0:	f7ff ff1b 	bl	800470a <SD_SendCmd>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d801      	bhi.n	80048de <SD_disk_initialize+0x12a>
 80048da:	2302      	movs	r3, #2
 80048dc:	e000      	b.n	80048e0 <SD_disk_initialize+0x12c>
 80048de:	2301      	movs	r3, #1
 80048e0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80048e2:	7bbb      	ldrb	r3, [r7, #14]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d10e      	bne.n	8004906 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80048e8:	2100      	movs	r1, #0
 80048ea:	2077      	movs	r0, #119	; 0x77
 80048ec:	f7ff ff0d 	bl	800470a <SD_SendCmd>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d80e      	bhi.n	8004914 <SD_disk_initialize+0x160>
 80048f6:	2100      	movs	r1, #0
 80048f8:	2069      	movs	r0, #105	; 0x69
 80048fa:	f7ff ff06 	bl	800470a <SD_SendCmd>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d107      	bne.n	8004914 <SD_disk_initialize+0x160>
 8004904:	e00c      	b.n	8004920 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004906:	2100      	movs	r1, #0
 8004908:	2041      	movs	r0, #65	; 0x41
 800490a:	f7ff fefe 	bl	800470a <SD_SendCmd>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d004      	beq.n	800491e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8004914:	4b18      	ldr	r3, [pc, #96]	; (8004978 <SD_disk_initialize+0x1c4>)
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e2      	bne.n	80048e2 <SD_disk_initialize+0x12e>
 800491c:	e000      	b.n	8004920 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800491e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004920:	4b15      	ldr	r3, [pc, #84]	; (8004978 <SD_disk_initialize+0x1c4>)
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <SD_disk_initialize+0x184>
 8004928:	f44f 7100 	mov.w	r1, #512	; 0x200
 800492c:	2050      	movs	r0, #80	; 0x50
 800492e:	f7ff feec 	bl	800470a <SD_SendCmd>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <SD_disk_initialize+0x188>
 8004938:	2300      	movs	r3, #0
 800493a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800493c:	4a0f      	ldr	r2, [pc, #60]	; (800497c <SD_disk_initialize+0x1c8>)
 800493e:	7bbb      	ldrb	r3, [r7, #14]
 8004940:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8004942:	f7ff fd93 	bl	800446c <DESELECT>
	SPI_RxByte();
 8004946:	f7ff fdd3 	bl	80044f0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800494a:	7bbb      	ldrb	r3, [r7, #14]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8004950:	4b08      	ldr	r3, [pc, #32]	; (8004974 <SD_disk_initialize+0x1c0>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	b2da      	uxtb	r2, r3
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <SD_disk_initialize+0x1c0>)
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	e001      	b.n	8004966 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8004962:	f7ff fe4b 	bl	80045fc <SD_PowerOff>
	}

	return Stat;
 8004966:	4b03      	ldr	r3, [pc, #12]	; (8004974 <SD_disk_initialize+0x1c0>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	b2db      	uxtb	r3, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	bd90      	pop	{r4, r7, pc}
 8004974:	200000b8 	.word	0x200000b8
 8004978:	20000655 	.word	0x20000655
 800497c:	200004ca 	.word	0x200004ca

08004980 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <SD_disk_status+0x14>
 8004990:	2301      	movs	r3, #1
 8004992:	e002      	b.n	800499a <SD_disk_status+0x1a>
	return Stat;
 8004994:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <SD_disk_status+0x24>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b2db      	uxtb	r3, r3
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	200000b8 	.word	0x200000b8

080049a8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	4603      	mov	r3, r0
 80049b6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <SD_disk_read+0x1c>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <SD_disk_read+0x20>
 80049c4:	2304      	movs	r3, #4
 80049c6:	e051      	b.n	8004a6c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049c8:	4b2a      	ldr	r3, [pc, #168]	; (8004a74 <SD_disk_read+0xcc>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <SD_disk_read+0x32>
 80049d6:	2303      	movs	r3, #3
 80049d8:	e048      	b.n	8004a6c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80049da:	4b27      	ldr	r3, [pc, #156]	; (8004a78 <SD_disk_read+0xd0>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <SD_disk_read+0x44>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	025b      	lsls	r3, r3, #9
 80049ea:	607b      	str	r3, [r7, #4]

	SELECT();
 80049ec:	f7ff fd30 	bl	8004450 <SELECT>

	if (count == 1)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d111      	bne.n	8004a1a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	2051      	movs	r0, #81	; 0x51
 80049fa:	f7ff fe86 	bl	800470a <SD_SendCmd>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d129      	bne.n	8004a58 <SD_disk_read+0xb0>
 8004a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a08:	68b8      	ldr	r0, [r7, #8]
 8004a0a:	f7ff fe0d 	bl	8004628 <SD_RxDataBlock>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d021      	beq.n	8004a58 <SD_disk_read+0xb0>
 8004a14:	2300      	movs	r3, #0
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	e01e      	b.n	8004a58 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	2052      	movs	r0, #82	; 0x52
 8004a1e:	f7ff fe74 	bl	800470a <SD_SendCmd>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d117      	bne.n	8004a58 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a2c:	68b8      	ldr	r0, [r7, #8]
 8004a2e:	f7ff fdfb 	bl	8004628 <SD_RxDataBlock>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <SD_disk_read+0xa6>
				buff += 512;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004a3e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1ed      	bne.n	8004a28 <SD_disk_read+0x80>
 8004a4c:	e000      	b.n	8004a50 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8004a4e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004a50:	2100      	movs	r1, #0
 8004a52:	204c      	movs	r0, #76	; 0x4c
 8004a54:	f7ff fe59 	bl	800470a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004a58:	f7ff fd08 	bl	800446c <DESELECT>
	SPI_RxByte();
 8004a5c:	f7ff fd48 	bl	80044f0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bf14      	ite	ne
 8004a66:	2301      	movne	r3, #1
 8004a68:	2300      	moveq	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	200000b8 	.word	0x200000b8
 8004a78:	200004ca 	.word	0x200004ca

08004a7c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4603      	mov	r3, r0
 8004a8a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d102      	bne.n	8004a98 <SD_disk_write+0x1c>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <SD_disk_write+0x20>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	e06b      	b.n	8004b74 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a9c:	4b37      	ldr	r3, [pc, #220]	; (8004b7c <SD_disk_write+0x100>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <SD_disk_write+0x32>
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e062      	b.n	8004b74 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004aae:	4b33      	ldr	r3, [pc, #204]	; (8004b7c <SD_disk_write+0x100>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <SD_disk_write+0x44>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e059      	b.n	8004b74 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004ac0:	4b2f      	ldr	r3, [pc, #188]	; (8004b80 <SD_disk_write+0x104>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <SD_disk_write+0x56>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	025b      	lsls	r3, r3, #9
 8004ad0:	607b      	str	r3, [r7, #4]

	SELECT();
 8004ad2:	f7ff fcbd 	bl	8004450 <SELECT>

	if (count == 1)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d110      	bne.n	8004afe <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	2058      	movs	r0, #88	; 0x58
 8004ae0:	f7ff fe13 	bl	800470a <SD_SendCmd>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d13a      	bne.n	8004b60 <SD_disk_write+0xe4>
 8004aea:	21fe      	movs	r1, #254	; 0xfe
 8004aec:	68b8      	ldr	r0, [r7, #8]
 8004aee:	f7ff fdc9 	bl	8004684 <SD_TxDataBlock>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d033      	beq.n	8004b60 <SD_disk_write+0xe4>
			count = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	e030      	b.n	8004b60 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <SD_disk_write+0x104>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	2077      	movs	r0, #119	; 0x77
 8004b0e:	f7ff fdfc 	bl	800470a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8004b12:	6839      	ldr	r1, [r7, #0]
 8004b14:	2057      	movs	r0, #87	; 0x57
 8004b16:	f7ff fdf8 	bl	800470a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	2059      	movs	r0, #89	; 0x59
 8004b1e:	f7ff fdf4 	bl	800470a <SD_SendCmd>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11b      	bne.n	8004b60 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004b28:	21fc      	movs	r1, #252	; 0xfc
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	f7ff fdaa 	bl	8004684 <SD_TxDataBlock>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <SD_disk_write+0xd0>
				buff += 512;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004b3c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1ee      	bne.n	8004b28 <SD_disk_write+0xac>
 8004b4a:	e000      	b.n	8004b4e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004b4c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8004b4e:	21fd      	movs	r1, #253	; 0xfd
 8004b50:	2000      	movs	r0, #0
 8004b52:	f7ff fd97 	bl	8004684 <SD_TxDataBlock>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <SD_disk_write+0xe4>
			{
				count = 1;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004b60:	f7ff fc84 	bl	800446c <DESELECT>
	SPI_RxByte();
 8004b64:	f7ff fcc4 	bl	80044f0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bf14      	ite	ne
 8004b6e:	2301      	movne	r3, #1
 8004b70:	2300      	moveq	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	200000b8 	.word	0x200000b8
 8004b80:	200004ca 	.word	0x200004ca

08004b84 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b08b      	sub	sp, #44	; 0x2c
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	603a      	str	r2, [r7, #0]
 8004b8e:	71fb      	strb	r3, [r7, #7]
 8004b90:	460b      	mov	r3, r1
 8004b92:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <SD_disk_ioctl+0x1e>
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	e115      	b.n	8004dce <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8004ba8:	79bb      	ldrb	r3, [r7, #6]
 8004baa:	2b05      	cmp	r3, #5
 8004bac:	d124      	bne.n	8004bf8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d012      	beq.n	8004bdc <SD_disk_ioctl+0x58>
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	dc1a      	bgt.n	8004bf0 <SD_disk_ioctl+0x6c>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <SD_disk_ioctl+0x40>
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d006      	beq.n	8004bd0 <SD_disk_ioctl+0x4c>
 8004bc2:	e015      	b.n	8004bf0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004bc4:	f7ff fd1a 	bl	80045fc <SD_PowerOff>
			res = RES_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004bce:	e0fc      	b.n	8004dca <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8004bd0:	f7ff fcd2 	bl	8004578 <SD_PowerOn>
			res = RES_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004bda:	e0f6      	b.n	8004dca <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	1c5c      	adds	r4, r3, #1
 8004be0:	f7ff fd18 	bl	8004614 <SD_CheckPower>
 8004be4:	4603      	mov	r3, r0
 8004be6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004bee:	e0ec      	b.n	8004dca <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004bf6:	e0e8      	b.n	8004dca <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004bf8:	4b77      	ldr	r3, [pc, #476]	; (8004dd8 <SD_disk_ioctl+0x254>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <SD_disk_ioctl+0x86>
 8004c06:	2303      	movs	r3, #3
 8004c08:	e0e1      	b.n	8004dce <SD_disk_ioctl+0x24a>

		SELECT();
 8004c0a:	f7ff fc21 	bl	8004450 <SELECT>

		switch (ctrl)
 8004c0e:	79bb      	ldrb	r3, [r7, #6]
 8004c10:	2b0d      	cmp	r3, #13
 8004c12:	f200 80cb 	bhi.w	8004dac <SD_disk_ioctl+0x228>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <SD_disk_ioctl+0x98>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004d17 	.word	0x08004d17
 8004c20:	08004c55 	.word	0x08004c55
 8004c24:	08004d07 	.word	0x08004d07
 8004c28:	08004dad 	.word	0x08004dad
 8004c2c:	08004dad 	.word	0x08004dad
 8004c30:	08004dad 	.word	0x08004dad
 8004c34:	08004dad 	.word	0x08004dad
 8004c38:	08004dad 	.word	0x08004dad
 8004c3c:	08004dad 	.word	0x08004dad
 8004c40:	08004dad 	.word	0x08004dad
 8004c44:	08004dad 	.word	0x08004dad
 8004c48:	08004d29 	.word	0x08004d29
 8004c4c:	08004d4d 	.word	0x08004d4d
 8004c50:	08004d71 	.word	0x08004d71
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004c54:	2100      	movs	r1, #0
 8004c56:	2049      	movs	r0, #73	; 0x49
 8004c58:	f7ff fd57 	bl	800470a <SD_SendCmd>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f040 80a8 	bne.w	8004db4 <SD_disk_ioctl+0x230>
 8004c64:	f107 030c 	add.w	r3, r7, #12
 8004c68:	2110      	movs	r1, #16
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fcdc 	bl	8004628 <SD_RxDataBlock>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 809e 	beq.w	8004db4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8004c78:	7b3b      	ldrb	r3, [r7, #12]
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d10e      	bne.n	8004ca0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004c82:	7d7b      	ldrb	r3, [r7, #21]
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	7d3b      	ldrb	r3, [r7, #20]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	4413      	add	r3, r2
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3301      	adds	r3, #1
 8004c94:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004c96:	8bfb      	ldrh	r3, [r7, #30]
 8004c98:	029a      	lsls	r2, r3, #10
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e02e      	b.n	8004cfe <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004ca0:	7c7b      	ldrb	r3, [r7, #17]
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	7dbb      	ldrb	r3, [r7, #22]
 8004caa:	09db      	lsrs	r3, r3, #7
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	7d7b      	ldrb	r3, [r7, #21]
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 0306 	and.w	r3, r3, #6
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	3302      	adds	r3, #2
 8004cc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004cc8:	7d3b      	ldrb	r3, [r7, #20]
 8004cca:	099b      	lsrs	r3, r3, #6
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	7cfb      	ldrb	r3, [r7, #19]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	7cbb      	ldrb	r3, [r7, #18]
 8004cde:	029b      	lsls	r3, r3, #10
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4413      	add	r3, r2
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3301      	adds	r3, #1
 8004cee:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004cf0:	8bfa      	ldrh	r2, [r7, #30]
 8004cf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004cf6:	3b09      	subs	r3, #9
 8004cf8:	409a      	lsls	r2, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8004d04:	e056      	b.n	8004db4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d0c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004d14:	e055      	b.n	8004dc2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004d16:	f7ff fc15 	bl	8004544 <SD_ReadyWait>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2bff      	cmp	r3, #255	; 0xff
 8004d1e:	d14b      	bne.n	8004db8 <SD_disk_ioctl+0x234>
 8004d20:	2300      	movs	r3, #0
 8004d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004d26:	e047      	b.n	8004db8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004d28:	2100      	movs	r1, #0
 8004d2a:	2049      	movs	r0, #73	; 0x49
 8004d2c:	f7ff fced 	bl	800470a <SD_SendCmd>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d142      	bne.n	8004dbc <SD_disk_ioctl+0x238>
 8004d36:	2110      	movs	r1, #16
 8004d38:	6a38      	ldr	r0, [r7, #32]
 8004d3a:	f7ff fc75 	bl	8004628 <SD_RxDataBlock>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d03b      	beq.n	8004dbc <SD_disk_ioctl+0x238>
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004d4a:	e037      	b.n	8004dbc <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	204a      	movs	r0, #74	; 0x4a
 8004d50:	f7ff fcdb 	bl	800470a <SD_SendCmd>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d132      	bne.n	8004dc0 <SD_disk_ioctl+0x23c>
 8004d5a:	2110      	movs	r1, #16
 8004d5c:	6a38      	ldr	r0, [r7, #32]
 8004d5e:	f7ff fc63 	bl	8004628 <SD_RxDataBlock>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d02b      	beq.n	8004dc0 <SD_disk_ioctl+0x23c>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004d6e:	e027      	b.n	8004dc0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004d70:	2100      	movs	r1, #0
 8004d72:	207a      	movs	r0, #122	; 0x7a
 8004d74:	f7ff fcc9 	bl	800470a <SD_SendCmd>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d116      	bne.n	8004dac <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d84:	e00b      	b.n	8004d9e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8004d86:	6a3c      	ldr	r4, [r7, #32]
 8004d88:	1c63      	adds	r3, r4, #1
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	f7ff fbb0 	bl	80044f0 <SPI_RxByte>
 8004d90:	4603      	mov	r3, r0
 8004d92:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004d94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d9ef      	bls.n	8004d86 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8004dac:	2304      	movs	r3, #4
 8004dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004db2:	e006      	b.n	8004dc2 <SD_disk_ioctl+0x23e>
			break;
 8004db4:	bf00      	nop
 8004db6:	e004      	b.n	8004dc2 <SD_disk_ioctl+0x23e>
			break;
 8004db8:	bf00      	nop
 8004dba:	e002      	b.n	8004dc2 <SD_disk_ioctl+0x23e>
			break;
 8004dbc:	bf00      	nop
 8004dbe:	e000      	b.n	8004dc2 <SD_disk_ioctl+0x23e>
			break;
 8004dc0:	bf00      	nop
		}

		DESELECT();
 8004dc2:	f7ff fb53 	bl	800446c <DESELECT>
		SPI_RxByte();
 8004dc6:	f7ff fb93 	bl	80044f0 <SPI_RxByte>
	}

	return res;
 8004dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	372c      	adds	r7, #44	; 0x2c
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd90      	pop	{r4, r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	200000b8 	.word	0x200000b8

08004ddc <resetTimer3Variable>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void resetTimer3Variable()
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
	timer3Data = 0;
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <resetTimer3Variable+0x14>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
}
 8004de6:	bf00      	nop
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000640 	.word	0x20000640

08004df4 <getKeyPressed>:

unsigned char getKeyPressed()
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
	return key;
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <getKeyPressed+0x14>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	b2db      	uxtb	r3, r3
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	2000063c 	.word	0x2000063c

08004e0c <resetKeyPressed>:

unsigned char resetKeyPressed()
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
	key = IDDLE;
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <resetKeyPressed+0x18>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]
	HAL_Delay(250);
 8004e16:	20fa      	movs	r0, #250	; 0xfa
 8004e18:	f000 ff9c 	bl	8005d54 <HAL_Delay>
}
 8004e1c:	bf00      	nop
 8004e1e:	4618      	mov	r0, r3
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	2000063c 	.word	0x2000063c

08004e28 <getUARTInstance>:

unsigned char* getUARTInstance()
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
	return &huart2;
 8004e2c:	4b02      	ldr	r3, [pc, #8]	; (8004e38 <getUARTInstance+0x10>)
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	200005b4 	.word	0x200005b4

08004e3c <getTimer2Instance>:

unsigned char* getTimer2Instance()
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
	return &htim2;
 8004e40:	4b02      	ldr	r3, [pc, #8]	; (8004e4c <getTimer2Instance+0x10>)
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000524 	.word	0x20000524

08004e50 <getTimer3Instance>:

unsigned char* getTimer3Instance()
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
	return &htim3;
 8004e54:	4b02      	ldr	r3, [pc, #8]	; (8004e60 <getTimer3Instance+0x10>)
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	2000056c 	.word	0x2000056c

08004e64 <getTimer2Variable>:

unsigned char getTimer2Variable()
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
	return sensorFlag;
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <getTimer2Variable+0x14>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	b2db      	uxtb	r3, r3
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	200000b9 	.word	0x200000b9

08004e7c <getTimer3Variable>:

unsigned int getTimer3Variable()
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
	return timer3Data;
 8004e80:	4b02      	ldr	r3, [pc, #8]	; (8004e8c <getTimer3Variable+0x10>)
 8004e82:	681b      	ldr	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr
 8004e8c:	20000640 	.word	0x20000640

08004e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e96:	f000 fefb 	bl	8005c90 <HAL_Init>
	  unsigned char menuSelect;
	  unsigned char menuDisplay;
	  unsigned char menuState;
  };

  struct Menu menuTesteMain = {IDDLE,IDDLE,IDDLE,IDDLE};
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
  struct Menu menuTesteSub = {IDDLE,IDDLE,IDDLE,IDDLE};
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60bb      	str	r3, [r7, #8]
  unsigned char displayUpdateStatus = IDDLE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	71fb      	strb	r3, [r7, #7]
  unsigned char cursorPosition[2] = {0,0};
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	80bb      	strh	r3, [r7, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004eaa:	f000 f9ad 	bl	8005208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004eae:	f000 fb11 	bl	80054d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004eb2:	f000 faf1 	bl	8005498 <MX_DMA_Init>
  MX_TIM2_Init();
 8004eb6:	f000 fa23 	bl	8005300 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004eba:	f000 fa75 	bl	80053a8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8004ebe:	f000 fac1 	bl	8005444 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004ec2:	f004 f8c1 	bl	8009048 <MX_FATFS_Init>
  MX_SPI1_Init();
 8004ec6:	f000 f9e5 	bl	8005294 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, 1);
 8004eca:	2201      	movs	r2, #1
 8004ecc:	49c1      	ldr	r1, [pc, #772]	; (80051d4 <main+0x344>)
 8004ece:	48c2      	ldr	r0, [pc, #776]	; (80051d8 <main+0x348>)
 8004ed0:	f003 fb95 	bl	80085fe <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8004ed4:	4bc1      	ldr	r3, [pc, #772]	; (80051dc <main+0x34c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4bc0      	ldr	r3, [pc, #768]	; (80051dc <main+0x34c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0204 	bic.w	r2, r2, #4
 8004ee2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004eea:	48bd      	ldr	r0, [pc, #756]	; (80051e0 <main+0x350>)
 8004eec:	f001 fc86 	bl	80067fc <HAL_GPIO_WritePin>
  homeDataDisplay(appNameMsg,companyNameMsg,appVersionMsg);
 8004ef0:	4bbc      	ldr	r3, [pc, #752]	; (80051e4 <main+0x354>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4abc      	ldr	r2, [pc, #752]	; (80051e8 <main+0x358>)
 8004ef6:	6811      	ldr	r1, [r2, #0]
 8004ef8:	4abc      	ldr	r2, [pc, #752]	; (80051ec <main+0x35c>)
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fe fd2a 	bl	8003956 <homeDataDisplay>
  while(1)
  {
	  switch(menuTesteMain.menuState)
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2b05      	cmp	r3, #5
 8004f06:	d8fc      	bhi.n	8004f02 <main+0x72>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <main+0x80>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f29 	.word	0x08004f29
 8004f14:	08004f51 	.word	0x08004f51
 8004f18:	08004fc9 	.word	0x08004fc9
 8004f1c:	08005047 	.word	0x08005047
 8004f20:	080050c5 	.word	0x080050c5
 8004f24:	08005141 	.word	0x08005141
	  {
		  case IDDLE:
			  if(key == AVANCAR)
 8004f28:	4bb1      	ldr	r3, [pc, #708]	; (80051f0 <main+0x360>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b41      	cmp	r3, #65	; 0x41
 8004f30:	f040 8144 	bne.w	80051bc <main+0x32c>
			  {
				  resetKeyPressed();
 8004f34:	f7ff ff6a 	bl	8004e0c <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004f38:	1d3a      	adds	r2, r7, #4
 8004f3a:	1dfb      	adds	r3, r7, #7
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fd fdc1 	bl	8002ac6 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8004f44:	2001      	movs	r0, #1
 8004f46:	f000 fc19 	bl	800577c <getNextMain>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	73fb      	strb	r3, [r7, #15]
			  }
		  break;
 8004f4e:	e135      	b.n	80051bc <main+0x32c>

		  case START_TEST:
			  updateUserMsg(0,0,startUserMsg,&displayUpdateStatus);
 8004f50:	4ba8      	ldr	r3, [pc, #672]	; (80051f4 <main+0x364>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	1dfb      	adds	r3, r7, #7
 8004f56:	2100      	movs	r1, #0
 8004f58:	2000      	movs	r0, #0
 8004f5a:	f7fd fd96 	bl	8002a8a <updateUserMsg>
			  if(key == AVANCAR)
 8004f5e:	4ba4      	ldr	r3, [pc, #656]	; (80051f0 <main+0x360>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b41      	cmp	r3, #65	; 0x41
 8004f66:	d10d      	bne.n	8004f84 <main+0xf4>
			  {
				  resetKeyPressed();
 8004f68:	f7ff ff50 	bl	8004e0c <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004f6c:	1d3a      	adds	r2, r7, #4
 8004f6e:	1dfb      	adds	r3, r7, #7
 8004f70:	4611      	mov	r1, r2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fd fda7 	bl	8002ac6 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(CONSULT_DATA);
 8004f78:	2002      	movs	r0, #2
 8004f7a:	f000 fbff 	bl	800577c <getNextMain>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	73fb      	strb	r3, [r7, #15]
				  menuTesteMain.menuSelect = menuTesteMain.menuState;
				  initStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
			  }
		  break;
 8004f82:	e11d      	b.n	80051c0 <main+0x330>
			  else if(key == CONFIRMAR)
 8004f84:	4b9a      	ldr	r3, [pc, #616]	; (80051f0 <main+0x360>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b43      	cmp	r3, #67	; 0x43
 8004f8c:	f040 8118 	bne.w	80051c0 <main+0x330>
				  resetKeyPressed();
 8004f90:	f7ff ff3c 	bl	8004e0c <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004f94:	1d3a      	adds	r2, r7, #4
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fd fd93 	bl	8002ac6 <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 8004fa0:	f107 030c 	add.w	r3, r7, #12
 8004fa4:	3303      	adds	r3, #3
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fbfa 	bl	80057a0 <setSelectMain>
 8004fac:	4603      	mov	r3, r0
 8004fae:	73fb      	strb	r3, [r7, #15]
				  menuTesteMain.menuSelect = menuTesteMain.menuState;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	737b      	strb	r3, [r7, #13]
				  initStateMachine(&menuTesteSub);
 8004fb4:	f107 0308 	add.w	r3, r7, #8
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fd ffdd 	bl	8002f78 <initStateMachine>
				  menuTesteSub.menuState = IDDLE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	727b      	strb	r3, [r7, #9]
		  break;
 8004fc6:	e0fb      	b.n	80051c0 <main+0x330>

		  case CONSULT_DATA:
			  updateUserMsg(0,0,consultUserMsg,&displayUpdateStatus);
 8004fc8:	4b8b      	ldr	r3, [pc, #556]	; (80051f8 <main+0x368>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	1dfb      	adds	r3, r7, #7
 8004fce:	2100      	movs	r1, #0
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f7fd fd5a 	bl	8002a8a <updateUserMsg>
			  if(key == AVANCAR)
 8004fd6:	4b86      	ldr	r3, [pc, #536]	; (80051f0 <main+0x360>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b41      	cmp	r3, #65	; 0x41
 8004fde:	d10d      	bne.n	8004ffc <main+0x16c>
			  {
				  resetKeyPressed();
 8004fe0:	f7ff ff14 	bl	8004e0c <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8004fe4:	1d3a      	adds	r2, r7, #4
 8004fe6:	1dfb      	adds	r3, r7, #7
 8004fe8:	4611      	mov	r1, r2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fd fd6b 	bl	8002ac6 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(CONFIG_SENSOR);
 8004ff0:	2003      	movs	r0, #3
 8004ff2:	f000 fbc3 	bl	800577c <getNextMain>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	73fb      	strb	r3, [r7, #15]
				 consultStateMachine(&menuTesteSub);
				 menuTesteMain.menuState = getNextMain(START_TEST);
				 menuTesteSub.menuState = IDDLE;
				 menuTesteSub.menuSelect = IDDLE;
			  }
		  break;
 8004ffa:	e0e3      	b.n	80051c4 <main+0x334>
			  else if(key == CONFIRMAR)
 8004ffc:	4b7c      	ldr	r3, [pc, #496]	; (80051f0 <main+0x360>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b43      	cmp	r3, #67	; 0x43
 8005004:	f040 80de 	bne.w	80051c4 <main+0x334>
				  resetKeyPressed();
 8005008:	f7ff ff00 	bl	8004e0c <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800500c:	1d3a      	adds	r2, r7, #4
 800500e:	1dfb      	adds	r3, r7, #7
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f7fd fd57 	bl	8002ac6 <readyUserInterface>
				 menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 8005018:	f107 030c 	add.w	r3, r7, #12
 800501c:	3303      	adds	r3, #3
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fbbe 	bl	80057a0 <setSelectMain>
 8005024:	4603      	mov	r3, r0
 8005026:	73fb      	strb	r3, [r7, #15]
				 consultStateMachine(&menuTesteSub);
 8005028:	f107 0308 	add.w	r3, r7, #8
 800502c:	4618      	mov	r0, r3
 800502e:	f7fc fbe7 	bl	8001800 <consultStateMachine>
				 menuTesteMain.menuState = getNextMain(START_TEST);
 8005032:	2001      	movs	r0, #1
 8005034:	f000 fba2 	bl	800577c <getNextMain>
 8005038:	4603      	mov	r3, r0
 800503a:	73fb      	strb	r3, [r7, #15]
				 menuTesteSub.menuState = IDDLE;
 800503c:	2300      	movs	r3, #0
 800503e:	72fb      	strb	r3, [r7, #11]
				 menuTesteSub.menuSelect = IDDLE;
 8005040:	2300      	movs	r3, #0
 8005042:	727b      	strb	r3, [r7, #9]
		  break;
 8005044:	e0be      	b.n	80051c4 <main+0x334>

		  case CONFIG_SENSOR:
			  updateUserMsg(0,0,configUserMsg,&displayUpdateStatus);
 8005046:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <main+0x36c>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	1dfb      	adds	r3, r7, #7
 800504c:	2100      	movs	r1, #0
 800504e:	2000      	movs	r0, #0
 8005050:	f7fd fd1b 	bl	8002a8a <updateUserMsg>
			  if(key == AVANCAR)
 8005054:	4b66      	ldr	r3, [pc, #408]	; (80051f0 <main+0x360>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b41      	cmp	r3, #65	; 0x41
 800505c:	d10d      	bne.n	800507a <main+0x1ea>
			  {
				  resetKeyPressed();
 800505e:	f7ff fed5 	bl	8004e0c <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8005062:	1d3a      	adds	r2, r7, #4
 8005064:	1dfb      	adds	r3, r7, #7
 8005066:	4611      	mov	r1, r2
 8005068:	4618      	mov	r0, r3
 800506a:	f7fd fd2c 	bl	8002ac6 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(EXPORT_DATA);
 800506e:	2004      	movs	r0, #4
 8005070:	f000 fb84 	bl	800577c <getNextMain>
 8005074:	4603      	mov	r3, r0
 8005076:	73fb      	strb	r3, [r7, #15]
				  configStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 8005078:	e0a6      	b.n	80051c8 <main+0x338>
			  else if(key == CONFIRMAR)
 800507a:	4b5d      	ldr	r3, [pc, #372]	; (80051f0 <main+0x360>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b43      	cmp	r3, #67	; 0x43
 8005082:	f040 80a1 	bne.w	80051c8 <main+0x338>
				  resetKeyPressed();
 8005086:	f7ff fec1 	bl	8004e0c <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800508a:	1d3a      	adds	r2, r7, #4
 800508c:	1dfb      	adds	r3, r7, #7
 800508e:	4611      	mov	r1, r2
 8005090:	4618      	mov	r0, r3
 8005092:	f7fd fd18 	bl	8002ac6 <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 8005096:	f107 030c 	add.w	r3, r7, #12
 800509a:	3303      	adds	r3, #3
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fb7f 	bl	80057a0 <setSelectMain>
 80050a2:	4603      	mov	r3, r0
 80050a4:	73fb      	strb	r3, [r7, #15]
				  configStateMachine(&menuTesteSub);
 80050a6:	f107 0308 	add.w	r3, r7, #8
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fb fe94 	bl	8000dd8 <configStateMachine>
				  menuTesteSub.menuState = IDDLE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 80050b4:	2300      	movs	r3, #0
 80050b6:	727b      	strb	r3, [r7, #9]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 80050b8:	2001      	movs	r0, #1
 80050ba:	f000 fb5f 	bl	800577c <getNextMain>
 80050be:	4603      	mov	r3, r0
 80050c0:	73fb      	strb	r3, [r7, #15]
		  break;
 80050c2:	e081      	b.n	80051c8 <main+0x338>

		  case EXPORT_DATA:
			  updateUserMsg(0,0,exportUserMsg,&displayUpdateStatus);
 80050c4:	4b4e      	ldr	r3, [pc, #312]	; (8005200 <main+0x370>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	1dfb      	adds	r3, r7, #7
 80050ca:	2100      	movs	r1, #0
 80050cc:	2000      	movs	r0, #0
 80050ce:	f7fd fcdc 	bl	8002a8a <updateUserMsg>
			  if(key == AVANCAR)
 80050d2:	4b47      	ldr	r3, [pc, #284]	; (80051f0 <main+0x360>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b41      	cmp	r3, #65	; 0x41
 80050da:	d10d      	bne.n	80050f8 <main+0x268>
			  {
				  resetKeyPressed();
 80050dc:	f7ff fe96 	bl	8004e0c <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 80050e0:	1d3a      	adds	r2, r7, #4
 80050e2:	1dfb      	adds	r3, r7, #7
 80050e4:	4611      	mov	r1, r2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fd fced 	bl	8002ac6 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(ERASE_DATA);
 80050ec:	2005      	movs	r0, #5
 80050ee:	f000 fb45 	bl	800577c <getNextMain>
 80050f2:	4603      	mov	r3, r0
 80050f4:	73fb      	strb	r3, [r7, #15]
				  exportStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 80050f6:	e069      	b.n	80051cc <main+0x33c>
			  else if(key == CONFIRMAR)
 80050f8:	4b3d      	ldr	r3, [pc, #244]	; (80051f0 <main+0x360>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b43      	cmp	r3, #67	; 0x43
 8005100:	d164      	bne.n	80051cc <main+0x33c>
				  resetKeyPressed();
 8005102:	f7ff fe83 	bl	8004e0c <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8005106:	1d3a      	adds	r2, r7, #4
 8005108:	1dfb      	adds	r3, r7, #7
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f7fd fcda 	bl	8002ac6 <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 8005112:	f107 030c 	add.w	r3, r7, #12
 8005116:	3303      	adds	r3, #3
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fb41 	bl	80057a0 <setSelectMain>
 800511e:	4603      	mov	r3, r0
 8005120:	73fb      	strb	r3, [r7, #15]
				  exportStateMachine(&menuTesteSub);
 8005122:	f107 0308 	add.w	r3, r7, #8
 8005126:	4618      	mov	r0, r3
 8005128:	f7fd fd00 	bl	8002b2c <exportStateMachine>
				  menuTesteSub.menuState = IDDLE;
 800512c:	2300      	movs	r3, #0
 800512e:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 8005130:	2300      	movs	r3, #0
 8005132:	727b      	strb	r3, [r7, #9]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005134:	2001      	movs	r0, #1
 8005136:	f000 fb21 	bl	800577c <getNextMain>
 800513a:	4603      	mov	r3, r0
 800513c:	73fb      	strb	r3, [r7, #15]
		  break;
 800513e:	e045      	b.n	80051cc <main+0x33c>

		  case ERASE_DATA:
			  updateUserMsg(0,0,eraseUserMsg,&displayUpdateStatus);
 8005140:	4b30      	ldr	r3, [pc, #192]	; (8005204 <main+0x374>)
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	1dfb      	adds	r3, r7, #7
 8005146:	2100      	movs	r1, #0
 8005148:	2000      	movs	r0, #0
 800514a:	f7fd fc9e 	bl	8002a8a <updateUserMsg>
			  if(key == AVANCAR)
 800514e:	4b28      	ldr	r3, [pc, #160]	; (80051f0 <main+0x360>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b41      	cmp	r3, #65	; 0x41
 8005156:	d10d      	bne.n	8005174 <main+0x2e4>
			  {
				  resetKeyPressed();
 8005158:	f7ff fe58 	bl	8004e0c <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 800515c:	1d3a      	adds	r2, r7, #4
 800515e:	1dfb      	adds	r3, r7, #7
 8005160:	4611      	mov	r1, r2
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd fcaf 	bl	8002ac6 <readyUserInterface>
				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005168:	2001      	movs	r0, #1
 800516a:	f000 fb07 	bl	800577c <getNextMain>
 800516e:	4603      	mov	r3, r0
 8005170:	73fb      	strb	r3, [r7, #15]
				  eraseStateMachine(&menuTesteSub);
				  menuTesteSub.menuState = IDDLE;
				  menuTesteSub.menuSelect = IDDLE;
				  menuTesteMain.menuState = getNextMain(START_TEST);
			  }
		  break;
 8005172:	e02d      	b.n	80051d0 <main+0x340>
			  else if(key == CONFIRMAR)
 8005174:	4b1e      	ldr	r3, [pc, #120]	; (80051f0 <main+0x360>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b43      	cmp	r3, #67	; 0x43
 800517c:	d128      	bne.n	80051d0 <main+0x340>
				  resetKeyPressed();
 800517e:	f7ff fe45 	bl	8004e0c <resetKeyPressed>
				  readyUserInterface(&displayUpdateStatus,cursorPosition);
 8005182:	1d3a      	adds	r2, r7, #4
 8005184:	1dfb      	adds	r3, r7, #7
 8005186:	4611      	mov	r1, r2
 8005188:	4618      	mov	r0, r3
 800518a:	f7fd fc9c 	bl	8002ac6 <readyUserInterface>
				  menuTesteMain.menuState = setSelectMain(&menuTesteMain.menuState);
 800518e:	f107 030c 	add.w	r3, r7, #12
 8005192:	3303      	adds	r3, #3
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fb03 	bl	80057a0 <setSelectMain>
 800519a:	4603      	mov	r3, r0
 800519c:	73fb      	strb	r3, [r7, #15]
				  eraseStateMachine(&menuTesteSub);
 800519e:	f107 0308 	add.w	r3, r7, #8
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fb fd7e 	bl	8000ca4 <eraseStateMachine>
				  menuTesteSub.menuState = IDDLE;
 80051a8:	2300      	movs	r3, #0
 80051aa:	72fb      	strb	r3, [r7, #11]
				  menuTesteSub.menuSelect = IDDLE;
 80051ac:	2300      	movs	r3, #0
 80051ae:	727b      	strb	r3, [r7, #9]
				  menuTesteMain.menuState = getNextMain(START_TEST);
 80051b0:	2001      	movs	r0, #1
 80051b2:	f000 fae3 	bl	800577c <getNextMain>
 80051b6:	4603      	mov	r3, r0
 80051b8:	73fb      	strb	r3, [r7, #15]
		  break;
 80051ba:	e009      	b.n	80051d0 <main+0x340>
		  break;
 80051bc:	bf00      	nop
 80051be:	e6a0      	b.n	8004f02 <main+0x72>
		  break;
 80051c0:	bf00      	nop
 80051c2:	e69e      	b.n	8004f02 <main+0x72>
		  break;
 80051c4:	bf00      	nop
 80051c6:	e69c      	b.n	8004f02 <main+0x72>
		  break;
 80051c8:	bf00      	nop
 80051ca:	e69a      	b.n	8004f02 <main+0x72>
		  break;
 80051cc:	bf00      	nop
 80051ce:	e698      	b.n	8004f02 <main+0x72>
		  break;
 80051d0:	bf00      	nop
	  switch(menuTesteMain.menuState)
 80051d2:	e696      	b.n	8004f02 <main+0x72>
 80051d4:	20000648 	.word	0x20000648
 80051d8:	200005b4 	.word	0x200005b4
 80051dc:	200005f8 	.word	0x200005f8
 80051e0:	40011000 	.word	0x40011000
 80051e4:	20000014 	.word	0x20000014
 80051e8:	20000018 	.word	0x20000018
 80051ec:	2000001c 	.word	0x2000001c
 80051f0:	2000063c 	.word	0x2000063c
 80051f4:	20000020 	.word	0x20000020
 80051f8:	20000058 	.word	0x20000058
 80051fc:	20000068 	.word	0x20000068
 8005200:	2000009c 	.word	0x2000009c
 8005204:	200000a8 	.word	0x200000a8

08005208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b090      	sub	sp, #64	; 0x40
 800520c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800520e:	f107 0318 	add.w	r3, r7, #24
 8005212:	2228      	movs	r2, #40	; 0x28
 8005214:	2100      	movs	r1, #0
 8005216:	4618      	mov	r0, r3
 8005218:	f004 f80a 	bl	8009230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800521c:	1d3b      	adds	r3, r7, #4
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	605a      	str	r2, [r3, #4]
 8005224:	609a      	str	r2, [r3, #8]
 8005226:	60da      	str	r2, [r3, #12]
 8005228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800522a:	2301      	movs	r3, #1
 800522c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800522e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005232:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005234:	2300      	movs	r3, #0
 8005236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005238:	2301      	movs	r3, #1
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800523c:	2302      	movs	r3, #2
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800524a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800524c:	f107 0318 	add.w	r3, r7, #24
 8005250:	4618      	mov	r0, r3
 8005252:	f001 fb1d 	bl	8006890 <HAL_RCC_OscConfig>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800525c:	f000 fa88 	bl	8005770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005260:	230f      	movs	r3, #15
 8005262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005264:	2302      	movs	r3, #2
 8005266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800526c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f001 fd8a 	bl	8006d94 <HAL_RCC_ClockConfig>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005286:	f000 fa73 	bl	8005770 <Error_Handler>
  }
}
 800528a:	bf00      	nop
 800528c:	3740      	adds	r7, #64	; 0x40
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005298:	4b17      	ldr	r3, [pc, #92]	; (80052f8 <MX_SPI1_Init+0x64>)
 800529a:	4a18      	ldr	r2, [pc, #96]	; (80052fc <MX_SPI1_Init+0x68>)
 800529c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800529e:	4b16      	ldr	r3, [pc, #88]	; (80052f8 <MX_SPI1_Init+0x64>)
 80052a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80052a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80052a6:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <MX_SPI1_Init+0x64>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80052ac:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <MX_SPI1_Init+0x64>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052b2:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <MX_SPI1_Init+0x64>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052b8:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <MX_SPI1_Init+0x64>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80052be:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <MX_SPI1_Init+0x64>)
 80052c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80052c6:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <MX_SPI1_Init+0x64>)
 80052c8:	2208      	movs	r2, #8
 80052ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052cc:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <MX_SPI1_Init+0x64>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80052d2:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <MX_SPI1_Init+0x64>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052d8:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <MX_SPI1_Init+0x64>)
 80052da:	2200      	movs	r2, #0
 80052dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <MX_SPI1_Init+0x64>)
 80052e0:	220a      	movs	r2, #10
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80052e4:	4804      	ldr	r0, [pc, #16]	; (80052f8 <MX_SPI1_Init+0x64>)
 80052e6:	f001 feed 	bl	80070c4 <HAL_SPI_Init>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80052f0:	f000 fa3e 	bl	8005770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80052f4:	bf00      	nop
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	200004cc 	.word	0x200004cc
 80052fc:	40013000 	.word	0x40013000

08005300 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08c      	sub	sp, #48	; 0x30
 8005304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005306:	f107 030c 	add.w	r3, r7, #12
 800530a:	2224      	movs	r2, #36	; 0x24
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f003 ff8e 	bl	8009230 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005314:	1d3b      	adds	r3, r7, #4
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800531c:	4b21      	ldr	r3, [pc, #132]	; (80053a4 <MX_TIM2_Init+0xa4>)
 800531e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005322:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005324:	4b1f      	ldr	r3, [pc, #124]	; (80053a4 <MX_TIM2_Init+0xa4>)
 8005326:	2200      	movs	r2, #0
 8005328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800532a:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <MX_TIM2_Init+0xa4>)
 800532c:	2200      	movs	r2, #0
 800532e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005330:	4b1c      	ldr	r3, [pc, #112]	; (80053a4 <MX_TIM2_Init+0xa4>)
 8005332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005336:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <MX_TIM2_Init+0xa4>)
 800533a:	2200      	movs	r2, #0
 800533c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800533e:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <MX_TIM2_Init+0xa4>)
 8005340:	2200      	movs	r2, #0
 8005342:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005344:	2301      	movs	r3, #1
 8005346:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005348:	2302      	movs	r3, #2
 800534a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800534c:	2301      	movs	r3, #1
 800534e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005354:	230f      	movs	r3, #15
 8005356:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005358:	2300      	movs	r3, #0
 800535a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800535c:	2301      	movs	r3, #1
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005360:	2300      	movs	r3, #0
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005364:	230f      	movs	r3, #15
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005368:	f107 030c 	add.w	r3, r7, #12
 800536c:	4619      	mov	r1, r3
 800536e:	480d      	ldr	r0, [pc, #52]	; (80053a4 <MX_TIM2_Init+0xa4>)
 8005370:	f002 fb80 	bl	8007a74 <HAL_TIM_Encoder_Init>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800537a:	f000 f9f9 	bl	8005770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800537e:	2300      	movs	r3, #0
 8005380:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005382:	2300      	movs	r3, #0
 8005384:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005386:	1d3b      	adds	r3, r7, #4
 8005388:	4619      	mov	r1, r3
 800538a:	4806      	ldr	r0, [pc, #24]	; (80053a4 <MX_TIM2_Init+0xa4>)
 800538c:	f003 f87a 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005396:	f000 f9eb 	bl	8005770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800539a:	bf00      	nop
 800539c:	3730      	adds	r7, #48	; 0x30
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000524 	.word	0x20000524

080053a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053ae:	f107 0308 	add.w	r3, r7, #8
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	605a      	str	r2, [r3, #4]
 80053b8:	609a      	str	r2, [r3, #8]
 80053ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053bc:	463b      	mov	r3, r7
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80053c4:	4b1d      	ldr	r3, [pc, #116]	; (800543c <MX_TIM3_Init+0x94>)
 80053c6:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <MX_TIM3_Init+0x98>)
 80053c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80053ca:	4b1c      	ldr	r3, [pc, #112]	; (800543c <MX_TIM3_Init+0x94>)
 80053cc:	2247      	movs	r2, #71	; 0x47
 80053ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053d0:	4b1a      	ldr	r3, [pc, #104]	; (800543c <MX_TIM3_Init+0x94>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80053d6:	4b19      	ldr	r3, [pc, #100]	; (800543c <MX_TIM3_Init+0x94>)
 80053d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80053dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053de:	4b17      	ldr	r3, [pc, #92]	; (800543c <MX_TIM3_Init+0x94>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053e4:	4b15      	ldr	r3, [pc, #84]	; (800543c <MX_TIM3_Init+0x94>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80053ea:	4814      	ldr	r0, [pc, #80]	; (800543c <MX_TIM3_Init+0x94>)
 80053ec:	f002 fa72 	bl	80078d4 <HAL_TIM_Base_Init>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80053f6:	f000 f9bb 	bl	8005770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005400:	f107 0308 	add.w	r3, r7, #8
 8005404:	4619      	mov	r1, r3
 8005406:	480d      	ldr	r0, [pc, #52]	; (800543c <MX_TIM3_Init+0x94>)
 8005408:	f002 fe41 	bl	800808e <HAL_TIM_ConfigClockSource>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8005412:	f000 f9ad 	bl	8005770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005416:	2300      	movs	r3, #0
 8005418:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800541a:	2300      	movs	r3, #0
 800541c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800541e:	463b      	mov	r3, r7
 8005420:	4619      	mov	r1, r3
 8005422:	4806      	ldr	r0, [pc, #24]	; (800543c <MX_TIM3_Init+0x94>)
 8005424:	f003 f82e 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800542e:	f000 f99f 	bl	8005770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005432:	bf00      	nop
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	2000056c 	.word	0x2000056c
 8005440:	40000400 	.word	0x40000400

08005444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005448:	4b11      	ldr	r3, [pc, #68]	; (8005490 <MX_USART2_UART_Init+0x4c>)
 800544a:	4a12      	ldr	r2, [pc, #72]	; (8005494 <MX_USART2_UART_Init+0x50>)
 800544c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800544e:	4b10      	ldr	r3, [pc, #64]	; (8005490 <MX_USART2_UART_Init+0x4c>)
 8005450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005456:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <MX_USART2_UART_Init+0x4c>)
 8005458:	2200      	movs	r2, #0
 800545a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <MX_USART2_UART_Init+0x4c>)
 800545e:	2200      	movs	r2, #0
 8005460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005462:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <MX_USART2_UART_Init+0x4c>)
 8005464:	2200      	movs	r2, #0
 8005466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <MX_USART2_UART_Init+0x4c>)
 800546a:	220c      	movs	r2, #12
 800546c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800546e:	4b08      	ldr	r3, [pc, #32]	; (8005490 <MX_USART2_UART_Init+0x4c>)
 8005470:	2200      	movs	r2, #0
 8005472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005474:	4b06      	ldr	r3, [pc, #24]	; (8005490 <MX_USART2_UART_Init+0x4c>)
 8005476:	2200      	movs	r2, #0
 8005478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800547a:	4805      	ldr	r0, [pc, #20]	; (8005490 <MX_USART2_UART_Init+0x4c>)
 800547c:	f003 f872 	bl	8008564 <HAL_UART_Init>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005486:	f000 f973 	bl	8005770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800548a:	bf00      	nop
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	200005b4 	.word	0x200005b4
 8005494:	40004400 	.word	0x40004400

08005498 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <MX_DMA_Init+0x38>)
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	4a0b      	ldr	r2, [pc, #44]	; (80054d0 <MX_DMA_Init+0x38>)
 80054a4:	f043 0301 	orr.w	r3, r3, #1
 80054a8:	6153      	str	r3, [r2, #20]
 80054aa:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <MX_DMA_Init+0x38>)
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	607b      	str	r3, [r7, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80054b6:	2200      	movs	r2, #0
 80054b8:	2100      	movs	r1, #0
 80054ba:	2010      	movs	r0, #16
 80054bc:	f000 fd45 	bl	8005f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80054c0:	2010      	movs	r0, #16
 80054c2:	f000 fd5e 	bl	8005f82 <HAL_NVIC_EnableIRQ>

}
 80054c6:	bf00      	nop
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40021000 	.word	0x40021000

080054d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054da:	f107 0310 	add.w	r3, r7, #16
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	605a      	str	r2, [r3, #4]
 80054e4:	609a      	str	r2, [r3, #8]
 80054e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054e8:	4b47      	ldr	r3, [pc, #284]	; (8005608 <MX_GPIO_Init+0x134>)
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	4a46      	ldr	r2, [pc, #280]	; (8005608 <MX_GPIO_Init+0x134>)
 80054ee:	f043 0310 	orr.w	r3, r3, #16
 80054f2:	6193      	str	r3, [r2, #24]
 80054f4:	4b44      	ldr	r3, [pc, #272]	; (8005608 <MX_GPIO_Init+0x134>)
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005500:	4b41      	ldr	r3, [pc, #260]	; (8005608 <MX_GPIO_Init+0x134>)
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	4a40      	ldr	r2, [pc, #256]	; (8005608 <MX_GPIO_Init+0x134>)
 8005506:	f043 0320 	orr.w	r3, r3, #32
 800550a:	6193      	str	r3, [r2, #24]
 800550c:	4b3e      	ldr	r3, [pc, #248]	; (8005608 <MX_GPIO_Init+0x134>)
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005518:	4b3b      	ldr	r3, [pc, #236]	; (8005608 <MX_GPIO_Init+0x134>)
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	4a3a      	ldr	r2, [pc, #232]	; (8005608 <MX_GPIO_Init+0x134>)
 800551e:	f043 0304 	orr.w	r3, r3, #4
 8005522:	6193      	str	r3, [r2, #24]
 8005524:	4b38      	ldr	r3, [pc, #224]	; (8005608 <MX_GPIO_Init+0x134>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005530:	4b35      	ldr	r3, [pc, #212]	; (8005608 <MX_GPIO_Init+0x134>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	4a34      	ldr	r2, [pc, #208]	; (8005608 <MX_GPIO_Init+0x134>)
 8005536:	f043 0308 	orr.w	r3, r3, #8
 800553a:	6193      	str	r3, [r2, #24]
 800553c:	4b32      	ldr	r3, [pc, #200]	; (8005608 <MX_GPIO_Init+0x134>)
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005548:	2200      	movs	r2, #0
 800554a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800554e:	482f      	ldr	r0, [pc, #188]	; (800560c <MX_GPIO_Init+0x138>)
 8005550:	f001 f954 	bl	80067fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8005554:	2200      	movs	r2, #0
 8005556:	f649 7110 	movw	r1, #40720	; 0x9f10
 800555a:	482d      	ldr	r0, [pc, #180]	; (8005610 <MX_GPIO_Init+0x13c>)
 800555c:	f001 f94e 	bl	80067fc <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8005560:	2200      	movs	r2, #0
 8005562:	f24f 2108 	movw	r1, #61960	; 0xf208
 8005566:	482b      	ldr	r0, [pc, #172]	; (8005614 <MX_GPIO_Init+0x140>)
 8005568:	f001 f948 	bl	80067fc <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800556c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005572:	2301      	movs	r3, #1
 8005574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005576:	2300      	movs	r3, #0
 8005578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800557a:	2302      	movs	r3, #2
 800557c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800557e:	f107 0310 	add.w	r3, r7, #16
 8005582:	4619      	mov	r1, r3
 8005584:	4821      	ldr	r0, [pc, #132]	; (800560c <MX_GPIO_Init+0x138>)
 8005586:	f000 ffb5 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LCD_D3_Pin LCD_D2_Pin LCD_D1_Pin
                           LCD_D0_Pin LCD_EN_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 800558a:	f649 7310 	movw	r3, #40720	; 0x9f10
 800558e:	613b      	str	r3, [r7, #16]
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005590:	2301      	movs	r3, #1
 8005592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005594:	2300      	movs	r3, #0
 8005596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005598:	2302      	movs	r3, #2
 800559a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800559c:	f107 0310 	add.w	r3, r7, #16
 80055a0:	4619      	mov	r1, r3
 80055a2:	481b      	ldr	r0, [pc, #108]	; (8005610 <MX_GPIO_Init+0x13c>)
 80055a4:	f000 ffa6 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_RS_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 80055a8:	f24f 2308 	movw	r3, #61960	; 0xf208
 80055ac:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055ae:	2301      	movs	r3, #1
 80055b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b6:	2302      	movs	r3, #2
 80055b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ba:	f107 0310 	add.w	r3, r7, #16
 80055be:	4619      	mov	r1, r3
 80055c0:	4814      	ldr	r0, [pc, #80]	; (8005614 <MX_GPIO_Init+0x140>)
 80055c2:	f000 ff97 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_MENU_Pin BT_AVANCA_Pin BT_SELECT_Pin BT_STOP_Pin
                           BT_INSERT_Pin */
  GPIO_InitStruct.Pin = BT_MENU_Pin|BT_AVANCA_Pin|BT_SELECT_Pin|BT_STOP_Pin
 80055c6:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80055ca:	613b      	str	r3, [r7, #16]
                          |BT_INSERT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80055cc:	4b12      	ldr	r3, [pc, #72]	; (8005618 <MX_GPIO_Init+0x144>)
 80055ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055d0:	2301      	movs	r3, #1
 80055d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d4:	f107 0310 	add.w	r3, r7, #16
 80055d8:	4619      	mov	r1, r3
 80055da:	480e      	ldr	r0, [pc, #56]	; (8005614 <MX_GPIO_Init+0x140>)
 80055dc:	f000 ff8a 	bl	80064f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80055e0:	2200      	movs	r2, #0
 80055e2:	2100      	movs	r1, #0
 80055e4:	200a      	movs	r0, #10
 80055e6:	f000 fcb0 	bl	8005f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80055ea:	200a      	movs	r0, #10
 80055ec:	f000 fcc9 	bl	8005f82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80055f0:	2200      	movs	r2, #0
 80055f2:	2100      	movs	r1, #0
 80055f4:	2017      	movs	r0, #23
 80055f6:	f000 fca8 	bl	8005f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80055fa:	2017      	movs	r0, #23
 80055fc:	f000 fcc1 	bl	8005f82 <HAL_NVIC_EnableIRQ>

}
 8005600:	bf00      	nop
 8005602:	3720      	adds	r7, #32
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40021000 	.word	0x40021000
 800560c:	40011000 	.word	0x40011000
 8005610:	40010800 	.word	0x40010800
 8005614:	40010c00 	.word	0x40010c00
 8005618:	10210000 	.word	0x10210000

0800561c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
//	if(timer3Count == 100) //100ms
//	{
//		timer3Data += 1; //cada unidade aqui deve ser multiplicada por 100 para ter o valor real em ms.
//		timer3Count = 0;
//	}
	if(htim == &htim3)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a0c      	ldr	r2, [pc, #48]	; (8005658 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d110      	bne.n	800564e <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		timer3Count+=1;  //1ms
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3301      	adds	r3, #1
 8005632:	4a0a      	ldr	r2, [pc, #40]	; (800565c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005634:	6013      	str	r3, [r2, #0]
		if(timer3Count == 10) //100ms
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b0a      	cmp	r3, #10
 800563c:	d107      	bne.n	800564e <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			timer3Data += 10;
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330a      	adds	r3, #10
 8005644:	4a06      	ldr	r2, [pc, #24]	; (8005660 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005646:	6013      	str	r3, [r2, #0]
			timer3Count = 0;
 8005648:	4b04      	ldr	r3, [pc, #16]	; (800565c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
		}
	}


}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr
 8005658:	2000056c 	.word	0x2000056c
 800565c:	20000644 	.word	0x20000644
 8005660:	20000640 	.word	0x20000640

08005664 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	807b      	strh	r3, [r7, #2]

	uartBuffer[0]+=1;
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <HAL_UARTEx_RxEventCallback+0x3c>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	3301      	adds	r3, #1
 8005678:	b2da      	uxtb	r2, r3
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <HAL_UARTEx_RxEventCallback+0x3c>)
 800567c:	701a      	strb	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 800567e:	2205      	movs	r2, #5
 8005680:	4907      	ldr	r1, [pc, #28]	; (80056a0 <HAL_UARTEx_RxEventCallback+0x3c>)
 8005682:	4808      	ldr	r0, [pc, #32]	; (80056a4 <HAL_UARTEx_RxEventCallback+0x40>)
 8005684:	f002 ffbb 	bl	80085fe <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8005688:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <HAL_UARTEx_RxEventCallback+0x44>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <HAL_UARTEx_RxEventCallback+0x44>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0204 	bic.w	r2, r2, #4
 8005696:	601a      	str	r2, [r3, #0]

}
 8005698:	bf00      	nop
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000648 	.word	0x20000648
 80056a4:	200005b4 	.word	0x200005b4
 80056a8:	200005f8 	.word	0x200005f8

080056ac <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a11      	ldr	r2, [pc, #68]	; (80056fc <HAL_TIM_IC_CaptureCallback+0x50>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d11a      	bne.n	80056f2 <HAL_TIM_IC_CaptureCallback+0x46>
	{
		if(htim->Channel == 2)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	7f1b      	ldrb	r3, [r3, #28]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d109      	bne.n	80056d8 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80056c4:	2201      	movs	r2, #1
 80056c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056ca:	480d      	ldr	r0, [pc, #52]	; (8005700 <HAL_TIM_IC_CaptureCallback+0x54>)
 80056cc:	f001 f896 	bl	80067fc <HAL_GPIO_WritePin>
			sensorFlag = 1;
 80056d0:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <HAL_TIM_IC_CaptureCallback+0x58>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	701a      	strb	r2, [r3, #0]
//	arraySample[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].sampleNum;
//	arrayAltDistance[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].ucAltDistance;
//	arrayVooTime[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].uiVooTime;
//	arrayReadingTime[sampleCount] = result[indexTest].sampleMeasurement[sampleCount].ulReadingTime;
//	sampleCount++;
}
 80056d6:	e00c      	b.n	80056f2 <HAL_TIM_IC_CaptureCallback+0x46>
		else if(htim->Channel == 1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	7f1b      	ldrb	r3, [r3, #28]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d108      	bne.n	80056f2 <HAL_TIM_IC_CaptureCallback+0x46>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80056e0:	2200      	movs	r2, #0
 80056e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056e6:	4806      	ldr	r0, [pc, #24]	; (8005700 <HAL_TIM_IC_CaptureCallback+0x54>)
 80056e8:	f001 f888 	bl	80067fc <HAL_GPIO_WritePin>
			sensorFlag = 0;
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <HAL_TIM_IC_CaptureCallback+0x58>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000524 	.word	0x20000524
 8005700:	40011000 	.word	0x40011000
 8005704:	200000b9 	.word	0x200000b9

08005708 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005718:	d012      	beq.n	8005740 <HAL_GPIO_EXTI_Callback+0x38>
 800571a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571e:	dc1f      	bgt.n	8005760 <HAL_GPIO_EXTI_Callback+0x58>
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	d019      	beq.n	8005758 <HAL_GPIO_EXTI_Callback+0x50>
 8005724:	2b80      	cmp	r3, #128	; 0x80
 8005726:	dc1b      	bgt.n	8005760 <HAL_GPIO_EXTI_Callback+0x58>
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d011      	beq.n	8005750 <HAL_GPIO_EXTI_Callback+0x48>
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	dc17      	bgt.n	8005760 <HAL_GPIO_EXTI_Callback+0x58>
 8005730:	2b10      	cmp	r3, #16
 8005732:	d009      	beq.n	8005748 <HAL_GPIO_EXTI_Callback+0x40>
 8005734:	2b20      	cmp	r3, #32
 8005736:	d113      	bne.n	8005760 <HAL_GPIO_EXTI_Callback+0x58>
	{
		case BT_AVANCA_Pin:
			key = AVANCAR;
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <HAL_GPIO_EXTI_Callback+0x64>)
 800573a:	2241      	movs	r2, #65	; 0x41
 800573c:	701a      	strb	r2, [r3, #0]
		break;
 800573e:	e00f      	b.n	8005760 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_INSERT_Pin:
			key = INSERIR;
 8005740:	4b0a      	ldr	r3, [pc, #40]	; (800576c <HAL_GPIO_EXTI_Callback+0x64>)
 8005742:	2249      	movs	r2, #73	; 0x49
 8005744:	701a      	strb	r2, [r3, #0]
		break;
 8005746:	e00b      	b.n	8005760 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_MENU_Pin:
			key = MENU;
 8005748:	4b08      	ldr	r3, [pc, #32]	; (800576c <HAL_GPIO_EXTI_Callback+0x64>)
 800574a:	224d      	movs	r2, #77	; 0x4d
 800574c:	701a      	strb	r2, [r3, #0]
		break;
 800574e:	e007      	b.n	8005760 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_SELECT_Pin:
			key = CONFIRMAR;
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <HAL_GPIO_EXTI_Callback+0x64>)
 8005752:	2243      	movs	r2, #67	; 0x43
 8005754:	701a      	strb	r2, [r3, #0]
		break;
 8005756:	e003      	b.n	8005760 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_STOP_Pin:
			key = PARAR;
 8005758:	4b04      	ldr	r3, [pc, #16]	; (800576c <HAL_GPIO_EXTI_Callback+0x64>)
 800575a:	2250      	movs	r2, #80	; 0x50
 800575c:	701a      	strb	r2, [r3, #0]
		break;
 800575e:	bf00      	nop
	}

}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	2000063c 	.word	0x2000063c

08005770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005774:	b672      	cpsid	i
}
 8005776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005778:	e7fe      	b.n	8005778 <Error_Handler+0x8>
	...

0800577c <getNextMain>:

struct Menu menuMain ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextMain(unsigned char nextState)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	71fb      	strb	r3, [r7, #7]

    menuMain.menuNext = nextState;
 8005786:	4a05      	ldr	r2, [pc, #20]	; (800579c <getNextMain+0x20>)
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	7013      	strb	r3, [r2, #0]
    return menuMain.menuNext;
 800578c:	4b03      	ldr	r3, [pc, #12]	; (800579c <getNextMain+0x20>)
 800578e:	781b      	ldrb	r3, [r3, #0]
}
 8005790:	4618      	mov	r0, r3
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000650 	.word	0x20000650

080057a0 <setSelectMain>:

unsigned char setSelectMain(unsigned char *selectedState)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
    unsigned char state = *selectedState;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	73fb      	strb	r3, [r7, #15]
    menuMain.menuSelect = state;
 80057ae:	4a05      	ldr	r2, [pc, #20]	; (80057c4 <setSelectMain+0x24>)
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	7053      	strb	r3, [r2, #1]
    return menuMain.menuSelect;
 80057b4:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <setSelectMain+0x24>)
 80057b6:	785b      	ldrb	r3, [r3, #1]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20000650 	.word	0x20000650

080057c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80057ce:	4b15      	ldr	r3, [pc, #84]	; (8005824 <HAL_MspInit+0x5c>)
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	4a14      	ldr	r2, [pc, #80]	; (8005824 <HAL_MspInit+0x5c>)
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	6193      	str	r3, [r2, #24]
 80057da:	4b12      	ldr	r3, [pc, #72]	; (8005824 <HAL_MspInit+0x5c>)
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	60bb      	str	r3, [r7, #8]
 80057e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057e6:	4b0f      	ldr	r3, [pc, #60]	; (8005824 <HAL_MspInit+0x5c>)
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	4a0e      	ldr	r2, [pc, #56]	; (8005824 <HAL_MspInit+0x5c>)
 80057ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f0:	61d3      	str	r3, [r2, #28]
 80057f2:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <HAL_MspInit+0x5c>)
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fa:	607b      	str	r3, [r7, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <HAL_MspInit+0x60>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	4a04      	ldr	r2, [pc, #16]	; (8005828 <HAL_MspInit+0x60>)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr
 8005824:	40021000 	.word	0x40021000
 8005828:	40010000 	.word	0x40010000

0800582c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005834:	f107 0310 	add.w	r3, r7, #16
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	609a      	str	r2, [r3, #8]
 8005840:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1b      	ldr	r2, [pc, #108]	; (80058b4 <HAL_SPI_MspInit+0x88>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d12f      	bne.n	80058ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800584c:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <HAL_SPI_MspInit+0x8c>)
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	4a19      	ldr	r2, [pc, #100]	; (80058b8 <HAL_SPI_MspInit+0x8c>)
 8005852:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005856:	6193      	str	r3, [r2, #24]
 8005858:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <HAL_SPI_MspInit+0x8c>)
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005864:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <HAL_SPI_MspInit+0x8c>)
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	4a13      	ldr	r2, [pc, #76]	; (80058b8 <HAL_SPI_MspInit+0x8c>)
 800586a:	f043 0304 	orr.w	r3, r3, #4
 800586e:	6193      	str	r3, [r2, #24]
 8005870:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <HAL_SPI_MspInit+0x8c>)
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800587c:	23a0      	movs	r3, #160	; 0xa0
 800587e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005880:	2302      	movs	r3, #2
 8005882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005884:	2303      	movs	r3, #3
 8005886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005888:	f107 0310 	add.w	r3, r7, #16
 800588c:	4619      	mov	r1, r3
 800588e:	480b      	ldr	r0, [pc, #44]	; (80058bc <HAL_SPI_MspInit+0x90>)
 8005890:	f000 fe30 	bl	80064f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800589c:	2300      	movs	r3, #0
 800589e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a0:	f107 0310 	add.w	r3, r7, #16
 80058a4:	4619      	mov	r1, r3
 80058a6:	4805      	ldr	r0, [pc, #20]	; (80058bc <HAL_SPI_MspInit+0x90>)
 80058a8:	f000 fe24 	bl	80064f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80058ac:	bf00      	nop
 80058ae:	3720      	adds	r7, #32
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40013000 	.word	0x40013000
 80058b8:	40021000 	.word	0x40021000
 80058bc:	40010800 	.word	0x40010800

080058c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c8:	f107 0310 	add.w	r3, r7, #16
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058de:	d12b      	bne.n	8005938 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058e0:	4b17      	ldr	r3, [pc, #92]	; (8005940 <HAL_TIM_Encoder_MspInit+0x80>)
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	4a16      	ldr	r2, [pc, #88]	; (8005940 <HAL_TIM_Encoder_MspInit+0x80>)
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	61d3      	str	r3, [r2, #28]
 80058ec:	4b14      	ldr	r3, [pc, #80]	; (8005940 <HAL_TIM_Encoder_MspInit+0x80>)
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <HAL_TIM_Encoder_MspInit+0x80>)
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	4a10      	ldr	r2, [pc, #64]	; (8005940 <HAL_TIM_Encoder_MspInit+0x80>)
 80058fe:	f043 0304 	orr.w	r3, r3, #4
 8005902:	6193      	str	r3, [r2, #24]
 8005904:	4b0e      	ldr	r3, [pc, #56]	; (8005940 <HAL_TIM_Encoder_MspInit+0x80>)
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005910:	2303      	movs	r3, #3
 8005912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005918:	2300      	movs	r3, #0
 800591a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800591c:	f107 0310 	add.w	r3, r7, #16
 8005920:	4619      	mov	r1, r3
 8005922:	4808      	ldr	r0, [pc, #32]	; (8005944 <HAL_TIM_Encoder_MspInit+0x84>)
 8005924:	f000 fde6 	bl	80064f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005928:	2200      	movs	r2, #0
 800592a:	2100      	movs	r1, #0
 800592c:	201c      	movs	r0, #28
 800592e:	f000 fb0c 	bl	8005f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005932:	201c      	movs	r0, #28
 8005934:	f000 fb25 	bl	8005f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005938:	bf00      	nop
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40021000 	.word	0x40021000
 8005944:	40010800 	.word	0x40010800

08005948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a0d      	ldr	r2, [pc, #52]	; (800598c <HAL_TIM_Base_MspInit+0x44>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d113      	bne.n	8005982 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800595a:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <HAL_TIM_Base_MspInit+0x48>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	4a0c      	ldr	r2, [pc, #48]	; (8005990 <HAL_TIM_Base_MspInit+0x48>)
 8005960:	f043 0302 	orr.w	r3, r3, #2
 8005964:	61d3      	str	r3, [r2, #28]
 8005966:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <HAL_TIM_Base_MspInit+0x48>)
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005972:	2200      	movs	r2, #0
 8005974:	2100      	movs	r1, #0
 8005976:	201d      	movs	r0, #29
 8005978:	f000 fae7 	bl	8005f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800597c:	201d      	movs	r0, #29
 800597e:	f000 fb00 	bl	8005f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40000400 	.word	0x40000400
 8005990:	40021000 	.word	0x40021000

08005994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800599c:	f107 0310 	add.w	r3, r7, #16
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	609a      	str	r2, [r3, #8]
 80059a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a32      	ldr	r2, [pc, #200]	; (8005a78 <HAL_UART_MspInit+0xe4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d15d      	bne.n	8005a70 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80059b4:	4b31      	ldr	r3, [pc, #196]	; (8005a7c <HAL_UART_MspInit+0xe8>)
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	4a30      	ldr	r2, [pc, #192]	; (8005a7c <HAL_UART_MspInit+0xe8>)
 80059ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059be:	61d3      	str	r3, [r2, #28]
 80059c0:	4b2e      	ldr	r3, [pc, #184]	; (8005a7c <HAL_UART_MspInit+0xe8>)
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059cc:	4b2b      	ldr	r3, [pc, #172]	; (8005a7c <HAL_UART_MspInit+0xe8>)
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <HAL_UART_MspInit+0xe8>)
 80059d2:	f043 0304 	orr.w	r3, r3, #4
 80059d6:	6193      	str	r3, [r2, #24]
 80059d8:	4b28      	ldr	r3, [pc, #160]	; (8005a7c <HAL_UART_MspInit+0xe8>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	60bb      	str	r3, [r7, #8]
 80059e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80059e4:	2304      	movs	r3, #4
 80059e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e8:	2302      	movs	r3, #2
 80059ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059ec:	2303      	movs	r3, #3
 80059ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059f0:	f107 0310 	add.w	r3, r7, #16
 80059f4:	4619      	mov	r1, r3
 80059f6:	4822      	ldr	r0, [pc, #136]	; (8005a80 <HAL_UART_MspInit+0xec>)
 80059f8:	f000 fd7c 	bl	80064f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80059fc:	2308      	movs	r3, #8
 80059fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a08:	f107 0310 	add.w	r3, r7, #16
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	481c      	ldr	r0, [pc, #112]	; (8005a80 <HAL_UART_MspInit+0xec>)
 8005a10:	f000 fd70 	bl	80064f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005a14:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <HAL_UART_MspInit+0xf0>)
 8005a16:	4a1c      	ldr	r2, [pc, #112]	; (8005a88 <HAL_UART_MspInit+0xf4>)
 8005a18:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a1a:	4b1a      	ldr	r3, [pc, #104]	; (8005a84 <HAL_UART_MspInit+0xf0>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a20:	4b18      	ldr	r3, [pc, #96]	; (8005a84 <HAL_UART_MspInit+0xf0>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a26:	4b17      	ldr	r3, [pc, #92]	; (8005a84 <HAL_UART_MspInit+0xf0>)
 8005a28:	2280      	movs	r2, #128	; 0x80
 8005a2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a2c:	4b15      	ldr	r3, [pc, #84]	; (8005a84 <HAL_UART_MspInit+0xf0>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a32:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <HAL_UART_MspInit+0xf0>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005a38:	4b12      	ldr	r3, [pc, #72]	; (8005a84 <HAL_UART_MspInit+0xf0>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a3e:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <HAL_UART_MspInit+0xf0>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005a44:	480f      	ldr	r0, [pc, #60]	; (8005a84 <HAL_UART_MspInit+0xf0>)
 8005a46:	f000 fab7 	bl	8005fb8 <HAL_DMA_Init>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8005a50:	f7ff fe8e 	bl	8005770 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a0b      	ldr	r2, [pc, #44]	; (8005a84 <HAL_UART_MspInit+0xf0>)
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
 8005a5a:	4a0a      	ldr	r2, [pc, #40]	; (8005a84 <HAL_UART_MspInit+0xf0>)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a60:	2200      	movs	r2, #0
 8005a62:	2100      	movs	r1, #0
 8005a64:	2026      	movs	r0, #38	; 0x26
 8005a66:	f000 fa70 	bl	8005f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005a6a:	2026      	movs	r0, #38	; 0x26
 8005a6c:	f000 fa89 	bl	8005f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005a70:	bf00      	nop
 8005a72:	3720      	adds	r7, #32
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40004400 	.word	0x40004400
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	40010800 	.word	0x40010800
 8005a84:	200005f8 	.word	0x200005f8
 8005a88:	4002006c 	.word	0x4002006c

08005a8c <SDTimerHandler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1,Timer2;

void SDTimerHandler(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
	if(Timer1>0)
 8005a90:	4b0d      	ldr	r3, [pc, #52]	; (8005ac8 <SDTimerHandler+0x3c>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d006      	beq.n	8005aa8 <SDTimerHandler+0x1c>
		Timer1--;
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <SDTimerHandler+0x3c>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <SDTimerHandler+0x3c>)
 8005aa6:	701a      	strb	r2, [r3, #0]

	if(Timer2>0)
 8005aa8:	4b08      	ldr	r3, [pc, #32]	; (8005acc <SDTimerHandler+0x40>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d006      	beq.n	8005ac0 <SDTimerHandler+0x34>
		Timer2--;
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <SDTimerHandler+0x40>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	4b03      	ldr	r3, [pc, #12]	; (8005acc <SDTimerHandler+0x40>)
 8005abe:	701a      	strb	r2, [r3, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	4770      	bx	lr
 8005ac8:	20000655 	.word	0x20000655
 8005acc:	20000656 	.word	0x20000656

08005ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ad4:	e7fe      	b.n	8005ad4 <NMI_Handler+0x4>

08005ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ada:	e7fe      	b.n	8005ada <HardFault_Handler+0x4>

08005adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ae0:	e7fe      	b.n	8005ae0 <MemManage_Handler+0x4>

08005ae2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ae6:	e7fe      	b.n	8005ae6 <BusFault_Handler+0x4>

08005ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005aec:	e7fe      	b.n	8005aec <UsageFault_Handler+0x4>

08005aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005aee:	b480      	push	{r7}
 8005af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005af2:	bf00      	nop
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr

08005afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005afa:	b480      	push	{r7}
 8005afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005afe:	bf00      	nop
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr

08005b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b06:	b480      	push	{r7}
 8005b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr
	...

08005b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <SysTick_Handler+0x30>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	3301      	adds	r3, #1
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <SysTick_Handler+0x30>)
 8005b24:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt >=10)
 8005b26:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <SysTick_Handler+0x30>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b09      	cmp	r3, #9
 8005b2e:	d904      	bls.n	8005b3a <SysTick_Handler+0x26>
		{
			FatFsCnt = 0;
 8005b30:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <SysTick_Handler+0x30>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	701a      	strb	r2, [r3, #0]
			SDTimerHandler();
 8005b36:	f7ff ffa9 	bl	8005a8c <SDTimerHandler>
		}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b3a:	f000 f8ef 	bl	8005d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b3e:	bf00      	nop
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000654 	.word	0x20000654

08005b48 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_MENU_Pin);
 8005b4c:	2010      	movs	r0, #16
 8005b4e:	f000 fe87 	bl	8006860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005b52:	bf00      	nop
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005b5c:	4802      	ldr	r0, [pc, #8]	; (8005b68 <DMA1_Channel6_IRQHandler+0x10>)
 8005b5e:	f000 fb95 	bl	800628c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005b62:	bf00      	nop
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200005f8 	.word	0x200005f8

08005b6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_AVANCA_Pin);
 8005b70:	2020      	movs	r0, #32
 8005b72:	f000 fe75 	bl	8006860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_SELECT_Pin);
 8005b76:	2040      	movs	r0, #64	; 0x40
 8005b78:	f000 fe72 	bl	8006860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_STOP_Pin);
 8005b7c:	2080      	movs	r0, #128	; 0x80
 8005b7e:	f000 fe6f 	bl	8006860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_INSERT_Pin);
 8005b82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005b86:	f000 fe6b 	bl	8006860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005b8a:	bf00      	nop
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005b94:	4802      	ldr	r0, [pc, #8]	; (8005ba0 <TIM2_IRQHandler+0x10>)
 8005b96:	f002 f972 	bl	8007e7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005b9a:	bf00      	nop
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000524 	.word	0x20000524

08005ba4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005ba8:	4802      	ldr	r0, [pc, #8]	; (8005bb4 <TIM3_IRQHandler+0x10>)
 8005baa:	f002 f968 	bl	8007e7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005bae:	bf00      	nop
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	2000056c 	.word	0x2000056c

08005bb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005bbc:	4802      	ldr	r0, [pc, #8]	; (8005bc8 <USART2_IRQHandler+0x10>)
 8005bbe:	f002 fd6d 	bl	800869c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005bc2:	bf00      	nop
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	200005b4 	.word	0x200005b4

08005bcc <_sbrk>:
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <_sbrk+0x5c>)
 8005bd6:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <_sbrk+0x60>)
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	613b      	str	r3, [r7, #16]
 8005be0:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <_sbrk+0x64>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <_sbrk+0x22>
 8005be8:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <_sbrk+0x64>)
 8005bea:	4a12      	ldr	r2, [pc, #72]	; (8005c34 <_sbrk+0x68>)
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <_sbrk+0x64>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d207      	bcs.n	8005c0c <_sbrk+0x40>
 8005bfc:	f003 faea 	bl	80091d4 <__errno>
 8005c00:	4603      	mov	r3, r0
 8005c02:	220c      	movs	r2, #12
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0a:	e009      	b.n	8005c20 <_sbrk+0x54>
 8005c0c:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <_sbrk+0x64>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <_sbrk+0x64>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4413      	add	r3, r2
 8005c1a:	4a05      	ldr	r2, [pc, #20]	; (8005c30 <_sbrk+0x64>)
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20005000 	.word	0x20005000
 8005c2c:	00000400 	.word	0x00000400
 8005c30:	2000065c 	.word	0x2000065c
 8005c34:	200006b0 	.word	0x200006b0

08005c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c3c:	bf00      	nop
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr

08005c44 <Reset_Handler>:
 8005c44:	480c      	ldr	r0, [pc, #48]	; (8005c78 <LoopFillZerobss+0x12>)
 8005c46:	490d      	ldr	r1, [pc, #52]	; (8005c7c <LoopFillZerobss+0x16>)
 8005c48:	4a0d      	ldr	r2, [pc, #52]	; (8005c80 <LoopFillZerobss+0x1a>)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e002      	b.n	8005c54 <LoopCopyDataInit>

08005c4e <CopyDataInit>:
 8005c4e:	58d4      	ldr	r4, [r2, r3]
 8005c50:	50c4      	str	r4, [r0, r3]
 8005c52:	3304      	adds	r3, #4

08005c54 <LoopCopyDataInit>:
 8005c54:	18c4      	adds	r4, r0, r3
 8005c56:	428c      	cmp	r4, r1
 8005c58:	d3f9      	bcc.n	8005c4e <CopyDataInit>
 8005c5a:	4a0a      	ldr	r2, [pc, #40]	; (8005c84 <LoopFillZerobss+0x1e>)
 8005c5c:	4c0a      	ldr	r4, [pc, #40]	; (8005c88 <LoopFillZerobss+0x22>)
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e001      	b.n	8005c66 <LoopFillZerobss>

08005c62 <FillZerobss>:
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	3204      	adds	r2, #4

08005c66 <LoopFillZerobss>:
 8005c66:	42a2      	cmp	r2, r4
 8005c68:	d3fb      	bcc.n	8005c62 <FillZerobss>
 8005c6a:	f7ff ffe5 	bl	8005c38 <SystemInit>
 8005c6e:	f003 fab7 	bl	80091e0 <__libc_init_array>
 8005c72:	f7ff f90d 	bl	8004e90 <main>
 8005c76:	4770      	bx	lr
 8005c78:	20000000 	.word	0x20000000
 8005c7c:	200001a8 	.word	0x200001a8
 8005c80:	0800beec 	.word	0x0800beec
 8005c84:	200001a8 	.word	0x200001a8
 8005c88:	200006ac 	.word	0x200006ac

08005c8c <ADC1_2_IRQHandler>:
 8005c8c:	e7fe      	b.n	8005c8c <ADC1_2_IRQHandler>
	...

08005c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c94:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <HAL_Init+0x28>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a07      	ldr	r2, [pc, #28]	; (8005cb8 <HAL_Init+0x28>)
 8005c9a:	f043 0310 	orr.w	r3, r3, #16
 8005c9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ca0:	2003      	movs	r0, #3
 8005ca2:	f000 f947 	bl	8005f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ca6:	200f      	movs	r0, #15
 8005ca8:	f000 f808 	bl	8005cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005cac:	f7ff fd8c 	bl	80057c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40022000 	.word	0x40022000

08005cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005cc4:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <HAL_InitTick+0x54>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <HAL_InitTick+0x58>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f95f 	bl	8005f9e <HAL_SYSTICK_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e00e      	b.n	8005d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b0f      	cmp	r3, #15
 8005cee:	d80a      	bhi.n	8005d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	f000 f927 	bl	8005f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005cfc:	4a06      	ldr	r2, [pc, #24]	; (8005d18 <HAL_InitTick+0x5c>)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e000      	b.n	8005d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	200000c0 	.word	0x200000c0
 8005d14:	200000c8 	.word	0x200000c8
 8005d18:	200000c4 	.word	0x200000c4

08005d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <HAL_IncTick+0x1c>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <HAL_IncTick+0x20>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	4a03      	ldr	r2, [pc, #12]	; (8005d3c <HAL_IncTick+0x20>)
 8005d2e:	6013      	str	r3, [r2, #0]
}
 8005d30:	bf00      	nop
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr
 8005d38:	200000c8 	.word	0x200000c8
 8005d3c:	20000660 	.word	0x20000660

08005d40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
  return uwTick;
 8005d44:	4b02      	ldr	r3, [pc, #8]	; (8005d50 <HAL_GetTick+0x10>)
 8005d46:	681b      	ldr	r3, [r3, #0]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr
 8005d50:	20000660 	.word	0x20000660

08005d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d5c:	f7ff fff0 	bl	8005d40 <HAL_GetTick>
 8005d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d005      	beq.n	8005d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <HAL_Delay+0x44>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d7a:	bf00      	nop
 8005d7c:	f7ff ffe0 	bl	8005d40 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d8f7      	bhi.n	8005d7c <HAL_Delay+0x28>
  {
  }
}
 8005d8c:	bf00      	nop
 8005d8e:	bf00      	nop
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	200000c8 	.word	0x200000c8

08005d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005dac:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005db8:	4013      	ands	r3, r2
 8005dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dce:	4a04      	ldr	r2, [pc, #16]	; (8005de0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	60d3      	str	r3, [r2, #12]
}
 8005dd4:	bf00      	nop
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	e000ed00 	.word	0xe000ed00

08005de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <__NVIC_GetPriorityGrouping+0x18>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	0a1b      	lsrs	r3, r3, #8
 8005dee:	f003 0307 	and.w	r3, r3, #7
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	e000ed00 	.word	0xe000ed00

08005e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	db0b      	blt.n	8005e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	f003 021f 	and.w	r2, r3, #31
 8005e18:	4906      	ldr	r1, [pc, #24]	; (8005e34 <__NVIC_EnableIRQ+0x34>)
 8005e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	2001      	movs	r0, #1
 8005e22:	fa00 f202 	lsl.w	r2, r0, r2
 8005e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr
 8005e34:	e000e100 	.word	0xe000e100

08005e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	6039      	str	r1, [r7, #0]
 8005e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	db0a      	blt.n	8005e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	490c      	ldr	r1, [pc, #48]	; (8005e84 <__NVIC_SetPriority+0x4c>)
 8005e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e56:	0112      	lsls	r2, r2, #4
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e60:	e00a      	b.n	8005e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	4908      	ldr	r1, [pc, #32]	; (8005e88 <__NVIC_SetPriority+0x50>)
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	3b04      	subs	r3, #4
 8005e70:	0112      	lsls	r2, r2, #4
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	440b      	add	r3, r1
 8005e76:	761a      	strb	r2, [r3, #24]
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	e000e100 	.word	0xe000e100
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b089      	sub	sp, #36	; 0x24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f1c3 0307 	rsb	r3, r3, #7
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	bf28      	it	cs
 8005eaa:	2304      	movcs	r3, #4
 8005eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	2b06      	cmp	r3, #6
 8005eb4:	d902      	bls.n	8005ebc <NVIC_EncodePriority+0x30>
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	3b03      	subs	r3, #3
 8005eba:	e000      	b.n	8005ebe <NVIC_EncodePriority+0x32>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	43da      	mvns	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	401a      	ands	r2, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	43d9      	mvns	r1, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ee4:	4313      	orrs	r3, r2
         );
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3724      	adds	r7, #36	; 0x24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr

08005ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f00:	d301      	bcc.n	8005f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f02:	2301      	movs	r3, #1
 8005f04:	e00f      	b.n	8005f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f06:	4a0a      	ldr	r2, [pc, #40]	; (8005f30 <SysTick_Config+0x40>)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f0e:	210f      	movs	r1, #15
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295
 8005f14:	f7ff ff90 	bl	8005e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <SysTick_Config+0x40>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f1e:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <SysTick_Config+0x40>)
 8005f20:	2207      	movs	r2, #7
 8005f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	e000e010 	.word	0xe000e010

08005f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff ff2d 	bl	8005d9c <__NVIC_SetPriorityGrouping>
}
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b086      	sub	sp, #24
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	4603      	mov	r3, r0
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
 8005f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f5c:	f7ff ff42 	bl	8005de4 <__NVIC_GetPriorityGrouping>
 8005f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	6978      	ldr	r0, [r7, #20]
 8005f68:	f7ff ff90 	bl	8005e8c <NVIC_EncodePriority>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f72:	4611      	mov	r1, r2
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff ff5f 	bl	8005e38 <__NVIC_SetPriority>
}
 8005f7a:	bf00      	nop
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	4603      	mov	r3, r0
 8005f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff ff35 	bl	8005e00 <__NVIC_EnableIRQ>
}
 8005f96:	bf00      	nop
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b082      	sub	sp, #8
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff ffa2 	bl	8005ef0 <SysTick_Config>
 8005fac:	4603      	mov	r3, r0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e043      	b.n	8006056 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4b22      	ldr	r3, [pc, #136]	; (8006060 <HAL_DMA_Init+0xa8>)
 8005fd6:	4413      	add	r3, r2
 8005fd8:	4a22      	ldr	r2, [pc, #136]	; (8006064 <HAL_DMA_Init+0xac>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	091b      	lsrs	r3, r3, #4
 8005fe0:	009a      	lsls	r2, r3, #2
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1f      	ldr	r2, [pc, #124]	; (8006068 <HAL_DMA_Init+0xb0>)
 8005fea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006002:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006006:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800601c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr
 8006060:	bffdfff8 	.word	0xbffdfff8
 8006064:	cccccccd 	.word	0xcccccccd
 8006068:	40020000 	.word	0x40020000

0800606c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_DMA_Start_IT+0x20>
 8006088:	2302      	movs	r3, #2
 800608a:	e04a      	b.n	8006122 <HAL_DMA_Start_IT+0xb6>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800609a:	2b01      	cmp	r3, #1
 800609c:	d13a      	bne.n	8006114 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2202      	movs	r2, #2
 80060a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0201 	bic.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 f9e8 	bl	8006498 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 020e 	orr.w	r2, r2, #14
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	e00f      	b.n	8006102 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0204 	bic.w	r2, r2, #4
 80060f0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 020a 	orr.w	r2, r2, #10
 8006100:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0201 	orr.w	r2, r2, #1
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e005      	b.n	8006120 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800611c:	2302      	movs	r3, #2
 800611e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006120:	7dfb      	ldrb	r3, [r7, #23]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800612a:	b480      	push	{r7}
 800612c:	b085      	sub	sp, #20
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800613c:	2b02      	cmp	r3, #2
 800613e:	d008      	beq.n	8006152 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2204      	movs	r2, #4
 8006144:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e020      	b.n	8006194 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 020e 	bic.w	r2, r2, #14
 8006160:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	2101      	movs	r1, #1
 800617c:	fa01 f202 	lsl.w	r2, r1, r2
 8006180:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006192:	7bfb      	ldrb	r3, [r7, #15]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr
	...

080061a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d005      	beq.n	80061c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2204      	movs	r2, #4
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	73fb      	strb	r3, [r7, #15]
 80061c0:	e051      	b.n	8006266 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 020e 	bic.w	r2, r2, #14
 80061d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0201 	bic.w	r2, r2, #1
 80061e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a22      	ldr	r2, [pc, #136]	; (8006270 <HAL_DMA_Abort_IT+0xd0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d029      	beq.n	8006240 <HAL_DMA_Abort_IT+0xa0>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a20      	ldr	r2, [pc, #128]	; (8006274 <HAL_DMA_Abort_IT+0xd4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d022      	beq.n	800623c <HAL_DMA_Abort_IT+0x9c>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <HAL_DMA_Abort_IT+0xd8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d01a      	beq.n	8006236 <HAL_DMA_Abort_IT+0x96>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <HAL_DMA_Abort_IT+0xdc>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d012      	beq.n	8006230 <HAL_DMA_Abort_IT+0x90>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1c      	ldr	r2, [pc, #112]	; (8006280 <HAL_DMA_Abort_IT+0xe0>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00a      	beq.n	800622a <HAL_DMA_Abort_IT+0x8a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1a      	ldr	r2, [pc, #104]	; (8006284 <HAL_DMA_Abort_IT+0xe4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d102      	bne.n	8006224 <HAL_DMA_Abort_IT+0x84>
 800621e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006222:	e00e      	b.n	8006242 <HAL_DMA_Abort_IT+0xa2>
 8006224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006228:	e00b      	b.n	8006242 <HAL_DMA_Abort_IT+0xa2>
 800622a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800622e:	e008      	b.n	8006242 <HAL_DMA_Abort_IT+0xa2>
 8006230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006234:	e005      	b.n	8006242 <HAL_DMA_Abort_IT+0xa2>
 8006236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800623a:	e002      	b.n	8006242 <HAL_DMA_Abort_IT+0xa2>
 800623c:	2310      	movs	r3, #16
 800623e:	e000      	b.n	8006242 <HAL_DMA_Abort_IT+0xa2>
 8006240:	2301      	movs	r3, #1
 8006242:	4a11      	ldr	r2, [pc, #68]	; (8006288 <HAL_DMA_Abort_IT+0xe8>)
 8006244:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
    } 
  }
  return status;
 8006266:	7bfb      	ldrb	r3, [r7, #15]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40020008 	.word	0x40020008
 8006274:	4002001c 	.word	0x4002001c
 8006278:	40020030 	.word	0x40020030
 800627c:	40020044 	.word	0x40020044
 8006280:	40020058 	.word	0x40020058
 8006284:	4002006c 	.word	0x4002006c
 8006288:	40020000 	.word	0x40020000

0800628c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a8:	2204      	movs	r2, #4
 80062aa:	409a      	lsls	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d04f      	beq.n	8006354 <HAL_DMA_IRQHandler+0xc8>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d04a      	beq.n	8006354 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d107      	bne.n	80062dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0204 	bic.w	r2, r2, #4
 80062da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a66      	ldr	r2, [pc, #408]	; (800647c <HAL_DMA_IRQHandler+0x1f0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d029      	beq.n	800633a <HAL_DMA_IRQHandler+0xae>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a65      	ldr	r2, [pc, #404]	; (8006480 <HAL_DMA_IRQHandler+0x1f4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d022      	beq.n	8006336 <HAL_DMA_IRQHandler+0xaa>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a63      	ldr	r2, [pc, #396]	; (8006484 <HAL_DMA_IRQHandler+0x1f8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01a      	beq.n	8006330 <HAL_DMA_IRQHandler+0xa4>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a62      	ldr	r2, [pc, #392]	; (8006488 <HAL_DMA_IRQHandler+0x1fc>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d012      	beq.n	800632a <HAL_DMA_IRQHandler+0x9e>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a60      	ldr	r2, [pc, #384]	; (800648c <HAL_DMA_IRQHandler+0x200>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00a      	beq.n	8006324 <HAL_DMA_IRQHandler+0x98>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a5f      	ldr	r2, [pc, #380]	; (8006490 <HAL_DMA_IRQHandler+0x204>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d102      	bne.n	800631e <HAL_DMA_IRQHandler+0x92>
 8006318:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800631c:	e00e      	b.n	800633c <HAL_DMA_IRQHandler+0xb0>
 800631e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006322:	e00b      	b.n	800633c <HAL_DMA_IRQHandler+0xb0>
 8006324:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006328:	e008      	b.n	800633c <HAL_DMA_IRQHandler+0xb0>
 800632a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800632e:	e005      	b.n	800633c <HAL_DMA_IRQHandler+0xb0>
 8006330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006334:	e002      	b.n	800633c <HAL_DMA_IRQHandler+0xb0>
 8006336:	2340      	movs	r3, #64	; 0x40
 8006338:	e000      	b.n	800633c <HAL_DMA_IRQHandler+0xb0>
 800633a:	2304      	movs	r3, #4
 800633c:	4a55      	ldr	r2, [pc, #340]	; (8006494 <HAL_DMA_IRQHandler+0x208>)
 800633e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8094 	beq.w	8006472 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006352:	e08e      	b.n	8006472 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	2202      	movs	r2, #2
 800635a:	409a      	lsls	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4013      	ands	r3, r2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d056      	beq.n	8006412 <HAL_DMA_IRQHandler+0x186>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d051      	beq.n	8006412 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10b      	bne.n	8006394 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 020a 	bic.w	r2, r2, #10
 800638a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a38      	ldr	r2, [pc, #224]	; (800647c <HAL_DMA_IRQHandler+0x1f0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d029      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x166>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a37      	ldr	r2, [pc, #220]	; (8006480 <HAL_DMA_IRQHandler+0x1f4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d022      	beq.n	80063ee <HAL_DMA_IRQHandler+0x162>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a35      	ldr	r2, [pc, #212]	; (8006484 <HAL_DMA_IRQHandler+0x1f8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d01a      	beq.n	80063e8 <HAL_DMA_IRQHandler+0x15c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a34      	ldr	r2, [pc, #208]	; (8006488 <HAL_DMA_IRQHandler+0x1fc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d012      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x156>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a32      	ldr	r2, [pc, #200]	; (800648c <HAL_DMA_IRQHandler+0x200>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d00a      	beq.n	80063dc <HAL_DMA_IRQHandler+0x150>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a31      	ldr	r2, [pc, #196]	; (8006490 <HAL_DMA_IRQHandler+0x204>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d102      	bne.n	80063d6 <HAL_DMA_IRQHandler+0x14a>
 80063d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063d4:	e00e      	b.n	80063f4 <HAL_DMA_IRQHandler+0x168>
 80063d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063da:	e00b      	b.n	80063f4 <HAL_DMA_IRQHandler+0x168>
 80063dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063e0:	e008      	b.n	80063f4 <HAL_DMA_IRQHandler+0x168>
 80063e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063e6:	e005      	b.n	80063f4 <HAL_DMA_IRQHandler+0x168>
 80063e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ec:	e002      	b.n	80063f4 <HAL_DMA_IRQHandler+0x168>
 80063ee:	2320      	movs	r3, #32
 80063f0:	e000      	b.n	80063f4 <HAL_DMA_IRQHandler+0x168>
 80063f2:	2302      	movs	r3, #2
 80063f4:	4a27      	ldr	r2, [pc, #156]	; (8006494 <HAL_DMA_IRQHandler+0x208>)
 80063f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006404:	2b00      	cmp	r3, #0
 8006406:	d034      	beq.n	8006472 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006410:	e02f      	b.n	8006472 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	2208      	movs	r2, #8
 8006418:	409a      	lsls	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4013      	ands	r3, r2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d028      	beq.n	8006474 <HAL_DMA_IRQHandler+0x1e8>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b00      	cmp	r3, #0
 800642a:	d023      	beq.n	8006474 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 020e 	bic.w	r2, r2, #14
 800643a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006444:	2101      	movs	r1, #1
 8006446:	fa01 f202 	lsl.w	r2, r1, r2
 800644a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	4798      	blx	r3
    }
  }
  return;
 8006472:	bf00      	nop
 8006474:	bf00      	nop
}
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	40020008 	.word	0x40020008
 8006480:	4002001c 	.word	0x4002001c
 8006484:	40020030 	.word	0x40020030
 8006488:	40020044 	.word	0x40020044
 800648c:	40020058 	.word	0x40020058
 8006490:	4002006c 	.word	0x4002006c
 8006494:	40020000 	.word	0x40020000

08006498 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ae:	2101      	movs	r1, #1
 80064b0:	fa01 f202 	lsl.w	r2, r1, r2
 80064b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	d108      	bne.n	80064d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064d6:	e007      	b.n	80064e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	60da      	str	r2, [r3, #12]
}
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr
	...

080064f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b08b      	sub	sp, #44	; 0x2c
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064fe:	2300      	movs	r3, #0
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006502:	2300      	movs	r3, #0
 8006504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006506:	e169      	b.n	80067dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006508:	2201      	movs	r2, #1
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	4013      	ands	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	429a      	cmp	r2, r3
 8006522:	f040 8158 	bne.w	80067d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4a9a      	ldr	r2, [pc, #616]	; (8006794 <HAL_GPIO_Init+0x2a0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d05e      	beq.n	80065ee <HAL_GPIO_Init+0xfa>
 8006530:	4a98      	ldr	r2, [pc, #608]	; (8006794 <HAL_GPIO_Init+0x2a0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d875      	bhi.n	8006622 <HAL_GPIO_Init+0x12e>
 8006536:	4a98      	ldr	r2, [pc, #608]	; (8006798 <HAL_GPIO_Init+0x2a4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d058      	beq.n	80065ee <HAL_GPIO_Init+0xfa>
 800653c:	4a96      	ldr	r2, [pc, #600]	; (8006798 <HAL_GPIO_Init+0x2a4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d86f      	bhi.n	8006622 <HAL_GPIO_Init+0x12e>
 8006542:	4a96      	ldr	r2, [pc, #600]	; (800679c <HAL_GPIO_Init+0x2a8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d052      	beq.n	80065ee <HAL_GPIO_Init+0xfa>
 8006548:	4a94      	ldr	r2, [pc, #592]	; (800679c <HAL_GPIO_Init+0x2a8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d869      	bhi.n	8006622 <HAL_GPIO_Init+0x12e>
 800654e:	4a94      	ldr	r2, [pc, #592]	; (80067a0 <HAL_GPIO_Init+0x2ac>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d04c      	beq.n	80065ee <HAL_GPIO_Init+0xfa>
 8006554:	4a92      	ldr	r2, [pc, #584]	; (80067a0 <HAL_GPIO_Init+0x2ac>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d863      	bhi.n	8006622 <HAL_GPIO_Init+0x12e>
 800655a:	4a92      	ldr	r2, [pc, #584]	; (80067a4 <HAL_GPIO_Init+0x2b0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d046      	beq.n	80065ee <HAL_GPIO_Init+0xfa>
 8006560:	4a90      	ldr	r2, [pc, #576]	; (80067a4 <HAL_GPIO_Init+0x2b0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d85d      	bhi.n	8006622 <HAL_GPIO_Init+0x12e>
 8006566:	2b12      	cmp	r3, #18
 8006568:	d82a      	bhi.n	80065c0 <HAL_GPIO_Init+0xcc>
 800656a:	2b12      	cmp	r3, #18
 800656c:	d859      	bhi.n	8006622 <HAL_GPIO_Init+0x12e>
 800656e:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <HAL_GPIO_Init+0x80>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	080065ef 	.word	0x080065ef
 8006578:	080065c9 	.word	0x080065c9
 800657c:	080065db 	.word	0x080065db
 8006580:	0800661d 	.word	0x0800661d
 8006584:	08006623 	.word	0x08006623
 8006588:	08006623 	.word	0x08006623
 800658c:	08006623 	.word	0x08006623
 8006590:	08006623 	.word	0x08006623
 8006594:	08006623 	.word	0x08006623
 8006598:	08006623 	.word	0x08006623
 800659c:	08006623 	.word	0x08006623
 80065a0:	08006623 	.word	0x08006623
 80065a4:	08006623 	.word	0x08006623
 80065a8:	08006623 	.word	0x08006623
 80065ac:	08006623 	.word	0x08006623
 80065b0:	08006623 	.word	0x08006623
 80065b4:	08006623 	.word	0x08006623
 80065b8:	080065d1 	.word	0x080065d1
 80065bc:	080065e5 	.word	0x080065e5
 80065c0:	4a79      	ldr	r2, [pc, #484]	; (80067a8 <HAL_GPIO_Init+0x2b4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80065c6:	e02c      	b.n	8006622 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	623b      	str	r3, [r7, #32]
          break;
 80065ce:	e029      	b.n	8006624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	3304      	adds	r3, #4
 80065d6:	623b      	str	r3, [r7, #32]
          break;
 80065d8:	e024      	b.n	8006624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	3308      	adds	r3, #8
 80065e0:	623b      	str	r3, [r7, #32]
          break;
 80065e2:	e01f      	b.n	8006624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	330c      	adds	r3, #12
 80065ea:	623b      	str	r3, [r7, #32]
          break;
 80065ec:	e01a      	b.n	8006624 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80065f6:	2304      	movs	r3, #4
 80065f8:	623b      	str	r3, [r7, #32]
          break;
 80065fa:	e013      	b.n	8006624 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d105      	bne.n	8006610 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006604:	2308      	movs	r3, #8
 8006606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	611a      	str	r2, [r3, #16]
          break;
 800660e:	e009      	b.n	8006624 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006610:	2308      	movs	r3, #8
 8006612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	615a      	str	r2, [r3, #20]
          break;
 800661a:	e003      	b.n	8006624 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800661c:	2300      	movs	r3, #0
 800661e:	623b      	str	r3, [r7, #32]
          break;
 8006620:	e000      	b.n	8006624 <HAL_GPIO_Init+0x130>
          break;
 8006622:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2bff      	cmp	r3, #255	; 0xff
 8006628:	d801      	bhi.n	800662e <HAL_GPIO_Init+0x13a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	e001      	b.n	8006632 <HAL_GPIO_Init+0x13e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3304      	adds	r3, #4
 8006632:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2bff      	cmp	r3, #255	; 0xff
 8006638:	d802      	bhi.n	8006640 <HAL_GPIO_Init+0x14c>
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	e002      	b.n	8006646 <HAL_GPIO_Init+0x152>
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	3b08      	subs	r3, #8
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	210f      	movs	r1, #15
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	fa01 f303 	lsl.w	r3, r1, r3
 8006654:	43db      	mvns	r3, r3
 8006656:	401a      	ands	r2, r3
 8006658:	6a39      	ldr	r1, [r7, #32]
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	fa01 f303 	lsl.w	r3, r1, r3
 8006660:	431a      	orrs	r2, r3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 80b1 	beq.w	80067d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006674:	4b4d      	ldr	r3, [pc, #308]	; (80067ac <HAL_GPIO_Init+0x2b8>)
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	4a4c      	ldr	r2, [pc, #304]	; (80067ac <HAL_GPIO_Init+0x2b8>)
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	6193      	str	r3, [r2, #24]
 8006680:	4b4a      	ldr	r3, [pc, #296]	; (80067ac <HAL_GPIO_Init+0x2b8>)
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	60bb      	str	r3, [r7, #8]
 800668a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800668c:	4a48      	ldr	r2, [pc, #288]	; (80067b0 <HAL_GPIO_Init+0x2bc>)
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	089b      	lsrs	r3, r3, #2
 8006692:	3302      	adds	r3, #2
 8006694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006698:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	f003 0303 	and.w	r3, r3, #3
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	220f      	movs	r2, #15
 80066a4:	fa02 f303 	lsl.w	r3, r2, r3
 80066a8:	43db      	mvns	r3, r3
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4013      	ands	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a40      	ldr	r2, [pc, #256]	; (80067b4 <HAL_GPIO_Init+0x2c0>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <HAL_GPIO_Init+0x1ec>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a3f      	ldr	r2, [pc, #252]	; (80067b8 <HAL_GPIO_Init+0x2c4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00d      	beq.n	80066dc <HAL_GPIO_Init+0x1e8>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a3e      	ldr	r2, [pc, #248]	; (80067bc <HAL_GPIO_Init+0x2c8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d007      	beq.n	80066d8 <HAL_GPIO_Init+0x1e4>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a3d      	ldr	r2, [pc, #244]	; (80067c0 <HAL_GPIO_Init+0x2cc>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d101      	bne.n	80066d4 <HAL_GPIO_Init+0x1e0>
 80066d0:	2303      	movs	r3, #3
 80066d2:	e006      	b.n	80066e2 <HAL_GPIO_Init+0x1ee>
 80066d4:	2304      	movs	r3, #4
 80066d6:	e004      	b.n	80066e2 <HAL_GPIO_Init+0x1ee>
 80066d8:	2302      	movs	r3, #2
 80066da:	e002      	b.n	80066e2 <HAL_GPIO_Init+0x1ee>
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <HAL_GPIO_Init+0x1ee>
 80066e0:	2300      	movs	r3, #0
 80066e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e4:	f002 0203 	and.w	r2, r2, #3
 80066e8:	0092      	lsls	r2, r2, #2
 80066ea:	4093      	lsls	r3, r2
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80066f2:	492f      	ldr	r1, [pc, #188]	; (80067b0 <HAL_GPIO_Init+0x2bc>)
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	089b      	lsrs	r3, r3, #2
 80066f8:	3302      	adds	r3, #2
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d006      	beq.n	800671a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800670c:	4b2d      	ldr	r3, [pc, #180]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	492c      	ldr	r1, [pc, #176]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	4313      	orrs	r3, r2
 8006716:	600b      	str	r3, [r1, #0]
 8006718:	e006      	b.n	8006728 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800671a:	4b2a      	ldr	r3, [pc, #168]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	43db      	mvns	r3, r3
 8006722:	4928      	ldr	r1, [pc, #160]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006724:	4013      	ands	r3, r2
 8006726:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006734:	4b23      	ldr	r3, [pc, #140]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	4922      	ldr	r1, [pc, #136]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	4313      	orrs	r3, r2
 800673e:	604b      	str	r3, [r1, #4]
 8006740:	e006      	b.n	8006750 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006742:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	43db      	mvns	r3, r3
 800674a:	491e      	ldr	r1, [pc, #120]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 800674c:	4013      	ands	r3, r2
 800674e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d006      	beq.n	800676a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800675c:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	4918      	ldr	r1, [pc, #96]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	4313      	orrs	r3, r2
 8006766:	608b      	str	r3, [r1, #8]
 8006768:	e006      	b.n	8006778 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800676a:	4b16      	ldr	r3, [pc, #88]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	43db      	mvns	r3, r3
 8006772:	4914      	ldr	r1, [pc, #80]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006774:	4013      	ands	r3, r2
 8006776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d021      	beq.n	80067c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006784:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	490e      	ldr	r1, [pc, #56]	; (80067c4 <HAL_GPIO_Init+0x2d0>)
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	4313      	orrs	r3, r2
 800678e:	60cb      	str	r3, [r1, #12]
 8006790:	e021      	b.n	80067d6 <HAL_GPIO_Init+0x2e2>
 8006792:	bf00      	nop
 8006794:	10320000 	.word	0x10320000
 8006798:	10310000 	.word	0x10310000
 800679c:	10220000 	.word	0x10220000
 80067a0:	10210000 	.word	0x10210000
 80067a4:	10120000 	.word	0x10120000
 80067a8:	10110000 	.word	0x10110000
 80067ac:	40021000 	.word	0x40021000
 80067b0:	40010000 	.word	0x40010000
 80067b4:	40010800 	.word	0x40010800
 80067b8:	40010c00 	.word	0x40010c00
 80067bc:	40011000 	.word	0x40011000
 80067c0:	40011400 	.word	0x40011400
 80067c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80067c8:	4b0b      	ldr	r3, [pc, #44]	; (80067f8 <HAL_GPIO_Init+0x304>)
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	43db      	mvns	r3, r3
 80067d0:	4909      	ldr	r1, [pc, #36]	; (80067f8 <HAL_GPIO_Init+0x304>)
 80067d2:	4013      	ands	r3, r2
 80067d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	3301      	adds	r3, #1
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	fa22 f303 	lsr.w	r3, r2, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f47f ae8e 	bne.w	8006508 <HAL_GPIO_Init+0x14>
  }
}
 80067ec:	bf00      	nop
 80067ee:	bf00      	nop
 80067f0:	372c      	adds	r7, #44	; 0x2c
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr
 80067f8:	40010400 	.word	0x40010400

080067fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	807b      	strh	r3, [r7, #2]
 8006808:	4613      	mov	r3, r2
 800680a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800680c:	787b      	ldrb	r3, [r7, #1]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006812:	887a      	ldrh	r2, [r7, #2]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006818:	e003      	b.n	8006822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800681a:	887b      	ldrh	r3, [r7, #2]
 800681c:	041a      	lsls	r2, r3, #16
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	611a      	str	r2, [r3, #16]
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800683e:	887a      	ldrh	r2, [r7, #2]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4013      	ands	r3, r2
 8006844:	041a      	lsls	r2, r3, #16
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	43d9      	mvns	r1, r3
 800684a:	887b      	ldrh	r3, [r7, #2]
 800684c:	400b      	ands	r3, r1
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	611a      	str	r2, [r3, #16]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr
	...

08006860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800686a:	4b08      	ldr	r3, [pc, #32]	; (800688c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	4013      	ands	r3, r2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d006      	beq.n	8006884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006876:	4a05      	ldr	r2, [pc, #20]	; (800688c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006878:	88fb      	ldrh	r3, [r7, #6]
 800687a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	4618      	mov	r0, r3
 8006880:	f7fe ff42 	bl	8005708 <HAL_GPIO_EXTI_Callback>
  }
}
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40010400 	.word	0x40010400

08006890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e272      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8087 	beq.w	80069be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068b0:	4b92      	ldr	r3, [pc, #584]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f003 030c 	and.w	r3, r3, #12
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d00c      	beq.n	80068d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80068bc:	4b8f      	ldr	r3, [pc, #572]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f003 030c 	and.w	r3, r3, #12
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d112      	bne.n	80068ee <HAL_RCC_OscConfig+0x5e>
 80068c8:	4b8c      	ldr	r3, [pc, #560]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d4:	d10b      	bne.n	80068ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d6:	4b89      	ldr	r3, [pc, #548]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d06c      	beq.n	80069bc <HAL_RCC_OscConfig+0x12c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d168      	bne.n	80069bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e24c      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f6:	d106      	bne.n	8006906 <HAL_RCC_OscConfig+0x76>
 80068f8:	4b80      	ldr	r3, [pc, #512]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a7f      	ldr	r2, [pc, #508]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80068fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	e02e      	b.n	8006964 <HAL_RCC_OscConfig+0xd4>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10c      	bne.n	8006928 <HAL_RCC_OscConfig+0x98>
 800690e:	4b7b      	ldr	r3, [pc, #492]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a7a      	ldr	r2, [pc, #488]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	4b78      	ldr	r3, [pc, #480]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a77      	ldr	r2, [pc, #476]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e01d      	b.n	8006964 <HAL_RCC_OscConfig+0xd4>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006930:	d10c      	bne.n	800694c <HAL_RCC_OscConfig+0xbc>
 8006932:	4b72      	ldr	r3, [pc, #456]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a71      	ldr	r2, [pc, #452]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	4b6f      	ldr	r3, [pc, #444]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a6e      	ldr	r2, [pc, #440]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	e00b      	b.n	8006964 <HAL_RCC_OscConfig+0xd4>
 800694c:	4b6b      	ldr	r3, [pc, #428]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a6a      	ldr	r2, [pc, #424]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	4b68      	ldr	r3, [pc, #416]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a67      	ldr	r2, [pc, #412]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 800695e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006962:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d013      	beq.n	8006994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800696c:	f7ff f9e8 	bl	8005d40 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006974:	f7ff f9e4 	bl	8005d40 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b64      	cmp	r3, #100	; 0x64
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e200      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006986:	4b5d      	ldr	r3, [pc, #372]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0f0      	beq.n	8006974 <HAL_RCC_OscConfig+0xe4>
 8006992:	e014      	b.n	80069be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006994:	f7ff f9d4 	bl	8005d40 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800699c:	f7ff f9d0 	bl	8005d40 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b64      	cmp	r3, #100	; 0x64
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e1ec      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ae:	4b53      	ldr	r3, [pc, #332]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1f0      	bne.n	800699c <HAL_RCC_OscConfig+0x10c>
 80069ba:	e000      	b.n	80069be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d063      	beq.n	8006a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069ca:	4b4c      	ldr	r3, [pc, #304]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f003 030c 	and.w	r3, r3, #12
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80069d6:	4b49      	ldr	r3, [pc, #292]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f003 030c 	and.w	r3, r3, #12
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d11c      	bne.n	8006a1c <HAL_RCC_OscConfig+0x18c>
 80069e2:	4b46      	ldr	r3, [pc, #280]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d116      	bne.n	8006a1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ee:	4b43      	ldr	r3, [pc, #268]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_RCC_OscConfig+0x176>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d001      	beq.n	8006a06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e1c0      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a06:	4b3d      	ldr	r3, [pc, #244]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4939      	ldr	r1, [pc, #228]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a1a:	e03a      	b.n	8006a92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d020      	beq.n	8006a66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a24:	4b36      	ldr	r3, [pc, #216]	; (8006b00 <HAL_RCC_OscConfig+0x270>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a2a:	f7ff f989 	bl	8005d40 <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a32:	f7ff f985 	bl	8005d40 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e1a1      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a44:	4b2d      	ldr	r3, [pc, #180]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0f0      	beq.n	8006a32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a50:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	4927      	ldr	r1, [pc, #156]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	600b      	str	r3, [r1, #0]
 8006a64:	e015      	b.n	8006a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a66:	4b26      	ldr	r3, [pc, #152]	; (8006b00 <HAL_RCC_OscConfig+0x270>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6c:	f7ff f968 	bl	8005d40 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a72:	e008      	b.n	8006a86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a74:	f7ff f964 	bl	8005d40 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e180      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a86:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1f0      	bne.n	8006a74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d03a      	beq.n	8006b14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d019      	beq.n	8006ada <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aa6:	4b17      	ldr	r3, [pc, #92]	; (8006b04 <HAL_RCC_OscConfig+0x274>)
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aac:	f7ff f948 	bl	8005d40 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ab4:	f7ff f944 	bl	8005d40 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e160      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0f0      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006ad2:	2001      	movs	r0, #1
 8006ad4:	f000 fad8 	bl	8007088 <RCC_Delay>
 8006ad8:	e01c      	b.n	8006b14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ada:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <HAL_RCC_OscConfig+0x274>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ae0:	f7ff f92e 	bl	8005d40 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ae6:	e00f      	b.n	8006b08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ae8:	f7ff f92a 	bl	8005d40 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d908      	bls.n	8006b08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e146      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000
 8006b00:	42420000 	.word	0x42420000
 8006b04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b08:	4b92      	ldr	r3, [pc, #584]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e9      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80a6 	beq.w	8006c6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b22:	2300      	movs	r3, #0
 8006b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b26:	4b8b      	ldr	r3, [pc, #556]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10d      	bne.n	8006b4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b32:	4b88      	ldr	r3, [pc, #544]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	4a87      	ldr	r2, [pc, #540]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	61d3      	str	r3, [r2, #28]
 8006b3e:	4b85      	ldr	r3, [pc, #532]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b4e:	4b82      	ldr	r3, [pc, #520]	; (8006d58 <HAL_RCC_OscConfig+0x4c8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d118      	bne.n	8006b8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b5a:	4b7f      	ldr	r3, [pc, #508]	; (8006d58 <HAL_RCC_OscConfig+0x4c8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a7e      	ldr	r2, [pc, #504]	; (8006d58 <HAL_RCC_OscConfig+0x4c8>)
 8006b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b66:	f7ff f8eb 	bl	8005d40 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b6e:	f7ff f8e7 	bl	8005d40 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b64      	cmp	r3, #100	; 0x64
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e103      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b80:	4b75      	ldr	r3, [pc, #468]	; (8006d58 <HAL_RCC_OscConfig+0x4c8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f0      	beq.n	8006b6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d106      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x312>
 8006b94:	4b6f      	ldr	r3, [pc, #444]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	4a6e      	ldr	r2, [pc, #440]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	6213      	str	r3, [r2, #32]
 8006ba0:	e02d      	b.n	8006bfe <HAL_RCC_OscConfig+0x36e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10c      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x334>
 8006baa:	4b6a      	ldr	r3, [pc, #424]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	4a69      	ldr	r2, [pc, #420]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	6213      	str	r3, [r2, #32]
 8006bb6:	4b67      	ldr	r3, [pc, #412]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	4a66      	ldr	r2, [pc, #408]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006bbc:	f023 0304 	bic.w	r3, r3, #4
 8006bc0:	6213      	str	r3, [r2, #32]
 8006bc2:	e01c      	b.n	8006bfe <HAL_RCC_OscConfig+0x36e>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	2b05      	cmp	r3, #5
 8006bca:	d10c      	bne.n	8006be6 <HAL_RCC_OscConfig+0x356>
 8006bcc:	4b61      	ldr	r3, [pc, #388]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	4a60      	ldr	r2, [pc, #384]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006bd2:	f043 0304 	orr.w	r3, r3, #4
 8006bd6:	6213      	str	r3, [r2, #32]
 8006bd8:	4b5e      	ldr	r3, [pc, #376]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	4a5d      	ldr	r2, [pc, #372]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	6213      	str	r3, [r2, #32]
 8006be4:	e00b      	b.n	8006bfe <HAL_RCC_OscConfig+0x36e>
 8006be6:	4b5b      	ldr	r3, [pc, #364]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	4a5a      	ldr	r2, [pc, #360]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006bec:	f023 0301 	bic.w	r3, r3, #1
 8006bf0:	6213      	str	r3, [r2, #32]
 8006bf2:	4b58      	ldr	r3, [pc, #352]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	4a57      	ldr	r2, [pc, #348]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006bf8:	f023 0304 	bic.w	r3, r3, #4
 8006bfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d015      	beq.n	8006c32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c06:	f7ff f89b 	bl	8005d40 <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c0c:	e00a      	b.n	8006c24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0e:	f7ff f897 	bl	8005d40 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e0b1      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c24:	4b4b      	ldr	r3, [pc, #300]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0ee      	beq.n	8006c0e <HAL_RCC_OscConfig+0x37e>
 8006c30:	e014      	b.n	8006c5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c32:	f7ff f885 	bl	8005d40 <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c38:	e00a      	b.n	8006c50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c3a:	f7ff f881 	bl	8005d40 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e09b      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c50:	4b40      	ldr	r3, [pc, #256]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1ee      	bne.n	8006c3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d105      	bne.n	8006c6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c62:	4b3c      	ldr	r3, [pc, #240]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	4a3b      	ldr	r2, [pc, #236]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 8087 	beq.w	8006d86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c78:	4b36      	ldr	r3, [pc, #216]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 030c 	and.w	r3, r3, #12
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d061      	beq.n	8006d48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d146      	bne.n	8006d1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8c:	4b33      	ldr	r3, [pc, #204]	; (8006d5c <HAL_RCC_OscConfig+0x4cc>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c92:	f7ff f855 	bl	8005d40 <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c98:	e008      	b.n	8006cac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c9a:	f7ff f851 	bl	8005d40 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e06d      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cac:	4b29      	ldr	r3, [pc, #164]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1f0      	bne.n	8006c9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc0:	d108      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006cc2:	4b24      	ldr	r3, [pc, #144]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	4921      	ldr	r1, [pc, #132]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cd4:	4b1f      	ldr	r3, [pc, #124]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a19      	ldr	r1, [r3, #32]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	491b      	ldr	r1, [pc, #108]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cec:	4b1b      	ldr	r3, [pc, #108]	; (8006d5c <HAL_RCC_OscConfig+0x4cc>)
 8006cee:	2201      	movs	r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf2:	f7ff f825 	bl	8005d40 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cfa:	f7ff f821 	bl	8005d40 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e03d      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d0c:	4b11      	ldr	r3, [pc, #68]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0f0      	beq.n	8006cfa <HAL_RCC_OscConfig+0x46a>
 8006d18:	e035      	b.n	8006d86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d1a:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <HAL_RCC_OscConfig+0x4cc>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d20:	f7ff f80e 	bl	8005d40 <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d28:	f7ff f80a 	bl	8005d40 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e026      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d3a:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <HAL_RCC_OscConfig+0x4c4>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f0      	bne.n	8006d28 <HAL_RCC_OscConfig+0x498>
 8006d46:	e01e      	b.n	8006d86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d107      	bne.n	8006d60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e019      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
 8006d54:	40021000 	.word	0x40021000
 8006d58:	40007000 	.word	0x40007000
 8006d5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d60:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <HAL_RCC_OscConfig+0x500>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d106      	bne.n	8006d82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d001      	beq.n	8006d86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e000      	b.n	8006d88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40021000 	.word	0x40021000

08006d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0d0      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006da8:	4b6a      	ldr	r3, [pc, #424]	; (8006f54 <HAL_RCC_ClockConfig+0x1c0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d910      	bls.n	8006dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db6:	4b67      	ldr	r3, [pc, #412]	; (8006f54 <HAL_RCC_ClockConfig+0x1c0>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f023 0207 	bic.w	r2, r3, #7
 8006dbe:	4965      	ldr	r1, [pc, #404]	; (8006f54 <HAL_RCC_ClockConfig+0x1c0>)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc6:	4b63      	ldr	r3, [pc, #396]	; (8006f54 <HAL_RCC_ClockConfig+0x1c0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e0b8      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d020      	beq.n	8006e26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006df0:	4b59      	ldr	r3, [pc, #356]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	4a58      	ldr	r2, [pc, #352]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006df6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006dfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e08:	4b53      	ldr	r3, [pc, #332]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	4a52      	ldr	r2, [pc, #328]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006e0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006e12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e14:	4b50      	ldr	r3, [pc, #320]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	494d      	ldr	r1, [pc, #308]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d040      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d107      	bne.n	8006e4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e3a:	4b47      	ldr	r3, [pc, #284]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d115      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e07f      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d107      	bne.n	8006e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e52:	4b41      	ldr	r3, [pc, #260]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e073      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e62:	4b3d      	ldr	r3, [pc, #244]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e06b      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e72:	4b39      	ldr	r3, [pc, #228]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f023 0203 	bic.w	r2, r3, #3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4936      	ldr	r1, [pc, #216]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e84:	f7fe ff5c 	bl	8005d40 <HAL_GetTick>
 8006e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e8a:	e00a      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e8c:	f7fe ff58 	bl	8005d40 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e053      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ea2:	4b2d      	ldr	r3, [pc, #180]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f003 020c 	and.w	r2, r3, #12
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d1eb      	bne.n	8006e8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eb4:	4b27      	ldr	r3, [pc, #156]	; (8006f54 <HAL_RCC_ClockConfig+0x1c0>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0307 	and.w	r3, r3, #7
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d210      	bcs.n	8006ee4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ec2:	4b24      	ldr	r3, [pc, #144]	; (8006f54 <HAL_RCC_ClockConfig+0x1c0>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f023 0207 	bic.w	r2, r3, #7
 8006eca:	4922      	ldr	r1, [pc, #136]	; (8006f54 <HAL_RCC_ClockConfig+0x1c0>)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed2:	4b20      	ldr	r3, [pc, #128]	; (8006f54 <HAL_RCC_ClockConfig+0x1c0>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d001      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e032      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ef0:	4b19      	ldr	r3, [pc, #100]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4916      	ldr	r1, [pc, #88]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f0e:	4b12      	ldr	r3, [pc, #72]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	490e      	ldr	r1, [pc, #56]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f22:	f000 f821 	bl	8006f68 <HAL_RCC_GetSysClockFreq>
 8006f26:	4602      	mov	r2, r0
 8006f28:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <HAL_RCC_ClockConfig+0x1c4>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	091b      	lsrs	r3, r3, #4
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	490a      	ldr	r1, [pc, #40]	; (8006f5c <HAL_RCC_ClockConfig+0x1c8>)
 8006f34:	5ccb      	ldrb	r3, [r1, r3]
 8006f36:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3a:	4a09      	ldr	r2, [pc, #36]	; (8006f60 <HAL_RCC_ClockConfig+0x1cc>)
 8006f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f3e:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <HAL_RCC_ClockConfig+0x1d0>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe feba 	bl	8005cbc <HAL_InitTick>

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	40022000 	.word	0x40022000
 8006f58:	40021000 	.word	0x40021000
 8006f5c:	0800ba00 	.word	0x0800ba00
 8006f60:	200000c0 	.word	0x200000c0
 8006f64:	200000c4 	.word	0x200000c4

08006f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f68:	b490      	push	{r4, r7}
 8006f6a:	b08a      	sub	sp, #40	; 0x28
 8006f6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006f6e:	4b29      	ldr	r3, [pc, #164]	; (8007014 <HAL_RCC_GetSysClockFreq+0xac>)
 8006f70:	1d3c      	adds	r4, r7, #4
 8006f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006f78:	f240 2301 	movw	r3, #513	; 0x201
 8006f7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	2300      	movs	r3, #0
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	2300      	movs	r3, #0
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006f92:	4b21      	ldr	r3, [pc, #132]	; (8007018 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f003 030c 	and.w	r3, r3, #12
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d002      	beq.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d003      	beq.n	8006fae <HAL_RCC_GetSysClockFreq+0x46>
 8006fa6:	e02b      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006fa8:	4b1c      	ldr	r3, [pc, #112]	; (800701c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006faa:	623b      	str	r3, [r7, #32]
      break;
 8006fac:	e02b      	b.n	8007006 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	0c9b      	lsrs	r3, r3, #18
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	3328      	adds	r3, #40	; 0x28
 8006fb8:	443b      	add	r3, r7
 8006fba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006fbe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d012      	beq.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006fca:	4b13      	ldr	r3, [pc, #76]	; (8007018 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	0c5b      	lsrs	r3, r3, #17
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	3328      	adds	r3, #40	; 0x28
 8006fd6:	443b      	add	r3, r7
 8006fd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006fdc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	4a0e      	ldr	r2, [pc, #56]	; (800701c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006fe2:	fb03 f202 	mul.w	r2, r3, r2
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
 8006fee:	e004      	b.n	8006ffa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	4a0b      	ldr	r2, [pc, #44]	; (8007020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ff4:	fb02 f303 	mul.w	r3, r2, r3
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	623b      	str	r3, [r7, #32]
      break;
 8006ffe:	e002      	b.n	8007006 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007000:	4b06      	ldr	r3, [pc, #24]	; (800701c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007002:	623b      	str	r3, [r7, #32]
      break;
 8007004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007006:	6a3b      	ldr	r3, [r7, #32]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3728      	adds	r7, #40	; 0x28
 800700c:	46bd      	mov	sp, r7
 800700e:	bc90      	pop	{r4, r7}
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	0800b9e4 	.word	0x0800b9e4
 8007018:	40021000 	.word	0x40021000
 800701c:	007a1200 	.word	0x007a1200
 8007020:	003d0900 	.word	0x003d0900

08007024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007028:	4b02      	ldr	r3, [pc, #8]	; (8007034 <HAL_RCC_GetHCLKFreq+0x10>)
 800702a:	681b      	ldr	r3, [r3, #0]
}
 800702c:	4618      	mov	r0, r3
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr
 8007034:	200000c0 	.word	0x200000c0

08007038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800703c:	f7ff fff2 	bl	8007024 <HAL_RCC_GetHCLKFreq>
 8007040:	4602      	mov	r2, r0
 8007042:	4b05      	ldr	r3, [pc, #20]	; (8007058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	0a1b      	lsrs	r3, r3, #8
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	4903      	ldr	r1, [pc, #12]	; (800705c <HAL_RCC_GetPCLK1Freq+0x24>)
 800704e:	5ccb      	ldrb	r3, [r1, r3]
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007054:	4618      	mov	r0, r3
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40021000 	.word	0x40021000
 800705c:	0800ba10 	.word	0x0800ba10

08007060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007064:	f7ff ffde 	bl	8007024 <HAL_RCC_GetHCLKFreq>
 8007068:	4602      	mov	r2, r0
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	0adb      	lsrs	r3, r3, #11
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	4903      	ldr	r1, [pc, #12]	; (8007084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007076:	5ccb      	ldrb	r3, [r1, r3]
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800707c:	4618      	mov	r0, r3
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40021000 	.word	0x40021000
 8007084:	0800ba10 	.word	0x0800ba10

08007088 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007090:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <RCC_Delay+0x34>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a0a      	ldr	r2, [pc, #40]	; (80070c0 <RCC_Delay+0x38>)
 8007096:	fba2 2303 	umull	r2, r3, r2, r3
 800709a:	0a5b      	lsrs	r3, r3, #9
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	fb02 f303 	mul.w	r3, r2, r3
 80070a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80070a4:	bf00      	nop
  }
  while (Delay --);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1e5a      	subs	r2, r3, #1
 80070aa:	60fa      	str	r2, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1f9      	bne.n	80070a4 <RCC_Delay+0x1c>
}
 80070b0:	bf00      	nop
 80070b2:	bf00      	nop
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr
 80070bc:	200000c0 	.word	0x200000c0
 80070c0:	10624dd3 	.word	0x10624dd3

080070c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e076      	b.n	80071c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d108      	bne.n	80070f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070e6:	d009      	beq.n	80070fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	61da      	str	r2, [r3, #28]
 80070ee:	e005      	b.n	80070fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fe fb88 	bl	800582c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007132:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800716c:	431a      	orrs	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007176:	431a      	orrs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007180:	ea42 0103 	orr.w	r1, r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007188:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	0c1a      	lsrs	r2, r3, #16
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f002 0204 	and.w	r2, r2, #4
 80071a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69da      	ldr	r2, [r3, #28]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	4613      	mov	r3, r2
 80071da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_SPI_Transmit+0x22>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e126      	b.n	800743c <HAL_SPI_Transmit+0x270>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071f6:	f7fe fda3 	bl	8005d40 <HAL_GetTick>
 80071fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80071fc:	88fb      	ldrh	r3, [r7, #6]
 80071fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	d002      	beq.n	8007212 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800720c:	2302      	movs	r3, #2
 800720e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007210:	e10b      	b.n	800742a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <HAL_SPI_Transmit+0x52>
 8007218:	88fb      	ldrh	r3, [r7, #6]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d102      	bne.n	8007224 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007222:	e102      	b.n	800742a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2203      	movs	r2, #3
 8007228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	88fa      	ldrh	r2, [r7, #6]
 800723c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	88fa      	ldrh	r2, [r7, #6]
 8007242:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800726a:	d10f      	bne.n	800728c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800727a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800728a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007296:	2b40      	cmp	r3, #64	; 0x40
 8007298:	d007      	beq.n	80072aa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b2:	d14b      	bne.n	800734c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <HAL_SPI_Transmit+0xf6>
 80072bc:	8afb      	ldrh	r3, [r7, #22]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d13e      	bne.n	8007340 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	881a      	ldrh	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	1c9a      	adds	r2, r3, #2
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072e6:	e02b      	b.n	8007340 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d112      	bne.n	800731c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	881a      	ldrh	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007306:	1c9a      	adds	r2, r3, #2
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b01      	subs	r3, #1
 8007314:	b29a      	uxth	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	86da      	strh	r2, [r3, #54]	; 0x36
 800731a:	e011      	b.n	8007340 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800731c:	f7fe fd10 	bl	8005d40 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d803      	bhi.n	8007334 <HAL_SPI_Transmit+0x168>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007332:	d102      	bne.n	800733a <HAL_SPI_Transmit+0x16e>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d102      	bne.n	8007340 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800733e:	e074      	b.n	800742a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1ce      	bne.n	80072e8 <HAL_SPI_Transmit+0x11c>
 800734a:	e04c      	b.n	80073e6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <HAL_SPI_Transmit+0x18e>
 8007354:	8afb      	ldrh	r3, [r7, #22]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d140      	bne.n	80073dc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	330c      	adds	r3, #12
 8007364:	7812      	ldrb	r2, [r2, #0]
 8007366:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007376:	b29b      	uxth	r3, r3
 8007378:	3b01      	subs	r3, #1
 800737a:	b29a      	uxth	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007380:	e02c      	b.n	80073dc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b02      	cmp	r3, #2
 800738e:	d113      	bne.n	80073b8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	330c      	adds	r3, #12
 800739a:	7812      	ldrb	r2, [r2, #0]
 800739c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80073b6:	e011      	b.n	80073dc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073b8:	f7fe fcc2 	bl	8005d40 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d803      	bhi.n	80073d0 <HAL_SPI_Transmit+0x204>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ce:	d102      	bne.n	80073d6 <HAL_SPI_Transmit+0x20a>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d102      	bne.n	80073dc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073da:	e026      	b.n	800742a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1cd      	bne.n	8007382 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 fa54 	bl	8007898 <SPI_EndRxTxTransaction>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2220      	movs	r2, #32
 80073fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007404:	2300      	movs	r3, #0
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	613b      	str	r3, [r7, #16]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	77fb      	strb	r3, [r7, #31]
 8007426:	e000      	b.n	800742a <HAL_SPI_Transmit+0x25e>
  }

error:
 8007428:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800743a:	7ffb      	ldrb	r3, [r7, #31]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08c      	sub	sp, #48	; 0x30
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007452:	2301      	movs	r3, #1
 8007454:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_SPI_TransmitReceive+0x26>
 8007466:	2302      	movs	r3, #2
 8007468:	e18a      	b.n	8007780 <HAL_SPI_TransmitReceive+0x33c>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007472:	f7fe fc65 	bl	8005d40 <HAL_GetTick>
 8007476:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800747e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007488:	887b      	ldrh	r3, [r7, #2]
 800748a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800748c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007490:	2b01      	cmp	r3, #1
 8007492:	d00f      	beq.n	80074b4 <HAL_SPI_TransmitReceive+0x70>
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800749a:	d107      	bne.n	80074ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d103      	bne.n	80074ac <HAL_SPI_TransmitReceive+0x68>
 80074a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d003      	beq.n	80074b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80074ac:	2302      	movs	r3, #2
 80074ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074b2:	e15b      	b.n	800776c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d005      	beq.n	80074c6 <HAL_SPI_TransmitReceive+0x82>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <HAL_SPI_TransmitReceive+0x82>
 80074c0:	887b      	ldrh	r3, [r7, #2]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d103      	bne.n	80074ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074cc:	e14e      	b.n	800776c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d003      	beq.n	80074e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2205      	movs	r2, #5
 80074de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	887a      	ldrh	r2, [r7, #2]
 80074f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	887a      	ldrh	r2, [r7, #2]
 80074f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	887a      	ldrh	r2, [r7, #2]
 8007504:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	887a      	ldrh	r2, [r7, #2]
 800750a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007522:	2b40      	cmp	r3, #64	; 0x40
 8007524:	d007      	beq.n	8007536 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007534:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800753e:	d178      	bne.n	8007632 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <HAL_SPI_TransmitReceive+0x10a>
 8007548:	8b7b      	ldrh	r3, [r7, #26]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d166      	bne.n	800761c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	881a      	ldrh	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	1c9a      	adds	r2, r3, #2
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007568:	b29b      	uxth	r3, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007572:	e053      	b.n	800761c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b02      	cmp	r3, #2
 8007580:	d11b      	bne.n	80075ba <HAL_SPI_TransmitReceive+0x176>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d016      	beq.n	80075ba <HAL_SPI_TransmitReceive+0x176>
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758e:	2b01      	cmp	r3, #1
 8007590:	d113      	bne.n	80075ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007596:	881a      	ldrh	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	1c9a      	adds	r2, r3, #2
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d119      	bne.n	80075fc <HAL_SPI_TransmitReceive+0x1b8>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d014      	beq.n	80075fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	b292      	uxth	r2, r2
 80075de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	1c9a      	adds	r2, r3, #2
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075f8:	2301      	movs	r3, #1
 80075fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075fc:	f7fe fba0 	bl	8005d40 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007608:	429a      	cmp	r2, r3
 800760a:	d807      	bhi.n	800761c <HAL_SPI_TransmitReceive+0x1d8>
 800760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007612:	d003      	beq.n	800761c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800761a:	e0a7      	b.n	800776c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1a6      	bne.n	8007574 <HAL_SPI_TransmitReceive+0x130>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762a:	b29b      	uxth	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1a1      	bne.n	8007574 <HAL_SPI_TransmitReceive+0x130>
 8007630:	e07c      	b.n	800772c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <HAL_SPI_TransmitReceive+0x1fc>
 800763a:	8b7b      	ldrh	r3, [r7, #26]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d16b      	bne.n	8007718 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	330c      	adds	r3, #12
 800764a:	7812      	ldrb	r2, [r2, #0]
 800764c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800765c:	b29b      	uxth	r3, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007666:	e057      	b.n	8007718 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b02      	cmp	r3, #2
 8007674:	d11c      	bne.n	80076b0 <HAL_SPI_TransmitReceive+0x26c>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d017      	beq.n	80076b0 <HAL_SPI_TransmitReceive+0x26c>
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	2b01      	cmp	r3, #1
 8007684:	d114      	bne.n	80076b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	330c      	adds	r3, #12
 8007690:	7812      	ldrb	r2, [r2, #0]
 8007692:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d119      	bne.n	80076f2 <HAL_SPI_TransmitReceive+0x2ae>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d014      	beq.n	80076f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076ee:	2301      	movs	r3, #1
 80076f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076f2:	f7fe fb25 	bl	8005d40 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076fe:	429a      	cmp	r2, r3
 8007700:	d803      	bhi.n	800770a <HAL_SPI_TransmitReceive+0x2c6>
 8007702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007708:	d102      	bne.n	8007710 <HAL_SPI_TransmitReceive+0x2cc>
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	2b00      	cmp	r3, #0
 800770e:	d103      	bne.n	8007718 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007716:	e029      	b.n	800776c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1a2      	bne.n	8007668 <HAL_SPI_TransmitReceive+0x224>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007726:	b29b      	uxth	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d19d      	bne.n	8007668 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800772c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f8b1 	bl	8007898 <SPI_EndRxTxTransaction>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d006      	beq.n	800774a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2220      	movs	r2, #32
 8007746:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007748:	e010      	b.n	800776c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10b      	bne.n	800776a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	e000      	b.n	800776c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800776a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800777c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007780:	4618      	mov	r0, r3
 8007782:	3730      	adds	r7, #48	; 0x30
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	603b      	str	r3, [r7, #0]
 8007794:	4613      	mov	r3, r2
 8007796:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007798:	f7fe fad2 	bl	8005d40 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	1a9b      	subs	r3, r3, r2
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	4413      	add	r3, r2
 80077a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077a8:	f7fe faca 	bl	8005d40 <HAL_GetTick>
 80077ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077ae:	4b39      	ldr	r3, [pc, #228]	; (8007894 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	015b      	lsls	r3, r3, #5
 80077b4:	0d1b      	lsrs	r3, r3, #20
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	fb02 f303 	mul.w	r3, r2, r3
 80077bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077be:	e054      	b.n	800786a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c6:	d050      	beq.n	800786a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077c8:	f7fe faba 	bl	8005d40 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d902      	bls.n	80077de <SPI_WaitFlagStateUntilTimeout+0x56>
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d13d      	bne.n	800785a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077f6:	d111      	bne.n	800781c <SPI_WaitFlagStateUntilTimeout+0x94>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007800:	d004      	beq.n	800780c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800780a:	d107      	bne.n	800781c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800781a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007824:	d10f      	bne.n	8007846 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e017      	b.n	800788a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	3b01      	subs	r3, #1
 8007868:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4013      	ands	r3, r2
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	429a      	cmp	r2, r3
 8007878:	bf0c      	ite	eq
 800787a:	2301      	moveq	r3, #1
 800787c:	2300      	movne	r3, #0
 800787e:	b2db      	uxtb	r3, r3
 8007880:	461a      	mov	r2, r3
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	429a      	cmp	r2, r3
 8007886:	d19b      	bne.n	80077c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	200000c0 	.word	0x200000c0

08007898 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af02      	add	r7, sp, #8
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2200      	movs	r2, #0
 80078ac:	2180      	movs	r1, #128	; 0x80
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7ff ff6a 	bl	8007788 <SPI_WaitFlagStateUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d007      	beq.n	80078ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f043 0220 	orr.w	r2, r3, #32
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e000      	b.n	80078cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e041      	b.n	800796a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fe f824 	bl	8005948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3304      	adds	r3, #4
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f000 fc9a 	bl	800824c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b01      	cmp	r3, #1
 8007986:	d001      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e03a      	b.n	8007a02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0201 	orr.w	r2, r2, #1
 80079a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a18      	ldr	r2, [pc, #96]	; (8007a0c <HAL_TIM_Base_Start_IT+0x98>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00e      	beq.n	80079cc <HAL_TIM_Base_Start_IT+0x58>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b6:	d009      	beq.n	80079cc <HAL_TIM_Base_Start_IT+0x58>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a14      	ldr	r2, [pc, #80]	; (8007a10 <HAL_TIM_Base_Start_IT+0x9c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d004      	beq.n	80079cc <HAL_TIM_Base_Start_IT+0x58>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a13      	ldr	r2, [pc, #76]	; (8007a14 <HAL_TIM_Base_Start_IT+0xa0>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d111      	bne.n	80079f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b06      	cmp	r3, #6
 80079dc:	d010      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f042 0201 	orr.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ee:	e007      	b.n	8007a00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr
 8007a0c:	40012c00 	.word	0x40012c00
 8007a10:	40000400 	.word	0x40000400
 8007a14:	40000800 	.word	0x40000800

08007a18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0201 	bic.w	r2, r2, #1
 8007a2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6a1a      	ldr	r2, [r3, #32]
 8007a36:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10f      	bne.n	8007a60 <HAL_TIM_Base_Stop_IT+0x48>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6a1a      	ldr	r2, [r3, #32]
 8007a46:	f240 4344 	movw	r3, #1092	; 0x444
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d107      	bne.n	8007a60 <HAL_TIM_Base_Stop_IT+0x48>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0201 	bic.w	r2, r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bc80      	pop	{r7}
 8007a72:	4770      	bx	lr

08007a74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e093      	b.n	8007bb0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fd ff0f 	bl	80058c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6812      	ldr	r2, [r2, #0]
 8007ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab8:	f023 0307 	bic.w	r3, r3, #7
 8007abc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4610      	mov	r0, r2
 8007aca:	f000 fbbf 	bl	800824c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af6:	f023 0303 	bic.w	r3, r3, #3
 8007afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	4313      	orrs	r3, r2
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007b14:	f023 030c 	bic.w	r3, r3, #12
 8007b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	021b      	lsls	r3, r3, #8
 8007b30:	4313      	orrs	r3, r2
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	011a      	lsls	r2, r3, #4
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	031b      	lsls	r3, r3, #12
 8007b44:	4313      	orrs	r3, r2
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007b52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bc8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007bd0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bd8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007be0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d110      	bne.n	8007c0a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d102      	bne.n	8007bf4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007bee:	7b7b      	ldrb	r3, [r7, #13]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d001      	beq.n	8007bf8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e089      	b.n	8007d0c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c08:	e031      	b.n	8007c6e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d110      	bne.n	8007c32 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d102      	bne.n	8007c1c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c16:	7b3b      	ldrb	r3, [r7, #12]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d001      	beq.n	8007c20 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e075      	b.n	8007d0c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c30:	e01d      	b.n	8007c6e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d108      	bne.n	8007c4a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d105      	bne.n	8007c4a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c3e:	7b7b      	ldrb	r3, [r7, #13]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d102      	bne.n	8007c4a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c44:	7b3b      	ldrb	r3, [r7, #12]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d001      	beq.n	8007c4e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e05e      	b.n	8007d0c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2202      	movs	r2, #2
 8007c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2202      	movs	r2, #2
 8007c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <HAL_TIM_Encoder_Start_IT+0xc4>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d010      	beq.n	8007c9c <HAL_TIM_Encoder_Start_IT+0xe4>
 8007c7a:	e01f      	b.n	8007cbc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2201      	movs	r2, #1
 8007c82:	2100      	movs	r1, #0
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 fbd9 	bl	800843c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f042 0202 	orr.w	r2, r2, #2
 8007c98:	60da      	str	r2, [r3, #12]
      break;
 8007c9a:	e02e      	b.n	8007cfa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	2104      	movs	r1, #4
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 fbc9 	bl	800843c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f042 0204 	orr.w	r2, r2, #4
 8007cb8:	60da      	str	r2, [r3, #12]
      break;
 8007cba:	e01e      	b.n	8007cfa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 fbb9 	bl	800843c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	2104      	movs	r1, #4
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fbb2 	bl	800843c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0202 	orr.w	r2, r2, #2
 8007ce6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0204 	orr.w	r2, r2, #4
 8007cf6:	60da      	str	r2, [r3, #12]
      break;
 8007cf8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0201 	orr.w	r2, r2, #1
 8007d08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10f      	bne.n	8007d44 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fb85 	bl	800843c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0202 	bic.w	r2, r2, #2
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	e030      	b.n	8007da6 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d10f      	bne.n	8007d6a <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2104      	movs	r1, #4
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 fb72 	bl	800843c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0204 	bic.w	r2, r2, #4
 8007d66:	60da      	str	r2, [r3, #12]
 8007d68:	e01d      	b.n	8007da6 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2100      	movs	r1, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fb62 	bl	800843c <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2104      	movs	r1, #4
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 fb5b 	bl	800843c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0202 	bic.w	r2, r2, #2
 8007d94:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68da      	ldr	r2, [r3, #12]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f022 0204 	bic.w	r2, r2, #4
 8007da4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6a1a      	ldr	r2, [r3, #32]
 8007dac:	f241 1311 	movw	r3, #4369	; 0x1111
 8007db0:	4013      	ands	r3, r2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10f      	bne.n	8007dd6 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6a1a      	ldr	r2, [r3, #32]
 8007dbc:	f240 4344 	movw	r3, #1092	; 0x444
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d107      	bne.n	8007dd6 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0201 	bic.w	r2, r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <HAL_TIM_Encoder_Stop_IT+0xce>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d138      	bne.n	8007e54 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d104      	bne.n	8007df2 <HAL_TIM_Encoder_Stop_IT+0xde>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007df0:	e013      	b.n	8007e1a <HAL_TIM_Encoder_Stop_IT+0x106>
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d104      	bne.n	8007e02 <HAL_TIM_Encoder_Stop_IT+0xee>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e00:	e00b      	b.n	8007e1a <HAL_TIM_Encoder_Stop_IT+0x106>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d104      	bne.n	8007e12 <HAL_TIM_Encoder_Stop_IT+0xfe>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e10:	e003      	b.n	8007e1a <HAL_TIM_Encoder_Stop_IT+0x106>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d104      	bne.n	8007e2a <HAL_TIM_Encoder_Stop_IT+0x116>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e28:	e024      	b.n	8007e74 <HAL_TIM_Encoder_Stop_IT+0x160>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b04      	cmp	r3, #4
 8007e2e:	d104      	bne.n	8007e3a <HAL_TIM_Encoder_Stop_IT+0x126>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e38:	e01c      	b.n	8007e74 <HAL_TIM_Encoder_Stop_IT+0x160>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d104      	bne.n	8007e4a <HAL_TIM_Encoder_Stop_IT+0x136>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e48:	e014      	b.n	8007e74 <HAL_TIM_Encoder_Stop_IT+0x160>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e52:	e00f      	b.n	8007e74 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d122      	bne.n	8007eda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d11b      	bne.n	8007eda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f06f 0202 	mvn.w	r2, #2
 8007eaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	f003 0303 	and.w	r3, r3, #3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7fd fbf3 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 8007ec6:	e005      	b.n	8007ed4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f9a4 	bl	8008216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f9aa 	bl	8008228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d122      	bne.n	8007f2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	d11b      	bne.n	8007f2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f06f 0204 	mvn.w	r2, #4
 8007efe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7fd fbc9 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 8007f1a:	e005      	b.n	8007f28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f97a 	bl	8008216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f980 	bl	8008228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	f003 0308 	and.w	r3, r3, #8
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d122      	bne.n	8007f82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f003 0308 	and.w	r3, r3, #8
 8007f46:	2b08      	cmp	r3, #8
 8007f48:	d11b      	bne.n	8007f82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f06f 0208 	mvn.w	r2, #8
 8007f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2204      	movs	r2, #4
 8007f58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	f003 0303 	and.w	r3, r3, #3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7fd fb9f 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 8007f6e:	e005      	b.n	8007f7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f950 	bl	8008216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f956 	bl	8008228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	f003 0310 	and.w	r3, r3, #16
 8007f8c:	2b10      	cmp	r3, #16
 8007f8e:	d122      	bne.n	8007fd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	2b10      	cmp	r3, #16
 8007f9c:	d11b      	bne.n	8007fd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f06f 0210 	mvn.w	r2, #16
 8007fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2208      	movs	r2, #8
 8007fac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7fd fb75 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 8007fc2:	e005      	b.n	8007fd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f926 	bl	8008216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f92c 	bl	8008228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d10e      	bne.n	8008002 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d107      	bne.n	8008002 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f06f 0201 	mvn.w	r2, #1
 8007ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7fd fb0d 	bl	800561c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800800c:	2b80      	cmp	r3, #128	; 0x80
 800800e:	d10e      	bne.n	800802e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801a:	2b80      	cmp	r3, #128	; 0x80
 800801c:	d107      	bne.n	800802e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fa92 	bl	8008552 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008038:	2b40      	cmp	r3, #64	; 0x40
 800803a:	d10e      	bne.n	800805a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008046:	2b40      	cmp	r3, #64	; 0x40
 8008048:	d107      	bne.n	800805a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f8f0 	bl	800823a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	f003 0320 	and.w	r3, r3, #32
 8008064:	2b20      	cmp	r3, #32
 8008066:	d10e      	bne.n	8008086 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b20      	cmp	r3, #32
 8008074:	d107      	bne.n	8008086 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f06f 0220 	mvn.w	r2, #32
 800807e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fa5d 	bl	8008540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d101      	bne.n	80080a6 <HAL_TIM_ConfigClockSource+0x18>
 80080a2:	2302      	movs	r3, #2
 80080a4:	e0b3      	b.n	800820e <HAL_TIM_ConfigClockSource+0x180>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2202      	movs	r2, #2
 80080b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080cc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080de:	d03e      	beq.n	800815e <HAL_TIM_ConfigClockSource+0xd0>
 80080e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080e4:	f200 8087 	bhi.w	80081f6 <HAL_TIM_ConfigClockSource+0x168>
 80080e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ec:	f000 8085 	beq.w	80081fa <HAL_TIM_ConfigClockSource+0x16c>
 80080f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f4:	d87f      	bhi.n	80081f6 <HAL_TIM_ConfigClockSource+0x168>
 80080f6:	2b70      	cmp	r3, #112	; 0x70
 80080f8:	d01a      	beq.n	8008130 <HAL_TIM_ConfigClockSource+0xa2>
 80080fa:	2b70      	cmp	r3, #112	; 0x70
 80080fc:	d87b      	bhi.n	80081f6 <HAL_TIM_ConfigClockSource+0x168>
 80080fe:	2b60      	cmp	r3, #96	; 0x60
 8008100:	d050      	beq.n	80081a4 <HAL_TIM_ConfigClockSource+0x116>
 8008102:	2b60      	cmp	r3, #96	; 0x60
 8008104:	d877      	bhi.n	80081f6 <HAL_TIM_ConfigClockSource+0x168>
 8008106:	2b50      	cmp	r3, #80	; 0x50
 8008108:	d03c      	beq.n	8008184 <HAL_TIM_ConfigClockSource+0xf6>
 800810a:	2b50      	cmp	r3, #80	; 0x50
 800810c:	d873      	bhi.n	80081f6 <HAL_TIM_ConfigClockSource+0x168>
 800810e:	2b40      	cmp	r3, #64	; 0x40
 8008110:	d058      	beq.n	80081c4 <HAL_TIM_ConfigClockSource+0x136>
 8008112:	2b40      	cmp	r3, #64	; 0x40
 8008114:	d86f      	bhi.n	80081f6 <HAL_TIM_ConfigClockSource+0x168>
 8008116:	2b30      	cmp	r3, #48	; 0x30
 8008118:	d064      	beq.n	80081e4 <HAL_TIM_ConfigClockSource+0x156>
 800811a:	2b30      	cmp	r3, #48	; 0x30
 800811c:	d86b      	bhi.n	80081f6 <HAL_TIM_ConfigClockSource+0x168>
 800811e:	2b20      	cmp	r3, #32
 8008120:	d060      	beq.n	80081e4 <HAL_TIM_ConfigClockSource+0x156>
 8008122:	2b20      	cmp	r3, #32
 8008124:	d867      	bhi.n	80081f6 <HAL_TIM_ConfigClockSource+0x168>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d05c      	beq.n	80081e4 <HAL_TIM_ConfigClockSource+0x156>
 800812a:	2b10      	cmp	r3, #16
 800812c:	d05a      	beq.n	80081e4 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800812e:	e062      	b.n	80081f6 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6818      	ldr	r0, [r3, #0]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	6899      	ldr	r1, [r3, #8]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f000 f95d 	bl	80083fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008152:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	609a      	str	r2, [r3, #8]
      break;
 800815c:	e04e      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6818      	ldr	r0, [r3, #0]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	6899      	ldr	r1, [r3, #8]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f000 f946 	bl	80083fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008180:	609a      	str	r2, [r3, #8]
      break;
 8008182:	e03b      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	6859      	ldr	r1, [r3, #4]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	461a      	mov	r2, r3
 8008192:	f000 f8bd 	bl	8008310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2150      	movs	r1, #80	; 0x50
 800819c:	4618      	mov	r0, r3
 800819e:	f000 f914 	bl	80083ca <TIM_ITRx_SetConfig>
      break;
 80081a2:	e02b      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6818      	ldr	r0, [r3, #0]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	6859      	ldr	r1, [r3, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	461a      	mov	r2, r3
 80081b2:	f000 f8db 	bl	800836c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2160      	movs	r1, #96	; 0x60
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 f904 	bl	80083ca <TIM_ITRx_SetConfig>
      break;
 80081c2:	e01b      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6818      	ldr	r0, [r3, #0]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	6859      	ldr	r1, [r3, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	461a      	mov	r2, r3
 80081d2:	f000 f89d 	bl	8008310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2140      	movs	r1, #64	; 0x40
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 f8f4 	bl	80083ca <TIM_ITRx_SetConfig>
      break;
 80081e2:	e00b      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4619      	mov	r1, r3
 80081ee:	4610      	mov	r0, r2
 80081f0:	f000 f8eb 	bl	80083ca <TIM_ITRx_SetConfig>
        break;
 80081f4:	e002      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80081f6:	bf00      	nop
 80081f8:	e000      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80081fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008216:	b480      	push	{r7}
 8008218:	b083      	sub	sp, #12
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800821e:	bf00      	nop
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	bc80      	pop	{r7}
 8008226:	4770      	bx	lr

08008228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	bc80      	pop	{r7}
 8008238:	4770      	bx	lr

0800823a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr

0800824c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a29      	ldr	r2, [pc, #164]	; (8008304 <TIM_Base_SetConfig+0xb8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00b      	beq.n	800827c <TIM_Base_SetConfig+0x30>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826a:	d007      	beq.n	800827c <TIM_Base_SetConfig+0x30>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a26      	ldr	r2, [pc, #152]	; (8008308 <TIM_Base_SetConfig+0xbc>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d003      	beq.n	800827c <TIM_Base_SetConfig+0x30>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a25      	ldr	r2, [pc, #148]	; (800830c <TIM_Base_SetConfig+0xc0>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d108      	bne.n	800828e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a1c      	ldr	r2, [pc, #112]	; (8008304 <TIM_Base_SetConfig+0xb8>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00b      	beq.n	80082ae <TIM_Base_SetConfig+0x62>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800829c:	d007      	beq.n	80082ae <TIM_Base_SetConfig+0x62>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a19      	ldr	r2, [pc, #100]	; (8008308 <TIM_Base_SetConfig+0xbc>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d003      	beq.n	80082ae <TIM_Base_SetConfig+0x62>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a18      	ldr	r2, [pc, #96]	; (800830c <TIM_Base_SetConfig+0xc0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d108      	bne.n	80082c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	4313      	orrs	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a07      	ldr	r2, [pc, #28]	; (8008304 <TIM_Base_SetConfig+0xb8>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d103      	bne.n	80082f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	691a      	ldr	r2, [r3, #16]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	615a      	str	r2, [r3, #20]
}
 80082fa:	bf00      	nop
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	bc80      	pop	{r7}
 8008302:	4770      	bx	lr
 8008304:	40012c00 	.word	0x40012c00
 8008308:	40000400 	.word	0x40000400
 800830c:	40000800 	.word	0x40000800

08008310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	f023 0201 	bic.w	r2, r3, #1
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800833a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	011b      	lsls	r3, r3, #4
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	4313      	orrs	r3, r2
 8008344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f023 030a 	bic.w	r3, r3, #10
 800834c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4313      	orrs	r3, r2
 8008354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	621a      	str	r2, [r3, #32]
}
 8008362:	bf00      	nop
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr

0800836c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800836c:	b480      	push	{r7}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	f023 0210 	bic.w	r2, r3, #16
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008396:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	031b      	lsls	r3, r3, #12
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4313      	orrs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	621a      	str	r2, [r3, #32]
}
 80083c0:	bf00      	nop
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr

080083ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f043 0307 	orr.w	r3, r3, #7
 80083ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	609a      	str	r2, [r3, #8]
}
 80083f4:	bf00      	nop
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr

080083fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083fe:	b480      	push	{r7}
 8008400:	b087      	sub	sp, #28
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	607a      	str	r2, [r7, #4]
 800840a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008418:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	021a      	lsls	r2, r3, #8
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	431a      	orrs	r2, r3
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	4313      	orrs	r3, r2
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	4313      	orrs	r3, r2
 800842a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	609a      	str	r2, [r3, #8]
}
 8008432:	bf00      	nop
 8008434:	371c      	adds	r7, #28
 8008436:	46bd      	mov	sp, r7
 8008438:	bc80      	pop	{r7}
 800843a:	4770      	bx	lr

0800843c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f003 031f 	and.w	r3, r3, #31
 800844e:	2201      	movs	r2, #1
 8008450:	fa02 f303 	lsl.w	r3, r2, r3
 8008454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6a1a      	ldr	r2, [r3, #32]
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	43db      	mvns	r3, r3
 800845e:	401a      	ands	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f003 031f 	and.w	r3, r3, #31
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	fa01 f303 	lsl.w	r3, r1, r3
 8008474:	431a      	orrs	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	621a      	str	r2, [r3, #32]
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	bc80      	pop	{r7}
 8008482:	4770      	bx	lr

08008484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008494:	2b01      	cmp	r3, #1
 8008496:	d101      	bne.n	800849c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008498:	2302      	movs	r3, #2
 800849a:	e046      	b.n	800852a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a16      	ldr	r2, [pc, #88]	; (8008534 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00e      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e8:	d009      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a12      	ldr	r2, [pc, #72]	; (8008538 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d004      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a10      	ldr	r2, [pc, #64]	; (800853c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d10c      	bne.n	8008518 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	4313      	orrs	r3, r2
 800850e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr
 8008534:	40012c00 	.word	0x40012c00
 8008538:	40000400 	.word	0x40000400
 800853c:	40000800 	.word	0x40000800

08008540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	bc80      	pop	{r7}
 8008550:	4770      	bx	lr

08008552 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008552:	b480      	push	{r7}
 8008554:	b083      	sub	sp, #12
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr

08008564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e03f      	b.n	80085f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d106      	bne.n	8008590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7fd fa02 	bl	8005994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2224      	movs	r2, #36	; 0x24
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fcbf 	bl	8008f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	691a      	ldr	r2, [r3, #16]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	695a      	ldr	r2, [r3, #20]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68da      	ldr	r2, [r3, #12]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2220      	movs	r2, #32
 80085f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b086      	sub	sp, #24
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	4613      	mov	r3, r2
 800860a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b20      	cmp	r3, #32
 8008616:	d13c      	bne.n	8008692 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800861e:	88fb      	ldrh	r3, [r7, #6]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e035      	b.n	8008694 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008632:	2302      	movs	r3, #2
 8008634:	e02e      	b.n	8008694 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2201      	movs	r2, #1
 8008642:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008644:	88fb      	ldrh	r3, [r7, #6]
 8008646:	461a      	mov	r2, r3
 8008648:	68b9      	ldr	r1, [r7, #8]
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 faa4 	bl	8008b98 <UART_Start_Receive_DMA>
 8008650:	4603      	mov	r3, r0
 8008652:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008654:	7dfb      	ldrb	r3, [r7, #23]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d119      	bne.n	800868e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	2b01      	cmp	r3, #1
 8008660:	d113      	bne.n	800868a <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008662:	2300      	movs	r3, #0
 8008664:	613b      	str	r3, [r7, #16]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	613b      	str	r3, [r7, #16]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	613b      	str	r3, [r7, #16]
 8008676:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0210 	orr.w	r2, r2, #16
 8008686:	60da      	str	r2, [r3, #12]
 8008688:	e001      	b.n	800868e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	e000      	b.n	8008694 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8008692:	2302      	movs	r3, #2
  }
}
 8008694:	4618      	mov	r0, r3
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08a      	sub	sp, #40	; 0x28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80086bc:	2300      	movs	r3, #0
 80086be:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10d      	bne.n	80086ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	f003 0320 	and.w	r3, r3, #32
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d008      	beq.n	80086ee <HAL_UART_IRQHandler+0x52>
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	f003 0320 	and.w	r3, r3, #32
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fb76 	bl	8008dd8 <UART_Receive_IT>
      return;
 80086ec:	e17b      	b.n	80089e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 80b1 	beq.w	8008858 <HAL_UART_IRQHandler+0x1bc>
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d105      	bne.n	800870c <HAL_UART_IRQHandler+0x70>
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 80a6 	beq.w	8008858 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00a      	beq.n	800872c <HAL_UART_IRQHandler+0x90>
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871c:	2b00      	cmp	r3, #0
 800871e:	d005      	beq.n	800872c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008724:	f043 0201 	orr.w	r2, r3, #1
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <HAL_UART_IRQHandler+0xb0>
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	2b00      	cmp	r3, #0
 800873e:	d005      	beq.n	800874c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008744:	f043 0202 	orr.w	r2, r3, #2
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00a      	beq.n	800876c <HAL_UART_IRQHandler+0xd0>
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	f003 0301 	and.w	r3, r3, #1
 800875c:	2b00      	cmp	r3, #0
 800875e:	d005      	beq.n	800876c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008764:	f043 0204 	orr.w	r2, r3, #4
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	f003 0308 	and.w	r3, r3, #8
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00f      	beq.n	8008796 <HAL_UART_IRQHandler+0xfa>
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b00      	cmp	r3, #0
 800877e:	d104      	bne.n	800878a <HAL_UART_IRQHandler+0xee>
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d005      	beq.n	8008796 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	f043 0208 	orr.w	r2, r3, #8
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 811e 	beq.w	80089dc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d007      	beq.n	80087ba <HAL_UART_IRQHandler+0x11e>
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	f003 0320 	and.w	r3, r3, #32
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fb0f 	bl	8008dd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	bf14      	ite	ne
 80087c8:	2301      	movne	r3, #1
 80087ca:	2300      	moveq	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d4:	f003 0308 	and.w	r3, r3, #8
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d102      	bne.n	80087e2 <HAL_UART_IRQHandler+0x146>
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d031      	beq.n	8008846 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa51 	bl	8008c8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d023      	beq.n	800883e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	695a      	ldr	r2, [r3, #20]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008804:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	2b00      	cmp	r3, #0
 800880c:	d013      	beq.n	8008836 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008812:	4a76      	ldr	r2, [pc, #472]	; (80089ec <HAL_UART_IRQHandler+0x350>)
 8008814:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881a:	4618      	mov	r0, r3
 800881c:	f7fd fcc0 	bl	80061a0 <HAL_DMA_Abort_IT>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d016      	beq.n	8008854 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008830:	4610      	mov	r0, r2
 8008832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008834:	e00e      	b.n	8008854 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f8f5 	bl	8008a26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800883c:	e00a      	b.n	8008854 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f8f1 	bl	8008a26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008844:	e006      	b.n	8008854 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f8ed 	bl	8008a26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008852:	e0c3      	b.n	80089dc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008854:	bf00      	nop
    return;
 8008856:	e0c1      	b.n	80089dc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885c:	2b01      	cmp	r3, #1
 800885e:	f040 80a1 	bne.w	80089a4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	f003 0310 	and.w	r3, r3, #16
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 809b 	beq.w	80089a4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	f003 0310 	and.w	r3, r3, #16
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 8095 	beq.w	80089a4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	60fb      	str	r3, [r7, #12]
 800888e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	d04e      	beq.n	800893c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80088a8:	8a3b      	ldrh	r3, [r7, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 8098 	beq.w	80089e0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088b4:	8a3a      	ldrh	r2, [r7, #16]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	f080 8092 	bcs.w	80089e0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	8a3a      	ldrh	r2, [r7, #16]
 80088c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	2b20      	cmp	r3, #32
 80088ca:	d02b      	beq.n	8008924 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088da:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	695a      	ldr	r2, [r3, #20]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 0201 	bic.w	r2, r2, #1
 80088ea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	695a      	ldr	r2, [r3, #20]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088fa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2220      	movs	r2, #32
 8008900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0210 	bic.w	r2, r2, #16
 8008918:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891e:	4618      	mov	r0, r3
 8008920:	f7fd fc03 	bl	800612a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800892c:	b29b      	uxth	r3, r3
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	b29b      	uxth	r3, r3
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7fc fe95 	bl	8005664 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800893a:	e051      	b.n	80089e0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008944:	b29b      	uxth	r3, r3
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d047      	beq.n	80089e4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008954:	8a7b      	ldrh	r3, [r7, #18]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d044      	beq.n	80089e4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008968:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	695a      	ldr	r2, [r3, #20]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 0201 	bic.w	r2, r2, #1
 8008978:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68da      	ldr	r2, [r3, #12]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 0210 	bic.w	r2, r2, #16
 8008996:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008998:	8a7b      	ldrh	r3, [r7, #18]
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7fc fe61 	bl	8005664 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80089a2:	e01f      	b.n	80089e4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d008      	beq.n	80089c0 <HAL_UART_IRQHandler+0x324>
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f9a6 	bl	8008d0a <UART_Transmit_IT>
    return;
 80089be:	e012      	b.n	80089e6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00d      	beq.n	80089e6 <HAL_UART_IRQHandler+0x34a>
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d008      	beq.n	80089e6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f9e7 	bl	8008da8 <UART_EndTransmit_IT>
    return;
 80089da:	e004      	b.n	80089e6 <HAL_UART_IRQHandler+0x34a>
    return;
 80089dc:	bf00      	nop
 80089de:	e002      	b.n	80089e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80089e0:	bf00      	nop
 80089e2:	e000      	b.n	80089e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80089e4:	bf00      	nop
  }
}
 80089e6:	3728      	adds	r7, #40	; 0x28
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	08008ce3 	.word	0x08008ce3

080089f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc80      	pop	{r7}
 8008a00:	4770      	bx	lr

08008a02 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008a0a:	bf00      	nop
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bc80      	pop	{r7}
 8008a12:	4770      	bx	lr

08008a14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr

08008a26 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bc80      	pop	{r7}
 8008a36:	4770      	bx	lr

08008a38 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d12a      	bne.n	8008aaa <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a68:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	695a      	ldr	r2, [r3, #20]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0201 	bic.w	r2, r2, #1
 8008a78:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	695a      	ldr	r2, [r3, #20]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a88:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2220      	movs	r2, #32
 8008a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d107      	bne.n	8008aaa <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68da      	ldr	r2, [r3, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0210 	bic.w	r2, r2, #16
 8008aa8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d106      	bne.n	8008ac0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f7fc fdd3 	bl	8005664 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008abe:	e002      	b.n	8008ac6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff ff9e 	bl	8008a02 <HAL_UART_RxCpltCallback>
}
 8008ac6:	bf00      	nop
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d108      	bne.n	8008af6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ae8:	085b      	lsrs	r3, r3, #1
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	4619      	mov	r1, r3
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f7fc fdb8 	bl	8005664 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008af4:	e002      	b.n	8008afc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7ff ff8c 	bl	8008a14 <HAL_UART_RxHalfCpltCallback>
}
 8008afc:	bf00      	nop
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	bf14      	ite	ne
 8008b24:	2301      	movne	r3, #1
 8008b26:	2300      	moveq	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b21      	cmp	r3, #33	; 0x21
 8008b36:	d108      	bne.n	8008b4a <UART_DMAError+0x46>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d005      	beq.n	8008b4a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2200      	movs	r2, #0
 8008b42:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008b44:	68b8      	ldr	r0, [r7, #8]
 8008b46:	f000 f88b 	bl	8008c60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bf14      	ite	ne
 8008b58:	2301      	movne	r3, #1
 8008b5a:	2300      	moveq	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b22      	cmp	r3, #34	; 0x22
 8008b6a:	d108      	bne.n	8008b7e <UART_DMAError+0x7a>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d005      	beq.n	8008b7e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2200      	movs	r2, #0
 8008b76:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008b78:	68b8      	ldr	r0, [r7, #8]
 8008b7a:	f000 f886 	bl	8008c8a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b82:	f043 0210 	orr.w	r2, r3, #16
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b8a:	68b8      	ldr	r0, [r7, #8]
 8008b8c:	f7ff ff4b 	bl	8008a26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b90:	bf00      	nop
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	88fa      	ldrh	r2, [r7, #6]
 8008bb0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2222      	movs	r2, #34	; 0x22
 8008bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	4a23      	ldr	r2, [pc, #140]	; (8008c54 <UART_Start_Receive_DMA+0xbc>)
 8008bc6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	4a22      	ldr	r2, [pc, #136]	; (8008c58 <UART_Start_Receive_DMA+0xc0>)
 8008bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd4:	4a21      	ldr	r2, [pc, #132]	; (8008c5c <UART_Start_Receive_DMA+0xc4>)
 8008bd6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	2200      	movs	r2, #0
 8008bde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008be0:	f107 0308 	add.w	r3, r7, #8
 8008be4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	88fb      	ldrh	r3, [r7, #6]
 8008bf8:	f7fd fa38 	bl	800606c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	613b      	str	r3, [r7, #16]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	613b      	str	r3, [r7, #16]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	613b      	str	r3, [r7, #16]
 8008c10:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c28:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	695a      	ldr	r2, [r3, #20]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f042 0201 	orr.w	r2, r2, #1
 8008c38:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	695a      	ldr	r2, [r3, #20]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c48:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3718      	adds	r7, #24
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	08008a39 	.word	0x08008a39
 8008c58:	08008acf 	.word	0x08008acf
 8008c5c:	08008b05 	.word	0x08008b05

08008c60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008c76:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bc80      	pop	{r7}
 8008c88:	4770      	bx	lr

08008c8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68da      	ldr	r2, [r3, #12]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008ca0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	695a      	ldr	r2, [r3, #20]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0201 	bic.w	r2, r2, #1
 8008cb0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d107      	bne.n	8008cca <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f022 0210 	bic.w	r2, r2, #16
 8008cc8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bc80      	pop	{r7}
 8008ce0:	4770      	bx	lr

08008ce2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f7ff fe92 	bl	8008a26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d02:	bf00      	nop
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b21      	cmp	r3, #33	; 0x21
 8008d1c:	d13e      	bne.n	8008d9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d26:	d114      	bne.n	8008d52 <UART_Transmit_IT+0x48>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d110      	bne.n	8008d52 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	1c9a      	adds	r2, r3, #2
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	621a      	str	r2, [r3, #32]
 8008d50:	e008      	b.n	8008d64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	1c59      	adds	r1, r3, #1
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	6211      	str	r1, [r2, #32]
 8008d5c:	781a      	ldrb	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	4619      	mov	r1, r3
 8008d72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10f      	bne.n	8008d98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e000      	b.n	8008d9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d9c:	2302      	movs	r3, #2
  }
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bc80      	pop	{r7}
 8008da6:	4770      	bx	lr

08008da8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff fe11 	bl	80089f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b22      	cmp	r3, #34	; 0x22
 8008dea:	f040 8099 	bne.w	8008f20 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df6:	d117      	bne.n	8008e28 <UART_Receive_IT+0x50>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d113      	bne.n	8008e28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e00:	2300      	movs	r3, #0
 8008e02:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e08:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e20:	1c9a      	adds	r2, r3, #2
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	629a      	str	r2, [r3, #40]	; 0x28
 8008e26:	e026      	b.n	8008e76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e3a:	d007      	beq.n	8008e4c <UART_Receive_IT+0x74>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <UART_Receive_IT+0x82>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d106      	bne.n	8008e5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	701a      	strb	r2, [r3, #0]
 8008e58:	e008      	b.n	8008e6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	4619      	mov	r1, r3
 8008e84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d148      	bne.n	8008f1c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68da      	ldr	r2, [r3, #12]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0220 	bic.w	r2, r2, #32
 8008e98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ea8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	695a      	ldr	r2, [r3, #20]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 0201 	bic.w	r2, r2, #1
 8008eb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d123      	bne.n	8008f12 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f022 0210 	bic.w	r2, r2, #16
 8008ede:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	2b10      	cmp	r3, #16
 8008eec:	d10a      	bne.n	8008f04 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	60fb      	str	r3, [r7, #12]
 8008f02:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7fc fbaa 	bl	8005664 <HAL_UARTEx_RxEventCallback>
 8008f10:	e002      	b.n	8008f18 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff fd75 	bl	8008a02 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	e002      	b.n	8008f22 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	e000      	b.n	8008f22 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008f20:	2302      	movs	r3, #2
  }
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68da      	ldr	r2, [r3, #12]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008f66:	f023 030c 	bic.w	r3, r3, #12
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	6812      	ldr	r2, [r2, #0]
 8008f6e:	68b9      	ldr	r1, [r7, #8]
 8008f70:	430b      	orrs	r3, r1
 8008f72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a2c      	ldr	r2, [pc, #176]	; (8009040 <UART_SetConfig+0x114>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d103      	bne.n	8008f9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008f94:	f7fe f864 	bl	8007060 <HAL_RCC_GetPCLK2Freq>
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	e002      	b.n	8008fa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008f9c:	f7fe f84c 	bl	8007038 <HAL_RCC_GetPCLK1Freq>
 8008fa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	009a      	lsls	r2, r3, #2
 8008fac:	441a      	add	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb8:	4a22      	ldr	r2, [pc, #136]	; (8009044 <UART_SetConfig+0x118>)
 8008fba:	fba2 2303 	umull	r2, r3, r2, r3
 8008fbe:	095b      	lsrs	r3, r3, #5
 8008fc0:	0119      	lsls	r1, r3, #4
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	009a      	lsls	r2, r3, #2
 8008fcc:	441a      	add	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fd8:	4b1a      	ldr	r3, [pc, #104]	; (8009044 <UART_SetConfig+0x118>)
 8008fda:	fba3 0302 	umull	r0, r3, r3, r2
 8008fde:	095b      	lsrs	r3, r3, #5
 8008fe0:	2064      	movs	r0, #100	; 0x64
 8008fe2:	fb00 f303 	mul.w	r3, r0, r3
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	011b      	lsls	r3, r3, #4
 8008fea:	3332      	adds	r3, #50	; 0x32
 8008fec:	4a15      	ldr	r2, [pc, #84]	; (8009044 <UART_SetConfig+0x118>)
 8008fee:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff2:	095b      	lsrs	r3, r3, #5
 8008ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ff8:	4419      	add	r1, r3
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009a      	lsls	r2, r3, #2
 8009004:	441a      	add	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009010:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <UART_SetConfig+0x118>)
 8009012:	fba3 0302 	umull	r0, r3, r3, r2
 8009016:	095b      	lsrs	r3, r3, #5
 8009018:	2064      	movs	r0, #100	; 0x64
 800901a:	fb00 f303 	mul.w	r3, r0, r3
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	011b      	lsls	r3, r3, #4
 8009022:	3332      	adds	r3, #50	; 0x32
 8009024:	4a07      	ldr	r2, [pc, #28]	; (8009044 <UART_SetConfig+0x118>)
 8009026:	fba2 2303 	umull	r2, r3, r2, r3
 800902a:	095b      	lsrs	r3, r3, #5
 800902c:	f003 020f 	and.w	r2, r3, #15
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	440a      	add	r2, r1
 8009036:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	40013800 	.word	0x40013800
 8009044:	51eb851f 	.word	0x51eb851f

08009048 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800904c:	4904      	ldr	r1, [pc, #16]	; (8009060 <MX_FATFS_Init+0x18>)
 800904e:	4805      	ldr	r0, [pc, #20]	; (8009064 <MX_FATFS_Init+0x1c>)
 8009050:	f000 f8b0 	bl	80091b4 <FATFS_LinkDriver>
 8009054:	4603      	mov	r3, r0
 8009056:	461a      	mov	r2, r3
 8009058:	4b03      	ldr	r3, [pc, #12]	; (8009068 <MX_FATFS_Init+0x20>)
 800905a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800905c:	bf00      	nop
 800905e:	bd80      	pop	{r7, pc}
 8009060:	20000668 	.word	0x20000668
 8009064:	200000cc 	.word	0x200000cc
 8009068:	20000664 	.word	0x20000664

0800906c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_initialize(pdrv);
 8009076:	79fb      	ldrb	r3, [r7, #7]
 8009078:	4618      	mov	r0, r3
 800907a:	f7fb fb9b 	bl	80047b4 <SD_disk_initialize>
 800907e:	4603      	mov	r3, r0
 8009080:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b082      	sub	sp, #8
 800908e:	af00      	add	r7, sp, #0
 8009090:	4603      	mov	r3, r0
 8009092:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8009094:	79fb      	ldrb	r3, [r7, #7]
 8009096:	4618      	mov	r0, r3
 8009098:	f7fb fc72 	bl	8004980 <SD_disk_status>
 800909c:	4603      	mov	r3, r0
 800909e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60b9      	str	r1, [r7, #8]
 80090b0:	607a      	str	r2, [r7, #4]
 80090b2:	603b      	str	r3, [r7, #0]
 80090b4:	4603      	mov	r3, r0
 80090b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80090b8:	7bf8      	ldrb	r0, [r7, #15]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	f7fb fc72 	bl	80049a8 <SD_disk_read>
 80090c4:	4603      	mov	r3, r0
 80090c6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	607a      	str	r2, [r7, #4]
 80090da:	603b      	str	r3, [r7, #0]
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80090e0:	7bf8      	ldrb	r0, [r7, #15]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	f7fb fcc8 	bl	8004a7c <SD_disk_write>
 80090ec:	4603      	mov	r3, r0
 80090ee:	b2db      	uxtb	r3, r3
//    return RES_OK;
  /* USER CODE END WRITE */
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	603a      	str	r2, [r7, #0]
 8009102:	71fb      	strb	r3, [r7, #7]
 8009104:	460b      	mov	r3, r1
 8009106:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8009108:	79fb      	ldrb	r3, [r7, #7]
 800910a:	79b9      	ldrb	r1, [r7, #6]
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	4618      	mov	r0, r3
 8009110:	f7fb fd38 	bl	8004b84 <SD_disk_ioctl>
 8009114:	4603      	mov	r3, r0
 8009116:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009120:	b480      	push	{r7}
 8009122:	b087      	sub	sp, #28
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	4613      	mov	r3, r2
 800912c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800912e:	2301      	movs	r3, #1
 8009130:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009136:	4b1e      	ldr	r3, [pc, #120]	; (80091b0 <FATFS_LinkDriverEx+0x90>)
 8009138:	7a5b      	ldrb	r3, [r3, #9]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	2b01      	cmp	r3, #1
 800913e:	d831      	bhi.n	80091a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009140:	4b1b      	ldr	r3, [pc, #108]	; (80091b0 <FATFS_LinkDriverEx+0x90>)
 8009142:	7a5b      	ldrb	r3, [r3, #9]
 8009144:	b2db      	uxtb	r3, r3
 8009146:	461a      	mov	r2, r3
 8009148:	4b19      	ldr	r3, [pc, #100]	; (80091b0 <FATFS_LinkDriverEx+0x90>)
 800914a:	2100      	movs	r1, #0
 800914c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800914e:	4b18      	ldr	r3, [pc, #96]	; (80091b0 <FATFS_LinkDriverEx+0x90>)
 8009150:	7a5b      	ldrb	r3, [r3, #9]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	4a16      	ldr	r2, [pc, #88]	; (80091b0 <FATFS_LinkDriverEx+0x90>)
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800915e:	4b14      	ldr	r3, [pc, #80]	; (80091b0 <FATFS_LinkDriverEx+0x90>)
 8009160:	7a5b      	ldrb	r3, [r3, #9]
 8009162:	b2db      	uxtb	r3, r3
 8009164:	461a      	mov	r2, r3
 8009166:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <FATFS_LinkDriverEx+0x90>)
 8009168:	4413      	add	r3, r2
 800916a:	79fa      	ldrb	r2, [r7, #7]
 800916c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800916e:	4b10      	ldr	r3, [pc, #64]	; (80091b0 <FATFS_LinkDriverEx+0x90>)
 8009170:	7a5b      	ldrb	r3, [r3, #9]
 8009172:	b2db      	uxtb	r3, r3
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	b2d1      	uxtb	r1, r2
 8009178:	4a0d      	ldr	r2, [pc, #52]	; (80091b0 <FATFS_LinkDriverEx+0x90>)
 800917a:	7251      	strb	r1, [r2, #9]
 800917c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800917e:	7dbb      	ldrb	r3, [r7, #22]
 8009180:	3330      	adds	r3, #48	; 0x30
 8009182:	b2da      	uxtb	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	3301      	adds	r3, #1
 800918c:	223a      	movs	r2, #58	; 0x3a
 800918e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	3302      	adds	r3, #2
 8009194:	222f      	movs	r2, #47	; 0x2f
 8009196:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	3303      	adds	r3, #3
 800919c:	2200      	movs	r2, #0
 800919e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bc80      	pop	{r7}
 80091ae:	4770      	bx	lr
 80091b0:	2000066c 	.word	0x2000066c

080091b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80091be:	2200      	movs	r2, #0
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff ffac 	bl	8009120 <FATFS_LinkDriverEx>
 80091c8:	4603      	mov	r3, r0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <__errno>:
 80091d4:	4b01      	ldr	r3, [pc, #4]	; (80091dc <__errno+0x8>)
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	200000e0 	.word	0x200000e0

080091e0 <__libc_init_array>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	2600      	movs	r6, #0
 80091e4:	4d0c      	ldr	r5, [pc, #48]	; (8009218 <__libc_init_array+0x38>)
 80091e6:	4c0d      	ldr	r4, [pc, #52]	; (800921c <__libc_init_array+0x3c>)
 80091e8:	1b64      	subs	r4, r4, r5
 80091ea:	10a4      	asrs	r4, r4, #2
 80091ec:	42a6      	cmp	r6, r4
 80091ee:	d109      	bne.n	8009204 <__libc_init_array+0x24>
 80091f0:	f002 fa62 	bl	800b6b8 <_init>
 80091f4:	2600      	movs	r6, #0
 80091f6:	4d0a      	ldr	r5, [pc, #40]	; (8009220 <__libc_init_array+0x40>)
 80091f8:	4c0a      	ldr	r4, [pc, #40]	; (8009224 <__libc_init_array+0x44>)
 80091fa:	1b64      	subs	r4, r4, r5
 80091fc:	10a4      	asrs	r4, r4, #2
 80091fe:	42a6      	cmp	r6, r4
 8009200:	d105      	bne.n	800920e <__libc_init_array+0x2e>
 8009202:	bd70      	pop	{r4, r5, r6, pc}
 8009204:	f855 3b04 	ldr.w	r3, [r5], #4
 8009208:	4798      	blx	r3
 800920a:	3601      	adds	r6, #1
 800920c:	e7ee      	b.n	80091ec <__libc_init_array+0xc>
 800920e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009212:	4798      	blx	r3
 8009214:	3601      	adds	r6, #1
 8009216:	e7f2      	b.n	80091fe <__libc_init_array+0x1e>
 8009218:	0800bee4 	.word	0x0800bee4
 800921c:	0800bee4 	.word	0x0800bee4
 8009220:	0800bee4 	.word	0x0800bee4
 8009224:	0800bee8 	.word	0x0800bee8

08009228 <__retarget_lock_acquire>:
 8009228:	4770      	bx	lr

0800922a <__retarget_lock_acquire_recursive>:
 800922a:	4770      	bx	lr

0800922c <__retarget_lock_release>:
 800922c:	4770      	bx	lr

0800922e <__retarget_lock_release_recursive>:
 800922e:	4770      	bx	lr

08009230 <memset>:
 8009230:	4603      	mov	r3, r0
 8009232:	4402      	add	r2, r0
 8009234:	4293      	cmp	r3, r2
 8009236:	d100      	bne.n	800923a <memset+0xa>
 8009238:	4770      	bx	lr
 800923a:	f803 1b01 	strb.w	r1, [r3], #1
 800923e:	e7f9      	b.n	8009234 <memset+0x4>

08009240 <_free_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4605      	mov	r5, r0
 8009244:	2900      	cmp	r1, #0
 8009246:	d040      	beq.n	80092ca <_free_r+0x8a>
 8009248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800924c:	1f0c      	subs	r4, r1, #4
 800924e:	2b00      	cmp	r3, #0
 8009250:	bfb8      	it	lt
 8009252:	18e4      	addlt	r4, r4, r3
 8009254:	f001 f938 	bl	800a4c8 <__malloc_lock>
 8009258:	4a1c      	ldr	r2, [pc, #112]	; (80092cc <_free_r+0x8c>)
 800925a:	6813      	ldr	r3, [r2, #0]
 800925c:	b933      	cbnz	r3, 800926c <_free_r+0x2c>
 800925e:	6063      	str	r3, [r4, #4]
 8009260:	6014      	str	r4, [r2, #0]
 8009262:	4628      	mov	r0, r5
 8009264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009268:	f001 b934 	b.w	800a4d4 <__malloc_unlock>
 800926c:	42a3      	cmp	r3, r4
 800926e:	d908      	bls.n	8009282 <_free_r+0x42>
 8009270:	6820      	ldr	r0, [r4, #0]
 8009272:	1821      	adds	r1, r4, r0
 8009274:	428b      	cmp	r3, r1
 8009276:	bf01      	itttt	eq
 8009278:	6819      	ldreq	r1, [r3, #0]
 800927a:	685b      	ldreq	r3, [r3, #4]
 800927c:	1809      	addeq	r1, r1, r0
 800927e:	6021      	streq	r1, [r4, #0]
 8009280:	e7ed      	b.n	800925e <_free_r+0x1e>
 8009282:	461a      	mov	r2, r3
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	b10b      	cbz	r3, 800928c <_free_r+0x4c>
 8009288:	42a3      	cmp	r3, r4
 800928a:	d9fa      	bls.n	8009282 <_free_r+0x42>
 800928c:	6811      	ldr	r1, [r2, #0]
 800928e:	1850      	adds	r0, r2, r1
 8009290:	42a0      	cmp	r0, r4
 8009292:	d10b      	bne.n	80092ac <_free_r+0x6c>
 8009294:	6820      	ldr	r0, [r4, #0]
 8009296:	4401      	add	r1, r0
 8009298:	1850      	adds	r0, r2, r1
 800929a:	4283      	cmp	r3, r0
 800929c:	6011      	str	r1, [r2, #0]
 800929e:	d1e0      	bne.n	8009262 <_free_r+0x22>
 80092a0:	6818      	ldr	r0, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	4401      	add	r1, r0
 80092a6:	6011      	str	r1, [r2, #0]
 80092a8:	6053      	str	r3, [r2, #4]
 80092aa:	e7da      	b.n	8009262 <_free_r+0x22>
 80092ac:	d902      	bls.n	80092b4 <_free_r+0x74>
 80092ae:	230c      	movs	r3, #12
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	e7d6      	b.n	8009262 <_free_r+0x22>
 80092b4:	6820      	ldr	r0, [r4, #0]
 80092b6:	1821      	adds	r1, r4, r0
 80092b8:	428b      	cmp	r3, r1
 80092ba:	bf01      	itttt	eq
 80092bc:	6819      	ldreq	r1, [r3, #0]
 80092be:	685b      	ldreq	r3, [r3, #4]
 80092c0:	1809      	addeq	r1, r1, r0
 80092c2:	6021      	streq	r1, [r4, #0]
 80092c4:	6063      	str	r3, [r4, #4]
 80092c6:	6054      	str	r4, [r2, #4]
 80092c8:	e7cb      	b.n	8009262 <_free_r+0x22>
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	2000067c 	.word	0x2000067c

080092d0 <sbrk_aligned>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	4e0e      	ldr	r6, [pc, #56]	; (800930c <sbrk_aligned+0x3c>)
 80092d4:	460c      	mov	r4, r1
 80092d6:	6831      	ldr	r1, [r6, #0]
 80092d8:	4605      	mov	r5, r0
 80092da:	b911      	cbnz	r1, 80092e2 <sbrk_aligned+0x12>
 80092dc:	f000 f88c 	bl	80093f8 <_sbrk_r>
 80092e0:	6030      	str	r0, [r6, #0]
 80092e2:	4621      	mov	r1, r4
 80092e4:	4628      	mov	r0, r5
 80092e6:	f000 f887 	bl	80093f8 <_sbrk_r>
 80092ea:	1c43      	adds	r3, r0, #1
 80092ec:	d00a      	beq.n	8009304 <sbrk_aligned+0x34>
 80092ee:	1cc4      	adds	r4, r0, #3
 80092f0:	f024 0403 	bic.w	r4, r4, #3
 80092f4:	42a0      	cmp	r0, r4
 80092f6:	d007      	beq.n	8009308 <sbrk_aligned+0x38>
 80092f8:	1a21      	subs	r1, r4, r0
 80092fa:	4628      	mov	r0, r5
 80092fc:	f000 f87c 	bl	80093f8 <_sbrk_r>
 8009300:	3001      	adds	r0, #1
 8009302:	d101      	bne.n	8009308 <sbrk_aligned+0x38>
 8009304:	f04f 34ff 	mov.w	r4, #4294967295
 8009308:	4620      	mov	r0, r4
 800930a:	bd70      	pop	{r4, r5, r6, pc}
 800930c:	20000680 	.word	0x20000680

08009310 <_malloc_r>:
 8009310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009314:	1ccd      	adds	r5, r1, #3
 8009316:	f025 0503 	bic.w	r5, r5, #3
 800931a:	3508      	adds	r5, #8
 800931c:	2d0c      	cmp	r5, #12
 800931e:	bf38      	it	cc
 8009320:	250c      	movcc	r5, #12
 8009322:	2d00      	cmp	r5, #0
 8009324:	4607      	mov	r7, r0
 8009326:	db01      	blt.n	800932c <_malloc_r+0x1c>
 8009328:	42a9      	cmp	r1, r5
 800932a:	d905      	bls.n	8009338 <_malloc_r+0x28>
 800932c:	230c      	movs	r3, #12
 800932e:	2600      	movs	r6, #0
 8009330:	603b      	str	r3, [r7, #0]
 8009332:	4630      	mov	r0, r6
 8009334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009338:	4e2e      	ldr	r6, [pc, #184]	; (80093f4 <_malloc_r+0xe4>)
 800933a:	f001 f8c5 	bl	800a4c8 <__malloc_lock>
 800933e:	6833      	ldr	r3, [r6, #0]
 8009340:	461c      	mov	r4, r3
 8009342:	bb34      	cbnz	r4, 8009392 <_malloc_r+0x82>
 8009344:	4629      	mov	r1, r5
 8009346:	4638      	mov	r0, r7
 8009348:	f7ff ffc2 	bl	80092d0 <sbrk_aligned>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	4604      	mov	r4, r0
 8009350:	d14d      	bne.n	80093ee <_malloc_r+0xde>
 8009352:	6834      	ldr	r4, [r6, #0]
 8009354:	4626      	mov	r6, r4
 8009356:	2e00      	cmp	r6, #0
 8009358:	d140      	bne.n	80093dc <_malloc_r+0xcc>
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	4631      	mov	r1, r6
 800935e:	4638      	mov	r0, r7
 8009360:	eb04 0803 	add.w	r8, r4, r3
 8009364:	f000 f848 	bl	80093f8 <_sbrk_r>
 8009368:	4580      	cmp	r8, r0
 800936a:	d13a      	bne.n	80093e2 <_malloc_r+0xd2>
 800936c:	6821      	ldr	r1, [r4, #0]
 800936e:	3503      	adds	r5, #3
 8009370:	1a6d      	subs	r5, r5, r1
 8009372:	f025 0503 	bic.w	r5, r5, #3
 8009376:	3508      	adds	r5, #8
 8009378:	2d0c      	cmp	r5, #12
 800937a:	bf38      	it	cc
 800937c:	250c      	movcc	r5, #12
 800937e:	4638      	mov	r0, r7
 8009380:	4629      	mov	r1, r5
 8009382:	f7ff ffa5 	bl	80092d0 <sbrk_aligned>
 8009386:	3001      	adds	r0, #1
 8009388:	d02b      	beq.n	80093e2 <_malloc_r+0xd2>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	442b      	add	r3, r5
 800938e:	6023      	str	r3, [r4, #0]
 8009390:	e00e      	b.n	80093b0 <_malloc_r+0xa0>
 8009392:	6822      	ldr	r2, [r4, #0]
 8009394:	1b52      	subs	r2, r2, r5
 8009396:	d41e      	bmi.n	80093d6 <_malloc_r+0xc6>
 8009398:	2a0b      	cmp	r2, #11
 800939a:	d916      	bls.n	80093ca <_malloc_r+0xba>
 800939c:	1961      	adds	r1, r4, r5
 800939e:	42a3      	cmp	r3, r4
 80093a0:	6025      	str	r5, [r4, #0]
 80093a2:	bf18      	it	ne
 80093a4:	6059      	strne	r1, [r3, #4]
 80093a6:	6863      	ldr	r3, [r4, #4]
 80093a8:	bf08      	it	eq
 80093aa:	6031      	streq	r1, [r6, #0]
 80093ac:	5162      	str	r2, [r4, r5]
 80093ae:	604b      	str	r3, [r1, #4]
 80093b0:	4638      	mov	r0, r7
 80093b2:	f104 060b 	add.w	r6, r4, #11
 80093b6:	f001 f88d 	bl	800a4d4 <__malloc_unlock>
 80093ba:	f026 0607 	bic.w	r6, r6, #7
 80093be:	1d23      	adds	r3, r4, #4
 80093c0:	1af2      	subs	r2, r6, r3
 80093c2:	d0b6      	beq.n	8009332 <_malloc_r+0x22>
 80093c4:	1b9b      	subs	r3, r3, r6
 80093c6:	50a3      	str	r3, [r4, r2]
 80093c8:	e7b3      	b.n	8009332 <_malloc_r+0x22>
 80093ca:	6862      	ldr	r2, [r4, #4]
 80093cc:	42a3      	cmp	r3, r4
 80093ce:	bf0c      	ite	eq
 80093d0:	6032      	streq	r2, [r6, #0]
 80093d2:	605a      	strne	r2, [r3, #4]
 80093d4:	e7ec      	b.n	80093b0 <_malloc_r+0xa0>
 80093d6:	4623      	mov	r3, r4
 80093d8:	6864      	ldr	r4, [r4, #4]
 80093da:	e7b2      	b.n	8009342 <_malloc_r+0x32>
 80093dc:	4634      	mov	r4, r6
 80093de:	6876      	ldr	r6, [r6, #4]
 80093e0:	e7b9      	b.n	8009356 <_malloc_r+0x46>
 80093e2:	230c      	movs	r3, #12
 80093e4:	4638      	mov	r0, r7
 80093e6:	603b      	str	r3, [r7, #0]
 80093e8:	f001 f874 	bl	800a4d4 <__malloc_unlock>
 80093ec:	e7a1      	b.n	8009332 <_malloc_r+0x22>
 80093ee:	6025      	str	r5, [r4, #0]
 80093f0:	e7de      	b.n	80093b0 <_malloc_r+0xa0>
 80093f2:	bf00      	nop
 80093f4:	2000067c 	.word	0x2000067c

080093f8 <_sbrk_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	2300      	movs	r3, #0
 80093fc:	4d05      	ldr	r5, [pc, #20]	; (8009414 <_sbrk_r+0x1c>)
 80093fe:	4604      	mov	r4, r0
 8009400:	4608      	mov	r0, r1
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	f7fc fbe2 	bl	8005bcc <_sbrk>
 8009408:	1c43      	adds	r3, r0, #1
 800940a:	d102      	bne.n	8009412 <_sbrk_r+0x1a>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	b103      	cbz	r3, 8009412 <_sbrk_r+0x1a>
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	20000684 	.word	0x20000684

08009418 <siprintf>:
 8009418:	b40e      	push	{r1, r2, r3}
 800941a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800941e:	b500      	push	{lr}
 8009420:	b09c      	sub	sp, #112	; 0x70
 8009422:	ab1d      	add	r3, sp, #116	; 0x74
 8009424:	9002      	str	r0, [sp, #8]
 8009426:	9006      	str	r0, [sp, #24]
 8009428:	9107      	str	r1, [sp, #28]
 800942a:	9104      	str	r1, [sp, #16]
 800942c:	4808      	ldr	r0, [pc, #32]	; (8009450 <siprintf+0x38>)
 800942e:	4909      	ldr	r1, [pc, #36]	; (8009454 <siprintf+0x3c>)
 8009430:	f853 2b04 	ldr.w	r2, [r3], #4
 8009434:	9105      	str	r1, [sp, #20]
 8009436:	6800      	ldr	r0, [r0, #0]
 8009438:	a902      	add	r1, sp, #8
 800943a:	9301      	str	r3, [sp, #4]
 800943c:	f001 f8ac 	bl	800a598 <_svfiprintf_r>
 8009440:	2200      	movs	r2, #0
 8009442:	9b02      	ldr	r3, [sp, #8]
 8009444:	701a      	strb	r2, [r3, #0]
 8009446:	b01c      	add	sp, #112	; 0x70
 8009448:	f85d eb04 	ldr.w	lr, [sp], #4
 800944c:	b003      	add	sp, #12
 800944e:	4770      	bx	lr
 8009450:	200000e0 	.word	0x200000e0
 8009454:	ffff0208 	.word	0xffff0208

08009458 <__seofread>:
 8009458:	2000      	movs	r0, #0
 800945a:	4770      	bx	lr

0800945c <iso_year_adjust>:
 800945c:	6942      	ldr	r2, [r0, #20]
 800945e:	f240 736c 	movw	r3, #1900	; 0x76c
 8009462:	2a00      	cmp	r2, #0
 8009464:	bfa8      	it	ge
 8009466:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800946a:	4413      	add	r3, r2
 800946c:	0792      	lsls	r2, r2, #30
 800946e:	d105      	bne.n	800947c <iso_year_adjust+0x20>
 8009470:	2164      	movs	r1, #100	; 0x64
 8009472:	fb93 f2f1 	sdiv	r2, r3, r1
 8009476:	fb01 3212 	mls	r2, r1, r2, r3
 800947a:	b9da      	cbnz	r2, 80094b4 <iso_year_adjust+0x58>
 800947c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009480:	fb93 f1f2 	sdiv	r1, r3, r2
 8009484:	fb02 3311 	mls	r3, r2, r1, r3
 8009488:	fab3 f383 	clz	r3, r3
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8009492:	0040      	lsls	r0, r0, #1
 8009494:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8009498:	4418      	add	r0, r3
 800949a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800949e:	4298      	cmp	r0, r3
 80094a0:	d03a      	beq.n	8009518 <iso_year_adjust+0xbc>
 80094a2:	dc21      	bgt.n	80094e8 <iso_year_adjust+0x8c>
 80094a4:	2801      	cmp	r0, #1
 80094a6:	dc1a      	bgt.n	80094de <iso_year_adjust+0x82>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	bfb4      	ite	lt
 80094ac:	2000      	movlt	r0, #0
 80094ae:	f04f 30ff 	movge.w	r0, #4294967295
 80094b2:	4770      	bx	lr
 80094b4:	2301      	movs	r3, #1
 80094b6:	e7ea      	b.n	800948e <iso_year_adjust+0x32>
 80094b8:	2817      	cmp	r0, #23
 80094ba:	d813      	bhi.n	80094e4 <iso_year_adjust+0x88>
 80094bc:	e8df f000 	tbb	[pc, r0]
 80094c0:	0c0c0c0c 	.word	0x0c0c0c0c
 80094c4:	0c0c1212 	.word	0x0c0c1212
 80094c8:	12121212 	.word	0x12121212
 80094cc:	12121212 	.word	0x12121212
 80094d0:	0c0c1212 	.word	0x0c0c1212
 80094d4:	0c0c1212 	.word	0x0c0c1212
 80094d8:	f04f 30ff 	mov.w	r0, #4294967295
 80094dc:	4770      	bx	lr
 80094de:	380a      	subs	r0, #10
 80094e0:	2817      	cmp	r0, #23
 80094e2:	d9e9      	bls.n	80094b8 <iso_year_adjust+0x5c>
 80094e4:	2000      	movs	r0, #0
 80094e6:	4770      	bx	lr
 80094e8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80094ec:	4298      	cmp	r0, r3
 80094ee:	dc06      	bgt.n	80094fe <iso_year_adjust+0xa2>
 80094f0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80094f4:	4298      	cmp	r0, r3
 80094f6:	bfd4      	ite	le
 80094f8:	2000      	movle	r0, #0
 80094fa:	2001      	movgt	r0, #1
 80094fc:	4770      	bx	lr
 80094fe:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8009502:	3802      	subs	r0, #2
 8009504:	2815      	cmp	r0, #21
 8009506:	d8ed      	bhi.n	80094e4 <iso_year_adjust+0x88>
 8009508:	2301      	movs	r3, #1
 800950a:	4083      	lsls	r3, r0
 800950c:	4803      	ldr	r0, [pc, #12]	; (800951c <iso_year_adjust+0xc0>)
 800950e:	4018      	ands	r0, r3
 8009510:	3800      	subs	r0, #0
 8009512:	bf18      	it	ne
 8009514:	2001      	movne	r0, #1
 8009516:	4770      	bx	lr
 8009518:	2001      	movs	r0, #1
 800951a:	4770      	bx	lr
 800951c:	002a001f 	.word	0x002a001f

08009520 <__strftime.isra.0>:
 8009520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	461e      	mov	r6, r3
 8009526:	2300      	movs	r3, #0
 8009528:	4607      	mov	r7, r0
 800952a:	460d      	mov	r5, r1
 800952c:	461c      	mov	r4, r3
 800952e:	b08f      	sub	sp, #60	; 0x3c
 8009530:	9302      	str	r3, [sp, #8]
 8009532:	7813      	ldrb	r3, [r2, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 84b5 	beq.w	8009ea4 <__strftime.isra.0+0x984>
 800953a:	2b25      	cmp	r3, #37	; 0x25
 800953c:	d11f      	bne.n	800957e <__strftime.isra.0+0x5e>
 800953e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8009542:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8009546:	d024      	beq.n	8009592 <__strftime.isra.0+0x72>
 8009548:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800954c:	d021      	beq.n	8009592 <__strftime.isra.0+0x72>
 800954e:	f04f 0b00 	mov.w	fp, #0
 8009552:	f102 0801 	add.w	r8, r2, #1
 8009556:	f898 2000 	ldrb.w	r2, [r8]
 800955a:	3a31      	subs	r2, #49	; 0x31
 800955c:	2a08      	cmp	r2, #8
 800955e:	d81b      	bhi.n	8009598 <__strftime.isra.0+0x78>
 8009560:	4640      	mov	r0, r8
 8009562:	220a      	movs	r2, #10
 8009564:	a906      	add	r1, sp, #24
 8009566:	f000 fdab 	bl	800a0c0 <strtoul>
 800956a:	4681      	mov	r9, r0
 800956c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009570:	f898 2000 	ldrb.w	r2, [r8]
 8009574:	2a45      	cmp	r2, #69	; 0x45
 8009576:	d112      	bne.n	800959e <__strftime.isra.0+0x7e>
 8009578:	f108 0801 	add.w	r8, r8, #1
 800957c:	e011      	b.n	80095a2 <__strftime.isra.0+0x82>
 800957e:	1e69      	subs	r1, r5, #1
 8009580:	42a1      	cmp	r1, r4
 8009582:	d802      	bhi.n	800958a <__strftime.isra.0+0x6a>
 8009584:	2400      	movs	r4, #0
 8009586:	f000 bc90 	b.w	8009eaa <__strftime.isra.0+0x98a>
 800958a:	553b      	strb	r3, [r7, r4]
 800958c:	3201      	adds	r2, #1
 800958e:	3401      	adds	r4, #1
 8009590:	e7cf      	b.n	8009532 <__strftime.isra.0+0x12>
 8009592:	f102 0802 	add.w	r8, r2, #2
 8009596:	e7de      	b.n	8009556 <__strftime.isra.0+0x36>
 8009598:	f04f 0900 	mov.w	r9, #0
 800959c:	e7e8      	b.n	8009570 <__strftime.isra.0+0x50>
 800959e:	2a4f      	cmp	r2, #79	; 0x4f
 80095a0:	d0ea      	beq.n	8009578 <__strftime.isra.0+0x58>
 80095a2:	f898 0000 	ldrb.w	r0, [r8]
 80095a6:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 80095aa:	2a55      	cmp	r2, #85	; 0x55
 80095ac:	d8ea      	bhi.n	8009584 <__strftime.isra.0+0x64>
 80095ae:	a301      	add	r3, pc, #4	; (adr r3, 80095b4 <__strftime.isra.0+0x94>)
 80095b0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80095b4:	08009e99 	.word	0x08009e99
 80095b8:	08009585 	.word	0x08009585
 80095bc:	08009585 	.word	0x08009585
 80095c0:	08009585 	.word	0x08009585
 80095c4:	08009585 	.word	0x08009585
 80095c8:	08009585 	.word	0x08009585
 80095cc:	08009585 	.word	0x08009585
 80095d0:	08009585 	.word	0x08009585
 80095d4:	08009585 	.word	0x08009585
 80095d8:	08009585 	.word	0x08009585
 80095dc:	08009585 	.word	0x08009585
 80095e0:	08009585 	.word	0x08009585
 80095e4:	08009585 	.word	0x08009585
 80095e8:	08009585 	.word	0x08009585
 80095ec:	08009585 	.word	0x08009585
 80095f0:	08009585 	.word	0x08009585
 80095f4:	08009585 	.word	0x08009585
 80095f8:	08009585 	.word	0x08009585
 80095fc:	08009585 	.word	0x08009585
 8009600:	08009585 	.word	0x08009585
 8009604:	08009585 	.word	0x08009585
 8009608:	08009585 	.word	0x08009585
 800960c:	08009585 	.word	0x08009585
 8009610:	08009585 	.word	0x08009585
 8009614:	08009585 	.word	0x08009585
 8009618:	08009585 	.word	0x08009585
 800961c:	08009585 	.word	0x08009585
 8009620:	08009585 	.word	0x08009585
 8009624:	08009749 	.word	0x08009749
 8009628:	080097a1 	.word	0x080097a1
 800962c:	0800980f 	.word	0x0800980f
 8009630:	080098ad 	.word	0x080098ad
 8009634:	08009585 	.word	0x08009585
 8009638:	080098f7 	.word	0x080098f7
 800963c:	080099e5 	.word	0x080099e5
 8009640:	08009abb 	.word	0x08009abb
 8009644:	08009ac9 	.word	0x08009ac9
 8009648:	08009585 	.word	0x08009585
 800964c:	08009585 	.word	0x08009585
 8009650:	08009585 	.word	0x08009585
 8009654:	08009af9 	.word	0x08009af9
 8009658:	08009585 	.word	0x08009585
 800965c:	08009585 	.word	0x08009585
 8009660:	08009b0d 	.word	0x08009b0d
 8009664:	08009585 	.word	0x08009585
 8009668:	08009b5f 	.word	0x08009b5f
 800966c:	08009c71 	.word	0x08009c71
 8009670:	08009c81 	.word	0x08009c81
 8009674:	08009ca9 	.word	0x08009ca9
 8009678:	08009cb9 	.word	0x08009cb9
 800967c:	08009d53 	.word	0x08009d53
 8009680:	08009807 	.word	0x08009807
 8009684:	08009d7f 	.word	0x08009d7f
 8009688:	08009e47 	.word	0x08009e47
 800968c:	08009585 	.word	0x08009585
 8009690:	08009585 	.word	0x08009585
 8009694:	08009585 	.word	0x08009585
 8009698:	08009585 	.word	0x08009585
 800969c:	08009585 	.word	0x08009585
 80096a0:	08009585 	.word	0x08009585
 80096a4:	0800970d 	.word	0x0800970d
 80096a8:	08009777 	.word	0x08009777
 80096ac:	080097cd 	.word	0x080097cd
 80096b0:	08009889 	.word	0x08009889
 80096b4:	08009889 	.word	0x08009889
 80096b8:	08009585 	.word	0x08009585
 80096bc:	08009949 	.word	0x08009949
 80096c0:	08009777 	.word	0x08009777
 80096c4:	08009585 	.word	0x08009585
 80096c8:	08009aeb 	.word	0x08009aeb
 80096cc:	08009abb 	.word	0x08009abb
 80096d0:	08009ac9 	.word	0x08009ac9
 80096d4:	08009af3 	.word	0x08009af3
 80096d8:	08009afd 	.word	0x08009afd
 80096dc:	08009585 	.word	0x08009585
 80096e0:	08009b0d 	.word	0x08009b0d
 80096e4:	08009585 	.word	0x08009585
 80096e8:	080097f7 	.word	0x080097f7
 80096ec:	08009b71 	.word	0x08009b71
 80096f0:	08009c75 	.word	0x08009c75
 80096f4:	08009c8f 	.word	0x08009c8f
 80096f8:	08009585 	.word	0x08009585
 80096fc:	08009d45 	.word	0x08009d45
 8009700:	080097ff 	.word	0x080097ff
 8009704:	08009d63 	.word	0x08009d63
 8009708:	08009dd1 	.word	0x08009dd1
 800970c:	69b3      	ldr	r3, [r6, #24]
 800970e:	4aa9      	ldr	r2, [pc, #676]	; (80099b4 <__strftime.isra.0+0x494>)
 8009710:	3318      	adds	r3, #24
 8009712:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8009716:	4648      	mov	r0, r9
 8009718:	f7f6 fd18 	bl	800014c <strlen>
 800971c:	f109 39ff 	add.w	r9, r9, #4294967295
 8009720:	4420      	add	r0, r4
 8009722:	1e6b      	subs	r3, r5, #1
 8009724:	42a0      	cmp	r0, r4
 8009726:	d107      	bne.n	8009738 <__strftime.isra.0+0x218>
 8009728:	f898 3000 	ldrb.w	r3, [r8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 83b9 	beq.w	8009ea4 <__strftime.isra.0+0x984>
 8009732:	f108 0201 	add.w	r2, r8, #1
 8009736:	e6fc      	b.n	8009532 <__strftime.isra.0+0x12>
 8009738:	42a3      	cmp	r3, r4
 800973a:	f67f af23 	bls.w	8009584 <__strftime.isra.0+0x64>
 800973e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009742:	553a      	strb	r2, [r7, r4]
 8009744:	3401      	adds	r4, #1
 8009746:	e7ed      	b.n	8009724 <__strftime.isra.0+0x204>
 8009748:	69b2      	ldr	r2, [r6, #24]
 800974a:	4b9a      	ldr	r3, [pc, #616]	; (80099b4 <__strftime.isra.0+0x494>)
 800974c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009750:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8009754:	4648      	mov	r0, r9
 8009756:	f7f6 fcf9 	bl	800014c <strlen>
 800975a:	f109 39ff 	add.w	r9, r9, #4294967295
 800975e:	4420      	add	r0, r4
 8009760:	1e6b      	subs	r3, r5, #1
 8009762:	42a0      	cmp	r0, r4
 8009764:	d0e0      	beq.n	8009728 <__strftime.isra.0+0x208>
 8009766:	42a3      	cmp	r3, r4
 8009768:	f67f af0c 	bls.w	8009584 <__strftime.isra.0+0x64>
 800976c:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009770:	553a      	strb	r2, [r7, r4]
 8009772:	3401      	adds	r4, #1
 8009774:	e7f5      	b.n	8009762 <__strftime.isra.0+0x242>
 8009776:	4b8f      	ldr	r3, [pc, #572]	; (80099b4 <__strftime.isra.0+0x494>)
 8009778:	6932      	ldr	r2, [r6, #16]
 800977a:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800977e:	4648      	mov	r0, r9
 8009780:	f7f6 fce4 	bl	800014c <strlen>
 8009784:	f109 39ff 	add.w	r9, r9, #4294967295
 8009788:	4420      	add	r0, r4
 800978a:	1e6b      	subs	r3, r5, #1
 800978c:	42a0      	cmp	r0, r4
 800978e:	d0cb      	beq.n	8009728 <__strftime.isra.0+0x208>
 8009790:	42a3      	cmp	r3, r4
 8009792:	f67f aef7 	bls.w	8009584 <__strftime.isra.0+0x64>
 8009796:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800979a:	553a      	strb	r2, [r7, r4]
 800979c:	3401      	adds	r4, #1
 800979e:	e7f5      	b.n	800978c <__strftime.isra.0+0x26c>
 80097a0:	6933      	ldr	r3, [r6, #16]
 80097a2:	4a84      	ldr	r2, [pc, #528]	; (80099b4 <__strftime.isra.0+0x494>)
 80097a4:	330c      	adds	r3, #12
 80097a6:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80097aa:	4648      	mov	r0, r9
 80097ac:	f7f6 fcce 	bl	800014c <strlen>
 80097b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80097b4:	4420      	add	r0, r4
 80097b6:	1e6b      	subs	r3, r5, #1
 80097b8:	42a0      	cmp	r0, r4
 80097ba:	d0b5      	beq.n	8009728 <__strftime.isra.0+0x208>
 80097bc:	42a3      	cmp	r3, r4
 80097be:	f67f aee1 	bls.w	8009584 <__strftime.isra.0+0x64>
 80097c2:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80097c6:	553a      	strb	r2, [r7, r4]
 80097c8:	3401      	adds	r4, #1
 80097ca:	e7f5      	b.n	80097b8 <__strftime.isra.0+0x298>
 80097cc:	4b79      	ldr	r3, [pc, #484]	; (80099b4 <__strftime.isra.0+0x494>)
 80097ce:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 80097d2:	4648      	mov	r0, r9
 80097d4:	f7f6 fcba 	bl	800014c <strlen>
 80097d8:	f899 3000 	ldrb.w	r3, [r9]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d0a3      	beq.n	8009728 <__strftime.isra.0+0x208>
 80097e0:	4633      	mov	r3, r6
 80097e2:	464a      	mov	r2, r9
 80097e4:	1b29      	subs	r1, r5, r4
 80097e6:	1938      	adds	r0, r7, r4
 80097e8:	f7ff fe9a 	bl	8009520 <__strftime.isra.0>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	f77f aec9 	ble.w	8009584 <__strftime.isra.0+0x64>
 80097f2:	4404      	add	r4, r0
 80097f4:	e798      	b.n	8009728 <__strftime.isra.0+0x208>
 80097f6:	4b6f      	ldr	r3, [pc, #444]	; (80099b4 <__strftime.isra.0+0x494>)
 80097f8:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 80097fc:	e7e9      	b.n	80097d2 <__strftime.isra.0+0x2b2>
 80097fe:	4b6d      	ldr	r3, [pc, #436]	; (80099b4 <__strftime.isra.0+0x494>)
 8009800:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8009804:	e7e5      	b.n	80097d2 <__strftime.isra.0+0x2b2>
 8009806:	4b6b      	ldr	r3, [pc, #428]	; (80099b4 <__strftime.isra.0+0x494>)
 8009808:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800980c:	e7e1      	b.n	80097d2 <__strftime.isra.0+0x2b2>
 800980e:	496a      	ldr	r1, [pc, #424]	; (80099b8 <__strftime.isra.0+0x498>)
 8009810:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8009814:	458a      	cmp	sl, r1
 8009816:	bfac      	ite	ge
 8009818:	2100      	movge	r1, #0
 800981a:	2101      	movlt	r1, #1
 800981c:	f1ba 0f00 	cmp.w	sl, #0
 8009820:	db11      	blt.n	8009846 <__strftime.isra.0+0x326>
 8009822:	2064      	movs	r0, #100	; 0x64
 8009824:	fb9a f0f0 	sdiv	r0, sl, r0
 8009828:	3013      	adds	r0, #19
 800982a:	f1bb 0f00 	cmp.w	fp, #0
 800982e:	d014      	beq.n	800985a <__strftime.isra.0+0x33a>
 8009830:	2863      	cmp	r0, #99	; 0x63
 8009832:	dd27      	ble.n	8009884 <__strftime.isra.0+0x364>
 8009834:	4b61      	ldr	r3, [pc, #388]	; (80099bc <__strftime.isra.0+0x49c>)
 8009836:	4a62      	ldr	r2, [pc, #392]	; (80099c0 <__strftime.isra.0+0x4a0>)
 8009838:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800983c:	bf18      	it	ne
 800983e:	461a      	movne	r2, r3
 8009840:	f8df c180 	ldr.w	ip, [pc, #384]	; 80099c4 <__strftime.isra.0+0x4a4>
 8009844:	e00c      	b.n	8009860 <__strftime.isra.0+0x340>
 8009846:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800984a:	9103      	str	r1, [sp, #12]
 800984c:	f000 fdd6 	bl	800a3fc <abs>
 8009850:	2264      	movs	r2, #100	; 0x64
 8009852:	9903      	ldr	r1, [sp, #12]
 8009854:	fb90 f0f2 	sdiv	r0, r0, r2
 8009858:	e7e7      	b.n	800982a <__strftime.isra.0+0x30a>
 800985a:	4a58      	ldr	r2, [pc, #352]	; (80099bc <__strftime.isra.0+0x49c>)
 800985c:	f8df c168 	ldr.w	ip, [pc, #360]	; 80099c8 <__strftime.isra.0+0x4a8>
 8009860:	f1b9 0f02 	cmp.w	r9, #2
 8009864:	bf2c      	ite	cs
 8009866:	ebc1 0109 	rsbcs	r1, r1, r9
 800986a:	f1c1 0102 	rsbcc	r1, r1, #2
 800986e:	4b57      	ldr	r3, [pc, #348]	; (80099cc <__strftime.isra.0+0x4ac>)
 8009870:	9100      	str	r1, [sp, #0]
 8009872:	4951      	ldr	r1, [pc, #324]	; (80099b8 <__strftime.isra.0+0x498>)
 8009874:	9001      	str	r0, [sp, #4]
 8009876:	458a      	cmp	sl, r1
 8009878:	bfa8      	it	ge
 800987a:	4613      	movge	r3, r2
 800987c:	4662      	mov	r2, ip
 800987e:	1b29      	subs	r1, r5, r4
 8009880:	1938      	adds	r0, r7, r4
 8009882:	e029      	b.n	80098d8 <__strftime.isra.0+0x3b8>
 8009884:	4a4d      	ldr	r2, [pc, #308]	; (80099bc <__strftime.isra.0+0x49c>)
 8009886:	e7db      	b.n	8009840 <__strftime.isra.0+0x320>
 8009888:	4951      	ldr	r1, [pc, #324]	; (80099d0 <__strftime.isra.0+0x4b0>)
 800988a:	4a52      	ldr	r2, [pc, #328]	; (80099d4 <__strftime.isra.0+0x4b4>)
 800988c:	68f3      	ldr	r3, [r6, #12]
 800988e:	2864      	cmp	r0, #100	; 0x64
 8009890:	bf08      	it	eq
 8009892:	460a      	moveq	r2, r1
 8009894:	1b29      	subs	r1, r5, r4
 8009896:	1938      	adds	r0, r7, r4
 8009898:	f001 f914 	bl	800aac4 <sniprintf>
 800989c:	2800      	cmp	r0, #0
 800989e:	f6ff ae71 	blt.w	8009584 <__strftime.isra.0+0x64>
 80098a2:	4404      	add	r4, r0
 80098a4:	42a5      	cmp	r5, r4
 80098a6:	f63f af3f 	bhi.w	8009728 <__strftime.isra.0+0x208>
 80098aa:	e66b      	b.n	8009584 <__strftime.isra.0+0x64>
 80098ac:	6970      	ldr	r0, [r6, #20]
 80098ae:	6933      	ldr	r3, [r6, #16]
 80098b0:	2800      	cmp	r0, #0
 80098b2:	68f2      	ldr	r2, [r6, #12]
 80098b4:	eb07 0904 	add.w	r9, r7, r4
 80098b8:	eba5 0a04 	sub.w	sl, r5, r4
 80098bc:	f103 0b01 	add.w	fp, r3, #1
 80098c0:	db0d      	blt.n	80098de <__strftime.isra.0+0x3be>
 80098c2:	2164      	movs	r1, #100	; 0x64
 80098c4:	fb90 fcf1 	sdiv	ip, r0, r1
 80098c8:	fb01 001c 	mls	r0, r1, ip, r0
 80098cc:	e9cd 2000 	strd	r2, r0, [sp]
 80098d0:	465b      	mov	r3, fp
 80098d2:	4651      	mov	r1, sl
 80098d4:	4648      	mov	r0, r9
 80098d6:	4a40      	ldr	r2, [pc, #256]	; (80099d8 <__strftime.isra.0+0x4b8>)
 80098d8:	f001 f8f4 	bl	800aac4 <sniprintf>
 80098dc:	e7de      	b.n	800989c <__strftime.isra.0+0x37c>
 80098de:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80098e2:	9203      	str	r2, [sp, #12]
 80098e4:	f000 fd8a 	bl	800a3fc <abs>
 80098e8:	2164      	movs	r1, #100	; 0x64
 80098ea:	fb90 fcf1 	sdiv	ip, r0, r1
 80098ee:	9a03      	ldr	r2, [sp, #12]
 80098f0:	fb0c 0011 	mls	r0, ip, r1, r0
 80098f4:	e7ea      	b.n	80098cc <__strftime.isra.0+0x3ac>
 80098f6:	2225      	movs	r2, #37	; 0x25
 80098f8:	f88d 2018 	strb.w	r2, [sp, #24]
 80098fc:	f1bb 0f00 	cmp.w	fp, #0
 8009900:	d011      	beq.n	8009926 <__strftime.isra.0+0x406>
 8009902:	f1b9 0f06 	cmp.w	r9, #6
 8009906:	bf38      	it	cc
 8009908:	f04f 0906 	movcc.w	r9, #6
 800990c:	f1b9 0306 	subs.w	r3, r9, #6
 8009910:	f88d b019 	strb.w	fp, [sp, #25]
 8009914:	d10c      	bne.n	8009930 <__strftime.isra.0+0x410>
 8009916:	f10d 001a 	add.w	r0, sp, #26
 800991a:	4930      	ldr	r1, [pc, #192]	; (80099dc <__strftime.isra.0+0x4bc>)
 800991c:	f001 f930 	bl	800ab80 <strcpy>
 8009920:	4633      	mov	r3, r6
 8009922:	aa06      	add	r2, sp, #24
 8009924:	e75e      	b.n	80097e4 <__strftime.isra.0+0x2c4>
 8009926:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 800992a:	f04f 090a 	mov.w	r9, #10
 800992e:	e7ed      	b.n	800990c <__strftime.isra.0+0x3ec>
 8009930:	211e      	movs	r1, #30
 8009932:	4a2b      	ldr	r2, [pc, #172]	; (80099e0 <__strftime.isra.0+0x4c0>)
 8009934:	f10d 001a 	add.w	r0, sp, #26
 8009938:	f001 f8c4 	bl	800aac4 <sniprintf>
 800993c:	2800      	cmp	r0, #0
 800993e:	ddea      	ble.n	8009916 <__strftime.isra.0+0x3f6>
 8009940:	f10d 031a 	add.w	r3, sp, #26
 8009944:	4418      	add	r0, r3
 8009946:	e7e8      	b.n	800991a <__strftime.isra.0+0x3fa>
 8009948:	4630      	mov	r0, r6
 800994a:	f7ff fd87 	bl	800945c <iso_year_adjust>
 800994e:	4681      	mov	r9, r0
 8009950:	6970      	ldr	r0, [r6, #20]
 8009952:	2800      	cmp	r0, #0
 8009954:	db11      	blt.n	800997a <__strftime.isra.0+0x45a>
 8009956:	2364      	movs	r3, #100	; 0x64
 8009958:	fb90 f2f3 	sdiv	r2, r0, r3
 800995c:	fb03 0012 	mls	r0, r3, r2, r0
 8009960:	2264      	movs	r2, #100	; 0x64
 8009962:	4481      	add	r9, r0
 8009964:	fb99 f3f2 	sdiv	r3, r9, r2
 8009968:	fb02 9913 	mls	r9, r2, r3, r9
 800996c:	4491      	add	r9, r2
 800996e:	fbb9 f3f2 	udiv	r3, r9, r2
 8009972:	fb02 9313 	mls	r3, r2, r3, r9
 8009976:	4a16      	ldr	r2, [pc, #88]	; (80099d0 <__strftime.isra.0+0x4b0>)
 8009978:	e78c      	b.n	8009894 <__strftime.isra.0+0x374>
 800997a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800997e:	f000 fd3d 	bl	800a3fc <abs>
 8009982:	2364      	movs	r3, #100	; 0x64
 8009984:	fb90 f2f3 	sdiv	r2, r0, r3
 8009988:	f1b9 0f00 	cmp.w	r9, #0
 800998c:	fb02 0013 	mls	r0, r2, r3, r0
 8009990:	da07      	bge.n	80099a2 <__strftime.isra.0+0x482>
 8009992:	6972      	ldr	r2, [r6, #20]
 8009994:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8009998:	429a      	cmp	r2, r3
 800999a:	bfb8      	it	lt
 800999c:	f04f 0901 	movlt.w	r9, #1
 80099a0:	e7de      	b.n	8009960 <__strftime.isra.0+0x440>
 80099a2:	d0dd      	beq.n	8009960 <__strftime.isra.0+0x440>
 80099a4:	6972      	ldr	r2, [r6, #20]
 80099a6:	4b04      	ldr	r3, [pc, #16]	; (80099b8 <__strftime.isra.0+0x498>)
 80099a8:	429a      	cmp	r2, r3
 80099aa:	bfb8      	it	lt
 80099ac:	f04f 39ff 	movlt.w	r9, #4294967295
 80099b0:	e7d6      	b.n	8009960 <__strftime.isra.0+0x440>
 80099b2:	bf00      	nop
 80099b4:	0800bbfc 	.word	0x0800bbfc
 80099b8:	fffff894 	.word	0xfffff894
 80099bc:	0800be3a 	.word	0x0800be3a
 80099c0:	0800ba87 	.word	0x0800ba87
 80099c4:	0800ba7f 	.word	0x0800ba7f
 80099c8:	0800ba78 	.word	0x0800ba78
 80099cc:	0800bec9 	.word	0x0800bec9
 80099d0:	0800ba97 	.word	0x0800ba97
 80099d4:	0800ba89 	.word	0x0800ba89
 80099d8:	0800ba8d 	.word	0x0800ba8d
 80099dc:	0800baa0 	.word	0x0800baa0
 80099e0:	0800ba9c 	.word	0x0800ba9c
 80099e4:	6971      	ldr	r1, [r6, #20]
 80099e6:	4aba      	ldr	r2, [pc, #744]	; (8009cd0 <__strftime.isra.0+0x7b0>)
 80099e8:	4630      	mov	r0, r6
 80099ea:	4291      	cmp	r1, r2
 80099ec:	bfac      	ite	ge
 80099ee:	2300      	movge	r3, #0
 80099f0:	2301      	movlt	r3, #1
 80099f2:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80099f6:	f7ff fd31 	bl	800945c <iso_year_adjust>
 80099fa:	9904      	ldr	r1, [sp, #16]
 80099fc:	4682      	mov	sl, r0
 80099fe:	2900      	cmp	r1, #0
 8009a00:	db2c      	blt.n	8009a5c <__strftime.isra.0+0x53c>
 8009a02:	2264      	movs	r2, #100	; 0x64
 8009a04:	fb91 f2f2 	sdiv	r2, r1, r2
 8009a08:	3213      	adds	r2, #19
 8009a0a:	6970      	ldr	r0, [r6, #20]
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	db2f      	blt.n	8009a70 <__strftime.isra.0+0x550>
 8009a10:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8009a14:	fb90 fefc 	sdiv	lr, r0, ip
 8009a18:	fb0c 001e 	mls	r0, ip, lr, r0
 8009a1c:	f1ba 0f00 	cmp.w	sl, #0
 8009a20:	da35      	bge.n	8009a8e <__strftime.isra.0+0x56e>
 8009a22:	6971      	ldr	r1, [r6, #20]
 8009a24:	4bab      	ldr	r3, [pc, #684]	; (8009cd4 <__strftime.isra.0+0x7b4>)
 8009a26:	4299      	cmp	r1, r3
 8009a28:	db3b      	blt.n	8009aa2 <__strftime.isra.0+0x582>
 8009a2a:	4482      	add	sl, r0
 8009a2c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009a30:	d13c      	bne.n	8009aac <__strftime.isra.0+0x58c>
 8009a32:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8009a36:	3a01      	subs	r2, #1
 8009a38:	2064      	movs	r0, #100	; 0x64
 8009a3a:	9b03      	ldr	r3, [sp, #12]
 8009a3c:	fb00 aa02 	mla	sl, r0, r2, sl
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 81a8 	beq.w	8009d96 <__strftime.isra.0+0x876>
 8009a46:	222d      	movs	r2, #45	; 0x2d
 8009a48:	f88d 2018 	strb.w	r2, [sp, #24]
 8009a4c:	f1b9 0f00 	cmp.w	r9, #0
 8009a50:	d001      	beq.n	8009a56 <__strftime.isra.0+0x536>
 8009a52:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a56:	f10d 0219 	add.w	r2, sp, #25
 8009a5a:	e1a7      	b.n	8009dac <__strftime.isra.0+0x88c>
 8009a5c:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8009a60:	9104      	str	r1, [sp, #16]
 8009a62:	f000 fccb 	bl	800a3fc <abs>
 8009a66:	2264      	movs	r2, #100	; 0x64
 8009a68:	9904      	ldr	r1, [sp, #16]
 8009a6a:	fb90 f2f2 	sdiv	r2, r0, r2
 8009a6e:	e7cc      	b.n	8009a0a <__strftime.isra.0+0x4ea>
 8009a70:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009a74:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009a78:	f000 fcc0 	bl	800a3fc <abs>
 8009a7c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009a80:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8009a84:	fb90 fefc 	sdiv	lr, r0, ip
 8009a88:	fb0e 001c 	mls	r0, lr, ip, r0
 8009a8c:	e7c6      	b.n	8009a1c <__strftime.isra.0+0x4fc>
 8009a8e:	d0cc      	beq.n	8009a2a <__strftime.isra.0+0x50a>
 8009a90:	4b8f      	ldr	r3, [pc, #572]	; (8009cd0 <__strftime.isra.0+0x7b0>)
 8009a92:	4299      	cmp	r1, r3
 8009a94:	bfb6      	itet	lt
 8009a96:	2301      	movlt	r3, #1
 8009a98:	2300      	movge	r3, #0
 8009a9a:	f04f 3aff 	movlt.w	sl, #4294967295
 8009a9e:	9303      	str	r3, [sp, #12]
 8009aa0:	e7c3      	b.n	8009a2a <__strftime.isra.0+0x50a>
 8009aa2:	f04f 0a01 	mov.w	sl, #1
 8009aa6:	f8cd a00c 	str.w	sl, [sp, #12]
 8009aaa:	e7be      	b.n	8009a2a <__strftime.isra.0+0x50a>
 8009aac:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8009ab0:	bf04      	itt	eq
 8009ab2:	f04f 0a00 	moveq.w	sl, #0
 8009ab6:	3201      	addeq	r2, #1
 8009ab8:	e7be      	b.n	8009a38 <__strftime.isra.0+0x518>
 8009aba:	4987      	ldr	r1, [pc, #540]	; (8009cd8 <__strftime.isra.0+0x7b8>)
 8009abc:	4a87      	ldr	r2, [pc, #540]	; (8009cdc <__strftime.isra.0+0x7bc>)
 8009abe:	68b3      	ldr	r3, [r6, #8]
 8009ac0:	286b      	cmp	r0, #107	; 0x6b
 8009ac2:	bf08      	it	eq
 8009ac4:	460a      	moveq	r2, r1
 8009ac6:	e6e5      	b.n	8009894 <__strftime.isra.0+0x374>
 8009ac8:	68b3      	ldr	r3, [r6, #8]
 8009aca:	b163      	cbz	r3, 8009ae6 <__strftime.isra.0+0x5c6>
 8009acc:	2b0c      	cmp	r3, #12
 8009ace:	d004      	beq.n	8009ada <__strftime.isra.0+0x5ba>
 8009ad0:	210c      	movs	r1, #12
 8009ad2:	fb93 f2f1 	sdiv	r2, r3, r1
 8009ad6:	fb01 3312 	mls	r3, r1, r2, r3
 8009ada:	4980      	ldr	r1, [pc, #512]	; (8009cdc <__strftime.isra.0+0x7bc>)
 8009adc:	4a7e      	ldr	r2, [pc, #504]	; (8009cd8 <__strftime.isra.0+0x7b8>)
 8009ade:	2849      	cmp	r0, #73	; 0x49
 8009ae0:	bf08      	it	eq
 8009ae2:	460a      	moveq	r2, r1
 8009ae4:	e6d6      	b.n	8009894 <__strftime.isra.0+0x374>
 8009ae6:	230c      	movs	r3, #12
 8009ae8:	e7f7      	b.n	8009ada <__strftime.isra.0+0x5ba>
 8009aea:	69f3      	ldr	r3, [r6, #28]
 8009aec:	4a7c      	ldr	r2, [pc, #496]	; (8009ce0 <__strftime.isra.0+0x7c0>)
 8009aee:	3301      	adds	r3, #1
 8009af0:	e6d0      	b.n	8009894 <__strftime.isra.0+0x374>
 8009af2:	6933      	ldr	r3, [r6, #16]
 8009af4:	3301      	adds	r3, #1
 8009af6:	e73e      	b.n	8009976 <__strftime.isra.0+0x456>
 8009af8:	6873      	ldr	r3, [r6, #4]
 8009afa:	e73c      	b.n	8009976 <__strftime.isra.0+0x456>
 8009afc:	1e6b      	subs	r3, r5, #1
 8009afe:	429c      	cmp	r4, r3
 8009b00:	f4bf ad40 	bcs.w	8009584 <__strftime.isra.0+0x64>
 8009b04:	230a      	movs	r3, #10
 8009b06:	553b      	strb	r3, [r7, r4]
 8009b08:	3401      	adds	r4, #1
 8009b0a:	e60d      	b.n	8009728 <__strftime.isra.0+0x208>
 8009b0c:	68b3      	ldr	r3, [r6, #8]
 8009b0e:	2b0b      	cmp	r3, #11
 8009b10:	bfd4      	ite	le
 8009b12:	2200      	movle	r2, #0
 8009b14:	2201      	movgt	r2, #1
 8009b16:	4b73      	ldr	r3, [pc, #460]	; (8009ce4 <__strftime.isra.0+0x7c4>)
 8009b18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009b1c:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8009b20:	4648      	mov	r0, r9
 8009b22:	f7f6 fb13 	bl	800014c <strlen>
 8009b26:	f109 32ff 	add.w	r2, r9, #4294967295
 8009b2a:	4420      	add	r0, r4
 8009b2c:	f105 3cff 	add.w	ip, r5, #4294967295
 8009b30:	42a0      	cmp	r0, r4
 8009b32:	f43f adf9 	beq.w	8009728 <__strftime.isra.0+0x208>
 8009b36:	45a4      	cmp	ip, r4
 8009b38:	f67f ad24 	bls.w	8009584 <__strftime.isra.0+0x64>
 8009b3c:	f898 1000 	ldrb.w	r1, [r8]
 8009b40:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009b44:	2950      	cmp	r1, #80	; 0x50
 8009b46:	d107      	bne.n	8009b58 <__strftime.isra.0+0x638>
 8009b48:	4967      	ldr	r1, [pc, #412]	; (8009ce8 <__strftime.isra.0+0x7c8>)
 8009b4a:	5cc9      	ldrb	r1, [r1, r3]
 8009b4c:	f001 0103 	and.w	r1, r1, #3
 8009b50:	2901      	cmp	r1, #1
 8009b52:	bf08      	it	eq
 8009b54:	3320      	addeq	r3, #32
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	553b      	strb	r3, [r7, r4]
 8009b5a:	3401      	adds	r4, #1
 8009b5c:	e7e8      	b.n	8009b30 <__strftime.isra.0+0x610>
 8009b5e:	6873      	ldr	r3, [r6, #4]
 8009b60:	4a62      	ldr	r2, [pc, #392]	; (8009cec <__strftime.isra.0+0x7cc>)
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	68b3      	ldr	r3, [r6, #8]
 8009b66:	1b29      	subs	r1, r5, r4
 8009b68:	1938      	adds	r0, r7, r4
 8009b6a:	f000 ffab 	bl	800aac4 <sniprintf>
 8009b6e:	e695      	b.n	800989c <__strftime.isra.0+0x37c>
 8009b70:	6a33      	ldr	r3, [r6, #32]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	db79      	blt.n	8009c6a <__strftime.isra.0+0x74a>
 8009b76:	f000 faad 	bl	800a0d4 <__tz_lock>
 8009b7a:	9b02      	ldr	r3, [sp, #8]
 8009b7c:	b90b      	cbnz	r3, 8009b82 <__strftime.isra.0+0x662>
 8009b7e:	f000 fab5 	bl	800a0ec <_tzset_unlocked>
 8009b82:	f000 fc83 	bl	800a48c <__gettzinfo>
 8009b86:	6a33      	ldr	r3, [r6, #32]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bfd4      	ite	le
 8009b8c:	2200      	movle	r2, #0
 8009b8e:	2201      	movgt	r2, #1
 8009b90:	2328      	movs	r3, #40	; 0x28
 8009b92:	fb02 3303 	mla	r3, r2, r3, r3
 8009b96:	58c3      	ldr	r3, [r0, r3]
 8009b98:	f1c3 0900 	rsb	r9, r3, #0
 8009b9c:	f000 faa0 	bl	800a0e0 <__tz_unlock>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	9302      	str	r3, [sp, #8]
 8009ba4:	6972      	ldr	r2, [r6, #20]
 8009ba6:	1b29      	subs	r1, r5, r4
 8009ba8:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8009bac:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8009bb0:	f16c 0c00 	sbc.w	ip, ip, #0
 8009bb4:	f1bc 0f00 	cmp.w	ip, #0
 8009bb8:	eb07 0004 	add.w	r0, r7, r4
 8009bbc:	da02      	bge.n	8009bc4 <__strftime.isra.0+0x6a4>
 8009bbe:	3303      	adds	r3, #3
 8009bc0:	f14c 0c00 	adc.w	ip, ip, #0
 8009bc4:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8009bc8:	f102 3aff 	add.w	sl, r2, #4294967295
 8009bcc:	fb9a fefe 	sdiv	lr, sl, lr
 8009bd0:	089b      	lsrs	r3, r3, #2
 8009bd2:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8009bd6:	ebb3 030e 	subs.w	r3, r3, lr
 8009bda:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8009bde:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8009be2:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8009be6:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8009bea:	fb9a fefe 	sdiv	lr, sl, lr
 8009bee:	eb13 030e 	adds.w	r3, r3, lr
 8009bf2:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8009bf6:	f240 1c6d 	movw	ip, #365	; 0x16d
 8009bfa:	3a46      	subs	r2, #70	; 0x46
 8009bfc:	fb0c f202 	mul.w	r2, ip, r2
 8009c00:	f04f 0c18 	mov.w	ip, #24
 8009c04:	189b      	adds	r3, r3, r2
 8009c06:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8009c0a:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 8009c0e:	eb13 030e 	adds.w	r3, r3, lr
 8009c12:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8009c16:	fba3 3e0c 	umull	r3, lr, r3, ip
 8009c1a:	fb0c e202 	mla	r2, ip, r2, lr
 8009c1e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8009c22:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8009c26:	eb13 030e 	adds.w	r3, r3, lr
 8009c2a:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8009c2e:	fba3 320c 	umull	r3, r2, r3, ip
 8009c32:	fb0c 220e 	mla	r2, ip, lr, r2
 8009c36:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8009c3a:	eb13 030e 	adds.w	r3, r3, lr
 8009c3e:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8009c42:	fba3 3e0c 	umull	r3, lr, r3, ip
 8009c46:	fb0c e202 	mla	r2, ip, r2, lr
 8009c4a:	f8d6 e000 	ldr.w	lr, [r6]
 8009c4e:	eb13 030e 	adds.w	r3, r3, lr
 8009c52:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8009c56:	ebb3 0309 	subs.w	r3, r3, r9
 8009c5a:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8009c5e:	e9cd 3200 	strd	r3, r2, [sp]
 8009c62:	4a23      	ldr	r2, [pc, #140]	; (8009cf0 <__strftime.isra.0+0x7d0>)
 8009c64:	f000 ff2e 	bl	800aac4 <sniprintf>
 8009c68:	e618      	b.n	800989c <__strftime.isra.0+0x37c>
 8009c6a:	f04f 0900 	mov.w	r9, #0
 8009c6e:	e799      	b.n	8009ba4 <__strftime.isra.0+0x684>
 8009c70:	6833      	ldr	r3, [r6, #0]
 8009c72:	e680      	b.n	8009976 <__strftime.isra.0+0x456>
 8009c74:	1e6b      	subs	r3, r5, #1
 8009c76:	429c      	cmp	r4, r3
 8009c78:	f4bf ac84 	bcs.w	8009584 <__strftime.isra.0+0x64>
 8009c7c:	2309      	movs	r3, #9
 8009c7e:	e742      	b.n	8009b06 <__strftime.isra.0+0x5e6>
 8009c80:	6833      	ldr	r3, [r6, #0]
 8009c82:	4a1c      	ldr	r2, [pc, #112]	; (8009cf4 <__strftime.isra.0+0x7d4>)
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	6873      	ldr	r3, [r6, #4]
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	68b3      	ldr	r3, [r6, #8]
 8009c8c:	e5f7      	b.n	800987e <__strftime.isra.0+0x35e>
 8009c8e:	1e6b      	subs	r3, r5, #1
 8009c90:	429c      	cmp	r4, r3
 8009c92:	f4bf ac77 	bcs.w	8009584 <__strftime.isra.0+0x64>
 8009c96:	69b3      	ldr	r3, [r6, #24]
 8009c98:	1c62      	adds	r2, r4, #1
 8009c9a:	b91b      	cbnz	r3, 8009ca4 <__strftime.isra.0+0x784>
 8009c9c:	2337      	movs	r3, #55	; 0x37
 8009c9e:	553b      	strb	r3, [r7, r4]
 8009ca0:	4614      	mov	r4, r2
 8009ca2:	e541      	b.n	8009728 <__strftime.isra.0+0x208>
 8009ca4:	3330      	adds	r3, #48	; 0x30
 8009ca6:	e7fa      	b.n	8009c9e <__strftime.isra.0+0x77e>
 8009ca8:	69f3      	ldr	r3, [r6, #28]
 8009caa:	69b2      	ldr	r2, [r6, #24]
 8009cac:	3307      	adds	r3, #7
 8009cae:	1a9b      	subs	r3, r3, r2
 8009cb0:	2207      	movs	r2, #7
 8009cb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cb6:	e65e      	b.n	8009976 <__strftime.isra.0+0x456>
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f7ff fbcf 	bl	800945c <iso_year_adjust>
 8009cbe:	69b2      	ldr	r2, [r6, #24]
 8009cc0:	b1d2      	cbz	r2, 8009cf8 <__strftime.isra.0+0x7d8>
 8009cc2:	3a01      	subs	r2, #1
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	dc3b      	bgt.n	8009d40 <__strftime.isra.0+0x820>
 8009cc8:	69f3      	ldr	r3, [r6, #28]
 8009cca:	d117      	bne.n	8009cfc <__strftime.isra.0+0x7dc>
 8009ccc:	330a      	adds	r3, #10
 8009cce:	e7ee      	b.n	8009cae <__strftime.isra.0+0x78e>
 8009cd0:	fffff894 	.word	0xfffff894
 8009cd4:	fffff895 	.word	0xfffff895
 8009cd8:	0800ba89 	.word	0x0800ba89
 8009cdc:	0800ba97 	.word	0x0800ba97
 8009ce0:	0800baac 	.word	0x0800baac
 8009ce4:	0800bbfc 	.word	0x0800bbfc
 8009ce8:	0800bd35 	.word	0x0800bd35
 8009cec:	0800babb 	.word	0x0800babb
 8009cf0:	0800bab1 	.word	0x0800bab1
 8009cf4:	0800bab6 	.word	0x0800bab6
 8009cf8:	2206      	movs	r2, #6
 8009cfa:	e7e3      	b.n	8009cc4 <__strftime.isra.0+0x7a4>
 8009cfc:	6971      	ldr	r1, [r6, #20]
 8009cfe:	1ad2      	subs	r2, r2, r3
 8009d00:	2900      	cmp	r1, #0
 8009d02:	f240 736b 	movw	r3, #1899	; 0x76b
 8009d06:	bfa8      	it	ge
 8009d08:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 8009d0c:	440b      	add	r3, r1
 8009d0e:	0799      	lsls	r1, r3, #30
 8009d10:	d105      	bne.n	8009d1e <__strftime.isra.0+0x7fe>
 8009d12:	2064      	movs	r0, #100	; 0x64
 8009d14:	fb93 f1f0 	sdiv	r1, r3, r0
 8009d18:	fb00 3111 	mls	r1, r0, r1, r3
 8009d1c:	b971      	cbnz	r1, 8009d3c <__strftime.isra.0+0x81c>
 8009d1e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009d22:	fb93 f0f1 	sdiv	r0, r3, r1
 8009d26:	fb01 3310 	mls	r3, r1, r0, r3
 8009d2a:	fab3 f383 	clz	r3, r3
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	2b05      	cmp	r3, #5
 8009d34:	bfb4      	ite	lt
 8009d36:	2335      	movlt	r3, #53	; 0x35
 8009d38:	2334      	movge	r3, #52	; 0x34
 8009d3a:	e61c      	b.n	8009976 <__strftime.isra.0+0x456>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e7f7      	b.n	8009d30 <__strftime.isra.0+0x810>
 8009d40:	2301      	movs	r3, #1
 8009d42:	e618      	b.n	8009976 <__strftime.isra.0+0x456>
 8009d44:	1e6b      	subs	r3, r5, #1
 8009d46:	429c      	cmp	r4, r3
 8009d48:	f4bf ac1c 	bcs.w	8009584 <__strftime.isra.0+0x64>
 8009d4c:	69b3      	ldr	r3, [r6, #24]
 8009d4e:	3330      	adds	r3, #48	; 0x30
 8009d50:	e6d9      	b.n	8009b06 <__strftime.isra.0+0x5e6>
 8009d52:	69b2      	ldr	r2, [r6, #24]
 8009d54:	b11a      	cbz	r2, 8009d5e <__strftime.isra.0+0x83e>
 8009d56:	3a01      	subs	r2, #1
 8009d58:	69f3      	ldr	r3, [r6, #28]
 8009d5a:	3307      	adds	r3, #7
 8009d5c:	e7a7      	b.n	8009cae <__strftime.isra.0+0x78e>
 8009d5e:	2206      	movs	r2, #6
 8009d60:	e7fa      	b.n	8009d58 <__strftime.isra.0+0x838>
 8009d62:	6970      	ldr	r0, [r6, #20]
 8009d64:	2800      	cmp	r0, #0
 8009d66:	db05      	blt.n	8009d74 <__strftime.isra.0+0x854>
 8009d68:	2364      	movs	r3, #100	; 0x64
 8009d6a:	fb90 f2f3 	sdiv	r2, r0, r3
 8009d6e:	fb02 0313 	mls	r3, r2, r3, r0
 8009d72:	e600      	b.n	8009976 <__strftime.isra.0+0x456>
 8009d74:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009d78:	f000 fb40 	bl	800a3fc <abs>
 8009d7c:	e7f4      	b.n	8009d68 <__strftime.isra.0+0x848>
 8009d7e:	6972      	ldr	r2, [r6, #20]
 8009d80:	494c      	ldr	r1, [pc, #304]	; (8009eb4 <__strftime.isra.0+0x994>)
 8009d82:	428a      	cmp	r2, r1
 8009d84:	da05      	bge.n	8009d92 <__strftime.isra.0+0x872>
 8009d86:	202d      	movs	r0, #45	; 0x2d
 8009d88:	eba1 0a02 	sub.w	sl, r1, r2
 8009d8c:	f88d 0018 	strb.w	r0, [sp, #24]
 8009d90:	e65c      	b.n	8009a4c <__strftime.isra.0+0x52c>
 8009d92:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8009d96:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8009d9a:	d106      	bne.n	8009daa <__strftime.isra.0+0x88a>
 8009d9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8009da0:	4592      	cmp	sl, r2
 8009da2:	d902      	bls.n	8009daa <__strftime.isra.0+0x88a>
 8009da4:	f88d b018 	strb.w	fp, [sp, #24]
 8009da8:	e650      	b.n	8009a4c <__strftime.isra.0+0x52c>
 8009daa:	aa06      	add	r2, sp, #24
 8009dac:	2125      	movs	r1, #37	; 0x25
 8009dae:	7011      	strb	r1, [r2, #0]
 8009db0:	f1bb 0f00 	cmp.w	fp, #0
 8009db4:	d108      	bne.n	8009dc8 <__strftime.isra.0+0x8a8>
 8009db6:	1c50      	adds	r0, r2, #1
 8009db8:	493f      	ldr	r1, [pc, #252]	; (8009eb8 <__strftime.isra.0+0x998>)
 8009dba:	f000 fee1 	bl	800ab80 <strcpy>
 8009dbe:	464b      	mov	r3, r9
 8009dc0:	f8cd a000 	str.w	sl, [sp]
 8009dc4:	aa06      	add	r2, sp, #24
 8009dc6:	e6ce      	b.n	8009b66 <__strftime.isra.0+0x646>
 8009dc8:	2330      	movs	r3, #48	; 0x30
 8009dca:	1c90      	adds	r0, r2, #2
 8009dcc:	7053      	strb	r3, [r2, #1]
 8009dce:	e7f3      	b.n	8009db8 <__strftime.isra.0+0x898>
 8009dd0:	6a33      	ldr	r3, [r6, #32]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f6ff aca8 	blt.w	8009728 <__strftime.isra.0+0x208>
 8009dd8:	f000 f97c 	bl	800a0d4 <__tz_lock>
 8009ddc:	9b02      	ldr	r3, [sp, #8]
 8009dde:	b90b      	cbnz	r3, 8009de4 <__strftime.isra.0+0x8c4>
 8009de0:	f000 f984 	bl	800a0ec <_tzset_unlocked>
 8009de4:	f000 fb52 	bl	800a48c <__gettzinfo>
 8009de8:	6a33      	ldr	r3, [r6, #32]
 8009dea:	eb07 0a04 	add.w	sl, r7, r4
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	bfd4      	ite	le
 8009df2:	2200      	movle	r2, #0
 8009df4:	2201      	movgt	r2, #1
 8009df6:	2328      	movs	r3, #40	; 0x28
 8009df8:	fb02 3303 	mla	r3, r2, r3, r3
 8009dfc:	58c3      	ldr	r3, [r0, r3]
 8009dfe:	eba5 0b04 	sub.w	fp, r5, r4
 8009e02:	f1c3 0900 	rsb	r9, r3, #0
 8009e06:	f000 f96b 	bl	800a0e0 <__tz_unlock>
 8009e0a:	233c      	movs	r3, #60	; 0x3c
 8009e0c:	fb99 f0f3 	sdiv	r0, r9, r3
 8009e10:	f000 fb40 	bl	800a494 <labs>
 8009e14:	233c      	movs	r3, #60	; 0x3c
 8009e16:	fb90 f2f3 	sdiv	r2, r0, r3
 8009e1a:	fb02 0013 	mls	r0, r2, r3, r0
 8009e1e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009e22:	9000      	str	r0, [sp, #0]
 8009e24:	fb99 f3f3 	sdiv	r3, r9, r3
 8009e28:	4659      	mov	r1, fp
 8009e2a:	4650      	mov	r0, sl
 8009e2c:	4a23      	ldr	r2, [pc, #140]	; (8009ebc <__strftime.isra.0+0x99c>)
 8009e2e:	f000 fe49 	bl	800aac4 <sniprintf>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	f6ff aba6 	blt.w	8009584 <__strftime.isra.0+0x64>
 8009e38:	4404      	add	r4, r0
 8009e3a:	42a5      	cmp	r5, r4
 8009e3c:	f67f aba2 	bls.w	8009584 <__strftime.isra.0+0x64>
 8009e40:	2301      	movs	r3, #1
 8009e42:	9302      	str	r3, [sp, #8]
 8009e44:	e470      	b.n	8009728 <__strftime.isra.0+0x208>
 8009e46:	6a33      	ldr	r3, [r6, #32]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f6ff ac6d 	blt.w	8009728 <__strftime.isra.0+0x208>
 8009e4e:	f000 f941 	bl	800a0d4 <__tz_lock>
 8009e52:	9b02      	ldr	r3, [sp, #8]
 8009e54:	b90b      	cbnz	r3, 8009e5a <__strftime.isra.0+0x93a>
 8009e56:	f000 f949 	bl	800a0ec <_tzset_unlocked>
 8009e5a:	6a33      	ldr	r3, [r6, #32]
 8009e5c:	4a18      	ldr	r2, [pc, #96]	; (8009ec0 <__strftime.isra.0+0x9a0>)
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bfd4      	ite	le
 8009e62:	2300      	movle	r3, #0
 8009e64:	2301      	movgt	r3, #1
 8009e66:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8009e6a:	4648      	mov	r0, r9
 8009e6c:	f7f6 f96e 	bl	800014c <strlen>
 8009e70:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e74:	4420      	add	r0, r4
 8009e76:	1e6b      	subs	r3, r5, #1
 8009e78:	42a0      	cmp	r0, r4
 8009e7a:	d102      	bne.n	8009e82 <__strftime.isra.0+0x962>
 8009e7c:	f000 f930 	bl	800a0e0 <__tz_unlock>
 8009e80:	e7de      	b.n	8009e40 <__strftime.isra.0+0x920>
 8009e82:	42a3      	cmp	r3, r4
 8009e84:	d904      	bls.n	8009e90 <__strftime.isra.0+0x970>
 8009e86:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8009e8a:	553a      	strb	r2, [r7, r4]
 8009e8c:	3401      	adds	r4, #1
 8009e8e:	e7f3      	b.n	8009e78 <__strftime.isra.0+0x958>
 8009e90:	f000 f926 	bl	800a0e0 <__tz_unlock>
 8009e94:	f7ff bb76 	b.w	8009584 <__strftime.isra.0+0x64>
 8009e98:	1e6b      	subs	r3, r5, #1
 8009e9a:	429c      	cmp	r4, r3
 8009e9c:	f4bf ab72 	bcs.w	8009584 <__strftime.isra.0+0x64>
 8009ea0:	2325      	movs	r3, #37	; 0x25
 8009ea2:	e630      	b.n	8009b06 <__strftime.isra.0+0x5e6>
 8009ea4:	b10d      	cbz	r5, 8009eaa <__strftime.isra.0+0x98a>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	553b      	strb	r3, [r7, r4]
 8009eaa:	4620      	mov	r0, r4
 8009eac:	b00f      	add	sp, #60	; 0x3c
 8009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	bf00      	nop
 8009eb4:	fffff894 	.word	0xfffff894
 8009eb8:	0800baa8 	.word	0x0800baa8
 8009ebc:	0800bac5 	.word	0x0800bac5
 8009ec0:	20000144 	.word	0x20000144

08009ec4 <strftime>:
 8009ec4:	f7ff bb2c 	b.w	8009520 <__strftime.isra.0>

08009ec8 <_strtol_l.constprop.0>:
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ece:	4680      	mov	r8, r0
 8009ed0:	d001      	beq.n	8009ed6 <_strtol_l.constprop.0+0xe>
 8009ed2:	2b24      	cmp	r3, #36	; 0x24
 8009ed4:	d906      	bls.n	8009ee4 <_strtol_l.constprop.0+0x1c>
 8009ed6:	f7ff f97d 	bl	80091d4 <__errno>
 8009eda:	2316      	movs	r3, #22
 8009edc:	6003      	str	r3, [r0, #0]
 8009ede:	2000      	movs	r0, #0
 8009ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ee4:	460d      	mov	r5, r1
 8009ee6:	4f35      	ldr	r7, [pc, #212]	; (8009fbc <_strtol_l.constprop.0+0xf4>)
 8009ee8:	4628      	mov	r0, r5
 8009eea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009eee:	5de6      	ldrb	r6, [r4, r7]
 8009ef0:	f016 0608 	ands.w	r6, r6, #8
 8009ef4:	d1f8      	bne.n	8009ee8 <_strtol_l.constprop.0+0x20>
 8009ef6:	2c2d      	cmp	r4, #45	; 0x2d
 8009ef8:	d12f      	bne.n	8009f5a <_strtol_l.constprop.0+0x92>
 8009efa:	2601      	movs	r6, #1
 8009efc:	782c      	ldrb	r4, [r5, #0]
 8009efe:	1c85      	adds	r5, r0, #2
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d057      	beq.n	8009fb4 <_strtol_l.constprop.0+0xec>
 8009f04:	2b10      	cmp	r3, #16
 8009f06:	d109      	bne.n	8009f1c <_strtol_l.constprop.0+0x54>
 8009f08:	2c30      	cmp	r4, #48	; 0x30
 8009f0a:	d107      	bne.n	8009f1c <_strtol_l.constprop.0+0x54>
 8009f0c:	7828      	ldrb	r0, [r5, #0]
 8009f0e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009f12:	2858      	cmp	r0, #88	; 0x58
 8009f14:	d149      	bne.n	8009faa <_strtol_l.constprop.0+0xe2>
 8009f16:	2310      	movs	r3, #16
 8009f18:	786c      	ldrb	r4, [r5, #1]
 8009f1a:	3502      	adds	r5, #2
 8009f1c:	2700      	movs	r7, #0
 8009f1e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009f22:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009f26:	fbbe f9f3 	udiv	r9, lr, r3
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	fb03 ea19 	mls	sl, r3, r9, lr
 8009f30:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009f34:	f1bc 0f09 	cmp.w	ip, #9
 8009f38:	d814      	bhi.n	8009f64 <_strtol_l.constprop.0+0x9c>
 8009f3a:	4664      	mov	r4, ip
 8009f3c:	42a3      	cmp	r3, r4
 8009f3e:	dd22      	ble.n	8009f86 <_strtol_l.constprop.0+0xbe>
 8009f40:	2f00      	cmp	r7, #0
 8009f42:	db1d      	blt.n	8009f80 <_strtol_l.constprop.0+0xb8>
 8009f44:	4581      	cmp	r9, r0
 8009f46:	d31b      	bcc.n	8009f80 <_strtol_l.constprop.0+0xb8>
 8009f48:	d101      	bne.n	8009f4e <_strtol_l.constprop.0+0x86>
 8009f4a:	45a2      	cmp	sl, r4
 8009f4c:	db18      	blt.n	8009f80 <_strtol_l.constprop.0+0xb8>
 8009f4e:	2701      	movs	r7, #1
 8009f50:	fb00 4003 	mla	r0, r0, r3, r4
 8009f54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f58:	e7ea      	b.n	8009f30 <_strtol_l.constprop.0+0x68>
 8009f5a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f5c:	bf04      	itt	eq
 8009f5e:	782c      	ldrbeq	r4, [r5, #0]
 8009f60:	1c85      	addeq	r5, r0, #2
 8009f62:	e7cd      	b.n	8009f00 <_strtol_l.constprop.0+0x38>
 8009f64:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009f68:	f1bc 0f19 	cmp.w	ip, #25
 8009f6c:	d801      	bhi.n	8009f72 <_strtol_l.constprop.0+0xaa>
 8009f6e:	3c37      	subs	r4, #55	; 0x37
 8009f70:	e7e4      	b.n	8009f3c <_strtol_l.constprop.0+0x74>
 8009f72:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009f76:	f1bc 0f19 	cmp.w	ip, #25
 8009f7a:	d804      	bhi.n	8009f86 <_strtol_l.constprop.0+0xbe>
 8009f7c:	3c57      	subs	r4, #87	; 0x57
 8009f7e:	e7dd      	b.n	8009f3c <_strtol_l.constprop.0+0x74>
 8009f80:	f04f 37ff 	mov.w	r7, #4294967295
 8009f84:	e7e6      	b.n	8009f54 <_strtol_l.constprop.0+0x8c>
 8009f86:	2f00      	cmp	r7, #0
 8009f88:	da07      	bge.n	8009f9a <_strtol_l.constprop.0+0xd2>
 8009f8a:	2322      	movs	r3, #34	; 0x22
 8009f8c:	4670      	mov	r0, lr
 8009f8e:	f8c8 3000 	str.w	r3, [r8]
 8009f92:	2a00      	cmp	r2, #0
 8009f94:	d0a4      	beq.n	8009ee0 <_strtol_l.constprop.0+0x18>
 8009f96:	1e69      	subs	r1, r5, #1
 8009f98:	e005      	b.n	8009fa6 <_strtol_l.constprop.0+0xde>
 8009f9a:	b106      	cbz	r6, 8009f9e <_strtol_l.constprop.0+0xd6>
 8009f9c:	4240      	negs	r0, r0
 8009f9e:	2a00      	cmp	r2, #0
 8009fa0:	d09e      	beq.n	8009ee0 <_strtol_l.constprop.0+0x18>
 8009fa2:	2f00      	cmp	r7, #0
 8009fa4:	d1f7      	bne.n	8009f96 <_strtol_l.constprop.0+0xce>
 8009fa6:	6011      	str	r1, [r2, #0]
 8009fa8:	e79a      	b.n	8009ee0 <_strtol_l.constprop.0+0x18>
 8009faa:	2430      	movs	r4, #48	; 0x30
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1b5      	bne.n	8009f1c <_strtol_l.constprop.0+0x54>
 8009fb0:	2308      	movs	r3, #8
 8009fb2:	e7b3      	b.n	8009f1c <_strtol_l.constprop.0+0x54>
 8009fb4:	2c30      	cmp	r4, #48	; 0x30
 8009fb6:	d0a9      	beq.n	8009f0c <_strtol_l.constprop.0+0x44>
 8009fb8:	230a      	movs	r3, #10
 8009fba:	e7af      	b.n	8009f1c <_strtol_l.constprop.0+0x54>
 8009fbc:	0800bd35 	.word	0x0800bd35

08009fc0 <_strtol_r>:
 8009fc0:	f7ff bf82 	b.w	8009ec8 <_strtol_l.constprop.0>

08009fc4 <strtol>:
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	460a      	mov	r2, r1
 8009fc8:	4601      	mov	r1, r0
 8009fca:	4802      	ldr	r0, [pc, #8]	; (8009fd4 <strtol+0x10>)
 8009fcc:	6800      	ldr	r0, [r0, #0]
 8009fce:	f7ff bf7b 	b.w	8009ec8 <_strtol_l.constprop.0>
 8009fd2:	bf00      	nop
 8009fd4:	200000e0 	.word	0x200000e0

08009fd8 <_strtoul_l.constprop.0>:
 8009fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	4686      	mov	lr, r0
 8009fde:	460d      	mov	r5, r1
 8009fe0:	4f35      	ldr	r7, [pc, #212]	; (800a0b8 <_strtoul_l.constprop.0+0xe0>)
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fe8:	5de6      	ldrb	r6, [r4, r7]
 8009fea:	f016 0608 	ands.w	r6, r6, #8
 8009fee:	d1f8      	bne.n	8009fe2 <_strtoul_l.constprop.0+0xa>
 8009ff0:	2c2d      	cmp	r4, #45	; 0x2d
 8009ff2:	d12f      	bne.n	800a054 <_strtoul_l.constprop.0+0x7c>
 8009ff4:	2601      	movs	r6, #1
 8009ff6:	782c      	ldrb	r4, [r5, #0]
 8009ff8:	1c85      	adds	r5, r0, #2
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d057      	beq.n	800a0ae <_strtoul_l.constprop.0+0xd6>
 8009ffe:	2b10      	cmp	r3, #16
 800a000:	d109      	bne.n	800a016 <_strtoul_l.constprop.0+0x3e>
 800a002:	2c30      	cmp	r4, #48	; 0x30
 800a004:	d107      	bne.n	800a016 <_strtoul_l.constprop.0+0x3e>
 800a006:	7828      	ldrb	r0, [r5, #0]
 800a008:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a00c:	2858      	cmp	r0, #88	; 0x58
 800a00e:	d149      	bne.n	800a0a4 <_strtoul_l.constprop.0+0xcc>
 800a010:	2310      	movs	r3, #16
 800a012:	786c      	ldrb	r4, [r5, #1]
 800a014:	3502      	adds	r5, #2
 800a016:	f04f 38ff 	mov.w	r8, #4294967295
 800a01a:	fbb8 f8f3 	udiv	r8, r8, r3
 800a01e:	2700      	movs	r7, #0
 800a020:	fb03 f908 	mul.w	r9, r3, r8
 800a024:	4638      	mov	r0, r7
 800a026:	ea6f 0909 	mvn.w	r9, r9
 800a02a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a02e:	f1bc 0f09 	cmp.w	ip, #9
 800a032:	d814      	bhi.n	800a05e <_strtoul_l.constprop.0+0x86>
 800a034:	4664      	mov	r4, ip
 800a036:	42a3      	cmp	r3, r4
 800a038:	dd22      	ble.n	800a080 <_strtoul_l.constprop.0+0xa8>
 800a03a:	2f00      	cmp	r7, #0
 800a03c:	db1d      	blt.n	800a07a <_strtoul_l.constprop.0+0xa2>
 800a03e:	4580      	cmp	r8, r0
 800a040:	d31b      	bcc.n	800a07a <_strtoul_l.constprop.0+0xa2>
 800a042:	d101      	bne.n	800a048 <_strtoul_l.constprop.0+0x70>
 800a044:	45a1      	cmp	r9, r4
 800a046:	db18      	blt.n	800a07a <_strtoul_l.constprop.0+0xa2>
 800a048:	2701      	movs	r7, #1
 800a04a:	fb00 4003 	mla	r0, r0, r3, r4
 800a04e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a052:	e7ea      	b.n	800a02a <_strtoul_l.constprop.0+0x52>
 800a054:	2c2b      	cmp	r4, #43	; 0x2b
 800a056:	bf04      	itt	eq
 800a058:	782c      	ldrbeq	r4, [r5, #0]
 800a05a:	1c85      	addeq	r5, r0, #2
 800a05c:	e7cd      	b.n	8009ffa <_strtoul_l.constprop.0+0x22>
 800a05e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a062:	f1bc 0f19 	cmp.w	ip, #25
 800a066:	d801      	bhi.n	800a06c <_strtoul_l.constprop.0+0x94>
 800a068:	3c37      	subs	r4, #55	; 0x37
 800a06a:	e7e4      	b.n	800a036 <_strtoul_l.constprop.0+0x5e>
 800a06c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a070:	f1bc 0f19 	cmp.w	ip, #25
 800a074:	d804      	bhi.n	800a080 <_strtoul_l.constprop.0+0xa8>
 800a076:	3c57      	subs	r4, #87	; 0x57
 800a078:	e7dd      	b.n	800a036 <_strtoul_l.constprop.0+0x5e>
 800a07a:	f04f 37ff 	mov.w	r7, #4294967295
 800a07e:	e7e6      	b.n	800a04e <_strtoul_l.constprop.0+0x76>
 800a080:	2f00      	cmp	r7, #0
 800a082:	da07      	bge.n	800a094 <_strtoul_l.constprop.0+0xbc>
 800a084:	2322      	movs	r3, #34	; 0x22
 800a086:	f04f 30ff 	mov.w	r0, #4294967295
 800a08a:	f8ce 3000 	str.w	r3, [lr]
 800a08e:	b932      	cbnz	r2, 800a09e <_strtoul_l.constprop.0+0xc6>
 800a090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a094:	b106      	cbz	r6, 800a098 <_strtoul_l.constprop.0+0xc0>
 800a096:	4240      	negs	r0, r0
 800a098:	2a00      	cmp	r2, #0
 800a09a:	d0f9      	beq.n	800a090 <_strtoul_l.constprop.0+0xb8>
 800a09c:	b107      	cbz	r7, 800a0a0 <_strtoul_l.constprop.0+0xc8>
 800a09e:	1e69      	subs	r1, r5, #1
 800a0a0:	6011      	str	r1, [r2, #0]
 800a0a2:	e7f5      	b.n	800a090 <_strtoul_l.constprop.0+0xb8>
 800a0a4:	2430      	movs	r4, #48	; 0x30
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1b5      	bne.n	800a016 <_strtoul_l.constprop.0+0x3e>
 800a0aa:	2308      	movs	r3, #8
 800a0ac:	e7b3      	b.n	800a016 <_strtoul_l.constprop.0+0x3e>
 800a0ae:	2c30      	cmp	r4, #48	; 0x30
 800a0b0:	d0a9      	beq.n	800a006 <_strtoul_l.constprop.0+0x2e>
 800a0b2:	230a      	movs	r3, #10
 800a0b4:	e7af      	b.n	800a016 <_strtoul_l.constprop.0+0x3e>
 800a0b6:	bf00      	nop
 800a0b8:	0800bd35 	.word	0x0800bd35

0800a0bc <_strtoul_r>:
 800a0bc:	f7ff bf8c 	b.w	8009fd8 <_strtoul_l.constprop.0>

0800a0c0 <strtoul>:
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	460a      	mov	r2, r1
 800a0c4:	4601      	mov	r1, r0
 800a0c6:	4802      	ldr	r0, [pc, #8]	; (800a0d0 <strtoul+0x10>)
 800a0c8:	6800      	ldr	r0, [r0, #0]
 800a0ca:	f7ff bf85 	b.w	8009fd8 <_strtoul_l.constprop.0>
 800a0ce:	bf00      	nop
 800a0d0:	200000e0 	.word	0x200000e0

0800a0d4 <__tz_lock>:
 800a0d4:	4801      	ldr	r0, [pc, #4]	; (800a0dc <__tz_lock+0x8>)
 800a0d6:	f7ff b8a7 	b.w	8009228 <__retarget_lock_acquire>
 800a0da:	bf00      	nop
 800a0dc:	2000067a 	.word	0x2000067a

0800a0e0 <__tz_unlock>:
 800a0e0:	4801      	ldr	r0, [pc, #4]	; (800a0e8 <__tz_unlock+0x8>)
 800a0e2:	f7ff b8a3 	b.w	800922c <__retarget_lock_release>
 800a0e6:	bf00      	nop
 800a0e8:	2000067a 	.word	0x2000067a

0800a0ec <_tzset_unlocked>:
 800a0ec:	4b01      	ldr	r3, [pc, #4]	; (800a0f4 <_tzset_unlocked+0x8>)
 800a0ee:	6818      	ldr	r0, [r3, #0]
 800a0f0:	f000 b802 	b.w	800a0f8 <_tzset_unlocked_r>
 800a0f4:	200000e0 	.word	0x200000e0

0800a0f8 <_tzset_unlocked_r>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	b08d      	sub	sp, #52	; 0x34
 800a0fe:	4607      	mov	r7, r0
 800a100:	f000 f9c4 	bl	800a48c <__gettzinfo>
 800a104:	49b1      	ldr	r1, [pc, #708]	; (800a3cc <_tzset_unlocked_r+0x2d4>)
 800a106:	4605      	mov	r5, r0
 800a108:	4638      	mov	r0, r7
 800a10a:	f000 f9b7 	bl	800a47c <_getenv_r>
 800a10e:	4eb0      	ldr	r6, [pc, #704]	; (800a3d0 <_tzset_unlocked_r+0x2d8>)
 800a110:	4604      	mov	r4, r0
 800a112:	b970      	cbnz	r0, 800a132 <_tzset_unlocked_r+0x3a>
 800a114:	4baf      	ldr	r3, [pc, #700]	; (800a3d4 <_tzset_unlocked_r+0x2dc>)
 800a116:	4ab0      	ldr	r2, [pc, #704]	; (800a3d8 <_tzset_unlocked_r+0x2e0>)
 800a118:	6018      	str	r0, [r3, #0]
 800a11a:	4bb0      	ldr	r3, [pc, #704]	; (800a3dc <_tzset_unlocked_r+0x2e4>)
 800a11c:	6018      	str	r0, [r3, #0]
 800a11e:	4bb0      	ldr	r3, [pc, #704]	; (800a3e0 <_tzset_unlocked_r+0x2e8>)
 800a120:	6830      	ldr	r0, [r6, #0]
 800a122:	e9c3 2200 	strd	r2, r2, [r3]
 800a126:	f000 f9b9 	bl	800a49c <free>
 800a12a:	6034      	str	r4, [r6, #0]
 800a12c:	b00d      	add	sp, #52	; 0x34
 800a12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a132:	6831      	ldr	r1, [r6, #0]
 800a134:	2900      	cmp	r1, #0
 800a136:	d162      	bne.n	800a1fe <_tzset_unlocked_r+0x106>
 800a138:	6830      	ldr	r0, [r6, #0]
 800a13a:	f000 f9af 	bl	800a49c <free>
 800a13e:	4620      	mov	r0, r4
 800a140:	f7f6 f804 	bl	800014c <strlen>
 800a144:	1c41      	adds	r1, r0, #1
 800a146:	4638      	mov	r0, r7
 800a148:	f7ff f8e2 	bl	8009310 <_malloc_r>
 800a14c:	6030      	str	r0, [r6, #0]
 800a14e:	2800      	cmp	r0, #0
 800a150:	d15a      	bne.n	800a208 <_tzset_unlocked_r+0x110>
 800a152:	7823      	ldrb	r3, [r4, #0]
 800a154:	ae0a      	add	r6, sp, #40	; 0x28
 800a156:	2b3a      	cmp	r3, #58	; 0x3a
 800a158:	bf08      	it	eq
 800a15a:	3401      	addeq	r4, #1
 800a15c:	4633      	mov	r3, r6
 800a15e:	4620      	mov	r0, r4
 800a160:	4aa0      	ldr	r2, [pc, #640]	; (800a3e4 <_tzset_unlocked_r+0x2ec>)
 800a162:	49a1      	ldr	r1, [pc, #644]	; (800a3e8 <_tzset_unlocked_r+0x2f0>)
 800a164:	f000 fce2 	bl	800ab2c <siscanf>
 800a168:	2800      	cmp	r0, #0
 800a16a:	dddf      	ble.n	800a12c <_tzset_unlocked_r+0x34>
 800a16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a16e:	18e7      	adds	r7, r4, r3
 800a170:	5ce3      	ldrb	r3, [r4, r3]
 800a172:	2b2d      	cmp	r3, #45	; 0x2d
 800a174:	d14c      	bne.n	800a210 <_tzset_unlocked_r+0x118>
 800a176:	f04f 38ff 	mov.w	r8, #4294967295
 800a17a:	3701      	adds	r7, #1
 800a17c:	2400      	movs	r4, #0
 800a17e:	f10d 0a20 	add.w	sl, sp, #32
 800a182:	f10d 0b1e 	add.w	fp, sp, #30
 800a186:	4633      	mov	r3, r6
 800a188:	4638      	mov	r0, r7
 800a18a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800a18e:	4997      	ldr	r1, [pc, #604]	; (800a3ec <_tzset_unlocked_r+0x2f4>)
 800a190:	9603      	str	r6, [sp, #12]
 800a192:	f8cd b000 	str.w	fp, [sp]
 800a196:	aa07      	add	r2, sp, #28
 800a198:	f8ad 401e 	strh.w	r4, [sp, #30]
 800a19c:	f8ad 4020 	strh.w	r4, [sp, #32]
 800a1a0:	f000 fcc4 	bl	800ab2c <siscanf>
 800a1a4:	42a0      	cmp	r0, r4
 800a1a6:	ddc1      	ble.n	800a12c <_tzset_unlocked_r+0x34>
 800a1a8:	213c      	movs	r1, #60	; 0x3c
 800a1aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a1ae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a1b2:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800a3f0 <_tzset_unlocked_r+0x2f8>
 800a1b6:	fb01 3302 	mla	r3, r1, r2, r3
 800a1ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a1be:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a1c2:	fb01 3302 	mla	r3, r1, r2, r3
 800a1c6:	fb08 f303 	mul.w	r3, r8, r3
 800a1ca:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800a3e0 <_tzset_unlocked_r+0x2e8>
 800a1ce:	62ab      	str	r3, [r5, #40]	; 0x28
 800a1d0:	4b84      	ldr	r3, [pc, #528]	; (800a3e4 <_tzset_unlocked_r+0x2ec>)
 800a1d2:	464a      	mov	r2, r9
 800a1d4:	f8c8 3000 	str.w	r3, [r8]
 800a1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1da:	4983      	ldr	r1, [pc, #524]	; (800a3e8 <_tzset_unlocked_r+0x2f0>)
 800a1dc:	441f      	add	r7, r3
 800a1de:	4638      	mov	r0, r7
 800a1e0:	4633      	mov	r3, r6
 800a1e2:	f000 fca3 	bl	800ab2c <siscanf>
 800a1e6:	42a0      	cmp	r0, r4
 800a1e8:	dc18      	bgt.n	800a21c <_tzset_unlocked_r+0x124>
 800a1ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a1ee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a1f0:	f8c8 3004 	str.w	r3, [r8, #4]
 800a1f4:	4b77      	ldr	r3, [pc, #476]	; (800a3d4 <_tzset_unlocked_r+0x2dc>)
 800a1f6:	601a      	str	r2, [r3, #0]
 800a1f8:	4b78      	ldr	r3, [pc, #480]	; (800a3dc <_tzset_unlocked_r+0x2e4>)
 800a1fa:	601c      	str	r4, [r3, #0]
 800a1fc:	e796      	b.n	800a12c <_tzset_unlocked_r+0x34>
 800a1fe:	f7f5 ffad 	bl	800015c <strcmp>
 800a202:	2800      	cmp	r0, #0
 800a204:	d198      	bne.n	800a138 <_tzset_unlocked_r+0x40>
 800a206:	e791      	b.n	800a12c <_tzset_unlocked_r+0x34>
 800a208:	4621      	mov	r1, r4
 800a20a:	f000 fcb9 	bl	800ab80 <strcpy>
 800a20e:	e7a0      	b.n	800a152 <_tzset_unlocked_r+0x5a>
 800a210:	2b2b      	cmp	r3, #43	; 0x2b
 800a212:	f04f 0801 	mov.w	r8, #1
 800a216:	bf08      	it	eq
 800a218:	3701      	addeq	r7, #1
 800a21a:	e7af      	b.n	800a17c <_tzset_unlocked_r+0x84>
 800a21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a21e:	f8c8 9004 	str.w	r9, [r8, #4]
 800a222:	18fc      	adds	r4, r7, r3
 800a224:	5cfb      	ldrb	r3, [r7, r3]
 800a226:	2b2d      	cmp	r3, #45	; 0x2d
 800a228:	f040 808c 	bne.w	800a344 <_tzset_unlocked_r+0x24c>
 800a22c:	f04f 37ff 	mov.w	r7, #4294967295
 800a230:	3401      	adds	r4, #1
 800a232:	2300      	movs	r3, #0
 800a234:	4620      	mov	r0, r4
 800a236:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a23a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a23e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a242:	930a      	str	r3, [sp, #40]	; 0x28
 800a244:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a248:	4633      	mov	r3, r6
 800a24a:	e9cd b600 	strd	fp, r6, [sp]
 800a24e:	4967      	ldr	r1, [pc, #412]	; (800a3ec <_tzset_unlocked_r+0x2f4>)
 800a250:	aa07      	add	r2, sp, #28
 800a252:	f000 fc6b 	bl	800ab2c <siscanf>
 800a256:	2800      	cmp	r0, #0
 800a258:	dc7a      	bgt.n	800a350 <_tzset_unlocked_r+0x258>
 800a25a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a25c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800a260:	462f      	mov	r7, r5
 800a262:	f04f 0900 	mov.w	r9, #0
 800a266:	652b      	str	r3, [r5, #80]	; 0x50
 800a268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a26a:	441c      	add	r4, r3
 800a26c:	7823      	ldrb	r3, [r4, #0]
 800a26e:	2b2c      	cmp	r3, #44	; 0x2c
 800a270:	bf08      	it	eq
 800a272:	3401      	addeq	r4, #1
 800a274:	f894 8000 	ldrb.w	r8, [r4]
 800a278:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800a27c:	d17a      	bne.n	800a374 <_tzset_unlocked_r+0x27c>
 800a27e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800a282:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800a286:	ab09      	add	r3, sp, #36	; 0x24
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	4620      	mov	r0, r4
 800a28c:	4633      	mov	r3, r6
 800a28e:	4959      	ldr	r1, [pc, #356]	; (800a3f4 <_tzset_unlocked_r+0x2fc>)
 800a290:	9603      	str	r6, [sp, #12]
 800a292:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800a296:	f000 fc49 	bl	800ab2c <siscanf>
 800a29a:	2803      	cmp	r0, #3
 800a29c:	f47f af46 	bne.w	800a12c <_tzset_unlocked_r+0x34>
 800a2a0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800a2a4:	1e4b      	subs	r3, r1, #1
 800a2a6:	2b0b      	cmp	r3, #11
 800a2a8:	f63f af40 	bhi.w	800a12c <_tzset_unlocked_r+0x34>
 800a2ac:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800a2b0:	1e53      	subs	r3, r2, #1
 800a2b2:	2b04      	cmp	r3, #4
 800a2b4:	f63f af3a 	bhi.w	800a12c <_tzset_unlocked_r+0x34>
 800a2b8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a2bc:	2b06      	cmp	r3, #6
 800a2be:	f63f af35 	bhi.w	800a12c <_tzset_unlocked_r+0x34>
 800a2c2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800a2c6:	f887 8008 	strb.w	r8, [r7, #8]
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ce:	eb04 0803 	add.w	r8, r4, r3
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a2de:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a2e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a2e4:	f898 3000 	ldrb.w	r3, [r8]
 800a2e8:	2b2f      	cmp	r3, #47	; 0x2f
 800a2ea:	d109      	bne.n	800a300 <_tzset_unlocked_r+0x208>
 800a2ec:	4633      	mov	r3, r6
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a2f4:	e9cd b600 	strd	fp, r6, [sp]
 800a2f8:	493f      	ldr	r1, [pc, #252]	; (800a3f8 <_tzset_unlocked_r+0x300>)
 800a2fa:	aa07      	add	r2, sp, #28
 800a2fc:	f000 fc16 	bl	800ab2c <siscanf>
 800a300:	213c      	movs	r1, #60	; 0x3c
 800a302:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a306:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a30a:	3728      	adds	r7, #40	; 0x28
 800a30c:	fb01 3302 	mla	r3, r1, r2, r3
 800a310:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a314:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a318:	fb01 3302 	mla	r3, r1, r2, r3
 800a31c:	f847 3c10 	str.w	r3, [r7, #-16]
 800a320:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a322:	4444      	add	r4, r8
 800a324:	f1b9 0f00 	cmp.w	r9, #0
 800a328:	d021      	beq.n	800a36e <_tzset_unlocked_r+0x276>
 800a32a:	6868      	ldr	r0, [r5, #4]
 800a32c:	f000 fc44 	bl	800abb8 <__tzcalc_limits>
 800a330:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a332:	4b28      	ldr	r3, [pc, #160]	; (800a3d4 <_tzset_unlocked_r+0x2dc>)
 800a334:	601a      	str	r2, [r3, #0]
 800a336:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a338:	1a9b      	subs	r3, r3, r2
 800a33a:	bf18      	it	ne
 800a33c:	2301      	movne	r3, #1
 800a33e:	4a27      	ldr	r2, [pc, #156]	; (800a3dc <_tzset_unlocked_r+0x2e4>)
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	e6f3      	b.n	800a12c <_tzset_unlocked_r+0x34>
 800a344:	2b2b      	cmp	r3, #43	; 0x2b
 800a346:	f04f 0701 	mov.w	r7, #1
 800a34a:	bf08      	it	eq
 800a34c:	3401      	addeq	r4, #1
 800a34e:	e770      	b.n	800a232 <_tzset_unlocked_r+0x13a>
 800a350:	213c      	movs	r1, #60	; 0x3c
 800a352:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a356:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a35a:	fb01 3302 	mla	r3, r1, r2, r3
 800a35e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a362:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a366:	fb01 3302 	mla	r3, r1, r2, r3
 800a36a:	437b      	muls	r3, r7
 800a36c:	e778      	b.n	800a260 <_tzset_unlocked_r+0x168>
 800a36e:	f04f 0901 	mov.w	r9, #1
 800a372:	e77b      	b.n	800a26c <_tzset_unlocked_r+0x174>
 800a374:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a378:	bf0a      	itet	eq
 800a37a:	4643      	moveq	r3, r8
 800a37c:	2344      	movne	r3, #68	; 0x44
 800a37e:	3401      	addeq	r4, #1
 800a380:	220a      	movs	r2, #10
 800a382:	4620      	mov	r0, r4
 800a384:	a90b      	add	r1, sp, #44	; 0x2c
 800a386:	9305      	str	r3, [sp, #20]
 800a388:	f7ff fe9a 	bl	800a0c0 <strtoul>
 800a38c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a390:	9b05      	ldr	r3, [sp, #20]
 800a392:	45a0      	cmp	r8, r4
 800a394:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a398:	d114      	bne.n	800a3c4 <_tzset_unlocked_r+0x2cc>
 800a39a:	234d      	movs	r3, #77	; 0x4d
 800a39c:	f1b9 0f00 	cmp.w	r9, #0
 800a3a0:	d107      	bne.n	800a3b2 <_tzset_unlocked_r+0x2ba>
 800a3a2:	2103      	movs	r1, #3
 800a3a4:	722b      	strb	r3, [r5, #8]
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	f8c5 9014 	str.w	r9, [r5, #20]
 800a3ac:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a3b0:	e78f      	b.n	800a2d2 <_tzset_unlocked_r+0x1da>
 800a3b2:	220b      	movs	r2, #11
 800a3b4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a3be:	2300      	movs	r3, #0
 800a3c0:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a3c2:	e786      	b.n	800a2d2 <_tzset_unlocked_r+0x1da>
 800a3c4:	b280      	uxth	r0, r0
 800a3c6:	723b      	strb	r3, [r7, #8]
 800a3c8:	6178      	str	r0, [r7, #20]
 800a3ca:	e782      	b.n	800a2d2 <_tzset_unlocked_r+0x1da>
 800a3cc:	0800bcf8 	.word	0x0800bcf8
 800a3d0:	200006a0 	.word	0x200006a0
 800a3d4:	200006a8 	.word	0x200006a8
 800a3d8:	0800bcfb 	.word	0x0800bcfb
 800a3dc:	200006a4 	.word	0x200006a4
 800a3e0:	20000144 	.word	0x20000144
 800a3e4:	20000693 	.word	0x20000693
 800a3e8:	0800bcff 	.word	0x0800bcff
 800a3ec:	0800bd22 	.word	0x0800bd22
 800a3f0:	20000688 	.word	0x20000688
 800a3f4:	0800bd0e 	.word	0x0800bd0e
 800a3f8:	0800bd21 	.word	0x0800bd21

0800a3fc <abs>:
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	bfb8      	it	lt
 800a400:	4240      	neglt	r0, r0
 800a402:	4770      	bx	lr

0800a404 <_findenv_r>:
 800a404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a408:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800a478 <_findenv_r+0x74>
 800a40c:	4607      	mov	r7, r0
 800a40e:	4689      	mov	r9, r1
 800a410:	4616      	mov	r6, r2
 800a412:	f000 fc7b 	bl	800ad0c <__env_lock>
 800a416:	f8da 4000 	ldr.w	r4, [sl]
 800a41a:	b134      	cbz	r4, 800a42a <_findenv_r+0x26>
 800a41c:	464b      	mov	r3, r9
 800a41e:	4698      	mov	r8, r3
 800a420:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a424:	b13a      	cbz	r2, 800a436 <_findenv_r+0x32>
 800a426:	2a3d      	cmp	r2, #61	; 0x3d
 800a428:	d1f9      	bne.n	800a41e <_findenv_r+0x1a>
 800a42a:	4638      	mov	r0, r7
 800a42c:	f000 fc74 	bl	800ad18 <__env_unlock>
 800a430:	2000      	movs	r0, #0
 800a432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a436:	eba8 0809 	sub.w	r8, r8, r9
 800a43a:	46a3      	mov	fp, r4
 800a43c:	f854 0b04 	ldr.w	r0, [r4], #4
 800a440:	2800      	cmp	r0, #0
 800a442:	d0f2      	beq.n	800a42a <_findenv_r+0x26>
 800a444:	4642      	mov	r2, r8
 800a446:	4649      	mov	r1, r9
 800a448:	f000 fba2 	bl	800ab90 <strncmp>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d1f4      	bne.n	800a43a <_findenv_r+0x36>
 800a450:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a454:	eb03 0508 	add.w	r5, r3, r8
 800a458:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a45c:	2b3d      	cmp	r3, #61	; 0x3d
 800a45e:	d1ec      	bne.n	800a43a <_findenv_r+0x36>
 800a460:	f8da 3000 	ldr.w	r3, [sl]
 800a464:	4638      	mov	r0, r7
 800a466:	ebab 0303 	sub.w	r3, fp, r3
 800a46a:	109b      	asrs	r3, r3, #2
 800a46c:	6033      	str	r3, [r6, #0]
 800a46e:	f000 fc53 	bl	800ad18 <__env_unlock>
 800a472:	1c68      	adds	r0, r5, #1
 800a474:	e7dd      	b.n	800a432 <_findenv_r+0x2e>
 800a476:	bf00      	nop
 800a478:	200000bc 	.word	0x200000bc

0800a47c <_getenv_r>:
 800a47c:	b507      	push	{r0, r1, r2, lr}
 800a47e:	aa01      	add	r2, sp, #4
 800a480:	f7ff ffc0 	bl	800a404 <_findenv_r>
 800a484:	b003      	add	sp, #12
 800a486:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a48c <__gettzinfo>:
 800a48c:	4800      	ldr	r0, [pc, #0]	; (800a490 <__gettzinfo+0x4>)
 800a48e:	4770      	bx	lr
 800a490:	20000150 	.word	0x20000150

0800a494 <labs>:
 800a494:	2800      	cmp	r0, #0
 800a496:	bfb8      	it	lt
 800a498:	4240      	neglt	r0, r0
 800a49a:	4770      	bx	lr

0800a49c <free>:
 800a49c:	4b02      	ldr	r3, [pc, #8]	; (800a4a8 <free+0xc>)
 800a49e:	4601      	mov	r1, r0
 800a4a0:	6818      	ldr	r0, [r3, #0]
 800a4a2:	f7fe becd 	b.w	8009240 <_free_r>
 800a4a6:	bf00      	nop
 800a4a8:	200000e0 	.word	0x200000e0

0800a4ac <memcpy>:
 800a4ac:	440a      	add	r2, r1
 800a4ae:	4291      	cmp	r1, r2
 800a4b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4b4:	d100      	bne.n	800a4b8 <memcpy+0xc>
 800a4b6:	4770      	bx	lr
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4be:	4291      	cmp	r1, r2
 800a4c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4c4:	d1f9      	bne.n	800a4ba <memcpy+0xe>
 800a4c6:	bd10      	pop	{r4, pc}

0800a4c8 <__malloc_lock>:
 800a4c8:	4801      	ldr	r0, [pc, #4]	; (800a4d0 <__malloc_lock+0x8>)
 800a4ca:	f7fe beae 	b.w	800922a <__retarget_lock_acquire_recursive>
 800a4ce:	bf00      	nop
 800a4d0:	20000679 	.word	0x20000679

0800a4d4 <__malloc_unlock>:
 800a4d4:	4801      	ldr	r0, [pc, #4]	; (800a4dc <__malloc_unlock+0x8>)
 800a4d6:	f7fe beaa 	b.w	800922e <__retarget_lock_release_recursive>
 800a4da:	bf00      	nop
 800a4dc:	20000679 	.word	0x20000679

0800a4e0 <__ssputs_r>:
 800a4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e4:	688e      	ldr	r6, [r1, #8]
 800a4e6:	4682      	mov	sl, r0
 800a4e8:	429e      	cmp	r6, r3
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	4690      	mov	r8, r2
 800a4ee:	461f      	mov	r7, r3
 800a4f0:	d838      	bhi.n	800a564 <__ssputs_r+0x84>
 800a4f2:	898a      	ldrh	r2, [r1, #12]
 800a4f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4f8:	d032      	beq.n	800a560 <__ssputs_r+0x80>
 800a4fa:	6825      	ldr	r5, [r4, #0]
 800a4fc:	6909      	ldr	r1, [r1, #16]
 800a4fe:	3301      	adds	r3, #1
 800a500:	eba5 0901 	sub.w	r9, r5, r1
 800a504:	6965      	ldr	r5, [r4, #20]
 800a506:	444b      	add	r3, r9
 800a508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a50c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a510:	106d      	asrs	r5, r5, #1
 800a512:	429d      	cmp	r5, r3
 800a514:	bf38      	it	cc
 800a516:	461d      	movcc	r5, r3
 800a518:	0553      	lsls	r3, r2, #21
 800a51a:	d531      	bpl.n	800a580 <__ssputs_r+0xa0>
 800a51c:	4629      	mov	r1, r5
 800a51e:	f7fe fef7 	bl	8009310 <_malloc_r>
 800a522:	4606      	mov	r6, r0
 800a524:	b950      	cbnz	r0, 800a53c <__ssputs_r+0x5c>
 800a526:	230c      	movs	r3, #12
 800a528:	f04f 30ff 	mov.w	r0, #4294967295
 800a52c:	f8ca 3000 	str.w	r3, [sl]
 800a530:	89a3      	ldrh	r3, [r4, #12]
 800a532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a536:	81a3      	strh	r3, [r4, #12]
 800a538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53c:	464a      	mov	r2, r9
 800a53e:	6921      	ldr	r1, [r4, #16]
 800a540:	f7ff ffb4 	bl	800a4ac <memcpy>
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a54a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a54e:	81a3      	strh	r3, [r4, #12]
 800a550:	6126      	str	r6, [r4, #16]
 800a552:	444e      	add	r6, r9
 800a554:	6026      	str	r6, [r4, #0]
 800a556:	463e      	mov	r6, r7
 800a558:	6165      	str	r5, [r4, #20]
 800a55a:	eba5 0509 	sub.w	r5, r5, r9
 800a55e:	60a5      	str	r5, [r4, #8]
 800a560:	42be      	cmp	r6, r7
 800a562:	d900      	bls.n	800a566 <__ssputs_r+0x86>
 800a564:	463e      	mov	r6, r7
 800a566:	4632      	mov	r2, r6
 800a568:	4641      	mov	r1, r8
 800a56a:	6820      	ldr	r0, [r4, #0]
 800a56c:	f000 fbe8 	bl	800ad40 <memmove>
 800a570:	68a3      	ldr	r3, [r4, #8]
 800a572:	2000      	movs	r0, #0
 800a574:	1b9b      	subs	r3, r3, r6
 800a576:	60a3      	str	r3, [r4, #8]
 800a578:	6823      	ldr	r3, [r4, #0]
 800a57a:	4433      	add	r3, r6
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	e7db      	b.n	800a538 <__ssputs_r+0x58>
 800a580:	462a      	mov	r2, r5
 800a582:	f000 fbf7 	bl	800ad74 <_realloc_r>
 800a586:	4606      	mov	r6, r0
 800a588:	2800      	cmp	r0, #0
 800a58a:	d1e1      	bne.n	800a550 <__ssputs_r+0x70>
 800a58c:	4650      	mov	r0, sl
 800a58e:	6921      	ldr	r1, [r4, #16]
 800a590:	f7fe fe56 	bl	8009240 <_free_r>
 800a594:	e7c7      	b.n	800a526 <__ssputs_r+0x46>
	...

0800a598 <_svfiprintf_r>:
 800a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	4698      	mov	r8, r3
 800a59e:	898b      	ldrh	r3, [r1, #12]
 800a5a0:	4607      	mov	r7, r0
 800a5a2:	061b      	lsls	r3, r3, #24
 800a5a4:	460d      	mov	r5, r1
 800a5a6:	4614      	mov	r4, r2
 800a5a8:	b09d      	sub	sp, #116	; 0x74
 800a5aa:	d50e      	bpl.n	800a5ca <_svfiprintf_r+0x32>
 800a5ac:	690b      	ldr	r3, [r1, #16]
 800a5ae:	b963      	cbnz	r3, 800a5ca <_svfiprintf_r+0x32>
 800a5b0:	2140      	movs	r1, #64	; 0x40
 800a5b2:	f7fe fead 	bl	8009310 <_malloc_r>
 800a5b6:	6028      	str	r0, [r5, #0]
 800a5b8:	6128      	str	r0, [r5, #16]
 800a5ba:	b920      	cbnz	r0, 800a5c6 <_svfiprintf_r+0x2e>
 800a5bc:	230c      	movs	r3, #12
 800a5be:	603b      	str	r3, [r7, #0]
 800a5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c4:	e0d1      	b.n	800a76a <_svfiprintf_r+0x1d2>
 800a5c6:	2340      	movs	r3, #64	; 0x40
 800a5c8:	616b      	str	r3, [r5, #20]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ce:	2320      	movs	r3, #32
 800a5d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5d4:	2330      	movs	r3, #48	; 0x30
 800a5d6:	f04f 0901 	mov.w	r9, #1
 800a5da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a784 <_svfiprintf_r+0x1ec>
 800a5e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5e6:	4623      	mov	r3, r4
 800a5e8:	469a      	mov	sl, r3
 800a5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5ee:	b10a      	cbz	r2, 800a5f4 <_svfiprintf_r+0x5c>
 800a5f0:	2a25      	cmp	r2, #37	; 0x25
 800a5f2:	d1f9      	bne.n	800a5e8 <_svfiprintf_r+0x50>
 800a5f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a5f8:	d00b      	beq.n	800a612 <_svfiprintf_r+0x7a>
 800a5fa:	465b      	mov	r3, fp
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	4629      	mov	r1, r5
 800a600:	4638      	mov	r0, r7
 800a602:	f7ff ff6d 	bl	800a4e0 <__ssputs_r>
 800a606:	3001      	adds	r0, #1
 800a608:	f000 80aa 	beq.w	800a760 <_svfiprintf_r+0x1c8>
 800a60c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a60e:	445a      	add	r2, fp
 800a610:	9209      	str	r2, [sp, #36]	; 0x24
 800a612:	f89a 3000 	ldrb.w	r3, [sl]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 80a2 	beq.w	800a760 <_svfiprintf_r+0x1c8>
 800a61c:	2300      	movs	r3, #0
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295
 800a622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a626:	f10a 0a01 	add.w	sl, sl, #1
 800a62a:	9304      	str	r3, [sp, #16]
 800a62c:	9307      	str	r3, [sp, #28]
 800a62e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a632:	931a      	str	r3, [sp, #104]	; 0x68
 800a634:	4654      	mov	r4, sl
 800a636:	2205      	movs	r2, #5
 800a638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a63c:	4851      	ldr	r0, [pc, #324]	; (800a784 <_svfiprintf_r+0x1ec>)
 800a63e:	f000 fb71 	bl	800ad24 <memchr>
 800a642:	9a04      	ldr	r2, [sp, #16]
 800a644:	b9d8      	cbnz	r0, 800a67e <_svfiprintf_r+0xe6>
 800a646:	06d0      	lsls	r0, r2, #27
 800a648:	bf44      	itt	mi
 800a64a:	2320      	movmi	r3, #32
 800a64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a650:	0711      	lsls	r1, r2, #28
 800a652:	bf44      	itt	mi
 800a654:	232b      	movmi	r3, #43	; 0x2b
 800a656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a65a:	f89a 3000 	ldrb.w	r3, [sl]
 800a65e:	2b2a      	cmp	r3, #42	; 0x2a
 800a660:	d015      	beq.n	800a68e <_svfiprintf_r+0xf6>
 800a662:	4654      	mov	r4, sl
 800a664:	2000      	movs	r0, #0
 800a666:	f04f 0c0a 	mov.w	ip, #10
 800a66a:	9a07      	ldr	r2, [sp, #28]
 800a66c:	4621      	mov	r1, r4
 800a66e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a672:	3b30      	subs	r3, #48	; 0x30
 800a674:	2b09      	cmp	r3, #9
 800a676:	d94e      	bls.n	800a716 <_svfiprintf_r+0x17e>
 800a678:	b1b0      	cbz	r0, 800a6a8 <_svfiprintf_r+0x110>
 800a67a:	9207      	str	r2, [sp, #28]
 800a67c:	e014      	b.n	800a6a8 <_svfiprintf_r+0x110>
 800a67e:	eba0 0308 	sub.w	r3, r0, r8
 800a682:	fa09 f303 	lsl.w	r3, r9, r3
 800a686:	4313      	orrs	r3, r2
 800a688:	46a2      	mov	sl, r4
 800a68a:	9304      	str	r3, [sp, #16]
 800a68c:	e7d2      	b.n	800a634 <_svfiprintf_r+0x9c>
 800a68e:	9b03      	ldr	r3, [sp, #12]
 800a690:	1d19      	adds	r1, r3, #4
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	9103      	str	r1, [sp, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	bfbb      	ittet	lt
 800a69a:	425b      	neglt	r3, r3
 800a69c:	f042 0202 	orrlt.w	r2, r2, #2
 800a6a0:	9307      	strge	r3, [sp, #28]
 800a6a2:	9307      	strlt	r3, [sp, #28]
 800a6a4:	bfb8      	it	lt
 800a6a6:	9204      	strlt	r2, [sp, #16]
 800a6a8:	7823      	ldrb	r3, [r4, #0]
 800a6aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a6ac:	d10c      	bne.n	800a6c8 <_svfiprintf_r+0x130>
 800a6ae:	7863      	ldrb	r3, [r4, #1]
 800a6b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6b2:	d135      	bne.n	800a720 <_svfiprintf_r+0x188>
 800a6b4:	9b03      	ldr	r3, [sp, #12]
 800a6b6:	3402      	adds	r4, #2
 800a6b8:	1d1a      	adds	r2, r3, #4
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	9203      	str	r2, [sp, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	bfb8      	it	lt
 800a6c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6c6:	9305      	str	r3, [sp, #20]
 800a6c8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a788 <_svfiprintf_r+0x1f0>
 800a6cc:	2203      	movs	r2, #3
 800a6ce:	4650      	mov	r0, sl
 800a6d0:	7821      	ldrb	r1, [r4, #0]
 800a6d2:	f000 fb27 	bl	800ad24 <memchr>
 800a6d6:	b140      	cbz	r0, 800a6ea <_svfiprintf_r+0x152>
 800a6d8:	2340      	movs	r3, #64	; 0x40
 800a6da:	eba0 000a 	sub.w	r0, r0, sl
 800a6de:	fa03 f000 	lsl.w	r0, r3, r0
 800a6e2:	9b04      	ldr	r3, [sp, #16]
 800a6e4:	3401      	adds	r4, #1
 800a6e6:	4303      	orrs	r3, r0
 800a6e8:	9304      	str	r3, [sp, #16]
 800a6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ee:	2206      	movs	r2, #6
 800a6f0:	4826      	ldr	r0, [pc, #152]	; (800a78c <_svfiprintf_r+0x1f4>)
 800a6f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6f6:	f000 fb15 	bl	800ad24 <memchr>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	d038      	beq.n	800a770 <_svfiprintf_r+0x1d8>
 800a6fe:	4b24      	ldr	r3, [pc, #144]	; (800a790 <_svfiprintf_r+0x1f8>)
 800a700:	bb1b      	cbnz	r3, 800a74a <_svfiprintf_r+0x1b2>
 800a702:	9b03      	ldr	r3, [sp, #12]
 800a704:	3307      	adds	r3, #7
 800a706:	f023 0307 	bic.w	r3, r3, #7
 800a70a:	3308      	adds	r3, #8
 800a70c:	9303      	str	r3, [sp, #12]
 800a70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a710:	4433      	add	r3, r6
 800a712:	9309      	str	r3, [sp, #36]	; 0x24
 800a714:	e767      	b.n	800a5e6 <_svfiprintf_r+0x4e>
 800a716:	460c      	mov	r4, r1
 800a718:	2001      	movs	r0, #1
 800a71a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a71e:	e7a5      	b.n	800a66c <_svfiprintf_r+0xd4>
 800a720:	2300      	movs	r3, #0
 800a722:	f04f 0c0a 	mov.w	ip, #10
 800a726:	4619      	mov	r1, r3
 800a728:	3401      	adds	r4, #1
 800a72a:	9305      	str	r3, [sp, #20]
 800a72c:	4620      	mov	r0, r4
 800a72e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a732:	3a30      	subs	r2, #48	; 0x30
 800a734:	2a09      	cmp	r2, #9
 800a736:	d903      	bls.n	800a740 <_svfiprintf_r+0x1a8>
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d0c5      	beq.n	800a6c8 <_svfiprintf_r+0x130>
 800a73c:	9105      	str	r1, [sp, #20]
 800a73e:	e7c3      	b.n	800a6c8 <_svfiprintf_r+0x130>
 800a740:	4604      	mov	r4, r0
 800a742:	2301      	movs	r3, #1
 800a744:	fb0c 2101 	mla	r1, ip, r1, r2
 800a748:	e7f0      	b.n	800a72c <_svfiprintf_r+0x194>
 800a74a:	ab03      	add	r3, sp, #12
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	462a      	mov	r2, r5
 800a750:	4638      	mov	r0, r7
 800a752:	4b10      	ldr	r3, [pc, #64]	; (800a794 <_svfiprintf_r+0x1fc>)
 800a754:	a904      	add	r1, sp, #16
 800a756:	f3af 8000 	nop.w
 800a75a:	1c42      	adds	r2, r0, #1
 800a75c:	4606      	mov	r6, r0
 800a75e:	d1d6      	bne.n	800a70e <_svfiprintf_r+0x176>
 800a760:	89ab      	ldrh	r3, [r5, #12]
 800a762:	065b      	lsls	r3, r3, #25
 800a764:	f53f af2c 	bmi.w	800a5c0 <_svfiprintf_r+0x28>
 800a768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a76a:	b01d      	add	sp, #116	; 0x74
 800a76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a770:	ab03      	add	r3, sp, #12
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	462a      	mov	r2, r5
 800a776:	4638      	mov	r0, r7
 800a778:	4b06      	ldr	r3, [pc, #24]	; (800a794 <_svfiprintf_r+0x1fc>)
 800a77a:	a904      	add	r1, sp, #16
 800a77c:	f000 f87c 	bl	800a878 <_printf_i>
 800a780:	e7eb      	b.n	800a75a <_svfiprintf_r+0x1c2>
 800a782:	bf00      	nop
 800a784:	0800be35 	.word	0x0800be35
 800a788:	0800be3b 	.word	0x0800be3b
 800a78c:	0800be3f 	.word	0x0800be3f
 800a790:	00000000 	.word	0x00000000
 800a794:	0800a4e1 	.word	0x0800a4e1

0800a798 <_printf_common>:
 800a798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a79c:	4616      	mov	r6, r2
 800a79e:	4699      	mov	r9, r3
 800a7a0:	688a      	ldr	r2, [r1, #8]
 800a7a2:	690b      	ldr	r3, [r1, #16]
 800a7a4:	4607      	mov	r7, r0
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	bfb8      	it	lt
 800a7aa:	4613      	movlt	r3, r2
 800a7ac:	6033      	str	r3, [r6, #0]
 800a7ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7b8:	b10a      	cbz	r2, 800a7be <_printf_common+0x26>
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	6033      	str	r3, [r6, #0]
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	0699      	lsls	r1, r3, #26
 800a7c2:	bf42      	ittt	mi
 800a7c4:	6833      	ldrmi	r3, [r6, #0]
 800a7c6:	3302      	addmi	r3, #2
 800a7c8:	6033      	strmi	r3, [r6, #0]
 800a7ca:	6825      	ldr	r5, [r4, #0]
 800a7cc:	f015 0506 	ands.w	r5, r5, #6
 800a7d0:	d106      	bne.n	800a7e0 <_printf_common+0x48>
 800a7d2:	f104 0a19 	add.w	sl, r4, #25
 800a7d6:	68e3      	ldr	r3, [r4, #12]
 800a7d8:	6832      	ldr	r2, [r6, #0]
 800a7da:	1a9b      	subs	r3, r3, r2
 800a7dc:	42ab      	cmp	r3, r5
 800a7de:	dc28      	bgt.n	800a832 <_printf_common+0x9a>
 800a7e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7e4:	1e13      	subs	r3, r2, #0
 800a7e6:	6822      	ldr	r2, [r4, #0]
 800a7e8:	bf18      	it	ne
 800a7ea:	2301      	movne	r3, #1
 800a7ec:	0692      	lsls	r2, r2, #26
 800a7ee:	d42d      	bmi.n	800a84c <_printf_common+0xb4>
 800a7f0:	4649      	mov	r1, r9
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7f8:	47c0      	blx	r8
 800a7fa:	3001      	adds	r0, #1
 800a7fc:	d020      	beq.n	800a840 <_printf_common+0xa8>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	68e5      	ldr	r5, [r4, #12]
 800a802:	f003 0306 	and.w	r3, r3, #6
 800a806:	2b04      	cmp	r3, #4
 800a808:	bf18      	it	ne
 800a80a:	2500      	movne	r5, #0
 800a80c:	6832      	ldr	r2, [r6, #0]
 800a80e:	f04f 0600 	mov.w	r6, #0
 800a812:	68a3      	ldr	r3, [r4, #8]
 800a814:	bf08      	it	eq
 800a816:	1aad      	subeq	r5, r5, r2
 800a818:	6922      	ldr	r2, [r4, #16]
 800a81a:	bf08      	it	eq
 800a81c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a820:	4293      	cmp	r3, r2
 800a822:	bfc4      	itt	gt
 800a824:	1a9b      	subgt	r3, r3, r2
 800a826:	18ed      	addgt	r5, r5, r3
 800a828:	341a      	adds	r4, #26
 800a82a:	42b5      	cmp	r5, r6
 800a82c:	d11a      	bne.n	800a864 <_printf_common+0xcc>
 800a82e:	2000      	movs	r0, #0
 800a830:	e008      	b.n	800a844 <_printf_common+0xac>
 800a832:	2301      	movs	r3, #1
 800a834:	4652      	mov	r2, sl
 800a836:	4649      	mov	r1, r9
 800a838:	4638      	mov	r0, r7
 800a83a:	47c0      	blx	r8
 800a83c:	3001      	adds	r0, #1
 800a83e:	d103      	bne.n	800a848 <_printf_common+0xb0>
 800a840:	f04f 30ff 	mov.w	r0, #4294967295
 800a844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a848:	3501      	adds	r5, #1
 800a84a:	e7c4      	b.n	800a7d6 <_printf_common+0x3e>
 800a84c:	2030      	movs	r0, #48	; 0x30
 800a84e:	18e1      	adds	r1, r4, r3
 800a850:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a854:	1c5a      	adds	r2, r3, #1
 800a856:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a85a:	4422      	add	r2, r4
 800a85c:	3302      	adds	r3, #2
 800a85e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a862:	e7c5      	b.n	800a7f0 <_printf_common+0x58>
 800a864:	2301      	movs	r3, #1
 800a866:	4622      	mov	r2, r4
 800a868:	4649      	mov	r1, r9
 800a86a:	4638      	mov	r0, r7
 800a86c:	47c0      	blx	r8
 800a86e:	3001      	adds	r0, #1
 800a870:	d0e6      	beq.n	800a840 <_printf_common+0xa8>
 800a872:	3601      	adds	r6, #1
 800a874:	e7d9      	b.n	800a82a <_printf_common+0x92>
	...

0800a878 <_printf_i>:
 800a878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a87c:	7e0f      	ldrb	r7, [r1, #24]
 800a87e:	4691      	mov	r9, r2
 800a880:	2f78      	cmp	r7, #120	; 0x78
 800a882:	4680      	mov	r8, r0
 800a884:	460c      	mov	r4, r1
 800a886:	469a      	mov	sl, r3
 800a888:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a88a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a88e:	d807      	bhi.n	800a8a0 <_printf_i+0x28>
 800a890:	2f62      	cmp	r7, #98	; 0x62
 800a892:	d80a      	bhi.n	800a8aa <_printf_i+0x32>
 800a894:	2f00      	cmp	r7, #0
 800a896:	f000 80d9 	beq.w	800aa4c <_printf_i+0x1d4>
 800a89a:	2f58      	cmp	r7, #88	; 0x58
 800a89c:	f000 80a4 	beq.w	800a9e8 <_printf_i+0x170>
 800a8a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8a8:	e03a      	b.n	800a920 <_printf_i+0xa8>
 800a8aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8ae:	2b15      	cmp	r3, #21
 800a8b0:	d8f6      	bhi.n	800a8a0 <_printf_i+0x28>
 800a8b2:	a101      	add	r1, pc, #4	; (adr r1, 800a8b8 <_printf_i+0x40>)
 800a8b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8b8:	0800a911 	.word	0x0800a911
 800a8bc:	0800a925 	.word	0x0800a925
 800a8c0:	0800a8a1 	.word	0x0800a8a1
 800a8c4:	0800a8a1 	.word	0x0800a8a1
 800a8c8:	0800a8a1 	.word	0x0800a8a1
 800a8cc:	0800a8a1 	.word	0x0800a8a1
 800a8d0:	0800a925 	.word	0x0800a925
 800a8d4:	0800a8a1 	.word	0x0800a8a1
 800a8d8:	0800a8a1 	.word	0x0800a8a1
 800a8dc:	0800a8a1 	.word	0x0800a8a1
 800a8e0:	0800a8a1 	.word	0x0800a8a1
 800a8e4:	0800aa33 	.word	0x0800aa33
 800a8e8:	0800a955 	.word	0x0800a955
 800a8ec:	0800aa15 	.word	0x0800aa15
 800a8f0:	0800a8a1 	.word	0x0800a8a1
 800a8f4:	0800a8a1 	.word	0x0800a8a1
 800a8f8:	0800aa55 	.word	0x0800aa55
 800a8fc:	0800a8a1 	.word	0x0800a8a1
 800a900:	0800a955 	.word	0x0800a955
 800a904:	0800a8a1 	.word	0x0800a8a1
 800a908:	0800a8a1 	.word	0x0800a8a1
 800a90c:	0800aa1d 	.word	0x0800aa1d
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	1d1a      	adds	r2, r3, #4
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	602a      	str	r2, [r5, #0]
 800a918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a91c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a920:	2301      	movs	r3, #1
 800a922:	e0a4      	b.n	800aa6e <_printf_i+0x1f6>
 800a924:	6820      	ldr	r0, [r4, #0]
 800a926:	6829      	ldr	r1, [r5, #0]
 800a928:	0606      	lsls	r6, r0, #24
 800a92a:	f101 0304 	add.w	r3, r1, #4
 800a92e:	d50a      	bpl.n	800a946 <_printf_i+0xce>
 800a930:	680e      	ldr	r6, [r1, #0]
 800a932:	602b      	str	r3, [r5, #0]
 800a934:	2e00      	cmp	r6, #0
 800a936:	da03      	bge.n	800a940 <_printf_i+0xc8>
 800a938:	232d      	movs	r3, #45	; 0x2d
 800a93a:	4276      	negs	r6, r6
 800a93c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a940:	230a      	movs	r3, #10
 800a942:	485e      	ldr	r0, [pc, #376]	; (800aabc <_printf_i+0x244>)
 800a944:	e019      	b.n	800a97a <_printf_i+0x102>
 800a946:	680e      	ldr	r6, [r1, #0]
 800a948:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a94c:	602b      	str	r3, [r5, #0]
 800a94e:	bf18      	it	ne
 800a950:	b236      	sxthne	r6, r6
 800a952:	e7ef      	b.n	800a934 <_printf_i+0xbc>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	6820      	ldr	r0, [r4, #0]
 800a958:	1d19      	adds	r1, r3, #4
 800a95a:	6029      	str	r1, [r5, #0]
 800a95c:	0601      	lsls	r1, r0, #24
 800a95e:	d501      	bpl.n	800a964 <_printf_i+0xec>
 800a960:	681e      	ldr	r6, [r3, #0]
 800a962:	e002      	b.n	800a96a <_printf_i+0xf2>
 800a964:	0646      	lsls	r6, r0, #25
 800a966:	d5fb      	bpl.n	800a960 <_printf_i+0xe8>
 800a968:	881e      	ldrh	r6, [r3, #0]
 800a96a:	2f6f      	cmp	r7, #111	; 0x6f
 800a96c:	bf0c      	ite	eq
 800a96e:	2308      	moveq	r3, #8
 800a970:	230a      	movne	r3, #10
 800a972:	4852      	ldr	r0, [pc, #328]	; (800aabc <_printf_i+0x244>)
 800a974:	2100      	movs	r1, #0
 800a976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a97a:	6865      	ldr	r5, [r4, #4]
 800a97c:	2d00      	cmp	r5, #0
 800a97e:	bfa8      	it	ge
 800a980:	6821      	ldrge	r1, [r4, #0]
 800a982:	60a5      	str	r5, [r4, #8]
 800a984:	bfa4      	itt	ge
 800a986:	f021 0104 	bicge.w	r1, r1, #4
 800a98a:	6021      	strge	r1, [r4, #0]
 800a98c:	b90e      	cbnz	r6, 800a992 <_printf_i+0x11a>
 800a98e:	2d00      	cmp	r5, #0
 800a990:	d04d      	beq.n	800aa2e <_printf_i+0x1b6>
 800a992:	4615      	mov	r5, r2
 800a994:	fbb6 f1f3 	udiv	r1, r6, r3
 800a998:	fb03 6711 	mls	r7, r3, r1, r6
 800a99c:	5dc7      	ldrb	r7, [r0, r7]
 800a99e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9a2:	4637      	mov	r7, r6
 800a9a4:	42bb      	cmp	r3, r7
 800a9a6:	460e      	mov	r6, r1
 800a9a8:	d9f4      	bls.n	800a994 <_printf_i+0x11c>
 800a9aa:	2b08      	cmp	r3, #8
 800a9ac:	d10b      	bne.n	800a9c6 <_printf_i+0x14e>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	07de      	lsls	r6, r3, #31
 800a9b2:	d508      	bpl.n	800a9c6 <_printf_i+0x14e>
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	6861      	ldr	r1, [r4, #4]
 800a9b8:	4299      	cmp	r1, r3
 800a9ba:	bfde      	ittt	le
 800a9bc:	2330      	movle	r3, #48	; 0x30
 800a9be:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9c6:	1b52      	subs	r2, r2, r5
 800a9c8:	6122      	str	r2, [r4, #16]
 800a9ca:	464b      	mov	r3, r9
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	f8cd a000 	str.w	sl, [sp]
 800a9d4:	aa03      	add	r2, sp, #12
 800a9d6:	f7ff fedf 	bl	800a798 <_printf_common>
 800a9da:	3001      	adds	r0, #1
 800a9dc:	d14c      	bne.n	800aa78 <_printf_i+0x200>
 800a9de:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e2:	b004      	add	sp, #16
 800a9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e8:	4834      	ldr	r0, [pc, #208]	; (800aabc <_printf_i+0x244>)
 800a9ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9ee:	6829      	ldr	r1, [r5, #0]
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9f6:	6029      	str	r1, [r5, #0]
 800a9f8:	061d      	lsls	r5, r3, #24
 800a9fa:	d514      	bpl.n	800aa26 <_printf_i+0x1ae>
 800a9fc:	07df      	lsls	r7, r3, #31
 800a9fe:	bf44      	itt	mi
 800aa00:	f043 0320 	orrmi.w	r3, r3, #32
 800aa04:	6023      	strmi	r3, [r4, #0]
 800aa06:	b91e      	cbnz	r6, 800aa10 <_printf_i+0x198>
 800aa08:	6823      	ldr	r3, [r4, #0]
 800aa0a:	f023 0320 	bic.w	r3, r3, #32
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	2310      	movs	r3, #16
 800aa12:	e7af      	b.n	800a974 <_printf_i+0xfc>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	f043 0320 	orr.w	r3, r3, #32
 800aa1a:	6023      	str	r3, [r4, #0]
 800aa1c:	2378      	movs	r3, #120	; 0x78
 800aa1e:	4828      	ldr	r0, [pc, #160]	; (800aac0 <_printf_i+0x248>)
 800aa20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa24:	e7e3      	b.n	800a9ee <_printf_i+0x176>
 800aa26:	0659      	lsls	r1, r3, #25
 800aa28:	bf48      	it	mi
 800aa2a:	b2b6      	uxthmi	r6, r6
 800aa2c:	e7e6      	b.n	800a9fc <_printf_i+0x184>
 800aa2e:	4615      	mov	r5, r2
 800aa30:	e7bb      	b.n	800a9aa <_printf_i+0x132>
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	6826      	ldr	r6, [r4, #0]
 800aa36:	1d18      	adds	r0, r3, #4
 800aa38:	6961      	ldr	r1, [r4, #20]
 800aa3a:	6028      	str	r0, [r5, #0]
 800aa3c:	0635      	lsls	r5, r6, #24
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	d501      	bpl.n	800aa46 <_printf_i+0x1ce>
 800aa42:	6019      	str	r1, [r3, #0]
 800aa44:	e002      	b.n	800aa4c <_printf_i+0x1d4>
 800aa46:	0670      	lsls	r0, r6, #25
 800aa48:	d5fb      	bpl.n	800aa42 <_printf_i+0x1ca>
 800aa4a:	8019      	strh	r1, [r3, #0]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4615      	mov	r5, r2
 800aa50:	6123      	str	r3, [r4, #16]
 800aa52:	e7ba      	b.n	800a9ca <_printf_i+0x152>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	2100      	movs	r1, #0
 800aa58:	1d1a      	adds	r2, r3, #4
 800aa5a:	602a      	str	r2, [r5, #0]
 800aa5c:	681d      	ldr	r5, [r3, #0]
 800aa5e:	6862      	ldr	r2, [r4, #4]
 800aa60:	4628      	mov	r0, r5
 800aa62:	f000 f95f 	bl	800ad24 <memchr>
 800aa66:	b108      	cbz	r0, 800aa6c <_printf_i+0x1f4>
 800aa68:	1b40      	subs	r0, r0, r5
 800aa6a:	6060      	str	r0, [r4, #4]
 800aa6c:	6863      	ldr	r3, [r4, #4]
 800aa6e:	6123      	str	r3, [r4, #16]
 800aa70:	2300      	movs	r3, #0
 800aa72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa76:	e7a8      	b.n	800a9ca <_printf_i+0x152>
 800aa78:	462a      	mov	r2, r5
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	6923      	ldr	r3, [r4, #16]
 800aa80:	47d0      	blx	sl
 800aa82:	3001      	adds	r0, #1
 800aa84:	d0ab      	beq.n	800a9de <_printf_i+0x166>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	079b      	lsls	r3, r3, #30
 800aa8a:	d413      	bmi.n	800aab4 <_printf_i+0x23c>
 800aa8c:	68e0      	ldr	r0, [r4, #12]
 800aa8e:	9b03      	ldr	r3, [sp, #12]
 800aa90:	4298      	cmp	r0, r3
 800aa92:	bfb8      	it	lt
 800aa94:	4618      	movlt	r0, r3
 800aa96:	e7a4      	b.n	800a9e2 <_printf_i+0x16a>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	4632      	mov	r2, r6
 800aa9c:	4649      	mov	r1, r9
 800aa9e:	4640      	mov	r0, r8
 800aaa0:	47d0      	blx	sl
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	d09b      	beq.n	800a9de <_printf_i+0x166>
 800aaa6:	3501      	adds	r5, #1
 800aaa8:	68e3      	ldr	r3, [r4, #12]
 800aaaa:	9903      	ldr	r1, [sp, #12]
 800aaac:	1a5b      	subs	r3, r3, r1
 800aaae:	42ab      	cmp	r3, r5
 800aab0:	dcf2      	bgt.n	800aa98 <_printf_i+0x220>
 800aab2:	e7eb      	b.n	800aa8c <_printf_i+0x214>
 800aab4:	2500      	movs	r5, #0
 800aab6:	f104 0619 	add.w	r6, r4, #25
 800aaba:	e7f5      	b.n	800aaa8 <_printf_i+0x230>
 800aabc:	0800be46 	.word	0x0800be46
 800aac0:	0800be57 	.word	0x0800be57

0800aac4 <sniprintf>:
 800aac4:	b40c      	push	{r2, r3}
 800aac6:	b530      	push	{r4, r5, lr}
 800aac8:	4b17      	ldr	r3, [pc, #92]	; (800ab28 <sniprintf+0x64>)
 800aaca:	1e0c      	subs	r4, r1, #0
 800aacc:	681d      	ldr	r5, [r3, #0]
 800aace:	b09d      	sub	sp, #116	; 0x74
 800aad0:	da08      	bge.n	800aae4 <sniprintf+0x20>
 800aad2:	238b      	movs	r3, #139	; 0x8b
 800aad4:	f04f 30ff 	mov.w	r0, #4294967295
 800aad8:	602b      	str	r3, [r5, #0]
 800aada:	b01d      	add	sp, #116	; 0x74
 800aadc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aae0:	b002      	add	sp, #8
 800aae2:	4770      	bx	lr
 800aae4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aae8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aaec:	bf0c      	ite	eq
 800aaee:	4623      	moveq	r3, r4
 800aaf0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	9307      	str	r3, [sp, #28]
 800aaf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aafc:	9002      	str	r0, [sp, #8]
 800aafe:	9006      	str	r0, [sp, #24]
 800ab00:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab04:	4628      	mov	r0, r5
 800ab06:	ab21      	add	r3, sp, #132	; 0x84
 800ab08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab0a:	a902      	add	r1, sp, #8
 800ab0c:	9301      	str	r3, [sp, #4]
 800ab0e:	f7ff fd43 	bl	800a598 <_svfiprintf_r>
 800ab12:	1c43      	adds	r3, r0, #1
 800ab14:	bfbc      	itt	lt
 800ab16:	238b      	movlt	r3, #139	; 0x8b
 800ab18:	602b      	strlt	r3, [r5, #0]
 800ab1a:	2c00      	cmp	r4, #0
 800ab1c:	d0dd      	beq.n	800aada <sniprintf+0x16>
 800ab1e:	2200      	movs	r2, #0
 800ab20:	9b02      	ldr	r3, [sp, #8]
 800ab22:	701a      	strb	r2, [r3, #0]
 800ab24:	e7d9      	b.n	800aada <sniprintf+0x16>
 800ab26:	bf00      	nop
 800ab28:	200000e0 	.word	0x200000e0

0800ab2c <siscanf>:
 800ab2c:	b40e      	push	{r1, r2, r3}
 800ab2e:	f44f 7201 	mov.w	r2, #516	; 0x204
 800ab32:	b530      	push	{r4, r5, lr}
 800ab34:	b09c      	sub	sp, #112	; 0x70
 800ab36:	ac1f      	add	r4, sp, #124	; 0x7c
 800ab38:	f854 5b04 	ldr.w	r5, [r4], #4
 800ab3c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ab40:	9002      	str	r0, [sp, #8]
 800ab42:	9006      	str	r0, [sp, #24]
 800ab44:	f7f5 fb02 	bl	800014c <strlen>
 800ab48:	4b0b      	ldr	r3, [pc, #44]	; (800ab78 <siscanf+0x4c>)
 800ab4a:	9003      	str	r0, [sp, #12]
 800ab4c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab4e:	2300      	movs	r3, #0
 800ab50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab52:	9314      	str	r3, [sp, #80]	; 0x50
 800ab54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab58:	9007      	str	r0, [sp, #28]
 800ab5a:	4808      	ldr	r0, [pc, #32]	; (800ab7c <siscanf+0x50>)
 800ab5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab60:	462a      	mov	r2, r5
 800ab62:	4623      	mov	r3, r4
 800ab64:	a902      	add	r1, sp, #8
 800ab66:	6800      	ldr	r0, [r0, #0]
 800ab68:	9401      	str	r4, [sp, #4]
 800ab6a:	f000 f98d 	bl	800ae88 <__ssvfiscanf_r>
 800ab6e:	b01c      	add	sp, #112	; 0x70
 800ab70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab74:	b003      	add	sp, #12
 800ab76:	4770      	bx	lr
 800ab78:	08009459 	.word	0x08009459
 800ab7c:	200000e0 	.word	0x200000e0

0800ab80 <strcpy>:
 800ab80:	4603      	mov	r3, r0
 800ab82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab86:	f803 2b01 	strb.w	r2, [r3], #1
 800ab8a:	2a00      	cmp	r2, #0
 800ab8c:	d1f9      	bne.n	800ab82 <strcpy+0x2>
 800ab8e:	4770      	bx	lr

0800ab90 <strncmp>:
 800ab90:	4603      	mov	r3, r0
 800ab92:	b510      	push	{r4, lr}
 800ab94:	b172      	cbz	r2, 800abb4 <strncmp+0x24>
 800ab96:	3901      	subs	r1, #1
 800ab98:	1884      	adds	r4, r0, r2
 800ab9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aba2:	4290      	cmp	r0, r2
 800aba4:	d101      	bne.n	800abaa <strncmp+0x1a>
 800aba6:	42a3      	cmp	r3, r4
 800aba8:	d101      	bne.n	800abae <strncmp+0x1e>
 800abaa:	1a80      	subs	r0, r0, r2
 800abac:	bd10      	pop	{r4, pc}
 800abae:	2800      	cmp	r0, #0
 800abb0:	d1f3      	bne.n	800ab9a <strncmp+0xa>
 800abb2:	e7fa      	b.n	800abaa <strncmp+0x1a>
 800abb4:	4610      	mov	r0, r2
 800abb6:	e7f9      	b.n	800abac <strncmp+0x1c>

0800abb8 <__tzcalc_limits>:
 800abb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abbc:	4605      	mov	r5, r0
 800abbe:	f7ff fc65 	bl	800a48c <__gettzinfo>
 800abc2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800abc6:	429d      	cmp	r5, r3
 800abc8:	f340 809a 	ble.w	800ad00 <__tzcalc_limits+0x148>
 800abcc:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800abd0:	18ac      	adds	r4, r5, r2
 800abd2:	f240 126d 	movw	r2, #365	; 0x16d
 800abd6:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800abda:	10a4      	asrs	r4, r4, #2
 800abdc:	fb02 4403 	mla	r4, r2, r3, r4
 800abe0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800abe4:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800abe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800abec:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800abf0:	441c      	add	r4, r3
 800abf2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800abf6:	186a      	adds	r2, r5, r1
 800abf8:	fbb2 f2f3 	udiv	r2, r2, r3
 800abfc:	fb95 fcf3 	sdiv	ip, r5, r3
 800ac00:	4414      	add	r4, r2
 800ac02:	2264      	movs	r2, #100	; 0x64
 800ac04:	fb03 5c1c 	mls	ip, r3, ip, r5
 800ac08:	fb95 f7f2 	sdiv	r7, r5, r2
 800ac0c:	fabc f68c 	clz	r6, ip
 800ac10:	4601      	mov	r1, r0
 800ac12:	fb02 5717 	mls	r7, r2, r7, r5
 800ac16:	6045      	str	r5, [r0, #4]
 800ac18:	0976      	lsrs	r6, r6, #5
 800ac1a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800ac1e:	f005 0203 	and.w	r2, r5, #3
 800ac22:	7a0d      	ldrb	r5, [r1, #8]
 800ac24:	694b      	ldr	r3, [r1, #20]
 800ac26:	2d4a      	cmp	r5, #74	; 0x4a
 800ac28:	d12d      	bne.n	800ac86 <__tzcalc_limits+0xce>
 800ac2a:	eb04 0e03 	add.w	lr, r4, r3
 800ac2e:	b902      	cbnz	r2, 800ac32 <__tzcalc_limits+0x7a>
 800ac30:	b917      	cbnz	r7, 800ac38 <__tzcalc_limits+0x80>
 800ac32:	f1bc 0f00 	cmp.w	ip, #0
 800ac36:	d124      	bne.n	800ac82 <__tzcalc_limits+0xca>
 800ac38:	2b3b      	cmp	r3, #59	; 0x3b
 800ac3a:	bfd4      	ite	le
 800ac3c:	2300      	movle	r3, #0
 800ac3e:	2301      	movgt	r3, #1
 800ac40:	4473      	add	r3, lr
 800ac42:	3b01      	subs	r3, #1
 800ac44:	698d      	ldr	r5, [r1, #24]
 800ac46:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800ad04 <__tzcalc_limits+0x14c>
 800ac4a:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800ac4e:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800ac52:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800ac54:	18ed      	adds	r5, r5, r3
 800ac56:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800ac5a:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800ac5e:	3128      	adds	r1, #40	; 0x28
 800ac60:	458b      	cmp	fp, r1
 800ac62:	d1de      	bne.n	800ac22 <__tzcalc_limits+0x6a>
 800ac64:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800ac68:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800ac6c:	428c      	cmp	r4, r1
 800ac6e:	eb72 0303 	sbcs.w	r3, r2, r3
 800ac72:	bfb4      	ite	lt
 800ac74:	2301      	movlt	r3, #1
 800ac76:	2300      	movge	r3, #0
 800ac78:	6003      	str	r3, [r0, #0]
 800ac7a:	2001      	movs	r0, #1
 800ac7c:	b003      	add	sp, #12
 800ac7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac82:	2300      	movs	r3, #0
 800ac84:	e7dc      	b.n	800ac40 <__tzcalc_limits+0x88>
 800ac86:	2d44      	cmp	r5, #68	; 0x44
 800ac88:	d101      	bne.n	800ac8e <__tzcalc_limits+0xd6>
 800ac8a:	4423      	add	r3, r4
 800ac8c:	e7da      	b.n	800ac44 <__tzcalc_limits+0x8c>
 800ac8e:	bb8a      	cbnz	r2, 800acf4 <__tzcalc_limits+0x13c>
 800ac90:	2f00      	cmp	r7, #0
 800ac92:	bf0c      	ite	eq
 800ac94:	4635      	moveq	r5, r6
 800ac96:	2501      	movne	r5, #1
 800ac98:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800ac9c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800aca0:	f04f 0800 	mov.w	r8, #0
 800aca4:	f8cd e004 	str.w	lr, [sp, #4]
 800aca8:	46a6      	mov	lr, r4
 800acaa:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800ad08 <__tzcalc_limits+0x150>
 800acae:	fb0a 9505 	mla	r5, sl, r5, r9
 800acb2:	3d04      	subs	r5, #4
 800acb4:	f8dd a004 	ldr.w	sl, [sp, #4]
 800acb8:	f108 0801 	add.w	r8, r8, #1
 800acbc:	45c2      	cmp	sl, r8
 800acbe:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800acc2:	dc19      	bgt.n	800acf8 <__tzcalc_limits+0x140>
 800acc4:	f04f 0807 	mov.w	r8, #7
 800acc8:	f10e 0504 	add.w	r5, lr, #4
 800accc:	fb95 f8f8 	sdiv	r8, r5, r8
 800acd0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800acd4:	eba5 0808 	sub.w	r8, r5, r8
 800acd8:	ebb3 0808 	subs.w	r8, r3, r8
 800acdc:	690b      	ldr	r3, [r1, #16]
 800acde:	bf48      	it	mi
 800ace0:	f108 0807 	addmi.w	r8, r8, #7
 800ace4:	3b01      	subs	r3, #1
 800ace6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800acea:	4443      	add	r3, r8
 800acec:	454b      	cmp	r3, r9
 800acee:	da05      	bge.n	800acfc <__tzcalc_limits+0x144>
 800acf0:	4473      	add	r3, lr
 800acf2:	e7a7      	b.n	800ac44 <__tzcalc_limits+0x8c>
 800acf4:	4635      	mov	r5, r6
 800acf6:	e7cf      	b.n	800ac98 <__tzcalc_limits+0xe0>
 800acf8:	44ce      	add	lr, r9
 800acfa:	e7db      	b.n	800acb4 <__tzcalc_limits+0xfc>
 800acfc:	3b07      	subs	r3, #7
 800acfe:	e7f5      	b.n	800acec <__tzcalc_limits+0x134>
 800ad00:	2000      	movs	r0, #0
 800ad02:	e7bb      	b.n	800ac7c <__tzcalc_limits+0xc4>
 800ad04:	00015180 	.word	0x00015180
 800ad08:	0800be68 	.word	0x0800be68

0800ad0c <__env_lock>:
 800ad0c:	4801      	ldr	r0, [pc, #4]	; (800ad14 <__env_lock+0x8>)
 800ad0e:	f7fe ba8c 	b.w	800922a <__retarget_lock_acquire_recursive>
 800ad12:	bf00      	nop
 800ad14:	20000678 	.word	0x20000678

0800ad18 <__env_unlock>:
 800ad18:	4801      	ldr	r0, [pc, #4]	; (800ad20 <__env_unlock+0x8>)
 800ad1a:	f7fe ba88 	b.w	800922e <__retarget_lock_release_recursive>
 800ad1e:	bf00      	nop
 800ad20:	20000678 	.word	0x20000678

0800ad24 <memchr>:
 800ad24:	4603      	mov	r3, r0
 800ad26:	b510      	push	{r4, lr}
 800ad28:	b2c9      	uxtb	r1, r1
 800ad2a:	4402      	add	r2, r0
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	4618      	mov	r0, r3
 800ad30:	d101      	bne.n	800ad36 <memchr+0x12>
 800ad32:	2000      	movs	r0, #0
 800ad34:	e003      	b.n	800ad3e <memchr+0x1a>
 800ad36:	7804      	ldrb	r4, [r0, #0]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	428c      	cmp	r4, r1
 800ad3c:	d1f6      	bne.n	800ad2c <memchr+0x8>
 800ad3e:	bd10      	pop	{r4, pc}

0800ad40 <memmove>:
 800ad40:	4288      	cmp	r0, r1
 800ad42:	b510      	push	{r4, lr}
 800ad44:	eb01 0402 	add.w	r4, r1, r2
 800ad48:	d902      	bls.n	800ad50 <memmove+0x10>
 800ad4a:	4284      	cmp	r4, r0
 800ad4c:	4623      	mov	r3, r4
 800ad4e:	d807      	bhi.n	800ad60 <memmove+0x20>
 800ad50:	1e43      	subs	r3, r0, #1
 800ad52:	42a1      	cmp	r1, r4
 800ad54:	d008      	beq.n	800ad68 <memmove+0x28>
 800ad56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad5e:	e7f8      	b.n	800ad52 <memmove+0x12>
 800ad60:	4601      	mov	r1, r0
 800ad62:	4402      	add	r2, r0
 800ad64:	428a      	cmp	r2, r1
 800ad66:	d100      	bne.n	800ad6a <memmove+0x2a>
 800ad68:	bd10      	pop	{r4, pc}
 800ad6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad72:	e7f7      	b.n	800ad64 <memmove+0x24>

0800ad74 <_realloc_r>:
 800ad74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad78:	4680      	mov	r8, r0
 800ad7a:	4614      	mov	r4, r2
 800ad7c:	460e      	mov	r6, r1
 800ad7e:	b921      	cbnz	r1, 800ad8a <_realloc_r+0x16>
 800ad80:	4611      	mov	r1, r2
 800ad82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad86:	f7fe bac3 	b.w	8009310 <_malloc_r>
 800ad8a:	b92a      	cbnz	r2, 800ad98 <_realloc_r+0x24>
 800ad8c:	f7fe fa58 	bl	8009240 <_free_r>
 800ad90:	4625      	mov	r5, r4
 800ad92:	4628      	mov	r0, r5
 800ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad98:	f000 fbb2 	bl	800b500 <_malloc_usable_size_r>
 800ad9c:	4284      	cmp	r4, r0
 800ad9e:	4607      	mov	r7, r0
 800ada0:	d802      	bhi.n	800ada8 <_realloc_r+0x34>
 800ada2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ada6:	d812      	bhi.n	800adce <_realloc_r+0x5a>
 800ada8:	4621      	mov	r1, r4
 800adaa:	4640      	mov	r0, r8
 800adac:	f7fe fab0 	bl	8009310 <_malloc_r>
 800adb0:	4605      	mov	r5, r0
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d0ed      	beq.n	800ad92 <_realloc_r+0x1e>
 800adb6:	42bc      	cmp	r4, r7
 800adb8:	4622      	mov	r2, r4
 800adba:	4631      	mov	r1, r6
 800adbc:	bf28      	it	cs
 800adbe:	463a      	movcs	r2, r7
 800adc0:	f7ff fb74 	bl	800a4ac <memcpy>
 800adc4:	4631      	mov	r1, r6
 800adc6:	4640      	mov	r0, r8
 800adc8:	f7fe fa3a 	bl	8009240 <_free_r>
 800adcc:	e7e1      	b.n	800ad92 <_realloc_r+0x1e>
 800adce:	4635      	mov	r5, r6
 800add0:	e7df      	b.n	800ad92 <_realloc_r+0x1e>

0800add2 <_sungetc_r>:
 800add2:	b538      	push	{r3, r4, r5, lr}
 800add4:	1c4b      	adds	r3, r1, #1
 800add6:	4614      	mov	r4, r2
 800add8:	d103      	bne.n	800ade2 <_sungetc_r+0x10>
 800adda:	f04f 35ff 	mov.w	r5, #4294967295
 800adde:	4628      	mov	r0, r5
 800ade0:	bd38      	pop	{r3, r4, r5, pc}
 800ade2:	8993      	ldrh	r3, [r2, #12]
 800ade4:	b2cd      	uxtb	r5, r1
 800ade6:	f023 0320 	bic.w	r3, r3, #32
 800adea:	8193      	strh	r3, [r2, #12]
 800adec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adee:	6852      	ldr	r2, [r2, #4]
 800adf0:	b18b      	cbz	r3, 800ae16 <_sungetc_r+0x44>
 800adf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800adf4:	4293      	cmp	r3, r2
 800adf6:	dd08      	ble.n	800ae0a <_sungetc_r+0x38>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	1e5a      	subs	r2, r3, #1
 800adfc:	6022      	str	r2, [r4, #0]
 800adfe:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ae02:	6863      	ldr	r3, [r4, #4]
 800ae04:	3301      	adds	r3, #1
 800ae06:	6063      	str	r3, [r4, #4]
 800ae08:	e7e9      	b.n	800adde <_sungetc_r+0xc>
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	f000 fb40 	bl	800b490 <__submore>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d0f1      	beq.n	800adf8 <_sungetc_r+0x26>
 800ae14:	e7e1      	b.n	800adda <_sungetc_r+0x8>
 800ae16:	6921      	ldr	r1, [r4, #16]
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	b151      	cbz	r1, 800ae32 <_sungetc_r+0x60>
 800ae1c:	4299      	cmp	r1, r3
 800ae1e:	d208      	bcs.n	800ae32 <_sungetc_r+0x60>
 800ae20:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ae24:	42a9      	cmp	r1, r5
 800ae26:	d104      	bne.n	800ae32 <_sungetc_r+0x60>
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	3201      	adds	r2, #1
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	6062      	str	r2, [r4, #4]
 800ae30:	e7d5      	b.n	800adde <_sungetc_r+0xc>
 800ae32:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ae36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae3a:	6363      	str	r3, [r4, #52]	; 0x34
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae40:	4623      	mov	r3, r4
 800ae42:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ae46:	6023      	str	r3, [r4, #0]
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e7dc      	b.n	800ae06 <_sungetc_r+0x34>

0800ae4c <__ssrefill_r>:
 800ae4c:	b510      	push	{r4, lr}
 800ae4e:	460c      	mov	r4, r1
 800ae50:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ae52:	b169      	cbz	r1, 800ae70 <__ssrefill_r+0x24>
 800ae54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae58:	4299      	cmp	r1, r3
 800ae5a:	d001      	beq.n	800ae60 <__ssrefill_r+0x14>
 800ae5c:	f7fe f9f0 	bl	8009240 <_free_r>
 800ae60:	2000      	movs	r0, #0
 800ae62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae64:	6360      	str	r0, [r4, #52]	; 0x34
 800ae66:	6063      	str	r3, [r4, #4]
 800ae68:	b113      	cbz	r3, 800ae70 <__ssrefill_r+0x24>
 800ae6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	bd10      	pop	{r4, pc}
 800ae70:	6923      	ldr	r3, [r4, #16]
 800ae72:	f04f 30ff 	mov.w	r0, #4294967295
 800ae76:	6023      	str	r3, [r4, #0]
 800ae78:	2300      	movs	r3, #0
 800ae7a:	6063      	str	r3, [r4, #4]
 800ae7c:	89a3      	ldrh	r3, [r4, #12]
 800ae7e:	f043 0320 	orr.w	r3, r3, #32
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	e7f3      	b.n	800ae6e <__ssrefill_r+0x22>
	...

0800ae88 <__ssvfiscanf_r>:
 800ae88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	2100      	movs	r1, #0
 800ae90:	4606      	mov	r6, r0
 800ae92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ae96:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ae9a:	49a7      	ldr	r1, [pc, #668]	; (800b138 <__ssvfiscanf_r+0x2b0>)
 800ae9c:	f10d 0804 	add.w	r8, sp, #4
 800aea0:	91a0      	str	r1, [sp, #640]	; 0x280
 800aea2:	49a6      	ldr	r1, [pc, #664]	; (800b13c <__ssvfiscanf_r+0x2b4>)
 800aea4:	4fa6      	ldr	r7, [pc, #664]	; (800b140 <__ssvfiscanf_r+0x2b8>)
 800aea6:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b144 <__ssvfiscanf_r+0x2bc>
 800aeaa:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800aeae:	91a1      	str	r1, [sp, #644]	; 0x284
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	7813      	ldrb	r3, [r2, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 815c 	beq.w	800b172 <__ssvfiscanf_r+0x2ea>
 800aeba:	5dd9      	ldrb	r1, [r3, r7]
 800aebc:	1c55      	adds	r5, r2, #1
 800aebe:	f011 0108 	ands.w	r1, r1, #8
 800aec2:	d019      	beq.n	800aef8 <__ssvfiscanf_r+0x70>
 800aec4:	6863      	ldr	r3, [r4, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	dd0f      	ble.n	800aeea <__ssvfiscanf_r+0x62>
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	781a      	ldrb	r2, [r3, #0]
 800aece:	5cba      	ldrb	r2, [r7, r2]
 800aed0:	0712      	lsls	r2, r2, #28
 800aed2:	d401      	bmi.n	800aed8 <__ssvfiscanf_r+0x50>
 800aed4:	462a      	mov	r2, r5
 800aed6:	e7ec      	b.n	800aeb2 <__ssvfiscanf_r+0x2a>
 800aed8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aeda:	3301      	adds	r3, #1
 800aedc:	3201      	adds	r2, #1
 800aede:	9245      	str	r2, [sp, #276]	; 0x114
 800aee0:	6862      	ldr	r2, [r4, #4]
 800aee2:	6023      	str	r3, [r4, #0]
 800aee4:	3a01      	subs	r2, #1
 800aee6:	6062      	str	r2, [r4, #4]
 800aee8:	e7ec      	b.n	800aec4 <__ssvfiscanf_r+0x3c>
 800aeea:	4621      	mov	r1, r4
 800aeec:	4630      	mov	r0, r6
 800aeee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aef0:	4798      	blx	r3
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d0e9      	beq.n	800aeca <__ssvfiscanf_r+0x42>
 800aef6:	e7ed      	b.n	800aed4 <__ssvfiscanf_r+0x4c>
 800aef8:	2b25      	cmp	r3, #37	; 0x25
 800aefa:	d012      	beq.n	800af22 <__ssvfiscanf_r+0x9a>
 800aefc:	469a      	mov	sl, r3
 800aefe:	6863      	ldr	r3, [r4, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	f340 8094 	ble.w	800b02e <__ssvfiscanf_r+0x1a6>
 800af06:	6822      	ldr	r2, [r4, #0]
 800af08:	7813      	ldrb	r3, [r2, #0]
 800af0a:	4553      	cmp	r3, sl
 800af0c:	f040 8131 	bne.w	800b172 <__ssvfiscanf_r+0x2ea>
 800af10:	6863      	ldr	r3, [r4, #4]
 800af12:	3201      	adds	r2, #1
 800af14:	3b01      	subs	r3, #1
 800af16:	6063      	str	r3, [r4, #4]
 800af18:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800af1a:	6022      	str	r2, [r4, #0]
 800af1c:	3301      	adds	r3, #1
 800af1e:	9345      	str	r3, [sp, #276]	; 0x114
 800af20:	e7d8      	b.n	800aed4 <__ssvfiscanf_r+0x4c>
 800af22:	9141      	str	r1, [sp, #260]	; 0x104
 800af24:	9143      	str	r1, [sp, #268]	; 0x10c
 800af26:	7853      	ldrb	r3, [r2, #1]
 800af28:	2b2a      	cmp	r3, #42	; 0x2a
 800af2a:	bf04      	itt	eq
 800af2c:	2310      	moveq	r3, #16
 800af2e:	1c95      	addeq	r5, r2, #2
 800af30:	f04f 020a 	mov.w	r2, #10
 800af34:	bf08      	it	eq
 800af36:	9341      	streq	r3, [sp, #260]	; 0x104
 800af38:	46aa      	mov	sl, r5
 800af3a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800af3e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800af42:	2b09      	cmp	r3, #9
 800af44:	d91d      	bls.n	800af82 <__ssvfiscanf_r+0xfa>
 800af46:	2203      	movs	r2, #3
 800af48:	487e      	ldr	r0, [pc, #504]	; (800b144 <__ssvfiscanf_r+0x2bc>)
 800af4a:	f7ff feeb 	bl	800ad24 <memchr>
 800af4e:	b140      	cbz	r0, 800af62 <__ssvfiscanf_r+0xda>
 800af50:	2301      	movs	r3, #1
 800af52:	4655      	mov	r5, sl
 800af54:	eba0 0009 	sub.w	r0, r0, r9
 800af58:	fa03 f000 	lsl.w	r0, r3, r0
 800af5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800af5e:	4318      	orrs	r0, r3
 800af60:	9041      	str	r0, [sp, #260]	; 0x104
 800af62:	f815 3b01 	ldrb.w	r3, [r5], #1
 800af66:	2b78      	cmp	r3, #120	; 0x78
 800af68:	d806      	bhi.n	800af78 <__ssvfiscanf_r+0xf0>
 800af6a:	2b57      	cmp	r3, #87	; 0x57
 800af6c:	d810      	bhi.n	800af90 <__ssvfiscanf_r+0x108>
 800af6e:	2b25      	cmp	r3, #37	; 0x25
 800af70:	d0c4      	beq.n	800aefc <__ssvfiscanf_r+0x74>
 800af72:	d857      	bhi.n	800b024 <__ssvfiscanf_r+0x19c>
 800af74:	2b00      	cmp	r3, #0
 800af76:	d065      	beq.n	800b044 <__ssvfiscanf_r+0x1bc>
 800af78:	2303      	movs	r3, #3
 800af7a:	9347      	str	r3, [sp, #284]	; 0x11c
 800af7c:	230a      	movs	r3, #10
 800af7e:	9342      	str	r3, [sp, #264]	; 0x108
 800af80:	e072      	b.n	800b068 <__ssvfiscanf_r+0x1e0>
 800af82:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800af84:	4655      	mov	r5, sl
 800af86:	fb02 1103 	mla	r1, r2, r3, r1
 800af8a:	3930      	subs	r1, #48	; 0x30
 800af8c:	9143      	str	r1, [sp, #268]	; 0x10c
 800af8e:	e7d3      	b.n	800af38 <__ssvfiscanf_r+0xb0>
 800af90:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800af94:	2a20      	cmp	r2, #32
 800af96:	d8ef      	bhi.n	800af78 <__ssvfiscanf_r+0xf0>
 800af98:	a101      	add	r1, pc, #4	; (adr r1, 800afa0 <__ssvfiscanf_r+0x118>)
 800af9a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800af9e:	bf00      	nop
 800afa0:	0800b053 	.word	0x0800b053
 800afa4:	0800af79 	.word	0x0800af79
 800afa8:	0800af79 	.word	0x0800af79
 800afac:	0800b0b1 	.word	0x0800b0b1
 800afb0:	0800af79 	.word	0x0800af79
 800afb4:	0800af79 	.word	0x0800af79
 800afb8:	0800af79 	.word	0x0800af79
 800afbc:	0800af79 	.word	0x0800af79
 800afc0:	0800af79 	.word	0x0800af79
 800afc4:	0800af79 	.word	0x0800af79
 800afc8:	0800af79 	.word	0x0800af79
 800afcc:	0800b0c7 	.word	0x0800b0c7
 800afd0:	0800b09d 	.word	0x0800b09d
 800afd4:	0800b02b 	.word	0x0800b02b
 800afd8:	0800b02b 	.word	0x0800b02b
 800afdc:	0800b02b 	.word	0x0800b02b
 800afe0:	0800af79 	.word	0x0800af79
 800afe4:	0800b0a1 	.word	0x0800b0a1
 800afe8:	0800af79 	.word	0x0800af79
 800afec:	0800af79 	.word	0x0800af79
 800aff0:	0800af79 	.word	0x0800af79
 800aff4:	0800af79 	.word	0x0800af79
 800aff8:	0800b0d7 	.word	0x0800b0d7
 800affc:	0800b0a9 	.word	0x0800b0a9
 800b000:	0800b04b 	.word	0x0800b04b
 800b004:	0800af79 	.word	0x0800af79
 800b008:	0800af79 	.word	0x0800af79
 800b00c:	0800b0d3 	.word	0x0800b0d3
 800b010:	0800af79 	.word	0x0800af79
 800b014:	0800b09d 	.word	0x0800b09d
 800b018:	0800af79 	.word	0x0800af79
 800b01c:	0800af79 	.word	0x0800af79
 800b020:	0800b053 	.word	0x0800b053
 800b024:	3b45      	subs	r3, #69	; 0x45
 800b026:	2b02      	cmp	r3, #2
 800b028:	d8a6      	bhi.n	800af78 <__ssvfiscanf_r+0xf0>
 800b02a:	2305      	movs	r3, #5
 800b02c:	e01b      	b.n	800b066 <__ssvfiscanf_r+0x1de>
 800b02e:	4621      	mov	r1, r4
 800b030:	4630      	mov	r0, r6
 800b032:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b034:	4798      	blx	r3
 800b036:	2800      	cmp	r0, #0
 800b038:	f43f af65 	beq.w	800af06 <__ssvfiscanf_r+0x7e>
 800b03c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b03e:	2800      	cmp	r0, #0
 800b040:	f040 808d 	bne.w	800b15e <__ssvfiscanf_r+0x2d6>
 800b044:	f04f 30ff 	mov.w	r0, #4294967295
 800b048:	e08f      	b.n	800b16a <__ssvfiscanf_r+0x2e2>
 800b04a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b04c:	f042 0220 	orr.w	r2, r2, #32
 800b050:	9241      	str	r2, [sp, #260]	; 0x104
 800b052:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b058:	9241      	str	r2, [sp, #260]	; 0x104
 800b05a:	2210      	movs	r2, #16
 800b05c:	2b6f      	cmp	r3, #111	; 0x6f
 800b05e:	bf34      	ite	cc
 800b060:	2303      	movcc	r3, #3
 800b062:	2304      	movcs	r3, #4
 800b064:	9242      	str	r2, [sp, #264]	; 0x108
 800b066:	9347      	str	r3, [sp, #284]	; 0x11c
 800b068:	6863      	ldr	r3, [r4, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	dd42      	ble.n	800b0f4 <__ssvfiscanf_r+0x26c>
 800b06e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b070:	0659      	lsls	r1, r3, #25
 800b072:	d404      	bmi.n	800b07e <__ssvfiscanf_r+0x1f6>
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	781a      	ldrb	r2, [r3, #0]
 800b078:	5cba      	ldrb	r2, [r7, r2]
 800b07a:	0712      	lsls	r2, r2, #28
 800b07c:	d441      	bmi.n	800b102 <__ssvfiscanf_r+0x27a>
 800b07e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b080:	2b02      	cmp	r3, #2
 800b082:	dc50      	bgt.n	800b126 <__ssvfiscanf_r+0x29e>
 800b084:	466b      	mov	r3, sp
 800b086:	4622      	mov	r2, r4
 800b088:	4630      	mov	r0, r6
 800b08a:	a941      	add	r1, sp, #260	; 0x104
 800b08c:	f000 f876 	bl	800b17c <_scanf_chars>
 800b090:	2801      	cmp	r0, #1
 800b092:	d06e      	beq.n	800b172 <__ssvfiscanf_r+0x2ea>
 800b094:	2802      	cmp	r0, #2
 800b096:	f47f af1d 	bne.w	800aed4 <__ssvfiscanf_r+0x4c>
 800b09a:	e7cf      	b.n	800b03c <__ssvfiscanf_r+0x1b4>
 800b09c:	220a      	movs	r2, #10
 800b09e:	e7dd      	b.n	800b05c <__ssvfiscanf_r+0x1d4>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	9342      	str	r3, [sp, #264]	; 0x108
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e7de      	b.n	800b066 <__ssvfiscanf_r+0x1de>
 800b0a8:	2308      	movs	r3, #8
 800b0aa:	9342      	str	r3, [sp, #264]	; 0x108
 800b0ac:	2304      	movs	r3, #4
 800b0ae:	e7da      	b.n	800b066 <__ssvfiscanf_r+0x1de>
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	f000 f9b4 	bl	800b420 <__sccl>
 800b0b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0c0:	9341      	str	r3, [sp, #260]	; 0x104
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e7cf      	b.n	800b066 <__ssvfiscanf_r+0x1de>
 800b0c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0cc:	9341      	str	r3, [sp, #260]	; 0x104
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	e7c9      	b.n	800b066 <__ssvfiscanf_r+0x1de>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	e7c7      	b.n	800b066 <__ssvfiscanf_r+0x1de>
 800b0d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b0d8:	06c3      	lsls	r3, r0, #27
 800b0da:	f53f aefb 	bmi.w	800aed4 <__ssvfiscanf_r+0x4c>
 800b0de:	9b00      	ldr	r3, [sp, #0]
 800b0e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b0e2:	1d19      	adds	r1, r3, #4
 800b0e4:	9100      	str	r1, [sp, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f010 0f01 	tst.w	r0, #1
 800b0ec:	bf14      	ite	ne
 800b0ee:	801a      	strhne	r2, [r3, #0]
 800b0f0:	601a      	streq	r2, [r3, #0]
 800b0f2:	e6ef      	b.n	800aed4 <__ssvfiscanf_r+0x4c>
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b0fa:	4798      	blx	r3
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d0b6      	beq.n	800b06e <__ssvfiscanf_r+0x1e6>
 800b100:	e79c      	b.n	800b03c <__ssvfiscanf_r+0x1b4>
 800b102:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b104:	3201      	adds	r2, #1
 800b106:	9245      	str	r2, [sp, #276]	; 0x114
 800b108:	6862      	ldr	r2, [r4, #4]
 800b10a:	3a01      	subs	r2, #1
 800b10c:	2a00      	cmp	r2, #0
 800b10e:	6062      	str	r2, [r4, #4]
 800b110:	dd02      	ble.n	800b118 <__ssvfiscanf_r+0x290>
 800b112:	3301      	adds	r3, #1
 800b114:	6023      	str	r3, [r4, #0]
 800b116:	e7ad      	b.n	800b074 <__ssvfiscanf_r+0x1ec>
 800b118:	4621      	mov	r1, r4
 800b11a:	4630      	mov	r0, r6
 800b11c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b11e:	4798      	blx	r3
 800b120:	2800      	cmp	r0, #0
 800b122:	d0a7      	beq.n	800b074 <__ssvfiscanf_r+0x1ec>
 800b124:	e78a      	b.n	800b03c <__ssvfiscanf_r+0x1b4>
 800b126:	2b04      	cmp	r3, #4
 800b128:	dc0e      	bgt.n	800b148 <__ssvfiscanf_r+0x2c0>
 800b12a:	466b      	mov	r3, sp
 800b12c:	4622      	mov	r2, r4
 800b12e:	4630      	mov	r0, r6
 800b130:	a941      	add	r1, sp, #260	; 0x104
 800b132:	f000 f87d 	bl	800b230 <_scanf_i>
 800b136:	e7ab      	b.n	800b090 <__ssvfiscanf_r+0x208>
 800b138:	0800add3 	.word	0x0800add3
 800b13c:	0800ae4d 	.word	0x0800ae4d
 800b140:	0800bd35 	.word	0x0800bd35
 800b144:	0800be3b 	.word	0x0800be3b
 800b148:	4b0b      	ldr	r3, [pc, #44]	; (800b178 <__ssvfiscanf_r+0x2f0>)
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f43f aec2 	beq.w	800aed4 <__ssvfiscanf_r+0x4c>
 800b150:	466b      	mov	r3, sp
 800b152:	4622      	mov	r2, r4
 800b154:	4630      	mov	r0, r6
 800b156:	a941      	add	r1, sp, #260	; 0x104
 800b158:	f3af 8000 	nop.w
 800b15c:	e798      	b.n	800b090 <__ssvfiscanf_r+0x208>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b164:	bf18      	it	ne
 800b166:	f04f 30ff 	movne.w	r0, #4294967295
 800b16a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b172:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b174:	e7f9      	b.n	800b16a <__ssvfiscanf_r+0x2e2>
 800b176:	bf00      	nop
 800b178:	00000000 	.word	0x00000000

0800b17c <_scanf_chars>:
 800b17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b180:	4615      	mov	r5, r2
 800b182:	688a      	ldr	r2, [r1, #8]
 800b184:	4680      	mov	r8, r0
 800b186:	460c      	mov	r4, r1
 800b188:	b932      	cbnz	r2, 800b198 <_scanf_chars+0x1c>
 800b18a:	698a      	ldr	r2, [r1, #24]
 800b18c:	2a00      	cmp	r2, #0
 800b18e:	bf0c      	ite	eq
 800b190:	2201      	moveq	r2, #1
 800b192:	f04f 32ff 	movne.w	r2, #4294967295
 800b196:	608a      	str	r2, [r1, #8]
 800b198:	2700      	movs	r7, #0
 800b19a:	6822      	ldr	r2, [r4, #0]
 800b19c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b22c <_scanf_chars+0xb0>
 800b1a0:	06d1      	lsls	r1, r2, #27
 800b1a2:	bf5f      	itttt	pl
 800b1a4:	681a      	ldrpl	r2, [r3, #0]
 800b1a6:	1d11      	addpl	r1, r2, #4
 800b1a8:	6019      	strpl	r1, [r3, #0]
 800b1aa:	6816      	ldrpl	r6, [r2, #0]
 800b1ac:	69a0      	ldr	r0, [r4, #24]
 800b1ae:	b188      	cbz	r0, 800b1d4 <_scanf_chars+0x58>
 800b1b0:	2801      	cmp	r0, #1
 800b1b2:	d107      	bne.n	800b1c4 <_scanf_chars+0x48>
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	781a      	ldrb	r2, [r3, #0]
 800b1b8:	6963      	ldr	r3, [r4, #20]
 800b1ba:	5c9b      	ldrb	r3, [r3, r2]
 800b1bc:	b953      	cbnz	r3, 800b1d4 <_scanf_chars+0x58>
 800b1be:	2f00      	cmp	r7, #0
 800b1c0:	d031      	beq.n	800b226 <_scanf_chars+0xaa>
 800b1c2:	e022      	b.n	800b20a <_scanf_chars+0x8e>
 800b1c4:	2802      	cmp	r0, #2
 800b1c6:	d120      	bne.n	800b20a <_scanf_chars+0x8e>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b1d0:	071b      	lsls	r3, r3, #28
 800b1d2:	d41a      	bmi.n	800b20a <_scanf_chars+0x8e>
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	3701      	adds	r7, #1
 800b1d8:	06da      	lsls	r2, r3, #27
 800b1da:	bf5e      	ittt	pl
 800b1dc:	682b      	ldrpl	r3, [r5, #0]
 800b1de:	781b      	ldrbpl	r3, [r3, #0]
 800b1e0:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b1e4:	682a      	ldr	r2, [r5, #0]
 800b1e6:	686b      	ldr	r3, [r5, #4]
 800b1e8:	3201      	adds	r2, #1
 800b1ea:	602a      	str	r2, [r5, #0]
 800b1ec:	68a2      	ldr	r2, [r4, #8]
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	3a01      	subs	r2, #1
 800b1f2:	606b      	str	r3, [r5, #4]
 800b1f4:	60a2      	str	r2, [r4, #8]
 800b1f6:	b142      	cbz	r2, 800b20a <_scanf_chars+0x8e>
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	dcd7      	bgt.n	800b1ac <_scanf_chars+0x30>
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	4640      	mov	r0, r8
 800b200:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b204:	4798      	blx	r3
 800b206:	2800      	cmp	r0, #0
 800b208:	d0d0      	beq.n	800b1ac <_scanf_chars+0x30>
 800b20a:	6823      	ldr	r3, [r4, #0]
 800b20c:	f013 0310 	ands.w	r3, r3, #16
 800b210:	d105      	bne.n	800b21e <_scanf_chars+0xa2>
 800b212:	68e2      	ldr	r2, [r4, #12]
 800b214:	3201      	adds	r2, #1
 800b216:	60e2      	str	r2, [r4, #12]
 800b218:	69a2      	ldr	r2, [r4, #24]
 800b21a:	b102      	cbz	r2, 800b21e <_scanf_chars+0xa2>
 800b21c:	7033      	strb	r3, [r6, #0]
 800b21e:	2000      	movs	r0, #0
 800b220:	6923      	ldr	r3, [r4, #16]
 800b222:	443b      	add	r3, r7
 800b224:	6123      	str	r3, [r4, #16]
 800b226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b22a:	bf00      	nop
 800b22c:	0800bd35 	.word	0x0800bd35

0800b230 <_scanf_i>:
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	460c      	mov	r4, r1
 800b236:	4698      	mov	r8, r3
 800b238:	4b75      	ldr	r3, [pc, #468]	; (800b410 <_scanf_i+0x1e0>)
 800b23a:	b087      	sub	sp, #28
 800b23c:	4682      	mov	sl, r0
 800b23e:	4616      	mov	r6, r2
 800b240:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b244:	ab03      	add	r3, sp, #12
 800b246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b24a:	4b72      	ldr	r3, [pc, #456]	; (800b414 <_scanf_i+0x1e4>)
 800b24c:	69a1      	ldr	r1, [r4, #24]
 800b24e:	4a72      	ldr	r2, [pc, #456]	; (800b418 <_scanf_i+0x1e8>)
 800b250:	4627      	mov	r7, r4
 800b252:	2903      	cmp	r1, #3
 800b254:	bf18      	it	ne
 800b256:	461a      	movne	r2, r3
 800b258:	68a3      	ldr	r3, [r4, #8]
 800b25a:	9201      	str	r2, [sp, #4]
 800b25c:	1e5a      	subs	r2, r3, #1
 800b25e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b262:	bf81      	itttt	hi
 800b264:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b268:	eb03 0905 	addhi.w	r9, r3, r5
 800b26c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b270:	60a3      	strhi	r3, [r4, #8]
 800b272:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b276:	bf98      	it	ls
 800b278:	f04f 0900 	movls.w	r9, #0
 800b27c:	463d      	mov	r5, r7
 800b27e:	f04f 0b00 	mov.w	fp, #0
 800b282:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b286:	6023      	str	r3, [r4, #0]
 800b288:	6831      	ldr	r1, [r6, #0]
 800b28a:	ab03      	add	r3, sp, #12
 800b28c:	2202      	movs	r2, #2
 800b28e:	7809      	ldrb	r1, [r1, #0]
 800b290:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b294:	f7ff fd46 	bl	800ad24 <memchr>
 800b298:	b328      	cbz	r0, 800b2e6 <_scanf_i+0xb6>
 800b29a:	f1bb 0f01 	cmp.w	fp, #1
 800b29e:	d159      	bne.n	800b354 <_scanf_i+0x124>
 800b2a0:	6862      	ldr	r2, [r4, #4]
 800b2a2:	b92a      	cbnz	r2, 800b2b0 <_scanf_i+0x80>
 800b2a4:	2308      	movs	r3, #8
 800b2a6:	6822      	ldr	r2, [r4, #0]
 800b2a8:	6063      	str	r3, [r4, #4]
 800b2aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2ae:	6022      	str	r2, [r4, #0]
 800b2b0:	6822      	ldr	r2, [r4, #0]
 800b2b2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b2b6:	6022      	str	r2, [r4, #0]
 800b2b8:	68a2      	ldr	r2, [r4, #8]
 800b2ba:	1e51      	subs	r1, r2, #1
 800b2bc:	60a1      	str	r1, [r4, #8]
 800b2be:	b192      	cbz	r2, 800b2e6 <_scanf_i+0xb6>
 800b2c0:	6832      	ldr	r2, [r6, #0]
 800b2c2:	1c51      	adds	r1, r2, #1
 800b2c4:	6031      	str	r1, [r6, #0]
 800b2c6:	7812      	ldrb	r2, [r2, #0]
 800b2c8:	f805 2b01 	strb.w	r2, [r5], #1
 800b2cc:	6872      	ldr	r2, [r6, #4]
 800b2ce:	3a01      	subs	r2, #1
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	6072      	str	r2, [r6, #4]
 800b2d4:	dc07      	bgt.n	800b2e6 <_scanf_i+0xb6>
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	4650      	mov	r0, sl
 800b2da:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b2de:	4790      	blx	r2
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	f040 8085 	bne.w	800b3f0 <_scanf_i+0x1c0>
 800b2e6:	f10b 0b01 	add.w	fp, fp, #1
 800b2ea:	f1bb 0f03 	cmp.w	fp, #3
 800b2ee:	d1cb      	bne.n	800b288 <_scanf_i+0x58>
 800b2f0:	6863      	ldr	r3, [r4, #4]
 800b2f2:	b90b      	cbnz	r3, 800b2f8 <_scanf_i+0xc8>
 800b2f4:	230a      	movs	r3, #10
 800b2f6:	6063      	str	r3, [r4, #4]
 800b2f8:	6863      	ldr	r3, [r4, #4]
 800b2fa:	4948      	ldr	r1, [pc, #288]	; (800b41c <_scanf_i+0x1ec>)
 800b2fc:	6960      	ldr	r0, [r4, #20]
 800b2fe:	1ac9      	subs	r1, r1, r3
 800b300:	f000 f88e 	bl	800b420 <__sccl>
 800b304:	f04f 0b00 	mov.w	fp, #0
 800b308:	68a3      	ldr	r3, [r4, #8]
 800b30a:	6822      	ldr	r2, [r4, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d03d      	beq.n	800b38c <_scanf_i+0x15c>
 800b310:	6831      	ldr	r1, [r6, #0]
 800b312:	6960      	ldr	r0, [r4, #20]
 800b314:	f891 c000 	ldrb.w	ip, [r1]
 800b318:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d035      	beq.n	800b38c <_scanf_i+0x15c>
 800b320:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b324:	d124      	bne.n	800b370 <_scanf_i+0x140>
 800b326:	0510      	lsls	r0, r2, #20
 800b328:	d522      	bpl.n	800b370 <_scanf_i+0x140>
 800b32a:	f10b 0b01 	add.w	fp, fp, #1
 800b32e:	f1b9 0f00 	cmp.w	r9, #0
 800b332:	d003      	beq.n	800b33c <_scanf_i+0x10c>
 800b334:	3301      	adds	r3, #1
 800b336:	f109 39ff 	add.w	r9, r9, #4294967295
 800b33a:	60a3      	str	r3, [r4, #8]
 800b33c:	6873      	ldr	r3, [r6, #4]
 800b33e:	3b01      	subs	r3, #1
 800b340:	2b00      	cmp	r3, #0
 800b342:	6073      	str	r3, [r6, #4]
 800b344:	dd1b      	ble.n	800b37e <_scanf_i+0x14e>
 800b346:	6833      	ldr	r3, [r6, #0]
 800b348:	3301      	adds	r3, #1
 800b34a:	6033      	str	r3, [r6, #0]
 800b34c:	68a3      	ldr	r3, [r4, #8]
 800b34e:	3b01      	subs	r3, #1
 800b350:	60a3      	str	r3, [r4, #8]
 800b352:	e7d9      	b.n	800b308 <_scanf_i+0xd8>
 800b354:	f1bb 0f02 	cmp.w	fp, #2
 800b358:	d1ae      	bne.n	800b2b8 <_scanf_i+0x88>
 800b35a:	6822      	ldr	r2, [r4, #0]
 800b35c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b360:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b364:	d1bf      	bne.n	800b2e6 <_scanf_i+0xb6>
 800b366:	2310      	movs	r3, #16
 800b368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b36c:	6063      	str	r3, [r4, #4]
 800b36e:	e7a2      	b.n	800b2b6 <_scanf_i+0x86>
 800b370:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b374:	6022      	str	r2, [r4, #0]
 800b376:	780b      	ldrb	r3, [r1, #0]
 800b378:	f805 3b01 	strb.w	r3, [r5], #1
 800b37c:	e7de      	b.n	800b33c <_scanf_i+0x10c>
 800b37e:	4631      	mov	r1, r6
 800b380:	4650      	mov	r0, sl
 800b382:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b386:	4798      	blx	r3
 800b388:	2800      	cmp	r0, #0
 800b38a:	d0df      	beq.n	800b34c <_scanf_i+0x11c>
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	05db      	lsls	r3, r3, #23
 800b390:	d50d      	bpl.n	800b3ae <_scanf_i+0x17e>
 800b392:	42bd      	cmp	r5, r7
 800b394:	d909      	bls.n	800b3aa <_scanf_i+0x17a>
 800b396:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b39a:	4632      	mov	r2, r6
 800b39c:	4650      	mov	r0, sl
 800b39e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3a2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b3a6:	4798      	blx	r3
 800b3a8:	464d      	mov	r5, r9
 800b3aa:	42bd      	cmp	r5, r7
 800b3ac:	d02d      	beq.n	800b40a <_scanf_i+0x1da>
 800b3ae:	6822      	ldr	r2, [r4, #0]
 800b3b0:	f012 0210 	ands.w	r2, r2, #16
 800b3b4:	d113      	bne.n	800b3de <_scanf_i+0x1ae>
 800b3b6:	702a      	strb	r2, [r5, #0]
 800b3b8:	4639      	mov	r1, r7
 800b3ba:	6863      	ldr	r3, [r4, #4]
 800b3bc:	4650      	mov	r0, sl
 800b3be:	9e01      	ldr	r6, [sp, #4]
 800b3c0:	47b0      	blx	r6
 800b3c2:	6821      	ldr	r1, [r4, #0]
 800b3c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b3c8:	f011 0f20 	tst.w	r1, #32
 800b3cc:	d013      	beq.n	800b3f6 <_scanf_i+0x1c6>
 800b3ce:	1d1a      	adds	r2, r3, #4
 800b3d0:	f8c8 2000 	str.w	r2, [r8]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6018      	str	r0, [r3, #0]
 800b3d8:	68e3      	ldr	r3, [r4, #12]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	60e3      	str	r3, [r4, #12]
 800b3de:	2000      	movs	r0, #0
 800b3e0:	1bed      	subs	r5, r5, r7
 800b3e2:	44ab      	add	fp, r5
 800b3e4:	6925      	ldr	r5, [r4, #16]
 800b3e6:	445d      	add	r5, fp
 800b3e8:	6125      	str	r5, [r4, #16]
 800b3ea:	b007      	add	sp, #28
 800b3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f0:	f04f 0b00 	mov.w	fp, #0
 800b3f4:	e7ca      	b.n	800b38c <_scanf_i+0x15c>
 800b3f6:	1d1a      	adds	r2, r3, #4
 800b3f8:	f8c8 2000 	str.w	r2, [r8]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f011 0f01 	tst.w	r1, #1
 800b402:	bf14      	ite	ne
 800b404:	8018      	strhne	r0, [r3, #0]
 800b406:	6018      	streq	r0, [r3, #0]
 800b408:	e7e6      	b.n	800b3d8 <_scanf_i+0x1a8>
 800b40a:	2001      	movs	r0, #1
 800b40c:	e7ed      	b.n	800b3ea <_scanf_i+0x1ba>
 800b40e:	bf00      	nop
 800b410:	0800b9f4 	.word	0x0800b9f4
 800b414:	0800a0bd 	.word	0x0800a0bd
 800b418:	08009fc1 	.word	0x08009fc1
 800b41c:	0800bee1 	.word	0x0800bee1

0800b420 <__sccl>:
 800b420:	b570      	push	{r4, r5, r6, lr}
 800b422:	780b      	ldrb	r3, [r1, #0]
 800b424:	4604      	mov	r4, r0
 800b426:	2b5e      	cmp	r3, #94	; 0x5e
 800b428:	bf13      	iteet	ne
 800b42a:	2200      	movne	r2, #0
 800b42c:	2201      	moveq	r2, #1
 800b42e:	784b      	ldrbeq	r3, [r1, #1]
 800b430:	1c48      	addne	r0, r1, #1
 800b432:	bf08      	it	eq
 800b434:	1c88      	addeq	r0, r1, #2
 800b436:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b43a:	1e61      	subs	r1, r4, #1
 800b43c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b440:	42a9      	cmp	r1, r5
 800b442:	d1fb      	bne.n	800b43c <__sccl+0x1c>
 800b444:	b90b      	cbnz	r3, 800b44a <__sccl+0x2a>
 800b446:	3801      	subs	r0, #1
 800b448:	bd70      	pop	{r4, r5, r6, pc}
 800b44a:	f082 0201 	eor.w	r2, r2, #1
 800b44e:	4605      	mov	r5, r0
 800b450:	54e2      	strb	r2, [r4, r3]
 800b452:	4628      	mov	r0, r5
 800b454:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b458:	292d      	cmp	r1, #45	; 0x2d
 800b45a:	d006      	beq.n	800b46a <__sccl+0x4a>
 800b45c:	295d      	cmp	r1, #93	; 0x5d
 800b45e:	d0f3      	beq.n	800b448 <__sccl+0x28>
 800b460:	b909      	cbnz	r1, 800b466 <__sccl+0x46>
 800b462:	4628      	mov	r0, r5
 800b464:	e7f0      	b.n	800b448 <__sccl+0x28>
 800b466:	460b      	mov	r3, r1
 800b468:	e7f1      	b.n	800b44e <__sccl+0x2e>
 800b46a:	786e      	ldrb	r6, [r5, #1]
 800b46c:	2e5d      	cmp	r6, #93	; 0x5d
 800b46e:	d0fa      	beq.n	800b466 <__sccl+0x46>
 800b470:	42b3      	cmp	r3, r6
 800b472:	dcf8      	bgt.n	800b466 <__sccl+0x46>
 800b474:	4619      	mov	r1, r3
 800b476:	3502      	adds	r5, #2
 800b478:	3101      	adds	r1, #1
 800b47a:	428e      	cmp	r6, r1
 800b47c:	5462      	strb	r2, [r4, r1]
 800b47e:	dcfb      	bgt.n	800b478 <__sccl+0x58>
 800b480:	1af1      	subs	r1, r6, r3
 800b482:	3901      	subs	r1, #1
 800b484:	42b3      	cmp	r3, r6
 800b486:	bfa8      	it	ge
 800b488:	2100      	movge	r1, #0
 800b48a:	1c58      	adds	r0, r3, #1
 800b48c:	1843      	adds	r3, r0, r1
 800b48e:	e7e0      	b.n	800b452 <__sccl+0x32>

0800b490 <__submore>:
 800b490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b494:	460c      	mov	r4, r1
 800b496:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b49c:	4299      	cmp	r1, r3
 800b49e:	d11b      	bne.n	800b4d8 <__submore+0x48>
 800b4a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b4a4:	f7fd ff34 	bl	8009310 <_malloc_r>
 800b4a8:	b918      	cbnz	r0, 800b4b2 <__submore+0x22>
 800b4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4b6:	63a3      	str	r3, [r4, #56]	; 0x38
 800b4b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b4bc:	6360      	str	r0, [r4, #52]	; 0x34
 800b4be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b4c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b4c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b4ca:	7043      	strb	r3, [r0, #1]
 800b4cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b4d0:	7003      	strb	r3, [r0, #0]
 800b4d2:	6020      	str	r0, [r4, #0]
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	e7ea      	b.n	800b4ae <__submore+0x1e>
 800b4d8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b4da:	0077      	lsls	r7, r6, #1
 800b4dc:	463a      	mov	r2, r7
 800b4de:	f7ff fc49 	bl	800ad74 <_realloc_r>
 800b4e2:	4605      	mov	r5, r0
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d0e0      	beq.n	800b4aa <__submore+0x1a>
 800b4e8:	eb00 0806 	add.w	r8, r0, r6
 800b4ec:	4601      	mov	r1, r0
 800b4ee:	4632      	mov	r2, r6
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	f7fe ffdb 	bl	800a4ac <memcpy>
 800b4f6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b4fa:	f8c4 8000 	str.w	r8, [r4]
 800b4fe:	e7e9      	b.n	800b4d4 <__submore+0x44>

0800b500 <_malloc_usable_size_r>:
 800b500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b504:	1f18      	subs	r0, r3, #4
 800b506:	2b00      	cmp	r3, #0
 800b508:	bfbc      	itt	lt
 800b50a:	580b      	ldrlt	r3, [r1, r0]
 800b50c:	18c0      	addlt	r0, r0, r3
 800b50e:	4770      	bx	lr

0800b510 <sqrt>:
 800b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b512:	4606      	mov	r6, r0
 800b514:	460f      	mov	r7, r1
 800b516:	f000 f81f 	bl	800b558 <__ieee754_sqrt>
 800b51a:	4632      	mov	r2, r6
 800b51c:	4604      	mov	r4, r0
 800b51e:	460d      	mov	r5, r1
 800b520:	463b      	mov	r3, r7
 800b522:	4630      	mov	r0, r6
 800b524:	4639      	mov	r1, r7
 800b526:	f7f5 fa79 	bl	8000a1c <__aeabi_dcmpun>
 800b52a:	b990      	cbnz	r0, 800b552 <sqrt+0x42>
 800b52c:	2200      	movs	r2, #0
 800b52e:	2300      	movs	r3, #0
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f5 fa4a 	bl	80009cc <__aeabi_dcmplt>
 800b538:	b158      	cbz	r0, 800b552 <sqrt+0x42>
 800b53a:	f7fd fe4b 	bl	80091d4 <__errno>
 800b53e:	2321      	movs	r3, #33	; 0x21
 800b540:	2200      	movs	r2, #0
 800b542:	6003      	str	r3, [r0, #0]
 800b544:	2300      	movs	r3, #0
 800b546:	4610      	mov	r0, r2
 800b548:	4619      	mov	r1, r3
 800b54a:	f7f5 f8f7 	bl	800073c <__aeabi_ddiv>
 800b54e:	4604      	mov	r4, r0
 800b550:	460d      	mov	r5, r1
 800b552:	4620      	mov	r0, r4
 800b554:	4629      	mov	r1, r5
 800b556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b558 <__ieee754_sqrt>:
 800b558:	f8df c158 	ldr.w	ip, [pc, #344]	; 800b6b4 <__ieee754_sqrt+0x15c>
 800b55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b560:	ea3c 0c01 	bics.w	ip, ip, r1
 800b564:	4606      	mov	r6, r0
 800b566:	460d      	mov	r5, r1
 800b568:	460c      	mov	r4, r1
 800b56a:	460a      	mov	r2, r1
 800b56c:	4607      	mov	r7, r0
 800b56e:	4603      	mov	r3, r0
 800b570:	d10f      	bne.n	800b592 <__ieee754_sqrt+0x3a>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	f7f4 ffb7 	bl	80004e8 <__aeabi_dmul>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	4630      	mov	r0, r6
 800b580:	4629      	mov	r1, r5
 800b582:	f7f4 fdfb 	bl	800017c <__adddf3>
 800b586:	4606      	mov	r6, r0
 800b588:	460d      	mov	r5, r1
 800b58a:	4630      	mov	r0, r6
 800b58c:	4629      	mov	r1, r5
 800b58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b592:	2900      	cmp	r1, #0
 800b594:	dc0e      	bgt.n	800b5b4 <__ieee754_sqrt+0x5c>
 800b596:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b59a:	ea5c 0707 	orrs.w	r7, ip, r7
 800b59e:	d0f4      	beq.n	800b58a <__ieee754_sqrt+0x32>
 800b5a0:	b141      	cbz	r1, 800b5b4 <__ieee754_sqrt+0x5c>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	f7f4 fde7 	bl	8000178 <__aeabi_dsub>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	f7f5 f8c5 	bl	800073c <__aeabi_ddiv>
 800b5b2:	e7e8      	b.n	800b586 <__ieee754_sqrt+0x2e>
 800b5b4:	1521      	asrs	r1, r4, #20
 800b5b6:	d075      	beq.n	800b6a4 <__ieee754_sqrt+0x14c>
 800b5b8:	07cc      	lsls	r4, r1, #31
 800b5ba:	f04f 0400 	mov.w	r4, #0
 800b5be:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b5c2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800b5c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b5ca:	bf5e      	ittt	pl
 800b5cc:	0fd9      	lsrpl	r1, r3, #31
 800b5ce:	005b      	lslpl	r3, r3, #1
 800b5d0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800b5d4:	0fd9      	lsrs	r1, r3, #31
 800b5d6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b5da:	2516      	movs	r5, #22
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5e2:	107f      	asrs	r7, r7, #1
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	1846      	adds	r6, r0, r1
 800b5e8:	4296      	cmp	r6, r2
 800b5ea:	bfde      	ittt	le
 800b5ec:	1b92      	suble	r2, r2, r6
 800b5ee:	1870      	addle	r0, r6, r1
 800b5f0:	1864      	addle	r4, r4, r1
 800b5f2:	0052      	lsls	r2, r2, #1
 800b5f4:	3d01      	subs	r5, #1
 800b5f6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b5fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b5fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b602:	d1f0      	bne.n	800b5e6 <__ieee754_sqrt+0x8e>
 800b604:	4629      	mov	r1, r5
 800b606:	f04f 0e20 	mov.w	lr, #32
 800b60a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b60e:	4282      	cmp	r2, r0
 800b610:	eb06 0c05 	add.w	ip, r6, r5
 800b614:	dc02      	bgt.n	800b61c <__ieee754_sqrt+0xc4>
 800b616:	d113      	bne.n	800b640 <__ieee754_sqrt+0xe8>
 800b618:	459c      	cmp	ip, r3
 800b61a:	d811      	bhi.n	800b640 <__ieee754_sqrt+0xe8>
 800b61c:	f1bc 0f00 	cmp.w	ip, #0
 800b620:	eb0c 0506 	add.w	r5, ip, r6
 800b624:	da43      	bge.n	800b6ae <__ieee754_sqrt+0x156>
 800b626:	2d00      	cmp	r5, #0
 800b628:	db41      	blt.n	800b6ae <__ieee754_sqrt+0x156>
 800b62a:	f100 0801 	add.w	r8, r0, #1
 800b62e:	1a12      	subs	r2, r2, r0
 800b630:	4640      	mov	r0, r8
 800b632:	459c      	cmp	ip, r3
 800b634:	bf88      	it	hi
 800b636:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b63a:	eba3 030c 	sub.w	r3, r3, ip
 800b63e:	4431      	add	r1, r6
 800b640:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b644:	f1be 0e01 	subs.w	lr, lr, #1
 800b648:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800b64c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b650:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b654:	d1db      	bne.n	800b60e <__ieee754_sqrt+0xb6>
 800b656:	4313      	orrs	r3, r2
 800b658:	d006      	beq.n	800b668 <__ieee754_sqrt+0x110>
 800b65a:	1c48      	adds	r0, r1, #1
 800b65c:	bf0b      	itete	eq
 800b65e:	4671      	moveq	r1, lr
 800b660:	3101      	addne	r1, #1
 800b662:	3401      	addeq	r4, #1
 800b664:	f021 0101 	bicne.w	r1, r1, #1
 800b668:	1063      	asrs	r3, r4, #1
 800b66a:	0849      	lsrs	r1, r1, #1
 800b66c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b670:	07e2      	lsls	r2, r4, #31
 800b672:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b676:	bf48      	it	mi
 800b678:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b67c:	460e      	mov	r6, r1
 800b67e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b682:	e782      	b.n	800b58a <__ieee754_sqrt+0x32>
 800b684:	0ada      	lsrs	r2, r3, #11
 800b686:	3815      	subs	r0, #21
 800b688:	055b      	lsls	r3, r3, #21
 800b68a:	2a00      	cmp	r2, #0
 800b68c:	d0fa      	beq.n	800b684 <__ieee754_sqrt+0x12c>
 800b68e:	02d5      	lsls	r5, r2, #11
 800b690:	d50a      	bpl.n	800b6a8 <__ieee754_sqrt+0x150>
 800b692:	f1c1 0420 	rsb	r4, r1, #32
 800b696:	fa23 f404 	lsr.w	r4, r3, r4
 800b69a:	1e4d      	subs	r5, r1, #1
 800b69c:	408b      	lsls	r3, r1
 800b69e:	4322      	orrs	r2, r4
 800b6a0:	1b41      	subs	r1, r0, r5
 800b6a2:	e789      	b.n	800b5b8 <__ieee754_sqrt+0x60>
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	e7f0      	b.n	800b68a <__ieee754_sqrt+0x132>
 800b6a8:	0052      	lsls	r2, r2, #1
 800b6aa:	3101      	adds	r1, #1
 800b6ac:	e7ef      	b.n	800b68e <__ieee754_sqrt+0x136>
 800b6ae:	4680      	mov	r8, r0
 800b6b0:	e7bd      	b.n	800b62e <__ieee754_sqrt+0xd6>
 800b6b2:	bf00      	nop
 800b6b4:	7ff00000 	.word	0x7ff00000

0800b6b8 <_init>:
 800b6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ba:	bf00      	nop
 800b6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6be:	bc08      	pop	{r3}
 800b6c0:	469e      	mov	lr, r3
 800b6c2:	4770      	bx	lr

0800b6c4 <_fini>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	bf00      	nop
 800b6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ca:	bc08      	pop	{r3}
 800b6cc:	469e      	mov	lr, r3
 800b6ce:	4770      	bx	lr
