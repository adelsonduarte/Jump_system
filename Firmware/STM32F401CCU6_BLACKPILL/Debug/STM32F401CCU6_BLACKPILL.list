
STM32F401CCU6_BLACKPILL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000492c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004da4  08004da4  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08004da4  08004da4  00014da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dac  08004dac  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08004db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000030  08004de4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004de4  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c34  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c4  00000000  00000000  00031c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00034558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00002e2b  00000000  00000000  00035638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000130d9  00000000  00000000  00038463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00090dc4  00000000  00000000  0004b53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000dc300  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000fc0  00000000  00000000  000dc350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045ac  00000000  00000000  000dd310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000030 	.word	0x20000030
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004aa8 	.word	0x08004aa8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000034 	.word	0x20000034
 80001d0:	08004aa8 	.word	0x08004aa8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <homeDataDisplay>:
//{
//	HW_UPDATE_DATA(col,linha);
//}

void homeDataDisplay(unsigned char* appName,unsigned char* companyName,unsigned char* appVersion)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
//    printf("%s\n",appName);
//    printf("%s\n",companyName);
//    printf("%s\n",appVersion);
    HW_HOME_DISP(appName,companyName,appVersion);
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	68b9      	ldr	r1, [r7, #8]
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	f000 f805 	bl	8000508 <HW_HOME_DISP>

}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <HW_HOME_DISP>:
	HAL_Delay(500);
	noCursor(&lcdDisplay);
}

unsigned char HW_HOME_DISP(unsigned char* appName, unsigned char* companyName, unsigned char* appVersion)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
	begin(&lcdDisplay,16,4,LCD_5x10DOTS);
 8000514:	2304      	movs	r3, #4
 8000516:	2204      	movs	r2, #4
 8000518:	2110      	movs	r1, #16
 800051a:	4812      	ldr	r0, [pc, #72]	; (8000564 <HW_HOME_DISP+0x5c>)
 800051c:	f000 f824 	bl	8000568 <begin>
	setCursor(&lcdDisplay, 0, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2100      	movs	r1, #0
 8000524:	480f      	ldr	r0, [pc, #60]	; (8000564 <HW_HOME_DISP+0x5c>)
 8000526:	f000 fa8c 	bl	8000a42 <setCursor>
	print(&lcdDisplay,appName);
 800052a:	68f9      	ldr	r1, [r7, #12]
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <HW_HOME_DISP+0x5c>)
 800052e:	f000 f915 	bl	800075c <print>
	setCursor(&lcdDisplay, 0, 1);
 8000532:	2201      	movs	r2, #1
 8000534:	2100      	movs	r1, #0
 8000536:	480b      	ldr	r0, [pc, #44]	; (8000564 <HW_HOME_DISP+0x5c>)
 8000538:	f000 fa83 	bl	8000a42 <setCursor>
	print(&lcdDisplay,companyName);
 800053c:	68b9      	ldr	r1, [r7, #8]
 800053e:	4809      	ldr	r0, [pc, #36]	; (8000564 <HW_HOME_DISP+0x5c>)
 8000540:	f000 f90c 	bl	800075c <print>
	setCursor(&lcdDisplay, 0, 3);
 8000544:	2203      	movs	r2, #3
 8000546:	2100      	movs	r1, #0
 8000548:	4806      	ldr	r0, [pc, #24]	; (8000564 <HW_HOME_DISP+0x5c>)
 800054a:	f000 fa7a 	bl	8000a42 <setCursor>
	print(&lcdDisplay,appVersion);
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <HW_HOME_DISP+0x5c>)
 8000552:	f000 f903 	bl	800075c <print>
	return &(lcdDisplay);
 8000556:	4b03      	ldr	r3, [pc, #12]	; (8000564 <HW_HOME_DISP+0x5c>)
 8000558:	b2db      	uxtb	r3, r3
}
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000004c 	.word	0x2000004c

08000568 <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	4608      	mov	r0, r1
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	4603      	mov	r3, r0
 8000578:	70fb      	strb	r3, [r7, #3]
 800057a:	460b      	mov	r3, r1
 800057c:	70bb      	strb	r3, [r7, #2]
 800057e:	4613      	mov	r3, r2
 8000580:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	461a      	mov	r2, r3
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	cb03      	ldmia	r3!, {r0, r1}
 8000596:	6010      	str	r0, [r2, #0]
 8000598:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a0:	486c      	ldr	r0, [pc, #432]	; (8000754 <begin+0x1ec>)
 80005a2:	f001 fe87 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ac:	4869      	ldr	r0, [pc, #420]	; (8000754 <begin+0x1ec>)
 80005ae:	f001 fe81 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b8:	4866      	ldr	r0, [pc, #408]	; (8000754 <begin+0x1ec>)
 80005ba:	f001 fe7b 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	4863      	ldr	r0, [pc, #396]	; (8000754 <begin+0x1ec>)
 80005c6:	f001 fe75 	bl	80022b4 <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2108      	movs	r1, #8
 80005ce:	4861      	ldr	r0, [pc, #388]	; (8000754 <begin+0x1ec>)
 80005d0:	f001 fe70 	bl	80022b4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005da:	485f      	ldr	r0, [pc, #380]	; (8000758 <begin+0x1f0>)
 80005dc:	f001 fe6a 	bl	80022b4 <HAL_GPIO_WritePin>

	#if defined(LCD_8BITMODE)
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e6:	485c      	ldr	r0, [pc, #368]	; (8000758 <begin+0x1f0>)
 80005e8:	f001 fe64 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f2:	4859      	ldr	r0, [pc, #356]	; (8000758 <begin+0x1f0>)
 80005f4:	f001 fe5e 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fe:	4856      	ldr	r0, [pc, #344]	; (8000758 <begin+0x1f0>)
 8000600:	f001 fe58 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060a:	4853      	ldr	r0, [pc, #332]	; (8000758 <begin+0x1f0>)
 800060c:	f001 fe52 	bl	80022b4 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000616:	4850      	ldr	r0, [pc, #320]	; (8000758 <begin+0x1f0>)
 8000618:	f001 fe4c 	bl	80022b4 <HAL_GPIO_WritePin>
	#endif

	if (lines > 1) {
 800061c:	78bb      	ldrb	r3, [r7, #2]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d906      	bls.n	8000630 <begin+0xc8>
		lcd->_displayfunction |= LCD_2LINE;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	b2da      	uxtb	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	78ba      	ldrb	r2, [r7, #2]
 8000634:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000636:	78fa      	ldrb	r2, [r7, #3]
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	3340      	adds	r3, #64	; 0x40
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4613      	mov	r3, r2
 8000640:	2240      	movs	r2, #64	; 0x40
 8000642:	2100      	movs	r1, #0
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 f9df 	bl	8000a08 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 800064a:	787b      	ldrb	r3, [r7, #1]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d009      	beq.n	8000664 <begin+0xfc>
 8000650:	78bb      	ldrb	r3, [r7, #2]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d106      	bne.n	8000664 <begin+0xfc>
		lcd->_displayfunction |= LCD_5x10DOTS;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	b2da      	uxtb	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 8000664:	2032      	movs	r0, #50	; 0x32
 8000666:	f000 ff69 	bl	800153c <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2108      	movs	r1, #8
 800066e:	4839      	ldr	r0, [pc, #228]	; (8000754 <begin+0x1ec>)
 8000670:	f001 fe20 	bl	80022b4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067a:	4837      	ldr	r0, [pc, #220]	; (8000758 <begin+0x1f0>)
 800067c:	f001 fe1a 	bl	80022b4 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000686:	4834      	ldr	r0, [pc, #208]	; (8000758 <begin+0x1f0>)
 8000688:	f001 fe14 	bl	80022b4 <HAL_GPIO_WritePin>
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d015      	beq.n	80006c0 <begin+0x158>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 8000694:	2003      	movs	r0, #3
 8000696:	f000 f901 	bl	800089c <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 800069a:	2005      	movs	r0, #5
 800069c:	f000 ff4e 	bl	800153c <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f000 f8fb 	bl	800089c <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 80006a6:	2005      	movs	r0, #5
 80006a8:	f000 ff48 	bl	800153c <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f8f5 	bl	800089c <write4bits>
		HAL_Delay(5);
 80006b2:	2005      	movs	r0, #5
 80006b4:	f000 ff42 	bl	800153c <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 80006b8:	2002      	movs	r0, #2
 80006ba:	f000 f8ef 	bl	800089c <write4bits>
 80006be:	e023      	b.n	8000708 <begin+0x1a0>

		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 23, pg 45 

		// Envia sequência de comando
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	f043 0320 	orr.w	r3, r3, #32
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f98b 	bl	80009e8 <command>
		HAL_Delay(6);  // wait more than 4.1 ms
 80006d2:	2006      	movs	r0, #6
 80006d4:	f000 ff32 	bl	800153c <HAL_Delay>

		// Segundo envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	f043 0320 	orr.w	r3, r3, #32
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 f97f 	bl	80009e8 <command>
		HAL_Delay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 ff26 	bl	800153c <HAL_Delay>

		// Terceiro envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	f043 0320 	orr.w	r3, r3, #32
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f973 	bl	80009e8 <command>
		HAL_Delay(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 ff1a 	bl	800153c <HAL_Delay>
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	f043 0320 	orr.w	r3, r3, #32
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f967 	bl	80009e8 <command>
    HAL_Delay(1);
 800071a:	2001      	movs	r0, #1
 800071c:	f000 ff0e 	bl	800153c <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2204      	movs	r2, #4
 8000724:	705a      	strb	r2, [r3, #1]
    display(lcd);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f848 	bl	80007bc <display>

    // Limpa display
    clear(lcd);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 f836 	bl	800079e <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2202      	movs	r2, #2
 8000736:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	789b      	ldrb	r3, [r3, #2]
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4619      	mov	r1, r3
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f94f 	bl	80009e8 <command>
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40020400 	.word	0x40020400
 8000758:	40020000 	.word	0x40020000

0800075c <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 8000766:	6838      	ldr	r0, [r7, #0]
 8000768:	f7ff fd34 	bl	80001d4 <strlen>
 800076c:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 800076e:	2300      	movs	r3, #0
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	e00b      	b.n	800078c <print+0x30>
		write(lcd ,*(value+i));
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	4413      	add	r3, r2
 800077a:	f993 3000 	ldrsb.w	r3, [r3]
 800077e:	4619      	mov	r1, r3
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f833 	bl	80007ec <write>
	for (uint8_t i = 0; i < Lengh; i++){
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	3301      	adds	r3, #1
 800078a:	73fb      	strb	r3, [r7, #15]
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	429a      	cmp	r2, r3
 8000792:	d8ef      	bhi.n	8000774 <print+0x18>
	}
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 80007a6:	2101      	movs	r1, #1
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f91d 	bl	80009e8 <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 80007ae:	2002      	movs	r0, #2
 80007b0:	f000 fec4 	bl	800153c <HAL_Delay>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	785b      	ldrb	r3, [r3, #1]
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	785b      	ldrb	r3, [r3, #1]
 80007d6:	f043 0308 	orr.w	r3, r3, #8
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f902 	bl	80009e8 <command>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2201      	movs	r2, #1
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f804 	bl	800080c <send>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
 8000818:	4613      	mov	r3, r2
 800081a:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 800081c:	78bb      	ldrb	r3, [r7, #2]
 800081e:	461a      	mov	r2, r3
 8000820:	2108      	movs	r1, #8
 8000822:	4811      	ldr	r0, [pc, #68]	; (8000868 <send+0x5c>)
 8000824:	f001 fd46 	bl	80022b4 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800082e:	480f      	ldr	r0, [pc, #60]	; (800086c <send+0x60>)
 8000830:	f001 fd40 	bl	80022b4 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	f003 0310 	and.w	r3, r3, #16
 800083c:	2b00      	cmp	r3, #0
 800083e:	d004      	beq.n	800084a <send+0x3e>
	    write8bits(value);
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f866 	bl	8000914 <write8bits>
	    write4bits(value);
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 8000848:	e009      	b.n	800085e <send+0x52>
	    write4bits(value>>4);
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	091b      	lsrs	r3, r3, #4
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f823 	bl	800089c <write4bits>
	    write4bits(value);
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f81f 	bl	800089c <write4bits>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40020400 	.word	0x40020400
 800086c:	40020000 	.word	0x40020000

08000870 <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <pulseEnable+0x28>)
 800087c:	f001 fd1a 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f000 fe5b 	bl	800153c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <pulseEnable+0x28>)
 800088e:	f001 fd11 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40020000 	.word	0x40020000

0800089c <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b4:	4816      	ldr	r0, [pc, #88]	; (8000910 <write4bits+0x74>)
 80008b6:	f001 fcfd 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008cc:	4810      	ldr	r0, [pc, #64]	; (8000910 <write4bits+0x74>)
 80008ce:	f001 fcf1 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	089b      	lsrs	r3, r3, #2
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	461a      	mov	r2, r3
 80008e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e4:	480a      	ldr	r0, [pc, #40]	; (8000910 <write4bits+0x74>)
 80008e6:	f001 fce5 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	461a      	mov	r2, r3
 80008f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <write4bits+0x74>)
 80008fe:	f001 fcd9 	bl	80022b4 <HAL_GPIO_WritePin>

	pulseEnable();
 8000902:	f7ff ffb5 	bl	8000870 <pulseEnable>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40020400 	.word	0x40020400

08000914 <write8bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write8bits(uint8_t value){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,(value >> 0) & 0x01);
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800092c:	482c      	ldr	r0, [pc, #176]	; (80009e0 <write8bits+0xcc>)
 800092e:	f001 fcc1 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,(value >> 1) & 0x01);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	461a      	mov	r2, r3
 8000940:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000944:	4826      	ldr	r0, [pc, #152]	; (80009e0 <write8bits+0xcc>)
 8000946:	f001 fcb5 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,(value >> 2) & 0x01);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	b2db      	uxtb	r3, r3
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	b2db      	uxtb	r3, r3
 8000956:	461a      	mov	r2, r3
 8000958:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095c:	4820      	ldr	r0, [pc, #128]	; (80009e0 <write8bits+0xcc>)
 800095e:	f001 fca9 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,(value >> 3) & 0x01);
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	b2db      	uxtb	r3, r3
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	b2db      	uxtb	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000974:	481a      	ldr	r0, [pc, #104]	; (80009e0 <write8bits+0xcc>)
 8000976:	f001 fc9d 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 4) & 0x01);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	091b      	lsrs	r3, r3, #4
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	461a      	mov	r2, r3
 8000988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800098c:	4815      	ldr	r0, [pc, #84]	; (80009e4 <write8bits+0xd0>)
 800098e:	f001 fc91 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 5) & 0x01);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	095b      	lsrs	r3, r3, #5
 8000996:	b2db      	uxtb	r3, r3
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a4:	480f      	ldr	r0, [pc, #60]	; (80009e4 <write8bits+0xd0>)
 80009a6:	f001 fc85 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 6) & 0x01);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	099b      	lsrs	r3, r3, #6
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009bc:	4809      	ldr	r0, [pc, #36]	; (80009e4 <write8bits+0xd0>)
 80009be:	f001 fc79 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 7) & 0x01);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	09db      	lsrs	r3, r3, #7
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	461a      	mov	r2, r3
 80009ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <write8bits+0xd0>)
 80009d0:	f001 fc70 	bl	80022b4 <HAL_GPIO_WritePin>

	pulseEnable();
 80009d4:	f7ff ff4c 	bl	8000870 <pulseEnable>

}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400

080009e8 <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	2200      	movs	r2, #0
 80009f8:	4619      	mov	r1, r3
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ff06 	bl	800080c <send>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	71da      	strb	r2, [r3, #7]
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b084      	sub	sp, #16
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	70fb      	strb	r3, [r7, #3]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 8000a52:	2304      	movs	r3, #4
 8000a54:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 8000a56:	78bb      	ldrb	r3, [r7, #2]
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d803      	bhi.n	8000a66 <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	3b01      	subs	r3, #1
 8000a64:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	78db      	ldrb	r3, [r3, #3]
 8000a6a:	78ba      	ldrb	r2, [r7, #2]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d303      	bcc.n	8000a78 <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	78db      	ldrb	r3, [r3, #3]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 8000a78:	78bb      	ldrb	r3, [r7, #2]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	791a      	ldrb	r2, [r3, #4]
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	4413      	add	r3, r2
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	b25b      	sxtb	r3, r3
 8000a88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	4619      	mov	r1, r3
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ffa8 	bl	80009e8 <command>
}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa6:	f000 fcd7 	bl	8001458 <HAL_Init>
  	  unsigned char menuSelect;
  	  unsigned char menuDisplay;
  	  unsigned char menuState;
    };

    struct Menu menuTesteMain = {IDDLE,IDDLE,IDDLE,IDDLE};
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
    struct Menu menuTesteSub = {IDDLE,IDDLE,IDDLE,IDDLE};
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
    unsigned char displayUpdateStatus = IDDLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f843 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f000 f9c3 	bl	8000e44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000abe:	f000 f9a1 	bl	8000e04 <MX_DMA_Init>
  MX_TIM2_Init();
 8000ac2:	f000 f8d3 	bl	8000c6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ac6:	f000 f925 	bl	8000d14 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000aca:	f000 f971 	bl	8000db0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ace:	f000 f897 	bl	8000c00 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000ad2:	f003 fef7 	bl	80048c4 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <main+0x84>)
 8000ade:	f001 fbe9 	bl	80022b4 <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4910      	ldr	r1, [pc, #64]	; (8000b28 <main+0x88>)
 8000ae6:	4811      	ldr	r0, [pc, #68]	; (8000b2c <main+0x8c>)
 8000ae8:	f002 fe05 	bl	80036f6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <main+0x90>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <main+0x90>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f022 0208 	bic.w	r2, r2, #8
 8000afa:	601a      	str	r2, [r3, #0]
  homeDataDisplay(appNameMsg,companyNameMsg,appVersionMsg);
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <main+0x94>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <main+0x98>)
 8000b02:	6811      	ldr	r1, [r2, #0]
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <main+0x9c>)
 8000b06:	6812      	ldr	r2, [r2, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fced 	bl	80004e8 <homeDataDisplay>
  }
#endif
#if _HWVALIDATION
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b12:	4804      	ldr	r0, [pc, #16]	; (8000b24 <main+0x84>)
 8000b14:	f001 fbe7 	bl	80022e6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b1c:	f000 fd0e 	bl	800153c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b20:	e7f5      	b.n	8000b0e <main+0x6e>
 8000b22:	bf00      	nop
 8000b24:	40020800 	.word	0x40020800
 8000b28:	200001e8 	.word	0x200001e8
 8000b2c:	2000013c 	.word	0x2000013c
 8000b30:	20000180 	.word	0x20000180
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	20000008 	.word	0x20000008

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	; 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2230      	movs	r2, #48	; 0x30
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 ffa2 	bl	8004a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <SystemClock_Config+0xb8>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <SystemClock_Config+0xb8>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <SystemClock_Config+0xb8>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <SystemClock_Config+0xbc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <SystemClock_Config+0xbc>)
 8000b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <SystemClock_Config+0xbc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba8:	2310      	movs	r3, #16
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f001 fbb1 	bl	800231c <HAL_RCC_OscConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bc0:	f000 fa4e 	bl	8001060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fe13 	bl	800280c <HAL_RCC_ClockConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000bec:	f000 fa38 	bl	8001060 <Error_Handler>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3750      	adds	r7, #80	; 0x50
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c06:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <MX_SPI1_Init+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c4c:	220a      	movs	r2, #10
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c52:	f001 fffb 	bl	8002c4c <HAL_SPI_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c5c:	f000 fa00 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000054 	.word	0x20000054
 8000c68:	40013000 	.word	0x40013000

08000c6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	2224      	movs	r2, #36	; 0x24
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 ff0c 	bl	8004a98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_TIM2_Init+0xa4>)
 8000c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_TIM2_Init+0xa4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_TIM2_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_TIM2_Init+0xa4>)
 8000c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_TIM2_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_TIM2_Init+0xa4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_TIM2_Init+0xa4>)
 8000cdc:	f002 f88e 	bl	8002dfc <HAL_TIM_Encoder_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ce6:	f000 f9bb 	bl	8001060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4806      	ldr	r0, [pc, #24]	; (8000d10 <MX_TIM2_Init+0xa4>)
 8000cf8:	f002 fc2e 	bl	8003558 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000d02:	f000 f9ad 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	3730      	adds	r7, #48	; 0x30
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000ac 	.word	0x200000ac

08000d14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_TIM3_Init+0x94>)
 8000d32:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <MX_TIM3_Init+0x98>)
 8000d34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_TIM3_Init+0x94>)
 8000d38:	2247      	movs	r2, #71	; 0x47
 8000d3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_TIM3_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_TIM3_Init+0x94>)
 8000d44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_TIM3_Init+0x94>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_TIM3_Init+0x94>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d56:	4814      	ldr	r0, [pc, #80]	; (8000da8 <MX_TIM3_Init+0x94>)
 8000d58:	f002 f801 	bl	8002d5e <HAL_TIM_Base_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d62:	f000 f97d 	bl	8001060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	4619      	mov	r1, r3
 8000d72:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_TIM3_Init+0x94>)
 8000d74:	f002 f9f0 	bl	8003158 <HAL_TIM_ConfigClockSource>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d7e:	f000 f96f 	bl	8001060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MX_TIM3_Init+0x94>)
 8000d90:	f002 fbe2 	bl	8003558 <HAL_TIMEx_MasterConfigSynchronization>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d9a:	f000 f961 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000f4 	.word	0x200000f4
 8000dac:	40000400 	.word	0x40000400

08000db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <MX_USART2_UART_Init+0x50>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000de8:	f002 fc38 	bl	800365c <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000df2:	f000 f935 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000013c 	.word	0x2000013c
 8000e00:	40004400 	.word	0x40004400

08000e04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_DMA_Init+0x3c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <MX_DMA_Init+0x3c>)
 8000e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_DMA_Init+0x3c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2010      	movs	r0, #16
 8000e2c:	f000 fc85 	bl	800173a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e30:	2010      	movs	r0, #16
 8000e32:	f000 fc9e 	bl	8001772 <HAL_NVIC_EnableIRQ>

}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a42      	ldr	r2, [pc, #264]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a3b      	ldr	r2, [pc, #236]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b39      	ldr	r3, [pc, #228]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a34      	ldr	r2, [pc, #208]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a2d      	ldr	r2, [pc, #180]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed0:	4827      	ldr	r0, [pc, #156]	; (8000f70 <MX_GPIO_Init+0x12c>)
 8000ed2:	f001 f9ef 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f649 7110 	movw	r1, #40720	; 0x9f10
 8000edc:	4825      	ldr	r0, [pc, #148]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000ede:	f001 f9e9 	bl	80022b4 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f24f 2108 	movw	r1, #61960	; 0xf208
 8000ee8:	4823      	ldr	r0, [pc, #140]	; (8000f78 <MX_GPIO_Init+0x134>)
 8000eea:	f001 f9e3 	bl	80022b4 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_D2B9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	481a      	ldr	r0, [pc, #104]	; (8000f70 <MX_GPIO_Init+0x12c>)
 8000f08:	f001 f850 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LCD_D3_Pin LCD_D2_Pin LCD_D1_Pin
                           LCD_D0_Pin LCD_EN_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8000f0c:	f649 7310 	movw	r3, #40720	; 0x9f10
 8000f10:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4813      	ldr	r0, [pc, #76]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000f26:	f001 f841 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_RS_Pin LCD_D2B9_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8000f2a:	f24f 2308 	movw	r3, #61960	; 0xf208
 8000f2e:	617b      	str	r3, [r7, #20]
                          |LCD_RS_Pin|LCD_D2B9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_GPIO_Init+0x134>)
 8000f44:	f001 f832 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_MENU_Pin BT_AVANCA_Pin BT_SELECT_Pin BT_STOP_Pin
                           BT_INSERT_Pin */
  GPIO_InitStruct.Pin = BT_MENU_Pin|BT_AVANCA_Pin|BT_SELECT_Pin|BT_STOP_Pin
 8000f48:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8000f4c:	617b      	str	r3, [r7, #20]
                          |BT_INSERT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <MX_GPIO_Init+0x134>)
 8000f60:	f001 f824 	bl	8001fac <HAL_GPIO_Init>

}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	; 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020000 	.word	0x40020000
 8000f78:	40020400 	.word	0x40020400

08000f7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d110      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		timer3Count+=1;  //1ms
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f94:	6013      	str	r3, [r2, #0]
		if(timer3Count == 10) //10ms
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b0a      	cmp	r3, #10
 8000f9c:	d107      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			timer3Data += 10;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	330a      	adds	r3, #10
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fa6:	6013      	str	r3, [r2, #0]
			timer3Count = 0;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
		}
	}

}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	200000f4 	.word	0x200000f4
 8000fc0:	200001e4 	.word	0x200001e4
 8000fc4:	200001e0 	.word	0x200001e0

08000fc8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]

	uartFlagRx = TRUE;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_UARTEx_RxEventCallback+0x40>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000fda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fde:	480b      	ldr	r0, [pc, #44]	; (800100c <HAL_UARTEx_RxEventCallback+0x44>)
 8000fe0:	f001 f981 	bl	80022e6 <HAL_GPIO_TogglePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	490a      	ldr	r1, [pc, #40]	; (8001010 <HAL_UARTEx_RxEventCallback+0x48>)
 8000fe8:	480a      	ldr	r0, [pc, #40]	; (8001014 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000fea:	f002 fb84 	bl	80036f6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_UARTEx_RxEventCallback+0x50>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_UARTEx_RxEventCallback+0x50>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0208 	bic.w	r2, r2, #8
 8000ffc:	601a      	str	r2, [r3, #0]

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200001e9 	.word	0x200001e9
 800100c:	40020800 	.word	0x40020800
 8001010:	200001e8 	.word	0x200001e8
 8001014:	2000013c 	.word	0x2000013c
 8001018:	20000180 	.word	0x20000180

0800101c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d10e      	bne.n	800104a <HAL_TIM_IC_CaptureCallback+0x2e>
	{
		if(htim->Channel == 2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7f1b      	ldrb	r3, [r3, #28]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d103      	bne.n	800103c <HAL_TIM_IC_CaptureCallback+0x20>
		{
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
			sensorFlag = 1;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_TIM_IC_CaptureCallback+0x40>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
			sensorFlag = 0;
		}
	}

}
 800103a:	e006      	b.n	800104a <HAL_TIM_IC_CaptureCallback+0x2e>
		else if(htim->Channel == 1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7f1b      	ldrb	r3, [r3, #28]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d102      	bne.n	800104a <HAL_TIM_IC_CaptureCallback+0x2e>
			sensorFlag = 0;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_TIM_IC_CaptureCallback+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200000ac 	.word	0x200000ac
 800105c:	2000000c 	.word	0x2000000c

08001060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001068:	e7fe      	b.n	8001068 <Error_Handler+0x8>
	...

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <HAL_MspInit+0x4c>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_MspInit+0x4c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a19      	ldr	r2, [pc, #100]	; (8001140 <HAL_SPI_MspInit+0x84>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d12b      	bne.n	8001136 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <HAL_SPI_MspInit+0x88>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a17      	ldr	r2, [pc, #92]	; (8001144 <HAL_SPI_MspInit+0x88>)
 80010e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_SPI_MspInit+0x88>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <HAL_SPI_MspInit+0x88>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a10      	ldr	r2, [pc, #64]	; (8001144 <HAL_SPI_MspInit+0x88>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_SPI_MspInit+0x88>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001116:	23e0      	movs	r3, #224	; 0xe0
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001126:	2305      	movs	r3, #5
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <HAL_SPI_MspInit+0x8c>)
 8001132:	f000 ff3b 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40013000 	.word	0x40013000
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000

0800114c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800116c:	d133      	bne.n	80011d6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_TIM_Encoder_MspInit+0x94>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011a6:	2303      	movs	r3, #3
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011b6:	2301      	movs	r3, #1
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <HAL_TIM_Encoder_MspInit+0x98>)
 80011c2:	f000 fef3 	bl	8001fac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	201c      	movs	r0, #28
 80011cc:	f000 fab5 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011d0:	201c      	movs	r0, #28
 80011d2:	f000 face 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020000 	.word	0x40020000

080011e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <HAL_TIM_Base_MspInit+0x48>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d115      	bne.n	8001226 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <HAL_TIM_Base_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <HAL_TIM_Base_MspInit+0x4c>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_TIM_Base_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	201d      	movs	r0, #29
 800121c:	f000 fa8d 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001220:	201d      	movs	r0, #29
 8001222:	f000 faa6 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40000400 	.word	0x40000400
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a34      	ldr	r2, [pc, #208]	; (8001328 <HAL_UART_MspInit+0xf0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d161      	bne.n	800131e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <HAL_UART_MspInit+0xf4>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a32      	ldr	r2, [pc, #200]	; (800132c <HAL_UART_MspInit+0xf4>)
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <HAL_UART_MspInit+0xf4>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <HAL_UART_MspInit+0xf4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a2b      	ldr	r2, [pc, #172]	; (800132c <HAL_UART_MspInit+0xf4>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <HAL_UART_MspInit+0xf4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001292:	230c      	movs	r3, #12
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a2:	2307      	movs	r3, #7
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4820      	ldr	r0, [pc, #128]	; (8001330 <HAL_UART_MspInit+0xf8>)
 80012ae:	f000 fe7d 	bl	8001fac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_UART_MspInit+0xfc>)
 80012b4:	4a20      	ldr	r2, [pc, #128]	; (8001338 <HAL_UART_MspInit+0x100>)
 80012b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <HAL_UART_MspInit+0xfc>)
 80012ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_UART_MspInit+0xfc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <HAL_UART_MspInit+0xfc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_UART_MspInit+0xfc>)
 80012ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_UART_MspInit+0xfc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_UART_MspInit+0xfc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_UART_MspInit+0xfc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_UART_MspInit+0xfc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_UART_MspInit+0xfc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012f2:	4810      	ldr	r0, [pc, #64]	; (8001334 <HAL_UART_MspInit+0xfc>)
 80012f4:	f000 fa58 	bl	80017a8 <HAL_DMA_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80012fe:	f7ff feaf 	bl	8001060 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_UART_MspInit+0xfc>)
 8001306:	639a      	str	r2, [r3, #56]	; 0x38
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_UART_MspInit+0xfc>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2026      	movs	r0, #38	; 0x26
 8001314:	f000 fa11 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001318:	2026      	movs	r0, #38	; 0x26
 800131a:	f000 fa2a 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40004400 	.word	0x40004400
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000
 8001334:	20000180 	.word	0x20000180
 8001338:	40026088 	.word	0x40026088

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <NMI_Handler+0x4>

08001342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <HardFault_Handler+0x4>

08001348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <MemManage_Handler+0x4>

0800134e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <UsageFault_Handler+0x4>

0800135a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001388:	f000 f8b8 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <DMA1_Stream5_IRQHandler+0x10>)
 8001396:	f000 fb9f 	bl	8001ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000180 	.word	0x20000180

080013a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <TIM2_IRQHandler+0x10>)
 80013aa:	f001 fdcd 	bl	8002f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200000ac 	.word	0x200000ac

080013b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <TIM3_IRQHandler+0x10>)
 80013be:	f001 fdc3 	bl	8002f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200000f4 	.word	0x200000f4

080013cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <USART2_IRQHandler+0x10>)
 80013d2:	f002 f9f5 	bl	80037c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000013c 	.word	0x2000013c

080013e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <SystemInit+0x20>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <SystemInit+0x20>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800143c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800140a:	490e      	ldr	r1, [pc, #56]	; (8001444 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800140c:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001420:	4c0b      	ldr	r4, [pc, #44]	; (8001450 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800142e:	f7ff ffd7 	bl	80013e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001432:	f003 fb0d 	bl	8004a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff fb33 	bl	8000aa0 <main>
  bx  lr    
 800143a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800143c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001448:	08004db4 	.word	0x08004db4
  ldr r2, =_sbss
 800144c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001450:	20000204 	.word	0x20000204

08001454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <HAL_Init+0x40>)
 8001462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_Init+0x40>)
 800146e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_Init+0x40>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f94f 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	200f      	movs	r0, #15
 8001488:	f000 f808 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff fdee 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x54>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x58>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f967 	bl	800178e <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00e      	b.n	80014e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d80a      	bhi.n	80014e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 f92f 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <HAL_InitTick+0x5c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000010 	.word	0x20000010
 80014f4:	20000018 	.word	0x20000018
 80014f8:	20000014 	.word	0x20000014

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000018 	.word	0x20000018
 8001520:	200001ec 	.word	0x200001ec

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200001ec 	.word	0x200001ec

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000018 	.word	0x20000018

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4907      	ldr	r1, [pc, #28]	; (8001620 <__NVIC_EnableIRQ+0x38>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff29 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff3e 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff8e 	bl	8001678 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5d 	bl	8001624 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff31 	bl	80015e8 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017b4:	f7ff feb6 	bl	8001524 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e099      	b.n	80018f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0201 	bic.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e4:	e00f      	b.n	8001806 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017e6:	f7ff fe9d 	bl	8001524 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b05      	cmp	r3, #5
 80017f2:	d908      	bls.n	8001806 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2220      	movs	r2, #32
 80017f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2203      	movs	r2, #3
 80017fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e078      	b.n	80018f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e8      	bne.n	80017e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_DMA_Init+0x158>)
 8001820:	4013      	ands	r3, r2
 8001822:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001832:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4313      	orrs	r3, r2
 8001856:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	2b04      	cmp	r3, #4
 800185e:	d107      	bne.n	8001870 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	4313      	orrs	r3, r2
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4313      	orrs	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f023 0307 	bic.w	r3, r3, #7
 8001886:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	4313      	orrs	r3, r2
 8001890:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	2b04      	cmp	r3, #4
 8001898:	d117      	bne.n	80018ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00e      	beq.n	80018ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 fb01 	bl	8001eb4 <DMA_CheckFifoParam>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2240      	movs	r2, #64	; 0x40
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018c6:	2301      	movs	r3, #1
 80018c8:	e016      	b.n	80018f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fab8 	bl	8001e48 <DMA_CalcBaseAndBitshift>
 80018d8:	4603      	mov	r3, r0
 80018da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e0:	223f      	movs	r2, #63	; 0x3f
 80018e2:	409a      	lsls	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	f010803f 	.word	0xf010803f

08001904 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_DMA_Start_IT+0x26>
 8001926:	2302      	movs	r3, #2
 8001928:	e040      	b.n	80019ac <HAL_DMA_Start_IT+0xa8>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d12f      	bne.n	800199e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2202      	movs	r2, #2
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 fa4a 	bl	8001dec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195c:	223f      	movs	r2, #63	; 0x3f
 800195e:	409a      	lsls	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0216 	orr.w	r2, r2, #22
 8001972:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0208 	orr.w	r2, r2, #8
 800198a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e005      	b.n	80019aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
 80019a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019c2:	f7ff fdaf 	bl	8001524 <HAL_GetTick>
 80019c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d008      	beq.n	80019e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e052      	b.n	8001a8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0216 	bic.w	r2, r2, #22
 80019f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <HAL_DMA_Abort+0x62>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0208 	bic.w	r2, r2, #8
 8001a24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0201 	bic.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a36:	e013      	b.n	8001a60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a38:	f7ff fd74 	bl	8001524 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	d90c      	bls.n	8001a60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e015      	b.n	8001a8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1e4      	bne.n	8001a38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	223f      	movs	r2, #63	; 0x3f
 8001a74:	409a      	lsls	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d004      	beq.n	8001ab2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00c      	b.n	8001acc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2205      	movs	r2, #5
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0201 	bic.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ae4:	4b8e      	ldr	r3, [pc, #568]	; (8001d20 <HAL_DMA_IRQHandler+0x248>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a8e      	ldr	r2, [pc, #568]	; (8001d24 <HAL_DMA_IRQHandler+0x24c>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	0a9b      	lsrs	r3, r3, #10
 8001af0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	2208      	movs	r2, #8
 8001b04:	409a      	lsls	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d01a      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d013      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0204 	bic.w	r2, r2, #4
 8001b2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	2208      	movs	r2, #8
 8001b32:	409a      	lsls	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	2201      	movs	r2, #1
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d012      	beq.n	8001b7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00b      	beq.n	8001b7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	2201      	movs	r2, #1
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b72:	f043 0202 	orr.w	r2, r3, #2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	2204      	movs	r2, #4
 8001b80:	409a      	lsls	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d012      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00b      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba8:	f043 0204 	orr.w	r2, r3, #4
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	2210      	movs	r2, #16
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d043      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d03c      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	2210      	movs	r2, #16
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d018      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d108      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d024      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	4798      	blx	r3
 8001c06:	e01f      	b.n	8001c48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01b      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4798      	blx	r3
 8001c18:	e016      	b.n	8001c48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d107      	bne.n	8001c38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0208 	bic.w	r2, r2, #8
 8001c36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 808f 	beq.w	8001d78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8087 	beq.w	8001d78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	2220      	movs	r2, #32
 8001c70:	409a      	lsls	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d136      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0216 	bic.w	r2, r2, #22
 8001c90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d103      	bne.n	8001cb2 <HAL_DMA_IRQHandler+0x1da>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0208 	bic.w	r2, r2, #8
 8001cc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	223f      	movs	r2, #63	; 0x3f
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d07e      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
        }
        return;
 8001cee:	e079      	b.n	8001de4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d01d      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10d      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d031      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
 8001d1c:	e02c      	b.n	8001d78 <HAL_DMA_IRQHandler+0x2a0>
 8001d1e:	bf00      	nop
 8001d20:	20000010 	.word	0x20000010
 8001d24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d023      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
 8001d38:	e01e      	b.n	8001d78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10f      	bne.n	8001d68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0210 	bic.w	r2, r2, #16
 8001d56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d032      	beq.n	8001de6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d022      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2205      	movs	r2, #5
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	3301      	adds	r3, #1
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d307      	bcc.n	8001dc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f2      	bne.n	8001da4 <HAL_DMA_IRQHandler+0x2cc>
 8001dbe:	e000      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001dc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	4798      	blx	r3
 8001de2:	e000      	b.n	8001de6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001de4:	bf00      	nop
    }
  }
}
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b40      	cmp	r3, #64	; 0x40
 8001e18:	d108      	bne.n	8001e2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e2a:	e007      	b.n	8001e3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	3b10      	subs	r3, #16
 8001e58:	4a14      	ldr	r2, [pc, #80]	; (8001eac <DMA_CalcBaseAndBitshift+0x64>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e62:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d909      	bls.n	8001e8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e7e:	f023 0303 	bic.w	r3, r3, #3
 8001e82:	1d1a      	adds	r2, r3, #4
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	659a      	str	r2, [r3, #88]	; 0x58
 8001e88:	e007      	b.n	8001e9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e92:	f023 0303 	bic.w	r3, r3, #3
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	aaaaaaab 	.word	0xaaaaaaab
 8001eb0:	08004d9c 	.word	0x08004d9c

08001eb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d11f      	bne.n	8001f0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d856      	bhi.n	8001f82 <DMA_CheckFifoParam+0xce>
 8001ed4:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <DMA_CheckFifoParam+0x28>)
 8001ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eda:	bf00      	nop
 8001edc:	08001eed 	.word	0x08001eed
 8001ee0:	08001eff 	.word	0x08001eff
 8001ee4:	08001eed 	.word	0x08001eed
 8001ee8:	08001f83 	.word	0x08001f83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d046      	beq.n	8001f86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001efc:	e043      	b.n	8001f86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f06:	d140      	bne.n	8001f8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f0c:	e03d      	b.n	8001f8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f16:	d121      	bne.n	8001f5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d837      	bhi.n	8001f8e <DMA_CheckFifoParam+0xda>
 8001f1e:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <DMA_CheckFifoParam+0x70>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f35 	.word	0x08001f35
 8001f28:	08001f3b 	.word	0x08001f3b
 8001f2c:	08001f35 	.word	0x08001f35
 8001f30:	08001f4d 	.word	0x08001f4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
      break;
 8001f38:	e030      	b.n	8001f9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d025      	beq.n	8001f92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f4a:	e022      	b.n	8001f92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f54:	d11f      	bne.n	8001f96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f5a:	e01c      	b.n	8001f96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d903      	bls.n	8001f6a <DMA_CheckFifoParam+0xb6>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d003      	beq.n	8001f70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f68:	e018      	b.n	8001f9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f6e:	e015      	b.n	8001f9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00e      	beq.n	8001f9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f80:	e00b      	b.n	8001f9a <DMA_CheckFifoParam+0xe6>
      break;
 8001f82:	bf00      	nop
 8001f84:	e00a      	b.n	8001f9c <DMA_CheckFifoParam+0xe8>
      break;
 8001f86:	bf00      	nop
 8001f88:	e008      	b.n	8001f9c <DMA_CheckFifoParam+0xe8>
      break;
 8001f8a:	bf00      	nop
 8001f8c:	e006      	b.n	8001f9c <DMA_CheckFifoParam+0xe8>
      break;
 8001f8e:	bf00      	nop
 8001f90:	e004      	b.n	8001f9c <DMA_CheckFifoParam+0xe8>
      break;
 8001f92:	bf00      	nop
 8001f94:	e002      	b.n	8001f9c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f96:	bf00      	nop
 8001f98:	e000      	b.n	8001f9c <DMA_CheckFifoParam+0xe8>
      break;
 8001f9a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	e159      	b.n	800227c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc8:	2201      	movs	r2, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	f040 8148 	bne.w	8002276 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d005      	beq.n	8001ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d130      	bne.n	8002060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 0201 	and.w	r2, r3, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b03      	cmp	r3, #3
 800206a:	d017      	beq.n	800209c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d123      	bne.n	80020f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	08da      	lsrs	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3208      	adds	r2, #8
 80020b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	220f      	movs	r2, #15
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	69b9      	ldr	r1, [r7, #24]
 80020ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0203 	and.w	r2, r3, #3
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80a2 	beq.w	8002276 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b57      	ldr	r3, [pc, #348]	; (8002294 <HAL_GPIO_Init+0x2e8>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a56      	ldr	r2, [pc, #344]	; (8002294 <HAL_GPIO_Init+0x2e8>)
 800213c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b54      	ldr	r3, [pc, #336]	; (8002294 <HAL_GPIO_Init+0x2e8>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800214e:	4a52      	ldr	r2, [pc, #328]	; (8002298 <HAL_GPIO_Init+0x2ec>)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a49      	ldr	r2, [pc, #292]	; (800229c <HAL_GPIO_Init+0x2f0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d019      	beq.n	80021ae <HAL_GPIO_Init+0x202>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a48      	ldr	r2, [pc, #288]	; (80022a0 <HAL_GPIO_Init+0x2f4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_GPIO_Init+0x1fe>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a47      	ldr	r2, [pc, #284]	; (80022a4 <HAL_GPIO_Init+0x2f8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00d      	beq.n	80021a6 <HAL_GPIO_Init+0x1fa>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a46      	ldr	r2, [pc, #280]	; (80022a8 <HAL_GPIO_Init+0x2fc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d007      	beq.n	80021a2 <HAL_GPIO_Init+0x1f6>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a45      	ldr	r2, [pc, #276]	; (80022ac <HAL_GPIO_Init+0x300>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_GPIO_Init+0x1f2>
 800219a:	2304      	movs	r3, #4
 800219c:	e008      	b.n	80021b0 <HAL_GPIO_Init+0x204>
 800219e:	2307      	movs	r3, #7
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x204>
 80021a2:	2303      	movs	r3, #3
 80021a4:	e004      	b.n	80021b0 <HAL_GPIO_Init+0x204>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e002      	b.n	80021b0 <HAL_GPIO_Init+0x204>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_GPIO_Init+0x204>
 80021ae:	2300      	movs	r3, #0
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	f002 0203 	and.w	r2, r2, #3
 80021b6:	0092      	lsls	r2, r2, #2
 80021b8:	4093      	lsls	r3, r2
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c0:	4935      	ldr	r1, [pc, #212]	; (8002298 <HAL_GPIO_Init+0x2ec>)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	3302      	adds	r3, #2
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ce:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_GPIO_Init+0x304>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021f2:	4a2f      	ldr	r2, [pc, #188]	; (80022b0 <HAL_GPIO_Init+0x304>)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f8:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_GPIO_Init+0x304>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800221c:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <HAL_GPIO_Init+0x304>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_GPIO_Init+0x304>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002246:	4a1a      	ldr	r2, [pc, #104]	; (80022b0 <HAL_GPIO_Init+0x304>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_GPIO_Init+0x304>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002270:	4a0f      	ldr	r2, [pc, #60]	; (80022b0 <HAL_GPIO_Init+0x304>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3301      	adds	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b0f      	cmp	r3, #15
 8002280:	f67f aea2 	bls.w	8001fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3724      	adds	r7, #36	; 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	40013800 	.word	0x40013800
 800229c:	40020000 	.word	0x40020000
 80022a0:	40020400 	.word	0x40020400
 80022a4:	40020800 	.word	0x40020800
 80022a8:	40020c00 	.word	0x40020c00
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40013c00 	.word	0x40013c00

080022b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
 80022c0:	4613      	mov	r3, r2
 80022c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c4:	787b      	ldrb	r3, [r7, #1]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022d0:	e003      	b.n	80022da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	041a      	lsls	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	619a      	str	r2, [r3, #24]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022f8:	887a      	ldrh	r2, [r7, #2]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4013      	ands	r3, r2
 80022fe:	041a      	lsls	r2, r3, #16
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43d9      	mvns	r1, r3
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	400b      	ands	r3, r1
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	619a      	str	r2, [r3, #24]
}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e267      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d075      	beq.n	8002426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800233a:	4b88      	ldr	r3, [pc, #544]	; (800255c <HAL_RCC_OscConfig+0x240>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b04      	cmp	r3, #4
 8002344:	d00c      	beq.n	8002360 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002346:	4b85      	ldr	r3, [pc, #532]	; (800255c <HAL_RCC_OscConfig+0x240>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800234e:	2b08      	cmp	r3, #8
 8002350:	d112      	bne.n	8002378 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002352:	4b82      	ldr	r3, [pc, #520]	; (800255c <HAL_RCC_OscConfig+0x240>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235e:	d10b      	bne.n	8002378 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	4b7e      	ldr	r3, [pc, #504]	; (800255c <HAL_RCC_OscConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d05b      	beq.n	8002424 <HAL_RCC_OscConfig+0x108>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d157      	bne.n	8002424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e242      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002380:	d106      	bne.n	8002390 <HAL_RCC_OscConfig+0x74>
 8002382:	4b76      	ldr	r3, [pc, #472]	; (800255c <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a75      	ldr	r2, [pc, #468]	; (800255c <HAL_RCC_OscConfig+0x240>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e01d      	b.n	80023cc <HAL_RCC_OscConfig+0xb0>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x98>
 800239a:	4b70      	ldr	r3, [pc, #448]	; (800255c <HAL_RCC_OscConfig+0x240>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6f      	ldr	r2, [pc, #444]	; (800255c <HAL_RCC_OscConfig+0x240>)
 80023a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b6d      	ldr	r3, [pc, #436]	; (800255c <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a6c      	ldr	r2, [pc, #432]	; (800255c <HAL_RCC_OscConfig+0x240>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e00b      	b.n	80023cc <HAL_RCC_OscConfig+0xb0>
 80023b4:	4b69      	ldr	r3, [pc, #420]	; (800255c <HAL_RCC_OscConfig+0x240>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a68      	ldr	r2, [pc, #416]	; (800255c <HAL_RCC_OscConfig+0x240>)
 80023ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b66      	ldr	r3, [pc, #408]	; (800255c <HAL_RCC_OscConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a65      	ldr	r2, [pc, #404]	; (800255c <HAL_RCC_OscConfig+0x240>)
 80023c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d013      	beq.n	80023fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7ff f8a6 	bl	8001524 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023dc:	f7ff f8a2 	bl	8001524 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e207      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	4b5b      	ldr	r3, [pc, #364]	; (800255c <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0xc0>
 80023fa:	e014      	b.n	8002426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7ff f892 	bl	8001524 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002404:	f7ff f88e 	bl	8001524 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e1f3      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002416:	4b51      	ldr	r3, [pc, #324]	; (800255c <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0xe8>
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d063      	beq.n	80024fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002432:	4b4a      	ldr	r3, [pc, #296]	; (800255c <HAL_RCC_OscConfig+0x240>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <HAL_RCC_OscConfig+0x240>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002446:	2b08      	cmp	r3, #8
 8002448:	d11c      	bne.n	8002484 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244a:	4b44      	ldr	r3, [pc, #272]	; (800255c <HAL_RCC_OscConfig+0x240>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d116      	bne.n	8002484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	4b41      	ldr	r3, [pc, #260]	; (800255c <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_RCC_OscConfig+0x152>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d001      	beq.n	800246e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e1c7      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246e:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4937      	ldr	r1, [pc, #220]	; (800255c <HAL_RCC_OscConfig+0x240>)
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002482:	e03a      	b.n	80024fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d020      	beq.n	80024ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800248c:	4b34      	ldr	r3, [pc, #208]	; (8002560 <HAL_RCC_OscConfig+0x244>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7ff f847 	bl	8001524 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249a:	f7ff f843 	bl	8001524 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1a8      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b8:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4925      	ldr	r1, [pc, #148]	; (800255c <HAL_RCC_OscConfig+0x240>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]
 80024cc:	e015      	b.n	80024fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <HAL_RCC_OscConfig+0x244>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7ff f826 	bl	8001524 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024dc:	f7ff f822 	bl	8001524 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e187      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ee:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d036      	beq.n	8002574 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d016      	beq.n	800253c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_RCC_OscConfig+0x248>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7ff f806 	bl	8001524 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251c:	f7ff f802 	bl	8001524 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e167      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_OscConfig+0x240>)
 8002530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x200>
 800253a:	e01b      	b.n	8002574 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_RCC_OscConfig+0x248>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7fe ffef 	bl	8001524 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002548:	e00e      	b.n	8002568 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800254a:	f7fe ffeb 	bl	8001524 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d907      	bls.n	8002568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e150      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
 800255c:	40023800 	.word	0x40023800
 8002560:	42470000 	.word	0x42470000
 8002564:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002568:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_RCC_OscConfig+0x470>)
 800256a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1ea      	bne.n	800254a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 8097 	beq.w	80026b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002586:	4b81      	ldr	r3, [pc, #516]	; (800278c <HAL_RCC_OscConfig+0x470>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10f      	bne.n	80025b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	4b7d      	ldr	r3, [pc, #500]	; (800278c <HAL_RCC_OscConfig+0x470>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a7c      	ldr	r2, [pc, #496]	; (800278c <HAL_RCC_OscConfig+0x470>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b7a      	ldr	r3, [pc, #488]	; (800278c <HAL_RCC_OscConfig+0x470>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b77      	ldr	r3, [pc, #476]	; (8002790 <HAL_RCC_OscConfig+0x474>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d118      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025be:	4b74      	ldr	r3, [pc, #464]	; (8002790 <HAL_RCC_OscConfig+0x474>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a73      	ldr	r2, [pc, #460]	; (8002790 <HAL_RCC_OscConfig+0x474>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ca:	f7fe ffab 	bl	8001524 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d2:	f7fe ffa7 	bl	8001524 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e10c      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <HAL_RCC_OscConfig+0x474>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x2ea>
 80025f8:	4b64      	ldr	r3, [pc, #400]	; (800278c <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a63      	ldr	r2, [pc, #396]	; (800278c <HAL_RCC_OscConfig+0x470>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
 8002604:	e01c      	b.n	8002640 <HAL_RCC_OscConfig+0x324>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b05      	cmp	r3, #5
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x30c>
 800260e:	4b5f      	ldr	r3, [pc, #380]	; (800278c <HAL_RCC_OscConfig+0x470>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a5e      	ldr	r2, [pc, #376]	; (800278c <HAL_RCC_OscConfig+0x470>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
 800261a:	4b5c      	ldr	r3, [pc, #368]	; (800278c <HAL_RCC_OscConfig+0x470>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a5b      	ldr	r2, [pc, #364]	; (800278c <HAL_RCC_OscConfig+0x470>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0x324>
 8002628:	4b58      	ldr	r3, [pc, #352]	; (800278c <HAL_RCC_OscConfig+0x470>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a57      	ldr	r2, [pc, #348]	; (800278c <HAL_RCC_OscConfig+0x470>)
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
 8002634:	4b55      	ldr	r3, [pc, #340]	; (800278c <HAL_RCC_OscConfig+0x470>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	4a54      	ldr	r2, [pc, #336]	; (800278c <HAL_RCC_OscConfig+0x470>)
 800263a:	f023 0304 	bic.w	r3, r3, #4
 800263e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d015      	beq.n	8002674 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe ff6c 	bl	8001524 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264e:	e00a      	b.n	8002666 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe ff68 	bl	8001524 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e0cb      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002666:	4b49      	ldr	r3, [pc, #292]	; (800278c <HAL_RCC_OscConfig+0x470>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0ee      	beq.n	8002650 <HAL_RCC_OscConfig+0x334>
 8002672:	e014      	b.n	800269e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002674:	f7fe ff56 	bl	8001524 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267a:	e00a      	b.n	8002692 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800267c:	f7fe ff52 	bl	8001524 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0b5      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002692:	4b3e      	ldr	r3, [pc, #248]	; (800278c <HAL_RCC_OscConfig+0x470>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1ee      	bne.n	800267c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a4:	4b39      	ldr	r3, [pc, #228]	; (800278c <HAL_RCC_OscConfig+0x470>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	4a38      	ldr	r2, [pc, #224]	; (800278c <HAL_RCC_OscConfig+0x470>)
 80026aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80a1 	beq.w	80027fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ba:	4b34      	ldr	r3, [pc, #208]	; (800278c <HAL_RCC_OscConfig+0x470>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d05c      	beq.n	8002780 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d141      	bne.n	8002752 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	4b31      	ldr	r3, [pc, #196]	; (8002794 <HAL_RCC_OscConfig+0x478>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe ff26 	bl	8001524 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe ff22 	bl	8001524 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e087      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_RCC_OscConfig+0x470>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	019b      	lsls	r3, r3, #6
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	3b01      	subs	r3, #1
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	491b      	ldr	r1, [pc, #108]	; (800278c <HAL_RCC_OscConfig+0x470>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_RCC_OscConfig+0x478>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7fe fefb 	bl	8001524 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002732:	f7fe fef7 	bl	8001524 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e05c      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_RCC_OscConfig+0x470>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x416>
 8002750:	e054      	b.n	80027fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <HAL_RCC_OscConfig+0x478>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe fee4 	bl	8001524 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fee0 	bl	8001524 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e045      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_RCC_OscConfig+0x470>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x444>
 800277e:	e03d      	b.n	80027fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d107      	bne.n	8002798 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e038      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
 800278c:	40023800 	.word	0x40023800
 8002790:	40007000 	.word	0x40007000
 8002794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_RCC_OscConfig+0x4ec>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d028      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d121      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d11a      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027c8:	4013      	ands	r3, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d111      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	3b01      	subs	r3, #1
 80027e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d107      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800

0800280c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0cc      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002820:	4b68      	ldr	r3, [pc, #416]	; (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d90c      	bls.n	8002848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b65      	ldr	r3, [pc, #404]	; (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0b8      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002860:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a58      	ldr	r2, [pc, #352]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800286a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a52      	ldr	r2, [pc, #328]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002884:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	494d      	ldr	r1, [pc, #308]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d044      	beq.n	800292c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d119      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e07f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d003      	beq.n	80028ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	4b3f      	ldr	r3, [pc, #252]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e06f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028da:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e067      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ea:	4b37      	ldr	r3, [pc, #220]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4934      	ldr	r1, [pc, #208]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028fc:	f7fe fe12 	bl	8001524 <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	e00a      	b.n	800291a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002904:	f7fe fe0e 	bl	8001524 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e04f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 020c 	and.w	r2, r3, #12
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	429a      	cmp	r2, r3
 800292a:	d1eb      	bne.n	8002904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d20c      	bcs.n	8002954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e032      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4916      	ldr	r1, [pc, #88]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	490e      	ldr	r1, [pc, #56]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	4313      	orrs	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002992:	f000 f821 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8002996:	4602      	mov	r2, r0
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	490a      	ldr	r1, [pc, #40]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 80029a4:	5ccb      	ldrb	r3, [r1, r3]
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fd72 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023c00 	.word	0x40023c00
 80029c8:	40023800 	.word	0x40023800
 80029cc:	08004d84 	.word	0x08004d84
 80029d0:	20000010 	.word	0x20000010
 80029d4:	20000014 	.word	0x20000014

080029d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029dc:	b094      	sub	sp, #80	; 0x50
 80029de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	647b      	str	r3, [r7, #68]	; 0x44
 80029e4:	2300      	movs	r3, #0
 80029e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e8:	2300      	movs	r3, #0
 80029ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f0:	4b79      	ldr	r3, [pc, #484]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 030c 	and.w	r3, r3, #12
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d00d      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x40>
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	f200 80e1 	bhi.w	8002bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x34>
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d003      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a0a:	e0db      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a0c:	4b73      	ldr	r3, [pc, #460]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8002a0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a10:	e0db      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a12:	4b73      	ldr	r3, [pc, #460]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a16:	e0d8      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a18:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a22:	4b6d      	ldr	r3, [pc, #436]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d063      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2e:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	099b      	lsrs	r3, r3, #6
 8002a34:	2200      	movs	r2, #0
 8002a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
 8002a42:	2300      	movs	r3, #0
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
 8002a46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	462b      	mov	r3, r5
 8002a4e:	f04f 0000 	mov.w	r0, #0
 8002a52:	f04f 0100 	mov.w	r1, #0
 8002a56:	0159      	lsls	r1, r3, #5
 8002a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a5c:	0150      	lsls	r0, r2, #5
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4621      	mov	r1, r4
 8002a64:	1a51      	subs	r1, r2, r1
 8002a66:	6139      	str	r1, [r7, #16]
 8002a68:	4629      	mov	r1, r5
 8002a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a7c:	4659      	mov	r1, fp
 8002a7e:	018b      	lsls	r3, r1, #6
 8002a80:	4651      	mov	r1, sl
 8002a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a86:	4651      	mov	r1, sl
 8002a88:	018a      	lsls	r2, r1, #6
 8002a8a:	4651      	mov	r1, sl
 8002a8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a90:	4659      	mov	r1, fp
 8002a92:	eb63 0901 	sbc.w	r9, r3, r1
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aaa:	4690      	mov	r8, r2
 8002aac:	4699      	mov	r9, r3
 8002aae:	4623      	mov	r3, r4
 8002ab0:	eb18 0303 	adds.w	r3, r8, r3
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	462b      	mov	r3, r5
 8002ab8:	eb49 0303 	adc.w	r3, r9, r3
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aca:	4629      	mov	r1, r5
 8002acc:	020b      	lsls	r3, r1, #8
 8002ace:	4621      	mov	r1, r4
 8002ad0:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	020a      	lsls	r2, r1, #8
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ade:	2200      	movs	r2, #0
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ae4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ae8:	f7fd fb7c 	bl	80001e4 <__aeabi_uldivmod>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4613      	mov	r3, r2
 8002af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002af4:	e058      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af6:	4b38      	ldr	r3, [pc, #224]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	099b      	lsrs	r3, r3, #6
 8002afc:	2200      	movs	r2, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	4611      	mov	r1, r2
 8002b02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b06:	623b      	str	r3, [r7, #32]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b10:	4642      	mov	r2, r8
 8002b12:	464b      	mov	r3, r9
 8002b14:	f04f 0000 	mov.w	r0, #0
 8002b18:	f04f 0100 	mov.w	r1, #0
 8002b1c:	0159      	lsls	r1, r3, #5
 8002b1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b22:	0150      	lsls	r0, r2, #5
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4641      	mov	r1, r8
 8002b2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b2e:	4649      	mov	r1, r9
 8002b30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b48:	ebb2 040a 	subs.w	r4, r2, sl
 8002b4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	00eb      	lsls	r3, r5, #3
 8002b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b5e:	00e2      	lsls	r2, r4, #3
 8002b60:	4614      	mov	r4, r2
 8002b62:	461d      	mov	r5, r3
 8002b64:	4643      	mov	r3, r8
 8002b66:	18e3      	adds	r3, r4, r3
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	eb45 0303 	adc.w	r3, r5, r3
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b7e:	4629      	mov	r1, r5
 8002b80:	028b      	lsls	r3, r1, #10
 8002b82:	4621      	mov	r1, r4
 8002b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b88:	4621      	mov	r1, r4
 8002b8a:	028a      	lsls	r2, r1, #10
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b92:	2200      	movs	r2, #0
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	61fa      	str	r2, [r7, #28]
 8002b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b9c:	f7fd fb22 	bl	80001e4 <__aeabi_uldivmod>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	0c1b      	lsrs	r3, r3, #16
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bc2:	e002      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8002bc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3750      	adds	r7, #80	; 0x50
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	00f42400 	.word	0x00f42400
 8002be0:	003d0900 	.word	0x003d0900

08002be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000010 	.word	0x20000010

08002bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c00:	f7ff fff0 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	0a9b      	lsrs	r3, r3, #10
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	4903      	ldr	r1, [pc, #12]	; (8002c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	08004d94 	.word	0x08004d94

08002c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c28:	f7ff ffdc 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	0b5b      	lsrs	r3, r3, #13
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	4903      	ldr	r1, [pc, #12]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c3a:	5ccb      	ldrb	r3, [r1, r3]
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40023800 	.word	0x40023800
 8002c48:	08004d94 	.word	0x08004d94

08002c4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e07b      	b.n	8002d56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d108      	bne.n	8002c78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c6e:	d009      	beq.n	8002c84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	61da      	str	r2, [r3, #28]
 8002c76:	e005      	b.n	8002c84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fe fa0c 	bl	80010bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	ea42 0103 	orr.w	r1, r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	f003 0104 	and.w	r1, r3, #4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	f003 0210 	and.w	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e041      	b.n	8002df4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7fe fa2f 	bl	80011e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f000 fac1 	bl	8003324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e097      	b.n	8002f40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7fe f991 	bl	800114c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e40:	f023 0307 	bic.w	r3, r3, #7
 8002e44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f000 fa67 	bl	8003324 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7e:	f023 0303 	bic.w	r3, r3, #3
 8002e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002e9c:	f023 030c 	bic.w	r3, r3, #12
 8002ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	011a      	lsls	r2, r3, #4
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	031b      	lsls	r3, r3, #12
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002eda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002ee2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d122      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0202 	mvn.w	r2, #2
 8002f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fe f846 	bl	800101c <HAL_TIM_IC_CaptureCallback>
 8002f90:	e005      	b.n	8002f9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f9a7 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f9ae 	bl	80032fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d122      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0204 	mvn.w	r2, #4
 8002fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fe f81c 	bl	800101c <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f97d 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f984 	bl	80032fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b08      	cmp	r3, #8
 8003004:	d122      	bne.n	800304c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b08      	cmp	r3, #8
 8003012:	d11b      	bne.n	800304c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0208 	mvn.w	r2, #8
 800301c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2204      	movs	r2, #4
 8003022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fff2 	bl	800101c <HAL_TIM_IC_CaptureCallback>
 8003038:	e005      	b.n	8003046 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f953 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f95a 	bl	80032fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b10      	cmp	r3, #16
 8003058:	d122      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b10      	cmp	r3, #16
 8003066:	d11b      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0210 	mvn.w	r2, #16
 8003070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2208      	movs	r2, #8
 8003076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd ffc8 	bl	800101c <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f929 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f930 	bl	80032fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d10e      	bne.n	80030cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d107      	bne.n	80030cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0201 	mvn.w	r2, #1
 80030c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fd ff58 	bl	8000f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d6:	2b80      	cmp	r3, #128	; 0x80
 80030d8:	d10e      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e4:	2b80      	cmp	r3, #128	; 0x80
 80030e6:	d107      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 faa8 	bl	8003648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d10e      	bne.n	8003124 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	2b40      	cmp	r3, #64	; 0x40
 8003112:	d107      	bne.n	8003124 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800311c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f8f5 	bl	800330e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b20      	cmp	r3, #32
 8003130:	d10e      	bne.n	8003150 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b20      	cmp	r3, #32
 800313e:	d107      	bne.n	8003150 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0220 	mvn.w	r2, #32
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fa72 	bl	8003634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_TIM_ConfigClockSource+0x1c>
 8003170:	2302      	movs	r3, #2
 8003172:	e0b4      	b.n	80032de <HAL_TIM_ConfigClockSource+0x186>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800319a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ac:	d03e      	beq.n	800322c <HAL_TIM_ConfigClockSource+0xd4>
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b2:	f200 8087 	bhi.w	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ba:	f000 8086 	beq.w	80032ca <HAL_TIM_ConfigClockSource+0x172>
 80031be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c2:	d87f      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b70      	cmp	r3, #112	; 0x70
 80031c6:	d01a      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0xa6>
 80031c8:	2b70      	cmp	r3, #112	; 0x70
 80031ca:	d87b      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b60      	cmp	r3, #96	; 0x60
 80031ce:	d050      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x11a>
 80031d0:	2b60      	cmp	r3, #96	; 0x60
 80031d2:	d877      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b50      	cmp	r3, #80	; 0x50
 80031d6:	d03c      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0xfa>
 80031d8:	2b50      	cmp	r3, #80	; 0x50
 80031da:	d873      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d058      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x13a>
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d86f      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d064      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x15a>
 80031e8:	2b30      	cmp	r3, #48	; 0x30
 80031ea:	d86b      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d060      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x15a>
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d867      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d05c      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x15a>
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d05a      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x15a>
 80031fc:	e062      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f000 f983 	bl	8003518 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003220:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	609a      	str	r2, [r3, #8]
      break;
 800322a:	e04f      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6899      	ldr	r1, [r3, #8]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f000 f96c 	bl	8003518 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800324e:	609a      	str	r2, [r3, #8]
      break;
 8003250:	e03c      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	461a      	mov	r2, r3
 8003260:	f000 f8e0 	bl	8003424 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2150      	movs	r1, #80	; 0x50
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f939 	bl	80034e2 <TIM_ITRx_SetConfig>
      break;
 8003270:	e02c      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	461a      	mov	r2, r3
 8003280:	f000 f8ff 	bl	8003482 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2160      	movs	r1, #96	; 0x60
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f929 	bl	80034e2 <TIM_ITRx_SetConfig>
      break;
 8003290:	e01c      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	461a      	mov	r2, r3
 80032a0:	f000 f8c0 	bl	8003424 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2140      	movs	r1, #64	; 0x40
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f919 	bl	80034e2 <TIM_ITRx_SetConfig>
      break;
 80032b0:	e00c      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4610      	mov	r0, r2
 80032be:	f000 f910 	bl	80034e2 <TIM_ITRx_SetConfig>
      break;
 80032c2:	e003      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      break;
 80032c8:	e000      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a34      	ldr	r2, [pc, #208]	; (8003408 <TIM_Base_SetConfig+0xe4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00f      	beq.n	800335c <TIM_Base_SetConfig+0x38>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003342:	d00b      	beq.n	800335c <TIM_Base_SetConfig+0x38>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a31      	ldr	r2, [pc, #196]	; (800340c <TIM_Base_SetConfig+0xe8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d007      	beq.n	800335c <TIM_Base_SetConfig+0x38>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a30      	ldr	r2, [pc, #192]	; (8003410 <TIM_Base_SetConfig+0xec>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <TIM_Base_SetConfig+0x38>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a2f      	ldr	r2, [pc, #188]	; (8003414 <TIM_Base_SetConfig+0xf0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d108      	bne.n	800336e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a25      	ldr	r2, [pc, #148]	; (8003408 <TIM_Base_SetConfig+0xe4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01b      	beq.n	80033ae <TIM_Base_SetConfig+0x8a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337c:	d017      	beq.n	80033ae <TIM_Base_SetConfig+0x8a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a22      	ldr	r2, [pc, #136]	; (800340c <TIM_Base_SetConfig+0xe8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <TIM_Base_SetConfig+0x8a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a21      	ldr	r2, [pc, #132]	; (8003410 <TIM_Base_SetConfig+0xec>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00f      	beq.n	80033ae <TIM_Base_SetConfig+0x8a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a20      	ldr	r2, [pc, #128]	; (8003414 <TIM_Base_SetConfig+0xf0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00b      	beq.n	80033ae <TIM_Base_SetConfig+0x8a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <TIM_Base_SetConfig+0xf4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d007      	beq.n	80033ae <TIM_Base_SetConfig+0x8a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <TIM_Base_SetConfig+0xf8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d003      	beq.n	80033ae <TIM_Base_SetConfig+0x8a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <TIM_Base_SetConfig+0xfc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d108      	bne.n	80033c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a08      	ldr	r2, [pc, #32]	; (8003408 <TIM_Base_SetConfig+0xe4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d103      	bne.n	80033f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	615a      	str	r2, [r3, #20]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40010000 	.word	0x40010000
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800
 8003414:	40000c00 	.word	0x40000c00
 8003418:	40014000 	.word	0x40014000
 800341c:	40014400 	.word	0x40014400
 8003420:	40014800 	.word	0x40014800

08003424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f023 0201 	bic.w	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800344e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f023 030a 	bic.w	r3, r3, #10
 8003460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003482:	b480      	push	{r7}
 8003484:	b087      	sub	sp, #28
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f023 0210 	bic.w	r2, r3, #16
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	031b      	lsls	r3, r3, #12
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	621a      	str	r2, [r3, #32]
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	f043 0307 	orr.w	r3, r3, #7
 8003504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	609a      	str	r2, [r3, #8]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	021a      	lsls	r2, r3, #8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	431a      	orrs	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4313      	orrs	r3, r2
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	609a      	str	r2, [r3, #8]
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800356c:	2302      	movs	r3, #2
 800356e:	e050      	b.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1c      	ldr	r2, [pc, #112]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d018      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035bc:	d013      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a18      	ldr	r2, [pc, #96]	; (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a16      	ldr	r2, [pc, #88]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d009      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a15      	ldr	r2, [pc, #84]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a13      	ldr	r2, [pc, #76]	; (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d10c      	bne.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800
 800362c:	40000c00 	.word	0x40000c00
 8003630:	40014000 	.word	0x40014000

08003634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e03f      	b.n	80036ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd fdd8 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2224      	movs	r2, #36	; 0x24
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800369e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fe9b 	bl	80043dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b08c      	sub	sp, #48	; 0x30
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	4613      	mov	r3, r2
 8003702:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b20      	cmp	r3, #32
 800370e:	d152      	bne.n	80037b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e04b      	b.n	80037b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800372a:	2302      	movs	r3, #2
 800372c:	e044      	b.n	80037b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	461a      	mov	r2, r3
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fbea 	bl	8003f1c <UART_Start_Receive_DMA>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800374e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003752:	2b00      	cmp	r3, #0
 8003754:	d12c      	bne.n	80037b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	2b01      	cmp	r3, #1
 800375c:	d125      	bne.n	80037aa <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	617b      	str	r3, [r7, #20]
   return(result);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f043 0310 	orr.w	r3, r3, #16
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	330c      	adds	r3, #12
 8003792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003794:	627a      	str	r2, [r7, #36]	; 0x24
 8003796:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6a39      	ldr	r1, [r7, #32]
 800379a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80037a8:	e002      	b.n	80037b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80037b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037b4:	e000      	b.n	80037b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3730      	adds	r7, #48	; 0x30
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b0ba      	sub	sp, #232	; 0xe8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10f      	bne.n	8003826 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_UART_IRQHandler+0x66>
 8003812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fd21 	bl	8004266 <UART_Receive_IT>
      return;
 8003824:	e256      	b.n	8003cd4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80de 	beq.w	80039ec <HAL_UART_IRQHandler+0x22c>
 8003830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800383c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003840:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80d1 	beq.w	80039ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_UART_IRQHandler+0xae>
 8003856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_UART_IRQHandler+0xd2>
 800387a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f043 0202 	orr.w	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <HAL_UART_IRQHandler+0xf6>
 800389e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f043 0204 	orr.w	r2, r3, #4
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d011      	beq.n	80038e6 <HAL_UART_IRQHandler+0x126>
 80038c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0208 	orr.w	r2, r3, #8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 81ed 	beq.w	8003cca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_UART_IRQHandler+0x14e>
 80038fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fcac 	bl	8004266 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d103      	bne.n	800393a <HAL_UART_IRQHandler+0x17a>
 8003932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003936:	2b00      	cmp	r3, #0
 8003938:	d04f      	beq.n	80039da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fbb4 	bl	80040a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d141      	bne.n	80039d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3314      	adds	r3, #20
 8003954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800396c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800397a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800397e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1d9      	bne.n	800394e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d013      	beq.n	80039ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	4a7d      	ldr	r2, [pc, #500]	; (8003b9c <HAL_UART_IRQHandler+0x3dc>)
 80039a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe f870 	bl	8001a94 <HAL_DMA_Abort_IT>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d016      	beq.n	80039e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c4:	4610      	mov	r0, r2
 80039c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	e00e      	b.n	80039e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f9a4 	bl	8003d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	e00a      	b.n	80039e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f9a0 	bl	8003d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d8:	e006      	b.n	80039e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f99c 	bl	8003d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039e6:	e170      	b.n	8003cca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e8:	bf00      	nop
    return;
 80039ea:	e16e      	b.n	8003cca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	f040 814a 	bne.w	8003c8a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8143 	beq.w	8003c8a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 813c 	beq.w	8003c8a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b40      	cmp	r3, #64	; 0x40
 8003a34:	f040 80b4 	bne.w	8003ba0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8140 	beq.w	8003cce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a56:	429a      	cmp	r2, r3
 8003a58:	f080 8139 	bcs.w	8003cce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6e:	f000 8088 	beq.w	8003b82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	330c      	adds	r3, #12
 8003a9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003aaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1d9      	bne.n	8003a72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3314      	adds	r3, #20
 8003ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ae2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003aea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e1      	bne.n	8003abe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3314      	adds	r3, #20
 8003b00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3314      	adds	r3, #20
 8003b1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e3      	bne.n	8003afa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b52:	f023 0310 	bic.w	r3, r3, #16
 8003b56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b64:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e3      	bne.n	8003b40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fd ff19 	bl	80019b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	4619      	mov	r1, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd fa18 	bl	8000fc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b98:	e099      	b.n	8003cce <HAL_UART_IRQHandler+0x50e>
 8003b9a:	bf00      	nop
 8003b9c:	0800416f 	.word	0x0800416f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 808b 	beq.w	8003cd2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003bbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8086 	beq.w	8003cd2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003bea:	647a      	str	r2, [r7, #68]	; 0x44
 8003bec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e3      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c22:	633a      	str	r2, [r7, #48]	; 0x30
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e3      	bne.n	8003bfe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0310 	bic.w	r3, r3, #16
 8003c5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c68:	61fa      	str	r2, [r7, #28]
 8003c6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	69b9      	ldr	r1, [r7, #24]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	617b      	str	r3, [r7, #20]
   return(result);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e3      	bne.n	8003c44 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c80:	4619      	mov	r1, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd f9a0 	bl	8000fc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c88:	e023      	b.n	8003cd2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <HAL_UART_IRQHandler+0x4ea>
 8003c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fa77 	bl	8004196 <UART_Transmit_IT>
    return;
 8003ca8:	e014      	b.n	8003cd4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00e      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x514>
 8003cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fab7 	bl	8004236 <UART_EndTransmit_IT>
    return;
 8003cc8:	e004      	b.n	8003cd4 <HAL_UART_IRQHandler+0x514>
    return;
 8003cca:	bf00      	nop
 8003ccc:	e002      	b.n	8003cd4 <HAL_UART_IRQHandler+0x514>
      return;
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <HAL_UART_IRQHandler+0x514>
      return;
 8003cd2:	bf00      	nop
  }
}
 8003cd4:	37e8      	adds	r7, #232	; 0xe8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop

08003cdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b09c      	sub	sp, #112	; 0x70
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d172      	bne.n	8003e2e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d64:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d70:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e5      	bne.n	8003d4e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3314      	adds	r3, #20
 8003d88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	667b      	str	r3, [r7, #100]	; 0x64
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3314      	adds	r3, #20
 8003da0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003da2:	647a      	str	r2, [r7, #68]	; 0x44
 8003da4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003da8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e5      	bne.n	8003d82 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3314      	adds	r3, #20
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8003dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3314      	adds	r3, #20
 8003dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dd6:	633a      	str	r2, [r7, #48]	; 0x30
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d119      	bne.n	8003e2e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f023 0310 	bic.w	r3, r3, #16
 8003e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e1a:	61fa      	str	r2, [r7, #28]
 8003e1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	69b9      	ldr	r1, [r7, #24]
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	617b      	str	r3, [r7, #20]
   return(result);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e5      	bne.n	8003dfa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d106      	bne.n	8003e44 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e3e:	f7fd f8c3 	bl	8000fc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e42:	e002      	b.n	8003e4a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003e44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e46:	f7ff ff53 	bl	8003cf0 <HAL_UART_RxCpltCallback>
}
 8003e4a:	bf00      	nop
 8003e4c:	3770      	adds	r7, #112	; 0x70
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d108      	bne.n	8003e7a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	4619      	mov	r1, r3
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f7fd f8a8 	bl	8000fc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e78:	e002      	b.n	8003e80 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff ff42 	bl	8003d04 <HAL_UART_RxHalfCpltCallback>
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea4:	2b80      	cmp	r3, #128	; 0x80
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b21      	cmp	r3, #33	; 0x21
 8003eba:	d108      	bne.n	8003ece <UART_DMAError+0x46>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ec8:	68b8      	ldr	r0, [r7, #8]
 8003eca:	f000 f8c5 	bl	8004058 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b40      	cmp	r3, #64	; 0x40
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b22      	cmp	r3, #34	; 0x22
 8003eee:	d108      	bne.n	8003f02 <UART_DMAError+0x7a>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003efc:	68b8      	ldr	r0, [r7, #8]
 8003efe:	f000 f8d3 	bl	80040a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0210 	orr.w	r2, r3, #16
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f0e:	68b8      	ldr	r0, [r7, #8]
 8003f10:	f7ff ff02 	bl	8003d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b098      	sub	sp, #96	; 0x60
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	4613      	mov	r3, r2
 8003f28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	88fa      	ldrh	r2, [r7, #6]
 8003f34:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2222      	movs	r2, #34	; 0x22
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	4a40      	ldr	r2, [pc, #256]	; (800404c <UART_Start_Receive_DMA+0x130>)
 8003f4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	4a3f      	ldr	r2, [pc, #252]	; (8004050 <UART_Start_Receive_DMA+0x134>)
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	4a3e      	ldr	r2, [pc, #248]	; (8004054 <UART_Start_Receive_DMA+0x138>)
 8003f5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	2200      	movs	r2, #0
 8003f62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f64:	f107 0308 	add.w	r3, r7, #8
 8003f68:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4619      	mov	r1, r3
 8003f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	f7fd fcc2 	bl	8001904 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d019      	beq.n	8003fda <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fc6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003fc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e5      	bne.n	8003fa6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3314      	adds	r3, #20
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3314      	adds	r3, #20
 8003ff8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ffa:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e5      	bne.n	8003fda <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3314      	adds	r3, #20
 8004014:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	617b      	str	r3, [r7, #20]
   return(result);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004024:	653b      	str	r3, [r7, #80]	; 0x50
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3314      	adds	r3, #20
 800402c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800402e:	627a      	str	r2, [r7, #36]	; 0x24
 8004030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6a39      	ldr	r1, [r7, #32]
 8004034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	61fb      	str	r3, [r7, #28]
   return(result);
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e5      	bne.n	800400e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3760      	adds	r7, #96	; 0x60
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	08003d2d 	.word	0x08003d2d
 8004050:	08003e53 	.word	0x08003e53
 8004054:	08003e89 	.word	0x08003e89

08004058 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	; 0x24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	61ba      	str	r2, [r7, #24]
 8004082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6979      	ldr	r1, [r7, #20]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	613b      	str	r3, [r7, #16]
   return(result);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e5      	bne.n	8004060 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800409c:	bf00      	nop
 800409e:	3724      	adds	r7, #36	; 0x24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b095      	sub	sp, #84	; 0x54
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	330c      	adds	r3, #12
 80040ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040d0:	643a      	str	r2, [r7, #64]	; 0x40
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e5      	bne.n	80040b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3314      	adds	r3, #20
 80040ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3314      	adds	r3, #20
 8004102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800410a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e5      	bne.n	80040e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	2b01      	cmp	r3, #1
 800411e:	d119      	bne.n	8004154 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f023 0310 	bic.w	r3, r3, #16
 8004136:	647b      	str	r3, [r7, #68]	; 0x44
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004140:	61ba      	str	r2, [r7, #24]
 8004142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	6979      	ldr	r1, [r7, #20]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	613b      	str	r3, [r7, #16]
   return(result);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e5      	bne.n	8004120 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004162:	bf00      	nop
 8004164:	3754      	adds	r7, #84	; 0x54
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f7ff fdc5 	bl	8003d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004196:	b480      	push	{r7}
 8004198:	b085      	sub	sp, #20
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b21      	cmp	r3, #33	; 0x21
 80041a8:	d13e      	bne.n	8004228 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b2:	d114      	bne.n	80041de <UART_Transmit_IT+0x48>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d110      	bne.n	80041de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	1c9a      	adds	r2, r3, #2
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	621a      	str	r2, [r3, #32]
 80041dc:	e008      	b.n	80041f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	1c59      	adds	r1, r3, #1
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6211      	str	r1, [r2, #32]
 80041e8:	781a      	ldrb	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4619      	mov	r1, r3
 80041fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10f      	bne.n	8004224 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004212:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004222:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	e000      	b.n	800422a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800424c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff fd40 	bl	8003cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b08c      	sub	sp, #48	; 0x30
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b22      	cmp	r3, #34	; 0x22
 8004278:	f040 80ab 	bne.w	80043d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004284:	d117      	bne.n	80042b6 <UART_Receive_IT+0x50>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d113      	bne.n	80042b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800428e:	2300      	movs	r3, #0
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	1c9a      	adds	r2, r3, #2
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	629a      	str	r2, [r3, #40]	; 0x28
 80042b4:	e026      	b.n	8004304 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042bc:	2300      	movs	r3, #0
 80042be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c8:	d007      	beq.n	80042da <UART_Receive_IT+0x74>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <UART_Receive_IT+0x82>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	e008      	b.n	80042fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29b      	uxth	r3, r3
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4619      	mov	r1, r3
 8004312:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004314:	2b00      	cmp	r3, #0
 8004316:	d15a      	bne.n	80043ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0220 	bic.w	r2, r2, #32
 8004326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004336:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	2b01      	cmp	r3, #1
 8004356:	d135      	bne.n	80043c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	330c      	adds	r3, #12
 8004364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	613b      	str	r3, [r7, #16]
   return(result);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f023 0310 	bic.w	r3, r3, #16
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437e:	623a      	str	r2, [r7, #32]
 8004380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	69f9      	ldr	r1, [r7, #28]
 8004384:	6a3a      	ldr	r2, [r7, #32]
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	61bb      	str	r3, [r7, #24]
   return(result);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e5      	bne.n	800435e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b10      	cmp	r3, #16
 800439e:	d10a      	bne.n	80043b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7fc fe03 	bl	8000fc8 <HAL_UARTEx_RxEventCallback>
 80043c2:	e002      	b.n	80043ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fc93 	bl	8003cf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e002      	b.n	80043d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3730      	adds	r7, #48	; 0x30
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e0:	b0c0      	sub	sp, #256	; 0x100
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	68d9      	ldr	r1, [r3, #12]
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	ea40 0301 	orr.w	r3, r0, r1
 8004404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	431a      	orrs	r2, r3
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	431a      	orrs	r2, r3
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004434:	f021 010c 	bic.w	r1, r1, #12
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004442:	430b      	orrs	r3, r1
 8004444:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	6999      	ldr	r1, [r3, #24]
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	ea40 0301 	orr.w	r3, r0, r1
 8004462:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4b8f      	ldr	r3, [pc, #572]	; (80046a8 <UART_SetConfig+0x2cc>)
 800446c:	429a      	cmp	r2, r3
 800446e:	d005      	beq.n	800447c <UART_SetConfig+0xa0>
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b8d      	ldr	r3, [pc, #564]	; (80046ac <UART_SetConfig+0x2d0>)
 8004478:	429a      	cmp	r2, r3
 800447a:	d104      	bne.n	8004486 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800447c:	f7fe fbd2 	bl	8002c24 <HAL_RCC_GetPCLK2Freq>
 8004480:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004484:	e003      	b.n	800448e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004486:	f7fe fbb9 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 800448a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004498:	f040 810c 	bne.w	80046b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800449c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044ae:	4622      	mov	r2, r4
 80044b0:	462b      	mov	r3, r5
 80044b2:	1891      	adds	r1, r2, r2
 80044b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80044b6:	415b      	adcs	r3, r3
 80044b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044be:	4621      	mov	r1, r4
 80044c0:	eb12 0801 	adds.w	r8, r2, r1
 80044c4:	4629      	mov	r1, r5
 80044c6:	eb43 0901 	adc.w	r9, r3, r1
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044de:	4690      	mov	r8, r2
 80044e0:	4699      	mov	r9, r3
 80044e2:	4623      	mov	r3, r4
 80044e4:	eb18 0303 	adds.w	r3, r8, r3
 80044e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044ec:	462b      	mov	r3, r5
 80044ee:	eb49 0303 	adc.w	r3, r9, r3
 80044f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004502:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004506:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800450a:	460b      	mov	r3, r1
 800450c:	18db      	adds	r3, r3, r3
 800450e:	653b      	str	r3, [r7, #80]	; 0x50
 8004510:	4613      	mov	r3, r2
 8004512:	eb42 0303 	adc.w	r3, r2, r3
 8004516:	657b      	str	r3, [r7, #84]	; 0x54
 8004518:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800451c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004520:	f7fb fe60 	bl	80001e4 <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4b61      	ldr	r3, [pc, #388]	; (80046b0 <UART_SetConfig+0x2d4>)
 800452a:	fba3 2302 	umull	r2, r3, r3, r2
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	011c      	lsls	r4, r3, #4
 8004532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004536:	2200      	movs	r2, #0
 8004538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800453c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004540:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004544:	4642      	mov	r2, r8
 8004546:	464b      	mov	r3, r9
 8004548:	1891      	adds	r1, r2, r2
 800454a:	64b9      	str	r1, [r7, #72]	; 0x48
 800454c:	415b      	adcs	r3, r3
 800454e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004550:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004554:	4641      	mov	r1, r8
 8004556:	eb12 0a01 	adds.w	sl, r2, r1
 800455a:	4649      	mov	r1, r9
 800455c:	eb43 0b01 	adc.w	fp, r3, r1
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800456c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004574:	4692      	mov	sl, r2
 8004576:	469b      	mov	fp, r3
 8004578:	4643      	mov	r3, r8
 800457a:	eb1a 0303 	adds.w	r3, sl, r3
 800457e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004582:	464b      	mov	r3, r9
 8004584:	eb4b 0303 	adc.w	r3, fp, r3
 8004588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004598:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800459c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045a0:	460b      	mov	r3, r1
 80045a2:	18db      	adds	r3, r3, r3
 80045a4:	643b      	str	r3, [r7, #64]	; 0x40
 80045a6:	4613      	mov	r3, r2
 80045a8:	eb42 0303 	adc.w	r3, r2, r3
 80045ac:	647b      	str	r3, [r7, #68]	; 0x44
 80045ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045b6:	f7fb fe15 	bl	80001e4 <__aeabi_uldivmod>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4611      	mov	r1, r2
 80045c0:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <UART_SetConfig+0x2d4>)
 80045c2:	fba3 2301 	umull	r2, r3, r3, r1
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2264      	movs	r2, #100	; 0x64
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	1acb      	subs	r3, r1, r3
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045d6:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <UART_SetConfig+0x2d4>)
 80045d8:	fba3 2302 	umull	r2, r3, r3, r2
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045e4:	441c      	add	r4, r3
 80045e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045f8:	4642      	mov	r2, r8
 80045fa:	464b      	mov	r3, r9
 80045fc:	1891      	adds	r1, r2, r2
 80045fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004600:	415b      	adcs	r3, r3
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004608:	4641      	mov	r1, r8
 800460a:	1851      	adds	r1, r2, r1
 800460c:	6339      	str	r1, [r7, #48]	; 0x30
 800460e:	4649      	mov	r1, r9
 8004610:	414b      	adcs	r3, r1
 8004612:	637b      	str	r3, [r7, #52]	; 0x34
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004620:	4659      	mov	r1, fp
 8004622:	00cb      	lsls	r3, r1, #3
 8004624:	4651      	mov	r1, sl
 8004626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800462a:	4651      	mov	r1, sl
 800462c:	00ca      	lsls	r2, r1, #3
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	4603      	mov	r3, r0
 8004634:	4642      	mov	r2, r8
 8004636:	189b      	adds	r3, r3, r2
 8004638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800463c:	464b      	mov	r3, r9
 800463e:	460a      	mov	r2, r1
 8004640:	eb42 0303 	adc.w	r3, r2, r3
 8004644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004654:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004658:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800465c:	460b      	mov	r3, r1
 800465e:	18db      	adds	r3, r3, r3
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
 8004662:	4613      	mov	r3, r2
 8004664:	eb42 0303 	adc.w	r3, r2, r3
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800466e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004672:	f7fb fdb7 	bl	80001e4 <__aeabi_uldivmod>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <UART_SetConfig+0x2d4>)
 800467c:	fba3 1302 	umull	r1, r3, r3, r2
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	2164      	movs	r1, #100	; 0x64
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	3332      	adds	r3, #50	; 0x32
 800468e:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <UART_SetConfig+0x2d4>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	f003 0207 	and.w	r2, r3, #7
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4422      	add	r2, r4
 80046a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046a4:	e105      	b.n	80048b2 <UART_SetConfig+0x4d6>
 80046a6:	bf00      	nop
 80046a8:	40011000 	.word	0x40011000
 80046ac:	40011400 	.word	0x40011400
 80046b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046c6:	4642      	mov	r2, r8
 80046c8:	464b      	mov	r3, r9
 80046ca:	1891      	adds	r1, r2, r2
 80046cc:	6239      	str	r1, [r7, #32]
 80046ce:	415b      	adcs	r3, r3
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
 80046d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046d6:	4641      	mov	r1, r8
 80046d8:	1854      	adds	r4, r2, r1
 80046da:	4649      	mov	r1, r9
 80046dc:	eb43 0501 	adc.w	r5, r3, r1
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	00eb      	lsls	r3, r5, #3
 80046ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ee:	00e2      	lsls	r2, r4, #3
 80046f0:	4614      	mov	r4, r2
 80046f2:	461d      	mov	r5, r3
 80046f4:	4643      	mov	r3, r8
 80046f6:	18e3      	adds	r3, r4, r3
 80046f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046fc:	464b      	mov	r3, r9
 80046fe:	eb45 0303 	adc.w	r3, r5, r3
 8004702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004722:	4629      	mov	r1, r5
 8004724:	008b      	lsls	r3, r1, #2
 8004726:	4621      	mov	r1, r4
 8004728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472c:	4621      	mov	r1, r4
 800472e:	008a      	lsls	r2, r1, #2
 8004730:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004734:	f7fb fd56 	bl	80001e4 <__aeabi_uldivmod>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4b60      	ldr	r3, [pc, #384]	; (80048c0 <UART_SetConfig+0x4e4>)
 800473e:	fba3 2302 	umull	r2, r3, r3, r2
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	011c      	lsls	r4, r3, #4
 8004746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800474a:	2200      	movs	r2, #0
 800474c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004750:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004754:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004758:	4642      	mov	r2, r8
 800475a:	464b      	mov	r3, r9
 800475c:	1891      	adds	r1, r2, r2
 800475e:	61b9      	str	r1, [r7, #24]
 8004760:	415b      	adcs	r3, r3
 8004762:	61fb      	str	r3, [r7, #28]
 8004764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004768:	4641      	mov	r1, r8
 800476a:	1851      	adds	r1, r2, r1
 800476c:	6139      	str	r1, [r7, #16]
 800476e:	4649      	mov	r1, r9
 8004770:	414b      	adcs	r3, r1
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004780:	4659      	mov	r1, fp
 8004782:	00cb      	lsls	r3, r1, #3
 8004784:	4651      	mov	r1, sl
 8004786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800478a:	4651      	mov	r1, sl
 800478c:	00ca      	lsls	r2, r1, #3
 800478e:	4610      	mov	r0, r2
 8004790:	4619      	mov	r1, r3
 8004792:	4603      	mov	r3, r0
 8004794:	4642      	mov	r2, r8
 8004796:	189b      	adds	r3, r3, r2
 8004798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800479c:	464b      	mov	r3, r9
 800479e:	460a      	mov	r2, r1
 80047a0:	eb42 0303 	adc.w	r3, r2, r3
 80047a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80047b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047c0:	4649      	mov	r1, r9
 80047c2:	008b      	lsls	r3, r1, #2
 80047c4:	4641      	mov	r1, r8
 80047c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ca:	4641      	mov	r1, r8
 80047cc:	008a      	lsls	r2, r1, #2
 80047ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047d2:	f7fb fd07 	bl	80001e4 <__aeabi_uldivmod>
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <UART_SetConfig+0x4e4>)
 80047dc:	fba3 1302 	umull	r1, r3, r3, r2
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	2164      	movs	r1, #100	; 0x64
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	3332      	adds	r3, #50	; 0x32
 80047ee:	4a34      	ldr	r2, [pc, #208]	; (80048c0 <UART_SetConfig+0x4e4>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fa:	441c      	add	r4, r3
 80047fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004800:	2200      	movs	r2, #0
 8004802:	673b      	str	r3, [r7, #112]	; 0x70
 8004804:	677a      	str	r2, [r7, #116]	; 0x74
 8004806:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800480a:	4642      	mov	r2, r8
 800480c:	464b      	mov	r3, r9
 800480e:	1891      	adds	r1, r2, r2
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	415b      	adcs	r3, r3
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800481a:	4641      	mov	r1, r8
 800481c:	1851      	adds	r1, r2, r1
 800481e:	6039      	str	r1, [r7, #0]
 8004820:	4649      	mov	r1, r9
 8004822:	414b      	adcs	r3, r1
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004832:	4659      	mov	r1, fp
 8004834:	00cb      	lsls	r3, r1, #3
 8004836:	4651      	mov	r1, sl
 8004838:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800483c:	4651      	mov	r1, sl
 800483e:	00ca      	lsls	r2, r1, #3
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	4603      	mov	r3, r0
 8004846:	4642      	mov	r2, r8
 8004848:	189b      	adds	r3, r3, r2
 800484a:	66bb      	str	r3, [r7, #104]	; 0x68
 800484c:	464b      	mov	r3, r9
 800484e:	460a      	mov	r2, r1
 8004850:	eb42 0303 	adc.w	r3, r2, r3
 8004854:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	663b      	str	r3, [r7, #96]	; 0x60
 8004860:	667a      	str	r2, [r7, #100]	; 0x64
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800486e:	4649      	mov	r1, r9
 8004870:	008b      	lsls	r3, r1, #2
 8004872:	4641      	mov	r1, r8
 8004874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004878:	4641      	mov	r1, r8
 800487a:	008a      	lsls	r2, r1, #2
 800487c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004880:	f7fb fcb0 	bl	80001e4 <__aeabi_uldivmod>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <UART_SetConfig+0x4e4>)
 800488a:	fba3 1302 	umull	r1, r3, r3, r2
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2164      	movs	r1, #100	; 0x64
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	3332      	adds	r3, #50	; 0x32
 800489c:	4a08      	ldr	r2, [pc, #32]	; (80048c0 <UART_SetConfig+0x4e4>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	f003 020f 	and.w	r2, r3, #15
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4422      	add	r2, r4
 80048b0:	609a      	str	r2, [r3, #8]
}
 80048b2:	bf00      	nop
 80048b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048b8:	46bd      	mov	sp, r7
 80048ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048be:	bf00      	nop
 80048c0:	51eb851f 	.word	0x51eb851f

080048c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80048c8:	4904      	ldr	r1, [pc, #16]	; (80048dc <MX_FATFS_Init+0x18>)
 80048ca:	4805      	ldr	r0, [pc, #20]	; (80048e0 <MX_FATFS_Init+0x1c>)
 80048cc:	f000 f8b0 	bl	8004a30 <FATFS_LinkDriver>
 80048d0:	4603      	mov	r3, r0
 80048d2:	461a      	mov	r2, r3
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <MX_FATFS_Init+0x20>)
 80048d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80048d8:	bf00      	nop
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	200001f4 	.word	0x200001f4
 80048e0:	2000001c 	.word	0x2000001c
 80048e4:	200001f0 	.word	0x200001f0

080048e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <USER_initialize+0x24>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <USER_initialize+0x24>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000019 	.word	0x20000019

08004910 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800491a:	4b06      	ldr	r3, [pc, #24]	; (8004934 <USER_status+0x24>)
 800491c:	2201      	movs	r2, #1
 800491e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <USER_status+0x24>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000019 	.word	0x20000019

08004938 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	4603      	mov	r3, r0
 8004946:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004948:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	4603      	mov	r3, r0
 8004964:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004966:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	603a      	str	r2, [r7, #0]
 800497e:	71fb      	strb	r3, [r7, #7]
 8004980:	460b      	mov	r3, r1
 8004982:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
    return res;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80049ae:	4b1f      	ldr	r3, [pc, #124]	; (8004a2c <FATFS_LinkDriverEx+0x94>)
 80049b0:	7a5b      	ldrb	r3, [r3, #9]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d131      	bne.n	8004a1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80049b8:	4b1c      	ldr	r3, [pc, #112]	; (8004a2c <FATFS_LinkDriverEx+0x94>)
 80049ba:	7a5b      	ldrb	r3, [r3, #9]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	461a      	mov	r2, r3
 80049c0:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <FATFS_LinkDriverEx+0x94>)
 80049c2:	2100      	movs	r1, #0
 80049c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80049c6:	4b19      	ldr	r3, [pc, #100]	; (8004a2c <FATFS_LinkDriverEx+0x94>)
 80049c8:	7a5b      	ldrb	r3, [r3, #9]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	4a17      	ldr	r2, [pc, #92]	; (8004a2c <FATFS_LinkDriverEx+0x94>)
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <FATFS_LinkDriverEx+0x94>)
 80049d8:	7a5b      	ldrb	r3, [r3, #9]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <FATFS_LinkDriverEx+0x94>)
 80049e0:	4413      	add	r3, r2
 80049e2:	79fa      	ldrb	r2, [r7, #7]
 80049e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80049e6:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <FATFS_LinkDriverEx+0x94>)
 80049e8:	7a5b      	ldrb	r3, [r3, #9]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	b2d1      	uxtb	r1, r2
 80049f0:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <FATFS_LinkDriverEx+0x94>)
 80049f2:	7251      	strb	r1, [r2, #9]
 80049f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80049f6:	7dbb      	ldrb	r3, [r7, #22]
 80049f8:	3330      	adds	r3, #48	; 0x30
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	3301      	adds	r3, #1
 8004a04:	223a      	movs	r2, #58	; 0x3a
 8004a06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	222f      	movs	r2, #47	; 0x2f
 8004a0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	3303      	adds	r3, #3
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	200001f8 	.word	0x200001f8

08004a30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff ffaa 	bl	8004998 <FATFS_LinkDriverEx>
 8004a44:	4603      	mov	r3, r0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <__libc_init_array>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	4d0d      	ldr	r5, [pc, #52]	; (8004a88 <__libc_init_array+0x38>)
 8004a54:	4c0d      	ldr	r4, [pc, #52]	; (8004a8c <__libc_init_array+0x3c>)
 8004a56:	1b64      	subs	r4, r4, r5
 8004a58:	10a4      	asrs	r4, r4, #2
 8004a5a:	2600      	movs	r6, #0
 8004a5c:	42a6      	cmp	r6, r4
 8004a5e:	d109      	bne.n	8004a74 <__libc_init_array+0x24>
 8004a60:	4d0b      	ldr	r5, [pc, #44]	; (8004a90 <__libc_init_array+0x40>)
 8004a62:	4c0c      	ldr	r4, [pc, #48]	; (8004a94 <__libc_init_array+0x44>)
 8004a64:	f000 f820 	bl	8004aa8 <_init>
 8004a68:	1b64      	subs	r4, r4, r5
 8004a6a:	10a4      	asrs	r4, r4, #2
 8004a6c:	2600      	movs	r6, #0
 8004a6e:	42a6      	cmp	r6, r4
 8004a70:	d105      	bne.n	8004a7e <__libc_init_array+0x2e>
 8004a72:	bd70      	pop	{r4, r5, r6, pc}
 8004a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a78:	4798      	blx	r3
 8004a7a:	3601      	adds	r6, #1
 8004a7c:	e7ee      	b.n	8004a5c <__libc_init_array+0xc>
 8004a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a82:	4798      	blx	r3
 8004a84:	3601      	adds	r6, #1
 8004a86:	e7f2      	b.n	8004a6e <__libc_init_array+0x1e>
 8004a88:	08004dac 	.word	0x08004dac
 8004a8c:	08004dac 	.word	0x08004dac
 8004a90:	08004dac 	.word	0x08004dac
 8004a94:	08004db0 	.word	0x08004db0

08004a98 <memset>:
 8004a98:	4402      	add	r2, r0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d100      	bne.n	8004aa2 <memset+0xa>
 8004aa0:	4770      	bx	lr
 8004aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8004aa6:	e7f9      	b.n	8004a9c <memset+0x4>

08004aa8 <_init>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	bf00      	nop
 8004aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aae:	bc08      	pop	{r3}
 8004ab0:	469e      	mov	lr, r3
 8004ab2:	4770      	bx	lr

08004ab4 <_fini>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr
