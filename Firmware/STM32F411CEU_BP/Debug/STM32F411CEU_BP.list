
STM32F411CEU_BP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f4  080073f4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073fc  080073fc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007400  08007400  00017400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08007404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000094  08007498  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08007498  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142ee  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323d  00000000  00000000  000343b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  000375f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00003f31  00000000  00000000  000388a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001612f  00000000  00000000  0003c7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000928e6  00000000  00000000  00052900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e51e6  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001140  00000000  00000000  000e5238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005110  00000000  00000000  000e6378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007014 	.word	0x08007014

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	08007014 	.word	0x08007014

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <updateUserMsg>:
#include "time.h"
#include "stdlib.h"


unsigned char updateUserMsg(unsigned char col, unsigned char linha, unsigned char *userMessage, unsigned char* status)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60ba      	str	r2, [r7, #8]
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4603      	mov	r3, r0
 80005a0:	73fb      	strb	r3, [r7, #15]
 80005a2:	460b      	mov	r3, r1
 80005a4:	73bb      	strb	r3, [r7, #14]
	if(*status == IDDLE)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d108      	bne.n	80005c0 <updateUserMsg+0x2c>
	{
	    HW_PRINT_DATA(col,linha,userMessage);
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	7bb9      	ldrb	r1, [r7, #14]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f91b 	bl	80007f0 <HW_PRINT_DATA>
		*status = PRINTED;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
	}
}
 80005c0:	bf00      	nop
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <readyUserInterface>:

//unsigned char readyUserInterface(unsigned char* displayStatus,unsigned char* cursorPosition)
unsigned char readyUserInterface(unsigned char* displayStatus)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
	statusUserInterface(displayStatus);
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 f809 	bl	80005ea <statusUserInterface>
	resetKeyPressed();
 80005d8:	f001 f968 	bl	80018ac <resetKeyPressed>
//	resetCursorInterface(cursorPosition);
	eraseDataDisplay();
 80005dc:	f000 f8f2 	bl	80007c4 <eraseDataDisplay>
}
 80005e0:	bf00      	nop
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <statusUserInterface>:

unsigned char statusUserInterface(unsigned char* displayStatus)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	*displayStatus = IDDLE;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
}
 80005f8:	bf00      	nop
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <measureValidation>:
uint16_t contatoTimeSamples[AMOSTRAS] = {0,0,0,0,0};

uint16_t vooTimeSamples[AMOSTRAS] = {0,0,0,0,0};

void measureValidation(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b094      	sub	sp, #80	; 0x50
 800060a:	af00      	add	r7, sp, #0
	unsigned char key = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	unsigned char logicZeroFile[30];
	unsigned char logicOneFile[30];
	unsigned char idx = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t accum1 = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t accum2 = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
	while(1)
	{
		do
		{
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
			key = (unsigned char)getKeyPressed();
 8000620:	f001 f938 	bl	8001894 <getKeyPressed>
 8000624:	4603      	mov	r3, r0
 8000626:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		}
		while(key != CONFIRMAR);
 800062a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800062e:	2b43      	cmp	r3, #67	; 0x43
 8000630:	d1f6      	bne.n	8000620 <measureValidation+0x1a>
		validation();
 8000632:	f000 f80d 	bl	8000650 <validation>
		stopTM2();
 8000636:	f000 f8b3 	bl	80007a0 <stopTM2>
		stopTM3();
 800063a:	f000 f8bd 	bl	80007b8 <stopTM3>
		resetKeyPressed();
 800063e:	f001 f935 	bl	80018ac <resetKeyPressed>
		idx++;
 8000642:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000646:	3301      	adds	r3, #1
 8000648:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	{
 800064c:	e7e8      	b.n	8000620 <measureValidation+0x1a>
	...

08000650 <validation>:
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
	}

}
void validation(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b0a6      	sub	sp, #152	; 0x98
 8000654:	af00      	add	r7, sp, #0
	uint32_t* ptr_totalTime;
	unsigned char* ptr_samples;
	unsigned char userState = REPOUSO;
 8000656:	2332      	movs	r3, #50	; 0x32
 8000658:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	unsigned char key = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	unsigned char* ptr_sensorFlag;
	uint32_t contatoTime,vooTime;
	ptr_totalTime = (uint16_t*)getTimer3Variable();
 8000662:	f001 f94d 	bl	8001900 <getTimer3Variable>
 8000666:	4603      	mov	r3, r0
 8000668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ptr_sensorFlag = (unsigned char*)getSensorFlag();
 800066c:	f001 f93e 	bl	80018ec <getSensorFlag>
 8000670:	4603      	mov	r3, r0
 8000672:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	ptr_samples = (unsigned char*)getSamplesCount();
 8000676:	f001 f903 	bl	8001880 <getSamplesCount>
 800067a:	4603      	mov	r3, r0
 800067c:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t transitionStateTime=0;
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	unsigned char transitionString[50];
	unsigned char contatoTimeString[30];
	unsigned char vooTimeString[30];
	uint16_t contato = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	unsigned char voo = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	startTM2();
 8000690:	f000 f880 	bl	8000794 <startTM2>
	startTM3();
 8000694:	f000 f88a 	bl	80007ac <startTM3>

	while(key!=PARAR)
 8000698:	e06a      	b.n	8000770 <validation+0x120>
	{
//		key = (unsigned char)getKeyPressed();
//		if(contato == AMOSTRAS && voo == AMOSTRAS) key = PARAR;
		switch(userState)
 800069a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800069e:	2b34      	cmp	r3, #52	; 0x34
 80006a0:	d032      	beq.n	8000708 <validation+0xb8>
 80006a2:	2b34      	cmp	r3, #52	; 0x34
 80006a4:	dc64      	bgt.n	8000770 <validation+0x120>
 80006a6:	2b32      	cmp	r3, #50	; 0x32
 80006a8:	d002      	beq.n	80006b0 <validation+0x60>
 80006aa:	2b33      	cmp	r3, #51	; 0x33
 80006ac:	d012      	beq.n	80006d4 <validation+0x84>
 80006ae:	e05f      	b.n	8000770 <validation+0x120>
		{
			case REPOUSO:
				if(*ptr_sensorFlag == 0) //INICIO FORA DO TAPETE
 80006b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d108      	bne.n	80006cc <validation+0x7c>
				{
					userState = CONTATO;
 80006ba:	2333      	movs	r3, #51	; 0x33
 80006bc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					transitionStateTime = *ptr_totalTime;
 80006c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80006ca:	e051      	b.n	8000770 <validation+0x120>
//					sprintf((char*)transitionString,"Trepouso = %d",(char*)transitionStateTime);
//					HW_PRINT_DATA(0,USERMSG2,transitionString);
				}
				else userState = REPOUSO;
 80006cc:	2332      	movs	r3, #50	; 0x32
 80006ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			break;
 80006d2:	e04d      	b.n	8000770 <validation+0x120>

			case CONTATO:
				if(*ptr_sensorFlag == 1)
 80006d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d110      	bne.n	8000700 <validation+0xb0>
				{
					userState = VOO;
 80006de:	2334      	movs	r3, #52	; 0x34
 80006e0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					contatoTime = *ptr_totalTime - transitionStateTime;
 80006e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
//					contatoTimeSamples[contato] = contatoTime;
//					contato++;
//					transitionStateTime = *ptr_totalTime;
//					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
					transitionStateTime = *ptr_totalTime;
 80006f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80006fe:	e037      	b.n	8000770 <validation+0x120>
				}
				else
				{
					userState = CONTATO;
 8000700:	2333      	movs	r3, #51	; 0x33
 8000702:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}

			break;
 8000706:	e033      	b.n	8000770 <validation+0x120>

			case VOO:
				if(*ptr_sensorFlag  == 0)
 8000708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d12a      	bne.n	8000768 <validation+0x118>
				{
					userState = CONTATO;
 8000712:	2333      	movs	r3, #51	; 0x33
 8000714:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					vooTime = *ptr_totalTime - transitionStateTime;
 8000718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	677b      	str	r3, [r7, #116]	; 0x74
//					vooTimeSamples[voo] = vooTime;
//					voo++;
//					transitionStateTime = *ptr_totalTime;
//					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
					sprintf((char*)vooTimeString,"Tvoo = %d",(char*)vooTime);
 8000726:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000728:	463b      	mov	r3, r7
 800072a:	4918      	ldr	r1, [pc, #96]	; (800078c <validation+0x13c>)
 800072c:	4618      	mov	r0, r3
 800072e:	f006 f903 	bl	8006938 <siprintf>
					HW_PRINT_DATA(0,INSERTMSG,vooTimeString);
 8000732:	463b      	mov	r3, r7
 8000734:	461a      	mov	r2, r3
 8000736:	2102      	movs	r1, #2
 8000738:	2000      	movs	r0, #0
 800073a:	f000 f859 	bl	80007f0 <HW_PRINT_DATA>
					sprintf((char*)contatoTimeString,"Tcontato = %d",(char*)contatoTime);
 800073e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	4912      	ldr	r1, [pc, #72]	; (8000790 <validation+0x140>)
 8000748:	4618      	mov	r0, r3
 800074a:	f006 f8f5 	bl	8006938 <siprintf>
					HW_PRINT_DATA(0,USERMSG2,contatoTimeString);
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	461a      	mov	r2, r3
 8000754:	2101      	movs	r1, #1
 8000756:	2000      	movs	r0, #0
 8000758:	f000 f84a 	bl	80007f0 <HW_PRINT_DATA>
					transitionStateTime = *ptr_totalTime;
 800075c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000766:	e002      	b.n	800076e <validation+0x11e>
				}
				else
				{
					userState = VOO;
 8000768:	2334      	movs	r3, #52	; 0x34
 800076a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			break;
 800076e:	bf00      	nop
	while(key!=PARAR)
 8000770:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000774:	2b50      	cmp	r3, #80	; 0x50
 8000776:	d190      	bne.n	800069a <validation+0x4a>
		}
	}
	contato = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	voo = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
}
 8000784:	bf00      	nop
 8000786:	3798      	adds	r7, #152	; 0x98
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	080072ec 	.word	0x080072ec
 8000790:	080072f8 	.word	0x080072f8

08000794 <startTM2>:
    unsigned char timeout;
    struct samples Measurement[MEASUREMENT_SIZE];
};

void startTM2(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
        SET_HW_TIMER2();
 8000798:	f000 fb1a 	bl	8000dd0 <SET_HW_TIMER2>
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <stopTM2>:

void stopTM2(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    RESET_HW_TIMER2();
 80007a4:	f000 fb34 	bl	8000e10 <RESET_HW_TIMER2>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <startTM3>:

void startTM3(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
        SET_HW_TIMER3();
 80007b0:	f000 fb4c 	bl	8000e4c <SET_HW_TIMER3>
//        resetTimer3Variable();
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <stopTM3>:

void stopTM3(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
    RESET_HW_TIMER3();
 80007bc:	f000 fb68 	bl	8000e90 <RESET_HW_TIMER3>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <eraseDataDisplay>:


void eraseDataDisplay()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
    HW_ERASE_DATA();
 80007c8:	f000 f82c 	bl	8000824 <HW_ERASE_DATA>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <homeDataDisplay>:

void homeDataDisplay(unsigned char* appName,unsigned char* companyName,unsigned char* appVersion)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
//    printf("%s\n",appName);
//    printf("%s\n",companyName);
//    printf("%s\n",appVersion);
    HW_HOME_DISP(appName,companyName,appVersion);
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	68b9      	ldr	r1, [r7, #8]
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f000 f829 	bl	8000838 <HW_HOME_DISP>

}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HW_PRINT_DATA>:
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	603a      	str	r2, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	460b      	mov	r3, r1
 80007fe:	71bb      	strb	r3, [r7, #6]
 8000800:	79ba      	ldrb	r2, [r7, #6]
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <HW_PRINT_DATA+0x30>)
 8000808:	f000 fab3 	bl	8000d72 <setCursor>
 800080c:	6839      	ldr	r1, [r7, #0]
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <HW_PRINT_DATA+0x30>)
 8000810:	f000 f93c 	bl	8000a8c <print>
 8000814:	bf00      	nop
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000b0 	.word	0x200000b0

08000824 <HW_ERASE_DATA>:
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <HW_ERASE_DATA+0x10>)
 800082a:	f000 f950 	bl	8000ace <clear>
 800082e:	bf00      	nop
 8000830:	4618      	mov	r0, r3
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000b0 	.word	0x200000b0

08000838 <HW_HOME_DISP>:
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	2304      	movs	r3, #4
 8000846:	2204      	movs	r2, #4
 8000848:	2110      	movs	r1, #16
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <HW_HOME_DISP+0x5c>)
 800084c:	f000 f824 	bl	8000898 <begin>
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	480f      	ldr	r0, [pc, #60]	; (8000894 <HW_HOME_DISP+0x5c>)
 8000856:	f000 fa8c 	bl	8000d72 <setCursor>
 800085a:	68f9      	ldr	r1, [r7, #12]
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <HW_HOME_DISP+0x5c>)
 800085e:	f000 f915 	bl	8000a8c <print>
 8000862:	2201      	movs	r2, #1
 8000864:	2100      	movs	r1, #0
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <HW_HOME_DISP+0x5c>)
 8000868:	f000 fa83 	bl	8000d72 <setCursor>
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	4809      	ldr	r0, [pc, #36]	; (8000894 <HW_HOME_DISP+0x5c>)
 8000870:	f000 f90c 	bl	8000a8c <print>
 8000874:	2203      	movs	r2, #3
 8000876:	2100      	movs	r1, #0
 8000878:	4806      	ldr	r0, [pc, #24]	; (8000894 <HW_HOME_DISP+0x5c>)
 800087a:	f000 fa7a 	bl	8000d72 <setCursor>
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <HW_HOME_DISP+0x5c>)
 8000882:	f000 f903 	bl	8000a8c <print>
 8000886:	4b03      	ldr	r3, [pc, #12]	; (8000894 <HW_HOME_DISP+0x5c>)
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000b0 	.word	0x200000b0

08000898 <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	4608      	mov	r0, r1
 80008a2:	4611      	mov	r1, r2
 80008a4:	461a      	mov	r2, r3
 80008a6:	4603      	mov	r3, r0
 80008a8:	70fb      	strb	r3, [r7, #3]
 80008aa:	460b      	mov	r3, r1
 80008ac:	70bb      	strb	r3, [r7, #2]
 80008ae:	4613      	mov	r3, r2
 80008b0:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	461a      	mov	r2, r3
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	cb03      	ldmia	r3!, {r0, r1}
 80008c6:	6010      	str	r0, [r2, #0]
 80008c8:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d0:	486c      	ldr	r0, [pc, #432]	; (8000a84 <begin+0x1ec>)
 80008d2:	f002 fdad 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008dc:	4869      	ldr	r0, [pc, #420]	; (8000a84 <begin+0x1ec>)
 80008de:	f002 fda7 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e8:	4866      	ldr	r0, [pc, #408]	; (8000a84 <begin+0x1ec>)
 80008ea:	f002 fda1 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f4:	4863      	ldr	r0, [pc, #396]	; (8000a84 <begin+0x1ec>)
 80008f6:	f002 fd9b 	bl	8003430 <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2108      	movs	r1, #8
 80008fe:	4861      	ldr	r0, [pc, #388]	; (8000a84 <begin+0x1ec>)
 8000900:	f002 fd96 	bl	8003430 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090a:	485f      	ldr	r0, [pc, #380]	; (8000a88 <begin+0x1f0>)
 800090c:	f002 fd90 	bl	8003430 <HAL_GPIO_WritePin>

	#if defined(LCD_8BITMODE)
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000916:	485c      	ldr	r0, [pc, #368]	; (8000a88 <begin+0x1f0>)
 8000918:	f002 fd8a 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000922:	4859      	ldr	r0, [pc, #356]	; (8000a88 <begin+0x1f0>)
 8000924:	f002 fd84 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092e:	4856      	ldr	r0, [pc, #344]	; (8000a88 <begin+0x1f0>)
 8000930:	f002 fd7e 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093a:	4853      	ldr	r0, [pc, #332]	; (8000a88 <begin+0x1f0>)
 800093c:	f002 fd78 	bl	8003430 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000946:	4850      	ldr	r0, [pc, #320]	; (8000a88 <begin+0x1f0>)
 8000948:	f002 fd72 	bl	8003430 <HAL_GPIO_WritePin>
	#endif

	if (lines > 1) {
 800094c:	78bb      	ldrb	r3, [r7, #2]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d906      	bls.n	8000960 <begin+0xc8>
		lcd->_displayfunction |= LCD_2LINE;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	f043 0308 	orr.w	r3, r3, #8
 800095a:	b2da      	uxtb	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	78ba      	ldrb	r2, [r7, #2]
 8000964:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000966:	78fa      	ldrb	r2, [r7, #3]
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	3340      	adds	r3, #64	; 0x40
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	4613      	mov	r3, r2
 8000970:	2240      	movs	r2, #64	; 0x40
 8000972:	2100      	movs	r1, #0
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f000 f9df 	bl	8000d38 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 800097a:	787b      	ldrb	r3, [r7, #1]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d009      	beq.n	8000994 <begin+0xfc>
 8000980:	78bb      	ldrb	r3, [r7, #2]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d106      	bne.n	8000994 <begin+0xfc>
		lcd->_displayfunction |= LCD_5x10DOTS;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	b2da      	uxtb	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 8000994:	2032      	movs	r0, #50	; 0x32
 8000996:	f001 fe8f 	bl	80026b8 <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2108      	movs	r1, #8
 800099e:	4839      	ldr	r0, [pc, #228]	; (8000a84 <begin+0x1ec>)
 80009a0:	f002 fd46 	bl	8003430 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009aa:	4837      	ldr	r0, [pc, #220]	; (8000a88 <begin+0x1f0>)
 80009ac:	f002 fd40 	bl	8003430 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b6:	4834      	ldr	r0, [pc, #208]	; (8000a88 <begin+0x1f0>)
 80009b8:	f002 fd3a 	bl	8003430 <HAL_GPIO_WritePin>
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d015      	beq.n	80009f0 <begin+0x158>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f901 	bl	8000bcc <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 80009ca:	2005      	movs	r0, #5
 80009cc:	f001 fe74 	bl	80026b8 <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f8fb 	bl	8000bcc <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 80009d6:	2005      	movs	r0, #5
 80009d8:	f001 fe6e 	bl	80026b8 <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f8f5 	bl	8000bcc <write4bits>
		HAL_Delay(5);
 80009e2:	2005      	movs	r0, #5
 80009e4:	f001 fe68 	bl	80026b8 <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 80009e8:	2002      	movs	r0, #2
 80009ea:	f000 f8ef 	bl	8000bcc <write4bits>
 80009ee:	e023      	b.n	8000a38 <begin+0x1a0>

		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 23, pg 45 

		// Envia sequência de comando
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	f043 0320 	orr.w	r3, r3, #32
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4619      	mov	r1, r3
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f98b 	bl	8000d18 <command>
		HAL_Delay(6);  // wait more than 4.1 ms
 8000a02:	2006      	movs	r0, #6
 8000a04:	f001 fe58 	bl	80026b8 <HAL_Delay>

		// Segundo envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	f043 0320 	orr.w	r3, r3, #32
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f97f 	bl	8000d18 <command>
		HAL_Delay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f001 fe4c 	bl	80026b8 <HAL_Delay>

		// Terceiro envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	f043 0320 	orr.w	r3, r3, #32
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f973 	bl	8000d18 <command>
		HAL_Delay(1);
 8000a32:	2001      	movs	r0, #1
 8000a34:	f001 fe40 	bl	80026b8 <HAL_Delay>
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	f043 0320 	orr.w	r3, r3, #32
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f000 f967 	bl	8000d18 <command>
    HAL_Delay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f001 fe34 	bl	80026b8 <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2204      	movs	r2, #4
 8000a54:	705a      	strb	r2, [r3, #1]
    display(lcd);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f848 	bl	8000aec <display>

    // Limpa display
    clear(lcd);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 f836 	bl	8000ace <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2202      	movs	r2, #2
 8000a66:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 f94f 	bl	8000d18 <command>
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40020000 	.word	0x40020000

08000a8c <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 8000a96:	6838      	ldr	r0, [r7, #0]
 8000a98:	f7ff fba2 	bl	80001e0 <strlen>
 8000a9c:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]
 8000aa2:	e00b      	b.n	8000abc <print+0x30>
		write(lcd ,*(value+i));
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	f993 3000 	ldrsb.w	r3, [r3]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f833 	bl	8000b1c <write>
	for (uint8_t i = 0; i < Lengh; i++){
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8ef      	bhi.n	8000aa4 <print+0x18>
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 f91d 	bl	8000d18 <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f001 fdea 	bl	80026b8 <HAL_Delay>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	785b      	ldrb	r3, [r3, #1]
 8000b06:	f043 0308 	orr.w	r3, r3, #8
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f902 	bl	8000d18 <command>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 f804 	bl	8000b3c <send>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 8000b4c:	78bb      	ldrb	r3, [r7, #2]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	2108      	movs	r1, #8
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <send+0x5c>)
 8000b54:	f002 fc6c 	bl	8003430 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5e:	480f      	ldr	r0, [pc, #60]	; (8000b9c <send+0x60>)
 8000b60:	f002 fc66 	bl	8003430 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	f003 0310 	and.w	r3, r3, #16
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d004      	beq.n	8000b7a <send+0x3e>
	    write8bits(value);
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f866 	bl	8000c44 <write8bits>
	    write4bits(value);
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 8000b78:	e009      	b.n	8000b8e <send+0x52>
	    write4bits(value>>4);
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	091b      	lsrs	r3, r3, #4
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 f823 	bl	8000bcc <write4bits>
	    write4bits(value);
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f81f 	bl	8000bcc <write4bits>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <pulseEnable+0x28>)
 8000bac:	f002 fc40 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f001 fd81 	bl	80026b8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <pulseEnable+0x28>)
 8000bbe:	f002 fc37 	bl	8003430 <HAL_GPIO_WritePin>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020000 	.word	0x40020000

08000bcc <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be4:	4816      	ldr	r0, [pc, #88]	; (8000c40 <write4bits+0x74>)
 8000be6:	f002 fc23 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	085b      	lsrs	r3, r3, #1
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfc:	4810      	ldr	r0, [pc, #64]	; (8000c40 <write4bits+0x74>)
 8000bfe:	f002 fc17 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c14:	480a      	ldr	r0, [pc, #40]	; (8000c40 <write4bits+0x74>)
 8000c16:	f002 fc0b 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	08db      	lsrs	r3, r3, #3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <write4bits+0x74>)
 8000c2e:	f002 fbff 	bl	8003430 <HAL_GPIO_WritePin>

	pulseEnable();
 8000c32:	f7ff ffb5 	bl	8000ba0 <pulseEnable>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40020400 	.word	0x40020400

08000c44 <write8bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write8bits(uint8_t value){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,(value >> 0) & 0x01);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c5c:	482c      	ldr	r0, [pc, #176]	; (8000d10 <write8bits+0xcc>)
 8000c5e:	f002 fbe7 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,(value >> 1) & 0x01);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	085b      	lsrs	r3, r3, #1
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c74:	4826      	ldr	r0, [pc, #152]	; (8000d10 <write8bits+0xcc>)
 8000c76:	f002 fbdb 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,(value >> 2) & 0x01);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c8c:	4820      	ldr	r0, [pc, #128]	; (8000d10 <write8bits+0xcc>)
 8000c8e:	f002 fbcf 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,(value >> 3) & 0x01);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	08db      	lsrs	r3, r3, #3
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca4:	481a      	ldr	r0, [pc, #104]	; (8000d10 <write8bits+0xcc>)
 8000ca6:	f002 fbc3 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 4) & 0x01);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	091b      	lsrs	r3, r3, #4
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cbc:	4815      	ldr	r0, [pc, #84]	; (8000d14 <write8bits+0xd0>)
 8000cbe:	f002 fbb7 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 5) & 0x01);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	095b      	lsrs	r3, r3, #5
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd4:	480f      	ldr	r0, [pc, #60]	; (8000d14 <write8bits+0xd0>)
 8000cd6:	f002 fbab 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 6) & 0x01);
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	099b      	lsrs	r3, r3, #6
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <write8bits+0xd0>)
 8000cee:	f002 fb9f 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 7) & 0x01);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	09db      	lsrs	r3, r3, #7
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <write8bits+0xd0>)
 8000d00:	f002 fb96 	bl	8003430 <HAL_GPIO_WritePin>

	pulseEnable();
 8000d04:	f7ff ff4c 	bl	8000ba0 <pulseEnable>

}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40020400 	.word	0x40020400

08000d18 <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 8000d24:	78fb      	ldrb	r3, [r7, #3]
 8000d26:	2200      	movs	r2, #0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ff06 	bl	8000b3c <send>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	71da      	strb	r2, [r3, #7]
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	70fb      	strb	r3, [r7, #3]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 8000d82:	2304      	movs	r3, #4
 8000d84:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 8000d86:	78bb      	ldrb	r3, [r7, #2]
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d803      	bhi.n	8000d96 <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	3b01      	subs	r3, #1
 8000d94:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	78db      	ldrb	r3, [r3, #3]
 8000d9a:	78ba      	ldrb	r2, [r7, #2]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d303      	bcc.n	8000da8 <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	78db      	ldrb	r3, [r3, #3]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 8000da8:	78bb      	ldrb	r3, [r7, #2]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	791a      	ldrb	r2, [r3, #4]
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	4413      	add	r3, r2
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffa8 	bl	8000d18 <command>
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <SET_HW_TIMER2>:

static unsigned char encoderStatus;
static unsigned char timerStatus;

unsigned char SET_HW_TIMER2(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	encoderStatus = 0;
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <SET_HW_TIMER2+0x3c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
//	TIM_HandleTypeDef* htim2 =  getTimer2Instance();
	TIM_HandleTypeDef* htim2 =  getTimer2Instance();
 8000ddc:	f000 fd72 	bl	80018c4 <getTimer2Instance>
 8000de0:	4603      	mov	r3, r0
 8000de2:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Start_IT(htim2, TIM_CHANNEL_ALL);
 8000de4:	213c      	movs	r1, #60	; 0x3c
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f003 fd6a 	bl	80048c0 <HAL_TIM_Encoder_Start_IT>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SET_HW_TIMER2+0x3c>)
 8000df2:	701a      	strb	r2, [r3, #0]
	return !encoderStatus;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SET_HW_TIMER2+0x3c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2301      	moveq	r3, #1
 8000dfe:	2300      	movne	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000b8 	.word	0x200000b8

08000e10 <RESET_HW_TIMER2>:

unsigned char RESET_HW_TIMER2(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
    encoderStatus = 1;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <RESET_HW_TIMER2+0x38>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
//    TIM_HandleTypeDef* htim2 =  getTimer2Instance();
    TIM_HandleTypeDef* htim2 =  getTimer2Instance();
 8000e1c:	f000 fd52 	bl	80018c4 <getTimer2Instance>
 8000e20:	4603      	mov	r3, r0
 8000e22:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Stop_IT(htim2, TIM_CHANNEL_ALL);
 8000e24:	213c      	movs	r1, #60	; 0x3c
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f003 fdf8 	bl	8004a1c <HAL_TIM_Encoder_Stop_IT>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <RESET_HW_TIMER2+0x38>)
 8000e32:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8000e34:	2064      	movs	r0, #100	; 0x64
 8000e36:	f001 fc3f 	bl	80026b8 <HAL_Delay>
	return encoderStatus;
 8000e3a:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <RESET_HW_TIMER2+0x38>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000b8 	.word	0x200000b8

08000e4c <SET_HW_TIMER3>:

unsigned char SET_HW_TIMER3(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
    timerStatus = 0;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <SET_HW_TIMER3+0x40>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8000e58:	f000 fd3e 	bl	80018d8 <getTimer3Instance>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	607b      	str	r3, [r7, #4]
    __HAL_TIM_SET_COUNTER(htim3,0);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2200      	movs	r2, #0
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24
    timerStatus =HAL_TIM_Base_Start_IT(htim3);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f003 fc21 	bl	80046b0 <HAL_TIM_Base_Start_IT>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SET_HW_TIMER3+0x40>)
 8000e74:	701a      	strb	r2, [r3, #0]
    return !timerStatus;
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SET_HW_TIMER3+0x40>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bf0c      	ite	eq
 8000e7e:	2301      	moveq	r3, #1
 8000e80:	2300      	movne	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200000b9 	.word	0x200000b9

08000e90 <RESET_HW_TIMER3>:

unsigned char RESET_HW_TIMER3(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
    timerStatus = 1;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <RESET_HW_TIMER3+0x38>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8000e9c:	f000 fd1c 	bl	80018d8 <getTimer3Instance>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	607b      	str	r3, [r7, #4]
    timerStatus = HAL_TIM_Base_Stop(htim3);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f003 fbdc 	bl	8004662 <HAL_TIM_Base_Stop>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <RESET_HW_TIMER3+0x38>)
 8000eb0:	701a      	strb	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(htim3,0);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
//     timerStatus =HAL_TIM_Base_Stop_IT(htim3);
    return timerStatus;
 8000eba:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <RESET_HW_TIMER3+0x38>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000b9 	.word	0x200000b9

08000ecc <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2110      	movs	r1, #16
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <SELECT+0x14>)
 8000ed6:	f002 faab 	bl	8003430 <HAL_GPIO_WritePin>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2110      	movs	r1, #16
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <DESELECT+0x14>)
 8000eee:	f002 fa9f 	bl	8003430 <HAL_GPIO_WritePin>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020000 	.word	0x40020000

08000efc <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000f06:	bf00      	nop
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <SPI_TxByte+0x30>)
 8000f0a:	f003 fa82 	bl	8004412 <HAL_SPI_GetState>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d1f9      	bne.n	8000f08 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000f14:	1df9      	adds	r1, r7, #7
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <SPI_TxByte+0x30>)
 8000f1e:	f002 ff9a 	bl	8003e56 <HAL_SPI_Transmit>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000bc 	.word	0x200000bc

08000f30 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000f36:	23ff      	movs	r3, #255	; 0xff
 8000f38:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000f3e:	bf00      	nop
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <SPI_RxByte+0x38>)
 8000f42:	f003 fa66 	bl	8004412 <HAL_SPI_GetState>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d1f9      	bne.n	8000f40 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000f4c:	1dba      	adds	r2, r7, #6
 8000f4e:	1df9      	adds	r1, r7, #7
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <SPI_RxByte+0x38>)
 8000f5a:	f003 f8b8 	bl	80040ce <HAL_SPI_TransmitReceive>

  return data;
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000bc 	.word	0x200000bc

08000f6c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000f74:	f7ff ffdc 	bl	8000f30 <SPI_RxByte>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	701a      	strb	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <SD_ReadyWait+0x34>)
 8000f90:	2232      	movs	r2, #50	; 0x32
 8000f92:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000f94:	f7ff ffcc 	bl	8000f30 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000f98:	f7ff ffca 	bl	8000f30 <SPI_RxByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2bff      	cmp	r3, #255	; 0xff
 8000fa4:	d004      	beq.n	8000fb0 <SD_ReadyWait+0x28>
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SD_ReadyWait+0x34>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f3      	bne.n	8000f98 <SD_ReadyWait+0x10>

  return res;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000025e 	.word	0x2000025e

08000fc0 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000fc6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000fca:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000fcc:	f7ff ff8a 	bl	8000ee4 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	e005      	b.n	8000fe2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000fd6:	20ff      	movs	r0, #255	; 0xff
 8000fd8:	f7ff ff90 	bl	8000efc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	2b09      	cmp	r3, #9
 8000fe6:	ddf6      	ble.n	8000fd6 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000fe8:	f7ff ff70 	bl	8000ecc <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001000:	2395      	movs	r3, #149	; 0x95
 8001002:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e009      	b.n	800101e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800100a:	1d3a      	adds	r2, r7, #4
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff72 	bl	8000efc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b05      	cmp	r3, #5
 8001022:	ddf2      	ble.n	800100a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001024:	e002      	b.n	800102c <SD_PowerOn+0x6c>
  {
    Count--;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3b01      	subs	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800102c:	f7ff ff80 	bl	8000f30 <SPI_RxByte>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d002      	beq.n	800103c <SD_PowerOn+0x7c>
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f4      	bne.n	8001026 <SD_PowerOn+0x66>
  }

  DESELECT();
 800103c:	f7ff ff52 	bl	8000ee4 <DESELECT>
  SPI_TxByte(0XFF);
 8001040:	20ff      	movs	r0, #255	; 0xff
 8001042:	f7ff ff5b 	bl	8000efc <SPI_TxByte>

  PowerFlag = 1;
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <SD_PowerOn+0x94>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200000bb 	.word	0x200000bb

08001058 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <SD_PowerOff+0x14>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	200000bb 	.word	0x200000bb

08001070 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <SD_CheckPower+0x14>)
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200000bb 	.word	0x200000bb

08001088 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <SD_RxDataBlock+0x68>)
 8001094:	220a      	movs	r2, #10
 8001096:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001098:	f7ff ff4a 	bl	8000f30 <SPI_RxByte>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2bff      	cmp	r3, #255	; 0xff
 80010a4:	d104      	bne.n	80010b0 <SD_RxDataBlock+0x28>
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <SD_RxDataBlock+0x68>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f3      	bne.n	8001098 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2bfe      	cmp	r3, #254	; 0xfe
 80010b4:	d001      	beq.n	80010ba <SD_RxDataBlock+0x32>
    return FALSE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e016      	b.n	80010e8 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff53 	bl	8000f6c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff4d 	bl	8000f6c <SPI_RxBytePtr>
  } while(btr -= 2);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	3b02      	subs	r3, #2
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1ed      	bne.n	80010ba <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80010de:	f7ff ff27 	bl	8000f30 <SPI_RxByte>
  SPI_RxByte();
 80010e2:	f7ff ff25 	bl	8000f30 <SPI_RxByte>

  return TRUE;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000025d 	.word	0x2000025d

080010f4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001104:	f7ff ff40 	bl	8000f88 <SD_ReadyWait>
 8001108:	4603      	mov	r3, r0
 800110a:	2bff      	cmp	r3, #255	; 0xff
 800110c:	d001      	beq.n	8001112 <SD_TxDataBlock+0x1e>
    return FALSE;
 800110e:	2300      	movs	r3, #0
 8001110:	e040      	b.n	8001194 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fef1 	bl	8000efc <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2bfd      	cmp	r3, #253	; 0xfd
 800111e:	d031      	beq.n	8001184 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fee5 	bl	8000efc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fede 	bl	8000efc <SPI_TxByte>
    } while (--wc);
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	3b01      	subs	r3, #1
 8001144:	73bb      	strb	r3, [r7, #14]
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1eb      	bne.n	8001124 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 800114c:	f7ff fef0 	bl	8000f30 <SPI_RxByte>
    SPI_RxByte();
 8001150:	f7ff feee 	bl	8000f30 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001154:	e00b      	b.n	800116e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001156:	f7ff feeb 	bl	8000f30 <SPI_RxByte>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	f003 031f 	and.w	r3, r3, #31
 8001164:	2b05      	cmp	r3, #5
 8001166:	d006      	beq.n	8001176 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001168:	7b7b      	ldrb	r3, [r7, #13]
 800116a:	3301      	adds	r3, #1
 800116c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800116e:	7b7b      	ldrb	r3, [r7, #13]
 8001170:	2b40      	cmp	r3, #64	; 0x40
 8001172:	d9f0      	bls.n	8001156 <SD_TxDataBlock+0x62>
 8001174:	e000      	b.n	8001178 <SD_TxDataBlock+0x84>
        break;
 8001176:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001178:	bf00      	nop
 800117a:	f7ff fed9 	bl	8000f30 <SPI_RxByte>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0fa      	beq.n	800117a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	2b05      	cmp	r3, #5
 800118c:	d101      	bne.n	8001192 <SD_TxDataBlock+0x9e>
    return TRUE;
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80011a8:	f7ff feee 	bl	8000f88 <SD_ReadyWait>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2bff      	cmp	r3, #255	; 0xff
 80011b0:	d001      	beq.n	80011b6 <SD_SendCmd+0x1a>
    return 0xFF;
 80011b2:	23ff      	movs	r3, #255	; 0xff
 80011b4:	e040      	b.n	8001238 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fe9f 	bl	8000efc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	0e1b      	lsrs	r3, r3, #24
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fe99 	bl	8000efc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe93 	bl	8000efc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fe8d 	bl	8000efc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe88 	bl	8000efc <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b40      	cmp	r3, #64	; 0x40
 80011f4:	d101      	bne.n	80011fa <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80011f6:	2395      	movs	r3, #149	; 0x95
 80011f8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b48      	cmp	r3, #72	; 0x48
 80011fe:	d101      	bne.n	8001204 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001200:	2387      	movs	r3, #135	; 0x87
 8001202:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe78 	bl	8000efc <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b4c      	cmp	r3, #76	; 0x4c
 8001210:	d101      	bne.n	8001216 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001212:	f7ff fe8d 	bl	8000f30 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001216:	230a      	movs	r3, #10
 8001218:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800121a:	f7ff fe89 	bl	8000f30 <SPI_RxByte>
 800121e:	4603      	mov	r3, r0
 8001220:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001222:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001226:	2b00      	cmp	r3, #0
 8001228:	da05      	bge.n	8001236 <SD_SendCmd+0x9a>
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	3b01      	subs	r3, #1
 800122e:	73bb      	strb	r3, [r7, #14]
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f1      	bne.n	800121a <SD_SendCmd+0x7e>

  return res;
 8001236:	7b7b      	ldrb	r3, [r7, #13]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001250:	2301      	movs	r3, #1
 8001252:	e0d5      	b.n	8001400 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001254:	4b6c      	ldr	r3, [pc, #432]	; (8001408 <SD_disk_initialize+0x1c8>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <SD_disk_initialize+0x2a>
    return Stat;
 8001262:	4b69      	ldr	r3, [pc, #420]	; (8001408 <SD_disk_initialize+0x1c8>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	e0ca      	b.n	8001400 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800126a:	f7ff fea9 	bl	8000fc0 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800126e:	f7ff fe2d 	bl	8000ecc <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001276:	2100      	movs	r1, #0
 8001278:	2040      	movs	r0, #64	; 0x40
 800127a:	f7ff ff8f 	bl	800119c <SD_SendCmd>
 800127e:	4603      	mov	r3, r0
 8001280:	2b01      	cmp	r3, #1
 8001282:	f040 80a5 	bne.w	80013d0 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001286:	4b61      	ldr	r3, [pc, #388]	; (800140c <SD_disk_initialize+0x1cc>)
 8001288:	2264      	movs	r2, #100	; 0x64
 800128a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800128c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001290:	2048      	movs	r0, #72	; 0x48
 8001292:	f7ff ff83 	bl	800119c <SD_SendCmd>
 8001296:	4603      	mov	r3, r0
 8001298:	2b01      	cmp	r3, #1
 800129a:	d158      	bne.n	800134e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800129c:	2300      	movs	r3, #0
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e00c      	b.n	80012bc <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80012a2:	7bfc      	ldrb	r4, [r7, #15]
 80012a4:	f7ff fe44 	bl	8000f30 <SPI_RxByte>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	f104 0310 	add.w	r3, r4, #16
 80012b0:	443b      	add	r3, r7
 80012b2:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	3301      	adds	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d9ef      	bls.n	80012a2 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012c2:	7abb      	ldrb	r3, [r7, #10]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	f040 8083 	bne.w	80013d0 <SD_disk_initialize+0x190>
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	2baa      	cmp	r3, #170	; 0xaa
 80012ce:	d17f      	bne.n	80013d0 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80012d0:	2100      	movs	r1, #0
 80012d2:	2077      	movs	r0, #119	; 0x77
 80012d4:	f7ff ff62 	bl	800119c <SD_SendCmd>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d807      	bhi.n	80012ee <SD_disk_initialize+0xae>
 80012de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012e2:	2069      	movs	r0, #105	; 0x69
 80012e4:	f7ff ff5a 	bl	800119c <SD_SendCmd>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <SD_disk_initialize+0x1cc>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1eb      	bne.n	80012d0 <SD_disk_initialize+0x90>
 80012f8:	e000      	b.n	80012fc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80012fa:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80012fc:	4b43      	ldr	r3, [pc, #268]	; (800140c <SD_disk_initialize+0x1cc>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d064      	beq.n	80013d0 <SD_disk_initialize+0x190>
 8001306:	2100      	movs	r1, #0
 8001308:	207a      	movs	r0, #122	; 0x7a
 800130a:	f7ff ff47 	bl	800119c <SD_SendCmd>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d15d      	bne.n	80013d0 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e00c      	b.n	8001334 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800131a:	7bfc      	ldrb	r4, [r7, #15]
 800131c:	f7ff fe08 	bl	8000f30 <SPI_RxByte>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	f104 0310 	add.w	r3, r4, #16
 8001328:	443b      	add	r3, r7
 800132a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	3301      	adds	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	2b03      	cmp	r3, #3
 8001338:	d9ef      	bls.n	800131a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800133a:	7a3b      	ldrb	r3, [r7, #8]
 800133c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SD_disk_initialize+0x108>
 8001344:	2306      	movs	r3, #6
 8001346:	e000      	b.n	800134a <SD_disk_initialize+0x10a>
 8001348:	2302      	movs	r3, #2
 800134a:	73bb      	strb	r3, [r7, #14]
 800134c:	e040      	b.n	80013d0 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800134e:	2100      	movs	r1, #0
 8001350:	2077      	movs	r0, #119	; 0x77
 8001352:	f7ff ff23 	bl	800119c <SD_SendCmd>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	d808      	bhi.n	800136e <SD_disk_initialize+0x12e>
 800135c:	2100      	movs	r1, #0
 800135e:	2069      	movs	r0, #105	; 0x69
 8001360:	f7ff ff1c 	bl	800119c <SD_SendCmd>
 8001364:	4603      	mov	r3, r0
 8001366:	2b01      	cmp	r3, #1
 8001368:	d801      	bhi.n	800136e <SD_disk_initialize+0x12e>
 800136a:	2302      	movs	r3, #2
 800136c:	e000      	b.n	8001370 <SD_disk_initialize+0x130>
 800136e:	2301      	movs	r3, #1
 8001370:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001372:	7bbb      	ldrb	r3, [r7, #14]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d10e      	bne.n	8001396 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001378:	2100      	movs	r1, #0
 800137a:	2077      	movs	r0, #119	; 0x77
 800137c:	f7ff ff0e 	bl	800119c <SD_SendCmd>
 8001380:	4603      	mov	r3, r0
 8001382:	2b01      	cmp	r3, #1
 8001384:	d80e      	bhi.n	80013a4 <SD_disk_initialize+0x164>
 8001386:	2100      	movs	r1, #0
 8001388:	2069      	movs	r0, #105	; 0x69
 800138a:	f7ff ff07 	bl	800119c <SD_SendCmd>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d107      	bne.n	80013a4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001394:	e00d      	b.n	80013b2 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001396:	2100      	movs	r1, #0
 8001398:	2041      	movs	r0, #65	; 0x41
 800139a:	f7ff feff 	bl	800119c <SD_SendCmd>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <SD_disk_initialize+0x1cc>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1e1      	bne.n	8001372 <SD_disk_initialize+0x132>
 80013ae:	e000      	b.n	80013b2 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80013b0:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <SD_disk_initialize+0x1cc>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d007      	beq.n	80013cc <SD_disk_initialize+0x18c>
 80013bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c0:	2050      	movs	r0, #80	; 0x50
 80013c2:	f7ff feeb 	bl	800119c <SD_SendCmd>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80013d0:	4a0f      	ldr	r2, [pc, #60]	; (8001410 <SD_disk_initialize+0x1d0>)
 80013d2:	7bbb      	ldrb	r3, [r7, #14]
 80013d4:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80013d6:	f7ff fd85 	bl	8000ee4 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80013da:	f7ff fda9 	bl	8000f30 <SPI_RxByte>

  if (type)
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d008      	beq.n	80013f6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <SD_disk_initialize+0x1c8>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f023 0301 	bic.w	r3, r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SD_disk_initialize+0x1c8>)
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	e001      	b.n	80013fa <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80013f6:	f7ff fe2f 	bl	8001058 <SD_PowerOff>
  }

  return Stat;
 80013fa:	4b03      	ldr	r3, [pc, #12]	; (8001408 <SD_disk_initialize+0x1c8>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b2db      	uxtb	r3, r3
}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	2000000c 	.word	0x2000000c
 800140c:	2000025d 	.word	0x2000025d
 8001410:	200000ba 	.word	0x200000ba

08001414 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001424:	2301      	movs	r3, #1
 8001426:	e002      	b.n	800142e <SD_disk_status+0x1a>

  return Stat;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <SD_disk_status+0x28>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000000c 	.word	0x2000000c

08001440 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <SD_disk_read+0x1c>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <SD_disk_read+0x20>
    return RES_PARERR;
 800145c:	2304      	movs	r3, #4
 800145e:	e051      	b.n	8001504 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <SD_disk_read+0xcc>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800146e:	2303      	movs	r3, #3
 8001470:	e048      	b.n	8001504 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <SD_disk_read+0xd0>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	025b      	lsls	r3, r3, #9
 8001482:	607b      	str	r3, [r7, #4]

  SELECT();
 8001484:	f7ff fd22 	bl	8000ecc <SELECT>

  if (count == 1)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d111      	bne.n	80014b2 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2051      	movs	r0, #81	; 0x51
 8001492:	f7ff fe83 	bl	800119c <SD_SendCmd>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d129      	bne.n	80014f0 <SD_disk_read+0xb0>
 800149c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f7ff fdf1 	bl	8001088 <SD_RxDataBlock>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d021      	beq.n	80014f0 <SD_disk_read+0xb0>
      count = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	e01e      	b.n	80014f0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	2052      	movs	r0, #82	; 0x52
 80014b6:	f7ff fe71 	bl	800119c <SD_SendCmd>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d117      	bne.n	80014f0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80014c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f7ff fddf 	bl	8001088 <SD_RxDataBlock>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00a      	beq.n	80014e6 <SD_disk_read+0xa6>
          break;

        buff += 512;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014d6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	3b01      	subs	r3, #1
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ed      	bne.n	80014c0 <SD_disk_read+0x80>
 80014e4:	e000      	b.n	80014e8 <SD_disk_read+0xa8>
          break;
 80014e6:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80014e8:	2100      	movs	r1, #0
 80014ea:	204c      	movs	r0, #76	; 0x4c
 80014ec:	f7ff fe56 	bl	800119c <SD_SendCmd>
    }
  }

  DESELECT();
 80014f0:	f7ff fcf8 	bl	8000ee4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80014f4:	f7ff fd1c 	bl	8000f30 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bf14      	ite	ne
 80014fe:	2301      	movne	r3, #1
 8001500:	2300      	moveq	r3, #0
 8001502:	b2db      	uxtb	r3, r3
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000000c 	.word	0x2000000c
 8001510:	200000ba 	.word	0x200000ba

08001514 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <SD_disk_write+0x1c>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <SD_disk_write+0x20>
    return RES_PARERR;
 8001530:	2304      	movs	r3, #4
 8001532:	e06b      	b.n	800160c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001534:	4b37      	ldr	r3, [pc, #220]	; (8001614 <SD_disk_write+0x100>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001542:	2303      	movs	r3, #3
 8001544:	e062      	b.n	800160c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <SD_disk_write+0x100>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001554:	2302      	movs	r3, #2
 8001556:	e059      	b.n	800160c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001558:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <SD_disk_write+0x104>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	607b      	str	r3, [r7, #4]

  SELECT();
 800156a:	f7ff fcaf 	bl	8000ecc <SELECT>

  if (count == 1)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d110      	bne.n	8001596 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	2058      	movs	r0, #88	; 0x58
 8001578:	f7ff fe10 	bl	800119c <SD_SendCmd>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d13a      	bne.n	80015f8 <SD_disk_write+0xe4>
 8001582:	21fe      	movs	r1, #254	; 0xfe
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	f7ff fdb5 	bl	80010f4 <SD_TxDataBlock>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d033      	beq.n	80015f8 <SD_disk_write+0xe4>
      count = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	e030      	b.n	80015f8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <SD_disk_write+0x104>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80015a2:	2100      	movs	r1, #0
 80015a4:	2077      	movs	r0, #119	; 0x77
 80015a6:	f7ff fdf9 	bl	800119c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80015aa:	6839      	ldr	r1, [r7, #0]
 80015ac:	2057      	movs	r0, #87	; 0x57
 80015ae:	f7ff fdf5 	bl	800119c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	2059      	movs	r0, #89	; 0x59
 80015b6:	f7ff fdf1 	bl	800119c <SD_SendCmd>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d11b      	bne.n	80015f8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80015c0:	21fc      	movs	r1, #252	; 0xfc
 80015c2:	68b8      	ldr	r0, [r7, #8]
 80015c4:	f7ff fd96 	bl	80010f4 <SD_TxDataBlock>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00a      	beq.n	80015e4 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015d4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	3b01      	subs	r3, #1
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ee      	bne.n	80015c0 <SD_disk_write+0xac>
 80015e2:	e000      	b.n	80015e6 <SD_disk_write+0xd2>
          break;
 80015e4:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80015e6:	21fd      	movs	r1, #253	; 0xfd
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff fd83 	bl	80010f4 <SD_TxDataBlock>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <SD_disk_write+0xe4>
      {
        count = 1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80015f8:	f7ff fc74 	bl	8000ee4 <DESELECT>
  SPI_RxByte();
 80015fc:	f7ff fc98 	bl	8000f30 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2000000c 	.word	0x2000000c
 8001618:	200000ba 	.word	0x200000ba

0800161c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b08b      	sub	sp, #44	; 0x2c
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	603a      	str	r2, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
 8001628:	460b      	mov	r3, r1
 800162a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001636:	2304      	movs	r3, #4
 8001638:	e11b      	b.n	8001872 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	2b05      	cmp	r3, #5
 8001644:	d129      	bne.n	800169a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d017      	beq.n	800167e <SD_disk_ioctl+0x62>
 800164e:	2b02      	cmp	r3, #2
 8001650:	dc1f      	bgt.n	8001692 <SD_disk_ioctl+0x76>
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <SD_disk_ioctl+0x40>
 8001656:	2b01      	cmp	r3, #1
 8001658:	d00b      	beq.n	8001672 <SD_disk_ioctl+0x56>
 800165a:	e01a      	b.n	8001692 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800165c:	f7ff fd08 	bl	8001070 <SD_CheckPower>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001666:	f7ff fcf7 	bl	8001058 <SD_PowerOff>
      res = RES_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001670:	e0fd      	b.n	800186e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001672:	f7ff fca5 	bl	8000fc0 <SD_PowerOn>
      res = RES_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800167c:	e0f7      	b.n	800186e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	1c5c      	adds	r4, r3, #1
 8001682:	f7ff fcf5 	bl	8001070 <SD_CheckPower>
 8001686:	4603      	mov	r3, r0
 8001688:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001690:	e0ed      	b.n	800186e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001692:	2304      	movs	r3, #4
 8001694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001698:	e0e9      	b.n	800186e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800169a:	4b78      	ldr	r3, [pc, #480]	; (800187c <SD_disk_ioctl+0x260>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0e2      	b.n	8001872 <SD_disk_ioctl+0x256>

    SELECT();
 80016ac:	f7ff fc0e 	bl	8000ecc <SELECT>

    switch (ctrl)
 80016b0:	79bb      	ldrb	r3, [r7, #6]
 80016b2:	2b0d      	cmp	r3, #13
 80016b4:	f200 80cc 	bhi.w	8001850 <SD_disk_ioctl+0x234>
 80016b8:	a201      	add	r2, pc, #4	; (adr r2, 80016c0 <SD_disk_ioctl+0xa4>)
 80016ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016be:	bf00      	nop
 80016c0:	080017bb 	.word	0x080017bb
 80016c4:	080016f9 	.word	0x080016f9
 80016c8:	080017ab 	.word	0x080017ab
 80016cc:	08001851 	.word	0x08001851
 80016d0:	08001851 	.word	0x08001851
 80016d4:	08001851 	.word	0x08001851
 80016d8:	08001851 	.word	0x08001851
 80016dc:	08001851 	.word	0x08001851
 80016e0:	08001851 	.word	0x08001851
 80016e4:	08001851 	.word	0x08001851
 80016e8:	08001851 	.word	0x08001851
 80016ec:	080017cd 	.word	0x080017cd
 80016f0:	080017f1 	.word	0x080017f1
 80016f4:	08001815 	.word	0x08001815
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80016f8:	2100      	movs	r1, #0
 80016fa:	2049      	movs	r0, #73	; 0x49
 80016fc:	f7ff fd4e 	bl	800119c <SD_SendCmd>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 80a8 	bne.w	8001858 <SD_disk_ioctl+0x23c>
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2110      	movs	r1, #16
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fcba 	bl	8001088 <SD_RxDataBlock>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 809e 	beq.w	8001858 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 800171c:	7b3b      	ldrb	r3, [r7, #12]
 800171e:	099b      	lsrs	r3, r3, #6
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d10e      	bne.n	8001744 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001726:	7d7b      	ldrb	r3, [r7, #21]
 8001728:	b29a      	uxth	r2, r3
 800172a:	7d3b      	ldrb	r3, [r7, #20]
 800172c:	b29b      	uxth	r3, r3
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b29b      	uxth	r3, r3
 8001732:	4413      	add	r3, r2
 8001734:	b29b      	uxth	r3, r3
 8001736:	3301      	adds	r3, #1
 8001738:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800173a:	8bfb      	ldrh	r3, [r7, #30]
 800173c:	029a      	lsls	r2, r3, #10
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e02e      	b.n	80017a2 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001744:	7c7b      	ldrb	r3, [r7, #17]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	b2da      	uxtb	r2, r3
 800174c:	7dbb      	ldrb	r3, [r7, #22]
 800174e:	09db      	lsrs	r3, r3, #7
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4413      	add	r3, r2
 8001754:	b2da      	uxtb	r2, r3
 8001756:	7d7b      	ldrb	r3, [r7, #21]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 0306 	and.w	r3, r3, #6
 8001760:	b2db      	uxtb	r3, r3
 8001762:	4413      	add	r3, r2
 8001764:	b2db      	uxtb	r3, r3
 8001766:	3302      	adds	r3, #2
 8001768:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800176c:	7d3b      	ldrb	r3, [r7, #20]
 800176e:	099b      	lsrs	r3, r3, #6
 8001770:	b2db      	uxtb	r3, r3
 8001772:	b29a      	uxth	r2, r3
 8001774:	7cfb      	ldrb	r3, [r7, #19]
 8001776:	b29b      	uxth	r3, r3
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	b29b      	uxth	r3, r3
 800177c:	4413      	add	r3, r2
 800177e:	b29a      	uxth	r2, r3
 8001780:	7cbb      	ldrb	r3, [r7, #18]
 8001782:	029b      	lsls	r3, r3, #10
 8001784:	b29b      	uxth	r3, r3
 8001786:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800178a:	b29b      	uxth	r3, r3
 800178c:	4413      	add	r3, r2
 800178e:	b29b      	uxth	r3, r3
 8001790:	3301      	adds	r3, #1
 8001792:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001794:	8bfa      	ldrh	r2, [r7, #30]
 8001796:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800179a:	3b09      	subs	r3, #9
 800179c:	409a      	lsls	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80017a8:	e056      	b.n	8001858 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017b8:	e055      	b.n	8001866 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80017ba:	f7ff fbe5 	bl	8000f88 <SD_ReadyWait>
 80017be:	4603      	mov	r3, r0
 80017c0:	2bff      	cmp	r3, #255	; 0xff
 80017c2:	d14b      	bne.n	800185c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017ca:	e047      	b.n	800185c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80017cc:	2100      	movs	r1, #0
 80017ce:	2049      	movs	r0, #73	; 0x49
 80017d0:	f7ff fce4 	bl	800119c <SD_SendCmd>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d142      	bne.n	8001860 <SD_disk_ioctl+0x244>
 80017da:	2110      	movs	r1, #16
 80017dc:	6a38      	ldr	r0, [r7, #32]
 80017de:	f7ff fc53 	bl	8001088 <SD_RxDataBlock>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d03b      	beq.n	8001860 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017ee:	e037      	b.n	8001860 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80017f0:	2100      	movs	r1, #0
 80017f2:	204a      	movs	r0, #74	; 0x4a
 80017f4:	f7ff fcd2 	bl	800119c <SD_SendCmd>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d132      	bne.n	8001864 <SD_disk_ioctl+0x248>
 80017fe:	2110      	movs	r1, #16
 8001800:	6a38      	ldr	r0, [r7, #32]
 8001802:	f7ff fc41 	bl	8001088 <SD_RxDataBlock>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d02b      	beq.n	8001864 <SD_disk_ioctl+0x248>
        res = RES_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001812:	e027      	b.n	8001864 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001814:	2100      	movs	r1, #0
 8001816:	207a      	movs	r0, #122	; 0x7a
 8001818:	f7ff fcc0 	bl	800119c <SD_SendCmd>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d116      	bne.n	8001850 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001822:	2300      	movs	r3, #0
 8001824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001828:	e00b      	b.n	8001842 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800182a:	6a3c      	ldr	r4, [r7, #32]
 800182c:	1c63      	adds	r3, r4, #1
 800182e:	623b      	str	r3, [r7, #32]
 8001830:	f7ff fb7e 	bl	8000f30 <SPI_RxByte>
 8001834:	4603      	mov	r3, r0
 8001836:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001838:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800183c:	3301      	adds	r3, #1
 800183e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001842:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001846:	2b03      	cmp	r3, #3
 8001848:	d9ef      	bls.n	800182a <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001850:	2304      	movs	r3, #4
 8001852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001856:	e006      	b.n	8001866 <SD_disk_ioctl+0x24a>
      break;
 8001858:	bf00      	nop
 800185a:	e004      	b.n	8001866 <SD_disk_ioctl+0x24a>
      break;
 800185c:	bf00      	nop
 800185e:	e002      	b.n	8001866 <SD_disk_ioctl+0x24a>
      break;
 8001860:	bf00      	nop
 8001862:	e000      	b.n	8001866 <SD_disk_ioctl+0x24a>
      break;
 8001864:	bf00      	nop
    }

    DESELECT();
 8001866:	f7ff fb3d 	bl	8000ee4 <DESELECT>
    SPI_RxByte();
 800186a:	f7ff fb61 	bl	8000f30 <SPI_RxByte>
  }

  return res;
 800186e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001872:	4618      	mov	r0, r3
 8001874:	372c      	adds	r7, #44	; 0x2c
 8001876:	46bd      	mov	sp, r7
 8001878:	bd90      	pop	{r4, r7, pc}
 800187a:	bf00      	nop
 800187c:	2000000c 	.word	0x2000000c

08001880 <getSamplesCount>:
{
	return samples = 0;
}

unsigned char* getSamplesCount()
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	return &samples;
 8001884:	4b02      	ldr	r3, [pc, #8]	; (8001890 <getSamplesCount+0x10>)
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	20000253 	.word	0x20000253

08001894 <getKeyPressed>:
{
	timer3Data = 0;
}

unsigned char getKeyPressed()
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	return key;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <getKeyPressed+0x14>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b2db      	uxtb	r3, r3
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	20000248 	.word	0x20000248

080018ac <resetKeyPressed>:

void resetKeyPressed()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	key = IDDLE;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <resetKeyPressed+0x14>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 80018b6:	20c8      	movs	r0, #200	; 0xc8
 80018b8:	f000 fefe 	bl	80026b8 <HAL_Delay>
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000248 	.word	0x20000248

080018c4 <getTimer2Instance>:
{
	return &huart2;
}

TIM_HandleTypeDef* getTimer2Instance()
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
	return &htim2;
 80018c8:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <getTimer2Instance+0x10>)
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	20000114 	.word	0x20000114

080018d8 <getTimer3Instance>:

TIM_HandleTypeDef* getTimer3Instance()
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	return &htim3;
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <getTimer3Instance+0x10>)
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	2000015c 	.word	0x2000015c

080018ec <getSensorFlag>:
{
	return sensorFlag;
}

unsigned char* getSensorFlag()
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
	return &sensorFlag;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <getSensorFlag+0x10>)
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	2000000d 	.word	0x2000000d

08001900 <getTimer3Variable>:

uint32_t* getTimer3Variable()
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
	return &timer3Data;
 8001904:	4b02      	ldr	r3, [pc, #8]	; (8001910 <getTimer3Variable+0x10>)
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20000254 	.word	0x20000254

08001914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191a:	f000 fe5b 	bl	80025d4 <HAL_Init>
  	  unsigned char menuSelect;
  	  unsigned char menuDisplay;
  	  unsigned char menuState;
    };

    struct Menu menuTesteMain = {IDDLE,IDDLE,IDDLE,IDDLE};
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
    struct Menu menuTesteSub = {IDDLE,IDDLE,IDDLE,IDDLE};
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
    unsigned char displayUpdateStatus = IDDLE;
 8001926:	2300      	movs	r3, #0
 8001928:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192a:	f000 f847 	bl	80019bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800192e:	f000 f9cd 	bl	8001ccc <MX_GPIO_Init>
  MX_DMA_Init();
 8001932:	f000 f9ab 	bl	8001c8c <MX_DMA_Init>
  MX_TIM2_Init();
 8001936:	f000 f8df 	bl	8001af8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800193a:	f000 f931 	bl	8001ba0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800193e:	f000 f97b 	bl	8001c38 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001942:	f000 f8a3 	bl	8001a8c <MX_SPI1_Init>
  MX_FATFS_Init();
 8001946:	f004 fe01 	bl	800654c <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001950:	4812      	ldr	r0, [pc, #72]	; (800199c <main+0x88>)
 8001952:	f001 fd6d 	bl	8003430 <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 8001956:	2202      	movs	r2, #2
 8001958:	4911      	ldr	r1, [pc, #68]	; (80019a0 <main+0x8c>)
 800195a:	4812      	ldr	r0, [pc, #72]	; (80019a4 <main+0x90>)
 800195c:	f003 fd0f 	bl	800537e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <main+0x94>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <main+0x94>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0208 	bic.w	r2, r2, #8
 800196e:	601a      	str	r2, [r3, #0]
  homeDataDisplay(appNameMsg,companyNameMsg,appVersionMsg);
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <main+0x98>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <main+0x9c>)
 8001976:	6811      	ldr	r1, [r2, #0]
 8001978:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <main+0xa0>)
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe ff27 	bl	80007d0 <homeDataDisplay>
#endif

#if _MEASUREVALIDATION
  while(1)
  {
	  readyUserInterface(&displayUpdateStatus);
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fe20 	bl	80005ca <readyUserInterface>
	  updateUserMsg(0,USERMSG1,"SENSING MEAS.",&displayUpdateStatus);
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <main+0xa4>)
 800198e:	2100      	movs	r1, #0
 8001990:	2000      	movs	r0, #0
 8001992:	f7fe fdff 	bl	8000594 <updateUserMsg>
	  measureValidation();
 8001996:	f7fe fe36 	bl	8000606 <measureValidation>
	  readyUserInterface(&displayUpdateStatus);
 800199a:	e7f2      	b.n	8001982 <main+0x6e>
 800199c:	40020800 	.word	0x40020800
 80019a0:	2000024c 	.word	0x2000024c
 80019a4:	200001a4 	.word	0x200001a4
 80019a8:	200001e8 	.word	0x200001e8
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000004 	.word	0x20000004
 80019b4:	20000008 	.word	0x20000008
 80019b8:	08007330 	.word	0x08007330

080019bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b094      	sub	sp, #80	; 0x50
 80019c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019c2:	f107 0320 	add.w	r3, r7, #32
 80019c6:	2230      	movs	r2, #48	; 0x30
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f004 febc 	bl	8006748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <SystemClock_Config+0xc8>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <SystemClock_Config+0xc8>)
 80019ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ee:	6413      	str	r3, [r2, #64]	; 0x40
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <SystemClock_Config+0xc8>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <SystemClock_Config+0xcc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a20      	ldr	r2, [pc, #128]	; (8001a88 <SystemClock_Config+0xcc>)
 8001a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <SystemClock_Config+0xcc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a22:	2302      	movs	r3, #2
 8001a24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a30:	2360      	movs	r3, #96	; 0x60
 8001a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3c:	f107 0320 	add.w	r3, r7, #32
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 fd27 	bl	8003494 <HAL_RCC_OscConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a4c:	f000 fb2a 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a50:	230f      	movs	r3, #15
 8001a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a54:	2302      	movs	r3, #2
 8001a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2103      	movs	r1, #3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 ff89 	bl	8003984 <HAL_RCC_ClockConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a78:	f000 fb14 	bl	80020a4 <Error_Handler>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3750      	adds	r7, #80	; 0x50
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000

08001a8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001a92:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <MX_SPI1_Init+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001a98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001ac0:	2230      	movs	r2, #48	; 0x30
 8001ac2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001ad8:	220a      	movs	r2, #10
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <MX_SPI1_Init+0x64>)
 8001ade:	f002 f931 	bl	8003d44 <HAL_SPI_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ae8:	f000 fadc 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200000bc 	.word	0x200000bc
 8001af4:	40013000 	.word	0x40013000

08001af8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	2224      	movs	r2, #36	; 0x24
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f004 fe1e 	bl	8006748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b14:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <MX_TIM2_Init+0xa4>)
 8001b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_TIM2_Init+0xa4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <MX_TIM2_Init+0xa4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_TIM2_Init+0xa4>)
 8001b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_TIM2_Init+0xa4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_TIM2_Init+0xa4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b40:	2302      	movs	r3, #2
 8001b42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b44:	2301      	movs	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b54:	2301      	movs	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	4619      	mov	r1, r3
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <MX_TIM2_Init+0xa4>)
 8001b68:	f002 fe04 	bl	8004774 <HAL_TIM_Encoder_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b72:	f000 fa97 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <MX_TIM2_Init+0xa4>)
 8001b84:	f003 fb2c 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b8e:	f000 fa89 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	3730      	adds	r7, #48	; 0x30
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000114 	.word	0x20000114

08001ba0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <MX_TIM3_Init+0x90>)
 8001bbe:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <MX_TIM3_Init+0x94>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_TIM3_Init+0x90>)
 8001bc4:	2209      	movs	r2, #9
 8001bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <MX_TIM3_Init+0x90>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_TIM3_Init+0x90>)
 8001bd0:	2263      	movs	r2, #99	; 0x63
 8001bd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <MX_TIM3_Init+0x90>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_TIM3_Init+0x90>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001be0:	4813      	ldr	r0, [pc, #76]	; (8001c30 <MX_TIM3_Init+0x90>)
 8001be2:	f002 fcef 	bl	80045c4 <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001bec:	f000 fa5a 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <MX_TIM3_Init+0x90>)
 8001bfe:	f003 f8ca 	bl	8004d96 <HAL_TIM_ConfigClockSource>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001c08:	f000 fa4c 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c14:	463b      	mov	r3, r7
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_TIM3_Init+0x90>)
 8001c1a:	f003 fae1 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001c24:	f000 fa3e 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	2000015c 	.word	0x2000015c
 8001c34:	40000400 	.word	0x40000400

08001c38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_USART2_UART_Init+0x4c>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <MX_USART2_UART_Init+0x50>)
 8001c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <MX_USART2_UART_Init+0x4c>)
 8001c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_USART2_UART_Init+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_USART2_UART_Init+0x4c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <MX_USART2_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_USART2_UART_Init+0x4c>)
 8001c5e:	220c      	movs	r2, #12
 8001c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <MX_USART2_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_USART2_UART_Init+0x4c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_USART2_UART_Init+0x4c>)
 8001c70:	f003 fb38 	bl	80052e4 <HAL_UART_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c7a:	f000 fa13 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200001a4 	.word	0x200001a4
 8001c88:	40004400 	.word	0x40004400

08001c8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_DMA_Init+0x3c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <MX_DMA_Init+0x3c>)
 8001c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_DMA_Init+0x3c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2010      	movs	r0, #16
 8001cb4:	f000 fdff 	bl	80028b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cb8:	2010      	movs	r0, #16
 8001cba:	f000 fe18 	bl	80028ee <HAL_NVIC_EnableIRQ>

}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <MX_GPIO_Init+0x1b0>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a64      	ldr	r2, [pc, #400]	; (8001e7c <MX_GPIO_Init+0x1b0>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b62      	ldr	r3, [pc, #392]	; (8001e7c <MX_GPIO_Init+0x1b0>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b5e      	ldr	r3, [pc, #376]	; (8001e7c <MX_GPIO_Init+0x1b0>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a5d      	ldr	r2, [pc, #372]	; (8001e7c <MX_GPIO_Init+0x1b0>)
 8001d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b5b      	ldr	r3, [pc, #364]	; (8001e7c <MX_GPIO_Init+0x1b0>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b57      	ldr	r3, [pc, #348]	; (8001e7c <MX_GPIO_Init+0x1b0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a56      	ldr	r2, [pc, #344]	; (8001e7c <MX_GPIO_Init+0x1b0>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b54      	ldr	r3, [pc, #336]	; (8001e7c <MX_GPIO_Init+0x1b0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b50      	ldr	r3, [pc, #320]	; (8001e7c <MX_GPIO_Init+0x1b0>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <MX_GPIO_Init+0x1b0>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b4d      	ldr	r3, [pc, #308]	; (8001e7c <MX_GPIO_Init+0x1b0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d58:	4849      	ldr	r0, [pc, #292]	; (8001e80 <MX_GPIO_Init+0x1b4>)
 8001d5a:	f001 fb69 	bl	8003430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f649 7110 	movw	r1, #40720	; 0x9f10
 8001d64:	4847      	ldr	r0, [pc, #284]	; (8001e84 <MX_GPIO_Init+0x1b8>)
 8001d66:	f001 fb63 	bl	8003430 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f24f 0108 	movw	r1, #61448	; 0xf008
 8001d70:	4845      	ldr	r0, [pc, #276]	; (8001e88 <MX_GPIO_Init+0x1bc>)
 8001d72:	f001 fb5d 	bl	8003430 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	483c      	ldr	r0, [pc, #240]	; (8001e80 <MX_GPIO_Init+0x1b4>)
 8001d90:	f001 f9ca 	bl	8003128 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001d94:	2310      	movs	r3, #16
 8001d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4836      	ldr	r0, [pc, #216]	; (8001e84 <MX_GPIO_Init+0x1b8>)
 8001dac:	f001 f9bc 	bl	8003128 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_DOWN_Pin BT_AVANCA_Pin BT_SELECT_Pin BT_STOP_Pin
                           BT_INSERT_Pin */
  GPIO_InitStruct.Pin = BT_DOWN_Pin|BT_AVANCA_Pin|BT_SELECT_Pin|BT_STOP_Pin
 8001db0:	f240 13e1 	movw	r3, #481	; 0x1e1
 8001db4:	617b      	str	r3, [r7, #20]
                          |BT_INSERT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001db6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4830      	ldr	r0, [pc, #192]	; (8001e88 <MX_GPIO_Init+0x1bc>)
 8001dc8:	f001 f9ae 	bl	8003128 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_LEFT_Pin BT__RIGHT_Pin BT_MENU_Pin */
  GPIO_InitStruct.Pin = BT_LEFT_Pin|BT__RIGHT_Pin|BT_MENU_Pin;
 8001dcc:	2316      	movs	r3, #22
 8001dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	4829      	ldr	r0, [pc, #164]	; (8001e88 <MX_GPIO_Init+0x1bc>)
 8001de2:	f001 f9a1 	bl	8003128 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8001de6:	f24f 0308 	movw	r3, #61448	; 0xf008
 8001dea:	617b      	str	r3, [r7, #20]
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4822      	ldr	r0, [pc, #136]	; (8001e88 <MX_GPIO_Init+0x1bc>)
 8001e00:	f001 f992 	bl	8003128 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D3_Pin LCD_D2_Pin LCD_D1_Pin LCD_D0_Pin
                           LCD_EN_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin|LCD_D0_Pin
 8001e04:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8001e08:	617b      	str	r3, [r7, #20]
                          |LCD_EN_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4819      	ldr	r0, [pc, #100]	; (8001e84 <MX_GPIO_Init+0x1b8>)
 8001e1e:	f001 f983 	bl	8003128 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2006      	movs	r0, #6
 8001e28:	f000 fd45 	bl	80028b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e2c:	2006      	movs	r0, #6
 8001e2e:	f000 fd5e 	bl	80028ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2007      	movs	r0, #7
 8001e38:	f000 fd3d 	bl	80028b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e3c:	2007      	movs	r0, #7
 8001e3e:	f000 fd56 	bl	80028ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2008      	movs	r0, #8
 8001e48:	f000 fd35 	bl	80028b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e4c:	2008      	movs	r0, #8
 8001e4e:	f000 fd4e 	bl	80028ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	200a      	movs	r0, #10
 8001e58:	f000 fd2d 	bl	80028b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e5c:	200a      	movs	r0, #10
 8001e5e:	f000 fd46 	bl	80028ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	2017      	movs	r0, #23
 8001e68:	f000 fd25 	bl	80028b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e6c:	2017      	movs	r0, #23
 8001e6e:	f000 fd3e 	bl	80028ee <HAL_NVIC_EnableIRQ>

}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020800 	.word	0x40020800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40020400 	.word	0x40020400

08001e8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	if(htim == &htim3) //10us
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d109      	bne.n	8001eb0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		timer3Count=10;  //1ms
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e9e:	220a      	movs	r2, #10
 8001ea0:	601a      	str	r2, [r3, #0]
//		if(timer3Count == 10)
//		{
		timer3Data += timer3Count; //10ms
 8001ea2:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001eae:	6013      	str	r3, [r2, #0]
//			timer3Count = 0;
//			samples++;
	}

}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	2000015c 	.word	0x2000015c
 8001ec0:	20000258 	.word	0x20000258
 8001ec4:	20000254 	.word	0x20000254

08001ec8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]

	uartFlagRx = TRUE;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_UARTEx_RxEventCallback+0x78>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 8001eda:	2202      	movs	r2, #2
 8001edc:	4919      	ldr	r1, [pc, #100]	; (8001f44 <HAL_UARTEx_RxEventCallback+0x7c>)
 8001ede:	481a      	ldr	r0, [pc, #104]	; (8001f48 <HAL_UARTEx_RxEventCallback+0x80>)
 8001ee0:	f003 fa4d 	bl	800537e <HAL_UARTEx_ReceiveToIdle_DMA>
  for(unsigned char i=0;i<Size;i++)  rxMSG[i] = uartBuffer[i];
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	e009      	b.n	8001efe <HAL_UARTEx_RxEventCallback+0x36>
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	4915      	ldr	r1, [pc, #84]	; (8001f44 <HAL_UARTEx_RxEventCallback+0x7c>)
 8001ef0:	5c8a      	ldrb	r2, [r1, r2]
 8001ef2:	b2d1      	uxtb	r1, r2
 8001ef4:	4a15      	ldr	r2, [pc, #84]	; (8001f4c <HAL_UARTEx_RxEventCallback+0x84>)
 8001ef6:	54d1      	strb	r1, [r2, r3]
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	3301      	adds	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f0      	bhi.n	8001eea <HAL_UARTEx_RxEventCallback+0x22>
  for(unsigned char i=0;i<Size;i++)  uartBuffer[i] = '0';
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73bb      	strb	r3, [r7, #14]
 8001f0c:	e006      	b.n	8001f1c <HAL_UARTEx_RxEventCallback+0x54>
 8001f0e:	7bbb      	ldrb	r3, [r7, #14]
 8001f10:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <HAL_UARTEx_RxEventCallback+0x7c>)
 8001f12:	2130      	movs	r1, #48	; 0x30
 8001f14:	54d1      	strb	r1, [r2, r3]
 8001f16:	7bbb      	ldrb	r3, [r7, #14]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	73bb      	strb	r3, [r7, #14]
 8001f1c:	7bbb      	ldrb	r3, [r7, #14]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	887a      	ldrh	r2, [r7, #2]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d8f3      	bhi.n	8001f0e <HAL_UARTEx_RxEventCallback+0x46>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_UARTEx_RxEventCallback+0x88>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_UARTEx_RxEventCallback+0x88>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0208 	bic.w	r2, r2, #8
 8001f34:	601a      	str	r2, [r3, #0]

}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000252 	.word	0x20000252
 8001f44:	2000024c 	.word	0x2000024c
 8001f48:	200001a4 	.word	0x200001a4
 8001f4c:	20000250 	.word	0x20000250
 8001f50:	200001e8 	.word	0x200001e8

08001f54 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d10e      	bne.n	8001f82 <HAL_TIM_IC_CaptureCallback+0x2e>
	{
		if(htim->Channel == 2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7f1b      	ldrb	r3, [r3, #28]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d103      	bne.n	8001f74 <HAL_TIM_IC_CaptureCallback+0x20>
		{
			sensorFlag = 1;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
		else if(htim->Channel == 1)
		{
			sensorFlag = 0;
		}
	}
}
 8001f72:	e006      	b.n	8001f82 <HAL_TIM_IC_CaptureCallback+0x2e>
		else if(htim->Channel == 1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7f1b      	ldrb	r3, [r3, #28]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d102      	bne.n	8001f82 <HAL_TIM_IC_CaptureCallback+0x2e>
			sensorFlag = 0;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000114 	.word	0x20000114
 8001f94:	2000000d 	.word	0x2000000d

08001f98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa8:	d063      	beq.n	8002072 <HAL_GPIO_EXTI_Callback+0xda>
 8001faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fae:	dc70      	bgt.n	8002092 <HAL_GPIO_EXTI_Callback+0xfa>
 8001fb0:	2b80      	cmp	r3, #128	; 0x80
 8001fb2:	d06a      	beq.n	800208a <HAL_GPIO_EXTI_Callback+0xf2>
 8001fb4:	2b80      	cmp	r3, #128	; 0x80
 8001fb6:	dc6c      	bgt.n	8002092 <HAL_GPIO_EXTI_Callback+0xfa>
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	dc47      	bgt.n	800204c <HAL_GPIO_EXTI_Callback+0xb4>
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	dd68      	ble.n	8002092 <HAL_GPIO_EXTI_Callback+0xfa>
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	2b1f      	cmp	r3, #31
 8001fc4:	d865      	bhi.n	8002092 <HAL_GPIO_EXTI_Callback+0xfa>
 8001fc6:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <HAL_GPIO_EXTI_Callback+0x34>)
 8001fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fcc:	0800205b 	.word	0x0800205b
 8001fd0:	08002063 	.word	0x08002063
 8001fd4:	08002093 	.word	0x08002093
 8001fd8:	0800206b 	.word	0x0800206b
 8001fdc:	08002093 	.word	0x08002093
 8001fe0:	08002093 	.word	0x08002093
 8001fe4:	08002093 	.word	0x08002093
 8001fe8:	08002093 	.word	0x08002093
 8001fec:	08002093 	.word	0x08002093
 8001ff0:	08002093 	.word	0x08002093
 8001ff4:	08002093 	.word	0x08002093
 8001ff8:	08002093 	.word	0x08002093
 8001ffc:	08002093 	.word	0x08002093
 8002000:	08002093 	.word	0x08002093
 8002004:	08002093 	.word	0x08002093
 8002008:	0800207b 	.word	0x0800207b
 800200c:	08002093 	.word	0x08002093
 8002010:	08002093 	.word	0x08002093
 8002014:	08002093 	.word	0x08002093
 8002018:	08002093 	.word	0x08002093
 800201c:	08002093 	.word	0x08002093
 8002020:	08002093 	.word	0x08002093
 8002024:	08002093 	.word	0x08002093
 8002028:	08002093 	.word	0x08002093
 800202c:	08002093 	.word	0x08002093
 8002030:	08002093 	.word	0x08002093
 8002034:	08002093 	.word	0x08002093
 8002038:	08002093 	.word	0x08002093
 800203c:	08002093 	.word	0x08002093
 8002040:	08002093 	.word	0x08002093
 8002044:	08002093 	.word	0x08002093
 8002048:	08002053 	.word	0x08002053
 800204c:	2b40      	cmp	r3, #64	; 0x40
 800204e:	d018      	beq.n	8002082 <HAL_GPIO_EXTI_Callback+0xea>
		case BT_STOP_Pin:
			key = PARAR;
		break;
	}

}
 8002050:	e01f      	b.n	8002092 <HAL_GPIO_EXTI_Callback+0xfa>
			key = AVANCAR;
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x108>)
 8002054:	2241      	movs	r2, #65	; 0x41
 8002056:	701a      	strb	r2, [r3, #0]
		break;
 8002058:	e01b      	b.n	8002092 <HAL_GPIO_EXTI_Callback+0xfa>
		key = DOWN;
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x108>)
 800205c:	2242      	movs	r2, #66	; 0x42
 800205e:	701a      	strb	r2, [r3, #0]
		break;
 8002060:	e017      	b.n	8002092 <HAL_GPIO_EXTI_Callback+0xfa>
		key = LEFT;
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x108>)
 8002064:	2244      	movs	r2, #68	; 0x44
 8002066:	701a      	strb	r2, [r3, #0]
		break;
 8002068:	e013      	b.n	8002092 <HAL_GPIO_EXTI_Callback+0xfa>
		key = RIGHT;
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x108>)
 800206c:	2245      	movs	r2, #69	; 0x45
 800206e:	701a      	strb	r2, [r3, #0]
		break;
 8002070:	e00f      	b.n	8002092 <HAL_GPIO_EXTI_Callback+0xfa>
			key = INSERIR;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x108>)
 8002074:	2249      	movs	r2, #73	; 0x49
 8002076:	701a      	strb	r2, [r3, #0]
		break;
 8002078:	e00b      	b.n	8002092 <HAL_GPIO_EXTI_Callback+0xfa>
			key = MENU;
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x108>)
 800207c:	224d      	movs	r2, #77	; 0x4d
 800207e:	701a      	strb	r2, [r3, #0]
		break;
 8002080:	e007      	b.n	8002092 <HAL_GPIO_EXTI_Callback+0xfa>
			key = CONFIRMAR;
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x108>)
 8002084:	2243      	movs	r2, #67	; 0x43
 8002086:	701a      	strb	r2, [r3, #0]
		break;
 8002088:	e003      	b.n	8002092 <HAL_GPIO_EXTI_Callback+0xfa>
			key = PARAR;
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x108>)
 800208c:	2250      	movs	r2, #80	; 0x50
 800208e:	701a      	strb	r2, [r3, #0]
		break;
 8002090:	bf00      	nop
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000248 	.word	0x20000248

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ac:	e7fe      	b.n	80020ac <Error_Handler+0x8>
	...

080020b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_MspInit+0x4c>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <HAL_MspInit+0x4c>)
 80020c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_MspInit+0x4c>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a08      	ldr	r2, [pc, #32]	; (80020fc <HAL_MspInit+0x4c>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800

08002100 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_SPI_MspInit+0x84>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12b      	bne.n	800217a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_SPI_MspInit+0x88>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_SPI_MspInit+0x88>)
 800212c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_SPI_MspInit+0x88>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_SPI_MspInit+0x88>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a10      	ldr	r2, [pc, #64]	; (8002188 <HAL_SPI_MspInit+0x88>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_SPI_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800215a:	23e0      	movs	r3, #224	; 0xe0
 800215c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002162:	2301      	movs	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002166:	2303      	movs	r3, #3
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800216a:	2305      	movs	r3, #5
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <HAL_SPI_MspInit+0x8c>)
 8002176:	f000 ffd7 	bl	8003128 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	; 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40013000 	.word	0x40013000
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000

08002190 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d133      	bne.n	800221a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_TIM_Encoder_MspInit+0x94>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <HAL_TIM_Encoder_MspInit+0x94>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_TIM_Encoder_MspInit+0x94>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_TIM_Encoder_MspInit+0x94>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <HAL_TIM_Encoder_MspInit+0x94>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_TIM_Encoder_MspInit+0x94>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ea:	2303      	movs	r3, #3
 80021ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021fa:	2301      	movs	r3, #1
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	4808      	ldr	r0, [pc, #32]	; (8002228 <HAL_TIM_Encoder_MspInit+0x98>)
 8002206:	f000 ff8f 	bl	8003128 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	201c      	movs	r0, #28
 8002210:	f000 fb51 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002214:	201c      	movs	r0, #28
 8002216:	f000 fb6a 	bl	80028ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	; 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000

0800222c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_TIM_Base_MspInit+0x48>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d115      	bne.n	800226a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_TIM_Base_MspInit+0x4c>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a0c      	ldr	r2, [pc, #48]	; (8002278 <HAL_TIM_Base_MspInit+0x4c>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_TIM_Base_MspInit+0x4c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	201d      	movs	r0, #29
 8002260:	f000 fb29 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002264:	201d      	movs	r0, #29
 8002266:	f000 fb42 	bl	80028ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40000400 	.word	0x40000400
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a34      	ldr	r2, [pc, #208]	; (800236c <HAL_UART_MspInit+0xf0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d161      	bne.n	8002362 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b33      	ldr	r3, [pc, #204]	; (8002370 <HAL_UART_MspInit+0xf4>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a32      	ldr	r2, [pc, #200]	; (8002370 <HAL_UART_MspInit+0xf4>)
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b30      	ldr	r3, [pc, #192]	; (8002370 <HAL_UART_MspInit+0xf4>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <HAL_UART_MspInit+0xf4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a2b      	ldr	r2, [pc, #172]	; (8002370 <HAL_UART_MspInit+0xf4>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_UART_MspInit+0xf4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022d6:	230c      	movs	r3, #12
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e6:	2307      	movs	r3, #7
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	4820      	ldr	r0, [pc, #128]	; (8002374 <HAL_UART_MspInit+0xf8>)
 80022f2:	f000 ff19 	bl	8003128 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_UART_MspInit+0xfc>)
 80022f8:	4a20      	ldr	r2, [pc, #128]	; (800237c <HAL_UART_MspInit+0x100>)
 80022fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <HAL_UART_MspInit+0xfc>)
 80022fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002302:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002304:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <HAL_UART_MspInit+0xfc>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800230a:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_UART_MspInit+0xfc>)
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_UART_MspInit+0xfc>)
 8002312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002316:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_UART_MspInit+0xfc>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_UART_MspInit+0xfc>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_UART_MspInit+0xfc>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_UART_MspInit+0xfc>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_UART_MspInit+0xfc>)
 8002332:	2200      	movs	r2, #0
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002336:	4810      	ldr	r0, [pc, #64]	; (8002378 <HAL_UART_MspInit+0xfc>)
 8002338:	f000 faf4 	bl	8002924 <HAL_DMA_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002342:	f7ff feaf 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <HAL_UART_MspInit+0xfc>)
 800234a:	639a      	str	r2, [r3, #56]	; 0x38
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_UART_MspInit+0xfc>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2026      	movs	r0, #38	; 0x26
 8002358:	f000 faad 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800235c:	2026      	movs	r0, #38	; 0x26
 800235e:	f000 fac6 	bl	80028ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40004400 	.word	0x40004400
 8002370:	40023800 	.word	0x40023800
 8002374:	40020000 	.word	0x40020000
 8002378:	200001e8 	.word	0x200001e8
 800237c:	40026088 	.word	0x40026088

08002380 <SDTimerHandler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1,Timer2;

void SDTimerHandler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
	if(Timer1>0)
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <SDTimerHandler+0x40>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <SDTimerHandler+0x1c>
		Timer1--;
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <SDTimerHandler+0x40>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <SDTimerHandler+0x40>)
 800239a:	701a      	strb	r2, [r3, #0]

	if(Timer2>0)
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <SDTimerHandler+0x44>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <SDTimerHandler+0x34>
		Timer2--;
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <SDTimerHandler+0x44>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <SDTimerHandler+0x44>)
 80023b2:	701a      	strb	r2, [r3, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	2000025d 	.word	0x2000025d
 80023c4:	2000025e 	.word	0x2000025e

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <NMI_Handler+0x4>

080023ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <HardFault_Handler+0x4>

080023d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <MemManage_Handler+0x4>

080023da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023de:	e7fe      	b.n	80023de <BusFault_Handler+0x4>

080023e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <UsageFault_Handler+0x4>

080023e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <SysTick_Handler+0x30>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	3301      	adds	r3, #1
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <SysTick_Handler+0x30>)
 8002420:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <SysTick_Handler+0x30>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b09      	cmp	r3, #9
 800242a:	d904      	bls.n	8002436 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <SysTick_Handler+0x30>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
		SDTimerHandler();
 8002432:	f7ff ffa5 	bl	8002380 <SDTimerHandler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002436:	f000 f91f 	bl	8002678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000025c 	.word	0x2000025c

08002444 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_DOWN_Pin);
 8002448:	2001      	movs	r0, #1
 800244a:	f001 f80b 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}

08002452 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_LEFT_Pin);
 8002456:	2002      	movs	r0, #2
 8002458:	f001 f804 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT__RIGHT_Pin);
 8002464:	2004      	movs	r0, #4
 8002466:	f000 fffd 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}

0800246e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_MENU_Pin);
 8002472:	2010      	movs	r0, #16
 8002474:	f000 fff6 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Stream5_IRQHandler+0x10>)
 8002482:	f000 fbe7 	bl	8002c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200001e8 	.word	0x200001e8

08002490 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_AVANCA_Pin);
 8002494:	2020      	movs	r0, #32
 8002496:	f000 ffe5 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_SELECT_Pin);
 800249a:	2040      	movs	r0, #64	; 0x40
 800249c:	f000 ffe2 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_STOP_Pin);
 80024a0:	2080      	movs	r0, #128	; 0x80
 80024a2:	f000 ffdf 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_INSERT_Pin);
 80024a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024aa:	f000 ffdb 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <TIM2_IRQHandler+0x10>)
 80024ba:	f002 fb64 	bl	8004b86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000114 	.word	0x20000114

080024c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <TIM3_IRQHandler+0x10>)
 80024ce:	f002 fb5a 	bl	8004b86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000015c 	.word	0x2000015c

080024dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <USART2_IRQHandler+0x10>)
 80024e2:	f002 ffb1 	bl	8005448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200001a4 	.word	0x200001a4

080024f0 <_sbrk>:
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <_sbrk+0x5c>)
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <_sbrk+0x60>)
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	4b13      	ldr	r3, [pc, #76]	; (8002554 <_sbrk+0x64>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <_sbrk+0x22>
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <_sbrk+0x64>)
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <_sbrk+0x68>)
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <_sbrk+0x64>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	429a      	cmp	r2, r3
 800251e:	d207      	bcs.n	8002530 <_sbrk+0x40>
 8002520:	f004 f8d8 	bl	80066d4 <__errno>
 8002524:	4603      	mov	r3, r0
 8002526:	220c      	movs	r2, #12
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
 800252e:	e009      	b.n	8002544 <_sbrk+0x54>
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b07      	ldr	r3, [pc, #28]	; (8002554 <_sbrk+0x64>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	4a05      	ldr	r2, [pc, #20]	; (8002554 <_sbrk+0x64>)
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20020000 	.word	0x20020000
 8002550:	00000400 	.word	0x00000400
 8002554:	20000260 	.word	0x20000260
 8002558:	20000290 	.word	0x20000290

0800255c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <SystemInit+0x20>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <SystemInit+0x20>)
 8002568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800256c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <Reset_Handler>:
 8002580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b8 <LoopFillZerobss+0x12>
 8002584:	480d      	ldr	r0, [pc, #52]	; (80025bc <LoopFillZerobss+0x16>)
 8002586:	490e      	ldr	r1, [pc, #56]	; (80025c0 <LoopFillZerobss+0x1a>)
 8002588:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <LoopFillZerobss+0x1e>)
 800258a:	2300      	movs	r3, #0
 800258c:	e002      	b.n	8002594 <LoopCopyDataInit>

0800258e <CopyDataInit>:
 800258e:	58d4      	ldr	r4, [r2, r3]
 8002590:	50c4      	str	r4, [r0, r3]
 8002592:	3304      	adds	r3, #4

08002594 <LoopCopyDataInit>:
 8002594:	18c4      	adds	r4, r0, r3
 8002596:	428c      	cmp	r4, r1
 8002598:	d3f9      	bcc.n	800258e <CopyDataInit>
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <LoopFillZerobss+0x22>)
 800259c:	4c0b      	ldr	r4, [pc, #44]	; (80025cc <LoopFillZerobss+0x26>)
 800259e:	2300      	movs	r3, #0
 80025a0:	e001      	b.n	80025a6 <LoopFillZerobss>

080025a2 <FillZerobss>:
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	3204      	adds	r2, #4

080025a6 <LoopFillZerobss>:
 80025a6:	42a2      	cmp	r2, r4
 80025a8:	d3fb      	bcc.n	80025a2 <FillZerobss>
 80025aa:	f7ff ffd7 	bl	800255c <SystemInit>
 80025ae:	f004 f897 	bl	80066e0 <__libc_init_array>
 80025b2:	f7ff f9af 	bl	8001914 <main>
 80025b6:	4770      	bx	lr
 80025b8:	20020000 	.word	0x20020000
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000094 	.word	0x20000094
 80025c4:	08007404 	.word	0x08007404
 80025c8:	20000094 	.word	0x20000094
 80025cc:	2000028c 	.word	0x2000028c

080025d0 <ADC_IRQHandler>:
 80025d0:	e7fe      	b.n	80025d0 <ADC_IRQHandler>
	...

080025d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_Init+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <HAL_Init+0x40>)
 80025de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_Init+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <HAL_Init+0x40>)
 80025ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HAL_Init+0x40>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a07      	ldr	r2, [pc, #28]	; (8002614 <HAL_Init+0x40>)
 80025f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fc:	2003      	movs	r0, #3
 80025fe:	f000 f94f 	bl	80028a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002602:	200f      	movs	r0, #15
 8002604:	f000 f808 	bl	8002618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002608:	f7ff fd52 	bl	80020b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40023c00 	.word	0x40023c00

08002618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_InitTick+0x54>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_InitTick+0x58>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f967 	bl	800290a <HAL_SYSTICK_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e00e      	b.n	8002664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b0f      	cmp	r3, #15
 800264a:	d80a      	bhi.n	8002662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800264c:	2200      	movs	r2, #0
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f000 f92f 	bl	80028b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002658:	4a06      	ldr	r2, [pc, #24]	; (8002674 <HAL_InitTick+0x5c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	e000      	b.n	8002664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000010 	.word	0x20000010
 8002670:	20000018 	.word	0x20000018
 8002674:	20000014 	.word	0x20000014

08002678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_IncTick+0x20>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_IncTick+0x24>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4413      	add	r3, r2
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_IncTick+0x24>)
 800268a:	6013      	str	r3, [r2, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000018 	.word	0x20000018
 800269c:	20000264 	.word	0x20000264

080026a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return uwTick;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <HAL_GetTick+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000264 	.word	0x20000264

080026b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c0:	f7ff ffee 	bl	80026a0 <HAL_GetTick>
 80026c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d005      	beq.n	80026de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_Delay+0x44>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026de:	bf00      	nop
 80026e0:	f7ff ffde 	bl	80026a0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d8f7      	bhi.n	80026e0 <HAL_Delay+0x28>
  {
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000018 	.word	0x20000018

08002700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800271c:	4013      	ands	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800272c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	60d3      	str	r3, [r2, #12]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <__NVIC_GetPriorityGrouping+0x18>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 0307 	and.w	r3, r3, #7
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	2b00      	cmp	r3, #0
 8002774:	db0b      	blt.n	800278e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	4907      	ldr	r1, [pc, #28]	; (800279c <__NVIC_EnableIRQ+0x38>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2001      	movs	r0, #1
 8002786:	fa00 f202 	lsl.w	r2, r0, r2
 800278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000e100 	.word	0xe000e100

080027a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	db0a      	blt.n	80027ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	490c      	ldr	r1, [pc, #48]	; (80027ec <__NVIC_SetPriority+0x4c>)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	440b      	add	r3, r1
 80027c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c8:	e00a      	b.n	80027e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4908      	ldr	r1, [pc, #32]	; (80027f0 <__NVIC_SetPriority+0x50>)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	3b04      	subs	r3, #4
 80027d8:	0112      	lsls	r2, r2, #4
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	440b      	add	r3, r1
 80027de:	761a      	strb	r2, [r3, #24]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000e100 	.word	0xe000e100
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f1c3 0307 	rsb	r3, r3, #7
 800280e:	2b04      	cmp	r3, #4
 8002810:	bf28      	it	cs
 8002812:	2304      	movcs	r3, #4
 8002814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3304      	adds	r3, #4
 800281a:	2b06      	cmp	r3, #6
 800281c:	d902      	bls.n	8002824 <NVIC_EncodePriority+0x30>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3b03      	subs	r3, #3
 8002822:	e000      	b.n	8002826 <NVIC_EncodePriority+0x32>
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	f04f 32ff 	mov.w	r2, #4294967295
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	401a      	ands	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800283c:	f04f 31ff 	mov.w	r1, #4294967295
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	43d9      	mvns	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	4313      	orrs	r3, r2
         );
}
 800284e:	4618      	mov	r0, r3
 8002850:	3724      	adds	r7, #36	; 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800286c:	d301      	bcc.n	8002872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286e:	2301      	movs	r3, #1
 8002870:	e00f      	b.n	8002892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002872:	4a0a      	ldr	r2, [pc, #40]	; (800289c <SysTick_Config+0x40>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287a:	210f      	movs	r1, #15
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	f7ff ff8e 	bl	80027a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <SysTick_Config+0x40>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <SysTick_Config+0x40>)
 800288c:	2207      	movs	r2, #7
 800288e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	e000e010 	.word	0xe000e010

080028a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff ff29 	bl	8002700 <__NVIC_SetPriorityGrouping>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c8:	f7ff ff3e 	bl	8002748 <__NVIC_GetPriorityGrouping>
 80028cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f7ff ff8e 	bl	80027f4 <NVIC_EncodePriority>
 80028d8:	4602      	mov	r2, r0
 80028da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff5d 	bl	80027a0 <__NVIC_SetPriority>
}
 80028e6:	bf00      	nop
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff31 	bl	8002764 <__NVIC_EnableIRQ>
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ffa2 	bl	800285c <SysTick_Config>
 8002918:	4603      	mov	r3, r0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002930:	f7ff feb6 	bl	80026a0 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e099      	b.n	8002a74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002960:	e00f      	b.n	8002982 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002962:	f7ff fe9d 	bl	80026a0 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b05      	cmp	r3, #5
 800296e:	d908      	bls.n	8002982 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2203      	movs	r2, #3
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e078      	b.n	8002a74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1e8      	bne.n	8002962 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_DMA_Init+0x158>)
 800299c:	4013      	ands	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d107      	bne.n	80029ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4313      	orrs	r3, r2
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0307 	bic.w	r3, r3, #7
 8002a02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d117      	bne.n	8002a46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00e      	beq.n	8002a46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fb01 	bl	8003030 <DMA_CheckFifoParam>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2240      	movs	r2, #64	; 0x40
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a42:	2301      	movs	r3, #1
 8002a44:	e016      	b.n	8002a74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fab8 	bl	8002fc4 <DMA_CalcBaseAndBitshift>
 8002a54:	4603      	mov	r3, r0
 8002a56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	223f      	movs	r2, #63	; 0x3f
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	f010803f 	.word	0xf010803f

08002a80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_DMA_Start_IT+0x26>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e040      	b.n	8002b28 <HAL_DMA_Start_IT+0xa8>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d12f      	bne.n	8002b1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2202      	movs	r2, #2
 8002abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fa4a 	bl	8002f68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	223f      	movs	r2, #63	; 0x3f
 8002ada:	409a      	lsls	r2, r3
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0216 	orr.w	r2, r2, #22
 8002aee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0208 	orr.w	r2, r2, #8
 8002b06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	e005      	b.n	8002b26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b22:	2302      	movs	r3, #2
 8002b24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b3e:	f7ff fdaf 	bl	80026a0 <HAL_GetTick>
 8002b42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d008      	beq.n	8002b62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2280      	movs	r2, #128	; 0x80
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e052      	b.n	8002c08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0216 	bic.w	r2, r2, #22
 8002b70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d103      	bne.n	8002b92 <HAL_DMA_Abort+0x62>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0208 	bic.w	r2, r2, #8
 8002ba0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb2:	e013      	b.n	8002bdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bb4:	f7ff fd74 	bl	80026a0 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b05      	cmp	r3, #5
 8002bc0:	d90c      	bls.n	8002bdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e015      	b.n	8002c08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e4      	bne.n	8002bb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bee:	223f      	movs	r2, #63	; 0x3f
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d004      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e00c      	b.n	8002c48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2205      	movs	r2, #5
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c60:	4b8e      	ldr	r3, [pc, #568]	; (8002e9c <HAL_DMA_IRQHandler+0x248>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a8e      	ldr	r2, [pc, #568]	; (8002ea0 <HAL_DMA_IRQHandler+0x24c>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0a9b      	lsrs	r3, r3, #10
 8002c6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	2208      	movs	r2, #8
 8002c80:	409a      	lsls	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01a      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0204 	bic.w	r2, r2, #4
 8002ca6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	2208      	movs	r2, #8
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d012      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f043 0202 	orr.w	r2, r3, #2
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d012      	beq.n	8002d2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	2204      	movs	r2, #4
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d24:	f043 0204 	orr.w	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	2210      	movs	r2, #16
 8002d32:	409a      	lsls	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d043      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d03c      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	2210      	movs	r2, #16
 8002d50:	409a      	lsls	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d018      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d108      	bne.n	8002d84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d024      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
 8002d82:	e01f      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01b      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
 8002d94:	e016      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d107      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0208 	bic.w	r2, r2, #8
 8002db2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	2220      	movs	r2, #32
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 808f 	beq.w	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8087 	beq.w	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	2220      	movs	r2, #32
 8002dec:	409a      	lsls	r2, r3
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d136      	bne.n	8002e6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0216 	bic.w	r2, r2, #22
 8002e0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <HAL_DMA_IRQHandler+0x1da>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0208 	bic.w	r2, r2, #8
 8002e3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	223f      	movs	r2, #63	; 0x3f
 8002e44:	409a      	lsls	r2, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d07e      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
        }
        return;
 8002e6a:	e079      	b.n	8002f60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01d      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10d      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d031      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
 8002e98:	e02c      	b.n	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
 8002e9a:	bf00      	nop
 8002e9c:	20000010 	.word	0x20000010
 8002ea0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d023      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
 8002eb4:	e01e      	b.n	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10f      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0210 	bic.w	r2, r2, #16
 8002ed2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d032      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d022      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	3301      	adds	r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d307      	bcc.n	8002f3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f2      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x2cc>
 8002f3a:	e000      	b.n	8002f3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
 8002f5e:	e000      	b.n	8002f62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f60:	bf00      	nop
    }
  }
}
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b40      	cmp	r3, #64	; 0x40
 8002f94:	d108      	bne.n	8002fa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fa6:	e007      	b.n	8002fb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	60da      	str	r2, [r3, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3b10      	subs	r3, #16
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <DMA_CalcBaseAndBitshift+0x64>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fde:	4a13      	ldr	r2, [pc, #76]	; (800302c <DMA_CalcBaseAndBitshift+0x68>)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d909      	bls.n	8003006 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	1d1a      	adds	r2, r3, #4
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	659a      	str	r2, [r3, #88]	; 0x58
 8003004:	e007      	b.n	8003016 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	aaaaaaab 	.word	0xaaaaaaab
 800302c:	08007358 	.word	0x08007358

08003030 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11f      	bne.n	800308a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d856      	bhi.n	80030fe <DMA_CheckFifoParam+0xce>
 8003050:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <DMA_CheckFifoParam+0x28>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	08003069 	.word	0x08003069
 800305c:	0800307b 	.word	0x0800307b
 8003060:	08003069 	.word	0x08003069
 8003064:	080030ff 	.word	0x080030ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d046      	beq.n	8003102 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003078:	e043      	b.n	8003102 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003082:	d140      	bne.n	8003106 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003088:	e03d      	b.n	8003106 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003092:	d121      	bne.n	80030d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b03      	cmp	r3, #3
 8003098:	d837      	bhi.n	800310a <DMA_CheckFifoParam+0xda>
 800309a:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <DMA_CheckFifoParam+0x70>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030b7 	.word	0x080030b7
 80030a8:	080030b1 	.word	0x080030b1
 80030ac:	080030c9 	.word	0x080030c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
      break;
 80030b4:	e030      	b.n	8003118 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d025      	beq.n	800310e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c6:	e022      	b.n	800310e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030d0:	d11f      	bne.n	8003112 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030d6:	e01c      	b.n	8003112 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d903      	bls.n	80030e6 <DMA_CheckFifoParam+0xb6>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d003      	beq.n	80030ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030e4:	e018      	b.n	8003118 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
      break;
 80030ea:	e015      	b.n	8003118 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00e      	beq.n	8003116 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      break;
 80030fc:	e00b      	b.n	8003116 <DMA_CheckFifoParam+0xe6>
      break;
 80030fe:	bf00      	nop
 8003100:	e00a      	b.n	8003118 <DMA_CheckFifoParam+0xe8>
      break;
 8003102:	bf00      	nop
 8003104:	e008      	b.n	8003118 <DMA_CheckFifoParam+0xe8>
      break;
 8003106:	bf00      	nop
 8003108:	e006      	b.n	8003118 <DMA_CheckFifoParam+0xe8>
      break;
 800310a:	bf00      	nop
 800310c:	e004      	b.n	8003118 <DMA_CheckFifoParam+0xe8>
      break;
 800310e:	bf00      	nop
 8003110:	e002      	b.n	8003118 <DMA_CheckFifoParam+0xe8>
      break;   
 8003112:	bf00      	nop
 8003114:	e000      	b.n	8003118 <DMA_CheckFifoParam+0xe8>
      break;
 8003116:	bf00      	nop
    }
  } 
  
  return status; 
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop

08003128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	e159      	b.n	80033f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003144:	2201      	movs	r2, #1
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	429a      	cmp	r2, r3
 800315e:	f040 8148 	bne.w	80033f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d005      	beq.n	800317a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003176:	2b02      	cmp	r3, #2
 8003178:	d130      	bne.n	80031dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	2203      	movs	r2, #3
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031b0:	2201      	movs	r2, #1
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f003 0201 	and.w	r2, r3, #1
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d017      	beq.n	8003218 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	2203      	movs	r2, #3
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d123      	bne.n	800326c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	08da      	lsrs	r2, r3, #3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3208      	adds	r2, #8
 800322c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	220f      	movs	r2, #15
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	08da      	lsrs	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3208      	adds	r2, #8
 8003266:	69b9      	ldr	r1, [r7, #24]
 8003268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	2203      	movs	r2, #3
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 0203 	and.w	r2, r3, #3
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80a2 	beq.w	80033f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	4b57      	ldr	r3, [pc, #348]	; (8003410 <HAL_GPIO_Init+0x2e8>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4a56      	ldr	r2, [pc, #344]	; (8003410 <HAL_GPIO_Init+0x2e8>)
 80032b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032bc:	6453      	str	r3, [r2, #68]	; 0x44
 80032be:	4b54      	ldr	r3, [pc, #336]	; (8003410 <HAL_GPIO_Init+0x2e8>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ca:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_GPIO_Init+0x2ec>)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	3302      	adds	r3, #2
 80032d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	220f      	movs	r2, #15
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a49      	ldr	r2, [pc, #292]	; (8003418 <HAL_GPIO_Init+0x2f0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d019      	beq.n	800332a <HAL_GPIO_Init+0x202>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a48      	ldr	r2, [pc, #288]	; (800341c <HAL_GPIO_Init+0x2f4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <HAL_GPIO_Init+0x1fe>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a47      	ldr	r2, [pc, #284]	; (8003420 <HAL_GPIO_Init+0x2f8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00d      	beq.n	8003322 <HAL_GPIO_Init+0x1fa>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a46      	ldr	r2, [pc, #280]	; (8003424 <HAL_GPIO_Init+0x2fc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <HAL_GPIO_Init+0x1f6>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a45      	ldr	r2, [pc, #276]	; (8003428 <HAL_GPIO_Init+0x300>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d101      	bne.n	800331a <HAL_GPIO_Init+0x1f2>
 8003316:	2304      	movs	r3, #4
 8003318:	e008      	b.n	800332c <HAL_GPIO_Init+0x204>
 800331a:	2307      	movs	r3, #7
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x204>
 800331e:	2303      	movs	r3, #3
 8003320:	e004      	b.n	800332c <HAL_GPIO_Init+0x204>
 8003322:	2302      	movs	r3, #2
 8003324:	e002      	b.n	800332c <HAL_GPIO_Init+0x204>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_GPIO_Init+0x204>
 800332a:	2300      	movs	r3, #0
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	f002 0203 	and.w	r2, r2, #3
 8003332:	0092      	lsls	r2, r2, #2
 8003334:	4093      	lsls	r3, r2
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800333c:	4935      	ldr	r1, [pc, #212]	; (8003414 <HAL_GPIO_Init+0x2ec>)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800334a:	4b38      	ldr	r3, [pc, #224]	; (800342c <HAL_GPIO_Init+0x304>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800336e:	4a2f      	ldr	r2, [pc, #188]	; (800342c <HAL_GPIO_Init+0x304>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003374:	4b2d      	ldr	r3, [pc, #180]	; (800342c <HAL_GPIO_Init+0x304>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003398:	4a24      	ldr	r2, [pc, #144]	; (800342c <HAL_GPIO_Init+0x304>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800339e:	4b23      	ldr	r3, [pc, #140]	; (800342c <HAL_GPIO_Init+0x304>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033c2:	4a1a      	ldr	r2, [pc, #104]	; (800342c <HAL_GPIO_Init+0x304>)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c8:	4b18      	ldr	r3, [pc, #96]	; (800342c <HAL_GPIO_Init+0x304>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ec:	4a0f      	ldr	r2, [pc, #60]	; (800342c <HAL_GPIO_Init+0x304>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3301      	adds	r3, #1
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	f67f aea2 	bls.w	8003144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3724      	adds	r7, #36	; 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	40013800 	.word	0x40013800
 8003418:	40020000 	.word	0x40020000
 800341c:	40020400 	.word	0x40020400
 8003420:	40020800 	.word	0x40020800
 8003424:	40020c00 	.word	0x40020c00
 8003428:	40021000 	.word	0x40021000
 800342c:	40013c00 	.word	0x40013c00

08003430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]
 800343c:	4613      	mov	r3, r2
 800343e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003440:	787b      	ldrb	r3, [r7, #1]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800344c:	e003      	b.n	8003456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	041a      	lsls	r2, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	619a      	str	r2, [r3, #24]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800347a:	4a05      	ldr	r2, [pc, #20]	; (8003490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fd88 	bl	8001f98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40013c00 	.word	0x40013c00

08003494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e267      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d075      	beq.n	800359e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034b2:	4b88      	ldr	r3, [pc, #544]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d00c      	beq.n	80034d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034be:	4b85      	ldr	r3, [pc, #532]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d112      	bne.n	80034f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ca:	4b82      	ldr	r3, [pc, #520]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d6:	d10b      	bne.n	80034f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	4b7e      	ldr	r3, [pc, #504]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d05b      	beq.n	800359c <HAL_RCC_OscConfig+0x108>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d157      	bne.n	800359c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e242      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f8:	d106      	bne.n	8003508 <HAL_RCC_OscConfig+0x74>
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a75      	ldr	r2, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e01d      	b.n	8003544 <HAL_RCC_OscConfig+0xb0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x98>
 8003512:	4b70      	ldr	r3, [pc, #448]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a6f      	ldr	r2, [pc, #444]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4b6d      	ldr	r3, [pc, #436]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a6c      	ldr	r2, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e00b      	b.n	8003544 <HAL_RCC_OscConfig+0xb0>
 800352c:	4b69      	ldr	r3, [pc, #420]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a68      	ldr	r2, [pc, #416]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a65      	ldr	r2, [pc, #404]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 800353e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d013      	beq.n	8003574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7ff f8a8 	bl	80026a0 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003554:	f7ff f8a4 	bl	80026a0 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e207      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	4b5b      	ldr	r3, [pc, #364]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0xc0>
 8003572:	e014      	b.n	800359e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7ff f894 	bl	80026a0 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357c:	f7ff f890 	bl	80026a0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e1f3      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358e:	4b51      	ldr	r3, [pc, #324]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0xe8>
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d063      	beq.n	8003672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035aa:	4b4a      	ldr	r3, [pc, #296]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d11c      	bne.n	80035fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c2:	4b44      	ldr	r3, [pc, #272]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d116      	bne.n	80035fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_RCC_OscConfig+0x152>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d001      	beq.n	80035e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e1c7      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4937      	ldr	r1, [pc, #220]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	e03a      	b.n	8003672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d020      	beq.n	8003646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003604:	4b34      	ldr	r3, [pc, #208]	; (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003606:	2201      	movs	r2, #1
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360a:	f7ff f849 	bl	80026a0 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003612:	f7ff f845 	bl	80026a0 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e1a8      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003630:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4925      	ldr	r1, [pc, #148]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003640:	4313      	orrs	r3, r2
 8003642:	600b      	str	r3, [r1, #0]
 8003644:	e015      	b.n	8003672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003646:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7ff f828 	bl	80026a0 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003654:	f7ff f824 	bl	80026a0 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e187      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d036      	beq.n	80036ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d016      	beq.n	80036b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003686:	4b15      	ldr	r3, [pc, #84]	; (80036dc <HAL_RCC_OscConfig+0x248>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368c:	f7ff f808 	bl	80026a0 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003694:	f7ff f804 	bl	80026a0 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e167      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_OscConfig+0x240>)
 80036a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0x200>
 80036b2:	e01b      	b.n	80036ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <HAL_RCC_OscConfig+0x248>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ba:	f7fe fff1 	bl	80026a0 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	e00e      	b.n	80036e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c2:	f7fe ffed 	bl	80026a0 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d907      	bls.n	80036e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e150      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
 80036d4:	40023800 	.word	0x40023800
 80036d8:	42470000 	.word	0x42470000
 80036dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e0:	4b88      	ldr	r3, [pc, #544]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 80036e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ea      	bne.n	80036c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8097 	beq.w	8003828 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fa:	2300      	movs	r3, #0
 80036fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fe:	4b81      	ldr	r3, [pc, #516]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10f      	bne.n	800372a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	4b7d      	ldr	r3, [pc, #500]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	4a7c      	ldr	r2, [pc, #496]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 8003714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003718:	6413      	str	r3, [r2, #64]	; 0x40
 800371a:	4b7a      	ldr	r3, [pc, #488]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003726:	2301      	movs	r3, #1
 8003728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372a:	4b77      	ldr	r3, [pc, #476]	; (8003908 <HAL_RCC_OscConfig+0x474>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d118      	bne.n	8003768 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003736:	4b74      	ldr	r3, [pc, #464]	; (8003908 <HAL_RCC_OscConfig+0x474>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a73      	ldr	r2, [pc, #460]	; (8003908 <HAL_RCC_OscConfig+0x474>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003742:	f7fe ffad 	bl	80026a0 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374a:	f7fe ffa9 	bl	80026a0 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e10c      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	4b6a      	ldr	r3, [pc, #424]	; (8003908 <HAL_RCC_OscConfig+0x474>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x2ea>
 8003770:	4b64      	ldr	r3, [pc, #400]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a63      	ldr	r2, [pc, #396]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
 800377c:	e01c      	b.n	80037b8 <HAL_RCC_OscConfig+0x324>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b05      	cmp	r3, #5
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x30c>
 8003786:	4b5f      	ldr	r3, [pc, #380]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	4a5e      	ldr	r2, [pc, #376]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 800378c:	f043 0304 	orr.w	r3, r3, #4
 8003790:	6713      	str	r3, [r2, #112]	; 0x70
 8003792:	4b5c      	ldr	r3, [pc, #368]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a5b      	ldr	r2, [pc, #364]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
 800379e:	e00b      	b.n	80037b8 <HAL_RCC_OscConfig+0x324>
 80037a0:	4b58      	ldr	r3, [pc, #352]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	4a57      	ldr	r2, [pc, #348]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6713      	str	r3, [r2, #112]	; 0x70
 80037ac:	4b55      	ldr	r3, [pc, #340]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b0:	4a54      	ldr	r2, [pc, #336]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 80037b2:	f023 0304 	bic.w	r3, r3, #4
 80037b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d015      	beq.n	80037ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fe ff6e 	bl	80026a0 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c6:	e00a      	b.n	80037de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c8:	f7fe ff6a 	bl	80026a0 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0cb      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037de:	4b49      	ldr	r3, [pc, #292]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0ee      	beq.n	80037c8 <HAL_RCC_OscConfig+0x334>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ec:	f7fe ff58 	bl	80026a0 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fe ff54 	bl	80026a0 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0b5      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380a:	4b3e      	ldr	r3, [pc, #248]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1ee      	bne.n	80037f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d105      	bne.n	8003828 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381c:	4b39      	ldr	r3, [pc, #228]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	4a38      	ldr	r2, [pc, #224]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 8003822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003826:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80a1 	beq.w	8003974 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003832:	4b34      	ldr	r3, [pc, #208]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b08      	cmp	r3, #8
 800383c:	d05c      	beq.n	80038f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d141      	bne.n	80038ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003846:	4b31      	ldr	r3, [pc, #196]	; (800390c <HAL_RCC_OscConfig+0x478>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe ff28 	bl	80026a0 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe ff24 	bl	80026a0 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e087      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	4b27      	ldr	r3, [pc, #156]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	3b01      	subs	r3, #1
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	491b      	ldr	r1, [pc, #108]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <HAL_RCC_OscConfig+0x478>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7fe fefd 	bl	80026a0 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038aa:	f7fe fef9 	bl	80026a0 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e05c      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x416>
 80038c8:	e054      	b.n	8003974 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_RCC_OscConfig+0x478>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fe fee6 	bl	80026a0 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fe fee2 	bl	80026a0 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e045      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_RCC_OscConfig+0x470>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x444>
 80038f6:	e03d      	b.n	8003974 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d107      	bne.n	8003910 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e038      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
 8003904:	40023800 	.word	0x40023800
 8003908:	40007000 	.word	0x40007000
 800390c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003910:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <HAL_RCC_OscConfig+0x4ec>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d028      	beq.n	8003970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d121      	bne.n	8003970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d11a      	bne.n	8003970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003940:	4013      	ands	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003946:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003948:	4293      	cmp	r3, r2
 800394a:	d111      	bne.n	8003970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	3b01      	subs	r3, #1
 800395a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d107      	bne.n	8003970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800

08003984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0cc      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003998:	4b68      	ldr	r3, [pc, #416]	; (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d90c      	bls.n	80039c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b65      	ldr	r3, [pc, #404]	; (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b63      	ldr	r3, [pc, #396]	; (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0b8      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d8:	4b59      	ldr	r3, [pc, #356]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a58      	ldr	r2, [pc, #352]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f0:	4b53      	ldr	r3, [pc, #332]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a52      	ldr	r2, [pc, #328]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	494d      	ldr	r1, [pc, #308]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d044      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d107      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d119      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e07f      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d107      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a42:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e06f      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a52:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e067      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a62:	4b37      	ldr	r3, [pc, #220]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f023 0203 	bic.w	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4934      	ldr	r1, [pc, #208]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a74:	f7fe fe14 	bl	80026a0 <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7c:	f7fe fe10 	bl	80026a0 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e04f      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 020c 	and.w	r2, r3, #12
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d1eb      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d20c      	bcs.n	8003acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b22      	ldr	r3, [pc, #136]	; (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e032      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4916      	ldr	r1, [pc, #88]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003af6:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	490e      	ldr	r1, [pc, #56]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b0a:	f000 f821 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	490a      	ldr	r1, [pc, #40]	; (8003b44 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1c:	5ccb      	ldrb	r3, [r1, r3]
 8003b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b22:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe fd74 	bl	8002618 <HAL_InitTick>

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023c00 	.word	0x40023c00
 8003b40:	40023800 	.word	0x40023800
 8003b44:	08007340 	.word	0x08007340
 8003b48:	20000010 	.word	0x20000010
 8003b4c:	20000014 	.word	0x20000014

08003b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b54:	b090      	sub	sp, #64	; 0x40
 8003b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b60:	2300      	movs	r3, #0
 8003b62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b68:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 030c 	and.w	r3, r3, #12
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d00d      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0x40>
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	f200 80a1 	bhi.w	8003cbc <HAL_RCC_GetSysClockFreq+0x16c>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0x34>
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d003      	beq.n	8003b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b82:	e09b      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b84:	4b53      	ldr	r3, [pc, #332]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b88:	e09b      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b8a:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b8e:	e098      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b90:	4b4f      	ldr	r3, [pc, #316]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b9a:	4b4d      	ldr	r3, [pc, #308]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d028      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba6:	4b4a      	ldr	r3, [pc, #296]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	099b      	lsrs	r3, r3, #6
 8003bac:	2200      	movs	r2, #0
 8003bae:	623b      	str	r3, [r7, #32]
 8003bb0:	627a      	str	r2, [r7, #36]	; 0x24
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bbc:	fb03 f201 	mul.w	r2, r3, r1
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	fb00 f303 	mul.w	r3, r0, r3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a43      	ldr	r2, [pc, #268]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bca:	fba0 1202 	umull	r1, r2, r0, r2
 8003bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bd0:	460a      	mov	r2, r1
 8003bd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd6:	4413      	add	r3, r2
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bdc:	2200      	movs	r2, #0
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	61fa      	str	r2, [r7, #28]
 8003be2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bea:	f7fc fb51 	bl	8000290 <__aeabi_uldivmod>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf6:	e053      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf8:	4b35      	ldr	r3, [pc, #212]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	099b      	lsrs	r3, r3, #6
 8003bfe:	2200      	movs	r2, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	617a      	str	r2, [r7, #20]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c0a:	f04f 0b00 	mov.w	fp, #0
 8003c0e:	4652      	mov	r2, sl
 8003c10:	465b      	mov	r3, fp
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	0159      	lsls	r1, r3, #5
 8003c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c20:	0150      	lsls	r0, r2, #5
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	ebb2 080a 	subs.w	r8, r2, sl
 8003c2a:	eb63 090b 	sbc.w	r9, r3, fp
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c42:	ebb2 0408 	subs.w	r4, r2, r8
 8003c46:	eb63 0509 	sbc.w	r5, r3, r9
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	00eb      	lsls	r3, r5, #3
 8003c54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c58:	00e2      	lsls	r2, r4, #3
 8003c5a:	4614      	mov	r4, r2
 8003c5c:	461d      	mov	r5, r3
 8003c5e:	eb14 030a 	adds.w	r3, r4, sl
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	eb45 030b 	adc.w	r3, r5, fp
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c76:	4629      	mov	r1, r5
 8003c78:	028b      	lsls	r3, r1, #10
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c80:	4621      	mov	r1, r4
 8003c82:	028a      	lsls	r2, r1, #10
 8003c84:	4610      	mov	r0, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	60fa      	str	r2, [r7, #12]
 8003c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c94:	f7fc fafc 	bl	8000290 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	3301      	adds	r3, #1
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cba:	e002      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3740      	adds	r7, #64	; 0x40
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	00f42400 	.word	0x00f42400
 8003cd8:	017d7840 	.word	0x017d7840

08003cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000010 	.word	0x20000010

08003cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cf8:	f7ff fff0 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	0a9b      	lsrs	r3, r3, #10
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4903      	ldr	r1, [pc, #12]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40023800 	.word	0x40023800
 8003d18:	08007350 	.word	0x08007350

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d20:	f7ff ffdc 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	0b5b      	lsrs	r3, r3, #13
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4903      	ldr	r1, [pc, #12]	; (8003d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	08007350 	.word	0x08007350

08003d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e07b      	b.n	8003e4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d66:	d009      	beq.n	8003d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
 8003d6e:	e005      	b.n	8003d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fe f9b2 	bl	8002100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e00:	ea42 0103 	orr.w	r1, r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	f003 0104 	and.w	r1, r3, #4
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	f003 0210 	and.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b088      	sub	sp, #32
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_SPI_Transmit+0x22>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e126      	b.n	80040c6 <HAL_SPI_Transmit+0x270>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e80:	f7fe fc0e 	bl	80026a0 <HAL_GetTick>
 8003e84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d002      	beq.n	8003e9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
 8003e98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e9a:	e10b      	b.n	80040b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_SPI_Transmit+0x52>
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eac:	e102      	b.n	80040b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	88fa      	ldrh	r2, [r7, #6]
 8003ec6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef4:	d10f      	bne.n	8003f16 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b40      	cmp	r3, #64	; 0x40
 8003f22:	d007      	beq.n	8003f34 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f3c:	d14b      	bne.n	8003fd6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_SPI_Transmit+0xf6>
 8003f46:	8afb      	ldrh	r3, [r7, #22]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d13e      	bne.n	8003fca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	881a      	ldrh	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	1c9a      	adds	r2, r3, #2
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f70:	e02b      	b.n	8003fca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d112      	bne.n	8003fa6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	881a      	ldrh	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	1c9a      	adds	r2, r3, #2
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fa4:	e011      	b.n	8003fca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fa6:	f7fe fb7b 	bl	80026a0 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d803      	bhi.n	8003fbe <HAL_SPI_Transmit+0x168>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d102      	bne.n	8003fc4 <HAL_SPI_Transmit+0x16e>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fc8:	e074      	b.n	80040b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ce      	bne.n	8003f72 <HAL_SPI_Transmit+0x11c>
 8003fd4:	e04c      	b.n	8004070 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_Transmit+0x18e>
 8003fde:	8afb      	ldrh	r3, [r7, #22]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d140      	bne.n	8004066 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	7812      	ldrb	r2, [r2, #0]
 8003ff0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800400a:	e02c      	b.n	8004066 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d113      	bne.n	8004042 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	7812      	ldrb	r2, [r2, #0]
 8004026:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004040:	e011      	b.n	8004066 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004042:	f7fe fb2d 	bl	80026a0 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d803      	bhi.n	800405a <HAL_SPI_Transmit+0x204>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d102      	bne.n	8004060 <HAL_SPI_Transmit+0x20a>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004064:	e026      	b.n	80040b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1cd      	bne.n	800400c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	6839      	ldr	r1, [r7, #0]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fa63 	bl	8004540 <SPI_EndRxTxTransaction>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e000      	b.n	80040b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80040b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b08c      	sub	sp, #48	; 0x30
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040dc:	2301      	movs	r3, #1
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x26>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e18a      	b.n	800440a <HAL_SPI_TransmitReceive+0x33c>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040fc:	f7fe fad0 	bl	80026a0 <HAL_GetTick>
 8004100:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004112:	887b      	ldrh	r3, [r7, #2]
 8004114:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004116:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800411a:	2b01      	cmp	r3, #1
 800411c:	d00f      	beq.n	800413e <HAL_SPI_TransmitReceive+0x70>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004124:	d107      	bne.n	8004136 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d103      	bne.n	8004136 <HAL_SPI_TransmitReceive+0x68>
 800412e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004132:	2b04      	cmp	r3, #4
 8004134:	d003      	beq.n	800413e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004136:	2302      	movs	r3, #2
 8004138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800413c:	e15b      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_SPI_TransmitReceive+0x82>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_SPI_TransmitReceive+0x82>
 800414a:	887b      	ldrh	r3, [r7, #2]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d103      	bne.n	8004158 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004156:	e14e      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b04      	cmp	r3, #4
 8004162:	d003      	beq.n	800416c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2205      	movs	r2, #5
 8004168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	887a      	ldrh	r2, [r7, #2]
 8004182:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	887a      	ldrh	r2, [r7, #2]
 800418e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d007      	beq.n	80041c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c8:	d178      	bne.n	80042bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_SPI_TransmitReceive+0x10a>
 80041d2:	8b7b      	ldrh	r3, [r7, #26]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d166      	bne.n	80042a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	881a      	ldrh	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	1c9a      	adds	r2, r3, #2
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041fc:	e053      	b.n	80042a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b02      	cmp	r3, #2
 800420a:	d11b      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x176>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d016      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x176>
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	2b01      	cmp	r3, #1
 800421a:	d113      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	1c9a      	adds	r2, r3, #2
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b01      	cmp	r3, #1
 8004250:	d119      	bne.n	8004286 <HAL_SPI_TransmitReceive+0x1b8>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d014      	beq.n	8004286 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	b292      	uxth	r2, r2
 8004268:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	1c9a      	adds	r2, r3, #2
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004282:	2301      	movs	r3, #1
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004286:	f7fe fa0b 	bl	80026a0 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004292:	429a      	cmp	r2, r3
 8004294:	d807      	bhi.n	80042a6 <HAL_SPI_TransmitReceive+0x1d8>
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d003      	beq.n	80042a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042a4:	e0a7      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1a6      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x130>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1a1      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x130>
 80042ba:	e07c      	b.n	80043b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_SPI_TransmitReceive+0x1fc>
 80042c4:	8b7b      	ldrh	r3, [r7, #26]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d16b      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	330c      	adds	r3, #12
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042f0:	e057      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d11c      	bne.n	800433a <HAL_SPI_TransmitReceive+0x26c>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d017      	beq.n	800433a <HAL_SPI_TransmitReceive+0x26c>
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d114      	bne.n	800433a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	7812      	ldrb	r2, [r2, #0]
 800431c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b01      	cmp	r3, #1
 8004346:	d119      	bne.n	800437c <HAL_SPI_TransmitReceive+0x2ae>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d014      	beq.n	800437c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004378:	2301      	movs	r3, #1
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800437c:	f7fe f990 	bl	80026a0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004388:	429a      	cmp	r2, r3
 800438a:	d803      	bhi.n	8004394 <HAL_SPI_TransmitReceive+0x2c6>
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	d102      	bne.n	800439a <HAL_SPI_TransmitReceive+0x2cc>
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80043a0:	e029      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1a2      	bne.n	80042f2 <HAL_SPI_TransmitReceive+0x224>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d19d      	bne.n	80042f2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f8c0 	bl	8004540 <SPI_EndRxTxTransaction>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d006      	beq.n	80043d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043d2:	e010      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	e000      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80043f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800440a:	4618      	mov	r0, r3
 800440c:	3730      	adds	r7, #48	; 0x30
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004420:	b2db      	uxtb	r3, r3
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004440:	f7fe f92e 	bl	80026a0 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	4413      	add	r3, r2
 800444e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004450:	f7fe f926 	bl	80026a0 <HAL_GetTick>
 8004454:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004456:	4b39      	ldr	r3, [pc, #228]	; (800453c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	015b      	lsls	r3, r3, #5
 800445c:	0d1b      	lsrs	r3, r3, #20
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004466:	e054      	b.n	8004512 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446e:	d050      	beq.n	8004512 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004470:	f7fe f916 	bl	80026a0 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	429a      	cmp	r2, r3
 800447e:	d902      	bls.n	8004486 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d13d      	bne.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004494:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449e:	d111      	bne.n	80044c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a8:	d004      	beq.n	80044b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b2:	d107      	bne.n	80044c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044cc:	d10f      	bne.n	80044ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e017      	b.n	8004532 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	3b01      	subs	r3, #1
 8004510:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	429a      	cmp	r2, r3
 800452e:	d19b      	bne.n	8004468 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000010 	.word	0x20000010

08004540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <SPI_EndRxTxTransaction+0x7c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1b      	ldr	r2, [pc, #108]	; (80045c0 <SPI_EndRxTxTransaction+0x80>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	0d5b      	lsrs	r3, r3, #21
 8004558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800455c:	fb02 f303 	mul.w	r3, r2, r3
 8004560:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800456a:	d112      	bne.n	8004592 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2200      	movs	r2, #0
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff ff5a 	bl	8004430 <SPI_WaitFlagStateUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	f043 0220 	orr.w	r2, r3, #32
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e00f      	b.n	80045b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	3b01      	subs	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a8:	2b80      	cmp	r3, #128	; 0x80
 80045aa:	d0f2      	beq.n	8004592 <SPI_EndRxTxTransaction+0x52>
 80045ac:	e000      	b.n	80045b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80045ae:	bf00      	nop
  }

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000010 	.word	0x20000010
 80045c0:	165e9f81 	.word	0x165e9f81

080045c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e041      	b.n	800465a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fd fe1e 	bl	800222c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f000 fcac 	bl	8004f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a1a      	ldr	r2, [r3, #32]
 8004670:	f241 1311 	movw	r3, #4369	; 0x1111
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10f      	bne.n	800469a <HAL_TIM_Base_Stop+0x38>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6a1a      	ldr	r2, [r3, #32]
 8004680:	f240 4344 	movw	r3, #1092	; 0x444
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d107      	bne.n	800469a <HAL_TIM_Base_Stop+0x38>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0201 	bic.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d001      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e044      	b.n	8004752 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <HAL_TIM_Base_Start_IT+0xb0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d018      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x6c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f2:	d013      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x6c>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1a      	ldr	r2, [pc, #104]	; (8004764 <HAL_TIM_Base_Start_IT+0xb4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00e      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x6c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a19      	ldr	r2, [pc, #100]	; (8004768 <HAL_TIM_Base_Start_IT+0xb8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d009      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x6c>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a17      	ldr	r2, [pc, #92]	; (800476c <HAL_TIM_Base_Start_IT+0xbc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x6c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a16      	ldr	r2, [pc, #88]	; (8004770 <HAL_TIM_Base_Start_IT+0xc0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d111      	bne.n	8004740 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b06      	cmp	r3, #6
 800472c:	d010      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0201 	orr.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473e:	e007      	b.n	8004750 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40010000 	.word	0x40010000
 8004764:	40000400 	.word	0x40000400
 8004768:	40000800 	.word	0x40000800
 800476c:	40000c00 	.word	0x40000c00
 8004770:	40014000 	.word	0x40014000

08004774 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e097      	b.n	80048b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fd fcf7 	bl	8002190 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b8:	f023 0307 	bic.w	r3, r3, #7
 80047bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f000 fbc9 	bl	8004f60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	4313      	orrs	r3, r2
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004814:	f023 030c 	bic.w	r3, r3, #12
 8004818:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	4313      	orrs	r3, r2
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	011a      	lsls	r2, r3, #4
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	031b      	lsls	r3, r3, #12
 8004844:	4313      	orrs	r3, r2
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004852:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800485a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	4313      	orrs	r3, r2
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d110      	bne.n	8004912 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d102      	bne.n	80048fc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80048f6:	7b7b      	ldrb	r3, [r7, #13]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d001      	beq.n	8004900 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e089      	b.n	8004a14 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004910:	e031      	b.n	8004976 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b04      	cmp	r3, #4
 8004916:	d110      	bne.n	800493a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004918:	7bbb      	ldrb	r3, [r7, #14]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d102      	bne.n	8004924 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800491e:	7b3b      	ldrb	r3, [r7, #12]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d001      	beq.n	8004928 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e075      	b.n	8004a14 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004938:	e01d      	b.n	8004976 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d108      	bne.n	8004952 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004940:	7bbb      	ldrb	r3, [r7, #14]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d105      	bne.n	8004952 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004946:	7b7b      	ldrb	r3, [r7, #13]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d102      	bne.n	8004952 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800494c:	7b3b      	ldrb	r3, [r7, #12]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d001      	beq.n	8004956 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e05e      	b.n	8004a14 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_TIM_Encoder_Start_IT+0xc4>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b04      	cmp	r3, #4
 8004980:	d010      	beq.n	80049a4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004982:	e01f      	b.n	80049c4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2201      	movs	r2, #1
 800498a:	2100      	movs	r1, #0
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fc01 	bl	8005194 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0202 	orr.w	r2, r2, #2
 80049a0:	60da      	str	r2, [r3, #12]
      break;
 80049a2:	e02e      	b.n	8004a02 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2201      	movs	r2, #1
 80049aa:	2104      	movs	r1, #4
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fbf1 	bl	8005194 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0204 	orr.w	r2, r2, #4
 80049c0:	60da      	str	r2, [r3, #12]
      break;
 80049c2:	e01e      	b.n	8004a02 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2201      	movs	r2, #1
 80049ca:	2100      	movs	r1, #0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fbe1 	bl	8005194 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2201      	movs	r2, #1
 80049d8:	2104      	movs	r1, #4
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fbda 	bl	8005194 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0202 	orr.w	r2, r2, #2
 80049ee:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0204 	orr.w	r2, r2, #4
 80049fe:	60da      	str	r2, [r3, #12]
      break;
 8004a00:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10f      	bne.n	8004a4c <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2200      	movs	r2, #0
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fbad 	bl	8005194 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0202 	bic.w	r2, r2, #2
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e030      	b.n	8004aae <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d10f      	bne.n	8004a72 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	2104      	movs	r1, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fb9a 	bl	8005194 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0204 	bic.w	r2, r2, #4
 8004a6e:	60da      	str	r2, [r3, #12]
 8004a70:	e01d      	b.n	8004aae <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2200      	movs	r2, #0
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fb8a 	bl	8005194 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2200      	movs	r2, #0
 8004a86:	2104      	movs	r1, #4
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fb83 	bl	8005194 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0202 	bic.w	r2, r2, #2
 8004a9c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0204 	bic.w	r2, r2, #4
 8004aac:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6a1a      	ldr	r2, [r3, #32]
 8004ab4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10f      	bne.n	8004ade <HAL_TIM_Encoder_Stop_IT+0xc2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6a1a      	ldr	r2, [r3, #32]
 8004ac4:	f240 4344 	movw	r3, #1092	; 0x444
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d107      	bne.n	8004ade <HAL_TIM_Encoder_Stop_IT+0xc2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_TIM_Encoder_Stop_IT+0xce>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d138      	bne.n	8004b5c <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_Encoder_Stop_IT+0xde>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af8:	e013      	b.n	8004b22 <HAL_TIM_Encoder_Stop_IT+0x106>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_Encoder_Stop_IT+0xee>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b08:	e00b      	b.n	8004b22 <HAL_TIM_Encoder_Stop_IT+0x106>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_Encoder_Stop_IT+0xfe>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b18:	e003      	b.n	8004b22 <HAL_TIM_Encoder_Stop_IT+0x106>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <HAL_TIM_Encoder_Stop_IT+0x116>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b30:	e024      	b.n	8004b7c <HAL_TIM_Encoder_Stop_IT+0x160>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d104      	bne.n	8004b42 <HAL_TIM_Encoder_Stop_IT+0x126>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b40:	e01c      	b.n	8004b7c <HAL_TIM_Encoder_Stop_IT+0x160>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_Encoder_Stop_IT+0x136>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b50:	e014      	b.n	8004b7c <HAL_TIM_Encoder_Stop_IT+0x160>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b5a:	e00f      	b.n	8004b7c <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d122      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d11b      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f06f 0202 	mvn.w	r2, #2
 8004bb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fd f9c3 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8004bce:	e005      	b.n	8004bdc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f9a7 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f9ae 	bl	8004f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d122      	bne.n	8004c36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d11b      	bne.n	8004c36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f06f 0204 	mvn.w	r2, #4
 8004c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fd f999 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8004c22:	e005      	b.n	8004c30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f97d 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f984 	bl	8004f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d122      	bne.n	8004c8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d11b      	bne.n	8004c8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f06f 0208 	mvn.w	r2, #8
 8004c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2204      	movs	r2, #4
 8004c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7fd f96f 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8004c76:	e005      	b.n	8004c84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f953 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f95a 	bl	8004f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d122      	bne.n	8004cde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d11b      	bne.n	8004cde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f06f 0210 	mvn.w	r2, #16
 8004cae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7fd f945 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8004cca:	e005      	b.n	8004cd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f929 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f930 	bl	8004f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10e      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d107      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f06f 0201 	mvn.w	r2, #1
 8004d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fd f8c1 	bl	8001e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d14:	2b80      	cmp	r3, #128	; 0x80
 8004d16:	d10e      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d107      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 facd 	bl	80052d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d40:	2b40      	cmp	r3, #64	; 0x40
 8004d42:	d10e      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d107      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f8f5 	bl	8004f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d10e      	bne.n	8004d8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d107      	bne.n	8004d8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f06f 0220 	mvn.w	r2, #32
 8004d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fa97 	bl	80052bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_TIM_ConfigClockSource+0x1c>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e0b4      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x186>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dd0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dd8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dea:	d03e      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0xd4>
 8004dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df0:	f200 8087 	bhi.w	8004f02 <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df8:	f000 8086 	beq.w	8004f08 <HAL_TIM_ConfigClockSource+0x172>
 8004dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e00:	d87f      	bhi.n	8004f02 <HAL_TIM_ConfigClockSource+0x16c>
 8004e02:	2b70      	cmp	r3, #112	; 0x70
 8004e04:	d01a      	beq.n	8004e3c <HAL_TIM_ConfigClockSource+0xa6>
 8004e06:	2b70      	cmp	r3, #112	; 0x70
 8004e08:	d87b      	bhi.n	8004f02 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0a:	2b60      	cmp	r3, #96	; 0x60
 8004e0c:	d050      	beq.n	8004eb0 <HAL_TIM_ConfigClockSource+0x11a>
 8004e0e:	2b60      	cmp	r3, #96	; 0x60
 8004e10:	d877      	bhi.n	8004f02 <HAL_TIM_ConfigClockSource+0x16c>
 8004e12:	2b50      	cmp	r3, #80	; 0x50
 8004e14:	d03c      	beq.n	8004e90 <HAL_TIM_ConfigClockSource+0xfa>
 8004e16:	2b50      	cmp	r3, #80	; 0x50
 8004e18:	d873      	bhi.n	8004f02 <HAL_TIM_ConfigClockSource+0x16c>
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d058      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0x13a>
 8004e1e:	2b40      	cmp	r3, #64	; 0x40
 8004e20:	d86f      	bhi.n	8004f02 <HAL_TIM_ConfigClockSource+0x16c>
 8004e22:	2b30      	cmp	r3, #48	; 0x30
 8004e24:	d064      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0x15a>
 8004e26:	2b30      	cmp	r3, #48	; 0x30
 8004e28:	d86b      	bhi.n	8004f02 <HAL_TIM_ConfigClockSource+0x16c>
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d060      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0x15a>
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d867      	bhi.n	8004f02 <HAL_TIM_ConfigClockSource+0x16c>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d05c      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0x15a>
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d05a      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0x15a>
 8004e3a:	e062      	b.n	8004f02 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	6899      	ldr	r1, [r3, #8]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f000 f982 	bl	8005154 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	609a      	str	r2, [r3, #8]
      break;
 8004e68:	e04f      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6899      	ldr	r1, [r3, #8]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f000 f96b 	bl	8005154 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e8c:	609a      	str	r2, [r3, #8]
      break;
 8004e8e:	e03c      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	6859      	ldr	r1, [r3, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f000 f8df 	bl	8005060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2150      	movs	r1, #80	; 0x50
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 f938 	bl	800511e <TIM_ITRx_SetConfig>
      break;
 8004eae:	e02c      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f000 f8fe 	bl	80050be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2160      	movs	r1, #96	; 0x60
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f928 	bl	800511e <TIM_ITRx_SetConfig>
      break;
 8004ece:	e01c      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6859      	ldr	r1, [r3, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	461a      	mov	r2, r3
 8004ede:	f000 f8bf 	bl	8005060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2140      	movs	r1, #64	; 0x40
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 f918 	bl	800511e <TIM_ITRx_SetConfig>
      break;
 8004eee:	e00c      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4610      	mov	r0, r2
 8004efc:	f000 f90f 	bl	800511e <TIM_ITRx_SetConfig>
      break;
 8004f00:	e003      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
      break;
 8004f06:	e000      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a34      	ldr	r2, [pc, #208]	; (8005044 <TIM_Base_SetConfig+0xe4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00f      	beq.n	8004f98 <TIM_Base_SetConfig+0x38>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7e:	d00b      	beq.n	8004f98 <TIM_Base_SetConfig+0x38>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a31      	ldr	r2, [pc, #196]	; (8005048 <TIM_Base_SetConfig+0xe8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_Base_SetConfig+0x38>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a30      	ldr	r2, [pc, #192]	; (800504c <TIM_Base_SetConfig+0xec>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_Base_SetConfig+0x38>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2f      	ldr	r2, [pc, #188]	; (8005050 <TIM_Base_SetConfig+0xf0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d108      	bne.n	8004faa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a25      	ldr	r2, [pc, #148]	; (8005044 <TIM_Base_SetConfig+0xe4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01b      	beq.n	8004fea <TIM_Base_SetConfig+0x8a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb8:	d017      	beq.n	8004fea <TIM_Base_SetConfig+0x8a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a22      	ldr	r2, [pc, #136]	; (8005048 <TIM_Base_SetConfig+0xe8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d013      	beq.n	8004fea <TIM_Base_SetConfig+0x8a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a21      	ldr	r2, [pc, #132]	; (800504c <TIM_Base_SetConfig+0xec>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00f      	beq.n	8004fea <TIM_Base_SetConfig+0x8a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a20      	ldr	r2, [pc, #128]	; (8005050 <TIM_Base_SetConfig+0xf0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00b      	beq.n	8004fea <TIM_Base_SetConfig+0x8a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <TIM_Base_SetConfig+0xf4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <TIM_Base_SetConfig+0x8a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1e      	ldr	r2, [pc, #120]	; (8005058 <TIM_Base_SetConfig+0xf8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_Base_SetConfig+0x8a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	; (800505c <TIM_Base_SetConfig+0xfc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d108      	bne.n	8004ffc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a08      	ldr	r2, [pc, #32]	; (8005044 <TIM_Base_SetConfig+0xe4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d103      	bne.n	8005030 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	615a      	str	r2, [r3, #20]
}
 8005036:	bf00      	nop
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40014000 	.word	0x40014000
 8005058:	40014400 	.word	0x40014400
 800505c:	40014800 	.word	0x40014800

08005060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f023 0201 	bic.w	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800508a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f023 030a 	bic.w	r3, r3, #10
 800509c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050be:	b480      	push	{r7}
 80050c0:	b087      	sub	sp, #28
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f023 0210 	bic.w	r2, r3, #16
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	031b      	lsls	r3, r3, #12
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	f043 0307 	orr.w	r3, r3, #7
 8005140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	609a      	str	r2, [r3, #8]
}
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800516e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	021a      	lsls	r2, r3, #8
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	431a      	orrs	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	609a      	str	r2, [r3, #8]
}
 8005188:	bf00      	nop
 800518a:	371c      	adds	r7, #28
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 031f 	and.w	r3, r3, #31
 80051a6:	2201      	movs	r2, #1
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1a      	ldr	r2, [r3, #32]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	43db      	mvns	r3, r3
 80051b6:	401a      	ands	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a1a      	ldr	r2, [r3, #32]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 031f 	and.w	r3, r3, #31
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	fa01 f303 	lsl.w	r3, r1, r3
 80051cc:	431a      	orrs	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	621a      	str	r2, [r3, #32]
}
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e050      	b.n	800529a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1c      	ldr	r2, [pc, #112]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d018      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005244:	d013      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a18      	ldr	r2, [pc, #96]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d10c      	bne.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	4313      	orrs	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40010000 	.word	0x40010000
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800
 80052b4:	40000c00 	.word	0x40000c00
 80052b8:	40014000 	.word	0x40014000

080052bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e03f      	b.n	8005376 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fc ffb6 	bl	800227c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2224      	movs	r2, #36	; 0x24
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fe9b 	bl	8006064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800533c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695a      	ldr	r2, [r3, #20]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800534c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800535c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b08c      	sub	sp, #48	; 0x30
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	4613      	mov	r3, r2
 800538a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b20      	cmp	r3, #32
 8005396:	d152      	bne.n	800543e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e04b      	b.n	8005440 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e044      	b.n	8005440 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	461a      	mov	r2, r3
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fbea 	bl	8005ba4 <UART_Start_Receive_DMA>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80053d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d12c      	bne.n	8005438 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d125      	bne.n	8005432 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	617b      	str	r3, [r7, #20]
   return(result);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f043 0310 	orr.w	r3, r3, #16
 8005412:	62bb      	str	r3, [r7, #40]	; 0x28
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800541c:	627a      	str	r2, [r7, #36]	; 0x24
 800541e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6a39      	ldr	r1, [r7, #32]
 8005422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	61fb      	str	r3, [r7, #28]
   return(result);
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e5      	bne.n	80053fc <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005430:	e002      	b.n	8005438 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800543c:	e000      	b.n	8005440 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800543e:	2302      	movs	r3, #2
  }
}
 8005440:	4618      	mov	r0, r3
 8005442:	3730      	adds	r7, #48	; 0x30
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b0ba      	sub	sp, #232	; 0xe8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800546e:	2300      	movs	r3, #0
 8005470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005474:	2300      	movs	r3, #0
 8005476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10f      	bne.n	80054ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <HAL_UART_IRQHandler+0x66>
 800549a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fd21 	bl	8005eee <UART_Receive_IT>
      return;
 80054ac:	e256      	b.n	800595c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 80de 	beq.w	8005674 <HAL_UART_IRQHandler+0x22c>
 80054b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80d1 	beq.w	8005674 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00b      	beq.n	80054f6 <HAL_UART_IRQHandler+0xae>
 80054de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f043 0201 	orr.w	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00b      	beq.n	800551a <HAL_UART_IRQHandler+0xd2>
 8005502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f043 0202 	orr.w	r2, r3, #2
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800551a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <HAL_UART_IRQHandler+0xf6>
 8005526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f043 0204 	orr.w	r2, r3, #4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800553e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d011      	beq.n	800556e <HAL_UART_IRQHandler+0x126>
 800554a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d105      	bne.n	8005562 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	f043 0208 	orr.w	r2, r3, #8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 81ed 	beq.w	8005952 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <HAL_UART_IRQHandler+0x14e>
 8005584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fcac 	bl	8005eee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	bf0c      	ite	eq
 80055a4:	2301      	moveq	r3, #1
 80055a6:	2300      	movne	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <HAL_UART_IRQHandler+0x17a>
 80055ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d04f      	beq.n	8005662 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fbb4 	bl	8005d30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d141      	bne.n	800565a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3314      	adds	r3, #20
 80055dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3314      	adds	r3, #20
 80055fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005602:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800560e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800561a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1d9      	bne.n	80055d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	2b00      	cmp	r3, #0
 8005628:	d013      	beq.n	8005652 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	4a7d      	ldr	r2, [pc, #500]	; (8005824 <HAL_UART_IRQHandler+0x3dc>)
 8005630:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	4618      	mov	r0, r3
 8005638:	f7fd faea 	bl	8002c10 <HAL_DMA_Abort_IT>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d016      	beq.n	8005670 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800564c:	4610      	mov	r0, r2
 800564e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005650:	e00e      	b.n	8005670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9a4 	bl	80059a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005658:	e00a      	b.n	8005670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f9a0 	bl	80059a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005660:	e006      	b.n	8005670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f99c 	bl	80059a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800566e:	e170      	b.n	8005952 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005670:	bf00      	nop
    return;
 8005672:	e16e      	b.n	8005952 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	2b01      	cmp	r3, #1
 800567a:	f040 814a 	bne.w	8005912 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800567e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 8143 	beq.w	8005912 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800568c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 813c 	beq.w	8005912 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800569a:	2300      	movs	r3, #0
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	60bb      	str	r3, [r7, #8]
 80056ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	f040 80b4 	bne.w	8005828 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8140 	beq.w	8005956 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056de:	429a      	cmp	r2, r3
 80056e0:	f080 8139 	bcs.w	8005956 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f6:	f000 8088 	beq.w	800580a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005710:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005726:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800572a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005732:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800573e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1d9      	bne.n	80056fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3314      	adds	r3, #20
 800574c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005758:	f023 0301 	bic.w	r3, r3, #1
 800575c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3314      	adds	r3, #20
 8005766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800576a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800576e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005772:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800577c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e1      	bne.n	8005746 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3314      	adds	r3, #20
 8005788:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3314      	adds	r3, #20
 80057a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e3      	bne.n	8005782 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	330c      	adds	r3, #12
 80057ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057da:	f023 0310 	bic.w	r3, r3, #16
 80057de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	330c      	adds	r3, #12
 80057e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80057ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e3      	bne.n	80057c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	4618      	mov	r0, r3
 8005806:	f7fd f993 	bl	8002b30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005812:	b29b      	uxth	r3, r3
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	b29b      	uxth	r3, r3
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fc fb54 	bl	8001ec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005820:	e099      	b.n	8005956 <HAL_UART_IRQHandler+0x50e>
 8005822:	bf00      	nop
 8005824:	08005df7 	.word	0x08005df7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005830:	b29b      	uxth	r3, r3
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 808b 	beq.w	800595a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005844:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8086 	beq.w	800595a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800585e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005860:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005872:	647a      	str	r2, [r7, #68]	; 0x44
 8005874:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e3      	bne.n	800584e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3314      	adds	r3, #20
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	623b      	str	r3, [r7, #32]
   return(result);
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3314      	adds	r3, #20
 80058a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058aa:	633a      	str	r2, [r7, #48]	; 0x30
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e3      	bne.n	8005886 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	330c      	adds	r3, #12
 80058d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	60fb      	str	r3, [r7, #12]
   return(result);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0310 	bic.w	r3, r3, #16
 80058e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	330c      	adds	r3, #12
 80058ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058f0:	61fa      	str	r2, [r7, #28]
 80058f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	69b9      	ldr	r1, [r7, #24]
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	617b      	str	r3, [r7, #20]
   return(result);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e3      	bne.n	80058cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005904:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005908:	4619      	mov	r1, r3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fc fadc 	bl	8001ec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005910:	e023      	b.n	800595a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <HAL_UART_IRQHandler+0x4ea>
 800591e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fa77 	bl	8005e1e <UART_Transmit_IT>
    return;
 8005930:	e014      	b.n	800595c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00e      	beq.n	800595c <HAL_UART_IRQHandler+0x514>
 800593e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fab7 	bl	8005ebe <UART_EndTransmit_IT>
    return;
 8005950:	e004      	b.n	800595c <HAL_UART_IRQHandler+0x514>
    return;
 8005952:	bf00      	nop
 8005954:	e002      	b.n	800595c <HAL_UART_IRQHandler+0x514>
      return;
 8005956:	bf00      	nop
 8005958:	e000      	b.n	800595c <HAL_UART_IRQHandler+0x514>
      return;
 800595a:	bf00      	nop
  }
}
 800595c:	37e8      	adds	r7, #232	; 0xe8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop

08005964 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b09c      	sub	sp, #112	; 0x70
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d172      	bne.n	8005ab6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80059d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d2:	2200      	movs	r2, #0
 80059d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	330c      	adds	r3, #12
 80059dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80059ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	330c      	adds	r3, #12
 80059f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80059f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e5      	bne.n	80059d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3314      	adds	r3, #20
 8005a10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	667b      	str	r3, [r7, #100]	; 0x64
 8005a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3314      	adds	r3, #20
 8005a28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a2a:	647a      	str	r2, [r7, #68]	; 0x44
 8005a2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e5      	bne.n	8005a0a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3314      	adds	r3, #20
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a54:	663b      	str	r3, [r7, #96]	; 0x60
 8005a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3314      	adds	r3, #20
 8005a5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a5e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e5      	bne.n	8005a3e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d119      	bne.n	8005ab6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	330c      	adds	r3, #12
 8005a88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f023 0310 	bic.w	r3, r3, #16
 8005a98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005aa2:	61fa      	str	r2, [r7, #28]
 8005aa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	69b9      	ldr	r1, [r7, #24]
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e5      	bne.n	8005a82 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d106      	bne.n	8005acc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ac6:	f7fc f9ff 	bl	8001ec8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005aca:	e002      	b.n	8005ad2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005acc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ace:	f7ff ff53 	bl	8005978 <HAL_UART_RxCpltCallback>
}
 8005ad2:	bf00      	nop
 8005ad4:	3770      	adds	r7, #112	; 0x70
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d108      	bne.n	8005b02 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005af4:	085b      	lsrs	r3, r3, #1
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4619      	mov	r1, r3
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7fc f9e4 	bl	8001ec8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b00:	e002      	b.n	8005b08 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff ff42 	bl	800598c <HAL_UART_RxHalfCpltCallback>
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2c:	2b80      	cmp	r3, #128	; 0x80
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b21      	cmp	r3, #33	; 0x21
 8005b42:	d108      	bne.n	8005b56 <UART_DMAError+0x46>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b50:	68b8      	ldr	r0, [r7, #8]
 8005b52:	f000 f8c5 	bl	8005ce0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b60:	2b40      	cmp	r3, #64	; 0x40
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b22      	cmp	r3, #34	; 0x22
 8005b76:	d108      	bne.n	8005b8a <UART_DMAError+0x7a>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2200      	movs	r2, #0
 8005b82:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005b84:	68b8      	ldr	r0, [r7, #8]
 8005b86:	f000 f8d3 	bl	8005d30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	f043 0210 	orr.w	r2, r3, #16
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b96:	68b8      	ldr	r0, [r7, #8]
 8005b98:	f7ff ff02 	bl	80059a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b9c:	bf00      	nop
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b098      	sub	sp, #96	; 0x60
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2222      	movs	r2, #34	; 0x22
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	4a40      	ldr	r2, [pc, #256]	; (8005cd4 <UART_Start_Receive_DMA+0x130>)
 8005bd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	4a3f      	ldr	r2, [pc, #252]	; (8005cd8 <UART_Start_Receive_DMA+0x134>)
 8005bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	4a3e      	ldr	r2, [pc, #248]	; (8005cdc <UART_Start_Receive_DMA+0x138>)
 8005be2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	2200      	movs	r2, #0
 8005bea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005bec:	f107 0308 	add.w	r3, r7, #8
 8005bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	88fb      	ldrh	r3, [r7, #6]
 8005c04:	f7fc ff3c 	bl	8002a80 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c08:	2300      	movs	r3, #0
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d019      	beq.n	8005c62 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	330c      	adds	r3, #12
 8005c34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c44:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	330c      	adds	r3, #12
 8005c4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c4e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005c50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e5      	bne.n	8005c2e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3314      	adds	r3, #20
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	657b      	str	r3, [r7, #84]	; 0x54
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3314      	adds	r3, #20
 8005c80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c82:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e5      	bne.n	8005c62 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cac:	653b      	str	r3, [r7, #80]	; 0x50
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cb6:	627a      	str	r2, [r7, #36]	; 0x24
 8005cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6a39      	ldr	r1, [r7, #32]
 8005cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e5      	bne.n	8005c96 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3760      	adds	r7, #96	; 0x60
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	080059b5 	.word	0x080059b5
 8005cd8:	08005adb 	.word	0x08005adb
 8005cdc:	08005b11 	.word	0x08005b11

08005ce0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b089      	sub	sp, #36	; 0x24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cfe:	61fb      	str	r3, [r7, #28]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	330c      	adds	r3, #12
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	61ba      	str	r2, [r7, #24]
 8005d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6979      	ldr	r1, [r7, #20]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	613b      	str	r3, [r7, #16]
   return(result);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005d24:	bf00      	nop
 8005d26:	3724      	adds	r7, #36	; 0x24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b095      	sub	sp, #84	; 0x54
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d58:	643a      	str	r2, [r7, #64]	; 0x40
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d60:	e841 2300 	strex	r3, r2, [r1]
 8005d64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e5      	bne.n	8005d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f023 0301 	bic.w	r3, r3, #1
 8005d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3314      	adds	r3, #20
 8005d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e5      	bne.n	8005d6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d119      	bne.n	8005ddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f023 0310 	bic.w	r3, r3, #16
 8005dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dc8:	61ba      	str	r2, [r7, #24]
 8005dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6979      	ldr	r1, [r7, #20]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e5      	bne.n	8005da8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005dea:	bf00      	nop
 8005dec:	3754      	adds	r7, #84	; 0x54
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff fdc5 	bl	80059a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e16:	bf00      	nop
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b21      	cmp	r3, #33	; 0x21
 8005e30:	d13e      	bne.n	8005eb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3a:	d114      	bne.n	8005e66 <UART_Transmit_IT+0x48>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d110      	bne.n	8005e66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	1c9a      	adds	r2, r3, #2
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	621a      	str	r2, [r3, #32]
 8005e64:	e008      	b.n	8005e78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	1c59      	adds	r1, r3, #1
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6211      	str	r1, [r2, #32]
 8005e70:	781a      	ldrb	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	4619      	mov	r1, r3
 8005e86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10f      	bne.n	8005eac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e000      	b.n	8005eb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eb0:	2302      	movs	r3, #2
  }
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff fd40 	bl	8005964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b08c      	sub	sp, #48	; 0x30
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b22      	cmp	r3, #34	; 0x22
 8005f00:	f040 80ab 	bne.w	800605a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0c:	d117      	bne.n	8005f3e <UART_Receive_IT+0x50>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d113      	bne.n	8005f3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	1c9a      	adds	r2, r3, #2
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8005f3c:	e026      	b.n	8005f8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f44:	2300      	movs	r3, #0
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f50:	d007      	beq.n	8005f62 <UART_Receive_IT+0x74>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10a      	bne.n	8005f70 <UART_Receive_IT+0x82>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	e008      	b.n	8005f82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d15a      	bne.n	8006056 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0220 	bic.w	r2, r2, #32
 8005fae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695a      	ldr	r2, [r3, #20]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0201 	bic.w	r2, r2, #1
 8005fce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d135      	bne.n	800604c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	330c      	adds	r3, #12
 8005fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f023 0310 	bic.w	r3, r3, #16
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006006:	623a      	str	r2, [r7, #32]
 8006008:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	69f9      	ldr	r1, [r7, #28]
 800600c:	6a3a      	ldr	r2, [r7, #32]
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	61bb      	str	r3, [r7, #24]
   return(result);
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e5      	bne.n	8005fe6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0310 	and.w	r3, r3, #16
 8006024:	2b10      	cmp	r3, #16
 8006026:	d10a      	bne.n	800603e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7fb ff3f 	bl	8001ec8 <HAL_UARTEx_RxEventCallback>
 800604a:	e002      	b.n	8006052 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff fc93 	bl	8005978 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	e002      	b.n	800605c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	e000      	b.n	800605c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800605a:	2302      	movs	r3, #2
  }
}
 800605c:	4618      	mov	r0, r3
 800605e:	3730      	adds	r7, #48	; 0x30
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006068:	b0c0      	sub	sp, #256	; 0x100
 800606a:	af00      	add	r7, sp, #0
 800606c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006080:	68d9      	ldr	r1, [r3, #12]
 8006082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	ea40 0301 	orr.w	r3, r0, r1
 800608c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	431a      	orrs	r2, r3
 800609c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060bc:	f021 010c 	bic.w	r1, r1, #12
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060ca:	430b      	orrs	r3, r1
 80060cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060de:	6999      	ldr	r1, [r3, #24]
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	ea40 0301 	orr.w	r3, r0, r1
 80060ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b8f      	ldr	r3, [pc, #572]	; (8006330 <UART_SetConfig+0x2cc>)
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d005      	beq.n	8006104 <UART_SetConfig+0xa0>
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b8d      	ldr	r3, [pc, #564]	; (8006334 <UART_SetConfig+0x2d0>)
 8006100:	429a      	cmp	r2, r3
 8006102:	d104      	bne.n	800610e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006104:	f7fd fe0a 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8006108:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800610c:	e003      	b.n	8006116 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800610e:	f7fd fdf1 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8006112:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006120:	f040 810c 	bne.w	800633c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006128:	2200      	movs	r2, #0
 800612a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800612e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006132:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006136:	4622      	mov	r2, r4
 8006138:	462b      	mov	r3, r5
 800613a:	1891      	adds	r1, r2, r2
 800613c:	65b9      	str	r1, [r7, #88]	; 0x58
 800613e:	415b      	adcs	r3, r3
 8006140:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006142:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006146:	4621      	mov	r1, r4
 8006148:	eb12 0801 	adds.w	r8, r2, r1
 800614c:	4629      	mov	r1, r5
 800614e:	eb43 0901 	adc.w	r9, r3, r1
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	f04f 0300 	mov.w	r3, #0
 800615a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800615e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006166:	4690      	mov	r8, r2
 8006168:	4699      	mov	r9, r3
 800616a:	4623      	mov	r3, r4
 800616c:	eb18 0303 	adds.w	r3, r8, r3
 8006170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006174:	462b      	mov	r3, r5
 8006176:	eb49 0303 	adc.w	r3, r9, r3
 800617a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800618a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800618e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006192:	460b      	mov	r3, r1
 8006194:	18db      	adds	r3, r3, r3
 8006196:	653b      	str	r3, [r7, #80]	; 0x50
 8006198:	4613      	mov	r3, r2
 800619a:	eb42 0303 	adc.w	r3, r2, r3
 800619e:	657b      	str	r3, [r7, #84]	; 0x54
 80061a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061a8:	f7fa f872 	bl	8000290 <__aeabi_uldivmod>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4b61      	ldr	r3, [pc, #388]	; (8006338 <UART_SetConfig+0x2d4>)
 80061b2:	fba3 2302 	umull	r2, r3, r3, r2
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	011c      	lsls	r4, r3, #4
 80061ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061cc:	4642      	mov	r2, r8
 80061ce:	464b      	mov	r3, r9
 80061d0:	1891      	adds	r1, r2, r2
 80061d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80061d4:	415b      	adcs	r3, r3
 80061d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061dc:	4641      	mov	r1, r8
 80061de:	eb12 0a01 	adds.w	sl, r2, r1
 80061e2:	4649      	mov	r1, r9
 80061e4:	eb43 0b01 	adc.w	fp, r3, r1
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061fc:	4692      	mov	sl, r2
 80061fe:	469b      	mov	fp, r3
 8006200:	4643      	mov	r3, r8
 8006202:	eb1a 0303 	adds.w	r3, sl, r3
 8006206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800620a:	464b      	mov	r3, r9
 800620c:	eb4b 0303 	adc.w	r3, fp, r3
 8006210:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006220:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006224:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006228:	460b      	mov	r3, r1
 800622a:	18db      	adds	r3, r3, r3
 800622c:	643b      	str	r3, [r7, #64]	; 0x40
 800622e:	4613      	mov	r3, r2
 8006230:	eb42 0303 	adc.w	r3, r2, r3
 8006234:	647b      	str	r3, [r7, #68]	; 0x44
 8006236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800623a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800623e:	f7fa f827 	bl	8000290 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4611      	mov	r1, r2
 8006248:	4b3b      	ldr	r3, [pc, #236]	; (8006338 <UART_SetConfig+0x2d4>)
 800624a:	fba3 2301 	umull	r2, r3, r3, r1
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	2264      	movs	r2, #100	; 0x64
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	1acb      	subs	r3, r1, r3
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800625e:	4b36      	ldr	r3, [pc, #216]	; (8006338 <UART_SetConfig+0x2d4>)
 8006260:	fba3 2302 	umull	r2, r3, r3, r2
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800626c:	441c      	add	r4, r3
 800626e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006272:	2200      	movs	r2, #0
 8006274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006278:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800627c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006280:	4642      	mov	r2, r8
 8006282:	464b      	mov	r3, r9
 8006284:	1891      	adds	r1, r2, r2
 8006286:	63b9      	str	r1, [r7, #56]	; 0x38
 8006288:	415b      	adcs	r3, r3
 800628a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800628c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006290:	4641      	mov	r1, r8
 8006292:	1851      	adds	r1, r2, r1
 8006294:	6339      	str	r1, [r7, #48]	; 0x30
 8006296:	4649      	mov	r1, r9
 8006298:	414b      	adcs	r3, r1
 800629a:	637b      	str	r3, [r7, #52]	; 0x34
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062a8:	4659      	mov	r1, fp
 80062aa:	00cb      	lsls	r3, r1, #3
 80062ac:	4651      	mov	r1, sl
 80062ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062b2:	4651      	mov	r1, sl
 80062b4:	00ca      	lsls	r2, r1, #3
 80062b6:	4610      	mov	r0, r2
 80062b8:	4619      	mov	r1, r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	4642      	mov	r2, r8
 80062be:	189b      	adds	r3, r3, r2
 80062c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062c4:	464b      	mov	r3, r9
 80062c6:	460a      	mov	r2, r1
 80062c8:	eb42 0303 	adc.w	r3, r2, r3
 80062cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062e4:	460b      	mov	r3, r1
 80062e6:	18db      	adds	r3, r3, r3
 80062e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ea:	4613      	mov	r3, r2
 80062ec:	eb42 0303 	adc.w	r3, r2, r3
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062fa:	f7f9 ffc9 	bl	8000290 <__aeabi_uldivmod>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <UART_SetConfig+0x2d4>)
 8006304:	fba3 1302 	umull	r1, r3, r3, r2
 8006308:	095b      	lsrs	r3, r3, #5
 800630a:	2164      	movs	r1, #100	; 0x64
 800630c:	fb01 f303 	mul.w	r3, r1, r3
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	3332      	adds	r3, #50	; 0x32
 8006316:	4a08      	ldr	r2, [pc, #32]	; (8006338 <UART_SetConfig+0x2d4>)
 8006318:	fba2 2303 	umull	r2, r3, r2, r3
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	f003 0207 	and.w	r2, r3, #7
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4422      	add	r2, r4
 800632a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800632c:	e105      	b.n	800653a <UART_SetConfig+0x4d6>
 800632e:	bf00      	nop
 8006330:	40011000 	.word	0x40011000
 8006334:	40011400 	.word	0x40011400
 8006338:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800633c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006340:	2200      	movs	r2, #0
 8006342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006346:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800634a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800634e:	4642      	mov	r2, r8
 8006350:	464b      	mov	r3, r9
 8006352:	1891      	adds	r1, r2, r2
 8006354:	6239      	str	r1, [r7, #32]
 8006356:	415b      	adcs	r3, r3
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
 800635a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800635e:	4641      	mov	r1, r8
 8006360:	1854      	adds	r4, r2, r1
 8006362:	4649      	mov	r1, r9
 8006364:	eb43 0501 	adc.w	r5, r3, r1
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	f04f 0300 	mov.w	r3, #0
 8006370:	00eb      	lsls	r3, r5, #3
 8006372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006376:	00e2      	lsls	r2, r4, #3
 8006378:	4614      	mov	r4, r2
 800637a:	461d      	mov	r5, r3
 800637c:	4643      	mov	r3, r8
 800637e:	18e3      	adds	r3, r4, r3
 8006380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006384:	464b      	mov	r3, r9
 8006386:	eb45 0303 	adc.w	r3, r5, r3
 800638a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800639a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063aa:	4629      	mov	r1, r5
 80063ac:	008b      	lsls	r3, r1, #2
 80063ae:	4621      	mov	r1, r4
 80063b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063b4:	4621      	mov	r1, r4
 80063b6:	008a      	lsls	r2, r1, #2
 80063b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063bc:	f7f9 ff68 	bl	8000290 <__aeabi_uldivmod>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4b60      	ldr	r3, [pc, #384]	; (8006548 <UART_SetConfig+0x4e4>)
 80063c6:	fba3 2302 	umull	r2, r3, r3, r2
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	011c      	lsls	r4, r3, #4
 80063ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063e0:	4642      	mov	r2, r8
 80063e2:	464b      	mov	r3, r9
 80063e4:	1891      	adds	r1, r2, r2
 80063e6:	61b9      	str	r1, [r7, #24]
 80063e8:	415b      	adcs	r3, r3
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f0:	4641      	mov	r1, r8
 80063f2:	1851      	adds	r1, r2, r1
 80063f4:	6139      	str	r1, [r7, #16]
 80063f6:	4649      	mov	r1, r9
 80063f8:	414b      	adcs	r3, r1
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006408:	4659      	mov	r1, fp
 800640a:	00cb      	lsls	r3, r1, #3
 800640c:	4651      	mov	r1, sl
 800640e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006412:	4651      	mov	r1, sl
 8006414:	00ca      	lsls	r2, r1, #3
 8006416:	4610      	mov	r0, r2
 8006418:	4619      	mov	r1, r3
 800641a:	4603      	mov	r3, r0
 800641c:	4642      	mov	r2, r8
 800641e:	189b      	adds	r3, r3, r2
 8006420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006424:	464b      	mov	r3, r9
 8006426:	460a      	mov	r2, r1
 8006428:	eb42 0303 	adc.w	r3, r2, r3
 800642c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	67bb      	str	r3, [r7, #120]	; 0x78
 800643a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006448:	4649      	mov	r1, r9
 800644a:	008b      	lsls	r3, r1, #2
 800644c:	4641      	mov	r1, r8
 800644e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006452:	4641      	mov	r1, r8
 8006454:	008a      	lsls	r2, r1, #2
 8006456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800645a:	f7f9 ff19 	bl	8000290 <__aeabi_uldivmod>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4b39      	ldr	r3, [pc, #228]	; (8006548 <UART_SetConfig+0x4e4>)
 8006464:	fba3 1302 	umull	r1, r3, r3, r2
 8006468:	095b      	lsrs	r3, r3, #5
 800646a:	2164      	movs	r1, #100	; 0x64
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	3332      	adds	r3, #50	; 0x32
 8006476:	4a34      	ldr	r2, [pc, #208]	; (8006548 <UART_SetConfig+0x4e4>)
 8006478:	fba2 2303 	umull	r2, r3, r2, r3
 800647c:	095b      	lsrs	r3, r3, #5
 800647e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006482:	441c      	add	r4, r3
 8006484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006488:	2200      	movs	r2, #0
 800648a:	673b      	str	r3, [r7, #112]	; 0x70
 800648c:	677a      	str	r2, [r7, #116]	; 0x74
 800648e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006492:	4642      	mov	r2, r8
 8006494:	464b      	mov	r3, r9
 8006496:	1891      	adds	r1, r2, r2
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	415b      	adcs	r3, r3
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a2:	4641      	mov	r1, r8
 80064a4:	1851      	adds	r1, r2, r1
 80064a6:	6039      	str	r1, [r7, #0]
 80064a8:	4649      	mov	r1, r9
 80064aa:	414b      	adcs	r3, r1
 80064ac:	607b      	str	r3, [r7, #4]
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064ba:	4659      	mov	r1, fp
 80064bc:	00cb      	lsls	r3, r1, #3
 80064be:	4651      	mov	r1, sl
 80064c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064c4:	4651      	mov	r1, sl
 80064c6:	00ca      	lsls	r2, r1, #3
 80064c8:	4610      	mov	r0, r2
 80064ca:	4619      	mov	r1, r3
 80064cc:	4603      	mov	r3, r0
 80064ce:	4642      	mov	r2, r8
 80064d0:	189b      	adds	r3, r3, r2
 80064d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80064d4:	464b      	mov	r3, r9
 80064d6:	460a      	mov	r2, r1
 80064d8:	eb42 0303 	adc.w	r3, r2, r3
 80064dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	663b      	str	r3, [r7, #96]	; 0x60
 80064e8:	667a      	str	r2, [r7, #100]	; 0x64
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	f04f 0300 	mov.w	r3, #0
 80064f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064f6:	4649      	mov	r1, r9
 80064f8:	008b      	lsls	r3, r1, #2
 80064fa:	4641      	mov	r1, r8
 80064fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006500:	4641      	mov	r1, r8
 8006502:	008a      	lsls	r2, r1, #2
 8006504:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006508:	f7f9 fec2 	bl	8000290 <__aeabi_uldivmod>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <UART_SetConfig+0x4e4>)
 8006512:	fba3 1302 	umull	r1, r3, r3, r2
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	2164      	movs	r1, #100	; 0x64
 800651a:	fb01 f303 	mul.w	r3, r1, r3
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	3332      	adds	r3, #50	; 0x32
 8006524:	4a08      	ldr	r2, [pc, #32]	; (8006548 <UART_SetConfig+0x4e4>)
 8006526:	fba2 2303 	umull	r2, r3, r2, r3
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	f003 020f 	and.w	r2, r3, #15
 8006530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4422      	add	r2, r4
 8006538:	609a      	str	r2, [r3, #8]
}
 800653a:	bf00      	nop
 800653c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006540:	46bd      	mov	sp, r7
 8006542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006546:	bf00      	nop
 8006548:	51eb851f 	.word	0x51eb851f

0800654c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006550:	4904      	ldr	r1, [pc, #16]	; (8006564 <MX_FATFS_Init+0x18>)
 8006552:	4805      	ldr	r0, [pc, #20]	; (8006568 <MX_FATFS_Init+0x1c>)
 8006554:	f000 f8ae 	bl	80066b4 <FATFS_LinkDriver>
 8006558:	4603      	mov	r3, r0
 800655a:	461a      	mov	r2, r3
 800655c:	4b03      	ldr	r3, [pc, #12]	; (800656c <MX_FATFS_Init+0x20>)
 800655e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006560:	bf00      	nop
 8006562:	bd80      	pop	{r7, pc}
 8006564:	2000026c 	.word	0x2000026c
 8006568:	2000001c 	.word	0x2000001c
 800656c:	20000268 	.word	0x20000268

08006570 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	4603      	mov	r3, r0
 8006578:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	4618      	mov	r0, r3
 800657e:	f7fa fe5f 	bl	8001240 <SD_disk_initialize>
 8006582:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	4618      	mov	r0, r3
 800659a:	f7fa ff3b 	bl	8001414 <SD_disk_status>
 800659e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	4603      	mov	r3, r0
 80065b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80065b8:	7bf8      	ldrb	r0, [r7, #15]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	f7fa ff3e 	bl	8001440 <SD_disk_read>
 80065c4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	4603      	mov	r3, r0
 80065dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80065de:	7bf8      	ldrb	r0, [r7, #15]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	f7fa ff95 	bl	8001514 <SD_disk_write>
 80065ea:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	603a      	str	r2, [r7, #0]
 80065fe:	71fb      	strb	r3, [r7, #7]
 8006600:	460b      	mov	r3, r1
 8006602:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006604:	79b9      	ldrb	r1, [r7, #6]
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f7fb f806 	bl	800161c <SD_disk_ioctl>
 8006610:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	4613      	mov	r3, r2
 8006628:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800662a:	2301      	movs	r3, #1
 800662c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006632:	4b1f      	ldr	r3, [pc, #124]	; (80066b0 <FATFS_LinkDriverEx+0x94>)
 8006634:	7a5b      	ldrb	r3, [r3, #9]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d131      	bne.n	80066a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800663c:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <FATFS_LinkDriverEx+0x94>)
 800663e:	7a5b      	ldrb	r3, [r3, #9]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	461a      	mov	r2, r3
 8006644:	4b1a      	ldr	r3, [pc, #104]	; (80066b0 <FATFS_LinkDriverEx+0x94>)
 8006646:	2100      	movs	r1, #0
 8006648:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800664a:	4b19      	ldr	r3, [pc, #100]	; (80066b0 <FATFS_LinkDriverEx+0x94>)
 800664c:	7a5b      	ldrb	r3, [r3, #9]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	4a17      	ldr	r2, [pc, #92]	; (80066b0 <FATFS_LinkDriverEx+0x94>)
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800665a:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <FATFS_LinkDriverEx+0x94>)
 800665c:	7a5b      	ldrb	r3, [r3, #9]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	4b13      	ldr	r3, [pc, #76]	; (80066b0 <FATFS_LinkDriverEx+0x94>)
 8006664:	4413      	add	r3, r2
 8006666:	79fa      	ldrb	r2, [r7, #7]
 8006668:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800666a:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <FATFS_LinkDriverEx+0x94>)
 800666c:	7a5b      	ldrb	r3, [r3, #9]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	b2d1      	uxtb	r1, r2
 8006674:	4a0e      	ldr	r2, [pc, #56]	; (80066b0 <FATFS_LinkDriverEx+0x94>)
 8006676:	7251      	strb	r1, [r2, #9]
 8006678:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800667a:	7dbb      	ldrb	r3, [r7, #22]
 800667c:	3330      	adds	r3, #48	; 0x30
 800667e:	b2da      	uxtb	r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	3301      	adds	r3, #1
 8006688:	223a      	movs	r2, #58	; 0x3a
 800668a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	3302      	adds	r3, #2
 8006690:	222f      	movs	r2, #47	; 0x2f
 8006692:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	3303      	adds	r3, #3
 8006698:	2200      	movs	r2, #0
 800669a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	20000270 	.word	0x20000270

080066b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80066be:	2200      	movs	r2, #0
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff ffaa 	bl	800661c <FATFS_LinkDriverEx>
 80066c8:	4603      	mov	r3, r0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <__errno>:
 80066d4:	4b01      	ldr	r3, [pc, #4]	; (80066dc <__errno+0x8>)
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000030 	.word	0x20000030

080066e0 <__libc_init_array>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	4d0d      	ldr	r5, [pc, #52]	; (8006718 <__libc_init_array+0x38>)
 80066e4:	4c0d      	ldr	r4, [pc, #52]	; (800671c <__libc_init_array+0x3c>)
 80066e6:	1b64      	subs	r4, r4, r5
 80066e8:	10a4      	asrs	r4, r4, #2
 80066ea:	2600      	movs	r6, #0
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	d109      	bne.n	8006704 <__libc_init_array+0x24>
 80066f0:	4d0b      	ldr	r5, [pc, #44]	; (8006720 <__libc_init_array+0x40>)
 80066f2:	4c0c      	ldr	r4, [pc, #48]	; (8006724 <__libc_init_array+0x44>)
 80066f4:	f000 fc8e 	bl	8007014 <_init>
 80066f8:	1b64      	subs	r4, r4, r5
 80066fa:	10a4      	asrs	r4, r4, #2
 80066fc:	2600      	movs	r6, #0
 80066fe:	42a6      	cmp	r6, r4
 8006700:	d105      	bne.n	800670e <__libc_init_array+0x2e>
 8006702:	bd70      	pop	{r4, r5, r6, pc}
 8006704:	f855 3b04 	ldr.w	r3, [r5], #4
 8006708:	4798      	blx	r3
 800670a:	3601      	adds	r6, #1
 800670c:	e7ee      	b.n	80066ec <__libc_init_array+0xc>
 800670e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006712:	4798      	blx	r3
 8006714:	3601      	adds	r6, #1
 8006716:	e7f2      	b.n	80066fe <__libc_init_array+0x1e>
 8006718:	080073fc 	.word	0x080073fc
 800671c:	080073fc 	.word	0x080073fc
 8006720:	080073fc 	.word	0x080073fc
 8006724:	08007400 	.word	0x08007400

08006728 <__retarget_lock_acquire_recursive>:
 8006728:	4770      	bx	lr

0800672a <__retarget_lock_release_recursive>:
 800672a:	4770      	bx	lr

0800672c <memcpy>:
 800672c:	440a      	add	r2, r1
 800672e:	4291      	cmp	r1, r2
 8006730:	f100 33ff 	add.w	r3, r0, #4294967295
 8006734:	d100      	bne.n	8006738 <memcpy+0xc>
 8006736:	4770      	bx	lr
 8006738:	b510      	push	{r4, lr}
 800673a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800673e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006742:	4291      	cmp	r1, r2
 8006744:	d1f9      	bne.n	800673a <memcpy+0xe>
 8006746:	bd10      	pop	{r4, pc}

08006748 <memset>:
 8006748:	4402      	add	r2, r0
 800674a:	4603      	mov	r3, r0
 800674c:	4293      	cmp	r3, r2
 800674e:	d100      	bne.n	8006752 <memset+0xa>
 8006750:	4770      	bx	lr
 8006752:	f803 1b01 	strb.w	r1, [r3], #1
 8006756:	e7f9      	b.n	800674c <memset+0x4>

08006758 <_free_r>:
 8006758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800675a:	2900      	cmp	r1, #0
 800675c:	d044      	beq.n	80067e8 <_free_r+0x90>
 800675e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006762:	9001      	str	r0, [sp, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f1a1 0404 	sub.w	r4, r1, #4
 800676a:	bfb8      	it	lt
 800676c:	18e4      	addlt	r4, r4, r3
 800676e:	f000 f903 	bl	8006978 <__malloc_lock>
 8006772:	4a1e      	ldr	r2, [pc, #120]	; (80067ec <_free_r+0x94>)
 8006774:	9801      	ldr	r0, [sp, #4]
 8006776:	6813      	ldr	r3, [r2, #0]
 8006778:	b933      	cbnz	r3, 8006788 <_free_r+0x30>
 800677a:	6063      	str	r3, [r4, #4]
 800677c:	6014      	str	r4, [r2, #0]
 800677e:	b003      	add	sp, #12
 8006780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006784:	f000 b8fe 	b.w	8006984 <__malloc_unlock>
 8006788:	42a3      	cmp	r3, r4
 800678a:	d908      	bls.n	800679e <_free_r+0x46>
 800678c:	6825      	ldr	r5, [r4, #0]
 800678e:	1961      	adds	r1, r4, r5
 8006790:	428b      	cmp	r3, r1
 8006792:	bf01      	itttt	eq
 8006794:	6819      	ldreq	r1, [r3, #0]
 8006796:	685b      	ldreq	r3, [r3, #4]
 8006798:	1949      	addeq	r1, r1, r5
 800679a:	6021      	streq	r1, [r4, #0]
 800679c:	e7ed      	b.n	800677a <_free_r+0x22>
 800679e:	461a      	mov	r2, r3
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	b10b      	cbz	r3, 80067a8 <_free_r+0x50>
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	d9fa      	bls.n	800679e <_free_r+0x46>
 80067a8:	6811      	ldr	r1, [r2, #0]
 80067aa:	1855      	adds	r5, r2, r1
 80067ac:	42a5      	cmp	r5, r4
 80067ae:	d10b      	bne.n	80067c8 <_free_r+0x70>
 80067b0:	6824      	ldr	r4, [r4, #0]
 80067b2:	4421      	add	r1, r4
 80067b4:	1854      	adds	r4, r2, r1
 80067b6:	42a3      	cmp	r3, r4
 80067b8:	6011      	str	r1, [r2, #0]
 80067ba:	d1e0      	bne.n	800677e <_free_r+0x26>
 80067bc:	681c      	ldr	r4, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	6053      	str	r3, [r2, #4]
 80067c2:	4421      	add	r1, r4
 80067c4:	6011      	str	r1, [r2, #0]
 80067c6:	e7da      	b.n	800677e <_free_r+0x26>
 80067c8:	d902      	bls.n	80067d0 <_free_r+0x78>
 80067ca:	230c      	movs	r3, #12
 80067cc:	6003      	str	r3, [r0, #0]
 80067ce:	e7d6      	b.n	800677e <_free_r+0x26>
 80067d0:	6825      	ldr	r5, [r4, #0]
 80067d2:	1961      	adds	r1, r4, r5
 80067d4:	428b      	cmp	r3, r1
 80067d6:	bf04      	itt	eq
 80067d8:	6819      	ldreq	r1, [r3, #0]
 80067da:	685b      	ldreq	r3, [r3, #4]
 80067dc:	6063      	str	r3, [r4, #4]
 80067de:	bf04      	itt	eq
 80067e0:	1949      	addeq	r1, r1, r5
 80067e2:	6021      	streq	r1, [r4, #0]
 80067e4:	6054      	str	r4, [r2, #4]
 80067e6:	e7ca      	b.n	800677e <_free_r+0x26>
 80067e8:	b003      	add	sp, #12
 80067ea:	bd30      	pop	{r4, r5, pc}
 80067ec:	20000280 	.word	0x20000280

080067f0 <sbrk_aligned>:
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	4e0e      	ldr	r6, [pc, #56]	; (800682c <sbrk_aligned+0x3c>)
 80067f4:	460c      	mov	r4, r1
 80067f6:	6831      	ldr	r1, [r6, #0]
 80067f8:	4605      	mov	r5, r0
 80067fa:	b911      	cbnz	r1, 8006802 <sbrk_aligned+0x12>
 80067fc:	f000 f88c 	bl	8006918 <_sbrk_r>
 8006800:	6030      	str	r0, [r6, #0]
 8006802:	4621      	mov	r1, r4
 8006804:	4628      	mov	r0, r5
 8006806:	f000 f887 	bl	8006918 <_sbrk_r>
 800680a:	1c43      	adds	r3, r0, #1
 800680c:	d00a      	beq.n	8006824 <sbrk_aligned+0x34>
 800680e:	1cc4      	adds	r4, r0, #3
 8006810:	f024 0403 	bic.w	r4, r4, #3
 8006814:	42a0      	cmp	r0, r4
 8006816:	d007      	beq.n	8006828 <sbrk_aligned+0x38>
 8006818:	1a21      	subs	r1, r4, r0
 800681a:	4628      	mov	r0, r5
 800681c:	f000 f87c 	bl	8006918 <_sbrk_r>
 8006820:	3001      	adds	r0, #1
 8006822:	d101      	bne.n	8006828 <sbrk_aligned+0x38>
 8006824:	f04f 34ff 	mov.w	r4, #4294967295
 8006828:	4620      	mov	r0, r4
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	20000284 	.word	0x20000284

08006830 <_malloc_r>:
 8006830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006834:	1ccd      	adds	r5, r1, #3
 8006836:	f025 0503 	bic.w	r5, r5, #3
 800683a:	3508      	adds	r5, #8
 800683c:	2d0c      	cmp	r5, #12
 800683e:	bf38      	it	cc
 8006840:	250c      	movcc	r5, #12
 8006842:	2d00      	cmp	r5, #0
 8006844:	4607      	mov	r7, r0
 8006846:	db01      	blt.n	800684c <_malloc_r+0x1c>
 8006848:	42a9      	cmp	r1, r5
 800684a:	d905      	bls.n	8006858 <_malloc_r+0x28>
 800684c:	230c      	movs	r3, #12
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	2600      	movs	r6, #0
 8006852:	4630      	mov	r0, r6
 8006854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006858:	4e2e      	ldr	r6, [pc, #184]	; (8006914 <_malloc_r+0xe4>)
 800685a:	f000 f88d 	bl	8006978 <__malloc_lock>
 800685e:	6833      	ldr	r3, [r6, #0]
 8006860:	461c      	mov	r4, r3
 8006862:	bb34      	cbnz	r4, 80068b2 <_malloc_r+0x82>
 8006864:	4629      	mov	r1, r5
 8006866:	4638      	mov	r0, r7
 8006868:	f7ff ffc2 	bl	80067f0 <sbrk_aligned>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	4604      	mov	r4, r0
 8006870:	d14d      	bne.n	800690e <_malloc_r+0xde>
 8006872:	6834      	ldr	r4, [r6, #0]
 8006874:	4626      	mov	r6, r4
 8006876:	2e00      	cmp	r6, #0
 8006878:	d140      	bne.n	80068fc <_malloc_r+0xcc>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	4631      	mov	r1, r6
 800687e:	4638      	mov	r0, r7
 8006880:	eb04 0803 	add.w	r8, r4, r3
 8006884:	f000 f848 	bl	8006918 <_sbrk_r>
 8006888:	4580      	cmp	r8, r0
 800688a:	d13a      	bne.n	8006902 <_malloc_r+0xd2>
 800688c:	6821      	ldr	r1, [r4, #0]
 800688e:	3503      	adds	r5, #3
 8006890:	1a6d      	subs	r5, r5, r1
 8006892:	f025 0503 	bic.w	r5, r5, #3
 8006896:	3508      	adds	r5, #8
 8006898:	2d0c      	cmp	r5, #12
 800689a:	bf38      	it	cc
 800689c:	250c      	movcc	r5, #12
 800689e:	4629      	mov	r1, r5
 80068a0:	4638      	mov	r0, r7
 80068a2:	f7ff ffa5 	bl	80067f0 <sbrk_aligned>
 80068a6:	3001      	adds	r0, #1
 80068a8:	d02b      	beq.n	8006902 <_malloc_r+0xd2>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	442b      	add	r3, r5
 80068ae:	6023      	str	r3, [r4, #0]
 80068b0:	e00e      	b.n	80068d0 <_malloc_r+0xa0>
 80068b2:	6822      	ldr	r2, [r4, #0]
 80068b4:	1b52      	subs	r2, r2, r5
 80068b6:	d41e      	bmi.n	80068f6 <_malloc_r+0xc6>
 80068b8:	2a0b      	cmp	r2, #11
 80068ba:	d916      	bls.n	80068ea <_malloc_r+0xba>
 80068bc:	1961      	adds	r1, r4, r5
 80068be:	42a3      	cmp	r3, r4
 80068c0:	6025      	str	r5, [r4, #0]
 80068c2:	bf18      	it	ne
 80068c4:	6059      	strne	r1, [r3, #4]
 80068c6:	6863      	ldr	r3, [r4, #4]
 80068c8:	bf08      	it	eq
 80068ca:	6031      	streq	r1, [r6, #0]
 80068cc:	5162      	str	r2, [r4, r5]
 80068ce:	604b      	str	r3, [r1, #4]
 80068d0:	4638      	mov	r0, r7
 80068d2:	f104 060b 	add.w	r6, r4, #11
 80068d6:	f000 f855 	bl	8006984 <__malloc_unlock>
 80068da:	f026 0607 	bic.w	r6, r6, #7
 80068de:	1d23      	adds	r3, r4, #4
 80068e0:	1af2      	subs	r2, r6, r3
 80068e2:	d0b6      	beq.n	8006852 <_malloc_r+0x22>
 80068e4:	1b9b      	subs	r3, r3, r6
 80068e6:	50a3      	str	r3, [r4, r2]
 80068e8:	e7b3      	b.n	8006852 <_malloc_r+0x22>
 80068ea:	6862      	ldr	r2, [r4, #4]
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	bf0c      	ite	eq
 80068f0:	6032      	streq	r2, [r6, #0]
 80068f2:	605a      	strne	r2, [r3, #4]
 80068f4:	e7ec      	b.n	80068d0 <_malloc_r+0xa0>
 80068f6:	4623      	mov	r3, r4
 80068f8:	6864      	ldr	r4, [r4, #4]
 80068fa:	e7b2      	b.n	8006862 <_malloc_r+0x32>
 80068fc:	4634      	mov	r4, r6
 80068fe:	6876      	ldr	r6, [r6, #4]
 8006900:	e7b9      	b.n	8006876 <_malloc_r+0x46>
 8006902:	230c      	movs	r3, #12
 8006904:	603b      	str	r3, [r7, #0]
 8006906:	4638      	mov	r0, r7
 8006908:	f000 f83c 	bl	8006984 <__malloc_unlock>
 800690c:	e7a1      	b.n	8006852 <_malloc_r+0x22>
 800690e:	6025      	str	r5, [r4, #0]
 8006910:	e7de      	b.n	80068d0 <_malloc_r+0xa0>
 8006912:	bf00      	nop
 8006914:	20000280 	.word	0x20000280

08006918 <_sbrk_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4d06      	ldr	r5, [pc, #24]	; (8006934 <_sbrk_r+0x1c>)
 800691c:	2300      	movs	r3, #0
 800691e:	4604      	mov	r4, r0
 8006920:	4608      	mov	r0, r1
 8006922:	602b      	str	r3, [r5, #0]
 8006924:	f7fb fde4 	bl	80024f0 <_sbrk>
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	d102      	bne.n	8006932 <_sbrk_r+0x1a>
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	b103      	cbz	r3, 8006932 <_sbrk_r+0x1a>
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	20000288 	.word	0x20000288

08006938 <siprintf>:
 8006938:	b40e      	push	{r1, r2, r3}
 800693a:	b500      	push	{lr}
 800693c:	b09c      	sub	sp, #112	; 0x70
 800693e:	ab1d      	add	r3, sp, #116	; 0x74
 8006940:	9002      	str	r0, [sp, #8]
 8006942:	9006      	str	r0, [sp, #24]
 8006944:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006948:	4809      	ldr	r0, [pc, #36]	; (8006970 <siprintf+0x38>)
 800694a:	9107      	str	r1, [sp, #28]
 800694c:	9104      	str	r1, [sp, #16]
 800694e:	4909      	ldr	r1, [pc, #36]	; (8006974 <siprintf+0x3c>)
 8006950:	f853 2b04 	ldr.w	r2, [r3], #4
 8006954:	9105      	str	r1, [sp, #20]
 8006956:	6800      	ldr	r0, [r0, #0]
 8006958:	9301      	str	r3, [sp, #4]
 800695a:	a902      	add	r1, sp, #8
 800695c:	f000 f874 	bl	8006a48 <_svfiprintf_r>
 8006960:	9b02      	ldr	r3, [sp, #8]
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	b01c      	add	sp, #112	; 0x70
 8006968:	f85d eb04 	ldr.w	lr, [sp], #4
 800696c:	b003      	add	sp, #12
 800696e:	4770      	bx	lr
 8006970:	20000030 	.word	0x20000030
 8006974:	ffff0208 	.word	0xffff0208

08006978 <__malloc_lock>:
 8006978:	4801      	ldr	r0, [pc, #4]	; (8006980 <__malloc_lock+0x8>)
 800697a:	f7ff bed5 	b.w	8006728 <__retarget_lock_acquire_recursive>
 800697e:	bf00      	nop
 8006980:	2000027c 	.word	0x2000027c

08006984 <__malloc_unlock>:
 8006984:	4801      	ldr	r0, [pc, #4]	; (800698c <__malloc_unlock+0x8>)
 8006986:	f7ff bed0 	b.w	800672a <__retarget_lock_release_recursive>
 800698a:	bf00      	nop
 800698c:	2000027c 	.word	0x2000027c

08006990 <__ssputs_r>:
 8006990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006994:	688e      	ldr	r6, [r1, #8]
 8006996:	429e      	cmp	r6, r3
 8006998:	4682      	mov	sl, r0
 800699a:	460c      	mov	r4, r1
 800699c:	4690      	mov	r8, r2
 800699e:	461f      	mov	r7, r3
 80069a0:	d838      	bhi.n	8006a14 <__ssputs_r+0x84>
 80069a2:	898a      	ldrh	r2, [r1, #12]
 80069a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069a8:	d032      	beq.n	8006a10 <__ssputs_r+0x80>
 80069aa:	6825      	ldr	r5, [r4, #0]
 80069ac:	6909      	ldr	r1, [r1, #16]
 80069ae:	eba5 0901 	sub.w	r9, r5, r1
 80069b2:	6965      	ldr	r5, [r4, #20]
 80069b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069bc:	3301      	adds	r3, #1
 80069be:	444b      	add	r3, r9
 80069c0:	106d      	asrs	r5, r5, #1
 80069c2:	429d      	cmp	r5, r3
 80069c4:	bf38      	it	cc
 80069c6:	461d      	movcc	r5, r3
 80069c8:	0553      	lsls	r3, r2, #21
 80069ca:	d531      	bpl.n	8006a30 <__ssputs_r+0xa0>
 80069cc:	4629      	mov	r1, r5
 80069ce:	f7ff ff2f 	bl	8006830 <_malloc_r>
 80069d2:	4606      	mov	r6, r0
 80069d4:	b950      	cbnz	r0, 80069ec <__ssputs_r+0x5c>
 80069d6:	230c      	movs	r3, #12
 80069d8:	f8ca 3000 	str.w	r3, [sl]
 80069dc:	89a3      	ldrh	r3, [r4, #12]
 80069de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069e2:	81a3      	strh	r3, [r4, #12]
 80069e4:	f04f 30ff 	mov.w	r0, #4294967295
 80069e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ec:	6921      	ldr	r1, [r4, #16]
 80069ee:	464a      	mov	r2, r9
 80069f0:	f7ff fe9c 	bl	800672c <memcpy>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	6126      	str	r6, [r4, #16]
 8006a02:	6165      	str	r5, [r4, #20]
 8006a04:	444e      	add	r6, r9
 8006a06:	eba5 0509 	sub.w	r5, r5, r9
 8006a0a:	6026      	str	r6, [r4, #0]
 8006a0c:	60a5      	str	r5, [r4, #8]
 8006a0e:	463e      	mov	r6, r7
 8006a10:	42be      	cmp	r6, r7
 8006a12:	d900      	bls.n	8006a16 <__ssputs_r+0x86>
 8006a14:	463e      	mov	r6, r7
 8006a16:	6820      	ldr	r0, [r4, #0]
 8006a18:	4632      	mov	r2, r6
 8006a1a:	4641      	mov	r1, r8
 8006a1c:	f000 faa8 	bl	8006f70 <memmove>
 8006a20:	68a3      	ldr	r3, [r4, #8]
 8006a22:	1b9b      	subs	r3, r3, r6
 8006a24:	60a3      	str	r3, [r4, #8]
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	4433      	add	r3, r6
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	e7db      	b.n	80069e8 <__ssputs_r+0x58>
 8006a30:	462a      	mov	r2, r5
 8006a32:	f000 fab7 	bl	8006fa4 <_realloc_r>
 8006a36:	4606      	mov	r6, r0
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d1e1      	bne.n	8006a00 <__ssputs_r+0x70>
 8006a3c:	6921      	ldr	r1, [r4, #16]
 8006a3e:	4650      	mov	r0, sl
 8006a40:	f7ff fe8a 	bl	8006758 <_free_r>
 8006a44:	e7c7      	b.n	80069d6 <__ssputs_r+0x46>
	...

08006a48 <_svfiprintf_r>:
 8006a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	4698      	mov	r8, r3
 8006a4e:	898b      	ldrh	r3, [r1, #12]
 8006a50:	061b      	lsls	r3, r3, #24
 8006a52:	b09d      	sub	sp, #116	; 0x74
 8006a54:	4607      	mov	r7, r0
 8006a56:	460d      	mov	r5, r1
 8006a58:	4614      	mov	r4, r2
 8006a5a:	d50e      	bpl.n	8006a7a <_svfiprintf_r+0x32>
 8006a5c:	690b      	ldr	r3, [r1, #16]
 8006a5e:	b963      	cbnz	r3, 8006a7a <_svfiprintf_r+0x32>
 8006a60:	2140      	movs	r1, #64	; 0x40
 8006a62:	f7ff fee5 	bl	8006830 <_malloc_r>
 8006a66:	6028      	str	r0, [r5, #0]
 8006a68:	6128      	str	r0, [r5, #16]
 8006a6a:	b920      	cbnz	r0, 8006a76 <_svfiprintf_r+0x2e>
 8006a6c:	230c      	movs	r3, #12
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	e0d1      	b.n	8006c1a <_svfiprintf_r+0x1d2>
 8006a76:	2340      	movs	r3, #64	; 0x40
 8006a78:	616b      	str	r3, [r5, #20]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a7e:	2320      	movs	r3, #32
 8006a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a88:	2330      	movs	r3, #48	; 0x30
 8006a8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c34 <_svfiprintf_r+0x1ec>
 8006a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a92:	f04f 0901 	mov.w	r9, #1
 8006a96:	4623      	mov	r3, r4
 8006a98:	469a      	mov	sl, r3
 8006a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a9e:	b10a      	cbz	r2, 8006aa4 <_svfiprintf_r+0x5c>
 8006aa0:	2a25      	cmp	r2, #37	; 0x25
 8006aa2:	d1f9      	bne.n	8006a98 <_svfiprintf_r+0x50>
 8006aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8006aa8:	d00b      	beq.n	8006ac2 <_svfiprintf_r+0x7a>
 8006aaa:	465b      	mov	r3, fp
 8006aac:	4622      	mov	r2, r4
 8006aae:	4629      	mov	r1, r5
 8006ab0:	4638      	mov	r0, r7
 8006ab2:	f7ff ff6d 	bl	8006990 <__ssputs_r>
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f000 80aa 	beq.w	8006c10 <_svfiprintf_r+0x1c8>
 8006abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006abe:	445a      	add	r2, fp
 8006ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 80a2 	beq.w	8006c10 <_svfiprintf_r+0x1c8>
 8006acc:	2300      	movs	r3, #0
 8006ace:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ad6:	f10a 0a01 	add.w	sl, sl, #1
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	9307      	str	r3, [sp, #28]
 8006ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ae4:	4654      	mov	r4, sl
 8006ae6:	2205      	movs	r2, #5
 8006ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aec:	4851      	ldr	r0, [pc, #324]	; (8006c34 <_svfiprintf_r+0x1ec>)
 8006aee:	f7f9 fb7f 	bl	80001f0 <memchr>
 8006af2:	9a04      	ldr	r2, [sp, #16]
 8006af4:	b9d8      	cbnz	r0, 8006b2e <_svfiprintf_r+0xe6>
 8006af6:	06d0      	lsls	r0, r2, #27
 8006af8:	bf44      	itt	mi
 8006afa:	2320      	movmi	r3, #32
 8006afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b00:	0711      	lsls	r1, r2, #28
 8006b02:	bf44      	itt	mi
 8006b04:	232b      	movmi	r3, #43	; 0x2b
 8006b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b10:	d015      	beq.n	8006b3e <_svfiprintf_r+0xf6>
 8006b12:	9a07      	ldr	r2, [sp, #28]
 8006b14:	4654      	mov	r4, sl
 8006b16:	2000      	movs	r0, #0
 8006b18:	f04f 0c0a 	mov.w	ip, #10
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b22:	3b30      	subs	r3, #48	; 0x30
 8006b24:	2b09      	cmp	r3, #9
 8006b26:	d94e      	bls.n	8006bc6 <_svfiprintf_r+0x17e>
 8006b28:	b1b0      	cbz	r0, 8006b58 <_svfiprintf_r+0x110>
 8006b2a:	9207      	str	r2, [sp, #28]
 8006b2c:	e014      	b.n	8006b58 <_svfiprintf_r+0x110>
 8006b2e:	eba0 0308 	sub.w	r3, r0, r8
 8006b32:	fa09 f303 	lsl.w	r3, r9, r3
 8006b36:	4313      	orrs	r3, r2
 8006b38:	9304      	str	r3, [sp, #16]
 8006b3a:	46a2      	mov	sl, r4
 8006b3c:	e7d2      	b.n	8006ae4 <_svfiprintf_r+0x9c>
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	1d19      	adds	r1, r3, #4
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	9103      	str	r1, [sp, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bfbb      	ittet	lt
 8006b4a:	425b      	neglt	r3, r3
 8006b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8006b50:	9307      	strge	r3, [sp, #28]
 8006b52:	9307      	strlt	r3, [sp, #28]
 8006b54:	bfb8      	it	lt
 8006b56:	9204      	strlt	r2, [sp, #16]
 8006b58:	7823      	ldrb	r3, [r4, #0]
 8006b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8006b5c:	d10c      	bne.n	8006b78 <_svfiprintf_r+0x130>
 8006b5e:	7863      	ldrb	r3, [r4, #1]
 8006b60:	2b2a      	cmp	r3, #42	; 0x2a
 8006b62:	d135      	bne.n	8006bd0 <_svfiprintf_r+0x188>
 8006b64:	9b03      	ldr	r3, [sp, #12]
 8006b66:	1d1a      	adds	r2, r3, #4
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	9203      	str	r2, [sp, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	bfb8      	it	lt
 8006b70:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b74:	3402      	adds	r4, #2
 8006b76:	9305      	str	r3, [sp, #20]
 8006b78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c44 <_svfiprintf_r+0x1fc>
 8006b7c:	7821      	ldrb	r1, [r4, #0]
 8006b7e:	2203      	movs	r2, #3
 8006b80:	4650      	mov	r0, sl
 8006b82:	f7f9 fb35 	bl	80001f0 <memchr>
 8006b86:	b140      	cbz	r0, 8006b9a <_svfiprintf_r+0x152>
 8006b88:	2340      	movs	r3, #64	; 0x40
 8006b8a:	eba0 000a 	sub.w	r0, r0, sl
 8006b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b92:	9b04      	ldr	r3, [sp, #16]
 8006b94:	4303      	orrs	r3, r0
 8006b96:	3401      	adds	r4, #1
 8006b98:	9304      	str	r3, [sp, #16]
 8006b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9e:	4826      	ldr	r0, [pc, #152]	; (8006c38 <_svfiprintf_r+0x1f0>)
 8006ba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ba4:	2206      	movs	r2, #6
 8006ba6:	f7f9 fb23 	bl	80001f0 <memchr>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d038      	beq.n	8006c20 <_svfiprintf_r+0x1d8>
 8006bae:	4b23      	ldr	r3, [pc, #140]	; (8006c3c <_svfiprintf_r+0x1f4>)
 8006bb0:	bb1b      	cbnz	r3, 8006bfa <_svfiprintf_r+0x1b2>
 8006bb2:	9b03      	ldr	r3, [sp, #12]
 8006bb4:	3307      	adds	r3, #7
 8006bb6:	f023 0307 	bic.w	r3, r3, #7
 8006bba:	3308      	adds	r3, #8
 8006bbc:	9303      	str	r3, [sp, #12]
 8006bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc0:	4433      	add	r3, r6
 8006bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc4:	e767      	b.n	8006a96 <_svfiprintf_r+0x4e>
 8006bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bca:	460c      	mov	r4, r1
 8006bcc:	2001      	movs	r0, #1
 8006bce:	e7a5      	b.n	8006b1c <_svfiprintf_r+0xd4>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	3401      	adds	r4, #1
 8006bd4:	9305      	str	r3, [sp, #20]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	f04f 0c0a 	mov.w	ip, #10
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006be2:	3a30      	subs	r2, #48	; 0x30
 8006be4:	2a09      	cmp	r2, #9
 8006be6:	d903      	bls.n	8006bf0 <_svfiprintf_r+0x1a8>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0c5      	beq.n	8006b78 <_svfiprintf_r+0x130>
 8006bec:	9105      	str	r1, [sp, #20]
 8006bee:	e7c3      	b.n	8006b78 <_svfiprintf_r+0x130>
 8006bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e7f0      	b.n	8006bdc <_svfiprintf_r+0x194>
 8006bfa:	ab03      	add	r3, sp, #12
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	462a      	mov	r2, r5
 8006c00:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <_svfiprintf_r+0x1f8>)
 8006c02:	a904      	add	r1, sp, #16
 8006c04:	4638      	mov	r0, r7
 8006c06:	f3af 8000 	nop.w
 8006c0a:	1c42      	adds	r2, r0, #1
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	d1d6      	bne.n	8006bbe <_svfiprintf_r+0x176>
 8006c10:	89ab      	ldrh	r3, [r5, #12]
 8006c12:	065b      	lsls	r3, r3, #25
 8006c14:	f53f af2c 	bmi.w	8006a70 <_svfiprintf_r+0x28>
 8006c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c1a:	b01d      	add	sp, #116	; 0x74
 8006c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	ab03      	add	r3, sp, #12
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	462a      	mov	r2, r5
 8006c26:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <_svfiprintf_r+0x1f8>)
 8006c28:	a904      	add	r1, sp, #16
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	f000 f87a 	bl	8006d24 <_printf_i>
 8006c30:	e7eb      	b.n	8006c0a <_svfiprintf_r+0x1c2>
 8006c32:	bf00      	nop
 8006c34:	080073c0 	.word	0x080073c0
 8006c38:	080073ca 	.word	0x080073ca
 8006c3c:	00000000 	.word	0x00000000
 8006c40:	08006991 	.word	0x08006991
 8006c44:	080073c6 	.word	0x080073c6

08006c48 <_printf_common>:
 8006c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c4c:	4616      	mov	r6, r2
 8006c4e:	4699      	mov	r9, r3
 8006c50:	688a      	ldr	r2, [r1, #8]
 8006c52:	690b      	ldr	r3, [r1, #16]
 8006c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	bfb8      	it	lt
 8006c5c:	4613      	movlt	r3, r2
 8006c5e:	6033      	str	r3, [r6, #0]
 8006c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c64:	4607      	mov	r7, r0
 8006c66:	460c      	mov	r4, r1
 8006c68:	b10a      	cbz	r2, 8006c6e <_printf_common+0x26>
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	6033      	str	r3, [r6, #0]
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	0699      	lsls	r1, r3, #26
 8006c72:	bf42      	ittt	mi
 8006c74:	6833      	ldrmi	r3, [r6, #0]
 8006c76:	3302      	addmi	r3, #2
 8006c78:	6033      	strmi	r3, [r6, #0]
 8006c7a:	6825      	ldr	r5, [r4, #0]
 8006c7c:	f015 0506 	ands.w	r5, r5, #6
 8006c80:	d106      	bne.n	8006c90 <_printf_common+0x48>
 8006c82:	f104 0a19 	add.w	sl, r4, #25
 8006c86:	68e3      	ldr	r3, [r4, #12]
 8006c88:	6832      	ldr	r2, [r6, #0]
 8006c8a:	1a9b      	subs	r3, r3, r2
 8006c8c:	42ab      	cmp	r3, r5
 8006c8e:	dc26      	bgt.n	8006cde <_printf_common+0x96>
 8006c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c94:	1e13      	subs	r3, r2, #0
 8006c96:	6822      	ldr	r2, [r4, #0]
 8006c98:	bf18      	it	ne
 8006c9a:	2301      	movne	r3, #1
 8006c9c:	0692      	lsls	r2, r2, #26
 8006c9e:	d42b      	bmi.n	8006cf8 <_printf_common+0xb0>
 8006ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	47c0      	blx	r8
 8006caa:	3001      	adds	r0, #1
 8006cac:	d01e      	beq.n	8006cec <_printf_common+0xa4>
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	68e5      	ldr	r5, [r4, #12]
 8006cb2:	6832      	ldr	r2, [r6, #0]
 8006cb4:	f003 0306 	and.w	r3, r3, #6
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	bf08      	it	eq
 8006cbc:	1aad      	subeq	r5, r5, r2
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	6922      	ldr	r2, [r4, #16]
 8006cc2:	bf0c      	ite	eq
 8006cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cc8:	2500      	movne	r5, #0
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	bfc4      	itt	gt
 8006cce:	1a9b      	subgt	r3, r3, r2
 8006cd0:	18ed      	addgt	r5, r5, r3
 8006cd2:	2600      	movs	r6, #0
 8006cd4:	341a      	adds	r4, #26
 8006cd6:	42b5      	cmp	r5, r6
 8006cd8:	d11a      	bne.n	8006d10 <_printf_common+0xc8>
 8006cda:	2000      	movs	r0, #0
 8006cdc:	e008      	b.n	8006cf0 <_printf_common+0xa8>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4652      	mov	r2, sl
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	47c0      	blx	r8
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d103      	bne.n	8006cf4 <_printf_common+0xac>
 8006cec:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf4:	3501      	adds	r5, #1
 8006cf6:	e7c6      	b.n	8006c86 <_printf_common+0x3e>
 8006cf8:	18e1      	adds	r1, r4, r3
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	2030      	movs	r0, #48	; 0x30
 8006cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d02:	4422      	add	r2, r4
 8006d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	e7c7      	b.n	8006ca0 <_printf_common+0x58>
 8006d10:	2301      	movs	r3, #1
 8006d12:	4622      	mov	r2, r4
 8006d14:	4649      	mov	r1, r9
 8006d16:	4638      	mov	r0, r7
 8006d18:	47c0      	blx	r8
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	d0e6      	beq.n	8006cec <_printf_common+0xa4>
 8006d1e:	3601      	adds	r6, #1
 8006d20:	e7d9      	b.n	8006cd6 <_printf_common+0x8e>
	...

08006d24 <_printf_i>:
 8006d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d28:	7e0f      	ldrb	r7, [r1, #24]
 8006d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d2c:	2f78      	cmp	r7, #120	; 0x78
 8006d2e:	4691      	mov	r9, r2
 8006d30:	4680      	mov	r8, r0
 8006d32:	460c      	mov	r4, r1
 8006d34:	469a      	mov	sl, r3
 8006d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d3a:	d807      	bhi.n	8006d4c <_printf_i+0x28>
 8006d3c:	2f62      	cmp	r7, #98	; 0x62
 8006d3e:	d80a      	bhi.n	8006d56 <_printf_i+0x32>
 8006d40:	2f00      	cmp	r7, #0
 8006d42:	f000 80d8 	beq.w	8006ef6 <_printf_i+0x1d2>
 8006d46:	2f58      	cmp	r7, #88	; 0x58
 8006d48:	f000 80a3 	beq.w	8006e92 <_printf_i+0x16e>
 8006d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d54:	e03a      	b.n	8006dcc <_printf_i+0xa8>
 8006d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d5a:	2b15      	cmp	r3, #21
 8006d5c:	d8f6      	bhi.n	8006d4c <_printf_i+0x28>
 8006d5e:	a101      	add	r1, pc, #4	; (adr r1, 8006d64 <_printf_i+0x40>)
 8006d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d64:	08006dbd 	.word	0x08006dbd
 8006d68:	08006dd1 	.word	0x08006dd1
 8006d6c:	08006d4d 	.word	0x08006d4d
 8006d70:	08006d4d 	.word	0x08006d4d
 8006d74:	08006d4d 	.word	0x08006d4d
 8006d78:	08006d4d 	.word	0x08006d4d
 8006d7c:	08006dd1 	.word	0x08006dd1
 8006d80:	08006d4d 	.word	0x08006d4d
 8006d84:	08006d4d 	.word	0x08006d4d
 8006d88:	08006d4d 	.word	0x08006d4d
 8006d8c:	08006d4d 	.word	0x08006d4d
 8006d90:	08006edd 	.word	0x08006edd
 8006d94:	08006e01 	.word	0x08006e01
 8006d98:	08006ebf 	.word	0x08006ebf
 8006d9c:	08006d4d 	.word	0x08006d4d
 8006da0:	08006d4d 	.word	0x08006d4d
 8006da4:	08006eff 	.word	0x08006eff
 8006da8:	08006d4d 	.word	0x08006d4d
 8006dac:	08006e01 	.word	0x08006e01
 8006db0:	08006d4d 	.word	0x08006d4d
 8006db4:	08006d4d 	.word	0x08006d4d
 8006db8:	08006ec7 	.word	0x08006ec7
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	1d1a      	adds	r2, r3, #4
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	602a      	str	r2, [r5, #0]
 8006dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0a3      	b.n	8006f18 <_printf_i+0x1f4>
 8006dd0:	6820      	ldr	r0, [r4, #0]
 8006dd2:	6829      	ldr	r1, [r5, #0]
 8006dd4:	0606      	lsls	r6, r0, #24
 8006dd6:	f101 0304 	add.w	r3, r1, #4
 8006dda:	d50a      	bpl.n	8006df2 <_printf_i+0xce>
 8006ddc:	680e      	ldr	r6, [r1, #0]
 8006dde:	602b      	str	r3, [r5, #0]
 8006de0:	2e00      	cmp	r6, #0
 8006de2:	da03      	bge.n	8006dec <_printf_i+0xc8>
 8006de4:	232d      	movs	r3, #45	; 0x2d
 8006de6:	4276      	negs	r6, r6
 8006de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dec:	485e      	ldr	r0, [pc, #376]	; (8006f68 <_printf_i+0x244>)
 8006dee:	230a      	movs	r3, #10
 8006df0:	e019      	b.n	8006e26 <_printf_i+0x102>
 8006df2:	680e      	ldr	r6, [r1, #0]
 8006df4:	602b      	str	r3, [r5, #0]
 8006df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006dfa:	bf18      	it	ne
 8006dfc:	b236      	sxthne	r6, r6
 8006dfe:	e7ef      	b.n	8006de0 <_printf_i+0xbc>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	6820      	ldr	r0, [r4, #0]
 8006e04:	1d19      	adds	r1, r3, #4
 8006e06:	6029      	str	r1, [r5, #0]
 8006e08:	0601      	lsls	r1, r0, #24
 8006e0a:	d501      	bpl.n	8006e10 <_printf_i+0xec>
 8006e0c:	681e      	ldr	r6, [r3, #0]
 8006e0e:	e002      	b.n	8006e16 <_printf_i+0xf2>
 8006e10:	0646      	lsls	r6, r0, #25
 8006e12:	d5fb      	bpl.n	8006e0c <_printf_i+0xe8>
 8006e14:	881e      	ldrh	r6, [r3, #0]
 8006e16:	4854      	ldr	r0, [pc, #336]	; (8006f68 <_printf_i+0x244>)
 8006e18:	2f6f      	cmp	r7, #111	; 0x6f
 8006e1a:	bf0c      	ite	eq
 8006e1c:	2308      	moveq	r3, #8
 8006e1e:	230a      	movne	r3, #10
 8006e20:	2100      	movs	r1, #0
 8006e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e26:	6865      	ldr	r5, [r4, #4]
 8006e28:	60a5      	str	r5, [r4, #8]
 8006e2a:	2d00      	cmp	r5, #0
 8006e2c:	bfa2      	ittt	ge
 8006e2e:	6821      	ldrge	r1, [r4, #0]
 8006e30:	f021 0104 	bicge.w	r1, r1, #4
 8006e34:	6021      	strge	r1, [r4, #0]
 8006e36:	b90e      	cbnz	r6, 8006e3c <_printf_i+0x118>
 8006e38:	2d00      	cmp	r5, #0
 8006e3a:	d04d      	beq.n	8006ed8 <_printf_i+0x1b4>
 8006e3c:	4615      	mov	r5, r2
 8006e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e42:	fb03 6711 	mls	r7, r3, r1, r6
 8006e46:	5dc7      	ldrb	r7, [r0, r7]
 8006e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e4c:	4637      	mov	r7, r6
 8006e4e:	42bb      	cmp	r3, r7
 8006e50:	460e      	mov	r6, r1
 8006e52:	d9f4      	bls.n	8006e3e <_printf_i+0x11a>
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d10b      	bne.n	8006e70 <_printf_i+0x14c>
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	07de      	lsls	r6, r3, #31
 8006e5c:	d508      	bpl.n	8006e70 <_printf_i+0x14c>
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	6861      	ldr	r1, [r4, #4]
 8006e62:	4299      	cmp	r1, r3
 8006e64:	bfde      	ittt	le
 8006e66:	2330      	movle	r3, #48	; 0x30
 8006e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e70:	1b52      	subs	r2, r2, r5
 8006e72:	6122      	str	r2, [r4, #16]
 8006e74:	f8cd a000 	str.w	sl, [sp]
 8006e78:	464b      	mov	r3, r9
 8006e7a:	aa03      	add	r2, sp, #12
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4640      	mov	r0, r8
 8006e80:	f7ff fee2 	bl	8006c48 <_printf_common>
 8006e84:	3001      	adds	r0, #1
 8006e86:	d14c      	bne.n	8006f22 <_printf_i+0x1fe>
 8006e88:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8c:	b004      	add	sp, #16
 8006e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e92:	4835      	ldr	r0, [pc, #212]	; (8006f68 <_printf_i+0x244>)
 8006e94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e98:	6829      	ldr	r1, [r5, #0]
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ea0:	6029      	str	r1, [r5, #0]
 8006ea2:	061d      	lsls	r5, r3, #24
 8006ea4:	d514      	bpl.n	8006ed0 <_printf_i+0x1ac>
 8006ea6:	07df      	lsls	r7, r3, #31
 8006ea8:	bf44      	itt	mi
 8006eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8006eae:	6023      	strmi	r3, [r4, #0]
 8006eb0:	b91e      	cbnz	r6, 8006eba <_printf_i+0x196>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	f023 0320 	bic.w	r3, r3, #32
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	2310      	movs	r3, #16
 8006ebc:	e7b0      	b.n	8006e20 <_printf_i+0xfc>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	f043 0320 	orr.w	r3, r3, #32
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	2378      	movs	r3, #120	; 0x78
 8006ec8:	4828      	ldr	r0, [pc, #160]	; (8006f6c <_printf_i+0x248>)
 8006eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ece:	e7e3      	b.n	8006e98 <_printf_i+0x174>
 8006ed0:	0659      	lsls	r1, r3, #25
 8006ed2:	bf48      	it	mi
 8006ed4:	b2b6      	uxthmi	r6, r6
 8006ed6:	e7e6      	b.n	8006ea6 <_printf_i+0x182>
 8006ed8:	4615      	mov	r5, r2
 8006eda:	e7bb      	b.n	8006e54 <_printf_i+0x130>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	6826      	ldr	r6, [r4, #0]
 8006ee0:	6961      	ldr	r1, [r4, #20]
 8006ee2:	1d18      	adds	r0, r3, #4
 8006ee4:	6028      	str	r0, [r5, #0]
 8006ee6:	0635      	lsls	r5, r6, #24
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	d501      	bpl.n	8006ef0 <_printf_i+0x1cc>
 8006eec:	6019      	str	r1, [r3, #0]
 8006eee:	e002      	b.n	8006ef6 <_printf_i+0x1d2>
 8006ef0:	0670      	lsls	r0, r6, #25
 8006ef2:	d5fb      	bpl.n	8006eec <_printf_i+0x1c8>
 8006ef4:	8019      	strh	r1, [r3, #0]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	6123      	str	r3, [r4, #16]
 8006efa:	4615      	mov	r5, r2
 8006efc:	e7ba      	b.n	8006e74 <_printf_i+0x150>
 8006efe:	682b      	ldr	r3, [r5, #0]
 8006f00:	1d1a      	adds	r2, r3, #4
 8006f02:	602a      	str	r2, [r5, #0]
 8006f04:	681d      	ldr	r5, [r3, #0]
 8006f06:	6862      	ldr	r2, [r4, #4]
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f7f9 f970 	bl	80001f0 <memchr>
 8006f10:	b108      	cbz	r0, 8006f16 <_printf_i+0x1f2>
 8006f12:	1b40      	subs	r0, r0, r5
 8006f14:	6060      	str	r0, [r4, #4]
 8006f16:	6863      	ldr	r3, [r4, #4]
 8006f18:	6123      	str	r3, [r4, #16]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f20:	e7a8      	b.n	8006e74 <_printf_i+0x150>
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	462a      	mov	r2, r5
 8006f26:	4649      	mov	r1, r9
 8006f28:	4640      	mov	r0, r8
 8006f2a:	47d0      	blx	sl
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d0ab      	beq.n	8006e88 <_printf_i+0x164>
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	079b      	lsls	r3, r3, #30
 8006f34:	d413      	bmi.n	8006f5e <_printf_i+0x23a>
 8006f36:	68e0      	ldr	r0, [r4, #12]
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	4298      	cmp	r0, r3
 8006f3c:	bfb8      	it	lt
 8006f3e:	4618      	movlt	r0, r3
 8006f40:	e7a4      	b.n	8006e8c <_printf_i+0x168>
 8006f42:	2301      	movs	r3, #1
 8006f44:	4632      	mov	r2, r6
 8006f46:	4649      	mov	r1, r9
 8006f48:	4640      	mov	r0, r8
 8006f4a:	47d0      	blx	sl
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d09b      	beq.n	8006e88 <_printf_i+0x164>
 8006f50:	3501      	adds	r5, #1
 8006f52:	68e3      	ldr	r3, [r4, #12]
 8006f54:	9903      	ldr	r1, [sp, #12]
 8006f56:	1a5b      	subs	r3, r3, r1
 8006f58:	42ab      	cmp	r3, r5
 8006f5a:	dcf2      	bgt.n	8006f42 <_printf_i+0x21e>
 8006f5c:	e7eb      	b.n	8006f36 <_printf_i+0x212>
 8006f5e:	2500      	movs	r5, #0
 8006f60:	f104 0619 	add.w	r6, r4, #25
 8006f64:	e7f5      	b.n	8006f52 <_printf_i+0x22e>
 8006f66:	bf00      	nop
 8006f68:	080073d1 	.word	0x080073d1
 8006f6c:	080073e2 	.word	0x080073e2

08006f70 <memmove>:
 8006f70:	4288      	cmp	r0, r1
 8006f72:	b510      	push	{r4, lr}
 8006f74:	eb01 0402 	add.w	r4, r1, r2
 8006f78:	d902      	bls.n	8006f80 <memmove+0x10>
 8006f7a:	4284      	cmp	r4, r0
 8006f7c:	4623      	mov	r3, r4
 8006f7e:	d807      	bhi.n	8006f90 <memmove+0x20>
 8006f80:	1e43      	subs	r3, r0, #1
 8006f82:	42a1      	cmp	r1, r4
 8006f84:	d008      	beq.n	8006f98 <memmove+0x28>
 8006f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f8e:	e7f8      	b.n	8006f82 <memmove+0x12>
 8006f90:	4402      	add	r2, r0
 8006f92:	4601      	mov	r1, r0
 8006f94:	428a      	cmp	r2, r1
 8006f96:	d100      	bne.n	8006f9a <memmove+0x2a>
 8006f98:	bd10      	pop	{r4, pc}
 8006f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fa2:	e7f7      	b.n	8006f94 <memmove+0x24>

08006fa4 <_realloc_r>:
 8006fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa8:	4680      	mov	r8, r0
 8006faa:	4614      	mov	r4, r2
 8006fac:	460e      	mov	r6, r1
 8006fae:	b921      	cbnz	r1, 8006fba <_realloc_r+0x16>
 8006fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	f7ff bc3b 	b.w	8006830 <_malloc_r>
 8006fba:	b92a      	cbnz	r2, 8006fc8 <_realloc_r+0x24>
 8006fbc:	f7ff fbcc 	bl	8006758 <_free_r>
 8006fc0:	4625      	mov	r5, r4
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc8:	f000 f81b 	bl	8007002 <_malloc_usable_size_r>
 8006fcc:	4284      	cmp	r4, r0
 8006fce:	4607      	mov	r7, r0
 8006fd0:	d802      	bhi.n	8006fd8 <_realloc_r+0x34>
 8006fd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fd6:	d812      	bhi.n	8006ffe <_realloc_r+0x5a>
 8006fd8:	4621      	mov	r1, r4
 8006fda:	4640      	mov	r0, r8
 8006fdc:	f7ff fc28 	bl	8006830 <_malloc_r>
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d0ed      	beq.n	8006fc2 <_realloc_r+0x1e>
 8006fe6:	42bc      	cmp	r4, r7
 8006fe8:	4622      	mov	r2, r4
 8006fea:	4631      	mov	r1, r6
 8006fec:	bf28      	it	cs
 8006fee:	463a      	movcs	r2, r7
 8006ff0:	f7ff fb9c 	bl	800672c <memcpy>
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	f7ff fbae 	bl	8006758 <_free_r>
 8006ffc:	e7e1      	b.n	8006fc2 <_realloc_r+0x1e>
 8006ffe:	4635      	mov	r5, r6
 8007000:	e7df      	b.n	8006fc2 <_realloc_r+0x1e>

08007002 <_malloc_usable_size_r>:
 8007002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007006:	1f18      	subs	r0, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	bfbc      	itt	lt
 800700c:	580b      	ldrlt	r3, [r1, r0]
 800700e:	18c0      	addlt	r0, r0, r3
 8007010:	4770      	bx	lr
	...

08007014 <_init>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	bf00      	nop
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr

08007020 <_fini>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr
