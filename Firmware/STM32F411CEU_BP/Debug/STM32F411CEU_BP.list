
STM32F411CEU_BP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d2c  0800fe60  0800fe60  0001fe60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b8c  08010b8c  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010b8c  08010b8c  00020b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b94  08010b94  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b94  08010b94  00020b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b98  08010b98  00020b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08010b9c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000970  200001d8  08010d74  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  08010d74  00030b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d36e  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ab3  00000000  00000000  0004d576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  00052030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  00053ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e706  00000000  00000000  00055320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024026  00000000  00000000  00073a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000963fb  00000000  00000000  00097a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012de47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007930  00000000  00000000  0012de98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fe48 	.word	0x0800fe48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800fe48 	.word	0x0800fe48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <eraseStateMachine>:
        unsigned char menuState;
//        struct dataInsert menuInsert;
    };

unsigned char eraseStateMachine(struct Menu* subMenu)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuErase = subMenu;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	613b      	str	r3, [r7, #16]
    unsigned char key = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	75fb      	strb	r3, [r7, #23]
    unsigned char index = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	72fb      	strb	r3, [r7, #11]
    unsigned char displayUpdateStatus = IDDLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	72bb      	strb	r3, [r7, #10]
    //unsigned char cursorPosition[2] = {0,0};
    unsigned char* ptr_eraseString;
    while(key != MENU)
 8000ee4:	e08d      	b.n	8001002 <eraseStateMachine+0x136>
    {
        switch(subMenuErase->menuState)
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	78db      	ldrb	r3, [r3, #3]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d077      	beq.n	8000fde <eraseStateMachine+0x112>
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	f300 8087 	bgt.w	8001002 <eraseStateMachine+0x136>
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <eraseStateMachine+0x32>
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d008      	beq.n	8000f0e <eraseStateMachine+0x42>
 8000efc:	e081      	b.n	8001002 <eraseStateMachine+0x136>
        {
            case IDDLE:
                subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f003 fe02 	bl	8004b08 <getNextSub>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	70da      	strb	r2, [r3, #3]
            break;
 8000f0c:	e079      	b.n	8001002 <eraseStateMachine+0x136>

            case VERFICA_APAGAR:
                updateUserMsg(0,USERMSG1,eraseselectUserMsg,&displayUpdateStatus);
 8000f0e:	4b41      	ldr	r3, [pc, #260]	; (8001014 <eraseStateMachine+0x148>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f107 030a 	add.w	r3, r7, #10
 8000f16:	2100      	movs	r1, #0
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f001 ff73 	bl	8002e04 <updateUserMsg>
                ptr_eraseString = getEraseTestString();
 8000f1e:	f001 fcb3 	bl	8002888 <getEraseTestString>
 8000f22:	60f8      	str	r0, [r7, #12]
                HW_PRINT_DATA(0,INSERTMSG,ptr_eraseString);
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	2102      	movs	r1, #2
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f002 fec7 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8000f2e:	4b3a      	ldr	r3, [pc, #232]	; (8001018 <eraseStateMachine+0x14c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	2103      	movs	r1, #3
 8000f36:	2000      	movs	r0, #0
 8000f38:	f002 fec0 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8000f3c:	4b36      	ldr	r3, [pc, #216]	; (8001018 <eraseStateMachine+0x14c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fb1f 	bl	8002584 <stringLenght>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	4b34      	ldr	r3, [pc, #208]	; (800101c <eraseStateMachine+0x150>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	2103      	movs	r1, #3
 8000f52:	f002 feb3 	bl	8003cbc <HW_PRINT_DATA>

                key = getKeyPressed();
 8000f56:	f004 fbbb 	bl	80056d0 <getKeyPressed>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	75fb      	strb	r3, [r7, #23]

                if(key == INSERIR)
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
 8000f60:	2b49      	cmp	r3, #73	; 0x49
 8000f62:	d10e      	bne.n	8000f82 <eraseStateMachine+0xb6>
                {
                	resetKeyPressed();
 8000f64:	f004 fbc0 	bl	80056e8 <resetKeyPressed>
                    setUserErase(&index);
 8000f68:	f107 030b 	add.w	r3, r7, #11
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fcef 	bl	8002950 <setUserErase>
                    subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f003 fdc8 	bl	8004b08 <getNextSub>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	70da      	strb	r2, [r3, #3]
 8000f80:	e03f      	b.n	8001002 <eraseStateMachine+0x136>
                }
                else if(key == CONFIRMAR)
 8000f82:	7dfb      	ldrb	r3, [r7, #23]
 8000f84:	2b43      	cmp	r3, #67	; 0x43
 8000f86:	d13c      	bne.n	8001002 <eraseStateMachine+0x136>
                {
                	resetKeyPressed();
 8000f88:	f004 fbae 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8000f8c:	f107 030a 	add.w	r3, r7, #10
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 ff52 	bl	8002e3a <readyUserInterface>
                    if(*ptr_eraseString == '5')
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b35      	cmp	r3, #53	; 0x35
 8000f9c:	d111      	bne.n	8000fc2 <eraseStateMachine+0xf6>
                    {
                        updateUserMsg(3,2,erasingUserMsg,&displayUpdateStatus);
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <eraseStateMachine+0x154>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	f107 030a 	add.w	r3, r7, #10
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f001 ff2b 	bl	8002e04 <updateUserMsg>
                        resetMyResults();
 8000fae:	f001 f9fb 	bl	80023a8 <resetMyResults>
                        //subMenuErase->menuSelect = setSelectSub(&subMenuErase->menuState);
                        subMenuErase->menuState = getNextSub(CONFIRMA_APAGAR);
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f003 fda8 	bl	8004b08 <getNextSub>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	70da      	strb	r2, [r3, #3]
 8000fc0:	e01f      	b.n	8001002 <eraseStateMachine+0x136>
                    }
                    else if(*ptr_eraseString == '2')
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b32      	cmp	r3, #50	; 0x32
 8000fc8:	d11b      	bne.n	8001002 <eraseStateMachine+0x136>
                    {
                     subMenuErase->menuState = getNextSub(IDDLE);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f003 fd9c 	bl	8004b08 <getNextSub>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	70da      	strb	r2, [r3, #3]
                      key = MENU;
 8000fd8:	234d      	movs	r3, #77	; 0x4d
 8000fda:	75fb      	strb	r3, [r7, #23]
                    }
                }

            break;
 8000fdc:	e011      	b.n	8001002 <eraseStateMachine+0x136>

            case CONFIRMA_APAGAR:
                updateUserMsg(3,2,erasedUserMsg,&displayUpdateStatus);
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <eraseStateMachine+0x158>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	f107 030a 	add.w	r3, r7, #10
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f001 ff0b 	bl	8002e04 <updateUserMsg>
                subMenuErase->menuState = getNextSub(IDDLE);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f003 fd8a 	bl	8004b08 <getNextSub>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	70da      	strb	r2, [r3, #3]
                key = MENU;
 8000ffc:	234d      	movs	r3, #77	; 0x4d
 8000ffe:	75fb      	strb	r3, [r7, #23]
                break;
 8001000:	bf00      	nop
    while(key != MENU)
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	2b4d      	cmp	r3, #77	; 0x4d
 8001006:	f47f af6e 	bne.w	8000ee6 <eraseStateMachine+0x1a>
        }
    }
}
 800100a:	bf00      	nop
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200000c4 	.word	0x200000c4
 8001018:	200000dc 	.word	0x200000dc
 800101c:	200000d4 	.word	0x200000d4
 8001020:	200000c8 	.word	0x200000c8
 8001024:	200000cc 	.word	0x200000cc

08001028 <configStateMachine>:
        unsigned char menuState;
//        struct dataInsert menuInsert;
    };

unsigned char configStateMachine(struct Menu* subMenu)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b096      	sub	sp, #88	; 0x58
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

	struct tm* configIntervalSeriesTimeStruct;



    struct Menu* subMenuTesteConfigurar = subMenu;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	64fb      	str	r3, [r7, #76]	; 0x4c
    //unsigned char cursorPosition[2] = {0,0};
    //verificar se vou usar
//    struct dataInsert measurementSensor1;
//    struct dataInsert measurementSensor2;
    //
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 8001034:	f001 f830 	bl	8002098 <getUserConfigStruct>
 8001038:	64b8      	str	r0, [r7, #72]	; 0x48
    resetConfigStruct(ptr_userConfiguration);
 800103a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800103c:	f001 f976 	bl	800232c <resetConfigStruct>

    //
    unsigned char key = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    unsigned char displayUpdateStatus = IDDLE;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
    short index = 2;
 800104a:	2302      	movs	r3, #2
 800104c:	81bb      	strh	r3, [r7, #12]
    unsigned int altMin = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	647b      	str	r3, [r7, #68]	; 0x44
    unsigned int altMax = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned int tmin = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	63fb      	str	r3, [r7, #60]	; 0x3c
    unsigned int tmax = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38

    while(key != MENU)
 800105e:	bf00      	nop
 8001060:	f000 bda9 	b.w	8001bb6 <configStateMachine+0xb8e>
    {
        switch(subMenuTesteConfigurar->menuState)
 8001064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001066:	78db      	ldrb	r3, [r3, #3]
 8001068:	2b0d      	cmp	r3, #13
 800106a:	f200 85a4 	bhi.w	8001bb6 <configStateMachine+0xb8e>
 800106e:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <configStateMachine+0x4c>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	080010ad 	.word	0x080010ad
 8001078:	080010bf 	.word	0x080010bf
 800107c:	08001169 	.word	0x08001169
 8001080:	08001213 	.word	0x08001213
 8001084:	08001329 	.word	0x08001329
 8001088:	0800145b 	.word	0x0800145b
 800108c:	0800154d 	.word	0x0800154d
 8001090:	08001661 	.word	0x08001661
 8001094:	0800174d 	.word	0x0800174d
 8001098:	08001825 	.word	0x08001825
 800109c:	08001917 	.word	0x08001917
 80010a0:	08001a49 	.word	0x08001a49
 80010a4:	08001aed 	.word	0x08001aed
 80010a8:	08001b91 	.word	0x08001b91
        {
        case IDDLE:
            subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f003 fd2b 	bl	8004b08 <getNextSub>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010b8:	70da      	strb	r2, [r3, #3]

            break;
 80010ba:	f000 bd7c 	b.w	8001bb6 <configStateMachine+0xb8e>
            case CONFIG_SENSOR_1:
                updateUserMsg(0,USERMSG1,sensor1UserMsg,&displayUpdateStatus);
 80010be:	4bcc      	ldr	r3, [pc, #816]	; (80013f0 <configStateMachine+0x3c8>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	f107 030f 	add.w	r3, r7, #15
 80010c6:	2100      	movs	r1, #0
 80010c8:	2000      	movs	r0, #0
 80010ca:	f001 fe9b 	bl	8002e04 <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80010ce:	4bc9      	ldr	r3, [pc, #804]	; (80013f4 <configStateMachine+0x3cc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	2102      	movs	r1, #2
 80010d6:	2000      	movs	r0, #0
 80010d8:	f002 fdf0 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 80010dc:	4bc5      	ldr	r3, [pc, #788]	; (80013f4 <configStateMachine+0x3cc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fa4f 	bl	8002584 <stringLenght>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4618      	mov	r0, r3
 80010ea:	4bc3      	ldr	r3, [pc, #780]	; (80013f8 <configStateMachine+0x3d0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	2102      	movs	r1, #2
 80010f2:	f002 fde3 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80010f6:	4bc1      	ldr	r3, [pc, #772]	; (80013fc <configStateMachine+0x3d4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	2103      	movs	r1, #3
 80010fe:	2000      	movs	r0, #0
 8001100:	f002 fddc 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 8001104:	f004 fae4 	bl	80056d0 <getKeyPressed>
 8001108:	4603      	mov	r3, r0
 800110a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == AVANCAR)
 800110e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001112:	2b41      	cmp	r3, #65	; 0x41
 8001114:	d10f      	bne.n	8001136 <configStateMachine+0x10e>
                {
                	resetKeyPressed();
 8001116:	f004 fae7 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 800111a:	f107 030f 	add.w	r3, r7, #15
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fe8b 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_2);
 8001124:	2002      	movs	r0, #2
 8001126:	f003 fcef 	bl	8004b08 <getNextSub>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001130:	70da      	strb	r2, [r3, #3]
 8001132:	f000 bd40 	b.w	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 8001136:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800113a:	2b43      	cmp	r3, #67	; 0x43
 800113c:	f040 853b 	bne.w	8001bb6 <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 8001140:	f004 fad2 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001144:	f107 030f 	add.w	r3, r7, #15
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fe76 	bl	8002e3a <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 1;
 800114e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8001156:	2003      	movs	r0, #3
 8001158:	f003 fcd6 	bl	8004b08 <getNextSub>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001162:	70da      	strb	r2, [r3, #3]
                }

                break;
 8001164:	f000 bd27 	b.w	8001bb6 <configStateMachine+0xb8e>

            case CONFIG_SENSOR_2:
                updateUserMsg(0,0,sensor2UserMsg,&displayUpdateStatus);
 8001168:	4ba5      	ldr	r3, [pc, #660]	; (8001400 <configStateMachine+0x3d8>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	f107 030f 	add.w	r3, r7, #15
 8001170:	2100      	movs	r1, #0
 8001172:	2000      	movs	r0, #0
 8001174:	f001 fe46 	bl	8002e04 <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001178:	4b9e      	ldr	r3, [pc, #632]	; (80013f4 <configStateMachine+0x3cc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	2102      	movs	r1, #2
 8001180:	2000      	movs	r0, #0
 8001182:	f002 fd9b 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001186:	4b9b      	ldr	r3, [pc, #620]	; (80013f4 <configStateMachine+0x3cc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f001 f9fa 	bl	8002584 <stringLenght>
 8001190:	4603      	mov	r3, r0
 8001192:	4618      	mov	r0, r3
 8001194:	4b98      	ldr	r3, [pc, #608]	; (80013f8 <configStateMachine+0x3d0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	2102      	movs	r1, #2
 800119c:	f002 fd8e 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80011a0:	4b96      	ldr	r3, [pc, #600]	; (80013fc <configStateMachine+0x3d4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	2103      	movs	r1, #3
 80011a8:	2000      	movs	r0, #0
 80011aa:	f002 fd87 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 80011ae:	f004 fa8f 	bl	80056d0 <getKeyPressed>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == AVANCAR)
 80011b8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80011bc:	2b41      	cmp	r3, #65	; 0x41
 80011be:	d10f      	bne.n	80011e0 <configStateMachine+0x1b8>
                {
                	resetKeyPressed();
 80011c0:	f004 fa92 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fe36 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f003 fc9a 	bl	8004b08 <getNextSub>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011da:	70da      	strb	r2, [r3, #3]
 80011dc:	f000 bceb 	b.w	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 80011e0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80011e4:	2b43      	cmp	r3, #67	; 0x43
 80011e6:	f040 84e6 	bne.w	8001bb6 <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 80011ea:	f004 fa7d 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 80011ee:	f107 030f 	add.w	r3, r7, #15
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 fe21 	bl	8002e3a <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 2;
 80011f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011fa:	2202      	movs	r2, #2
 80011fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8001200:	2003      	movs	r0, #3
 8001202:	f003 fc81 	bl	8004b08 <getNextSub>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800120c:	70da      	strb	r2, [r3, #3]
                }
                break;
 800120e:	f000 bcd2 	b.w	8001bb6 <configStateMachine+0xb8e>

            case SENSOR_ALTMIN:
                updateUserMsg(0,USERMSG1,altminUserMsg,&displayUpdateStatus);
 8001212:	4b7c      	ldr	r3, [pc, #496]	; (8001404 <configStateMachine+0x3dc>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f107 030f 	add.w	r3, r7, #15
 800121a:	2100      	movs	r1, #0
 800121c:	2000      	movs	r0, #0
 800121e:	f001 fdf1 	bl	8002e04 <updateUserMsg>
                ptr_altMinString = getAltMinString();
 8001222:	f001 fa15 	bl	8002650 <getAltMinString>
 8001226:	6578      	str	r0, [r7, #84]	; 0x54
                HW_PRINT_DATA(0,USERMSG2,ptr_altMinString);
 8001228:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800122a:	2101      	movs	r1, #1
 800122c:	2000      	movs	r0, #0
 800122e:	f002 fd45 	bl	8003cbc <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001232:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001236:	2101      	movs	r1, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f002 fd65 	bl	8003d08 <HW_UPDATE_DATA>

				HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 800123e:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <configStateMachine+0x3cc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	2102      	movs	r1, #2
 8001246:	2000      	movs	r0, #0
 8001248:	f002 fd38 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800124c:	4b69      	ldr	r3, [pc, #420]	; (80013f4 <configStateMachine+0x3cc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f001 f997 	bl	8002584 <stringLenght>
 8001256:	4603      	mov	r3, r0
 8001258:	4618      	mov	r0, r3
 800125a:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <configStateMachine+0x3d0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	2102      	movs	r1, #2
 8001262:	f002 fd2b 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001266:	4b65      	ldr	r3, [pc, #404]	; (80013fc <configStateMachine+0x3d4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	2103      	movs	r1, #3
 800126e:	2000      	movs	r0, #0
 8001270:	f002 fd24 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001274:	4b61      	ldr	r3, [pc, #388]	; (80013fc <configStateMachine+0x3d4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f001 f983 	bl	8002584 <stringLenght>
 800127e:	4603      	mov	r3, r0
 8001280:	4618      	mov	r0, r3
 8001282:	4b61      	ldr	r3, [pc, #388]	; (8001408 <configStateMachine+0x3e0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	2103      	movs	r1, #3
 800128a:	f002 fd17 	bl	8003cbc <HW_PRINT_DATA>

                key = getKeyPressed();
 800128e:	f004 fa1f 	bl	80056d0 <getKeyPressed>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 8001298:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800129c:	2b49      	cmp	r3, #73	; 0x49
 800129e:	d10f      	bne.n	80012c0 <configStateMachine+0x298>
                {
                	resetKeyPressed();
 80012a0:	f004 fa22 	bl	80056e8 <resetKeyPressed>
                    setUserAltMin(&index);
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 fb2d 	bl	8002908 <setUserAltMin>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f003 fc2a 	bl	8004b08 <getNextSub>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ba:	70da      	strb	r2, [r3, #3]
 80012bc:	f000 bc7b 	b.w	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == AVANCAR)
 80012c0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80012c4:	2b41      	cmp	r3, #65	; 0x41
 80012c6:	d109      	bne.n	80012dc <configStateMachine+0x2b4>
                {
                	resetKeyPressed();
 80012c8:	f004 fa0e 	bl	80056e8 <resetKeyPressed>
                    indexChange(&index,2);
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2102      	movs	r1, #2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 f99c 	bl	8002610 <indexChange>
 80012d8:	f000 bc6d 	b.w	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 80012dc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80012e0:	2b43      	cmp	r3, #67	; 0x43
 80012e2:	f040 8468 	bne.w	8001bb6 <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 80012e6:	f004 f9ff 	bl	80056e8 <resetKeyPressed>
                    index = 2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	81bb      	strh	r3, [r7, #12]

                    altMin = stringToInt(getAltMinString());
 80012ee:	f001 f9af 	bl	8002650 <getAltMinString>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 f933 	bl	8002560 <stringToInt>
 80012fa:	6478      	str	r0, [r7, #68]	; 0x44
                    tmin = alturaToTempo(altMin);
 80012fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80012fe:	f001 fd4f 	bl	8002da0 <alturaToTempo>
 8001302:	4603      	mov	r3, r0
 8001304:	63fb      	str	r3, [r7, #60]	; 0x3c
                    ptr_userConfiguration->userAlturaMin = tmin;
 8001306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001308:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800130a:	60da      	str	r2, [r3, #12]
                    readyUserInterface(&displayUpdateStatus);
 800130c:	f107 030f 	add.w	r3, r7, #15
 8001310:	4618      	mov	r0, r3
 8001312:	f001 fd92 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 8001316:	2004      	movs	r0, #4
 8001318:	f003 fbf6 	bl	8004b08 <getNextSub>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001322:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }
                break;
 8001324:	f000 bc47 	b.w	8001bb6 <configStateMachine+0xb8e>

            case SENSOR_ALTMAX:
                updateUserMsg(0,USERMSG1,altmaxUserMsg,&displayUpdateStatus);
 8001328:	4b38      	ldr	r3, [pc, #224]	; (800140c <configStateMachine+0x3e4>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	f107 030f 	add.w	r3, r7, #15
 8001330:	2100      	movs	r1, #0
 8001332:	2000      	movs	r0, #0
 8001334:	f001 fd66 	bl	8002e04 <updateUserMsg>
                ptr_altMaxString = getAltMaxString();
 8001338:	f001 f9aa 	bl	8002690 <getAltMaxString>
 800133c:	61f8      	str	r0, [r7, #28]
                HW_PRINT_DATA(0,USERMSG2,ptr_altMinString);
 800133e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001340:	2101      	movs	r1, #1
 8001342:	2000      	movs	r0, #0
 8001344:	f002 fcba 	bl	8003cbc <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001348:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800134c:	2101      	movs	r1, #1
 800134e:	4618      	mov	r0, r3
 8001350:	f002 fcda 	bl	8003d08 <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <configStateMachine+0x3cc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	2102      	movs	r1, #2
 800135c:	2000      	movs	r0, #0
 800135e:	f002 fcad 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <configStateMachine+0x3cc>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f001 f90c 	bl	8002584 <stringLenght>
 800136c:	4603      	mov	r3, r0
 800136e:	4618      	mov	r0, r3
 8001370:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <configStateMachine+0x3d0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	2102      	movs	r1, #2
 8001378:	f002 fca0 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <configStateMachine+0x3d4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	2103      	movs	r1, #3
 8001384:	2000      	movs	r0, #0
 8001386:	f002 fc99 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <configStateMachine+0x3d4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f001 f8f8 	bl	8002584 <stringLenght>
 8001394:	4603      	mov	r3, r0
 8001396:	4618      	mov	r0, r3
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <configStateMachine+0x3e0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	2103      	movs	r1, #3
 80013a0:	f002 fc8c 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 80013a4:	f004 f994 	bl	80056d0 <getKeyPressed>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 80013ae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80013b2:	2b49      	cmp	r3, #73	; 0x49
 80013b4:	d10e      	bne.n	80013d4 <configStateMachine+0x3ac>
                {
                	resetKeyPressed();
 80013b6:	f004 f997 	bl	80056e8 <resetKeyPressed>
                    setUserAltMax(&index);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 faeb 	bl	800299a <setUserAltMax>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 80013c4:	2004      	movs	r0, #4
 80013c6:	f003 fb9f 	bl	8004b08 <getNextSub>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013d0:	70da      	strb	r2, [r3, #3]
 80013d2:	e3f0      	b.n	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == AVANCAR)
 80013d4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80013d8:	2b41      	cmp	r3, #65	; 0x41
 80013da:	d119      	bne.n	8001410 <configStateMachine+0x3e8>
                {
                	resetKeyPressed();
 80013dc:	f004 f984 	bl	80056e8 <resetKeyPressed>
                    indexChange(&index,2);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2102      	movs	r1, #2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 f912 	bl	8002610 <indexChange>
 80013ec:	e3e3      	b.n	8001bb6 <configStateMachine+0xb8e>
 80013ee:	bf00      	nop
 80013f0:	20000084 	.word	0x20000084
 80013f4:	200000d0 	.word	0x200000d0
 80013f8:	200000d8 	.word	0x200000d8
 80013fc:	200000dc 	.word	0x200000dc
 8001400:	20000088 	.word	0x20000088
 8001404:	2000008c 	.word	0x2000008c
 8001408:	200000d4 	.word	0x200000d4
 800140c:	20000090 	.word	0x20000090
                }
                else if(key == CONFIRMAR)
 8001410:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001414:	2b43      	cmp	r3, #67	; 0x43
 8001416:	f040 83ce 	bne.w	8001bb6 <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 800141a:	f004 f965 	bl	80056e8 <resetKeyPressed>
                    index = 2;
 800141e:	2302      	movs	r3, #2
 8001420:	81bb      	strh	r3, [r7, #12]
                    altMax = stringToInt(getAltMaxString());
 8001422:	f001 f935 	bl	8002690 <getAltMaxString>
 8001426:	4603      	mov	r3, r0
 8001428:	4618      	mov	r0, r3
 800142a:	f001 f899 	bl	8002560 <stringToInt>
 800142e:	6438      	str	r0, [r7, #64]	; 0x40
                    tmax = alturaToTempo(altMax);
 8001430:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001432:	f001 fcb5 	bl	8002da0 <alturaToTempo>
 8001436:	4603      	mov	r3, r0
 8001438:	63bb      	str	r3, [r7, #56]	; 0x38
                    ptr_userConfiguration->userAlturaMax = tmax;
 800143a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800143c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800143e:	611a      	str	r2, [r3, #16]
                    readyUserInterface(&displayUpdateStatus);
 8001440:	f107 030f 	add.w	r3, r7, #15
 8001444:	4618      	mov	r0, r3
 8001446:	f001 fcf8 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 800144a:	2005      	movs	r0, #5
 800144c:	f003 fb5c 	bl	8004b08 <getNextSub>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001456:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }

                break;
 8001458:	e3ad      	b.n	8001bb6 <configStateMachine+0xb8e>

            case SENSOR_SALTOS:
                updateUserMsg(0,USERMSG1,numsaltosUserMsg,&displayUpdateStatus);
 800145a:	4bb4      	ldr	r3, [pc, #720]	; (800172c <configStateMachine+0x704>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	f107 030f 	add.w	r3, r7, #15
 8001462:	2100      	movs	r1, #0
 8001464:	2000      	movs	r0, #0
 8001466:	f001 fccd 	bl	8002e04 <updateUserMsg>
                ptr_numSaltosString = getNumSaltosString();
 800146a:	f001 f931 	bl	80026d0 <getNumSaltosString>
 800146e:	6238      	str	r0, [r7, #32]
                HW_PRINT_DATA(0,USERMSG2,ptr_numSaltosString);
 8001470:	6a3a      	ldr	r2, [r7, #32]
 8001472:	2101      	movs	r1, #1
 8001474:	2000      	movs	r0, #0
 8001476:	f002 fc21 	bl	8003cbc <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 800147a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800147e:	2101      	movs	r1, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fc41 	bl	8003d08 <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001486:	4baa      	ldr	r3, [pc, #680]	; (8001730 <configStateMachine+0x708>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	2102      	movs	r1, #2
 800148e:	2000      	movs	r0, #0
 8001490:	f002 fc14 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001494:	4ba6      	ldr	r3, [pc, #664]	; (8001730 <configStateMachine+0x708>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f001 f873 	bl	8002584 <stringLenght>
 800149e:	4603      	mov	r3, r0
 80014a0:	4618      	mov	r0, r3
 80014a2:	4ba4      	ldr	r3, [pc, #656]	; (8001734 <configStateMachine+0x70c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	2102      	movs	r1, #2
 80014aa:	f002 fc07 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80014ae:	4ba2      	ldr	r3, [pc, #648]	; (8001738 <configStateMachine+0x710>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	2103      	movs	r1, #3
 80014b6:	2000      	movs	r0, #0
 80014b8:	f002 fc00 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 80014bc:	4b9e      	ldr	r3, [pc, #632]	; (8001738 <configStateMachine+0x710>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 f85f 	bl	8002584 <stringLenght>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4618      	mov	r0, r3
 80014ca:	4b9c      	ldr	r3, [pc, #624]	; (800173c <configStateMachine+0x714>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	2103      	movs	r1, #3
 80014d2:	f002 fbf3 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 80014d6:	f004 f8fb 	bl	80056d0 <getKeyPressed>
 80014da:	4603      	mov	r3, r0
 80014dc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 80014e0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80014e4:	2b49      	cmp	r3, #73	; 0x49
 80014e6:	d10e      	bne.n	8001506 <configStateMachine+0x4de>
                {
                	resetKeyPressed();
 80014e8:	f004 f8fe 	bl	80056e8 <resetKeyPressed>
                    setUserNumSaltos(&index);
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fa76 	bl	80029e2 <setUserNumSaltos>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 80014f6:	2005      	movs	r0, #5
 80014f8:	f003 fb06 	bl	8004b08 <getNextSub>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001502:	70da      	strb	r2, [r3, #3]
 8001504:	e357      	b.n	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == AVANCAR)
 8001506:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800150a:	2b41      	cmp	r3, #65	; 0x41
 800150c:	d108      	bne.n	8001520 <configStateMachine+0x4f8>
                {
                	resetKeyPressed();
 800150e:	f004 f8eb 	bl	80056e8 <resetKeyPressed>
                    indexChange(&index,2);
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2102      	movs	r1, #2
 8001518:	4618      	mov	r0, r3
 800151a:	f001 f879 	bl	8002610 <indexChange>
 800151e:	e34a      	b.n	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 8001520:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001524:	2b43      	cmp	r3, #67	; 0x43
 8001526:	f040 8346 	bne.w	8001bb6 <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 800152a:	f004 f8dd 	bl	80056e8 <resetKeyPressed>
                    index = 4;
 800152e:	2304      	movs	r3, #4
 8001530:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus);
 8001532:	f107 030f 	add.w	r3, r7, #15
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fc7f 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 800153c:	2006      	movs	r0, #6
 800153e:	f003 fae3 	bl	8004b08 <getNextSub>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001548:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }
                break;
 800154a:	e334      	b.n	8001bb6 <configStateMachine+0xb8e>

            case SENSOR_INT_SALTOS:
                updateUserMsg(0,USERMSG1,intersaltosUserMsg,&displayUpdateStatus);
 800154c:	4b7c      	ldr	r3, [pc, #496]	; (8001740 <configStateMachine+0x718>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	f107 030f 	add.w	r3, r7, #15
 8001554:	2100      	movs	r1, #0
 8001556:	2000      	movs	r0, #0
 8001558:	f001 fc54 	bl	8002e04 <updateUserMsg>
                configIntervalTimeStruct = getIntervalTimeStruct();
 800155c:	f000 fd20 	bl	8001fa0 <getIntervalTimeStruct>
 8001560:	4603      	mov	r3, r0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
                strftime(userIntervalTimeString, sizeof(userIntervalTimeString), "%M:%S", configIntervalTimeStruct);
 8001564:	f107 0010 	add.w	r0, r7, #16
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	4a76      	ldr	r2, [pc, #472]	; (8001744 <configStateMachine+0x71c>)
 800156c:	2109      	movs	r1, #9
 800156e:	f00d f87f 	bl	800e670 <strftime>
                HW_PRINT_DATA(0,USERMSG2,userIntervalTimeString);
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	461a      	mov	r2, r3
 8001578:	2101      	movs	r1, #1
 800157a:	2000      	movs	r0, #0
 800157c:	f002 fb9e 	bl	8003cbc <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001580:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001584:	2101      	movs	r1, #1
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fbbe 	bl	8003d08 <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <configStateMachine+0x708>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	2102      	movs	r1, #2
 8001594:	2000      	movs	r0, #0
 8001596:	f002 fb91 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800159a:	4b65      	ldr	r3, [pc, #404]	; (8001730 <configStateMachine+0x708>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fff0 	bl	8002584 <stringLenght>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4618      	mov	r0, r3
 80015a8:	4b62      	ldr	r3, [pc, #392]	; (8001734 <configStateMachine+0x70c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	2102      	movs	r1, #2
 80015b0:	f002 fb84 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80015b4:	4b60      	ldr	r3, [pc, #384]	; (8001738 <configStateMachine+0x710>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	2103      	movs	r1, #3
 80015bc:	2000      	movs	r0, #0
 80015be:	f002 fb7d 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 80015c2:	4b5d      	ldr	r3, [pc, #372]	; (8001738 <configStateMachine+0x710>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 ffdc 	bl	8002584 <stringLenght>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4618      	mov	r0, r3
 80015d0:	4b5a      	ldr	r3, [pc, #360]	; (800173c <configStateMachine+0x714>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	2103      	movs	r1, #3
 80015d8:	f002 fb70 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 80015dc:	f004 f878 	bl	80056d0 <getKeyPressed>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 80015e6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80015ea:	2b49      	cmp	r3, #73	; 0x49
 80015ec:	d10e      	bne.n	800160c <configStateMachine+0x5e4>
                {
                	resetKeyPressed();
 80015ee:	f004 f87b 	bl	80056e8 <resetKeyPressed>
                	setIntervalSaltosTime(&index);
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 faf0 	bl	8002bdc <setIntervalSaltosTime>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 80015fc:	2006      	movs	r0, #6
 80015fe:	f003 fa83 	bl	8004b08 <getNextSub>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001608:	70da      	strb	r2, [r3, #3]
 800160a:	e2d4      	b.n	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == AVANCAR)
 800160c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001610:	2b41      	cmp	r3, #65	; 0x41
 8001612:	d108      	bne.n	8001626 <configStateMachine+0x5fe>
				{
					resetKeyPressed();
 8001614:	f004 f868 	bl	80056e8 <resetKeyPressed>
					indexColumn(&index,4);
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2104      	movs	r1, #4
 800161e:	4618      	mov	r0, r3
 8001620:	f000 ff36 	bl	8002490 <indexColumn>
 8001624:	e2c7      	b.n	8001bb6 <configStateMachine+0xb8e>
				}
                else if(key == CONFIRMAR)
 8001626:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800162a:	2b43      	cmp	r3, #67	; 0x43
 800162c:	f040 82c3 	bne.w	8001bb6 <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 8001630:	f004 f85a 	bl	80056e8 <resetKeyPressed>
                    index = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	81bb      	strh	r3, [r7, #12]
                    ptr_userConfiguration->userIntervalSaltos = milisecondsTime(configIntervalTimeStruct);
 8001638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800163a:	f000 ff65 	bl	8002508 <milisecondsTime>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001644:	619a      	str	r2, [r3, #24]
                    readyUserInterface(&displayUpdateStatus);
 8001646:	f107 030f 	add.w	r3, r7, #15
 800164a:	4618      	mov	r0, r3
 800164c:	f001 fbf5 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 8001650:	2007      	movs	r0, #7
 8001652:	f003 fa59 	bl	8004b08 <getNextSub>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800165c:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }

                break;
 800165e:	e2aa      	b.n	8001bb6 <configStateMachine+0xb8e>

            case SENSOR_JMP_SELECT:
                updateUserMsg(0,USERMSG1,tiposaltoUserMsg,&displayUpdateStatus);
 8001660:	4b39      	ldr	r3, [pc, #228]	; (8001748 <configStateMachine+0x720>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	f107 030f 	add.w	r3, r7, #15
 8001668:	2100      	movs	r1, #0
 800166a:	2000      	movs	r0, #0
 800166c:	f001 fbca 	bl	8002e04 <updateUserMsg>
                ptr_jumpSelectString = getTypeJumpString();
 8001670:	f001 f84e 	bl	8002710 <getTypeJumpString>
 8001674:	62b8      	str	r0, [r7, #40]	; 0x28
                HW_PRINT_DATA(0,USERMSG2,ptr_jumpSelectString);
 8001676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001678:	2101      	movs	r1, #1
 800167a:	2000      	movs	r0, #0
 800167c:	f002 fb1e 	bl	8003cbc <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001680:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001684:	2101      	movs	r1, #1
 8001686:	4618      	mov	r0, r3
 8001688:	f002 fb3e 	bl	8003d08 <HW_UPDATE_DATA>

				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <configStateMachine+0x710>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	2103      	movs	r1, #3
 8001694:	2000      	movs	r0, #0
 8001696:	f002 fb11 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <configStateMachine+0x710>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 ff70 	bl	8002584 <stringLenght>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4618      	mov	r0, r3
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <configStateMachine+0x714>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	2103      	movs	r1, #3
 80016b0:	f002 fb04 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 80016b4:	f004 f80c 	bl	80056d0 <getKeyPressed>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 80016be:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80016c2:	2b49      	cmp	r3, #73	; 0x49
 80016c4:	d10e      	bne.n	80016e4 <configStateMachine+0x6bc>
                {
                	resetKeyPressed();
 80016c6:	f004 f80f 	bl	80056e8 <resetKeyPressed>
                    setUserTypeJump(&index);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 f9ab 	bl	8002a2a <setUserTypeJump>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 80016d4:	2007      	movs	r0, #7
 80016d6:	f003 fa17 	bl	8004b08 <getNextSub>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e0:	70da      	strb	r2, [r3, #3]
 80016e2:	e268      	b.n	8001bb6 <configStateMachine+0xb8e>

                }
                else if(key == CONFIRMAR)
 80016e4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80016e8:	2b43      	cmp	r3, #67	; 0x43
 80016ea:	f040 8264 	bne.w	8001bb6 <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 80016ee:	f003 fffb 	bl	80056e8 <resetKeyPressed>
                    if(*ptr_jumpSelectString == '3')
 80016f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b33      	cmp	r3, #51	; 0x33
 80016f8:	d109      	bne.n	800170e <configStateMachine+0x6e6>
                    {
                    	index = 1;
 80016fa:	2301      	movs	r3, #1
 80016fc:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 80016fe:	2008      	movs	r0, #8
 8001700:	f003 fa02 	bl	8004b08 <getNextSub>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800170a:	70da      	strb	r2, [r3, #3]
 800170c:	e008      	b.n	8001720 <configStateMachine+0x6f8>
    //subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                    }
                    else
                    {
                    	index = 2;
 800170e:	2302      	movs	r3, #2
 8001710:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8001712:	2009      	movs	r0, #9
 8001714:	f003 f9f8 	bl	8004b08 <getNextSub>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171e:	70da      	strb	r2, [r3, #3]
    //subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                    }
                    //TESTE trocar a variavel por uma local e o resultado enviar para ptr_userConfiguration->userCMJ.
                    readyUserInterface(&displayUpdateStatus);
 8001720:	f107 030f 	add.w	r3, r7, #15
 8001724:	4618      	mov	r0, r3
 8001726:	f001 fb88 	bl	8002e3a <readyUserInterface>

                }

                break;
 800172a:	e244      	b.n	8001bb6 <configStateMachine+0xb8e>
 800172c:	20000094 	.word	0x20000094
 8001730:	200000d0 	.word	0x200000d0
 8001734:	200000d8 	.word	0x200000d8
 8001738:	200000dc 	.word	0x200000dc
 800173c:	200000d4 	.word	0x200000d4
 8001740:	20000098 	.word	0x20000098
 8001744:	0800fe60 	.word	0x0800fe60
 8001748:	2000009c 	.word	0x2000009c

            case SENSOR_ALTDJ:
                updateUserMsg(0,USERMSG1,altdjUserMsg,&displayUpdateStatus);
 800174c:	4bb6      	ldr	r3, [pc, #728]	; (8001a28 <configStateMachine+0xa00>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	f107 030f 	add.w	r3, r7, #15
 8001754:	2100      	movs	r1, #0
 8001756:	2000      	movs	r0, #0
 8001758:	f001 fb54 	bl	8002e04 <updateUserMsg>
                ptr_altDJString = getAltDJString();
 800175c:	f000 ffee 	bl	800273c <getAltDJString>
 8001760:	62f8      	str	r0, [r7, #44]	; 0x2c
                HW_PRINT_DATA(0,USERMSG2,ptr_altDJString);
 8001762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001764:	2101      	movs	r1, #1
 8001766:	2000      	movs	r0, #0
 8001768:	f002 faa8 	bl	8003cbc <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 800176c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001770:	2101      	movs	r1, #1
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fac8 	bl	8003d08 <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001778:	4bac      	ldr	r3, [pc, #688]	; (8001a2c <configStateMachine+0xa04>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	2102      	movs	r1, #2
 8001780:	2000      	movs	r0, #0
 8001782:	f002 fa9b 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001786:	4ba9      	ldr	r3, [pc, #676]	; (8001a2c <configStateMachine+0xa04>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fefa 	bl	8002584 <stringLenght>
 8001790:	4603      	mov	r3, r0
 8001792:	4618      	mov	r0, r3
 8001794:	4ba6      	ldr	r3, [pc, #664]	; (8001a30 <configStateMachine+0xa08>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	2102      	movs	r1, #2
 800179c:	f002 fa8e 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80017a0:	4ba4      	ldr	r3, [pc, #656]	; (8001a34 <configStateMachine+0xa0c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	2103      	movs	r1, #3
 80017a8:	2000      	movs	r0, #0
 80017aa:	f002 fa87 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 80017ae:	4ba1      	ldr	r3, [pc, #644]	; (8001a34 <configStateMachine+0xa0c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 fee6 	bl	8002584 <stringLenght>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4618      	mov	r0, r3
 80017bc:	4b9e      	ldr	r3, [pc, #632]	; (8001a38 <configStateMachine+0xa10>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	2103      	movs	r1, #3
 80017c4:	f002 fa7a 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 80017c8:	f003 ff82 	bl	80056d0 <getKeyPressed>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 80017d2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80017d6:	2b49      	cmp	r3, #73	; 0x49
 80017d8:	d10e      	bne.n	80017f8 <configStateMachine+0x7d0>
                {
                	resetKeyPressed();
 80017da:	f003 ff85 	bl	80056e8 <resetKeyPressed>
                    setUserAltDJ(&index);
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 f945 	bl	8002a72 <setUserAltDJ>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 80017e8:	2008      	movs	r0, #8
 80017ea:	f003 f98d 	bl	8004b08 <getNextSub>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017f4:	70da      	strb	r2, [r3, #3]
 80017f6:	e1de      	b.n	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 80017f8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80017fc:	2b43      	cmp	r3, #67	; 0x43
 80017fe:	f040 81da 	bne.w	8001bb6 <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 8001802:	f003 ff71 	bl	80056e8 <resetKeyPressed>
                    index = 2;
 8001806:	2302      	movs	r3, #2
 8001808:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus);
 800180a:	f107 030f 	add.w	r3, r7, #15
 800180e:	4618      	mov	r0, r3
 8001810:	f001 fb13 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8001814:	2009      	movs	r0, #9
 8001816:	f003 f977 	bl	8004b08 <getNextSub>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001820:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }

                break;
 8001822:	e1c8      	b.n	8001bb6 <configStateMachine+0xb8e>

            case SENSOR_SERIES:
                updateUserMsg(0,USERMSG1,numserieUserMsg,&displayUpdateStatus);
 8001824:	4b85      	ldr	r3, [pc, #532]	; (8001a3c <configStateMachine+0xa14>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	f107 030f 	add.w	r3, r7, #15
 800182c:	2100      	movs	r1, #0
 800182e:	2000      	movs	r0, #0
 8001830:	f001 fae8 	bl	8002e04 <updateUserMsg>
                ptr_numSeriesString = getNumSeriesString();
 8001834:	f000 ff9c 	bl	8002770 <getNumSeriesString>
 8001838:	6338      	str	r0, [r7, #48]	; 0x30
                HW_PRINT_DATA(0,USERMSG2,ptr_numSeriesString);
 800183a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800183c:	2101      	movs	r1, #1
 800183e:	2000      	movs	r0, #0
 8001840:	f002 fa3c 	bl	8003cbc <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001844:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001848:	2101      	movs	r1, #1
 800184a:	4618      	mov	r0, r3
 800184c:	f002 fa5c 	bl	8003d08 <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001850:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <configStateMachine+0xa04>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	2102      	movs	r1, #2
 8001858:	2000      	movs	r0, #0
 800185a:	f002 fa2f 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <configStateMachine+0xa04>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fe8e 	bl	8002584 <stringLenght>
 8001868:	4603      	mov	r3, r0
 800186a:	4618      	mov	r0, r3
 800186c:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <configStateMachine+0xa08>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	2102      	movs	r1, #2
 8001874:	f002 fa22 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001878:	4b6e      	ldr	r3, [pc, #440]	; (8001a34 <configStateMachine+0xa0c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	2103      	movs	r1, #3
 8001880:	2000      	movs	r0, #0
 8001882:	f002 fa1b 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001886:	4b6b      	ldr	r3, [pc, #428]	; (8001a34 <configStateMachine+0xa0c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fe7a 	bl	8002584 <stringLenght>
 8001890:	4603      	mov	r3, r0
 8001892:	4618      	mov	r0, r3
 8001894:	4b68      	ldr	r3, [pc, #416]	; (8001a38 <configStateMachine+0xa10>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	2103      	movs	r1, #3
 800189c:	f002 fa0e 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 80018a0:	f003 ff16 	bl	80056d0 <getKeyPressed>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 80018aa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80018ae:	2b49      	cmp	r3, #73	; 0x49
 80018b0:	d10e      	bne.n	80018d0 <configStateMachine+0x8a8>
                {
                	resetKeyPressed();
 80018b2:	f003 ff19 	bl	80056e8 <resetKeyPressed>
                    setUserNumSeries(&index);
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 f8fd 	bl	8002aba <setUserNumSeries>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 80018c0:	2009      	movs	r0, #9
 80018c2:	f003 f921 	bl	8004b08 <getNextSub>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018cc:	70da      	strb	r2, [r3, #3]
 80018ce:	e172      	b.n	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == AVANCAR)
 80018d0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80018d4:	2b41      	cmp	r3, #65	; 0x41
 80018d6:	d108      	bne.n	80018ea <configStateMachine+0x8c2>
				{
					resetKeyPressed();
 80018d8:	f003 ff06 	bl	80056e8 <resetKeyPressed>
					indexColumn(&index,2);
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2102      	movs	r1, #2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fdd4 	bl	8002490 <indexColumn>
 80018e8:	e165      	b.n	8001bb6 <configStateMachine+0xb8e>
				}
                else if(key == CONFIRMAR)
 80018ea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80018ee:	2b43      	cmp	r3, #67	; 0x43
 80018f0:	f040 8161 	bne.w	8001bb6 <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 80018f4:	f003 fef8 	bl	80056e8 <resetKeyPressed>
                    index = 2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus);
 80018fc:	f107 030f 	add.w	r3, r7, #15
 8001900:	4618      	mov	r0, r3
 8001902:	f001 fa9a 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 8001906:	200a      	movs	r0, #10
 8001908:	f003 f8fe 	bl	8004b08 <getNextSub>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001912:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }

                break;
 8001914:	e14f      	b.n	8001bb6 <configStateMachine+0xb8e>

            case SENSOR_INT_SERIES:
                updateUserMsg(0,USERMSG1,interseriesUserMsg,&displayUpdateStatus);
 8001916:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <configStateMachine+0xa18>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f107 030f 	add.w	r3, r7, #15
 800191e:	2100      	movs	r1, #0
 8001920:	2000      	movs	r0, #0
 8001922:	f001 fa6f 	bl	8002e04 <updateUserMsg>
                configIntervalSeriesTimeStruct = getintervalSeriesTimeStruct();
 8001926:	f000 fb47 	bl	8001fb8 <getintervalSeriesTimeStruct>
 800192a:	6378      	str	r0, [r7, #52]	; 0x34
				strftime(userIntervalTimeString, sizeof(userIntervalTimeString), "%M:%S", configIntervalSeriesTimeStruct);
 800192c:	f107 0010 	add.w	r0, r7, #16
 8001930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001932:	4a44      	ldr	r2, [pc, #272]	; (8001a44 <configStateMachine+0xa1c>)
 8001934:	2109      	movs	r1, #9
 8001936:	f00c fe9b 	bl	800e670 <strftime>
				HW_PRINT_DATA(0,USERMSG2,userIntervalTimeString);
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	461a      	mov	r2, r3
 8001940:	2101      	movs	r1, #1
 8001942:	2000      	movs	r0, #0
 8001944:	f002 f9ba 	bl	8003cbc <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001948:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f002 f9da 	bl	8003d08 <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001954:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <configStateMachine+0xa04>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	2102      	movs	r1, #2
 800195c:	2000      	movs	r0, #0
 800195e:	f002 f9ad 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001962:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <configStateMachine+0xa04>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fe0c 	bl	8002584 <stringLenght>
 800196c:	4603      	mov	r3, r0
 800196e:	4618      	mov	r0, r3
 8001970:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <configStateMachine+0xa08>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	2102      	movs	r1, #2
 8001978:	f002 f9a0 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800197c:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <configStateMachine+0xa0c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	2103      	movs	r1, #3
 8001984:	2000      	movs	r0, #0
 8001986:	f002 f999 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 800198a:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <configStateMachine+0xa0c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fdf8 	bl	8002584 <stringLenght>
 8001994:	4603      	mov	r3, r0
 8001996:	4618      	mov	r0, r3
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <configStateMachine+0xa10>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	2103      	movs	r1, #3
 80019a0:	f002 f98c 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 80019a4:	f003 fe94 	bl	80056d0 <getKeyPressed>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == INSERIR)
 80019ae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80019b2:	2b49      	cmp	r3, #73	; 0x49
 80019b4:	d10e      	bne.n	80019d4 <configStateMachine+0x9ac>
                {
                	resetKeyPressed();
 80019b6:	f003 fe97 	bl	80056e8 <resetKeyPressed>
                	setIntervalSaltosTime(&index);
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 f90c 	bl	8002bdc <setIntervalSaltosTime>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 80019c4:	200a      	movs	r0, #10
 80019c6:	f003 f89f 	bl	8004b08 <getNextSub>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d0:	70da      	strb	r2, [r3, #3]
 80019d2:	e0f0      	b.n	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == AVANCAR)
 80019d4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80019d8:	2b41      	cmp	r3, #65	; 0x41
 80019da:	d108      	bne.n	80019ee <configStateMachine+0x9c6>
				{
					resetKeyPressed();
 80019dc:	f003 fe84 	bl	80056e8 <resetKeyPressed>
					indexColumn(&index,4);
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	2104      	movs	r1, #4
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fd52 	bl	8002490 <indexColumn>
 80019ec:	e0e3      	b.n	8001bb6 <configStateMachine+0xb8e>
				}
                else if(key == CONFIRMAR)
 80019ee:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80019f2:	2b43      	cmp	r3, #67	; 0x43
 80019f4:	f040 80df 	bne.w	8001bb6 <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 80019f8:	f003 fe76 	bl	80056e8 <resetKeyPressed>
                    index = 2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	81bb      	strh	r3, [r7, #12]
                    ptr_userConfiguration->userIntervalSeries = milisecondsTime(configIntervalSeriesTimeStruct);
 8001a00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a02:	f000 fd81 	bl	8002508 <milisecondsTime>
 8001a06:	4603      	mov	r3, r0
 8001a08:	461a      	mov	r2, r3
 8001a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a0c:	621a      	str	r2, [r3, #32]
                    readyUserInterface(&displayUpdateStatus);
 8001a0e:	f107 030f 	add.w	r3, r7, #15
 8001a12:	4618      	mov	r0, r3
 8001a14:	f001 fa11 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8001a18:	200b      	movs	r0, #11
 8001a1a:	f003 f875 	bl	8004b08 <getNextSub>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a24:	70da      	strb	r2, [r3, #3]
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                }

            break;
 8001a26:	e0c6      	b.n	8001bb6 <configStateMachine+0xb8e>
 8001a28:	200000a0 	.word	0x200000a0
 8001a2c:	200000d0 	.word	0x200000d0
 8001a30:	200000d8 	.word	0x200000d8
 8001a34:	200000dc 	.word	0x200000dc
 8001a38:	200000d4 	.word	0x200000d4
 8001a3c:	200000a4 	.word	0x200000a4
 8001a40:	200000a8 	.word	0x200000a8
 8001a44:	0800fe60 	.word	0x0800fe60

            case TAPETE_ON:
                updateUserMsg(0,USERMSG1,intapeteUserMsg,&displayUpdateStatus);
 8001a48:	4b60      	ldr	r3, [pc, #384]	; (8001bcc <configStateMachine+0xba4>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f107 030f 	add.w	r3, r7, #15
 8001a50:	2100      	movs	r1, #0
 8001a52:	2000      	movs	r0, #0
 8001a54:	f001 f9d6 	bl	8002e04 <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001a58:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <configStateMachine+0xba8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2102      	movs	r1, #2
 8001a60:	2000      	movs	r0, #0
 8001a62:	f002 f92b 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001a66:	4b5a      	ldr	r3, [pc, #360]	; (8001bd0 <configStateMachine+0xba8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fd8a 	bl	8002584 <stringLenght>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4618      	mov	r0, r3
 8001a74:	4b57      	ldr	r3, [pc, #348]	; (8001bd4 <configStateMachine+0xbac>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	f002 f91e 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001a80:	4b55      	ldr	r3, [pc, #340]	; (8001bd8 <configStateMachine+0xbb0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	2103      	movs	r1, #3
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f002 f917 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 8001a8e:	f003 fe1f 	bl	80056d0 <getKeyPressed>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == AVANCAR)
 8001a98:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001a9c:	2b41      	cmp	r3, #65	; 0x41
 8001a9e:	d10e      	bne.n	8001abe <configStateMachine+0xa96>
                {
                	resetKeyPressed();
 8001aa0:	f003 fe22 	bl	80056e8 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus);
 8001aa4:	f107 030f 	add.w	r3, r7, #15
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 f9c6 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_OFF);
 8001aae:	200c      	movs	r0, #12
 8001ab0:	f003 f82a 	bl	8004b08 <getNextSub>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aba:	70da      	strb	r2, [r3, #3]
 8001abc:	e07b      	b.n	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 8001abe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001ac2:	2b43      	cmp	r3, #67	; 0x43
 8001ac4:	d177      	bne.n	8001bb6 <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 8001ac6:	f003 fe0f 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001aca:	f107 030f 	add.w	r3, r7, #15
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 f9b3 	bl	8002e3a <readyUserInterface>
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                    ptr_userConfiguration->userSelectTapete = TRUE;
 8001ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 8001adc:	200d      	movs	r0, #13
 8001ade:	f003 f813 	bl	8004b08 <getNextSub>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae8:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001aea:	e064      	b.n	8001bb6 <configStateMachine+0xb8e>

            case TAPETE_OFF:
                updateUserMsg(0,USERMSG1,outtapeteUserMsg,&displayUpdateStatus);
 8001aec:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <configStateMachine+0xbb4>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	f107 030f 	add.w	r3, r7, #15
 8001af4:	2100      	movs	r1, #0
 8001af6:	2000      	movs	r0, #0
 8001af8:	f001 f984 	bl	8002e04 <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001afc:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <configStateMachine+0xba8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	2102      	movs	r1, #2
 8001b04:	2000      	movs	r0, #0
 8001b06:	f002 f8d9 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <configStateMachine+0xba8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fd38 	bl	8002584 <stringLenght>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4618      	mov	r0, r3
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <configStateMachine+0xbac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2102      	movs	r1, #2
 8001b20:	f002 f8cc 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <configStateMachine+0xbb0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2103      	movs	r1, #3
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f002 f8c5 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 8001b32:	f003 fdcd 	bl	80056d0 <getKeyPressed>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                if(key == AVANCAR)
 8001b3c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b40:	2b41      	cmp	r3, #65	; 0x41
 8001b42:	d10e      	bne.n	8001b62 <configStateMachine+0xb3a>
                {
                	resetKeyPressed();
 8001b44:	f003 fdd0 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001b48:	f107 030f 	add.w	r3, r7, #15
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f001 f974 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8001b52:	200b      	movs	r0, #11
 8001b54:	f002 ffd8 	bl	8004b08 <getNextSub>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b5e:	70da      	strb	r2, [r3, #3]
 8001b60:	e029      	b.n	8001bb6 <configStateMachine+0xb8e>
                }
                else if(key == CONFIRMAR)
 8001b62:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b66:	2b43      	cmp	r3, #67	; 0x43
 8001b68:	d125      	bne.n	8001bb6 <configStateMachine+0xb8e>
                {
                	resetKeyPressed();
 8001b6a:	f003 fdbd 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001b6e:	f107 030f 	add.w	r3, r7, #15
 8001b72:	4618      	mov	r0, r3
 8001b74:	f001 f961 	bl	8002e3a <readyUserInterface>
//subMenuTesteConfigurar->menuSelect = setSelectSub(&subMenuTesteConfigurar->menuState);
                    ptr_userConfiguration->userSelectTapete = FALSE;
 8001b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 8001b80:	200d      	movs	r0, #13
 8001b82:	f002 ffc1 	bl	8004b08 <getNextSub>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b8c:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001b8e:	e012      	b.n	8001bb6 <configStateMachine+0xb8e>

            case SAVE_CONFIGS:
                subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f002 ffb9 	bl	8004b08 <getNextSub>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b9c:	70da      	strb	r2, [r3, #3]
                setInsertData(ptr_userConfiguration);
 8001b9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ba0:	f002 ffc4 	bl	8004b2c <setInsertData>
                readyUserInterface(&displayUpdateStatus);
 8001ba4:	f107 030f 	add.w	r3, r7, #15
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f001 f946 	bl	8002e3a <readyUserInterface>
                key = MENU;
 8001bae:	234d      	movs	r3, #77	; 0x4d
 8001bb0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                break;
 8001bb4:	bf00      	nop
    while(key != MENU)
 8001bb6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001bba:	2b4d      	cmp	r3, #77	; 0x4d
 8001bbc:	f47f aa52 	bne.w	8001064 <configStateMachine+0x3c>
        }
    }
}
 8001bc0:	bf00      	nop
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3758      	adds	r7, #88	; 0x58
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200000ac 	.word	0x200000ac
 8001bd0:	200000d0 	.word	0x200000d0
 8001bd4:	200000d8 	.word	0x200000d8
 8001bd8:	200000dc 	.word	0x200000dc
 8001bdc:	200000b0 	.word	0x200000b0

08001be0 <consultStateMachine>:
        unsigned char menuState;
//        struct dataInsert menuInsert;
    };

unsigned char consultStateMachine(struct Menu* subMenu)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	; 0x30
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuTesteConsultar = subMenu;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    unsigned char* ptr_potString;
    struct results* ptr_structConsultResult;
    unsigned char selectedUserTest = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char testSamples=0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    //unsigned char cursorPosition[2] = {0,0};
    short index = 2; //(000 MENU)
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	81fb      	strh	r3, [r7, #14]
    unsigned char key = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    static unsigned char results = 0;
    unsigned char displayUpdateStatus = IDDLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	737b      	strb	r3, [r7, #13]

    while(key != MENU)
 8001c06:	bf00      	nop
 8001c08:	e19c      	b.n	8001f44 <consultStateMachine+0x364>
    {
        switch(subMenuTesteConsultar->menuState)
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	78db      	ldrb	r3, [r3, #3]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	f200 8198 	bhi.w	8001f44 <consultStateMachine+0x364>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <consultStateMachine+0x3c>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c3d 	.word	0x08001c3d
 8001c24:	08001d2b 	.word	0x08001d2b
 8001c28:	08001eb1 	.word	0x08001eb1
        {
            case IDDLE:
                subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f002 ff6b 	bl	8004b08 <getNextSub>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	70da      	strb	r2, [r3, #3]
            break;
 8001c3a:	e183      	b.n	8001f44 <consultStateMachine+0x364>

            case CONSULTA_TESTE:
                updateUserMsg(0,USERMSG1,consultTestUserMsg,&displayUpdateStatus);
 8001c3c:	4bc6      	ldr	r3, [pc, #792]	; (8001f58 <consultStateMachine+0x378>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	f107 030d 	add.w	r3, r7, #13
 8001c44:	2100      	movs	r1, #0
 8001c46:	2000      	movs	r0, #0
 8001c48:	f001 f8dc 	bl	8002e04 <updateUserMsg>
                ptr_consultTestString = getNumTestString();
 8001c4c:	f000 fdfc 	bl	8002848 <getNumTestString>
 8001c50:	62f8      	str	r0, [r7, #44]	; 0x2c
                HW_PRINT_DATA(0,USERMSG2,ptr_consultTestString);
 8001c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c54:	2101      	movs	r1, #1
 8001c56:	2000      	movs	r0, #0
 8001c58:	f002 f830 	bl	8003cbc <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001c5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c60:	2101      	movs	r1, #1
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 f850 	bl	8003d08 <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001c68:	4bbc      	ldr	r3, [pc, #752]	; (8001f5c <consultStateMachine+0x37c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2102      	movs	r1, #2
 8001c70:	2000      	movs	r0, #0
 8001c72:	f002 f823 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001c76:	4bb9      	ldr	r3, [pc, #740]	; (8001f5c <consultStateMachine+0x37c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fc82 	bl	8002584 <stringLenght>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4618      	mov	r0, r3
 8001c84:	4bb6      	ldr	r3, [pc, #728]	; (8001f60 <consultStateMachine+0x380>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	f002 f816 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001c90:	4bb4      	ldr	r3, [pc, #720]	; (8001f64 <consultStateMachine+0x384>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	2103      	movs	r1, #3
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f002 f80f 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001c9e:	4bb1      	ldr	r3, [pc, #708]	; (8001f64 <consultStateMachine+0x384>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fc6e 	bl	8002584 <stringLenght>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4618      	mov	r0, r3
 8001cac:	4bae      	ldr	r3, [pc, #696]	; (8001f68 <consultStateMachine+0x388>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	f002 f802 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 8001cb8:	f003 fd0a 	bl	80056d0 <getKeyPressed>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if(key == INSERIR)
 8001cc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001cc6:	2b49      	cmp	r3, #73	; 0x49
 8001cc8:	d10e      	bne.n	8001ce8 <consultStateMachine+0x108>
                {
                	resetKeyPressed();
 8001cca:	f003 fd0d 	bl	80056e8 <resetKeyPressed>
                    setUserNumTest(&index);
 8001cce:	f107 030e 	add.w	r3, r7, #14
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 ff5d 	bl	8002b92 <setUserNumTest>
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f002 ff15 	bl	8004b08 <getNextSub>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	70da      	strb	r2, [r3, #3]
 8001ce6:	e12d      	b.n	8001f44 <consultStateMachine+0x364>
                }
                else if(key == AVANCAR)
 8001ce8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001cec:	2b41      	cmp	r3, #65	; 0x41
 8001cee:	d108      	bne.n	8001d02 <consultStateMachine+0x122>
                {
                	resetKeyPressed();
 8001cf0:	f003 fcfa 	bl	80056e8 <resetKeyPressed>
                    indexChange(&index,2);
 8001cf4:	f107 030e 	add.w	r3, r7, #14
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fc88 	bl	8002610 <indexChange>
 8001d00:	e120      	b.n	8001f44 <consultStateMachine+0x364>
                }
                else if(key == CONFIRMAR)
 8001d02:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001d06:	2b43      	cmp	r3, #67	; 0x43
 8001d08:	f040 811c 	bne.w	8001f44 <consultStateMachine+0x364>
                {
                	resetKeyPressed();
 8001d0c:	f003 fcec 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001d10:	f107 030d 	add.w	r3, r7, #13
 8001d14:	4618      	mov	r0, r3
 8001d16:	f001 f890 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f002 fef4 	bl	8004b08 <getNextSub>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	70da      	strb	r2, [r3, #3]
                    //subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
                }
            break;
 8001d28:	e10c      	b.n	8001f44 <consultStateMachine+0x364>

            case RESULT_TESTE:
                selectedUserTest = stringToInt(ptr_consultTestString);
 8001d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d2c:	f000 fc18 	bl	8002560 <stringToInt>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                HW_PRINT_DATA(0,OPTIONMSG,avancarUserMsg);
 8001d36:	4b89      	ldr	r3, [pc, #548]	; (8001f5c <consultStateMachine+0x37c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2103      	movs	r1, #3
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f001 ffbc 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),OPTIONMSG,pararUserMsg);
 8001d44:	4b85      	ldr	r3, [pc, #532]	; (8001f5c <consultStateMachine+0x37c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fc1b 	bl	8002584 <stringLenght>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4618      	mov	r0, r3
 8001d52:	4b86      	ldr	r3, [pc, #536]	; (8001f6c <consultStateMachine+0x38c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	2103      	movs	r1, #3
 8001d5a:	f001 ffaf 	bl	8003cbc <HW_PRINT_DATA>
//                ptr_structConsultResult = load_data(selectedUserTest); //APENAS PARA APLICAÇÃO COM SD
                ptr_structConsultResult = getUserResultData(selectedUserTest);
 8001d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f9f6 	bl	8002154 <getUserResultData>
 8001d68:	61f8      	str	r0, [r7, #28]
                if(testSamples<(ptr_structConsultResult->resultTestAcquiredSamples))
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	785b      	ldrb	r3, [r3, #1]
 8001d6e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d25e      	bcs.n	8001e34 <consultStateMachine+0x254>
                {
                	HW_PRINT_DATA(0,USERMSG1,amostraUserMsg);
 8001d76:	4b7e      	ldr	r3, [pc, #504]	; (8001f70 <consultStateMachine+0x390>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f001 ff9c 	bl	8003cbc <HW_PRINT_DATA>
					ptr_sampleString = param_1_toString(&ptr_structConsultResult->Measurement[testSamples].sampleNum);
 8001d84:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001d88:	4613      	mov	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fd8e 	bl	80028b8 <param_1_toString>
 8001d9c:	61b8      	str	r0, [r7, #24]
					HW_PRINT_DATA(stringLenght(amostraUserMsg),USERMSG1 , ptr_sampleString);
 8001d9e:	4b74      	ldr	r3, [pc, #464]	; (8001f70 <consultStateMachine+0x390>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fbee 	bl	8002584 <stringLenght>
 8001da8:	4603      	mov	r3, r0
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 ff84 	bl	8003cbc <HW_PRINT_DATA>

					HW_PRINT_DATA(0,USERMSG2,tempoVooUserMsg);
 8001db4:	4b6f      	ldr	r3, [pc, #444]	; (8001f74 <consultStateMachine+0x394>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	2101      	movs	r1, #1
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f001 ff7d 	bl	8003cbc <HW_PRINT_DATA>
					ptr_vooTimeString = param_2_toString(&ptr_structConsultResult->Measurement[testSamples].uiVooTime);
 8001dc2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fd83 	bl	80028e0 <param_2_toString>
 8001dda:	6178      	str	r0, [r7, #20]
					HW_PRINT_DATA(stringLenght(tempoVooUserMsg),USERMSG2 ,ptr_vooTimeString);
 8001ddc:	4b65      	ldr	r3, [pc, #404]	; (8001f74 <consultStateMachine+0x394>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fbcf 	bl	8002584 <stringLenght>
 8001de6:	4603      	mov	r3, r0
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	2101      	movs	r1, #1
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 ff65 	bl	8003cbc <HW_PRINT_DATA>


					HW_PRINT_DATA(0,INSERTMSG,tempoSoloUserMsg);
 8001df2:	4b61      	ldr	r3, [pc, #388]	; (8001f78 <consultStateMachine+0x398>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	2102      	movs	r1, #2
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f001 ff5e 	bl	8003cbc <HW_PRINT_DATA>
					ptr_alturaString = param_2_toString(&ptr_structConsultResult->Measurement[testSamples].uiSoloTime);
 8001e00:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	3308      	adds	r3, #8
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	4413      	add	r3, r2
 8001e12:	3304      	adds	r3, #4
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fd63 	bl	80028e0 <param_2_toString>
 8001e1a:	6138      	str	r0, [r7, #16]
					HW_PRINT_DATA(stringLenght(tempoSoloUserMsg),INSERTMSG , ptr_alturaString);
 8001e1c:	4b56      	ldr	r3, [pc, #344]	; (8001f78 <consultStateMachine+0x398>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fbaf 	bl	8002584 <stringLenght>
 8001e26:	4603      	mov	r3, r0
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f001 ff45 	bl	8003cbc <HW_PRINT_DATA>
 8001e32:	e004      	b.n	8001e3e <consultStateMachine+0x25e>

//                  ptr_potString; = param_3_toString(&ptr_structExportResult->Measurement[testSamples].uiSoloTime);
//					HW_PRINT_DATA(0, INSERTMSG, ptr_potString);

                }
                else  HW_PRINT_DATA(0,0,"VAZIO");
 8001e34:	4a51      	ldr	r2, [pc, #324]	; (8001f7c <consultStateMachine+0x39c>)
 8001e36:	2100      	movs	r1, #0
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f001 ff3f 	bl	8003cbc <HW_PRINT_DATA>

                key = getKeyPressed();
 8001e3e:	f003 fc47 	bl	80056d0 <getKeyPressed>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == AVANCAR)
 8001e48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e4c:	2b41      	cmp	r3, #65	; 0x41
 8001e4e:	d11c      	bne.n	8001e8a <consultStateMachine+0x2aa>
                {
                	resetKeyPressed();
 8001e50:	f003 fc4a 	bl	80056e8 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus);
 8001e54:	f107 030d 	add.w	r3, r7, #13
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 ffee 	bl	8002e3a <readyUserInterface>
                    testSamples++;
 8001e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e62:	3301      	adds	r3, #1
 8001e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if(testSamples == ptr_structConsultResult->resultTestAcquiredSamples) testSamples = 0;
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	785b      	ldrb	r3, [r3, #1]
 8001e6c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d102      	bne.n	8001e7a <consultStateMachine+0x29a>
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8001e7a:	2002      	movs	r0, #2
 8001e7c:	f002 fe44 	bl	8004b08 <getNextSub>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	70da      	strb	r2, [r3, #3]
 8001e88:	e05c      	b.n	8001f44 <consultStateMachine+0x364>
                }
                else if(key == PARAR)
 8001e8a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e8e:	2b50      	cmp	r3, #80	; 0x50
 8001e90:	d158      	bne.n	8001f44 <consultStateMachine+0x364>
                {
                	resetKeyPressed();
 8001e92:	f003 fc29 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001e96:	f107 030d 	add.w	r3, r7, #13
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 ffcd 	bl	8002e3a <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(EXPORTAR);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f002 fe31 	bl	8004b08 <getNextSub>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001eae:	e049      	b.n	8001f44 <consultStateMachine+0x364>

            case EXPORTAR:
                updateUserMsg(0,USERMSG1,consultExportUserMsg,&displayUpdateStatus);
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <consultStateMachine+0x3a0>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	f107 030d 	add.w	r3, r7, #13
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f000 ffa2 	bl	8002e04 <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,selecionarUserMsg);
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <consultStateMachine+0x384>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f001 fef7 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,pararUserMsg);
 8001ece:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <consultStateMachine+0x38c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f001 fef0 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 8001edc:	f003 fbf8 	bl	80056d0 <getKeyPressed>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == PARAR)
 8001ee6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001eea:	2b50      	cmp	r3, #80	; 0x50
 8001eec:	d111      	bne.n	8001f12 <consultStateMachine+0x332>
                {
                	resetKeyPressed();
 8001eee:	f003 fbfb 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001ef2:	f107 030d 	add.w	r3, r7, #13
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 ff9f 	bl	8002e3a <readyUserInterface>
                    key = MENU;
 8001efc:	234d      	movs	r3, #77	; 0x4d
 8001efe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f002 fe00 	bl	8004b08 <getNextSub>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	70da      	strb	r2, [r3, #3]
 8001f10:	e017      	b.n	8001f42 <consultStateMachine+0x362>
                }
                else if(key == CONFIRMAR)
 8001f12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f16:	2b43      	cmp	r3, #67	; 0x43
 8001f18:	d113      	bne.n	8001f42 <consultStateMachine+0x362>
                {
                	resetKeyPressed();
 8001f1a:	f003 fbe5 	bl	80056e8 <resetKeyPressed>
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <consultStateMachine+0x3a4>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	f107 030d 	add.w	r3, r7, #13
 8001f26:	2100      	movs	r1, #0
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f000 ff6b 	bl	8002e04 <updateUserMsg>
                    //subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f002 fdea 	bl	8004b08 <getNextSub>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	70da      	strb	r2, [r3, #3]
                    key = MENU;
 8001f3c:	234d      	movs	r3, #77	; 0x4d
 8001f3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                }
                break;
 8001f42:	bf00      	nop
    while(key != MENU)
 8001f44:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f48:	2b4d      	cmp	r3, #77	; 0x4d
 8001f4a:	f47f ae5e 	bne.w	8001c0a <consultStateMachine+0x2a>
        }
    }
}
 8001f4e:	bf00      	nop
 8001f50:	4618      	mov	r0, r3
 8001f52:	3730      	adds	r7, #48	; 0x30
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000074 	.word	0x20000074
 8001f5c:	200000d0 	.word	0x200000d0
 8001f60:	200000d8 	.word	0x200000d8
 8001f64:	200000dc 	.word	0x200000dc
 8001f68:	200000d4 	.word	0x200000d4
 8001f6c:	200000e0 	.word	0x200000e0
 8001f70:	2000004c 	.word	0x2000004c
 8001f74:	20000054 	.word	0x20000054
 8001f78:	20000058 	.word	0x20000058
 8001f7c:	0800fe68 	.word	0x0800fe68
 8001f80:	20000078 	.word	0x20000078
 8001f84:	2000007c 	.word	0x2000007c

08001f88 <getTimeStruct>:
{
    return myData.userSelectTapete;
}

unsigned char* getTimeStruct()
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
    return insertTime;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <getTimeStruct+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000000 	.word	0x20000000

08001fa0 <getIntervalTimeStruct>:

unsigned char* getIntervalTimeStruct()
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
    return intervalTime;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <getIntervalTimeStruct+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <getintervalSeriesTimeStruct>:

unsigned char* getintervalSeriesTimeStruct()
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
    return intervalSeries;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <getintervalSeriesTimeStruct+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <getMassArray>:

unsigned char* getMassArray()
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
    return massArray;
 8001fd4:	4b02      	ldr	r3, [pc, #8]	; (8001fe0 <getMassArray+0x10>)
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	200004f4 	.word	0x200004f4

08001fe4 <getOverMassArray>:

unsigned char* getOverMassArray()
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
    return overMassArray;
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <getOverMassArray+0x10>)
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	200004fc 	.word	0x200004fc

08001ff8 <getAltMinArray>:

unsigned char* getAltMinArray()
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
    return altMinArray;
 8001ffc:	4b02      	ldr	r3, [pc, #8]	; (8002008 <getAltMinArray+0x10>)
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	2000000c 	.word	0x2000000c

0800200c <getAltMaxArray>:

unsigned char* getAltMaxArray()
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
    return altMaxArray;
 8002010:	4b02      	ldr	r3, [pc, #8]	; (800201c <getAltMaxArray+0x10>)
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	20000010 	.word	0x20000010

08002020 <getNumSaltosArray>:

unsigned char* getNumSaltosArray()
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
    return numSaltosArray;
 8002024:	4b02      	ldr	r3, [pc, #8]	; (8002030 <getNumSaltosArray+0x10>)
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	20000504 	.word	0x20000504

08002034 <getTypeJumpArray>:


unsigned char* getTypeJumpArray()
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
    return JumpTypeArray;
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <getTypeJumpArray+0x10>)
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	2000050c 	.word	0x2000050c

08002048 <getAltDJArray>:

unsigned char* getAltDJArray()
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
    return altDJArray;
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <getAltDJArray+0x10>)
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	20000508 	.word	0x20000508

0800205c <getNumSeriesArray>:

unsigned char* getNumSeriesArray()
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
    return numSeriesArray;
 8002060:	4b02      	ldr	r3, [pc, #8]	; (800206c <getNumSeriesArray+0x10>)
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	20000510 	.word	0x20000510

08002070 <getNumTestArray>:

unsigned char* getNumTestArray()
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
    return numTestArray;
 8002074:	4b02      	ldr	r3, [pc, #8]	; (8002080 <getNumTestArray+0x10>)
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	20000014 	.word	0x20000014

08002084 <getEraseTestArray>:

unsigned char* getEraseTestArray()
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
    return selectEraseArray;
 8002088:	4b02      	ldr	r3, [pc, #8]	; (8002094 <getEraseTestArray+0x10>)
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	20000514 	.word	0x20000514

08002098 <getUserConfigStruct>:

unsigned char* getUserConfigStruct() //VERIFICAR SE VOU USAR -- por enquanto sim 26/10
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	return &myData;
 800209c:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <getUserConfigStruct+0x10>)
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	200001f4 	.word	0x200001f4

080020ac <setUserInputConfigData>:
	return myData.userAlturaMax;
}


unsigned char setUserInputConfigData(struct dataInsert* dataToInsert) //alterar
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
    myData.userTest = dataToInsert->userTest;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	4b25      	ldr	r3, [pc, #148]	; (8002150 <setUserInputConfigData+0xa4>)
 80020ba:	701a      	strb	r2, [r3, #0]
    myData.userTime = dataToInsert->userTime;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a23      	ldr	r2, [pc, #140]	; (8002150 <setUserInputConfigData+0xa4>)
 80020c2:	6053      	str	r3, [r2, #4]
    myData.userMass = dataToInsert->userMass;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7a1a      	ldrb	r2, [r3, #8]
 80020c8:	4b21      	ldr	r3, [pc, #132]	; (8002150 <setUserInputConfigData+0xa4>)
 80020ca:	721a      	strb	r2, [r3, #8]
    myData.userOverMass = dataToInsert->userOverMass;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7a5a      	ldrb	r2, [r3, #9]
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <setUserInputConfigData+0xa4>)
 80020d2:	725a      	strb	r2, [r3, #9]
    myData.userConsultTest = dataToInsert->userConsultTest;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7a9a      	ldrb	r2, [r3, #10]
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <setUserInputConfigData+0xa4>)
 80020da:	729a      	strb	r2, [r3, #10]
    myData.userAlturaMin = dataToInsert->userAlturaMin;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <setUserInputConfigData+0xa4>)
 80020e2:	60d3      	str	r3, [r2, #12]
    myData.userAlturaMax = dataToInsert->userAlturaMax;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	4a19      	ldr	r2, [pc, #100]	; (8002150 <setUserInputConfigData+0xa4>)
 80020ea:	6113      	str	r3, [r2, #16]
    myData.userNumSaltos = dataToInsert->userNumSaltos;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7d1a      	ldrb	r2, [r3, #20]
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <setUserInputConfigData+0xa4>)
 80020f2:	751a      	strb	r2, [r3, #20]
    myData.userIntervalSaltos = dataToInsert->userIntervalSaltos;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4a15      	ldr	r2, [pc, #84]	; (8002150 <setUserInputConfigData+0xa4>)
 80020fa:	6193      	str	r3, [r2, #24]
    myData.userCMJ = dataToInsert->userCMJ;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7f1a      	ldrb	r2, [r3, #28]
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <setUserInputConfigData+0xa4>)
 8002102:	771a      	strb	r2, [r3, #28]
    myData.userAlturaDJ = dataToInsert->userAlturaDJ;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7f5a      	ldrb	r2, [r3, #29]
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <setUserInputConfigData+0xa4>)
 800210a:	775a      	strb	r2, [r3, #29]
    myData.userNumSeries = dataToInsert->userNumSeries;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7f9a      	ldrb	r2, [r3, #30]
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <setUserInputConfigData+0xa4>)
 8002112:	779a      	strb	r2, [r3, #30]
    myData.userIntervalSeries = dataToInsert->userIntervalSeries;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <setUserInputConfigData+0xa4>)
 800211a:	6213      	str	r3, [r2, #32]
    myData.userCommConfig = dataToInsert->userCommConfig;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <setUserInputConfigData+0xa4>)
 8002124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    myData.userSelectTapete = dataToInsert->userSelectTapete;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <setUserInputConfigData+0xa4>)
 8002130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    myData.userSelectSensorChannel = dataToInsert->userSelectSensorChannel;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <setUserInputConfigData+0xa4>)
 800213c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002140:	bf00      	nop
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	200001f4 	.word	0x200001f4

08002154 <getUserResultData>:

unsigned int* getUserResultData(unsigned char numTest)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
    return &myResults[numTest-1];
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	1e5a      	subs	r2, r3, #1
 8002162:	4613      	mov	r3, r2
 8002164:	015b      	lsls	r3, r3, #5
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4a04      	ldr	r2, [pc, #16]	; (800217c <getUserResultData+0x28>)
 800216c:	4413      	add	r3, r2
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	2000021c 	.word	0x2000021c

08002180 <getResultTestNumber>:

unsigned char getResultTestNumber()
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
    return numberTest;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <getResultTestNumber+0x14>)
 8002186:	781b      	ldrb	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000515 	.word	0x20000515

08002198 <setResultTestNumber>:
{
     myResults[numTest].thereAreData = TRUE;
}

unsigned char setResultTestNumber()
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
     numberTest++;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <setResultTestNumber+0x1c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <setResultTestNumber+0x1c>)
 80021a6:	701a      	strb	r2, [r3, #0]
}
 80021a8:	bf00      	nop
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	20000515 	.word	0x20000515

080021b8 <setUserResultData>:

unsigned char setUserResultData(struct results* structDataResult, unsigned char numTest)
{
 80021b8:	b4b0      	push	{r4, r5, r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
	unsigned char numSample = structDataResult->resultTestAcquiredSamples;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	73bb      	strb	r3, [r7, #14]
    myResults[numTest].resultTestNum = numTest+1;
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	3301      	adds	r3, #1
 80021d0:	b2d8      	uxtb	r0, r3
 80021d2:	4955      	ldr	r1, [pc, #340]	; (8002328 <setUserResultData+0x170>)
 80021d4:	4613      	mov	r3, r2
 80021d6:	015b      	lsls	r3, r3, #5
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	4602      	mov	r2, r0
 80021e0:	701a      	strb	r2, [r3, #0]
    myResults[numTest].resultTestAcquiredSamples = numSample;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	4950      	ldr	r1, [pc, #320]	; (8002328 <setUserResultData+0x170>)
 80021e6:	4613      	mov	r3, r2
 80021e8:	015b      	lsls	r3, r3, #5
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	3301      	adds	r3, #1
 80021f2:	7bba      	ldrb	r2, [r7, #14]
 80021f4:	701a      	strb	r2, [r3, #0]
    myResults[numTest].thereAreData = TRUE;
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	494b      	ldr	r1, [pc, #300]	; (8002328 <setUserResultData+0x170>)
 80021fa:	4613      	mov	r3, r2
 80021fc:	015b      	lsls	r3, r3, #5
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	3302      	adds	r3, #2
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 800220a:	2300      	movs	r3, #0
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	e080      	b.n	8002312 <setUserResultData+0x15a>
    {
        myResults[numTest].Measurement[i].sampleNum = structDataResult->Measurement[i].sampleNum;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	78f9      	ldrb	r1, [r7, #3]
 8002214:	7bf8      	ldrb	r0, [r7, #15]
 8002216:	687c      	ldr	r4, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4423      	add	r3, r4
 8002222:	3304      	adds	r3, #4
 8002224:	781d      	ldrb	r5, [r3, #0]
 8002226:	4c40      	ldr	r4, [pc, #256]	; (8002328 <setUserResultData+0x170>)
 8002228:	4602      	mov	r2, r0
 800222a:	0052      	lsls	r2, r2, #1
 800222c:	4402      	add	r2, r0
 800222e:	00d3      	lsls	r3, r2, #3
 8002230:	461a      	mov	r2, r3
 8002232:	460b      	mov	r3, r1
 8002234:	015b      	lsls	r3, r3, #5
 8002236:	1a5b      	subs	r3, r3, r1
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	4423      	add	r3, r4
 800223e:	3304      	adds	r3, #4
 8002240:	462a      	mov	r2, r5
 8002242:	701a      	strb	r2, [r3, #0]
        myResults[numTest].Measurement[i].alturaSalto = structDataResult->Measurement[i].alturaSalto;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	78f9      	ldrb	r1, [r7, #3]
 8002248:	7bf8      	ldrb	r0, [r7, #15]
 800224a:	687c      	ldr	r4, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4423      	add	r3, r4
 8002256:	3314      	adds	r3, #20
 8002258:	681c      	ldr	r4, [r3, #0]
 800225a:	4d33      	ldr	r5, [pc, #204]	; (8002328 <setUserResultData+0x170>)
 800225c:	4602      	mov	r2, r0
 800225e:	0052      	lsls	r2, r2, #1
 8002260:	4402      	add	r2, r0
 8002262:	00d3      	lsls	r3, r2, #3
 8002264:	461a      	mov	r2, r3
 8002266:	460b      	mov	r3, r1
 8002268:	015b      	lsls	r3, r3, #5
 800226a:	1a5b      	subs	r3, r3, r1
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	442b      	add	r3, r5
 8002272:	3314      	adds	r3, #20
 8002274:	601c      	str	r4, [r3, #0]
        myResults[numTest].Measurement[i].potenciaSalto = structDataResult->Measurement[i].potenciaSalto;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	78f9      	ldrb	r1, [r7, #3]
 800227a:	7bf8      	ldrb	r0, [r7, #15]
 800227c:	687c      	ldr	r4, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4423      	add	r3, r4
 8002288:	3318      	adds	r3, #24
 800228a:	681c      	ldr	r4, [r3, #0]
 800228c:	4d26      	ldr	r5, [pc, #152]	; (8002328 <setUserResultData+0x170>)
 800228e:	4602      	mov	r2, r0
 8002290:	0052      	lsls	r2, r2, #1
 8002292:	4402      	add	r2, r0
 8002294:	00d3      	lsls	r3, r2, #3
 8002296:	461a      	mov	r2, r3
 8002298:	460b      	mov	r3, r1
 800229a:	015b      	lsls	r3, r3, #5
 800229c:	1a5b      	subs	r3, r3, r1
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	442b      	add	r3, r5
 80022a4:	3318      	adds	r3, #24
 80022a6:	601c      	str	r4, [r3, #0]
        myResults[numTest].Measurement[i].uiSoloTime = structDataResult->Measurement[i].uiSoloTime;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	78f9      	ldrb	r1, [r7, #3]
 80022ac:	7bf8      	ldrb	r0, [r7, #15]
 80022ae:	687c      	ldr	r4, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4423      	add	r3, r4
 80022ba:	330c      	adds	r3, #12
 80022bc:	681c      	ldr	r4, [r3, #0]
 80022be:	4d1a      	ldr	r5, [pc, #104]	; (8002328 <setUserResultData+0x170>)
 80022c0:	4602      	mov	r2, r0
 80022c2:	0052      	lsls	r2, r2, #1
 80022c4:	4402      	add	r2, r0
 80022c6:	00d3      	lsls	r3, r2, #3
 80022c8:	461a      	mov	r2, r3
 80022ca:	460b      	mov	r3, r1
 80022cc:	015b      	lsls	r3, r3, #5
 80022ce:	1a5b      	subs	r3, r3, r1
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	442b      	add	r3, r5
 80022d6:	330c      	adds	r3, #12
 80022d8:	601c      	str	r4, [r3, #0]
        myResults[numTest].Measurement[i].uiVooTime = structDataResult->Measurement[i].uiVooTime;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	78f9      	ldrb	r1, [r7, #3]
 80022de:	7bf8      	ldrb	r0, [r7, #15]
 80022e0:	687c      	ldr	r4, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4423      	add	r3, r4
 80022ec:	3308      	adds	r3, #8
 80022ee:	681c      	ldr	r4, [r3, #0]
 80022f0:	4d0d      	ldr	r5, [pc, #52]	; (8002328 <setUserResultData+0x170>)
 80022f2:	4602      	mov	r2, r0
 80022f4:	0052      	lsls	r2, r2, #1
 80022f6:	4402      	add	r2, r0
 80022f8:	00d3      	lsls	r3, r2, #3
 80022fa:	461a      	mov	r2, r3
 80022fc:	460b      	mov	r3, r1
 80022fe:	015b      	lsls	r3, r3, #5
 8002300:	1a5b      	subs	r3, r3, r1
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	442b      	add	r3, r5
 8002308:	3308      	adds	r3, #8
 800230a:	601c      	str	r4, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	3301      	adds	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	429a      	cmp	r2, r3
 8002318:	f4ff af7a 	bcc.w	8002210 <setUserResultData+0x58>
    }
}
 800231c:	bf00      	nop
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bcb0      	pop	{r4, r5, r7}
 8002326:	4770      	bx	lr
 8002328:	2000021c 	.word	0x2000021c

0800232c <resetConfigStruct>:
    }

}

unsigned char resetConfigStruct(struct dataInsert* structToReset)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    structToReset->userTest = 0;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
    structToReset->userAlturaDJ = 0;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	775a      	strb	r2, [r3, #29]
    structToReset->userAlturaMax = 0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
    structToReset->userAlturaMin = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
    structToReset->userCMJ = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	771a      	strb	r2, [r3, #28]
    structToReset->userCommConfig = 0;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    structToReset->userConsultTest = 0;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	729a      	strb	r2, [r3, #10]
    structToReset->userIntervalSaltos = 0;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	619a      	str	r2, [r3, #24]
    structToReset->userIntervalSeries = 0;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	621a      	str	r2, [r3, #32]
    structToReset->userMass = 0;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	721a      	strb	r2, [r3, #8]
    structToReset->userNumSaltos = 0;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	751a      	strb	r2, [r3, #20]
    structToReset->userNumSeries = 0;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	779a      	strb	r2, [r3, #30]
    structToReset->userOverMass = 0;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	725a      	strb	r2, [r3, #9]
    structToReset->userSelectSensorChannel = 0;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    structToReset->userSelectTapete = 0;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    structToReset->userTime = 0;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	605a      	str	r2, [r3, #4]

}
 800239a:	bf00      	nop
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <resetMyResults>:

void resetMyResults()
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
    numberTest = 0;
 80023ae:	4b36      	ldr	r3, [pc, #216]	; (8002488 <resetMyResults+0xe0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
    for(unsigned char test=0;test<TEST_SIZE;test++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	71fb      	strb	r3, [r7, #7]
 80023b8:	e05b      	b.n	8002472 <resetMyResults+0xca>
    {
        myResults[test].resultTestNum = 0;
 80023ba:	79fa      	ldrb	r2, [r7, #7]
 80023bc:	4933      	ldr	r1, [pc, #204]	; (800248c <resetMyResults+0xe4>)
 80023be:	4613      	mov	r3, r2
 80023c0:	015b      	lsls	r3, r3, #5
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
        myResults[test].resultTestAcquiredSamples = 0;
 80023cc:	79fa      	ldrb	r2, [r7, #7]
 80023ce:	492f      	ldr	r1, [pc, #188]	; (800248c <resetMyResults+0xe4>)
 80023d0:	4613      	mov	r3, r2
 80023d2:	015b      	lsls	r3, r3, #5
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	3301      	adds	r3, #1
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
        myResults[test].thereAreData = FALSE;
 80023e0:	79fa      	ldrb	r2, [r7, #7]
 80023e2:	492a      	ldr	r1, [pc, #168]	; (800248c <resetMyResults+0xe4>)
 80023e4:	4613      	mov	r3, r2
 80023e6:	015b      	lsls	r3, r3, #5
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3302      	adds	r3, #2
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	e035      	b.n	8002466 <resetMyResults+0xbe>
        {
            myResults[test].Measurement[sample].sampleNum = 0;
 80023fa:	79f9      	ldrb	r1, [r7, #7]
 80023fc:	4823      	ldr	r0, [pc, #140]	; (800248c <resetMyResults+0xe4>)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	0052      	lsls	r2, r2, #1
 8002404:	441a      	add	r2, r3
 8002406:	00d3      	lsls	r3, r2, #3
 8002408:	461a      	mov	r2, r3
 800240a:	460b      	mov	r3, r1
 800240c:	015b      	lsls	r3, r3, #5
 800240e:	1a5b      	subs	r3, r3, r1
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	4403      	add	r3, r0
 8002416:	3304      	adds	r3, #4
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
            myResults[test].Measurement[sample].alturaSalto = 0;
 800241c:	79f9      	ldrb	r1, [r7, #7]
 800241e:	481b      	ldr	r0, [pc, #108]	; (800248c <resetMyResults+0xe4>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	0052      	lsls	r2, r2, #1
 8002426:	441a      	add	r2, r3
 8002428:	00d3      	lsls	r3, r2, #3
 800242a:	461a      	mov	r2, r3
 800242c:	460b      	mov	r3, r1
 800242e:	015b      	lsls	r3, r3, #5
 8002430:	1a5b      	subs	r3, r3, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	4403      	add	r3, r0
 8002438:	3314      	adds	r3, #20
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
            myResults[test].Measurement[sample].uiSoloTime = 0;
 800243e:	79f9      	ldrb	r1, [r7, #7]
 8002440:	4812      	ldr	r0, [pc, #72]	; (800248c <resetMyResults+0xe4>)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	0052      	lsls	r2, r2, #1
 8002448:	441a      	add	r2, r3
 800244a:	00d3      	lsls	r3, r2, #3
 800244c:	461a      	mov	r2, r3
 800244e:	460b      	mov	r3, r1
 8002450:	015b      	lsls	r3, r3, #5
 8002452:	1a5b      	subs	r3, r3, r1
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	4403      	add	r3, r0
 800245a:	330c      	adds	r3, #12
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b04      	cmp	r3, #4
 800246a:	d9c6      	bls.n	80023fa <resetMyResults+0x52>
    for(unsigned char test=0;test<TEST_SIZE;test++)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	3301      	adds	r3, #1
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d9a0      	bls.n	80023ba <resetMyResults+0x12>
        }

    }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000515 	.word	0x20000515
 800248c:	2000021c 	.word	0x2000021c

08002490 <indexColumn>:
        *index = 0;
    }
}

unsigned char indexColumn(short* currentColumn, unsigned char size)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
    *currentColumn = *currentColumn -1;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	801a      	strh	r2, [r3, #0]
    if(*currentColumn == 5) *currentColumn = *currentColumn -1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d109      	bne.n	80024cc <indexColumn+0x3c>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	b21a      	sxth	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	801a      	strh	r2, [r3, #0]
 80024ca:	e00d      	b.n	80024e8 <indexColumn+0x58>
    else if(*currentColumn == 2) *currentColumn = *currentColumn -1;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d108      	bne.n	80024e8 <indexColumn+0x58>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	b21a      	sxth	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	801a      	strh	r2, [r3, #0]
    if(*currentColumn <0)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	da03      	bge.n	80024fa <indexColumn+0x6a>
    {
        *currentColumn = size;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	b21a      	sxth	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	801a      	strh	r2, [r3, #0]
    }
}
 80024fa:	bf00      	nop
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <milisecondsTime>:

unsigned long milisecondsTime(unsigned char* ptr_inputTime)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	struct tm* time = ptr_inputTime;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	60fb      	str	r3, [r7, #12]
	unsigned long int msTime = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]

	msTime = time->tm_hour*3600;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	60bb      	str	r3, [r7, #8]
	msTime += time->tm_min*60;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4413      	add	r3, r2
 8002538:	60bb      	str	r3, [r7, #8]
	msTime += time->tm_sec;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4413      	add	r3, r2
 8002544:	60bb      	str	r3, [r7, #8]
	msTime = msTime*1000;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800254c:	fb02 f303 	mul.w	r3, r2, r3
 8002550:	60bb      	str	r3, [r7, #8]

	return msTime;
 8002552:	68bb      	ldr	r3, [r7, #8]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <stringToInt>:
    //fazer a convers�o de hhmmss para ms
    return intTime;
}

unsigned int stringToInt(unsigned char* string) //REFAZER
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
    char *ptr;
    unsigned int x = strtol(string,&ptr,10);
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	220a      	movs	r2, #10
 800256e:	4619      	mov	r1, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f00c f903 	bl	800e77c <strtol>
 8002576:	4603      	mov	r3, r0
 8002578:	60fb      	str	r3, [r7, #12]
    return x;
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <stringLenght>:
    float x = strtof(string,NULL);
    return x;
}

unsigned char stringLenght(unsigned char* str)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
    unsigned char strLen = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
    for(unsigned i = 0; str[i] != '\0';i++)
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	e005      	b.n	80025a2 <stringLenght+0x1e>
        strLen++;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	3301      	adds	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
    for(unsigned i = 0; str[i] != '\0';i++)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	3301      	adds	r3, #1
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4413      	add	r3, r2
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f3      	bne.n	8002596 <stringLenght+0x12>
    return strLen;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <indexMass>:

unsigned char indexMass(short* index)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
    *index = *index -1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b21a      	sxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	801a      	strh	r2, [r3, #0]
    if(*index == 3) *index = *index -1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d108      	bne.n	80025f2 <indexMass+0x36>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	b21a      	sxth	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	da02      	bge.n	8002602 <indexMass+0x46>
    {
        *index = 4;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2204      	movs	r2, #4
 8002600:	801a      	strh	r2, [r3, #0]
    }
}
 8002602:	bf00      	nop
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <indexChange>:

unsigned char indexChange(short* index, unsigned char size)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
    *index = *index - 1;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29b      	uxth	r3, r3
 8002628:	b21a      	sxth	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002634:	2b00      	cmp	r3, #0
 8002636:	da03      	bge.n	8002640 <indexChange+0x30>
    {
        *index = size;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	b21a      	sxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	801a      	strh	r2, [r3, #0]
    }
}
 8002640:	bf00      	nop
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <getAltMinString>:

unsigned char* getAltMinString()
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af02      	add	r7, sp, #8
    unsigned char* altMinArray = getAltMinArray();
 8002656:	f7ff fccf 	bl	8001ff8 <getAltMinArray>
 800265a:	6078      	str	r0, [r7, #4]
    sprintf(altMinString,"%d%d%d",altMinArray[0],altMinArray[1],altMinArray[2]);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3301      	adds	r3, #1
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	4619      	mov	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3302      	adds	r3, #2
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	460b      	mov	r3, r1
 8002674:	4904      	ldr	r1, [pc, #16]	; (8002688 <getAltMinString+0x38>)
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <getAltMinString+0x3c>)
 8002678:	f00b faa0 	bl	800dbbc <siprintf>
    return altMinString;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <getAltMinString+0x3c>)
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	0800fe70 	.word	0x0800fe70
 800268c:	20000530 	.word	0x20000530

08002690 <getAltMaxString>:

unsigned char* getAltMaxString()
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af02      	add	r7, sp, #8
    unsigned char* altMaxArray = getAltMaxArray();
 8002696:	f7ff fcb9 	bl	800200c <getAltMaxArray>
 800269a:	6078      	str	r0, [r7, #4]
    sprintf(altMaxString,"%d%d%d",altMaxArray[0],altMaxArray[1],altMaxArray[2]);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3301      	adds	r3, #1
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3302      	adds	r3, #2
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	460b      	mov	r3, r1
 80026b4:	4904      	ldr	r1, [pc, #16]	; (80026c8 <getAltMaxString+0x38>)
 80026b6:	4805      	ldr	r0, [pc, #20]	; (80026cc <getAltMaxString+0x3c>)
 80026b8:	f00b fa80 	bl	800dbbc <siprintf>
    return altMaxString;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <getAltMaxString+0x3c>)
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	0800fe70 	.word	0x0800fe70
 80026cc:	2000053c 	.word	0x2000053c

080026d0 <getNumSaltosString>:

unsigned char* getNumSaltosString()
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af02      	add	r7, sp, #8
    unsigned char* numSaltosArray = getNumSaltosArray();
 80026d6:	f7ff fca3 	bl	8002020 <getNumSaltosArray>
 80026da:	6078      	str	r0, [r7, #4]
    sprintf(numSaltosString,"%d%d%d",numSaltosArray[0],numSaltosArray[1],numSaltosArray[2]);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3301      	adds	r3, #1
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3302      	adds	r3, #2
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	460b      	mov	r3, r1
 80026f4:	4904      	ldr	r1, [pc, #16]	; (8002708 <getNumSaltosString+0x38>)
 80026f6:	4805      	ldr	r0, [pc, #20]	; (800270c <getNumSaltosString+0x3c>)
 80026f8:	f00b fa60 	bl	800dbbc <siprintf>
    return numSaltosString;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <getNumSaltosString+0x3c>)
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	0800fe70 	.word	0x0800fe70
 800270c:	20000548 	.word	0x20000548

08002710 <getTypeJumpString>:

unsigned char* getTypeJumpString()
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
    unsigned char* typeJumpArray = getTypeJumpArray();
 8002716:	f7ff fc8d 	bl	8002034 <getTypeJumpArray>
 800271a:	6078      	str	r0, [r7, #4]
    sprintf(tipoSaltoString,"%d",typeJumpArray[0]);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4904      	ldr	r1, [pc, #16]	; (8002734 <getTypeJumpString+0x24>)
 8002724:	4804      	ldr	r0, [pc, #16]	; (8002738 <getTypeJumpString+0x28>)
 8002726:	f00b fa49 	bl	800dbbc <siprintf>
    return tipoSaltoString;
 800272a:	4b03      	ldr	r3, [pc, #12]	; (8002738 <getTypeJumpString+0x28>)
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	0800fe78 	.word	0x0800fe78
 8002738:	20000554 	.word	0x20000554

0800273c <getAltDJString>:

unsigned char* getAltDJString()
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
    unsigned char* altDJArray = getAltDJArray();
 8002742:	f7ff fc81 	bl	8002048 <getAltDJArray>
 8002746:	6078      	str	r0, [r7, #4]
    sprintf(altDJString,"%d%d%",altDJArray[0],altDJArray[1]);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3301      	adds	r3, #1
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4904      	ldr	r1, [pc, #16]	; (8002768 <getAltDJString+0x2c>)
 8002756:	4805      	ldr	r0, [pc, #20]	; (800276c <getAltDJString+0x30>)
 8002758:	f00b fa30 	bl	800dbbc <siprintf>
    return altDJString;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <getAltDJString+0x30>)
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	0800fe7c 	.word	0x0800fe7c
 800276c:	20000560 	.word	0x20000560

08002770 <getNumSeriesString>:

unsigned char* getNumSeriesString()
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af02      	add	r7, sp, #8
    unsigned char* numSeriesArray = getNumSeriesArray();
 8002776:	f7ff fc71 	bl	800205c <getNumSeriesArray>
 800277a:	6078      	str	r0, [r7, #4]
    sprintf(numSeriesString,"%d%d%d",numSeriesArray[0],numSeriesArray[1],numSeriesArray[2]);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3301      	adds	r3, #1
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3302      	adds	r3, #2
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	460b      	mov	r3, r1
 8002794:	4904      	ldr	r1, [pc, #16]	; (80027a8 <getNumSeriesString+0x38>)
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <getNumSeriesString+0x3c>)
 8002798:	f00b fa10 	bl	800dbbc <siprintf>
    return numSeriesString;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <getNumSeriesString+0x3c>)
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	0800fe70 	.word	0x0800fe70
 80027ac:	2000056c 	.word	0x2000056c

080027b0 <getMassString>:
    sprintf(interSeriesString,"%d%d%d",intervalSeriesArray[0],intervalSeriesArray[1],intervalSeriesArray[2]);
    return interSeriesString;
}

unsigned char* getMassString()
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af02      	add	r7, sp, #8
    unsigned char* massArray = getMassArray();
 80027b6:	f7ff fc0b 	bl	8001fd0 <getMassArray>
 80027ba:	6078      	str	r0, [r7, #4]
    sprintf(massString,"%d%d%d.%d",massArray[0],massArray[1],massArray[2],massArray[4]);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3301      	adds	r3, #1
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3302      	adds	r3, #2
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3304      	adds	r3, #4
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	9200      	str	r2, [sp, #0]
 80027dc:	4603      	mov	r3, r0
 80027de:	460a      	mov	r2, r1
 80027e0:	4904      	ldr	r1, [pc, #16]	; (80027f4 <getMassString+0x44>)
 80027e2:	4805      	ldr	r0, [pc, #20]	; (80027f8 <getMassString+0x48>)
 80027e4:	f00b f9ea 	bl	800dbbc <siprintf>
    //massArray[3] ficou representando o "." no display
    return massString;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <getMassString+0x48>)
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	0800fe84 	.word	0x0800fe84
 80027f8:	20000518 	.word	0x20000518

080027fc <getOverMassString>:

unsigned char* getOverMassString()
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af02      	add	r7, sp, #8
    unsigned char* overMassArray = getOverMassArray();
 8002802:	f7ff fbef 	bl	8001fe4 <getOverMassArray>
 8002806:	6078      	str	r0, [r7, #4]
    sprintf(overMassString,"%d%d%d.%d",overMassArray[0],overMassArray[1],overMassArray[2],overMassArray[4]);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3301      	adds	r3, #1
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3302      	adds	r3, #2
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3304      	adds	r3, #4
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	9200      	str	r2, [sp, #0]
 8002828:	4603      	mov	r3, r0
 800282a:	460a      	mov	r2, r1
 800282c:	4904      	ldr	r1, [pc, #16]	; (8002840 <getOverMassString+0x44>)
 800282e:	4805      	ldr	r0, [pc, #20]	; (8002844 <getOverMassString+0x48>)
 8002830:	f00b f9c4 	bl	800dbbc <siprintf>
    return overMassString;
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <getOverMassString+0x48>)
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	0800fe84 	.word	0x0800fe84
 8002844:	20000524 	.word	0x20000524

08002848 <getNumTestString>:

unsigned char* getNumTestString()
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af02      	add	r7, sp, #8
    unsigned char* numTestArray = getNumTestArray();
 800284e:	f7ff fc0f 	bl	8002070 <getNumTestArray>
 8002852:	6078      	str	r0, [r7, #4]
    sprintf(numTestString,"%d%d%d",numTestArray[0],numTestArray[1],numTestArray[2]);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3301      	adds	r3, #1
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3302      	adds	r3, #2
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	460b      	mov	r3, r1
 800286c:	4904      	ldr	r1, [pc, #16]	; (8002880 <getNumTestString+0x38>)
 800286e:	4805      	ldr	r0, [pc, #20]	; (8002884 <getNumTestString+0x3c>)
 8002870:	f00b f9a4 	bl	800dbbc <siprintf>
    return numTestString;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <getNumTestString+0x3c>)
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	0800fe70 	.word	0x0800fe70
 8002884:	20000578 	.word	0x20000578

08002888 <getEraseTestString>:

unsigned char* getEraseTestString()
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
    unsigned char* eraseTestArray = getEraseTestArray();
 800288e:	f7ff fbf9 	bl	8002084 <getEraseTestArray>
 8002892:	4603      	mov	r3, r0
 8002894:	607b      	str	r3, [r7, #4]
    sprintf(eraseTestString,"(%d)",eraseTestArray[0]);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4904      	ldr	r1, [pc, #16]	; (80028b0 <getEraseTestString+0x28>)
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <getEraseTestString+0x2c>)
 80028a0:	f00b f98c 	bl	800dbbc <siprintf>
    return eraseTestString;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <getEraseTestString+0x2c>)
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	0800fe90 	.word	0x0800fe90
 80028b4:	20000584 	.word	0x20000584

080028b8 <param_1_toString>:
	static unsigned char saveResultString[50];
	return saveResultString;
}

unsigned int* param_1_toString(unsigned int* string)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
    static unsigned int result[TEST_SIZE];
    sprintf(result,"%d",*string);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4904      	ldr	r1, [pc, #16]	; (80028d8 <param_1_toString+0x20>)
 80028c8:	4804      	ldr	r0, [pc, #16]	; (80028dc <param_1_toString+0x24>)
 80028ca:	f00b f977 	bl	800dbbc <siprintf>
    return result;
 80028ce:	4b03      	ldr	r3, [pc, #12]	; (80028dc <param_1_toString+0x24>)
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	0800fe78 	.word	0x0800fe78
 80028dc:	20000590 	.word	0x20000590

080028e0 <param_2_toString>:

unsigned int* param_2_toString(unsigned int* string)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
    static unsigned int result[TEST_SIZE];
    sprintf(result,"%dms",*string);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4904      	ldr	r1, [pc, #16]	; (8002900 <param_2_toString+0x20>)
 80028f0:	4804      	ldr	r0, [pc, #16]	; (8002904 <param_2_toString+0x24>)
 80028f2:	f00b f963 	bl	800dbbc <siprintf>
    return result;
 80028f6:	4b03      	ldr	r3, [pc, #12]	; (8002904 <param_2_toString+0x24>)
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	0800fe98 	.word	0x0800fe98
 8002904:	200005a4 	.word	0x200005a4

08002908 <setUserAltMin>:
    sprintf(result,"%c",*string);
    return result;
}

unsigned char setUserAltMin(unsigned char* idx)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    unsigned char* altMinArray = getAltMinArray();
 8002910:	f7ff fb72 	bl	8001ff8 <getAltMinArray>
 8002914:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	72fb      	strb	r3, [r7, #11]
    altMinArray[index] = altMinArray[index]+1;
 800291c:	7afb      	ldrb	r3, [r7, #11]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	7afb      	ldrb	r3, [r7, #11]
 8002926:	68f9      	ldr	r1, [r7, #12]
 8002928:	440b      	add	r3, r1
 800292a:	3201      	adds	r2, #1
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]
    if(altMinArray[index]>9) altMinArray[index]= 0;
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4413      	add	r3, r2
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b09      	cmp	r3, #9
 800293a:	d904      	bls.n	8002946 <setUserAltMin+0x3e>
 800293c:	7afb      	ldrb	r3, [r7, #11]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <setUserErase>:

unsigned char setUserErase(unsigned int* idx)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
    unsigned char* eraseArray = getEraseTestArray();
 8002958:	f7ff fb94 	bl	8002084 <getEraseTestArray>
 800295c:	4603      	mov	r3, r0
 800295e:	60fb      	str	r3, [r7, #12]
    unsigned int index = *idx;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60bb      	str	r3, [r7, #8]
    eraseArray[index] = eraseArray[index]+1;
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4413      	add	r3, r2
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	68f9      	ldr	r1, [r7, #12]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	440b      	add	r3, r1
 8002974:	3201      	adds	r2, #1
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]
    if(eraseArray[index]>9) eraseArray[index]= 0;
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4413      	add	r3, r2
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b09      	cmp	r3, #9
 8002984:	d904      	bls.n	8002990 <setUserErase+0x40>
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4413      	add	r3, r2
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
}
 8002990:	bf00      	nop
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <setUserAltMax>:

unsigned char setUserAltMax(unsigned char* idx)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
    unsigned char* altMaxArray = getAltMaxArray();
 80029a2:	f7ff fb33 	bl	800200c <getAltMaxArray>
 80029a6:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	72fb      	strb	r3, [r7, #11]
    altMaxArray[index] = altMaxArray[index]+1;
 80029ae:	7afb      	ldrb	r3, [r7, #11]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	7afb      	ldrb	r3, [r7, #11]
 80029b8:	68f9      	ldr	r1, [r7, #12]
 80029ba:	440b      	add	r3, r1
 80029bc:	3201      	adds	r2, #1
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
    if(altMaxArray[index]>9) altMaxArray[index]= 0;
 80029c2:	7afb      	ldrb	r3, [r7, #11]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b09      	cmp	r3, #9
 80029cc:	d904      	bls.n	80029d8 <setUserAltMax+0x3e>
 80029ce:	7afb      	ldrb	r3, [r7, #11]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
}
 80029d8:	bf00      	nop
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <setUserNumSaltos>:

unsigned char setUserNumSaltos(unsigned char* idx)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
    unsigned char* numSaltosArray = getNumSaltosArray();
 80029ea:	f7ff fb19 	bl	8002020 <getNumSaltosArray>
 80029ee:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	72fb      	strb	r3, [r7, #11]
    numSaltosArray[index] = numSaltosArray[index]+1;
 80029f6:	7afb      	ldrb	r3, [r7, #11]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	781a      	ldrb	r2, [r3, #0]
 80029fe:	7afb      	ldrb	r3, [r7, #11]
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	440b      	add	r3, r1
 8002a04:	3201      	adds	r2, #1
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]
    if(numSaltosArray[index]>9) numSaltosArray[index]= 0;
 8002a0a:	7afb      	ldrb	r3, [r7, #11]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b09      	cmp	r3, #9
 8002a14:	d904      	bls.n	8002a20 <setUserNumSaltos+0x3e>
 8002a16:	7afb      	ldrb	r3, [r7, #11]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
}
 8002a20:	bf00      	nop
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <setUserTypeJump>:

unsigned char setUserTypeJump(unsigned char* idx)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
    unsigned char* typeJumpArray = getTypeJumpArray();
 8002a32:	f7ff faff 	bl	8002034 <getTypeJumpArray>
 8002a36:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	72fb      	strb	r3, [r7, #11]
    typeJumpArray[index] = typeJumpArray[index]+1;
 8002a3e:	7afb      	ldrb	r3, [r7, #11]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4413      	add	r3, r2
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	7afb      	ldrb	r3, [r7, #11]
 8002a48:	68f9      	ldr	r1, [r7, #12]
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3201      	adds	r2, #1
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]
    if(typeJumpArray[index]>3) typeJumpArray[index]= 0;
 8002a52:	7afb      	ldrb	r3, [r7, #11]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4413      	add	r3, r2
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d904      	bls.n	8002a68 <setUserTypeJump+0x3e>
 8002a5e:	7afb      	ldrb	r3, [r7, #11]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <setUserAltDJ>:

unsigned char setUserAltDJ(unsigned char* idx)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
    unsigned char* AltDJArray = getAltDJArray();
 8002a7a:	f7ff fae5 	bl	8002048 <getAltDJArray>
 8002a7e:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	72fb      	strb	r3, [r7, #11]
    AltDJArray[index] = AltDJArray[index]+1;
 8002a86:	7afb      	ldrb	r3, [r7, #11]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	7afb      	ldrb	r3, [r7, #11]
 8002a90:	68f9      	ldr	r1, [r7, #12]
 8002a92:	440b      	add	r3, r1
 8002a94:	3201      	adds	r2, #1
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]
    if(AltDJArray[index]>9) AltDJArray[index]= 0;
 8002a9a:	7afb      	ldrb	r3, [r7, #11]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b09      	cmp	r3, #9
 8002aa4:	d904      	bls.n	8002ab0 <setUserAltDJ+0x3e>
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <setUserNumSeries>:

unsigned char setUserNumSeries(unsigned char* idx)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
    unsigned char* numSeriesArray = getNumSeriesArray();
 8002ac2:	f7ff facb 	bl	800205c <getNumSeriesArray>
 8002ac6:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	72fb      	strb	r3, [r7, #11]
    numSeriesArray[index] = numSeriesArray[index]+1;
 8002ace:	7afb      	ldrb	r3, [r7, #11]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	781a      	ldrb	r2, [r3, #0]
 8002ad6:	7afb      	ldrb	r3, [r7, #11]
 8002ad8:	68f9      	ldr	r1, [r7, #12]
 8002ada:	440b      	add	r3, r1
 8002adc:	3201      	adds	r2, #1
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]
    if(numSeriesArray[index]>9) numSeriesArray[index]= 0;
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b09      	cmp	r3, #9
 8002aec:	d904      	bls.n	8002af8 <setUserNumSeries+0x3e>
 8002aee:	7afb      	ldrb	r3, [r7, #11]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4413      	add	r3, r2
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
}
 8002af8:	bf00      	nop
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <setUserMass>:
    IntervalSeriesArray[index] = IntervalSeriesArray[index]+1;
    if(IntervalSeriesArray[index]>9) IntervalSeriesArray[index]= 0;
}

unsigned char setUserMass(unsigned char* idx)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
    unsigned char* massArray = getMassArray();
 8002b0a:	f7ff fa61 	bl	8001fd0 <getMassArray>
 8002b0e:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	72fb      	strb	r3, [r7, #11]
    massArray[index] = massArray[index]+1;
 8002b16:	7afb      	ldrb	r3, [r7, #11]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
 8002b20:	68f9      	ldr	r1, [r7, #12]
 8002b22:	440b      	add	r3, r1
 8002b24:	3201      	adds	r2, #1
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]
    if(massArray[index]>9) massArray[index]= 0;
 8002b2a:	7afb      	ldrb	r3, [r7, #11]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b09      	cmp	r3, #9
 8002b34:	d904      	bls.n	8002b40 <setUserMass+0x3e>
 8002b36:	7afb      	ldrb	r3, [r7, #11]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
}
 8002b40:	bf00      	nop
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <setUserOverMass>:

unsigned char setUserOverMass(unsigned char* idx)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
    unsigned char* overMassArray = getOverMassArray();
 8002b52:	f7ff fa47 	bl	8001fe4 <getOverMassArray>
 8002b56:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	72fb      	strb	r3, [r7, #11]
    overMassArray[index] = overMassArray[index]+1;
 8002b5e:	7afb      	ldrb	r3, [r7, #11]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	781a      	ldrb	r2, [r3, #0]
 8002b66:	7afb      	ldrb	r3, [r7, #11]
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3201      	adds	r2, #1
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]
    if(overMassArray[index]>9) overMassArray[index]= 0;
 8002b72:	7afb      	ldrb	r3, [r7, #11]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b09      	cmp	r3, #9
 8002b7c:	d904      	bls.n	8002b88 <setUserOverMass+0x3e>
 8002b7e:	7afb      	ldrb	r3, [r7, #11]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <setUserNumTest>:

unsigned char setUserNumTest(unsigned char* idx)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
    unsigned char* numTestArray = getNumTestArray();
 8002b9a:	f7ff fa69 	bl	8002070 <getNumTestArray>
 8002b9e:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	72fb      	strb	r3, [r7, #11]
    numTestArray[index] = numTestArray[index]+1;
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	68f9      	ldr	r1, [r7, #12]
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3201      	adds	r2, #1
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]
    if(numTestArray[index]>9) numTestArray[index]= 0;
 8002bba:	7afb      	ldrb	r3, [r7, #11]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b09      	cmp	r3, #9
 8002bc4:	d904      	bls.n	8002bd0 <setUserNumTest+0x3e>
 8002bc6:	7afb      	ldrb	r3, [r7, #11]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <setIntervalSaltosTime>:

unsigned char* setIntervalSaltosTime(unsigned char* configInputTimer)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	unsigned char index = *configInputTimer + 3;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	3303      	adds	r3, #3
 8002bea:	73fb      	strb	r3, [r7, #15]
	struct tm* insertTime = getIntervalTimeStruct();
 8002bec:	f7ff f9d8 	bl	8001fa0 <getIntervalTimeStruct>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60bb      	str	r3, [r7, #8]

	switch(index)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	3b03      	subs	r3, #3
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d84a      	bhi.n	8002c92 <setIntervalSaltosTime+0xb6>
 8002bfc:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <setIntervalSaltosTime+0x28>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002c19 	.word	0x08002c19
 8002c08:	08002c35 	.word	0x08002c35
 8002c0c:	08002c93 	.word	0x08002c93
 8002c10:	08002c4f 	.word	0x08002c4f
 8002c14:	08002c6b 	.word	0x08002c6b
	{
		case DEZENA_M:
			insertTime->tm_min = insertTime->tm_min+10;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f103 020a 	add.w	r2, r3, #10
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b3c      	cmp	r3, #60	; 0x3c
 8002c2a:	dd2b      	ble.n	8002c84 <setIntervalSaltosTime+0xa8>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	605a      	str	r2, [r3, #4]
		break;
 8002c32:	e027      	b.n	8002c84 <setIntervalSaltosTime+0xa8>

		case UNIDADE_M:
			insertTime->tm_min = insertTime->tm_min+1;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b3c      	cmp	r3, #60	; 0x3c
 8002c44:	dd20      	ble.n	8002c88 <setIntervalSaltosTime+0xac>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	605a      	str	r2, [r3, #4]
		break;
 8002c4c:	e01c      	b.n	8002c88 <setIntervalSaltosTime+0xac>

		case DEZENA_S:
			insertTime->tm_sec =insertTime->tm_sec+10 ;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f103 020a 	add.w	r2, r3, #10
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b3c      	cmp	r3, #60	; 0x3c
 8002c60:	dd14      	ble.n	8002c8c <setIntervalSaltosTime+0xb0>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

		break;
 8002c68:	e010      	b.n	8002c8c <setIntervalSaltosTime+0xb0>

		case UNIDADE_S:
			insertTime->tm_sec =insertTime->tm_sec+1 ;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b3c      	cmp	r3, #60	; 0x3c
 8002c7a:	dd09      	ble.n	8002c90 <setIntervalSaltosTime+0xb4>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
		break;
 8002c82:	e005      	b.n	8002c90 <setIntervalSaltosTime+0xb4>
		break;
 8002c84:	bf00      	nop
 8002c86:	e004      	b.n	8002c92 <setIntervalSaltosTime+0xb6>
		break;
 8002c88:	bf00      	nop
 8002c8a:	e002      	b.n	8002c92 <setIntervalSaltosTime+0xb6>
		break;
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <setIntervalSaltosTime+0xb6>
		break;
 8002c90:	bf00      	nop
	}

}
 8002c92:	bf00      	nop
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <setUserTime>:

unsigned char* setUserTime(unsigned char* inputUserTimer)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
    unsigned char index = *inputUserTimer;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	73fb      	strb	r3, [r7, #15]
    struct tm* insertTime = getTimeStruct();
 8002caa:	f7ff f96d 	bl	8001f88 <getTimeStruct>
 8002cae:	60b8      	str	r0, [r7, #8]
//    static unsigned char timeString[9];

    switch(index)
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	2b07      	cmp	r3, #7
 8002cb4:	d86e      	bhi.n	8002d94 <setUserTime+0xf8>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <setUserTime+0x20>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002cdd 	.word	0x08002cdd
 8002cc0:	08002cf9 	.word	0x08002cf9
 8002cc4:	08002d95 	.word	0x08002d95
 8002cc8:	08002d13 	.word	0x08002d13
 8002ccc:	08002d2f 	.word	0x08002d2f
 8002cd0:	08002d95 	.word	0x08002d95
 8002cd4:	08002d49 	.word	0x08002d49
 8002cd8:	08002d65 	.word	0x08002d65
    {
        case DEZENA_H:
            insertTime->tm_hour = insertTime->tm_hour+10;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f103 020a 	add.w	r2, r3, #10
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b17      	cmp	r3, #23
 8002cee:	dd46      	ble.n	8002d7e <setUserTime+0xe2>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002cf6:	e042      	b.n	8002d7e <setUserTime+0xe2>

        case UNIDADE_H:
            insertTime->tm_hour = insertTime->tm_hour+1;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b17      	cmp	r3, #23
 8002d08:	dd3b      	ble.n	8002d82 <setUserTime+0xe6>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002d10:	e037      	b.n	8002d82 <setUserTime+0xe6>

        case DEZENA_M:
            insertTime->tm_min = insertTime->tm_min+10;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f103 020a 	add.w	r2, r3, #10
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b3c      	cmp	r3, #60	; 0x3c
 8002d24:	dd2f      	ble.n	8002d86 <setUserTime+0xea>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	605a      	str	r2, [r3, #4]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002d2c:	e02b      	b.n	8002d86 <setUserTime+0xea>

        case UNIDADE_M:
        	insertTime->tm_min = insertTime->tm_min+1;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b3c      	cmp	r3, #60	; 0x3c
 8002d3e:	dd24      	ble.n	8002d8a <setUserTime+0xee>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2200      	movs	r2, #0
 8002d44:	605a      	str	r2, [r3, #4]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002d46:	e020      	b.n	8002d8a <setUserTime+0xee>

        case DEZENA_S:
            insertTime->tm_sec =insertTime->tm_sec+10 ;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f103 020a 	add.w	r2, r3, #10
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b3c      	cmp	r3, #60	; 0x3c
 8002d5a:	dd18      	ble.n	8002d8e <setUserTime+0xf2>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002d62:	e014      	b.n	8002d8e <setUserTime+0xf2>

        case UNIDADE_S:
            insertTime->tm_sec =insertTime->tm_sec+1 ;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b3c      	cmp	r3, #60	; 0x3c
 8002d74:	dd0d      	ble.n	8002d92 <setUserTime+0xf6>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002d7c:	e009      	b.n	8002d92 <setUserTime+0xf6>
        break;
 8002d7e:	bf00      	nop
 8002d80:	e008      	b.n	8002d94 <setUserTime+0xf8>
        break;
 8002d82:	bf00      	nop
 8002d84:	e006      	b.n	8002d94 <setUserTime+0xf8>
        break;
 8002d86:	bf00      	nop
 8002d88:	e004      	b.n	8002d94 <setUserTime+0xf8>
        break;
 8002d8a:	bf00      	nop
 8002d8c:	e002      	b.n	8002d94 <setUserTime+0xf8>
        break;
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <setUserTime+0xf8>
        break;
 8002d92:	bf00      	nop
    }
}
 8002d94:	bf00      	nop
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop

08002da0 <alturaToTempo>:

unsigned int alturaToTempo(unsigned int altura)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	unsigned int tempo = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
	unsigned int nominator = 8 * altura;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	613b      	str	r3, [r7, #16]
	unsigned int  g = 981; // cm/s^2
 8002db2:	f240 33d5 	movw	r3, #981	; 0x3d5
 8002db6:	60fb      	str	r3, [r7, #12]
	float relation =  nominator/g;
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc8:	edc7 7a02 	vstr	s15, [r7, #8]
	tempo = sqrt(relation);
 8002dcc:	68b8      	ldr	r0, [r7, #8]
 8002dce:	f7fd fbd3 	bl	8000578 <__aeabi_f2d>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	ec43 2b10 	vmov	d0, r2, r3
 8002dda:	f00c ff57 	bl	800fc8c <sqrt>
 8002dde:	ec53 2b10 	vmov	r2, r3, d0
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	f7fd fecf 	bl	8000b88 <__aeabi_d2uiz>
 8002dea:	4603      	mov	r3, r0
 8002dec:	617b      	str	r3, [r7, #20]
	tempo = tempo*1000;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002df4:	fb02 f303 	mul.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
	return tempo;
 8002dfa:	697b      	ldr	r3, [r7, #20]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <updateUserMsg>:
#include "time.h"
#include "stdlib.h"


unsigned char updateUserMsg(unsigned char col, unsigned char linha, unsigned char *userMessage, unsigned char* status)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60ba      	str	r2, [r7, #8]
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]
 8002e12:	460b      	mov	r3, r1
 8002e14:	73bb      	strb	r3, [r7, #14]
	if(*status == IDDLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d108      	bne.n	8002e30 <updateUserMsg+0x2c>
	{
	    HW_PRINT_DATA(col,linha,userMessage);
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	7bb9      	ldrb	r1, [r7, #14]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 ff49 	bl	8003cbc <HW_PRINT_DATA>
		*status = PRINTED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]
	}
}
 8002e30:	bf00      	nop
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <readyUserInterface>:

//unsigned char readyUserInterface(unsigned char* displayStatus,unsigned char* cursorPosition)
unsigned char readyUserInterface(unsigned char* displayStatus)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
	statusUserInterface(displayStatus);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f809 	bl	8002e5a <statusUserInterface>
	resetKeyPressed();
 8002e48:	f002 fc4e 	bl	80056e8 <resetKeyPressed>
//	resetCursorInterface(cursorPosition);
	eraseDataDisplay();
 8002e4c:	f000 feee 	bl	8003c2c <eraseDataDisplay>
}
 8002e50:	bf00      	nop
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <statusUserInterface>:

unsigned char statusUserInterface(unsigned char* displayStatus)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
	*displayStatus = IDDLE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <exportStateMachine>:
        struct dataInsert menuInsert;
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
unsigned char exportStateMachine(struct Menu* subMenu)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuExport = subMenu;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	617b      	str	r3, [r7, #20]
    unsigned char key = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	77fb      	strb	r3, [r7, #31]
    short index = 2;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	817b      	strh	r3, [r7, #10]
    unsigned char indexTest = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	74fb      	strb	r3, [r7, #19]
    unsigned char testSamples = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	74bb      	strb	r3, [r7, #18]
    unsigned char selectedUserTest=0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	747b      	strb	r3, [r7, #17]
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    struct results* ptr_structExportResult;
    unsigned char dataVerify;
    //unsigned char cursorPosition[2] = {0,0};
    unsigned char displayUpdateStatus = IDDLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	727b      	strb	r3, [r7, #9]
    while(key != MENU)
 8002e9c:	bf00      	nop
 8002e9e:	e171      	b.n	8003184 <exportStateMachine+0x30c>
    {
        switch(subMenuExport->menuState)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	78db      	ldrb	r3, [r3, #3]
 8002ea4:	2b06      	cmp	r3, #6
 8002ea6:	f200 816d 	bhi.w	8003184 <exportStateMachine+0x30c>
 8002eaa:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <exportStateMachine+0x38>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002ecd 	.word	0x08002ecd
 8002eb4:	08002edd 	.word	0x08002edd
 8002eb8:	08002f0b 	.word	0x08002f0b
 8002ebc:	0800303b 	.word	0x0800303b
 8002ec0:	0800311f 	.word	0x0800311f
 8002ec4:	08002fa3 	.word	0x08002fa3
 8002ec8:	08003157 	.word	0x08003157
        {
            case IDDLE:
                subMenuExport->menuState = getNextSub(VERIFICA_COMM);
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f001 fe1b 	bl	8004b08 <getNextSub>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	70da      	strb	r2, [r3, #3]
            break;
 8002eda:	e153      	b.n	8003184 <exportStateMachine+0x30c>

            case VERIFICA_COMM:
            	startCOMM(); //verificar se nao preciso deixar uma flag de comm no data.c para acessar o valor dela
 8002edc:	f000 fed2 	bl	8003c84 <startCOMM>
            	// e comparar para verificar se a comm já está ligada antes de liga-la novamente.
                updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 8002ee0:	4bad      	ldr	r3, [pc, #692]	; (8003198 <exportStateMachine+0x320>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	f107 0309 	add.w	r3, r7, #9
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2000      	movs	r0, #0
 8002eec:	f7ff ff8a 	bl	8002e04 <updateUserMsg>
                subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8002ef0:	2002      	movs	r0, #2
 8002ef2:	f001 fe09 	bl	8004b08 <getNextSub>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	70da      	strb	r2, [r3, #3]
                readyUserInterface(&displayUpdateStatus);
 8002efe:	f107 0309 	add.w	r3, r7, #9
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff99 	bl	8002e3a <readyUserInterface>
            break;
 8002f08:	e13c      	b.n	8003184 <exportStateMachine+0x30c>

            case EXPORTAR_UNITARIO:
                updateUserMsg(0,USERMSG1,exportunitUserMsg,&displayUpdateStatus);
 8002f0a:	4ba4      	ldr	r3, [pc, #656]	; (800319c <exportStateMachine+0x324>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	f107 0309 	add.w	r3, r7, #9
 8002f12:	2100      	movs	r1, #0
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7ff ff75 	bl	8002e04 <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8002f1a:	4ba1      	ldr	r3, [pc, #644]	; (80031a0 <exportStateMachine+0x328>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2102      	movs	r1, #2
 8002f22:	2000      	movs	r0, #0
 8002f24:	f000 feca 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8002f28:	4b9d      	ldr	r3, [pc, #628]	; (80031a0 <exportStateMachine+0x328>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fb29 	bl	8002584 <stringLenght>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4618      	mov	r0, r3
 8002f36:	4b9b      	ldr	r3, [pc, #620]	; (80031a4 <exportStateMachine+0x32c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	f000 febd 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8002f42:	4b99      	ldr	r3, [pc, #612]	; (80031a8 <exportStateMachine+0x330>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	2103      	movs	r1, #3
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f000 feb6 	bl	8003cbc <HW_PRINT_DATA>

                key = getKeyPressed();
 8002f50:	f002 fbbe 	bl	80056d0 <getKeyPressed>
 8002f54:	4603      	mov	r3, r0
 8002f56:	77fb      	strb	r3, [r7, #31]

                if(key == AVANCAR)
 8002f58:	7ffb      	ldrb	r3, [r7, #31]
 8002f5a:	2b41      	cmp	r3, #65	; 0x41
 8002f5c:	d10e      	bne.n	8002f7c <exportStateMachine+0x104>
                {
                	resetKeyPressed();
 8002f5e:	f002 fbc3 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8002f62:	f107 0309 	add.w	r3, r7, #9
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ff67 	bl	8002e3a <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_TODOS);
 8002f6c:	2005      	movs	r0, #5
 8002f6e:	f001 fdcb 	bl	8004b08 <getNextSub>
 8002f72:	4603      	mov	r3, r0
 8002f74:	461a      	mov	r2, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	70da      	strb	r2, [r3, #3]
 8002f7a:	e103      	b.n	8003184 <exportStateMachine+0x30c>
                }

                else if(key == CONFIRMAR)
 8002f7c:	7ffb      	ldrb	r3, [r7, #31]
 8002f7e:	2b43      	cmp	r3, #67	; 0x43
 8002f80:	f040 8100 	bne.w	8003184 <exportStateMachine+0x30c>
                {
                	resetKeyPressed();
 8002f84:	f002 fbb0 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8002f88:	f107 0309 	add.w	r3, r7, #9
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff54 	bl	8002e3a <readyUserInterface>
                    //subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 8002f92:	2003      	movs	r0, #3
 8002f94:	f001 fdb8 	bl	8004b08 <getNextSub>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	70da      	strb	r2, [r3, #3]
                }
                break;
 8002fa0:	e0f0      	b.n	8003184 <exportStateMachine+0x30c>

            case EXPORTAR_TODOS:
                updateUserMsg(0,0,exportallUserMsg,&displayUpdateStatus);
 8002fa2:	4b82      	ldr	r3, [pc, #520]	; (80031ac <exportStateMachine+0x334>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	f107 0309 	add.w	r3, r7, #9
 8002faa:	2100      	movs	r1, #0
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7ff ff29 	bl	8002e04 <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8002fb2:	4b7b      	ldr	r3, [pc, #492]	; (80031a0 <exportStateMachine+0x328>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2102      	movs	r1, #2
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f000 fe7e 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8002fc0:	4b77      	ldr	r3, [pc, #476]	; (80031a0 <exportStateMachine+0x328>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fadd 	bl	8002584 <stringLenght>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	4b75      	ldr	r3, [pc, #468]	; (80031a4 <exportStateMachine+0x32c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2102      	movs	r1, #2
 8002fd6:	f000 fe71 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8002fda:	4b73      	ldr	r3, [pc, #460]	; (80031a8 <exportStateMachine+0x330>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2103      	movs	r1, #3
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f000 fe6a 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 8002fe8:	f002 fb72 	bl	80056d0 <getKeyPressed>
 8002fec:	4603      	mov	r3, r0
 8002fee:	77fb      	strb	r3, [r7, #31]

                if(key == AVANCAR)
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
 8002ff2:	2b41      	cmp	r3, #65	; 0x41
 8002ff4:	d10e      	bne.n	8003014 <exportStateMachine+0x19c>
                {
                	resetKeyPressed();
 8002ff6:	f002 fb77 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8002ffa:	f107 0309 	add.w	r3, r7, #9
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff1b 	bl	8002e3a <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8003004:	2002      	movs	r0, #2
 8003006:	f001 fd7f 	bl	8004b08 <getNextSub>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	70da      	strb	r2, [r3, #3]
 8003012:	e0b7      	b.n	8003184 <exportStateMachine+0x30c>
                }

                else if(key == CONFIRMAR)
 8003014:	7ffb      	ldrb	r3, [r7, #31]
 8003016:	2b43      	cmp	r3, #67	; 0x43
 8003018:	f040 80b4 	bne.w	8003184 <exportStateMachine+0x30c>
                {
                	resetKeyPressed();
 800301c:	f002 fb64 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003020:	f107 0309 	add.w	r3, r7, #9
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff08 	bl	8002e3a <readyUserInterface>
                    //subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
                    subMenuExport->menuState = getNextSub(PROCESS_TODOS);
 800302a:	2006      	movs	r0, #6
 800302c:	f001 fd6c 	bl	8004b08 <getNextSub>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	70da      	strb	r2, [r3, #3]
                }
                break;
 8003038:	e0a4      	b.n	8003184 <exportStateMachine+0x30c>


            case NUM_TESTE_EXPORT:
                updateUserMsg(0,USERMSG1,consultTestUserMsg,&displayUpdateStatus);
 800303a:	4b5d      	ldr	r3, [pc, #372]	; (80031b0 <exportStateMachine+0x338>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	f107 0309 	add.w	r3, r7, #9
 8003042:	2100      	movs	r1, #0
 8003044:	2000      	movs	r0, #0
 8003046:	f7ff fedd 	bl	8002e04 <updateUserMsg>
                ptr_exportTestString = getNumTestString();
 800304a:	f7ff fbfd 	bl	8002848 <getNumTestString>
 800304e:	61b8      	str	r0, [r7, #24]
                HW_PRINT_DATA(0,USERMSG2,ptr_exportTestString);
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	2101      	movs	r1, #1
 8003054:	2000      	movs	r0, #0
 8003056:	f000 fe31 	bl	8003cbc <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 800305a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800305e:	2101      	movs	r1, #1
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fe51 	bl	8003d08 <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003066:	4b4e      	ldr	r3, [pc, #312]	; (80031a0 <exportStateMachine+0x328>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	2102      	movs	r1, #2
 800306e:	2000      	movs	r0, #0
 8003070:	f000 fe24 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8003074:	4b4a      	ldr	r3, [pc, #296]	; (80031a0 <exportStateMachine+0x328>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fa83 	bl	8002584 <stringLenght>
 800307e:	4603      	mov	r3, r0
 8003080:	4618      	mov	r0, r3
 8003082:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <exportStateMachine+0x32c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	2102      	movs	r1, #2
 800308a:	f000 fe17 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800308e:	4b46      	ldr	r3, [pc, #280]	; (80031a8 <exportStateMachine+0x330>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	2103      	movs	r1, #3
 8003096:	2000      	movs	r0, #0
 8003098:	f000 fe10 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 800309c:	4b42      	ldr	r3, [pc, #264]	; (80031a8 <exportStateMachine+0x330>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fa6f 	bl	8002584 <stringLenght>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4618      	mov	r0, r3
 80030aa:	4b42      	ldr	r3, [pc, #264]	; (80031b4 <exportStateMachine+0x33c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	2103      	movs	r1, #3
 80030b2:	f000 fe03 	bl	8003cbc <HW_PRINT_DATA>
				key = getKeyPressed();
 80030b6:	f002 fb0b 	bl	80056d0 <getKeyPressed>
 80030ba:	4603      	mov	r3, r0
 80030bc:	77fb      	strb	r3, [r7, #31]

                if(key == INSERIR)
 80030be:	7ffb      	ldrb	r3, [r7, #31]
 80030c0:	2b49      	cmp	r3, #73	; 0x49
 80030c2:	d10e      	bne.n	80030e2 <exportStateMachine+0x26a>
                {
                	resetKeyPressed();
 80030c4:	f002 fb10 	bl	80056e8 <resetKeyPressed>
                    setUserNumTest(&index);
 80030c8:	f107 030a 	add.w	r3, r7, #10
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fd60 	bl	8002b92 <setUserNumTest>
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 80030d2:	2003      	movs	r0, #3
 80030d4:	f001 fd18 	bl	8004b08 <getNextSub>
 80030d8:	4603      	mov	r3, r0
 80030da:	461a      	mov	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	70da      	strb	r2, [r3, #3]
 80030e0:	e050      	b.n	8003184 <exportStateMachine+0x30c>
                }
                else if(key == AVANCAR)
 80030e2:	7ffb      	ldrb	r3, [r7, #31]
 80030e4:	2b41      	cmp	r3, #65	; 0x41
 80030e6:	d108      	bne.n	80030fa <exportStateMachine+0x282>
                {
                	resetKeyPressed();
 80030e8:	f002 fafe 	bl	80056e8 <resetKeyPressed>
                    indexChange(&index,2);
 80030ec:	f107 030a 	add.w	r3, r7, #10
 80030f0:	2102      	movs	r1, #2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fa8c 	bl	8002610 <indexChange>
 80030f8:	e044      	b.n	8003184 <exportStateMachine+0x30c>
                }
                else if(key == CONFIRMAR)
 80030fa:	7ffb      	ldrb	r3, [r7, #31]
 80030fc:	2b43      	cmp	r3, #67	; 0x43
 80030fe:	d141      	bne.n	8003184 <exportStateMachine+0x30c>
                {
                	resetKeyPressed();
 8003100:	f002 faf2 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003104:	f107 0309 	add.w	r3, r7, #9
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fe96 	bl	8002e3a <readyUserInterface>
                    subMenuExport->menuState = getNextSub(PROCESS_UNITARIO);
 800310e:	2004      	movs	r0, #4
 8003110:	f001 fcfa 	bl	8004b08 <getNextSub>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	70da      	strb	r2, [r3, #3]
                    //subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
                }

                break;
 800311c:	e032      	b.n	8003184 <exportStateMachine+0x30c>

                case PROCESS_UNITARIO:
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 800311e:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <exportStateMachine+0x340>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	f107 0309 	add.w	r3, r7, #9
 8003126:	2100      	movs	r1, #0
 8003128:	2000      	movs	r0, #0
 800312a:	f7ff fe6b 	bl	8002e04 <updateUserMsg>
                    selectedUserTest = stringToInt(ptr_exportTestString);
 800312e:	69b8      	ldr	r0, [r7, #24]
 8003130:	f7ff fa16 	bl	8002560 <stringToInt>
 8003134:	4603      	mov	r3, r0
 8003136:	747b      	strb	r3, [r7, #17]
                    ptr_structExportResult = getUserResultData(selectedUserTest);
 8003138:	7c7b      	ldrb	r3, [r7, #17]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f80a 	bl	8002154 <getUserResultData>
 8003140:	60f8      	str	r0, [r7, #12]
                     *
                     */
                   //ESSE FOR � S� PARA TESTE NO CONSOLE, AO INVES DESSE MONTE DE "PRINT", COLOCAREI FU��O PARA ENVIAR BT
//                    transmissionCOMM();
                    //Acessa os dados referente ao Teste e envia apenas o selecionado por BT
                subMenuExport->menuState = getNextSub(IDDLE);
 8003142:	2000      	movs	r0, #0
 8003144:	f001 fce0 	bl	8004b08 <getNextSub>
 8003148:	4603      	mov	r3, r0
 800314a:	461a      	mov	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	70da      	strb	r2, [r3, #3]
                key = MENU;
 8003150:	234d      	movs	r3, #77	; 0x4d
 8003152:	77fb      	strb	r3, [r7, #31]
                break;
 8003154:	e016      	b.n	8003184 <exportStateMachine+0x30c>

                case PROCESS_TODOS: //
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <exportStateMachine+0x340>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	f107 0309 	add.w	r3, r7, #9
 800315e:	2100      	movs	r1, #0
 8003160:	2000      	movs	r0, #0
 8003162:	f7ff fe4f 	bl	8002e04 <updateUserMsg>

                    subMenuExport->menuState = getNextSub(IDDLE);
 8003166:	2000      	movs	r0, #0
 8003168:	f001 fcce 	bl	8004b08 <getNextSub>
 800316c:	4603      	mov	r3, r0
 800316e:	461a      	mov	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	70da      	strb	r2, [r3, #3]
  				    readyUserInterface(&displayUpdateStatus);
 8003174:	f107 0309 	add.w	r3, r7, #9
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fe5e 	bl	8002e3a <readyUserInterface>
                    key = MENU;
 800317e:	234d      	movs	r3, #77	; 0x4d
 8003180:	77fb      	strb	r3, [r7, #31]
                    break;
 8003182:	bf00      	nop
    while(key != MENU)
 8003184:	7ffb      	ldrb	r3, [r7, #31]
 8003186:	2b4d      	cmp	r3, #77	; 0x4d
 8003188:	f47f ae8a 	bne.w	8002ea0 <exportStateMachine+0x28>
        }
    }

}
 800318c:	bf00      	nop
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000030 	.word	0x20000030
 800319c:	200000b8 	.word	0x200000b8
 80031a0:	200000d0 	.word	0x200000d0
 80031a4:	200000d8 	.word	0x200000d8
 80031a8:	200000dc 	.word	0x200000dc
 80031ac:	200000bc 	.word	0x200000bc
 80031b0:	20000074 	.word	0x20000074
 80031b4:	200000d4 	.word	0x200000d4
 80031b8:	2000007c 	.word	0x2000007c

080031bc <initStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char initStateMachine(struct Menu* subMenu)
{
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b09f      	sub	sp, #124	; 0x7c
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuIniciar = subMenu;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 80031c8:	f7fe ff66 	bl	8002098 <getUserConfigStruct>
 80031cc:	66b8      	str	r0, [r7, #104]	; 0x68
    struct results* ptr_result;
    struct tm myTime;
	struct tm* userTimeStruct = &myTime;
 80031ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031d2:	667b      	str	r3, [r7, #100]	; 0x64
    unsigned char key = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    short insertColumn = 7;
 80031da:	2307      	movs	r3, #7
 80031dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    unsigned int* ptr_soloTimeString;
    unsigned int* ptr_alturaString;
    unsigned int* ptr_potString;


    unsigned char displayUpdateStatus = IDDLE;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
//    unsigned char* ptr_uiVooTime;
//    unsigned char* ptr_ucAltDistance;
//    struct results result[TEST_SIZE]; //verificar se vou usar o endere�o de data.c assim como fiz com a estrutura de configuracao

    unsigned char indexTest;
    unsigned char readingStatus = IDDLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    unsigned char selectedUserTest = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
    unsigned char testSamples = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71


    unsigned char startTapete,readingState;


    while(key != MENU)
 80031f4:	f000 bce1 	b.w	8003bba <initStateMachine+0x9fe>
    {
        switch(subMenuIniciar->menuState)
 80031f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fa:	78db      	ldrb	r3, [r3, #3]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	f200 84dc 	bhi.w	8003bba <initStateMachine+0x9fe>
 8003202:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <initStateMachine+0x4c>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	0800323d 	.word	0x0800323d
 800320c:	0800324f 	.word	0x0800324f
 8003210:	080032f9 	.word	0x080032f9
 8003214:	080033bb 	.word	0x080033bb
 8003218:	080034c5 	.word	0x080034c5
 800321c:	080035e7 	.word	0x080035e7
 8003220:	080036df 	.word	0x080036df
 8003224:	0800375b 	.word	0x0800375b
 8003228:	080037c9 	.word	0x080037c9
 800322c:	08003825 	.word	0x08003825
 8003230:	080038d5 	.word	0x080038d5
 8003234:	08003a6f 	.word	0x08003a6f
 8003238:	08003b23 	.word	0x08003b23
        {
            case IDDLE:
                subMenuIniciar->menuState = getNextSub(COMM_OFF);
 800323c:	2001      	movs	r0, #1
 800323e:	f001 fc63 	bl	8004b08 <getNextSub>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003248:	70da      	strb	r2, [r3, #3]
                //RESET
            break;
 800324a:	f000 bcb6 	b.w	8003bba <initStateMachine+0x9fe>

            case COMM_OFF:
                updateUserMsg(0,USERMSG1,noTransmissionMsg,&displayUpdateStatus);
 800324e:	4bcd      	ldr	r3, [pc, #820]	; (8003584 <initStateMachine+0x3c8>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	f107 030f 	add.w	r3, r7, #15
 8003256:	2100      	movs	r1, #0
 8003258:	2000      	movs	r0, #0
 800325a:	f7ff fdd3 	bl	8002e04 <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 800325e:	4bca      	ldr	r3, [pc, #808]	; (8003588 <initStateMachine+0x3cc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	2102      	movs	r1, #2
 8003266:	2000      	movs	r0, #0
 8003268:	f000 fd28 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800326c:	4bc6      	ldr	r3, [pc, #792]	; (8003588 <initStateMachine+0x3cc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff f987 	bl	8002584 <stringLenght>
 8003276:	4bc5      	ldr	r3, [pc, #788]	; (800358c <initStateMachine+0x3d0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	2102      	movs	r1, #2
 800327e:	f000 fd1d 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003282:	4bc3      	ldr	r3, [pc, #780]	; (8003590 <initStateMachine+0x3d4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	2103      	movs	r1, #3
 800328a:	2000      	movs	r0, #0
 800328c:	f000 fd16 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 8003290:	f002 fa1e 	bl	80056d0 <getKeyPressed>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                if(key == AVANCAR)
 800329a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800329e:	2b41      	cmp	r3, #65	; 0x41
 80032a0:	d10f      	bne.n	80032c2 <initStateMachine+0x106>
                {
                	resetKeyPressed();
 80032a2:	f002 fa21 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 80032a6:	f107 030f 	add.w	r3, r7, #15
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fdc5 	bl	8002e3a <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(COMM_ON);
 80032b0:	2002      	movs	r0, #2
 80032b2:	f001 fc29 	bl	8004b08 <getNextSub>
 80032b6:	4603      	mov	r3, r0
 80032b8:	461a      	mov	r2, r3
 80032ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032bc:	70da      	strb	r2, [r3, #3]
 80032be:	f000 bc7c 	b.w	8003bba <initStateMachine+0x9fe>
                }
                else if(key == CONFIRMAR)
 80032c2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80032c6:	2b43      	cmp	r3, #67	; 0x43
 80032c8:	f040 8477 	bne.w	8003bba <initStateMachine+0x9fe>
                {
                	resetKeyPressed();
 80032cc:	f002 fa0c 	bl	80056e8 <resetKeyPressed>
                    stopCOMM();
 80032d0:	f000 fce6 	bl	8003ca0 <stopCOMM>
                    readyUserInterface(&displayUpdateStatus);
 80032d4:	f107 030f 	add.w	r3, r7, #15
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fdae 	bl	8002e3a <readyUserInterface>
                    ptr_userConfiguration->userCommConfig = COMM_OFF;
 80032de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 80032e6:	2003      	movs	r0, #3
 80032e8:	f001 fc0e 	bl	8004b08 <getNextSub>
 80032ec:	4603      	mov	r3, r0
 80032ee:	461a      	mov	r2, r3
 80032f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f2:	70da      	strb	r2, [r3, #3]
                }
            break;
 80032f4:	f000 bc61 	b.w	8003bba <initStateMachine+0x9fe>

            case COMM_ON:
				updateUserMsg(0,0,yesTransmissionMsg,&displayUpdateStatus);
 80032f8:	4ba6      	ldr	r3, [pc, #664]	; (8003594 <initStateMachine+0x3d8>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	f107 030f 	add.w	r3, r7, #15
 8003300:	2100      	movs	r1, #0
 8003302:	2000      	movs	r0, #0
 8003304:	f7ff fd7e 	bl	8002e04 <updateUserMsg>
				HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003308:	4b9f      	ldr	r3, [pc, #636]	; (8003588 <initStateMachine+0x3cc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	2102      	movs	r1, #2
 8003310:	2000      	movs	r0, #0
 8003312:	f000 fcd3 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8003316:	4b9c      	ldr	r3, [pc, #624]	; (8003588 <initStateMachine+0x3cc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff f932 	bl	8002584 <stringLenght>
 8003320:	4b9a      	ldr	r3, [pc, #616]	; (800358c <initStateMachine+0x3d0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	2102      	movs	r1, #2
 8003328:	f000 fcc8 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800332c:	4b98      	ldr	r3, [pc, #608]	; (8003590 <initStateMachine+0x3d4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	2103      	movs	r1, #3
 8003334:	2000      	movs	r0, #0
 8003336:	f000 fcc1 	bl	8003cbc <HW_PRINT_DATA>
				key = getKeyPressed();
 800333a:	f002 f9c9 	bl	80056d0 <getKeyPressed>
 800333e:	4603      	mov	r3, r0
 8003340:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                if(key == AVANCAR)
 8003344:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003348:	2b41      	cmp	r3, #65	; 0x41
 800334a:	d10f      	bne.n	800336c <initStateMachine+0x1b0>
				{
                	resetKeyPressed();
 800334c:	f002 f9cc 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003350:	f107 030f 	add.w	r3, r7, #15
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fd70 	bl	8002e3a <readyUserInterface>
					subMenuIniciar->menuState = getNextSub(COMM_OFF);
 800335a:	2001      	movs	r0, #1
 800335c:	f001 fbd4 	bl	8004b08 <getNextSub>
 8003360:	4603      	mov	r3, r0
 8003362:	461a      	mov	r2, r3
 8003364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003366:	70da      	strb	r2, [r3, #3]
 8003368:	f000 bc27 	b.w	8003bba <initStateMachine+0x9fe>
				}
                else if(key == CONFIRMAR)
 800336c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003370:	2b43      	cmp	r3, #67	; 0x43
 8003372:	f040 8422 	bne.w	8003bba <initStateMachine+0x9fe>
                {
                	resetKeyPressed();
 8003376:	f002 f9b7 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 800337a:	f107 030f 	add.w	r3, r7, #15
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fd5b 	bl	8002e3a <readyUserInterface>
                    startCOMM();
 8003384:	f000 fc7e 	bl	8003c84 <startCOMM>
                	updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 8003388:	4b83      	ldr	r3, [pc, #524]	; (8003598 <initStateMachine+0x3dc>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	f107 030f 	add.w	r3, r7, #15
 8003390:	2100      	movs	r1, #0
 8003392:	2000      	movs	r0, #0
 8003394:	f7ff fd36 	bl	8002e04 <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus);
 8003398:	f107 030f 	add.w	r3, r7, #15
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fd4c 	bl	8002e3a <readyUserInterface>
                     ptr_userConfiguration->userCommConfig = COMM_ON;
 80033a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 80033aa:	2003      	movs	r0, #3
 80033ac:	f001 fbac 	bl	8004b08 <getNextSub>
 80033b0:	4603      	mov	r3, r0
 80033b2:	461a      	mov	r2, r3
 80033b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b6:	70da      	strb	r2, [r3, #3]
                }
                break;
 80033b8:	e3ff      	b.n	8003bba <initStateMachine+0x9fe>

            case TEMPO_READ:
                updateUserMsg(0,USERMSG1,timeUserMsg,&displayUpdateStatus);
 80033ba:	4b78      	ldr	r3, [pc, #480]	; (800359c <initStateMachine+0x3e0>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	f107 030f 	add.w	r3, r7, #15
 80033c2:	2100      	movs	r1, #0
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7ff fd1d 	bl	8002e04 <updateUserMsg>

                userTimeStruct = getTimeStruct();
 80033ca:	f7fe fddd 	bl	8001f88 <getTimeStruct>
 80033ce:	6678      	str	r0, [r7, #100]	; 0x64
                strftime(userTimeString, sizeof(userTimeString), "%H:%M:%S", userTimeStruct);
 80033d0:	f107 001c 	add.w	r0, r7, #28
 80033d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033d6:	4a72      	ldr	r2, [pc, #456]	; (80035a0 <initStateMachine+0x3e4>)
 80033d8:	2109      	movs	r1, #9
 80033da:	f00b f949 	bl	800e670 <strftime>
                HW_PRINT_DATA(0,USERMSG2,userTimeString);
 80033de:	f107 031c 	add.w	r3, r7, #28
 80033e2:	461a      	mov	r2, r3
 80033e4:	2101      	movs	r1, #1
 80033e6:	2000      	movs	r0, #0
 80033e8:	f000 fc68 	bl	8003cbc <HW_PRINT_DATA>
                HW_UPDATE_DATA(insertColumn,USERMSG2);
 80033ec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80033f0:	2101      	movs	r1, #1
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fc88 	bl	8003d08 <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80033f8:	4b63      	ldr	r3, [pc, #396]	; (8003588 <initStateMachine+0x3cc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	2102      	movs	r1, #2
 8003400:	2000      	movs	r0, #0
 8003402:	f000 fc5b 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8003406:	4b60      	ldr	r3, [pc, #384]	; (8003588 <initStateMachine+0x3cc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff f8ba 	bl	8002584 <stringLenght>
 8003410:	4b5e      	ldr	r3, [pc, #376]	; (800358c <initStateMachine+0x3d0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	2102      	movs	r1, #2
 8003418:	f000 fc50 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800341c:	4b5c      	ldr	r3, [pc, #368]	; (8003590 <initStateMachine+0x3d4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	2103      	movs	r1, #3
 8003424:	2000      	movs	r0, #0
 8003426:	f000 fc49 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 800342a:	4b59      	ldr	r3, [pc, #356]	; (8003590 <initStateMachine+0x3d4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff f8a8 	bl	8002584 <stringLenght>
 8003434:	4b5b      	ldr	r3, [pc, #364]	; (80035a4 <initStateMachine+0x3e8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	2103      	movs	r1, #3
 800343c:	f000 fc3e 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 8003440:	f002 f946 	bl	80056d0 <getKeyPressed>
 8003444:	4603      	mov	r3, r0
 8003446:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

                if(key == INSERIR)
 800344a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800344e:	2b49      	cmp	r3, #73	; 0x49
 8003450:	d10e      	bne.n	8003470 <initStateMachine+0x2b4>
                {
                	resetKeyPressed();
 8003452:	f002 f949 	bl	80056e8 <resetKeyPressed>
                    setUserTime(&insertColumn);
 8003456:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fc1e 	bl	8002c9c <setUserTime>
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 8003460:	2003      	movs	r0, #3
 8003462:	f001 fb51 	bl	8004b08 <getNextSub>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346c:	70da      	strb	r2, [r3, #3]
 800346e:	e3a4      	b.n	8003bba <initStateMachine+0x9fe>
                }
                else if (key == AVANCAR)
 8003470:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003474:	2b41      	cmp	r3, #65	; 0x41
 8003476:	d108      	bne.n	800348a <initStateMachine+0x2ce>
                {
                	resetKeyPressed();
 8003478:	f002 f936 	bl	80056e8 <resetKeyPressed>
                    indexColumn(&insertColumn,7);
 800347c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8003480:	2107      	movs	r1, #7
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff f804 	bl	8002490 <indexColumn>
 8003488:	e397      	b.n	8003bba <initStateMachine+0x9fe>
                }
                else if(key == CONFIRMAR)
 800348a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800348e:	2b43      	cmp	r3, #67	; 0x43
 8003490:	f040 8393 	bne.w	8003bba <initStateMachine+0x9fe>
                {
                	resetKeyPressed();
 8003494:	f002 f928 	bl	80056e8 <resetKeyPressed>
                	insertColumn = 4; //colocar um define talvez -> definicao de caracteres no display massa e overmass
 8003498:	2304      	movs	r3, #4
 800349a:	84fb      	strh	r3, [r7, #38]	; 0x26
                    readyUserInterface(&displayUpdateStatus);
 800349c:	f107 030f 	add.w	r3, r7, #15
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fcca 	bl	8002e3a <readyUserInterface>
					ptr_userConfiguration->userTime = milisecondsTime(userTimeStruct);
 80034a6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80034a8:	f7ff f82e 	bl	8002508 <milisecondsTime>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034b2:	605a      	str	r2, [r3, #4]
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 80034b4:	2004      	movs	r0, #4
 80034b6:	f001 fb27 	bl	8004b08 <getNextSub>
 80034ba:	4603      	mov	r3, r0
 80034bc:	461a      	mov	r2, r3
 80034be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c0:	70da      	strb	r2, [r3, #3]
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                }
                break;
 80034c2:	e37a      	b.n	8003bba <initStateMachine+0x9fe>

            case MASSA_READ:
                 updateUserMsg(0,USERMSG1,massUserMsg,&displayUpdateStatus);
 80034c4:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <initStateMachine+0x3ec>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	f107 030f 	add.w	r3, r7, #15
 80034cc:	2100      	movs	r1, #0
 80034ce:	2000      	movs	r0, #0
 80034d0:	f7ff fc98 	bl	8002e04 <updateUserMsg>
                 ptr_massString = getMassString();
 80034d4:	f7ff f96c 	bl	80027b0 <getMassString>
 80034d8:	4603      	mov	r3, r0
 80034da:	64fb      	str	r3, [r7, #76]	; 0x4c
                 HW_PRINT_DATA(0,USERMSG2,ptr_massString);
 80034dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034de:	2101      	movs	r1, #1
 80034e0:	2000      	movs	r0, #0
 80034e2:	f000 fbeb 	bl	8003cbc <HW_PRINT_DATA>
                 HW_UPDATE_DATA(insertColumn,1);
 80034e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80034ea:	2101      	movs	r1, #1
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fc0b 	bl	8003d08 <HW_UPDATE_DATA>
                 HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80034f2:	4b25      	ldr	r3, [pc, #148]	; (8003588 <initStateMachine+0x3cc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	2102      	movs	r1, #2
 80034fa:	2000      	movs	r0, #0
 80034fc:	f000 fbde 	bl	8003cbc <HW_PRINT_DATA>
				 HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <initStateMachine+0x3cc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff f83d 	bl	8002584 <stringLenght>
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <initStateMachine+0x3d0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	2102      	movs	r1, #2
 8003512:	f000 fbd3 	bl	8003cbc <HW_PRINT_DATA>
				 HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003516:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <initStateMachine+0x3d4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	2103      	movs	r1, #3
 800351e:	2000      	movs	r0, #0
 8003520:	f000 fbcc 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8003524:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <initStateMachine+0x3d4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f82b 	bl	8002584 <stringLenght>
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <initStateMachine+0x3e8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	2103      	movs	r1, #3
 8003536:	f000 fbc1 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 800353a:	f002 f8c9 	bl	80056d0 <getKeyPressed>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                if(key == INSERIR)
 8003544:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003548:	2b49      	cmp	r3, #73	; 0x49
 800354a:	d10e      	bne.n	800356a <initStateMachine+0x3ae>
                {
                	resetKeyPressed();
 800354c:	f002 f8cc 	bl	80056e8 <resetKeyPressed>
                    setUserMass(&insertColumn); //criar variavel adicional para separar insertcolumn
 8003550:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fad4 	bl	8002b02 <setUserMass>
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 800355a:	2004      	movs	r0, #4
 800355c:	f001 fad4 	bl	8004b08 <getNextSub>
 8003560:	4603      	mov	r3, r0
 8003562:	461a      	mov	r2, r3
 8003564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003566:	70da      	strb	r2, [r3, #3]
 8003568:	e327      	b.n	8003bba <initStateMachine+0x9fe>
                }
                else if(key == AVANCAR)
 800356a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800356e:	2b41      	cmp	r3, #65	; 0x41
 8003570:	d11c      	bne.n	80035ac <initStateMachine+0x3f0>
                {
                	resetKeyPressed();
 8003572:	f002 f8b9 	bl	80056e8 <resetKeyPressed>
                    indexMass(&insertColumn);
 8003576:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f81e 	bl	80025bc <indexMass>
 8003580:	e31b      	b.n	8003bba <initStateMachine+0x9fe>
 8003582:	bf00      	nop
 8003584:	20000028 	.word	0x20000028
 8003588:	200000d0 	.word	0x200000d0
 800358c:	200000d8 	.word	0x200000d8
 8003590:	200000dc 	.word	0x200000dc
 8003594:	2000002c 	.word	0x2000002c
 8003598:	20000030 	.word	0x20000030
 800359c:	20000034 	.word	0x20000034
 80035a0:	08010164 	.word	0x08010164
 80035a4:	200000d4 	.word	0x200000d4
 80035a8:	20000038 	.word	0x20000038
                }
                else if(key == CONFIRMAR)
 80035ac:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80035b0:	2b43      	cmp	r3, #67	; 0x43
 80035b2:	f040 8302 	bne.w	8003bba <initStateMachine+0x9fe>
                {
                	resetKeyPressed();
 80035b6:	f002 f897 	bl	80056e8 <resetKeyPressed>
                	insertColumn = 4;
 80035ba:	2304      	movs	r3, #4
 80035bc:	84fb      	strh	r3, [r7, #38]	; 0x26
                    readyUserInterface(&displayUpdateStatus);
 80035be:	f107 030f 	add.w	r3, r7, #15
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fc39 	bl	8002e3a <readyUserInterface>
                    ptr_userConfiguration->userMass= stringToInt(ptr_massString);
 80035c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80035ca:	f7fe ffc9 	bl	8002560 <stringToInt>
 80035ce:	4603      	mov	r3, r0
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035d4:	721a      	strb	r2, [r3, #8]
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 80035d6:	2005      	movs	r0, #5
 80035d8:	f001 fa96 	bl	8004b08 <getNextSub>
 80035dc:	4603      	mov	r3, r0
 80035de:	461a      	mov	r2, r3
 80035e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e2:	70da      	strb	r2, [r3, #3]
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                }
                break;
 80035e4:	e2e9      	b.n	8003bba <initStateMachine+0x9fe>

            case SOBREC_READ:
                updateUserMsg(0,USERMSG1,overmassUserMsg,&displayUpdateStatus);
 80035e6:	4bb0      	ldr	r3, [pc, #704]	; (80038a8 <initStateMachine+0x6ec>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	f107 030f 	add.w	r3, r7, #15
 80035ee:	2100      	movs	r1, #0
 80035f0:	2000      	movs	r0, #0
 80035f2:	f7ff fc07 	bl	8002e04 <updateUserMsg>
                ptr_overMassString = getOverMassString();
 80035f6:	f7ff f901 	bl	80027fc <getOverMassString>
 80035fa:	4603      	mov	r3, r0
 80035fc:	653b      	str	r3, [r7, #80]	; 0x50
                HW_PRINT_DATA(0,USERMSG2,ptr_overMassString);
 80035fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003600:	2101      	movs	r1, #1
 8003602:	2000      	movs	r0, #0
 8003604:	f000 fb5a 	bl	8003cbc <HW_PRINT_DATA>
                HW_UPDATE_DATA(insertColumn,1);
 8003608:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800360c:	2101      	movs	r1, #1
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fb7a 	bl	8003d08 <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003614:	4ba5      	ldr	r3, [pc, #660]	; (80038ac <initStateMachine+0x6f0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	2102      	movs	r1, #2
 800361c:	2000      	movs	r0, #0
 800361e:	f000 fb4d 	bl	8003cbc <HW_PRINT_DATA>
				 HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8003622:	4ba2      	ldr	r3, [pc, #648]	; (80038ac <initStateMachine+0x6f0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fe ffac 	bl	8002584 <stringLenght>
 800362c:	4ba0      	ldr	r3, [pc, #640]	; (80038b0 <initStateMachine+0x6f4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	2102      	movs	r1, #2
 8003634:	f000 fb42 	bl	8003cbc <HW_PRINT_DATA>
				 HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003638:	4b9e      	ldr	r3, [pc, #632]	; (80038b4 <initStateMachine+0x6f8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	2103      	movs	r1, #3
 8003640:	2000      	movs	r0, #0
 8003642:	f000 fb3b 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8003646:	4b9b      	ldr	r3, [pc, #620]	; (80038b4 <initStateMachine+0x6f8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe ff9a 	bl	8002584 <stringLenght>
 8003650:	4b99      	ldr	r3, [pc, #612]	; (80038b8 <initStateMachine+0x6fc>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	2103      	movs	r1, #3
 8003658:	f000 fb30 	bl	8003cbc <HW_PRINT_DATA>

                key = getKeyPressed();
 800365c:	f002 f838 	bl	80056d0 <getKeyPressed>
 8003660:	4603      	mov	r3, r0
 8003662:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

                if(key == INSERIR)
 8003666:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800366a:	2b49      	cmp	r3, #73	; 0x49
 800366c:	d10e      	bne.n	800368c <initStateMachine+0x4d0>
                {
                	resetKeyPressed();
 800366e:	f002 f83b 	bl	80056e8 <resetKeyPressed>
                    setUserOverMass(&insertColumn);
 8003672:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fa67 	bl	8002b4a <setUserOverMass>
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 800367c:	2005      	movs	r0, #5
 800367e:	f001 fa43 	bl	8004b08 <getNextSub>
 8003682:	4603      	mov	r3, r0
 8003684:	461a      	mov	r2, r3
 8003686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003688:	70da      	strb	r2, [r3, #3]
 800368a:	e296      	b.n	8003bba <initStateMachine+0x9fe>
                }
                else if(key == AVANCAR)
 800368c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003690:	2b41      	cmp	r3, #65	; 0x41
 8003692:	d107      	bne.n	80036a4 <initStateMachine+0x4e8>
                {
                	resetKeyPressed();
 8003694:	f002 f828 	bl	80056e8 <resetKeyPressed>
                    indexMass(&insertColumn);
 8003698:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe ff8d 	bl	80025bc <indexMass>
 80036a2:	e28a      	b.n	8003bba <initStateMachine+0x9fe>
                }
                else if(key == CONFIRMAR)
 80036a4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80036a8:	2b43      	cmp	r3, #67	; 0x43
 80036aa:	f040 8286 	bne.w	8003bba <initStateMachine+0x9fe>
                {
                	resetKeyPressed();
 80036ae:	f002 f81b 	bl	80056e8 <resetKeyPressed>
                	insertColumn = 7; //definicao de caracteres para TIME
 80036b2:	2307      	movs	r3, #7
 80036b4:	84fb      	strh	r3, [r7, #38]	; 0x26
                    readyUserInterface(&displayUpdateStatus);
 80036b6:	f107 030f 	add.w	r3, r7, #15
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fbbd 	bl	8002e3a <readyUserInterface>
                    ptr_userConfiguration->userOverMass= stringToInt(ptr_overMassString);
 80036c0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80036c2:	f7fe ff4d 	bl	8002560 <stringToInt>
 80036c6:	4603      	mov	r3, r0
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036cc:	725a      	strb	r2, [r3, #9]
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                    subMenuIniciar->menuState = getNextSub(START);
 80036ce:	2006      	movs	r0, #6
 80036d0:	f001 fa1a 	bl	8004b08 <getNextSub>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461a      	mov	r2, r3
 80036d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036da:	70da      	strb	r2, [r3, #3]
                }
                break;
 80036dc:	e26d      	b.n	8003bba <initStateMachine+0x9fe>

            case START:
                setInsertData(ptr_userConfiguration);
 80036de:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80036e0:	f001 fa24 	bl	8004b2c <setInsertData>
                updateUserMsg(0,USERMSG1,startreadUserMsg,&displayUpdateStatus);
 80036e4:	4b75      	ldr	r3, [pc, #468]	; (80038bc <initStateMachine+0x700>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	f107 030f 	add.w	r3, r7, #15
 80036ec:	2100      	movs	r1, #0
 80036ee:	2000      	movs	r0, #0
 80036f0:	f7ff fb88 	bl	8002e04 <updateUserMsg>
                HW_PRINT_DATA(0,USERMSG2,userTimeString);
 80036f4:	f107 031c 	add.w	r3, r7, #28
 80036f8:	461a      	mov	r2, r3
 80036fa:	2101      	movs	r1, #1
 80036fc:	2000      	movs	r0, #0
 80036fe:	f000 fadd 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(0,INSERTMSG,menuUserMsg);
 8003702:	4b6b      	ldr	r3, [pc, #428]	; (80038b0 <initStateMachine+0x6f4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	2102      	movs	r1, #2
 800370a:	2000      	movs	r0, #0
 800370c:	f000 fad6 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003710:	4b68      	ldr	r3, [pc, #416]	; (80038b4 <initStateMachine+0x6f8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	2103      	movs	r1, #3
 8003718:	2000      	movs	r0, #0
 800371a:	f000 facf 	bl	8003cbc <HW_PRINT_DATA>


                key = getKeyPressed();
 800371e:	f001 ffd7 	bl	80056d0 <getKeyPressed>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

                if(key == CONFIRMAR)
 8003728:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800372c:	2b43      	cmp	r3, #67	; 0x43
 800372e:	f040 8244 	bne.w	8003bba <initStateMachine+0x9fe>
                {
                	resetKeyPressed();
 8003732:	f001 ffd9 	bl	80056e8 <resetKeyPressed>
                    indexTest = getResultTestNumber();
 8003736:	f7fe fd23 	bl	8002180 <getResultTestNumber>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    readyUserInterface(&displayUpdateStatus);
 8003740:	f107 030f 	add.w	r3, r7, #15
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fb78 	bl	8002e3a <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(READING);
 800374a:	2007      	movs	r0, #7
 800374c:	f001 f9dc 	bl	8004b08 <getNextSub>
 8003750:	4603      	mov	r3, r0
 8003752:	461a      	mov	r2, r3
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	70da      	strb	r2, [r3, #3]
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                }
            break;
 8003758:	e22f      	b.n	8003bba <initStateMachine+0x9fe>

            case READING:
            	 updateUserMsg(0,USERMSG1,medindoUserMsg,&displayUpdateStatus);
 800375a:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <initStateMachine+0x704>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	f107 030f 	add.w	r3, r7, #15
 8003762:	2100      	movs	r1, #0
 8003764:	2000      	movs	r0, #0
 8003766:	f7ff fb4d 	bl	8002e04 <updateUserMsg>
            	 resetTimer3Variable();
 800376a:	f001 ffa5 	bl	80056b8 <resetTimer3Variable>
				 HW_PRINT_DATA(0,OPTIONMSG,pararUserMsg);
 800376e:	4b55      	ldr	r3, [pc, #340]	; (80038c4 <initStateMachine+0x708>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	2103      	movs	r1, #3
 8003776:	2000      	movs	r0, #0
 8003778:	f000 faa0 	bl	8003cbc <HW_PRINT_DATA>
//				 HW_EXT_MEMORY_WRITE("adelson","READING_ANTES.txt");
            	 startTM2();
 800377c:	f000 fa3e 	bl	8003bfc <startTM2>
				 startTM3();
 8003780:	f000 fa48 	bl	8003c14 <startTM3>
//             	 HW_EXT_MEMORY_WRITE("adelson","READING_DEPOIS.txt"); //nao escreveu tambem
				 readingStatus = readingSensor();
 8003784:	f000 fea8 	bl	80044d8 <readingSensor>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
				 key = getKeyPressed();
 800378e:	f001 ff9f 	bl	80056d0 <getKeyPressed>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
				 if(key == PARAR || readingStatus != IDDLE)
 8003798:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800379c:	2b50      	cmp	r3, #80	; 0x50
 800379e:	d004      	beq.n	80037aa <initStateMachine+0x5ee>
 80037a0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8208 	beq.w	8003bba <initStateMachine+0x9fe>
				 {
					 resetKeyPressed();
 80037aa:	f001 ff9d 	bl	80056e8 <resetKeyPressed>
					 readyUserInterface(&displayUpdateStatus);
 80037ae:	f107 030f 	add.w	r3, r7, #15
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fb41 	bl	8002e3a <readyUserInterface>
					 subMenuIniciar->menuState = getNextSub(STOP);
 80037b8:	2008      	movs	r0, #8
 80037ba:	f001 f9a5 	bl	8004b08 <getNextSub>
 80037be:	4603      	mov	r3, r0
 80037c0:	461a      	mov	r2, r3
 80037c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c4:	70da      	strb	r2, [r3, #3]
				 }

            break;
 80037c6:	e1f8      	b.n	8003bba <initStateMachine+0x9fe>

            case STOP:
            	key = getKeyPressed();
 80037c8:	f001 ff82 	bl	80056d0 <getKeyPressed>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                updateUserMsg(0,0,stopreadUserMsg,&displayUpdateStatus);
 80037d2:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <initStateMachine+0x70c>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	f107 030f 	add.w	r3, r7, #15
 80037da:	2100      	movs	r1, #0
 80037dc:	2000      	movs	r0, #0
 80037de:	f7ff fb11 	bl	8002e04 <updateUserMsg>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80037e2:	4b34      	ldr	r3, [pc, #208]	; (80038b4 <initStateMachine+0x6f8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	2103      	movs	r1, #3
 80037ea:	2000      	movs	r0, #0
 80037ec:	f000 fa66 	bl	8003cbc <HW_PRINT_DATA>

                if(key == CONFIRMAR)
 80037f0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80037f4:	2b43      	cmp	r3, #67	; 0x43
 80037f6:	f040 81e0 	bne.w	8003bba <initStateMachine+0x9fe>
                {
                	resetKeyPressed();
 80037fa:	f001 ff75 	bl	80056e8 <resetKeyPressed>
                    stopTM2();
 80037fe:	f000 fa03 	bl	8003c08 <stopTM2>
                    stopTM3();
 8003802:	f000 fa0d 	bl	8003c20 <stopTM3>
//                    HW_EXT_MEMORY_WRITE("adelson","STOP_DEPOIS.txt"); //dando erro apos desligar timer parei aqui
                    readyUserInterface(&displayUpdateStatus);
 8003806:	f107 030f 	add.w	r3, r7, #15
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fb15 	bl	8002e3a <readyUserInterface>
                    setResultTestNumber();
 8003810:	f7fe fcc2 	bl	8002198 <setResultTestNumber>
//                    transmissionCOMM();
                    subMenuIniciar->menuState = getNextSub(DISP_RESULTS);
 8003814:	2009      	movs	r0, #9
 8003816:	f001 f977 	bl	8004b08 <getNextSub>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003820:	70da      	strb	r2, [r3, #3]
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);

                }
                break;
 8003822:	e1ca      	b.n	8003bba <initStateMachine+0x9fe>

            case DISP_RESULTS:
                updateUserMsg(0,0,resultsUserMsg,&displayUpdateStatus);
 8003824:	4b29      	ldr	r3, [pc, #164]	; (80038cc <initStateMachine+0x710>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	f107 030f 	add.w	r3, r7, #15
 800382c:	2100      	movs	r1, #0
 800382e:	2000      	movs	r0, #0
 8003830:	f7ff fae8 	bl	8002e04 <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,selecionarUserMsg);
 8003834:	4b1f      	ldr	r3, [pc, #124]	; (80038b4 <initStateMachine+0x6f8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	2102      	movs	r1, #2
 800383c:	2000      	movs	r0, #0
 800383e:	f000 fa3d 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,pularUserMsg);
 8003842:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <initStateMachine+0x714>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	2103      	movs	r1, #3
 800384a:	2000      	movs	r0, #0
 800384c:	f000 fa36 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 8003850:	f001 ff3e 	bl	80056d0 <getKeyPressed>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

                if(key == PARAR)
 800385a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800385e:	2b50      	cmp	r3, #80	; 0x50
 8003860:	d10e      	bne.n	8003880 <initStateMachine+0x6c4>
                {
                	resetKeyPressed();
 8003862:	f001 ff41 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003866:	f107 030f 	add.w	r3, r7, #15
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fae5 	bl	8002e3a <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8003870:	200b      	movs	r0, #11
 8003872:	f001 f949 	bl	8004b08 <getNextSub>
 8003876:	4603      	mov	r3, r0
 8003878:	461a      	mov	r2, r3
 800387a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387c:	70da      	strb	r2, [r3, #3]
 800387e:	e19c      	b.n	8003bba <initStateMachine+0x9fe>
                }
                else if(key == CONFIRMAR)
 8003880:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003884:	2b43      	cmp	r3, #67	; 0x43
 8003886:	f040 8198 	bne.w	8003bba <initStateMachine+0x9fe>
                {
                	resetKeyPressed();
 800388a:	f001 ff2d 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 800388e:	f107 030f 	add.w	r3, r7, #15
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fad1 	bl	8002e3a <readyUserInterface>
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                    subMenuIniciar->menuState = getNextSub(RESULTS);
 8003898:	200a      	movs	r0, #10
 800389a:	f001 f935 	bl	8004b08 <getNextSub>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a4:	70da      	strb	r2, [r3, #3]
                }
            break;
 80038a6:	e188      	b.n	8003bba <initStateMachine+0x9fe>
 80038a8:	2000003c 	.word	0x2000003c
 80038ac:	200000d0 	.word	0x200000d0
 80038b0:	200000d8 	.word	0x200000d8
 80038b4:	200000dc 	.word	0x200000dc
 80038b8:	200000d4 	.word	0x200000d4
 80038bc:	20000040 	.word	0x20000040
 80038c0:	20000044 	.word	0x20000044
 80038c4:	200000e0 	.word	0x200000e0
 80038c8:	20000048 	.word	0x20000048
 80038cc:	20000060 	.word	0x20000060
 80038d0:	200000e4 	.word	0x200000e4

            case RESULTS:
            	selectedUserTest = getResultTestNumber();
 80038d4:	f7fe fc54 	bl	8002180 <getResultTestNumber>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
            	ptr_result = getUserResultData(selectedUserTest);
 80038de:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fc36 	bl	8002154 <getUserResultData>
 80038e8:	6778      	str	r0, [r7, #116]	; 0x74
				if(testSamples<(ptr_result->resultTestAcquiredSamples))
 80038ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ec:	785b      	ldrb	r3, [r3, #1]
 80038ee:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d27c      	bcs.n	80039f0 <initStateMachine+0x834>
				{
//					updateUserMsg(0,USERMSG1,amostraUserMsg,&displayUpdateStatus);
					HW_PRINT_DATA(0,USERMSG1,amostraUserMsg);
 80038f6:	4bb6      	ldr	r3, [pc, #728]	; (8003bd0 <initStateMachine+0xa14>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	2100      	movs	r1, #0
 80038fe:	2000      	movs	r0, #0
 8003900:	f000 f9dc 	bl	8003cbc <HW_PRINT_DATA>
					ptr_sampleString = param_1_toString(&ptr_result->sampleMeasurement[testSamples].sampleNum);
 8003904:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003908:	4613      	mov	r3, r2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003912:	4413      	add	r3, r2
 8003914:	3304      	adds	r3, #4
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe ffce 	bl	80028b8 <param_1_toString>
 800391c:	4603      	mov	r3, r0
 800391e:	65fb      	str	r3, [r7, #92]	; 0x5c
					HW_PRINT_DATA(stringLenght(amostraUserMsg),USERMSG1,ptr_sampleString);
 8003920:	4bab      	ldr	r3, [pc, #684]	; (8003bd0 <initStateMachine+0xa14>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fe2d 	bl	8002584 <stringLenght>
 800392a:	4603      	mov	r3, r0
 800392c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f000 f9c3 	bl	8003cbc <HW_PRINT_DATA>

//					HW_PRINT_DATA(0,USERMSG2,alturaSaltoUserMsg,&displayUpdateStatus);
					HW_PRINT_DATA(0,USERMSG2,alturaSaltoUserMsg);
 8003936:	4ba7      	ldr	r3, [pc, #668]	; (8003bd4 <initStateMachine+0xa18>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	2101      	movs	r1, #1
 800393e:	2000      	movs	r0, #0
 8003940:	f000 f9bc 	bl	8003cbc <HW_PRINT_DATA>
					ptr_alturaString = param_1_toString(&ptr_result->sampleMeasurement[testSamples].alturaSalto);
 8003944:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	3310      	adds	r3, #16
 8003952:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003954:	4413      	add	r3, r2
 8003956:	3304      	adds	r3, #4
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe ffad 	bl	80028b8 <param_1_toString>
 800395e:	4603      	mov	r3, r0
 8003960:	65bb      	str	r3, [r7, #88]	; 0x58
					HW_PRINT_DATA(stringLenght(alturaSaltoUserMsg),USERMSG2,strcat(ptr_alturaString,"cm"));
 8003962:	4b9c      	ldr	r3, [pc, #624]	; (8003bd4 <initStateMachine+0xa18>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fe0c 	bl	8002584 <stringLenght>
 800396c:	4604      	mov	r4, r0
 800396e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003970:	f7fc fc36 	bl	80001e0 <strlen>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800397a:	4413      	add	r3, r2
 800397c:	4a96      	ldr	r2, [pc, #600]	; (8003bd8 <initStateMachine+0xa1c>)
 800397e:	8811      	ldrh	r1, [r2, #0]
 8003980:	7892      	ldrb	r2, [r2, #2]
 8003982:	8019      	strh	r1, [r3, #0]
 8003984:	709a      	strb	r2, [r3, #2]
 8003986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003988:	461a      	mov	r2, r3
 800398a:	2101      	movs	r1, #1
 800398c:	4620      	mov	r0, r4
 800398e:	f000 f995 	bl	8003cbc <HW_PRINT_DATA>
//					HW_PRINT_DATA(strlen(alturaSaltoUserMsg)+strlen(ptr_alturaString)+1,USERMSG2,tempoVooUserMsg);
//					ptr_vooTimeString = param_2_toString(&ptr_result->sampleMeasurement[testSamples].uiVooTime);
//					HW_PRINT_DATA(strlen(alturaSaltoUserMsg)+strlen(ptr_alturaString)+strlen(tempoVooUserMsg)+1,USERMSG2 ,ptr_vooTimeString);

//					updateUserMsg(0,INSERTMSG,potenciaUserMsg,&displayUpdateStatus);
					HW_PRINT_DATA(0,INSERTMSG,potenciaUserMsg);
 8003992:	4b92      	ldr	r3, [pc, #584]	; (8003bdc <initStateMachine+0xa20>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	2102      	movs	r1, #2
 800399a:	2000      	movs	r0, #0
 800399c:	f000 f98e 	bl	8003cbc <HW_PRINT_DATA>
					ptr_potString = param_1_toString(&ptr_result->sampleMeasurement[testSamples].potenciaSalto);
 80039a0:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80039a4:	4613      	mov	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	3310      	adds	r3, #16
 80039ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039b0:	4413      	add	r3, r2
 80039b2:	3308      	adds	r3, #8
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe ff7f 	bl	80028b8 <param_1_toString>
 80039ba:	4603      	mov	r3, r0
 80039bc:	657b      	str	r3, [r7, #84]	; 0x54
					HW_PRINT_DATA(strlen(potenciaUserMsg),INSERTMSG,strcat(ptr_potString,"W"));
 80039be:	4b87      	ldr	r3, [pc, #540]	; (8003bdc <initStateMachine+0xa20>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fc fc0c 	bl	80001e0 <strlen>
 80039c8:	4604      	mov	r4, r0
 80039ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80039cc:	f7fc fc08 	bl	80001e0 <strlen>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461a      	mov	r2, r3
 80039d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d6:	4413      	add	r3, r2
 80039d8:	4981      	ldr	r1, [pc, #516]	; (8003be0 <initStateMachine+0xa24>)
 80039da:	461a      	mov	r2, r3
 80039dc:	460b      	mov	r3, r1
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	8013      	strh	r3, [r2, #0]
 80039e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e4:	461a      	mov	r2, r3
 80039e6:	2102      	movs	r1, #2
 80039e8:	4620      	mov	r0, r4
 80039ea:	f000 f967 	bl	8003cbc <HW_PRINT_DATA>
 80039ee:	e004      	b.n	80039fa <initStateMachine+0x83e>
//					HW_PRINT_DATA(strlen(potenciaUserMsg)+strlen(ptr_potString)+1,INSERTMSG,tempoSoloUserMsg);
//					ptr_soloTimeString = param_2_toString(&ptr_result->sampleMeasurement[testSamples].uiSoloTime);
//					HW_PRINT_DATA(strlen(potenciaUserMsg)+strlen(ptr_potString)+strlen(tempoSoloUserMsg)+1,INSERTMSG , ptr_soloTimeString);

				}
				else  HW_PRINT_DATA((16-strlen("VAZIO"))/2,INSERTMSG,"VAZIO");
 80039f0:	4a7c      	ldr	r2, [pc, #496]	; (8003be4 <initStateMachine+0xa28>)
 80039f2:	2102      	movs	r1, #2
 80039f4:	2005      	movs	r0, #5
 80039f6:	f000 f961 	bl	8003cbc <HW_PRINT_DATA>

				key = getKeyPressed();
 80039fa:	f001 fe69 	bl	80056d0 <getKeyPressed>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

				if(key == AVANCAR)
 8003a04:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003a08:	2b41      	cmp	r3, #65	; 0x41
 8003a0a:	d11c      	bne.n	8003a46 <initStateMachine+0x88a>
				{
					resetKeyPressed();
 8003a0c:	f001 fe6c 	bl	80056e8 <resetKeyPressed>
					readyUserInterface(&displayUpdateStatus);
 8003a10:	f107 030f 	add.w	r3, r7, #15
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fa10 	bl	8002e3a <readyUserInterface>
					testSamples++;
 8003a1a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
					if(testSamples == ptr_result->resultTestAcquiredSamples) testSamples = 0;
 8003a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a26:	785b      	ldrb	r3, [r3, #1]
 8003a28:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d102      	bne.n	8003a36 <initStateMachine+0x87a>
 8003a30:	2300      	movs	r3, #0
 8003a32:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
					subMenuIniciar->menuState = getNextSub(RESULTS);
 8003a36:	200a      	movs	r0, #10
 8003a38:	f001 f866 	bl	8004b08 <getNextSub>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a42:	70da      	strb	r2, [r3, #3]
 8003a44:	e0b9      	b.n	8003bba <initStateMachine+0x9fe>
				}

				else if(key == PARAR)
 8003a46:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003a4a:	2b50      	cmp	r3, #80	; 0x50
 8003a4c:	f040 80b5 	bne.w	8003bba <initStateMachine+0x9fe>
                {
                	resetKeyPressed();
 8003a50:	f001 fe4a 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003a54:	f107 030f 	add.w	r3, r7, #15
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff f9ee 	bl	8002e3a <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8003a5e:	200b      	movs	r0, #11
 8003a60:	f001 f852 	bl	8004b08 <getNextSub>
 8003a64:	4603      	mov	r3, r0
 8003a66:	461a      	mov	r2, r3
 8003a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6a:	70da      	strb	r2, [r3, #3]
                }

            break;
 8003a6c:	e0a5      	b.n	8003bba <initStateMachine+0x9fe>

            case SAVE_DATA:
                updateUserMsg(0,0,saveUserMsg,&displayUpdateStatus);
 8003a6e:	4b5e      	ldr	r3, [pc, #376]	; (8003be8 <initStateMachine+0xa2c>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	f107 030f 	add.w	r3, r7, #15
 8003a76:	2100      	movs	r1, #0
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f7ff f9c3 	bl	8002e04 <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003a7e:	4b5b      	ldr	r3, [pc, #364]	; (8003bec <initStateMachine+0xa30>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	2102      	movs	r1, #2
 8003a86:	2000      	movs	r0, #0
 8003a88:	f000 f918 	bl	8003cbc <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003a8c:	4b58      	ldr	r3, [pc, #352]	; (8003bf0 <initStateMachine+0xa34>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	2103      	movs	r1, #3
 8003a94:	2000      	movs	r0, #0
 8003a96:	f000 f911 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 8003a9a:	f001 fe19 	bl	80056d0 <getKeyPressed>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

                if(key == AVANCAR)
 8003aa4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003aa8:	2b41      	cmp	r3, #65	; 0x41
 8003aaa:	d10e      	bne.n	8003aca <initStateMachine+0x90e>
                {
                	resetKeyPressed();
 8003aac:	f001 fe1c 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003ab0:	f107 030f 	add.w	r3, r7, #15
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff f9c0 	bl	8002e3a <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(CANCEL_SAVE);
 8003aba:	200c      	movs	r0, #12
 8003abc:	f001 f824 	bl	8004b08 <getNextSub>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac6:	70da      	strb	r2, [r3, #3]
 8003ac8:	e077      	b.n	8003bba <initStateMachine+0x9fe>
                }
                else if(key == CONFIRMAR)
 8003aca:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003ace:	2b43      	cmp	r3, #67	; 0x43
 8003ad0:	d173      	bne.n	8003bba <initStateMachine+0x9fe>
                {
                	resetKeyPressed();
 8003ad2:	f001 fe09 	bl	80056e8 <resetKeyPressed>
                	save_SD_card(ptr_result,indexTest);
 8003ad6:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8003ada:	4619      	mov	r1, r3
 8003adc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003ade:	f000 f8ba 	bl	8003c56 <save_SD_card>
//                    save_data(indexTest);
//                	HW_EXT_MEMORY_WRITE("adelson","SAVE_DATA.txt");
                    readyUserInterface(&displayUpdateStatus);
 8003ae2:	f107 030f 	add.w	r3, r7, #15
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f9a7 	bl	8002e3a <readyUserInterface>
                    updateUserMsg(0,0,savedUserMsg,&displayUpdateStatus);
 8003aec:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <initStateMachine+0xa38>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	f107 030f 	add.w	r3, r7, #15
 8003af4:	2100      	movs	r1, #0
 8003af6:	2000      	movs	r0, #0
 8003af8:	f7ff f984 	bl	8002e04 <updateUserMsg>
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8003afc:	2001      	movs	r0, #1
 8003afe:	f001 f803 	bl	8004b08 <getNextSub>
 8003b02:	4603      	mov	r3, r0
 8003b04:	461a      	mov	r2, r3
 8003b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b08:	70da      	strb	r2, [r3, #3]
                    testSamples = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  				                      readyUserInterface(&displayUpdateStatus);
 8003b10:	f107 030f 	add.w	r3, r7, #15
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff f990 	bl	8002e3a <readyUserInterface>
                    key = MENU;
 8003b1a:	234d      	movs	r3, #77	; 0x4d
 8003b1c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            break;
 8003b20:	e04b      	b.n	8003bba <initStateMachine+0x9fe>

            case CANCEL_SAVE:
                updateUserMsg(0,0,cancelUserMsg,&displayUpdateStatus);
 8003b22:	4b35      	ldr	r3, [pc, #212]	; (8003bf8 <initStateMachine+0xa3c>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	f107 030f 	add.w	r3, r7, #15
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f7ff f969 	bl	8002e04 <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003b32:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <initStateMachine+0xa30>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	2102      	movs	r1, #2
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f000 f8be 	bl	8003cbc <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <initStateMachine+0xa34>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	2103      	movs	r1, #3
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f000 f8b7 	bl	8003cbc <HW_PRINT_DATA>
                key = getKeyPressed();
 8003b4e:	f001 fdbf 	bl	80056d0 <getKeyPressed>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

                if(key == AVANCAR)
 8003b58:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003b5c:	2b41      	cmp	r3, #65	; 0x41
 8003b5e:	d10e      	bne.n	8003b7e <initStateMachine+0x9c2>
                {
                	resetKeyPressed();
 8003b60:	f001 fdc2 	bl	80056e8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003b64:	f107 030f 	add.w	r3, r7, #15
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff f966 	bl	8002e3a <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8003b6e:	200b      	movs	r0, #11
 8003b70:	f000 ffca 	bl	8004b08 <getNextSub>
 8003b74:	4603      	mov	r3, r0
 8003b76:	461a      	mov	r2, r3
 8003b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7a:	70da      	strb	r2, [r3, #3]
 8003b7c:	e01c      	b.n	8003bb8 <initStateMachine+0x9fc>
                }
                else if(key == CONFIRMAR)
 8003b7e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003b82:	2b43      	cmp	r3, #67	; 0x43
 8003b84:	d118      	bne.n	8003bb8 <initStateMachine+0x9fc>
                {
                	resetKeyPressed();
 8003b86:	f001 fdaf 	bl	80056e8 <resetKeyPressed>
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                    testSamples = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
                    indexTest++;
 8003b90:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8003b94:	3301      	adds	r3, #1
 8003b96:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    //
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	f000 ffb4 	bl	8004b08 <getNextSub>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba6:	70da      	strb	r2, [r3, #3]
                    readyUserInterface(&displayUpdateStatus);
 8003ba8:	f107 030f 	add.w	r3, r7, #15
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff f944 	bl	8002e3a <readyUserInterface>
                    key = MENU;
 8003bb2:	234d      	movs	r3, #77	; 0x4d
 8003bb4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            break;
 8003bb8:	bf00      	nop
    while(key != MENU)
 8003bba:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003bbe:	2b4d      	cmp	r3, #77	; 0x4d
 8003bc0:	f47f ab1a 	bne.w	80031f8 <initStateMachine+0x3c>
        }
    }
}
 8003bc4:	bf00      	nop
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	377c      	adds	r7, #124	; 0x7c
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd90      	pop	{r4, r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	2000004c 	.word	0x2000004c
 8003bd4:	20000050 	.word	0x20000050
 8003bd8:	08010170 	.word	0x08010170
 8003bdc:	2000005c 	.word	0x2000005c
 8003be0:	08010174 	.word	0x08010174
 8003be4:	08010178 	.word	0x08010178
 8003be8:	20000064 	.word	0x20000064
 8003bec:	200000d0 	.word	0x200000d0
 8003bf0:	200000dc 	.word	0x200000dc
 8003bf4:	20000068 	.word	0x20000068
 8003bf8:	2000006c 	.word	0x2000006c

08003bfc <startTM2>:
    unsigned char timeout;
    struct samples Measurement[MEASUREMENT_SIZE];
};

void startTM2(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
        SET_HW_TIMER2();
 8003c00:	f000 ffa2 	bl	8004b48 <SET_HW_TIMER2>
}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <stopTM2>:

void stopTM2(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
    RESET_HW_TIMER2();
 8003c0c:	f000 ffbe 	bl	8004b8c <RESET_HW_TIMER2>
}
 8003c10:	bf00      	nop
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <startTM3>:

void startTM3(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
        SET_HW_TIMER3();
 8003c18:	f000 ffd6 	bl	8004bc8 <SET_HW_TIMER3>
//        resetTimer3Variable();
}
 8003c1c:	bf00      	nop
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <stopTM3>:

void stopTM3(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
    RESET_HW_TIMER3();
 8003c24:	f000 fff2 	bl	8004c0c <RESET_HW_TIMER3>
}
 8003c28:	bf00      	nop
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <eraseDataDisplay>:


void eraseDataDisplay()
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
    HW_ERASE_DATA();
 8003c30:	f000 f860 	bl	8003cf4 <HW_ERASE_DATA>
}
 8003c34:	bf00      	nop
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <homeDataDisplay>:

void homeDataDisplay(unsigned char* appName,unsigned char* companyName,unsigned char* appVersion)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
//    printf("%s\n",appName);
//    printf("%s\n",companyName);
//    printf("%s\n",appVersion);
    HW_HOME_DISP(appName,companyName,appVersion);
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f87d 	bl	8003d48 <HW_HOME_DISP>

}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <save_SD_card>:
//    fclose(ptr_file);
    return ptr_loadStringResult;
}

void save_SD_card(unsigned char* dataToSave, unsigned char numTeste)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	70fb      	strb	r3, [r7, #3]
	numTeste++;
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	3301      	adds	r3, #1
 8003c66:	70fb      	strb	r3, [r7, #3]
    unsigned char* ptr_saveName = getArqName(numTeste);
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fc20 	bl	80044b0 <getArqName>
 8003c70:	4603      	mov	r3, r0
 8003c72:	60fb      	str	r3, [r7, #12]
//    struct results* saveStruct = dataToSave;
//    unsigned char sampleToSave = 0;
    HW_EXT_MEMORY_WRITE(dataToSave,ptr_saveName);
 8003c74:	68f9      	ldr	r1, [r7, #12]
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fb62 	bl	8004340 <HW_EXT_MEMORY_WRITE>
//    }
//    fclose(ptr_file);



}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <startCOMM>:

void startCOMM()
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
//    printf("SET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8003c8a:	f001 fd39 	bl	8005700 <getUARTInstance>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	607b      	str	r3, [r7, #4]
	SET_HW_UART(uartInstance);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 ffd6 	bl	8004c44 <SET_HW_UART>
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <stopCOMM>:

void stopCOMM()
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
//    printf("RESET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8003ca6:	f001 fd2b 	bl	8005700 <getUARTInstance>
 8003caa:	4603      	mov	r3, r0
 8003cac:	607b      	str	r3, [r7, #4]
	RESET_HW_UART(uartInstance);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 ffdd 	bl	8004c6e <RESET_HW_UART>
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HW_PRINT_DATA>:

static LiquidCrystal lcdDisplay;


unsigned char HW_PRINT_DATA(unsigned char col, unsigned char linha,unsigned char* userData)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	603a      	str	r2, [r7, #0]
 8003cc6:	71fb      	strb	r3, [r7, #7]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	71bb      	strb	r3, [r7, #6]
    setCursor(&lcdDisplay, col, linha);
 8003ccc:	79ba      	ldrb	r2, [r7, #6]
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4807      	ldr	r0, [pc, #28]	; (8003cf0 <HW_PRINT_DATA+0x34>)
 8003cd4:	f000 fb05 	bl	80042e2 <setCursor>
    HAL_Delay(10);
 8003cd8:	200a      	movs	r0, #10
 8003cda:	f002 fd4d 	bl	8006778 <HAL_Delay>
    print(&lcdDisplay,userData);
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	4803      	ldr	r0, [pc, #12]	; (8003cf0 <HW_PRINT_DATA+0x34>)
 8003ce2:	f000 f95b 	bl	8003f9c <print>
}
 8003ce6:	bf00      	nop
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	200005b8 	.word	0x200005b8

08003cf4 <HW_ERASE_DATA>:

unsigned char HW_ERASE_DATA()
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	clear(&lcdDisplay);
 8003cf8:	4802      	ldr	r0, [pc, #8]	; (8003d04 <HW_ERASE_DATA+0x10>)
 8003cfa:	f000 f970 	bl	8003fde <clear>
}
 8003cfe:	bf00      	nop
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	200005b8 	.word	0x200005b8

08003d08 <HW_UPDATE_DATA>:

unsigned char HW_UPDATE_DATA(unsigned char position, unsigned char linha)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	460a      	mov	r2, r1
 8003d12:	71fb      	strb	r3, [r7, #7]
 8003d14:	4613      	mov	r3, r2
 8003d16:	71bb      	strb	r3, [r7, #6]
	setCursor(&lcdDisplay, position, linha); /***/
 8003d18:	79ba      	ldrb	r2, [r7, #6]
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4809      	ldr	r0, [pc, #36]	; (8003d44 <HW_UPDATE_DATA+0x3c>)
 8003d20:	f000 fadf 	bl	80042e2 <setCursor>
	cursor(&lcdDisplay);
 8003d24:	4807      	ldr	r0, [pc, #28]	; (8003d44 <HW_UPDATE_DATA+0x3c>)
 8003d26:	f000 f999 	bl	800405c <cursor>
	HAL_Delay(500);
 8003d2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d2e:	f002 fd23 	bl	8006778 <HAL_Delay>
	noCursor(&lcdDisplay);
 8003d32:	4804      	ldr	r0, [pc, #16]	; (8003d44 <HW_UPDATE_DATA+0x3c>)
 8003d34:	f000 f97a 	bl	800402c <noCursor>
}
 8003d38:	bf00      	nop
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200005b8 	.word	0x200005b8

08003d48 <HW_HOME_DISP>:

unsigned char HW_HOME_DISP(unsigned char* appName, unsigned char* companyName, unsigned char* appVersion)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
	begin(&lcdDisplay,16,4,LCD_5x10DOTS);
 8003d54:	2304      	movs	r3, #4
 8003d56:	2204      	movs	r2, #4
 8003d58:	2110      	movs	r1, #16
 8003d5a:	4812      	ldr	r0, [pc, #72]	; (8003da4 <HW_HOME_DISP+0x5c>)
 8003d5c:	f000 f824 	bl	8003da8 <begin>
	setCursor(&lcdDisplay, 0, 0);
 8003d60:	2200      	movs	r2, #0
 8003d62:	2100      	movs	r1, #0
 8003d64:	480f      	ldr	r0, [pc, #60]	; (8003da4 <HW_HOME_DISP+0x5c>)
 8003d66:	f000 fabc 	bl	80042e2 <setCursor>
	print(&lcdDisplay,appName);
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	480d      	ldr	r0, [pc, #52]	; (8003da4 <HW_HOME_DISP+0x5c>)
 8003d6e:	f000 f915 	bl	8003f9c <print>
	setCursor(&lcdDisplay, 0, 1);
 8003d72:	2201      	movs	r2, #1
 8003d74:	2100      	movs	r1, #0
 8003d76:	480b      	ldr	r0, [pc, #44]	; (8003da4 <HW_HOME_DISP+0x5c>)
 8003d78:	f000 fab3 	bl	80042e2 <setCursor>
	print(&lcdDisplay,companyName);
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	4809      	ldr	r0, [pc, #36]	; (8003da4 <HW_HOME_DISP+0x5c>)
 8003d80:	f000 f90c 	bl	8003f9c <print>
	setCursor(&lcdDisplay, 0, 3);
 8003d84:	2203      	movs	r2, #3
 8003d86:	2100      	movs	r1, #0
 8003d88:	4806      	ldr	r0, [pc, #24]	; (8003da4 <HW_HOME_DISP+0x5c>)
 8003d8a:	f000 faaa 	bl	80042e2 <setCursor>
	print(&lcdDisplay,appVersion);
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4804      	ldr	r0, [pc, #16]	; (8003da4 <HW_HOME_DISP+0x5c>)
 8003d92:	f000 f903 	bl	8003f9c <print>
	return &(lcdDisplay);
 8003d96:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <HW_HOME_DISP+0x5c>)
 8003d98:	b2db      	uxtb	r3, r3
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	200005b8 	.word	0x200005b8

08003da8 <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	4608      	mov	r0, r1
 8003db2:	4611      	mov	r1, r2
 8003db4:	461a      	mov	r2, r3
 8003db6:	4603      	mov	r3, r0
 8003db8:	70fb      	strb	r3, [r7, #3]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	70bb      	strb	r3, [r7, #2]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 8003dc2:	f107 0308 	add.w	r3, r7, #8
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f107 0308 	add.w	r3, r7, #8
 8003dd4:	cb03      	ldmia	r3!, {r0, r1}
 8003dd6:	6010      	str	r0, [r2, #0]
 8003dd8:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003de0:	486c      	ldr	r0, [pc, #432]	; (8003f94 <begin+0x1ec>)
 8003de2:	f003 fb85 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8003de6:	2200      	movs	r2, #0
 8003de8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003dec:	4869      	ldr	r0, [pc, #420]	; (8003f94 <begin+0x1ec>)
 8003dee:	f003 fb7f 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8003df2:	2200      	movs	r2, #0
 8003df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003df8:	4866      	ldr	r0, [pc, #408]	; (8003f94 <begin+0x1ec>)
 8003dfa:	f003 fb79 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e04:	4863      	ldr	r0, [pc, #396]	; (8003f94 <begin+0x1ec>)
 8003e06:	f003 fb73 	bl	80074f0 <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2108      	movs	r1, #8
 8003e0e:	4861      	ldr	r0, [pc, #388]	; (8003f94 <begin+0x1ec>)
 8003e10:	f003 fb6e 	bl	80074f0 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003e14:	2200      	movs	r2, #0
 8003e16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e1a:	485f      	ldr	r0, [pc, #380]	; (8003f98 <begin+0x1f0>)
 8003e1c:	f003 fb68 	bl	80074f0 <HAL_GPIO_WritePin>

	#if defined(LCD_8BITMODE)
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,GPIO_PIN_RESET);
 8003e20:	2200      	movs	r2, #0
 8003e22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e26:	485c      	ldr	r0, [pc, #368]	; (8003f98 <begin+0x1f0>)
 8003e28:	f003 fb62 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,GPIO_PIN_RESET);
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e32:	4859      	ldr	r0, [pc, #356]	; (8003f98 <begin+0x1f0>)
 8003e34:	f003 fb5c 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,GPIO_PIN_RESET);
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e3e:	4856      	ldr	r0, [pc, #344]	; (8003f98 <begin+0x1f0>)
 8003e40:	f003 fb56 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,GPIO_PIN_RESET);
 8003e44:	2200      	movs	r2, #0
 8003e46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e4a:	4853      	ldr	r0, [pc, #332]	; (8003f98 <begin+0x1f0>)
 8003e4c:	f003 fb50 	bl	80074f0 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8003e50:	2200      	movs	r2, #0
 8003e52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e56:	4850      	ldr	r0, [pc, #320]	; (8003f98 <begin+0x1f0>)
 8003e58:	f003 fb4a 	bl	80074f0 <HAL_GPIO_WritePin>
	#endif

	if (lines > 1) {
 8003e5c:	78bb      	ldrb	r3, [r7, #2]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d906      	bls.n	8003e70 <begin+0xc8>
		lcd->_displayfunction |= LCD_2LINE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	f043 0308 	orr.w	r3, r3, #8
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	78ba      	ldrb	r2, [r7, #2]
 8003e74:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	3340      	adds	r3, #64	; 0x40
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	2240      	movs	r2, #64	; 0x40
 8003e82:	2100      	movs	r1, #0
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fa0f 	bl	80042a8 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8003e8a:	787b      	ldrb	r3, [r7, #1]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <begin+0xfc>
 8003e90:	78bb      	ldrb	r3, [r7, #2]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d106      	bne.n	8003ea4 <begin+0xfc>
		lcd->_displayfunction |= LCD_5x10DOTS;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 8003ea4:	2032      	movs	r0, #50	; 0x32
 8003ea6:	f002 fc67 	bl	8006778 <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2108      	movs	r1, #8
 8003eae:	4839      	ldr	r0, [pc, #228]	; (8003f94 <begin+0x1ec>)
 8003eb0:	f003 fb1e 	bl	80074f0 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003eba:	4837      	ldr	r0, [pc, #220]	; (8003f98 <begin+0x1f0>)
 8003ebc:	f003 fb18 	bl	80074f0 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ec6:	4834      	ldr	r0, [pc, #208]	; (8003f98 <begin+0x1f0>)
 8003ec8:	f003 fb12 	bl	80074f0 <HAL_GPIO_WritePin>
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d015      	beq.n	8003f00 <begin+0x158>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 8003ed4:	2003      	movs	r0, #3
 8003ed6:	f000 f931 	bl	800413c <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 8003eda:	2005      	movs	r0, #5
 8003edc:	f002 fc4c 	bl	8006778 <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 8003ee0:	2003      	movs	r0, #3
 8003ee2:	f000 f92b 	bl	800413c <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 8003ee6:	2005      	movs	r0, #5
 8003ee8:	f002 fc46 	bl	8006778 <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 8003eec:	2003      	movs	r0, #3
 8003eee:	f000 f925 	bl	800413c <write4bits>
		HAL_Delay(5);
 8003ef2:	2005      	movs	r0, #5
 8003ef4:	f002 fc40 	bl	8006778 <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 8003ef8:	2002      	movs	r0, #2
 8003efa:	f000 f91f 	bl	800413c <write4bits>
 8003efe:	e023      	b.n	8003f48 <begin+0x1a0>

		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 23, pg 45 

		// Envia sequência de comando
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	f043 0320 	orr.w	r3, r3, #32
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f9bb 	bl	8004288 <command>
		HAL_Delay(6);  // wait more than 4.1 ms
 8003f12:	2006      	movs	r0, #6
 8003f14:	f002 fc30 	bl	8006778 <HAL_Delay>

		// Segundo envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	f043 0320 	orr.w	r3, r3, #32
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4619      	mov	r1, r3
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f9af 	bl	8004288 <command>
		HAL_Delay(1);
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f002 fc24 	bl	8006778 <HAL_Delay>

		// Terceiro envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	f043 0320 	orr.w	r3, r3, #32
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f9a3 	bl	8004288 <command>
		HAL_Delay(1);
 8003f42:	2001      	movs	r0, #1
 8003f44:	f002 fc18 	bl	8006778 <HAL_Delay>
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	f043 0320 	orr.w	r3, r3, #32
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f997 	bl	8004288 <command>
    HAL_Delay(1);
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f002 fc0c 	bl	8006778 <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2204      	movs	r2, #4
 8003f64:	705a      	strb	r2, [r3, #1]
    display(lcd);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f848 	bl	8003ffc <display>

    // Limpa display
    clear(lcd);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f836 	bl	8003fde <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	789b      	ldrb	r3, [r3, #2]
 8003f7c:	f043 0304 	orr.w	r3, r3, #4
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	4619      	mov	r1, r3
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f97f 	bl	8004288 <command>
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40020400 	.word	0x40020400
 8003f98:	40020000 	.word	0x40020000

08003f9c <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 8003fa6:	6838      	ldr	r0, [r7, #0]
 8003fa8:	f7fc f91a 	bl	80001e0 <strlen>
 8003fac:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 8003fae:	2300      	movs	r3, #0
 8003fb0:	73fb      	strb	r3, [r7, #15]
 8003fb2:	e00b      	b.n	8003fcc <print+0x30>
		write(lcd ,*(value+i));
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f993 3000 	ldrsb.w	r3, [r3]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f863 	bl	800408c <write>
	for (uint8_t i = 0; i < Lengh; i++){
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d8ef      	bhi.n	8003fb4 <print+0x18>
	}
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f94d 	bl	8004288 <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 8003fee:	2002      	movs	r0, #2
 8003ff0:	f002 fbc2 	bl	8006778 <HAL_Delay>
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	f043 0304 	orr.w	r3, r3, #4
 800400c:	b2da      	uxtb	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	785b      	ldrb	r3, [r3, #1]
 8004016:	f043 0308 	orr.w	r3, r3, #8
 800401a:	b2db      	uxtb	r3, r3
 800401c:	4619      	mov	r1, r3
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f932 	bl	8004288 <command>
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <noCursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void noCursor(LiquidCrystal *lcd){
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol &= ~LCD_CURSORON;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	785b      	ldrb	r3, [r3, #1]
 8004038:	f023 0302 	bic.w	r3, r3, #2
 800403c:	b2da      	uxtb	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	785b      	ldrb	r3, [r3, #1]
 8004046:	f043 0308 	orr.w	r3, r3, #8
 800404a:	b2db      	uxtb	r3, r3
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f91a 	bl	8004288 <command>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <cursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void cursor(LiquidCrystal *lcd){
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol |= LCD_CURSORON;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	785b      	ldrb	r3, [r3, #1]
 8004068:	f043 0302 	orr.w	r3, r3, #2
 800406c:	b2da      	uxtb	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	f043 0308 	orr.w	r3, r3, #8
 800407a:	b2db      	uxtb	r3, r3
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f902 	bl	8004288 <command>
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	2201      	movs	r2, #1
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f804 	bl	80040ac <send>
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
 80040b8:	4613      	mov	r3, r2
 80040ba:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 80040bc:	78bb      	ldrb	r3, [r7, #2]
 80040be:	461a      	mov	r2, r3
 80040c0:	2108      	movs	r1, #8
 80040c2:	4811      	ldr	r0, [pc, #68]	; (8004108 <send+0x5c>)
 80040c4:	f003 fa14 	bl	80074f0 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 80040c8:	2200      	movs	r2, #0
 80040ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040ce:	480f      	ldr	r0, [pc, #60]	; (800410c <send+0x60>)
 80040d0:	f003 fa0e 	bl	80074f0 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <send+0x3e>
	    write8bits(value);
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f866 	bl	80041b4 <write8bits>
	    write4bits(value);
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 80040e8:	e009      	b.n	80040fe <send+0x52>
	    write4bits(value>>4);
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 f823 	bl	800413c <write4bits>
	    write4bits(value);
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 f81f 	bl	800413c <write4bits>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40020400 	.word	0x40020400
 800410c:	40020000 	.word	0x40020000

08004110 <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8004114:	2201      	movs	r2, #1
 8004116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800411a:	4807      	ldr	r0, [pc, #28]	; (8004138 <pulseEnable+0x28>)
 800411c:	f003 f9e8 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004120:	2001      	movs	r0, #1
 8004122:	f002 fb29 	bl	8006778 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8004126:	2200      	movs	r2, #0
 8004128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800412c:	4802      	ldr	r0, [pc, #8]	; (8004138 <pulseEnable+0x28>)
 800412e:	f003 f9df 	bl	80074f0 <HAL_GPIO_WritePin>
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40020000 	.word	0x40020000

0800413c <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004154:	4816      	ldr	r0, [pc, #88]	; (80041b0 <write4bits+0x74>)
 8004156:	f003 f9cb 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800416c:	4810      	ldr	r0, [pc, #64]	; (80041b0 <write4bits+0x74>)
 800416e:	f003 f9bf 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	089b      	lsrs	r3, r3, #2
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004184:	480a      	ldr	r0, [pc, #40]	; (80041b0 <write4bits+0x74>)
 8004186:	f003 f9b3 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	08db      	lsrs	r3, r3, #3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	b2db      	uxtb	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <write4bits+0x74>)
 800419e:	f003 f9a7 	bl	80074f0 <HAL_GPIO_WritePin>

	pulseEnable();
 80041a2:	f7ff ffb5 	bl	8004110 <pulseEnable>
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40020400 	.word	0x40020400

080041b4 <write8bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write8bits(uint8_t value){
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,(value >> 0) & 0x01);
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041cc:	482c      	ldr	r0, [pc, #176]	; (8004280 <write8bits+0xcc>)
 80041ce:	f003 f98f 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,(value >> 1) & 0x01);
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041e4:	4826      	ldr	r0, [pc, #152]	; (8004280 <write8bits+0xcc>)
 80041e6:	f003 f983 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,(value >> 2) & 0x01);
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	089b      	lsrs	r3, r3, #2
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041fc:	4820      	ldr	r0, [pc, #128]	; (8004280 <write8bits+0xcc>)
 80041fe:	f003 f977 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,(value >> 3) & 0x01);
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	08db      	lsrs	r3, r3, #3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004214:	481a      	ldr	r0, [pc, #104]	; (8004280 <write8bits+0xcc>)
 8004216:	f003 f96b 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 4) & 0x01);
 800421a:	79fb      	ldrb	r3, [r7, #7]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	b2db      	uxtb	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800422c:	4815      	ldr	r0, [pc, #84]	; (8004284 <write8bits+0xd0>)
 800422e:	f003 f95f 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 5) & 0x01);
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004244:	480f      	ldr	r0, [pc, #60]	; (8004284 <write8bits+0xd0>)
 8004246:	f003 f953 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 6) & 0x01);
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	099b      	lsrs	r3, r3, #6
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800425c:	4809      	ldr	r0, [pc, #36]	; (8004284 <write8bits+0xd0>)
 800425e:	f003 f947 	bl	80074f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 7) & 0x01);
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	09db      	lsrs	r3, r3, #7
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800426e:	4805      	ldr	r0, [pc, #20]	; (8004284 <write8bits+0xd0>)
 8004270:	f003 f93e 	bl	80074f0 <HAL_GPIO_WritePin>

	pulseEnable();
 8004274:	f7ff ff4c 	bl	8004110 <pulseEnable>

}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40020000 	.word	0x40020000
 8004284:	40020400 	.word	0x40020400

08004288 <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	2200      	movs	r2, #0
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ff06 	bl	80040ac <send>
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	71da      	strb	r2, [r3, #7]
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	70fb      	strb	r3, [r7, #3]
 80042ee:	4613      	mov	r3, r2
 80042f0:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 80042f2:	2304      	movs	r3, #4
 80042f4:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 80042f6:	78bb      	ldrb	r3, [r7, #2]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d803      	bhi.n	8004306 <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	78db      	ldrb	r3, [r3, #3]
 800430a:	78ba      	ldrb	r2, [r7, #2]
 800430c:	429a      	cmp	r2, r3
 800430e:	d303      	bcc.n	8004318 <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	78db      	ldrb	r3, [r3, #3]
 8004314:	3b01      	subs	r3, #1
 8004316:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 8004318:	78bb      	ldrb	r3, [r7, #2]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	791a      	ldrb	r2, [r3, #4]
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	4413      	add	r3, r2
 8004324:	b2db      	uxtb	r3, r3
 8004326:	b25b      	sxtb	r3, r3
 8004328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800432c:	b25b      	sxtb	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	4619      	mov	r1, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff ffa8 	bl	8004288 <command>
}
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HW_EXT_MEMORY_WRITE>:
    f_close(&fil);
    return loadDataHW;
}

unsigned char HW_EXT_MEMORY_WRITE(unsigned char* saveString, unsigned char* nameString)
{
 8004340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004342:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8004346:	af04      	add	r7, sp, #16
 8004348:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800434c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8004350:	6018      	str	r0, [r3, #0]
 8004352:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8004356:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800435a:	6019      	str	r1, [r3, #0]
	unsigned char sampleToSave = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	struct results* saveStruct = saveString;
 8004362:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8004366:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
	FRESULT result;
	FIL fil;
	FATFS fs;
	result = f_mount(&fs," ", 0);
 8004370:	f107 0308 	add.w	r3, r7, #8
 8004374:	2200      	movs	r2, #0
 8004376:	4949      	ldr	r1, [pc, #292]	; (800449c <HW_EXT_MEMORY_WRITE+0x15c>)
 8004378:	4618      	mov	r0, r3
 800437a:	f008 faef 	bl	800c95c <f_mount>
 800437e:	4603      	mov	r3, r0
 8004380:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
//	unsigned char* a = HW_EXT_MEMORY_MAIN();
//	HW_EXT_MEMORY_INIT(a);
    HAL_Delay(500);
 8004384:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004388:	f002 f9f6 	bl	8006778 <HAL_Delay>
    result = f_open(&fil, nameString, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 800438c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8004390:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8004394:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8004398:	2213      	movs	r2, #19
 800439a:	6819      	ldr	r1, [r3, #0]
 800439c:	f008 fb24 	bl	800c9e8 <f_open>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
	{

//		printf( "error ao abrir\n");
	}
	else{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80043a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043aa:	483d      	ldr	r0, [pc, #244]	; (80044a0 <HW_EXT_MEMORY_WRITE+0x160>)
 80043ac:	f003 f8b9 	bl	8007522 <HAL_GPIO_TogglePin>
//		printf( "abriu save_SD_card\n");
		f_puts("Amostra\t\tAltura(cm)\t\tPotência(W)\t\tTvoo(ms)\t\tTsolo(ms)\n", &fil);
 80043b0:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80043b4:	4619      	mov	r1, r3
 80043b6:	483b      	ldr	r0, [pc, #236]	; (80044a4 <HW_EXT_MEMORY_WRITE+0x164>)
 80043b8:	f008 ff68 	bl	800d28c <f_puts>
		HAL_Delay(10);
 80043bc:	200a      	movs	r0, #10
 80043be:	f002 f9db 	bl	8006778 <HAL_Delay>
		for(sampleToSave = 0;sampleToSave<saveStruct->resultTestAcquiredSamples;sampleToSave++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 80043c8:	e053      	b.n	8004472 <HW_EXT_MEMORY_WRITE+0x132>
		{
//			result = f_printf(&fil,"%d",10);
			f_printf(&fil,"%d\t %d\t %d\t %d\t %d",
				   saveStruct->Measurement[sampleToSave].sampleNum,
 80043ca:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 80043ce:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 80043d2:	4613      	mov	r3, r2
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4413      	add	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	440b      	add	r3, r1
 80043dc:	3304      	adds	r3, #4
 80043de:	781b      	ldrb	r3, [r3, #0]
			f_printf(&fil,"%d\t %d\t %d\t %d\t %d",
 80043e0:	461e      	mov	r6, r3
 80043e2:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 80043e6:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 80043ea:	4613      	mov	r3, r2
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	4413      	add	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	440b      	add	r3, r1
 80043f4:	3314      	adds	r3, #20
 80043f6:	681d      	ldr	r5, [r3, #0]
 80043f8:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 80043fc:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8004400:	4613      	mov	r3, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	4413      	add	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	440b      	add	r3, r1
 800440a:	3318      	adds	r3, #24
 800440c:	6819      	ldr	r1, [r3, #0]
 800440e:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 8004412:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4403      	add	r3, r0
 8004420:	3308      	adds	r3, #8
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 8004428:	f8d7 4470 	ldr.w	r4, [r7, #1136]	; 0x470
 800442c:	4613      	mov	r3, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	4413      	add	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	4423      	add	r3, r4
 8004436:	330c      	adds	r3, #12
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f507 740f 	add.w	r4, r7, #572	; 0x23c
 800443e:	9302      	str	r3, [sp, #8]
 8004440:	9001      	str	r0, [sp, #4]
 8004442:	9100      	str	r1, [sp, #0]
 8004444:	462b      	mov	r3, r5
 8004446:	4632      	mov	r2, r6
 8004448:	4917      	ldr	r1, [pc, #92]	; (80044a8 <HW_EXT_MEMORY_WRITE+0x168>)
 800444a:	4620      	mov	r0, r4
 800444c:	f008 ff42 	bl	800d2d4 <f_printf>
				   saveStruct->Measurement[sampleToSave].alturaSalto,
				   saveStruct->Measurement[sampleToSave].potenciaSalto,
				   saveStruct->Measurement[sampleToSave].uiVooTime,
				   saveStruct->Measurement[sampleToSave].uiSoloTime);
			result = f_puts("\n", &fil);
 8004450:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8004454:	4619      	mov	r1, r3
 8004456:	4815      	ldr	r0, [pc, #84]	; (80044ac <HW_EXT_MEMORY_WRITE+0x16c>)
 8004458:	f008 ff18 	bl	800d28c <f_puts>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			HAL_Delay(100);
 8004462:	2064      	movs	r0, #100	; 0x64
 8004464:	f002 f988 	bl	8006778 <HAL_Delay>
		for(sampleToSave = 0;sampleToSave<saveStruct->resultTestAcquiredSamples;sampleToSave++)
 8004468:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800446c:	3301      	adds	r3, #1
 800446e:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 8004472:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 800447c:	429a      	cmp	r2, r3
 800447e:	d3a4      	bcc.n	80043ca <HW_EXT_MEMORY_WRITE+0x8a>
		}
	}
	result = f_close(&fil);
 8004480:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8004484:	4618      	mov	r0, r3
 8004486:	f008 fe60 	bl	800d14a <f_close>
 800448a:	4603      	mov	r3, r0
 800448c:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
    return 1;
 8004490:	2301      	movs	r3, #1
}
 8004492:	4618      	mov	r0, r3
 8004494:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 8004498:	46bd      	mov	sp, r7
 800449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800449c:	08010184 	.word	0x08010184
 80044a0:	40020800 	.word	0x40020800
 80044a4:	08010188 	.word	0x08010188
 80044a8:	080101c0 	.word	0x080101c0
 80044ac:	080101d4 	.word	0x080101d4

080044b0 <getArqName>:
    return ptr_loadedResults;

}

unsigned char* getArqName(unsigned char numTeste)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	71fb      	strb	r3, [r7, #7]
    static unsigned char arqName[15]; //VERIFICAR SE VOU FAZER UM GET NISSO
    sprintf(arqName,"Teste%d.txt",numTeste);
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	461a      	mov	r2, r3
 80044be:	4904      	ldr	r1, [pc, #16]	; (80044d0 <getArqName+0x20>)
 80044c0:	4804      	ldr	r0, [pc, #16]	; (80044d4 <getArqName+0x24>)
 80044c2:	f009 fb7b 	bl	800dbbc <siprintf>
    return arqName;
 80044c6:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <getArqName+0x24>)
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	080101ec 	.word	0x080101ec
 80044d4:	200005c0 	.word	0x200005c0

080044d8 <readingSensor>:
	userState = state;
	return userState;
}

unsigned char readingSensor()
{
 80044d8:	b590      	push	{r4, r7, lr}
 80044da:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80044de:	af00      	add	r7, sp, #0
	struct dataInsert* configStruct = getUserConfigStruct();
 80044e0:	f7fd fdda 	bl	8002098 <getUserConfigStruct>
 80044e4:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
	unsigned int vooTime[SAMPLES];
	unsigned int contatoTimeLocal[20]; 	//Para salvar no cartão SD
	unsigned int vooTimeLocal[20]; 	//Para salvar no cartão SD
	unsigned int alturaSaltoLocal[20];
	unsigned int potenciaSaltoLocal[20];
	unsigned int repousoTime = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	unsigned int stateTransitionTime = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	unsigned int* ptr_measurementContatoTime;
	unsigned int* ptr_measurementVooTime;
	unsigned int* ptr_totalTime;
	unsigned char* ptr_samples;
	unsigned char* ptr_sensorFlag;
	unsigned char count = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	unsigned char userSelectTapete = FALSE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff


	unsigned char key = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	f887 3212 	strb.w	r3, [r7, #530]	; 0x212
	unsigned long int intervalSaltos = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	unsigned long int intervalSeries = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	unsigned char numSaltos = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
	unsigned char numSeries = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
	unsigned char readStatus = OK;
 800451e:	2300      	movs	r3, #0
 8004520:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f



	ptr_samples = getSamplesCount();
 8004524:	f001 f8be 	bl	80056a4 <getSamplesCount>
 8004528:	4603      	mov	r3, r0
 800452a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	ptr_sensorFlag = getSensorFlag();
 800452e:	f001 f905 	bl	800573c <getSensorFlag>
 8004532:	4603      	mov	r3, r0
 8004534:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	ptr_measurementTotalTime = getTotalTime();
 8004538:	f001 f888 	bl	800564c <getTotalTime>
 800453c:	4603      	mov	r3, r0
 800453e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	ptr_measurementContatoTime = getTimeSolo();
 8004542:	f001 f897 	bl	8005674 <getTimeSolo>
 8004546:	4603      	mov	r3, r0
 8004548:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	ptr_measurementVooTime = getTimeVoo();
 800454c:	f001 f888 	bl	8005660 <getTimeVoo>
 8004550:	4603      	mov	r3, r0
 8004552:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	ptr_totalTime = getTimer3Variable();
 8004556:	f001 f8fb 	bl	8005750 <getTimer3Variable>
 800455a:	4603      	mov	r3, r0
 800455c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	unsigned char indexTest = getResultTestNumber();
 8004560:	f7fd fe0e 	bl	8002180 <getResultTestNumber>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 31db 	strb.w	r3, [r7, #475]	; 0x1db


	/*The definition below are used just for debugging proposes
	 *
	 */
	unsigned long int userIntervalSeries = 1000;
 800456a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800456e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	unsigned char userNumSeries = 2;
 8004572:	2302      	movs	r3, #2
 8004574:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
//	unsigned char userTapete = TRUE;
	unsigned long int userIntervalSaltos = 100;
 8004578:	2364      	movs	r3, #100	; 0x64
 800457a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	unsigned char userNumSaltos = 2;
 800457e:	2302      	movs	r3, #2
 8004580:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
	unsigned int timeMin = 50;
 8004584:	2332      	movs	r3, #50	; 0x32
 8004586:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	unsigned int timeMax = 5000;
 800458a:	f241 3388 	movw	r3, #5000	; 0x1388
 800458e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	unsigned int massaCorp = 10; //10kg
 8004592:	230a      	movs	r3, #10
 8004594:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	configStruct->userIntervalSeries = userIntervalSeries;
 8004598:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800459c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80045a0:	621a      	str	r2, [r3, #32]
	configStruct->userNumSeries = userNumSeries;
 80045a2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80045a6:	f897 21d3 	ldrb.w	r2, [r7, #467]	; 0x1d3
 80045aa:	779a      	strb	r2, [r3, #30]
	configStruct->userNumSaltos = userNumSaltos;
 80045ac:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80045b0:	f897 21cb 	ldrb.w	r2, [r7, #459]	; 0x1cb
 80045b4:	751a      	strb	r2, [r3, #20]
	configStruct->userIntervalSaltos = userIntervalSaltos;
 80045b6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80045ba:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80045be:	619a      	str	r2, [r3, #24]
	configStruct->userMass = massaCorp;
 80045c0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80045ca:	721a      	strb	r2, [r3, #8]
	configStruct->userSelectTapete = userSelectTapete;
 80045cc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80045d0:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 80045d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//
	key = getKeyPressed();
 80045d8:	f001 f87a 	bl	80056d0 <getKeyPressed>
 80045dc:	4603      	mov	r3, r0
 80045de:	f887 3212 	strb.w	r3, [r7, #530]	; 0x212
	*ptr_totalTime=0;
 80045e2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]

//	while(key != PARAR && totalTime != configStruct->userTime && numSaltos != configStruct->userNumSaltos) //WHILE COMPLETO
//	while(key != PARAR && numSaltos != configStruct->userNumSaltos) //USADO PARA DEBUGGER DESCONSIDERANDO O TIMEOUT
	while(key != PARAR && numSeries != configStruct->userNumSeries) //USADO PARA DEBUGGER DESCONSIDERANDO O TIMEOUT e NUM SALTOS
 80045ea:	bf00      	nop
 80045ec:	e174      	b.n	80048d8 <readingSensor+0x400>
//	while(key != PARAR) //USADO PARA DEBUGGER DESCONSIDERANDO O TIMEOUT e NUM SALTOS
	{
		key = getKeyPressed();
 80045ee:	f001 f86f 	bl	80056d0 <getKeyPressed>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f887 3212 	strb.w	r3, [r7, #530]	; 0x212
		switch(userState)
 80045f8:	4bc1      	ldr	r3, [pc, #772]	; (8004900 <readingSensor+0x428>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	3b32      	subs	r3, #50	; 0x32
 80045fe:	2b05      	cmp	r3, #5
 8004600:	f200 816a 	bhi.w	80048d8 <readingSensor+0x400>
 8004604:	a201      	add	r2, pc, #4	; (adr r2, 800460c <readingSensor+0x134>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	08004625 	.word	0x08004625
 8004610:	08004685 	.word	0x08004685
 8004614:	0800471b 	.word	0x0800471b
 8004618:	080048d9 	.word	0x080048d9
 800461c:	080048d9 	.word	0x080048d9
 8004620:	080048a5 	.word	0x080048a5
		{
			case REPOUSO:
				if(*ptr_sensorFlag == 0 && configStruct->userSelectTapete == FALSE) //INICIO FORA DO TAPETE
 8004624:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d112      	bne.n	8004654 <readingSensor+0x17c>
 800462e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004632:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10c      	bne.n	8004654 <readingSensor+0x17c>
				{
					userState = CONTATO;
 800463a:	4bb1      	ldr	r3, [pc, #708]	; (8004900 <readingSensor+0x428>)
 800463c:	2233      	movs	r2, #51	; 0x33
 800463e:	701a      	strb	r2, [r3, #0]
					repousoTime = *ptr_totalTime;
 8004640:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
					stateTransitionTime = repousoTime;
 800464a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800464e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004652:	e016      	b.n	8004682 <readingSensor+0x1aa>
				}
				else if(*ptr_sensorFlag == 0 && configStruct->userSelectTapete == TRUE) // INICIO DENTRO DO TAPETE
 8004654:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 813c 	bne.w	80048d8 <readingSensor+0x400>
 8004660:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004664:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004668:	2b01      	cmp	r3, #1
 800466a:	f040 8135 	bne.w	80048d8 <readingSensor+0x400>
				{
					userState = CONTATO;
 800466e:	4ba4      	ldr	r3, [pc, #656]	; (8004900 <readingSensor+0x428>)
 8004670:	2233      	movs	r2, #51	; 0x33
 8004672:	701a      	strb	r2, [r3, #0]
					repousoTime = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
					stateTransitionTime = repousoTime;
 800467a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800467e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
				}
			break;
 8004682:	e129      	b.n	80048d8 <readingSensor+0x400>

			case CONTATO:
				//PAREI AQUI
				if(*ptr_sensorFlag == 1)
 8004684:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d10a      	bne.n	80046a4 <readingSensor+0x1cc>
				{
					userState = VOO;
 800468e:	4b9c      	ldr	r3, [pc, #624]	; (8004900 <readingSensor+0x428>)
 8004690:	2234      	movs	r2, #52	; 0x34
 8004692:	701a      	strb	r2, [r3, #0]
					stateTransitionTime = *ptr_totalTime;
 8004694:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
					resetSamplesCount();
 800469e:	f000 fff3 	bl	8005688 <resetSamplesCount>
 80046a2:	e119      	b.n	80048d8 <readingSensor+0x400>
				}
				else
				{
					resetSamplesCount();
 80046a4:	f000 fff0 	bl	8005688 <resetSamplesCount>
					while(*ptr_samples < SAMPLES)
 80046a8:	e01c      	b.n	80046e4 <readingSensor+0x20c>
					{
						totalTimeArray[*ptr_samples] = *ptr_totalTime;
 80046aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	4619      	mov	r1, r3
 80046b2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	008b      	lsls	r3, r1, #2
 80046ba:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80046be:	443b      	add	r3, r7
 80046c0:	f843 2cac 	str.w	r2, [r3, #-172]
						contatoTime[*ptr_samples] = *ptr_totalTime - stateTransitionTime;
 80046c4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	4619      	mov	r1, r3
 80046d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80046d6:	1ad2      	subs	r2, r2, r3
 80046d8:	008b      	lsls	r3, r1, #2
 80046da:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80046de:	443b      	add	r3, r7
 80046e0:	f843 2c84 	str.w	r2, [r3, #-132]
					while(*ptr_samples < SAMPLES)
 80046e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b09      	cmp	r3, #9
 80046ec:	d9dd      	bls.n	80046aa <readingSensor+0x1d2>
//						vooTime[*ptr_samples] = 0;
					}

					if(*ptr_samples == SAMPLES)
 80046ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b0a      	cmp	r3, #10
 80046f6:	d10c      	bne.n	8004712 <readingSensor+0x23a>
					{
						contatoTimeLocal[count] = contatoTime[SAMPLES-1];
 80046f8:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 80046fc:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8004700:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004704:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						readStatus = OK;
 800470c:	2300      	movs	r3, #0
 800470e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
					}
					userState = CONTATO;
 8004712:	4b7b      	ldr	r3, [pc, #492]	; (8004900 <readingSensor+0x428>)
 8004714:	2233      	movs	r2, #51	; 0x33
 8004716:	701a      	strb	r2, [r3, #0]
				}

			break;
 8004718:	e0de      	b.n	80048d8 <readingSensor+0x400>

			case VOO:
				if(*ptr_sensorFlag  == 0)
 800471a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d135      	bne.n	8004790 <readingSensor+0x2b8>
				{
					if(readStatus == OK)
 8004724:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8004728:	2b00      	cmp	r3, #0
 800472a:	d12d      	bne.n	8004788 <readingSensor+0x2b0>
					{
						stateTransitionTime = *ptr_totalTime;
 800472c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
						numSaltos++;
 8004736:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800473a:	3301      	adds	r3, #1
 800473c:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
						count++;
 8004740:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 8004744:	3301      	adds	r3, #1
 8004746:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
						if(numSaltos == configStruct->userNumSaltos)
 800474a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800474e:	7d1b      	ldrb	r3, [r3, #20]
 8004750:	f897 2211 	ldrb.w	r2, [r7, #529]	; 0x211
 8004754:	429a      	cmp	r2, r3
 8004756:	d113      	bne.n	8004780 <readingSensor+0x2a8>
						{
							numSeries++;
 8004758:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800475c:	3301      	adds	r3, #1
 800475e:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
							if(numSeries ==  configStruct->userNumSeries) userState = REPOUSO;
 8004762:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004766:	7f9b      	ldrb	r3, [r3, #30]
 8004768:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 800476c:	429a      	cmp	r2, r3
 800476e:	d103      	bne.n	8004778 <readingSensor+0x2a0>
 8004770:	4b63      	ldr	r3, [pc, #396]	; (8004900 <readingSensor+0x428>)
 8004772:	2232      	movs	r2, #50	; 0x32
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e0af      	b.n	80048d8 <readingSensor+0x400>
							else userState = INTERVALO;
 8004778:	4b61      	ldr	r3, [pc, #388]	; (8004900 <readingSensor+0x428>)
 800477a:	2237      	movs	r2, #55	; 0x37
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	e0ab      	b.n	80048d8 <readingSensor+0x400>
						}
						else
						{
							userState = CONTATO;
 8004780:	4b5f      	ldr	r3, [pc, #380]	; (8004900 <readingSensor+0x428>)
 8004782:	2233      	movs	r2, #51	; 0x33
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	e0a7      	b.n	80048d8 <readingSensor+0x400>
						}

					}
					else userState = CONTATO;
 8004788:	4b5d      	ldr	r3, [pc, #372]	; (8004900 <readingSensor+0x428>)
 800478a:	2233      	movs	r2, #51	; 0x33
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	e0a3      	b.n	80048d8 <readingSensor+0x400>
				}

				else
				{
					resetSamplesCount();
 8004790:	f000 ff7a 	bl	8005688 <resetSamplesCount>
					while(*ptr_samples < SAMPLES)
 8004794:	e01c      	b.n	80047d0 <readingSensor+0x2f8>
					{
//						contatoTime[*ptr_samples] = 0;
						totalTimeArray[*ptr_samples] = *ptr_totalTime;
 8004796:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	4619      	mov	r1, r3
 800479e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	008b      	lsls	r3, r1, #2
 80047a6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80047aa:	443b      	add	r3, r7
 80047ac:	f843 2cac 	str.w	r2, [r3, #-172]
						vooTime[*ptr_samples] = *ptr_totalTime - stateTransitionTime;
 80047b0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	4619      	mov	r1, r3
 80047be:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	008b      	lsls	r3, r1, #2
 80047c6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80047ca:	443b      	add	r3, r7
 80047cc:	f843 2cd4 	str.w	r2, [r3, #-212]
					while(*ptr_samples < SAMPLES)
 80047d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b09      	cmp	r3, #9
 80047d8:	d9dd      	bls.n	8004796 <readingSensor+0x2be>
					}
					if(*ptr_samples == SAMPLES)
 80047da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b0a      	cmp	r3, #10
 80047e2:	d179      	bne.n	80048d8 <readingSensor+0x400>
					{
						vooTimeLocal[count] = vooTime[SAMPLES-1];
 80047e4:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 80047e8:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80047ec:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80047f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80047f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						//qui
						if(vooTimeLocal[count]>timeMin && vooTimeLocal[count]<timeMax)
 80047f8:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 80047fc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004800:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004808:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800480c:	429a      	cmp	r2, r3
 800480e:	d245      	bcs.n	800489c <readingSensor+0x3c4>
 8004810:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8004814:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004818:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800481c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004820:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004824:	429a      	cmp	r2, r3
 8004826:	d939      	bls.n	800489c <readingSensor+0x3c4>
						{
							alturaSaltoLocal[count] = calcAltura(vooTimeLocal[count]);
 8004828:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800482c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004830:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004840:	f897 4213 	ldrb.w	r4, [r7, #531]	; 0x213
 8004844:	eeb0 0a67 	vmov.f32	s0, s15
 8004848:	f000 f8f2 	bl	8004a30 <calcAltura>
 800484c:	4602      	mov	r2, r0
 800484e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004852:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004856:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
							potenciaSaltoLocal[count] = calcPotencia(alturaSaltoLocal[count],configStruct->userMass);
 800485a:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800485e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004862:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004866:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800486a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800486e:	7a1b      	ldrb	r3, [r3, #8]
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f000 f908 	bl	8004a88 <calcPotencia>
 8004878:	eef0 7a40 	vmov.f32	s15, s0
 800487c:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8004880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004884:	ee17 1a90 	vmov	r1, s15
 8004888:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800488c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8004890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							readStatus = OK;
 8004894:	2300      	movs	r3, #0
 8004896:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800489a:	e002      	b.n	80048a2 <readingSensor+0x3ca>
						}
						else readStatus = ERROSALTO;
 800489c:	2301      	movs	r3, #1
 800489e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
//						resetSamplesCount();
					}
				}
			break;
 80048a2:	e019      	b.n	80048d8 <readingSensor+0x400>

			case INTERVALO:
				intervalSeries = *ptr_totalTime - stateTransitionTime;
 80048a4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
				if(intervalSeries == configStruct->userIntervalSeries)
 80048b4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80048be:	429a      	cmp	r2, r3
 80048c0:	d106      	bne.n	80048d0 <readingSensor+0x3f8>
				{
					userState = CONTATO;
 80048c2:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <readingSensor+0x428>)
 80048c4:	2233      	movs	r2, #51	; 0x33
 80048c6:	701a      	strb	r2, [r3, #0]
					numSaltos = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
 80048ce:	e002      	b.n	80048d6 <readingSensor+0x3fe>
				}
				else userState = INTERVALO;
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <readingSensor+0x428>)
 80048d2:	2237      	movs	r2, #55	; 0x37
 80048d4:	701a      	strb	r2, [r3, #0]
				break;
 80048d6:	bf00      	nop
	while(key != PARAR && numSeries != configStruct->userNumSeries) //USADO PARA DEBUGGER DESCONSIDERANDO O TIMEOUT e NUM SALTOS
 80048d8:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 80048dc:	2b50      	cmp	r3, #80	; 0x50
 80048de:	d007      	beq.n	80048f0 <readingSensor+0x418>
 80048e0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80048e4:	7f9b      	ldrb	r3, [r3, #30]
 80048e6:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80048ea:	429a      	cmp	r2, r3
 80048ec:	f47f ae7f 	bne.w	80045ee <readingSensor+0x116>
		}
	}

	measuredData.resultTestAcquiredSamples = count;
 80048f0:	4a04      	ldr	r2, [pc, #16]	; (8004904 <readingSensor+0x42c>)
 80048f2:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 80048f6:	7053      	strb	r3, [r2, #1]
	for(unsigned i=0;i<count;i++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 80048fe:	e066      	b.n	80049ce <readingSensor+0x4f6>
 8004900:	200000e8 	.word	0x200000e8
 8004904:	200005d0 	.word	0x200005d0
	{
		measuredData.Measurement[i].sampleNum = i+1;
 8004908:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800490c:	b2db      	uxtb	r3, r3
 800490e:	3301      	adds	r3, #1
 8004910:	b2d8      	uxtb	r0, r3
 8004912:	4945      	ldr	r1, [pc, #276]	; (8004a28 <readingSensor+0x550>)
 8004914:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8004918:	4613      	mov	r3, r2
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	4413      	add	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	440b      	add	r3, r1
 8004922:	3304      	adds	r3, #4
 8004924:	4602      	mov	r2, r0
 8004926:	701a      	strb	r2, [r3, #0]
		measuredData.Measurement[i].alturaSalto = alturaSaltoLocal[i];
 8004928:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800492c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004930:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8004934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004938:	483b      	ldr	r0, [pc, #236]	; (8004a28 <readingSensor+0x550>)
 800493a:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800493e:	4613      	mov	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	4413      	add	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4403      	add	r3, r0
 8004948:	3314      	adds	r3, #20
 800494a:	6019      	str	r1, [r3, #0]
		measuredData.Measurement[i].potenciaSalto = potenciaSaltoLocal[i];
 800494c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004950:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8004954:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8004958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800495c:	4832      	ldr	r0, [pc, #200]	; (8004a28 <readingSensor+0x550>)
 800495e:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8004962:	4613      	mov	r3, r2
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	4413      	add	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4403      	add	r3, r0
 800496c:	3318      	adds	r3, #24
 800496e:	6019      	str	r1, [r3, #0]
		measuredData.Measurement[i].uiSoloTime = contatoTimeLocal[i];
 8004970:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004974:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004978:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800497c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004980:	4829      	ldr	r0, [pc, #164]	; (8004a28 <readingSensor+0x550>)
 8004982:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8004986:	4613      	mov	r3, r2
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	4413      	add	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4403      	add	r3, r0
 8004990:	330c      	adds	r3, #12
 8004992:	6019      	str	r1, [r3, #0]
		measuredData.Measurement[i].uiVooTime = vooTimeLocal[i];
 8004994:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004998:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800499c:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80049a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049a4:	4820      	ldr	r0, [pc, #128]	; (8004a28 <readingSensor+0x550>)
 80049a6:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80049aa:	4613      	mov	r3, r2
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	4413      	add	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4403      	add	r3, r0
 80049b4:	3308      	adds	r3, #8
 80049b6:	6019      	str	r1, [r3, #0]
		setUserResultData(&measuredData,indexTest);
 80049b8:	f897 31db 	ldrb.w	r3, [r7, #475]	; 0x1db
 80049bc:	4619      	mov	r1, r3
 80049be:	481a      	ldr	r0, [pc, #104]	; (8004a28 <readingSensor+0x550>)
 80049c0:	f7fd fbfa 	bl	80021b8 <setUserResultData>
	for(unsigned i=0;i<count;i++)
 80049c4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80049c8:	3301      	adds	r3, #1
 80049ca:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 80049ce:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 80049d2:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d396      	bcc.n	8004908 <readingSensor+0x430>
	}

	if(*ptr_totalTime == configStruct->userTime)
 80049da:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d109      	bne.n	80049fe <readingSensor+0x526>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80049ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049ee:	480f      	ldr	r0, [pc, #60]	; (8004a2c <readingSensor+0x554>)
 80049f0:	f002 fd97 	bl	8007522 <HAL_GPIO_TogglePin>
		measuredData.timeout = TRUE;
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <readingSensor+0x550>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	70da      	strb	r2, [r3, #3]
		return TIMEOUT;
 80049fa:	2335      	movs	r3, #53	; 0x35
 80049fc:	e00f      	b.n	8004a1e <readingSensor+0x546>
	}

	else if(numSeries == configStruct->userNumSeries)
 80049fe:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004a02:	7f9b      	ldrb	r3, [r3, #30]
 8004a04:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d104      	bne.n	8004a16 <readingSensor+0x53e>
	{
		measuredData.timeout = FALSE;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <readingSensor+0x550>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	70da      	strb	r2, [r3, #3]
		return MAX_SERIE;
 8004a12:	2336      	movs	r3, #54	; 0x36
 8004a14:	e003      	b.n	8004a1e <readingSensor+0x546>
	}

	else
	{
		measuredData.timeout = FALSE;
 8004a16:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <readingSensor+0x550>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	70da      	strb	r2, [r3, #3]
		return PARAR;
 8004a1c:	2350      	movs	r3, #80	; 0x50
	}
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd90      	pop	{r4, r7, pc}
 8004a28:	200005d0 	.word	0x200005d0
 8004a2c:	40020800 	.word	0x40020800

08004a30 <calcAltura>:


unsigned int calcAltura(float vooTimeLocal)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	ed87 0a01 	vstr	s0, [r7, #4]
	/*
	 * Altura do Salto em Centímetros = ((Tempo Voo^2) *  (981/8))
	 */
	float aux1;
	unsigned const int aux2 = 981>>3;
 8004a3a:	237a      	movs	r3, #122	; 0x7a
 8004a3c:	617b      	str	r3, [r7, #20]
	unsigned int alturaSalto;
	vooTimeLocal = vooTimeLocal/1000;
 8004a3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a42:	eddf 6a10 	vldr	s13, [pc, #64]	; 8004a84 <calcAltura+0x54>
 8004a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a4a:	edc7 7a01 	vstr	s15, [r7, #4]
	aux1 = vooTimeLocal*vooTimeLocal;
 8004a4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a56:	edc7 7a04 	vstr	s15, [r7, #16]
//	aux1 = aux1/10000;
	alturaSalto = aux1*aux2;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a64:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a70:	ee17 3a90 	vmov	r3, s15
 8004a74:	60fb      	str	r3, [r7, #12]

	return alturaSalto;
 8004a76:	68fb      	ldr	r3, [r7, #12]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	447a0000 	.word	0x447a0000

08004a88 <calcPotencia>:

float calcPotencia(unsigned int alturaSalto,unsigned int massaCorpo)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b089      	sub	sp, #36	; 0x24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
	//PAREI AQUI
	float aux1,aux2,potSalto;
	float const constant1 = 60.7;
 8004a92:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <calcPotencia+0x78>)
 8004a94:	61fb      	str	r3, [r7, #28]
	float const constant2 = 45.3;
 8004a96:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <calcPotencia+0x7c>)
 8004a98:	61bb      	str	r3, [r7, #24]
	unsigned const int constant3 = 2055;
 8004a9a:	f640 0307 	movw	r3, #2055	; 0x807
 8004a9e:	617b      	str	r3, [r7, #20]
	aux1 = constant1*alturaSalto;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	ed97 7a07 	vldr	s14, [r7, #28]
 8004aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab2:	edc7 7a04 	vstr	s15, [r7, #16]
	aux2 = constant2*massaCorpo;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac0:	ed97 7a06 	vldr	s14, [r7, #24]
 8004ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac8:	edc7 7a03 	vstr	s15, [r7, #12]
	potSalto = aux1+aux2-constant3;
 8004acc:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ae6:	edc7 7a02 	vstr	s15, [r7, #8]

	return potSalto;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	ee07 3a90 	vmov	s15, r3
//	Potência em Watts =  60,7 x (h [cm]) + 45,3 x (MC [Kg]) – 2055
}
 8004af0:	eeb0 0a67 	vmov.f32	s0, s15
 8004af4:	3724      	adds	r7, #36	; 0x24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	4272cccd 	.word	0x4272cccd
 8004b04:	42353333 	.word	0x42353333

08004b08 <getNextSub>:

struct Menu menuSub ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextSub(unsigned char nextState)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	71fb      	strb	r3, [r7, #7]
    menuSub.menuNext = nextState;
 8004b12:	4a05      	ldr	r2, [pc, #20]	; (8004b28 <getNextSub+0x20>)
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	7013      	strb	r3, [r2, #0]
    return menuSub.menuNext;
 8004b18:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <getNextSub+0x20>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	2000064c 	.word	0x2000064c

08004b2c <setInsertData>:
//    menuSub.menuSelect = state;
//    return menuSub.menuSelect;
//}

unsigned char setInsertData(struct dataInsert* dataToInsert)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
    struct dataInsert* userDataInput = dataToInsert;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	60fb      	str	r3, [r7, #12]
    setUserInputConfigData(userDataInput);
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7fd fab7 	bl	80020ac <setUserInputConfigData>
}
 8004b3e:	bf00      	nop
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <SET_HW_TIMER2>:

static unsigned char encoderStatus;
static unsigned char timerStatus;

unsigned char SET_HW_TIMER2(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
	encoderStatus = 0;
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <SET_HW_TIMER2+0x40>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	701a      	strb	r2, [r3, #0]
//	TIM_HandleTypeDef* htim2 =  getTimer2Instance();
	TIM_HandleTypeDef* htim2 =  getTimer2Instance();
 8004b54:	f000 fdde 	bl	8005714 <getTimer2Instance>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Start_IT(htim2, TIM_CHANNEL_ALL);
 8004b5c:	213c      	movs	r1, #60	; 0x3c
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f003 ff28 	bl	80089b4 <HAL_TIM_Encoder_Start_IT>
 8004b64:	4603      	mov	r3, r0
 8004b66:	461a      	mov	r2, r3
 8004b68:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <SET_HW_TIMER2+0x40>)
 8004b6a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004b6c:	2064      	movs	r0, #100	; 0x64
 8004b6e:	f001 fe03 	bl	8006778 <HAL_Delay>
	return !encoderStatus;
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <SET_HW_TIMER2+0x40>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bf0c      	ite	eq
 8004b7a:	2301      	moveq	r3, #1
 8004b7c:	2300      	movne	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000678 	.word	0x20000678

08004b8c <RESET_HW_TIMER2>:

unsigned char RESET_HW_TIMER2(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
    encoderStatus = 1;
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <RESET_HW_TIMER2+0x38>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	701a      	strb	r2, [r3, #0]
//    TIM_HandleTypeDef* htim2 =  getTimer2Instance();
    TIM_HandleTypeDef* htim2 =  getTimer2Instance();
 8004b98:	f000 fdbc 	bl	8005714 <getTimer2Instance>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Stop_IT(htim2, TIM_CHANNEL_ALL);
 8004ba0:	213c      	movs	r1, #60	; 0x3c
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f003 ffb4 	bl	8008b10 <HAL_TIM_Encoder_Stop_IT>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	461a      	mov	r2, r3
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <RESET_HW_TIMER2+0x38>)
 8004bae:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004bb0:	2064      	movs	r0, #100	; 0x64
 8004bb2:	f001 fde1 	bl	8006778 <HAL_Delay>
	return encoderStatus;
 8004bb6:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <RESET_HW_TIMER2+0x38>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000678 	.word	0x20000678

08004bc8 <SET_HW_TIMER3>:

unsigned char SET_HW_TIMER3(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
    timerStatus = 0;
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <SET_HW_TIMER3+0x40>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8004bd4:	f000 fda8 	bl	8005728 <getTimer3Instance>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Start_IT(htim3);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f003 fde1 	bl	80087a4 <HAL_TIM_Base_Start_IT>
 8004be2:	4603      	mov	r3, r0
 8004be4:	461a      	mov	r2, r3
 8004be6:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <SET_HW_TIMER3+0x40>)
 8004be8:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 8004bea:	2064      	movs	r0, #100	; 0x64
 8004bec:	f001 fdc4 	bl	8006778 <HAL_Delay>
    return !timerStatus;
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <SET_HW_TIMER3+0x40>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000679 	.word	0x20000679

08004c0c <RESET_HW_TIMER3>:

unsigned char RESET_HW_TIMER3(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
    timerStatus = 1;
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <RESET_HW_TIMER3+0x34>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8004c18:	f000 fd86 	bl	8005728 <getTimer3Instance>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	607b      	str	r3, [r7, #4]
    timerStatus = HAL_TIM_Base_Stop(htim3);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f003 fd98 	bl	8008756 <HAL_TIM_Base_Stop>
 8004c26:	4603      	mov	r3, r0
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <RESET_HW_TIMER3+0x34>)
 8004c2c:	701a      	strb	r2, [r3, #0]
//     timerStatus =HAL_TIM_Base_Stop_IT(htim3);
     HAL_Delay(100);
 8004c2e:	2064      	movs	r0, #100	; 0x64
 8004c30:	f001 fda2 	bl	8006778 <HAL_Delay>
    return timerStatus;
 8004c34:	4b02      	ldr	r3, [pc, #8]	; (8004c40 <RESET_HW_TIMER3+0x34>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000679 	.word	0x20000679

08004c44 <SET_HW_UART>:
#include "UARTHW.h"
#include "main.h"


unsigned char SET_HW_UART(unsigned char* addr)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60fb      	str	r3, [r7, #12]
    __HAL_UART_ENABLE(instance);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c5e:	60da      	str	r2, [r3, #12]
}
 8004c60:	bf00      	nop
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <RESET_HW_UART>:

unsigned char RESET_HW_UART(unsigned char* addr)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60fb      	str	r3, [r7, #12]
    __HAL_UART_DISABLE(instance);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c88:	60da      	str	r2, [r3, #12]
}
 8004c8a:	bf00      	nop
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2110      	movs	r1, #16
 8004ca0:	4802      	ldr	r0, [pc, #8]	; (8004cac <SELECT+0x14>)
 8004ca2:	f002 fc25 	bl	80074f0 <HAL_GPIO_WritePin>
}
 8004ca6:	bf00      	nop
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40020000 	.word	0x40020000

08004cb0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	2110      	movs	r1, #16
 8004cb8:	4802      	ldr	r0, [pc, #8]	; (8004cc4 <DESELECT+0x14>)
 8004cba:	f002 fc19 	bl	80074f0 <HAL_GPIO_WritePin>
}
 8004cbe:	bf00      	nop
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40020000 	.word	0x40020000

08004cc8 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004cd2:	bf00      	nop
 8004cd4:	4808      	ldr	r0, [pc, #32]	; (8004cf8 <SPI_TxByte+0x30>)
 8004cd6:	f003 fc16 	bl	8008506 <HAL_SPI_GetState>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d1f9      	bne.n	8004cd4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8004ce0:	1df9      	adds	r1, r7, #7
 8004ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	4803      	ldr	r0, [pc, #12]	; (8004cf8 <SPI_TxByte+0x30>)
 8004cea:	f003 f92e 	bl	8007f4a <HAL_SPI_Transmit>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	2000067c 	.word	0x2000067c

08004cfc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8004d02:	23ff      	movs	r3, #255	; 0xff
 8004d04:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8004d0a:	bf00      	nop
 8004d0c:	4809      	ldr	r0, [pc, #36]	; (8004d34 <SPI_RxByte+0x38>)
 8004d0e:	f003 fbfa 	bl	8008506 <HAL_SPI_GetState>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d1f9      	bne.n	8004d0c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8004d18:	1dba      	adds	r2, r7, #6
 8004d1a:	1df9      	adds	r1, r7, #7
 8004d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	2301      	movs	r3, #1
 8004d24:	4803      	ldr	r0, [pc, #12]	; (8004d34 <SPI_RxByte+0x38>)
 8004d26:	f003 fa4c 	bl	80081c2 <HAL_SPI_TransmitReceive>

  return data;
 8004d2a:	79bb      	ldrb	r3, [r7, #6]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	2000067c 	.word	0x2000067c

08004d38 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8004d40:	f7ff ffdc 	bl	8004cfc <SPI_RxByte>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	701a      	strb	r2, [r3, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <SD_ReadyWait+0x34>)
 8004d5c:	2232      	movs	r2, #50	; 0x32
 8004d5e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8004d60:	f7ff ffcc 	bl	8004cfc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8004d64:	f7ff ffca 	bl	8004cfc <SPI_RxByte>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8004d6c:	79fb      	ldrb	r3, [r7, #7]
 8004d6e:	2bff      	cmp	r3, #255	; 0xff
 8004d70:	d004      	beq.n	8004d7c <SD_ReadyWait+0x28>
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <SD_ReadyWait+0x34>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f3      	bne.n	8004d64 <SD_ReadyWait+0x10>

  return res;
 8004d7c:	79fb      	ldrb	r3, [r7, #7]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	2000089a 	.word	0x2000089a

08004d8c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8004d92:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004d96:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8004d98:	f7ff ff8a 	bl	8004cb0 <DESELECT>

  for(int i = 0; i < 10; i++)
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	e005      	b.n	8004dae <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8004da2:	20ff      	movs	r0, #255	; 0xff
 8004da4:	f7ff ff90 	bl	8004cc8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	3301      	adds	r3, #1
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b09      	cmp	r3, #9
 8004db2:	ddf6      	ble.n	8004da2 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8004db4:	f7ff ff70 	bl	8004c98 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8004db8:	2340      	movs	r3, #64	; 0x40
 8004dba:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8004dcc:	2395      	movs	r3, #149	; 0x95
 8004dce:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e009      	b.n	8004dea <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8004dd6:	1d3a      	adds	r2, r7, #4
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff ff72 	bl	8004cc8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3301      	adds	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	ddf2      	ble.n	8004dd6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8004df0:	e002      	b.n	8004df8 <SD_PowerOn+0x6c>
  {
    Count--;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8004df8:	f7ff ff80 	bl	8004cfc <SPI_RxByte>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d002      	beq.n	8004e08 <SD_PowerOn+0x7c>
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f4      	bne.n	8004df2 <SD_PowerOn+0x66>
  }

  DESELECT();
 8004e08:	f7ff ff52 	bl	8004cb0 <DESELECT>
  SPI_TxByte(0XFF);
 8004e0c:	20ff      	movs	r0, #255	; 0xff
 8004e0e:	f7ff ff5b 	bl	8004cc8 <SPI_TxByte>

  PowerFlag = 1;
 8004e12:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <SD_PowerOn+0x94>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]
}
 8004e18:	bf00      	nop
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	2000067b 	.word	0x2000067b

08004e24 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <SD_PowerOff+0x14>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
}
 8004e2e:	bf00      	nop
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	2000067b 	.word	0x2000067b

08004e3c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8004e40:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <SD_CheckPower+0x14>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	2000067b 	.word	0x2000067b

08004e54 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8004e5e:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <SD_RxDataBlock+0x68>)
 8004e60:	220a      	movs	r2, #10
 8004e62:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8004e64:	f7ff ff4a 	bl	8004cfc <SPI_RxByte>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	2bff      	cmp	r3, #255	; 0xff
 8004e70:	d104      	bne.n	8004e7c <SD_RxDataBlock+0x28>
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <SD_RxDataBlock+0x68>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f3      	bne.n	8004e64 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2bfe      	cmp	r3, #254	; 0xfe
 8004e80:	d001      	beq.n	8004e86 <SD_RxDataBlock+0x32>
    return FALSE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e016      	b.n	8004eb4 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff ff53 	bl	8004d38 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff ff4d 	bl	8004d38 <SPI_RxBytePtr>
  } while(btr -= 2);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	3b02      	subs	r3, #2
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1ed      	bne.n	8004e86 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8004eaa:	f7ff ff27 	bl	8004cfc <SPI_RxByte>
  SPI_RxByte();
 8004eae:	f7ff ff25 	bl	8004cfc <SPI_RxByte>

  return TRUE;
 8004eb2:	2301      	movs	r3, #1
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000899 	.word	0x20000899

08004ec0 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8004ed0:	f7ff ff40 	bl	8004d54 <SD_ReadyWait>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2bff      	cmp	r3, #255	; 0xff
 8004ed8:	d001      	beq.n	8004ede <SD_TxDataBlock+0x1e>
    return FALSE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e040      	b.n	8004f60 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fef1 	bl	8004cc8 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	2bfd      	cmp	r3, #253	; 0xfd
 8004eea:	d031      	beq.n	8004f50 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fee5 	bl	8004cc8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff fede 	bl	8004cc8 <SPI_TxByte>
    } while (--wc);
 8004f0c:	7bbb      	ldrb	r3, [r7, #14]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	73bb      	strb	r3, [r7, #14]
 8004f12:	7bbb      	ldrb	r3, [r7, #14]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1eb      	bne.n	8004ef0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8004f18:	f7ff fef0 	bl	8004cfc <SPI_RxByte>
    SPI_RxByte();
 8004f1c:	f7ff feee 	bl	8004cfc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8004f20:	e00b      	b.n	8004f3a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8004f22:	f7ff feeb 	bl	8004cfc <SPI_RxByte>
 8004f26:	4603      	mov	r3, r0
 8004f28:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	2b05      	cmp	r3, #5
 8004f32:	d006      	beq.n	8004f42 <SD_TxDataBlock+0x82>
        break;

      i++;
 8004f34:	7b7b      	ldrb	r3, [r7, #13]
 8004f36:	3301      	adds	r3, #1
 8004f38:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8004f3a:	7b7b      	ldrb	r3, [r7, #13]
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d9f0      	bls.n	8004f22 <SD_TxDataBlock+0x62>
 8004f40:	e000      	b.n	8004f44 <SD_TxDataBlock+0x84>
        break;
 8004f42:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8004f44:	bf00      	nop
 8004f46:	f7ff fed9 	bl	8004cfc <SPI_RxByte>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0fa      	beq.n	8004f46 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	2b05      	cmp	r3, #5
 8004f58:	d101      	bne.n	8004f5e <SD_TxDataBlock+0x9e>
    return TRUE;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	6039      	str	r1, [r7, #0]
 8004f72:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8004f74:	f7ff feee 	bl	8004d54 <SD_ReadyWait>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2bff      	cmp	r3, #255	; 0xff
 8004f7c:	d001      	beq.n	8004f82 <SD_SendCmd+0x1a>
    return 0xFF;
 8004f7e:	23ff      	movs	r3, #255	; 0xff
 8004f80:	e040      	b.n	8005004 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff fe9f 	bl	8004cc8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	0e1b      	lsrs	r3, r3, #24
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fe99 	bl	8004cc8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff fe93 	bl	8004cc8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	0a1b      	lsrs	r3, r3, #8
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff fe8d 	bl	8004cc8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fe88 	bl	8004cc8 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d101      	bne.n	8004fc6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8004fc2:	2395      	movs	r3, #149	; 0x95
 8004fc4:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	2b48      	cmp	r3, #72	; 0x48
 8004fca:	d101      	bne.n	8004fd0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8004fcc:	2387      	movs	r3, #135	; 0x87
 8004fce:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fe78 	bl	8004cc8 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	2b4c      	cmp	r3, #76	; 0x4c
 8004fdc:	d101      	bne.n	8004fe2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8004fde:	f7ff fe8d 	bl	8004cfc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8004fe2:	230a      	movs	r3, #10
 8004fe4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8004fe6:	f7ff fe89 	bl	8004cfc <SPI_RxByte>
 8004fea:	4603      	mov	r3, r0
 8004fec:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8004fee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	da05      	bge.n	8005002 <SD_SendCmd+0x9a>
 8004ff6:	7bbb      	ldrb	r3, [r7, #14]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	73bb      	strb	r3, [r7, #14]
 8004ffc:	7bbb      	ldrb	r3, [r7, #14]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f1      	bne.n	8004fe6 <SD_SendCmd+0x7e>

  return res;
 8005002:	7b7b      	ldrb	r3, [r7, #13]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800500c:	b590      	push	{r4, r7, lr}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 800501c:	2301      	movs	r3, #1
 800501e:	e0d5      	b.n	80051cc <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8005020:	4b6c      	ldr	r3, [pc, #432]	; (80051d4 <SD_disk_initialize+0x1c8>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <SD_disk_initialize+0x2a>
    return Stat;
 800502e:	4b69      	ldr	r3, [pc, #420]	; (80051d4 <SD_disk_initialize+0x1c8>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	e0ca      	b.n	80051cc <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8005036:	f7ff fea9 	bl	8004d8c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800503a:	f7ff fe2d 	bl	8004c98 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8005042:	2100      	movs	r1, #0
 8005044:	2040      	movs	r0, #64	; 0x40
 8005046:	f7ff ff8f 	bl	8004f68 <SD_SendCmd>
 800504a:	4603      	mov	r3, r0
 800504c:	2b01      	cmp	r3, #1
 800504e:	f040 80a5 	bne.w	800519c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8005052:	4b61      	ldr	r3, [pc, #388]	; (80051d8 <SD_disk_initialize+0x1cc>)
 8005054:	2264      	movs	r2, #100	; 0x64
 8005056:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8005058:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800505c:	2048      	movs	r0, #72	; 0x48
 800505e:	f7ff ff83 	bl	8004f68 <SD_SendCmd>
 8005062:	4603      	mov	r3, r0
 8005064:	2b01      	cmp	r3, #1
 8005066:	d158      	bne.n	800511a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]
 800506c:	e00c      	b.n	8005088 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800506e:	7bfc      	ldrb	r4, [r7, #15]
 8005070:	f7ff fe44 	bl	8004cfc <SPI_RxByte>
 8005074:	4603      	mov	r3, r0
 8005076:	461a      	mov	r2, r3
 8005078:	f104 0310 	add.w	r3, r4, #16
 800507c:	443b      	add	r3, r7
 800507e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	3301      	adds	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b03      	cmp	r3, #3
 800508c:	d9ef      	bls.n	800506e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800508e:	7abb      	ldrb	r3, [r7, #10]
 8005090:	2b01      	cmp	r3, #1
 8005092:	f040 8083 	bne.w	800519c <SD_disk_initialize+0x190>
 8005096:	7afb      	ldrb	r3, [r7, #11]
 8005098:	2baa      	cmp	r3, #170	; 0xaa
 800509a:	d17f      	bne.n	800519c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800509c:	2100      	movs	r1, #0
 800509e:	2077      	movs	r0, #119	; 0x77
 80050a0:	f7ff ff62 	bl	8004f68 <SD_SendCmd>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d807      	bhi.n	80050ba <SD_disk_initialize+0xae>
 80050aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80050ae:	2069      	movs	r0, #105	; 0x69
 80050b0:	f7ff ff5a 	bl	8004f68 <SD_SendCmd>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80050ba:	4b47      	ldr	r3, [pc, #284]	; (80051d8 <SD_disk_initialize+0x1cc>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1eb      	bne.n	800509c <SD_disk_initialize+0x90>
 80050c4:	e000      	b.n	80050c8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80050c6:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80050c8:	4b43      	ldr	r3, [pc, #268]	; (80051d8 <SD_disk_initialize+0x1cc>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d064      	beq.n	800519c <SD_disk_initialize+0x190>
 80050d2:	2100      	movs	r1, #0
 80050d4:	207a      	movs	r0, #122	; 0x7a
 80050d6:	f7ff ff47 	bl	8004f68 <SD_SendCmd>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d15d      	bne.n	800519c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80050e0:	2300      	movs	r3, #0
 80050e2:	73fb      	strb	r3, [r7, #15]
 80050e4:	e00c      	b.n	8005100 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80050e6:	7bfc      	ldrb	r4, [r7, #15]
 80050e8:	f7ff fe08 	bl	8004cfc <SPI_RxByte>
 80050ec:	4603      	mov	r3, r0
 80050ee:	461a      	mov	r2, r3
 80050f0:	f104 0310 	add.w	r3, r4, #16
 80050f4:	443b      	add	r3, r7
 80050f6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	3301      	adds	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	2b03      	cmp	r3, #3
 8005104:	d9ef      	bls.n	80050e6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8005106:	7a3b      	ldrb	r3, [r7, #8]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <SD_disk_initialize+0x108>
 8005110:	2306      	movs	r3, #6
 8005112:	e000      	b.n	8005116 <SD_disk_initialize+0x10a>
 8005114:	2302      	movs	r3, #2
 8005116:	73bb      	strb	r3, [r7, #14]
 8005118:	e040      	b.n	800519c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800511a:	2100      	movs	r1, #0
 800511c:	2077      	movs	r0, #119	; 0x77
 800511e:	f7ff ff23 	bl	8004f68 <SD_SendCmd>
 8005122:	4603      	mov	r3, r0
 8005124:	2b01      	cmp	r3, #1
 8005126:	d808      	bhi.n	800513a <SD_disk_initialize+0x12e>
 8005128:	2100      	movs	r1, #0
 800512a:	2069      	movs	r0, #105	; 0x69
 800512c:	f7ff ff1c 	bl	8004f68 <SD_SendCmd>
 8005130:	4603      	mov	r3, r0
 8005132:	2b01      	cmp	r3, #1
 8005134:	d801      	bhi.n	800513a <SD_disk_initialize+0x12e>
 8005136:	2302      	movs	r3, #2
 8005138:	e000      	b.n	800513c <SD_disk_initialize+0x130>
 800513a:	2301      	movs	r3, #1
 800513c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800513e:	7bbb      	ldrb	r3, [r7, #14]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d10e      	bne.n	8005162 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8005144:	2100      	movs	r1, #0
 8005146:	2077      	movs	r0, #119	; 0x77
 8005148:	f7ff ff0e 	bl	8004f68 <SD_SendCmd>
 800514c:	4603      	mov	r3, r0
 800514e:	2b01      	cmp	r3, #1
 8005150:	d80e      	bhi.n	8005170 <SD_disk_initialize+0x164>
 8005152:	2100      	movs	r1, #0
 8005154:	2069      	movs	r0, #105	; 0x69
 8005156:	f7ff ff07 	bl	8004f68 <SD_SendCmd>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d107      	bne.n	8005170 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8005160:	e00d      	b.n	800517e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8005162:	2100      	movs	r1, #0
 8005164:	2041      	movs	r0, #65	; 0x41
 8005166:	f7ff feff 	bl	8004f68 <SD_SendCmd>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8005170:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <SD_disk_initialize+0x1cc>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e1      	bne.n	800513e <SD_disk_initialize+0x132>
 800517a:	e000      	b.n	800517e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800517c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800517e:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <SD_disk_initialize+0x1cc>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <SD_disk_initialize+0x18c>
 8005188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800518c:	2050      	movs	r0, #80	; 0x50
 800518e:	f7ff feeb 	bl	8004f68 <SD_SendCmd>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800519c:	4a0f      	ldr	r2, [pc, #60]	; (80051dc <SD_disk_initialize+0x1d0>)
 800519e:	7bbb      	ldrb	r3, [r7, #14]
 80051a0:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80051a2:	f7ff fd85 	bl	8004cb0 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80051a6:	f7ff fda9 	bl	8004cfc <SPI_RxByte>

  if (type)
 80051aa:	7bbb      	ldrb	r3, [r7, #14]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80051b0:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <SD_disk_initialize+0x1c8>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <SD_disk_initialize+0x1c8>)
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	e001      	b.n	80051c6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80051c2:	f7ff fe2f 	bl	8004e24 <SD_PowerOff>
  }

  return Stat;
 80051c6:	4b03      	ldr	r3, [pc, #12]	; (80051d4 <SD_disk_initialize+0x1c8>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	b2db      	uxtb	r3, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd90      	pop	{r4, r7, pc}
 80051d4:	200000e9 	.word	0x200000e9
 80051d8:	20000899 	.word	0x20000899
 80051dc:	2000067a 	.word	0x2000067a

080051e0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <SD_disk_status+0x14>
    return STA_NOINIT;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e002      	b.n	80051fa <SD_disk_status+0x1a>

  return Stat;
 80051f4:	4b04      	ldr	r3, [pc, #16]	; (8005208 <SD_disk_status+0x28>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b2db      	uxtb	r3, r3
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	200000e9 	.word	0x200000e9

0800520c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4603      	mov	r3, r0
 800521a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d102      	bne.n	8005228 <SD_disk_read+0x1c>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <SD_disk_read+0x20>
    return RES_PARERR;
 8005228:	2304      	movs	r3, #4
 800522a:	e051      	b.n	80052d0 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 800522c:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <SD_disk_read+0xcc>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800523a:	2303      	movs	r3, #3
 800523c:	e048      	b.n	80052d0 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800523e:	4b27      	ldr	r3, [pc, #156]	; (80052dc <SD_disk_read+0xd0>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	025b      	lsls	r3, r3, #9
 800524e:	607b      	str	r3, [r7, #4]

  SELECT();
 8005250:	f7ff fd22 	bl	8004c98 <SELECT>

  if (count == 1)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d111      	bne.n	800527e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	2051      	movs	r0, #81	; 0x51
 800525e:	f7ff fe83 	bl	8004f68 <SD_SendCmd>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d129      	bne.n	80052bc <SD_disk_read+0xb0>
 8005268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800526c:	68b8      	ldr	r0, [r7, #8]
 800526e:	f7ff fdf1 	bl	8004e54 <SD_RxDataBlock>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d021      	beq.n	80052bc <SD_disk_read+0xb0>
      count = 0;
 8005278:	2300      	movs	r3, #0
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	e01e      	b.n	80052bc <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	2052      	movs	r0, #82	; 0x52
 8005282:	f7ff fe71 	bl	8004f68 <SD_SendCmd>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d117      	bne.n	80052bc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800528c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005290:	68b8      	ldr	r0, [r7, #8]
 8005292:	f7ff fddf 	bl	8004e54 <SD_RxDataBlock>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <SD_disk_read+0xa6>
          break;

        buff += 512;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80052a2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	603b      	str	r3, [r7, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1ed      	bne.n	800528c <SD_disk_read+0x80>
 80052b0:	e000      	b.n	80052b4 <SD_disk_read+0xa8>
          break;
 80052b2:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80052b4:	2100      	movs	r1, #0
 80052b6:	204c      	movs	r0, #76	; 0x4c
 80052b8:	f7ff fe56 	bl	8004f68 <SD_SendCmd>
    }
  }

  DESELECT();
 80052bc:	f7ff fcf8 	bl	8004cb0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80052c0:	f7ff fd1c 	bl	8004cfc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bf14      	ite	ne
 80052ca:	2301      	movne	r3, #1
 80052cc:	2300      	moveq	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	200000e9 	.word	0x200000e9
 80052dc:	2000067a 	.word	0x2000067a

080052e0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	607a      	str	r2, [r7, #4]
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	4603      	mov	r3, r0
 80052ee:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d102      	bne.n	80052fc <SD_disk_write+0x1c>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <SD_disk_write+0x20>
    return RES_PARERR;
 80052fc:	2304      	movs	r3, #4
 80052fe:	e06b      	b.n	80053d8 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8005300:	4b37      	ldr	r3, [pc, #220]	; (80053e0 <SD_disk_write+0x100>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800530e:	2303      	movs	r3, #3
 8005310:	e062      	b.n	80053d8 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8005312:	4b33      	ldr	r3, [pc, #204]	; (80053e0 <SD_disk_write+0x100>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <SD_disk_write+0x44>
    return RES_WRPRT;
 8005320:	2302      	movs	r3, #2
 8005322:	e059      	b.n	80053d8 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8005324:	4b2f      	ldr	r3, [pc, #188]	; (80053e4 <SD_disk_write+0x104>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	025b      	lsls	r3, r3, #9
 8005334:	607b      	str	r3, [r7, #4]

  SELECT();
 8005336:	f7ff fcaf 	bl	8004c98 <SELECT>

  if (count == 1)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d110      	bne.n	8005362 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	2058      	movs	r0, #88	; 0x58
 8005344:	f7ff fe10 	bl	8004f68 <SD_SendCmd>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d13a      	bne.n	80053c4 <SD_disk_write+0xe4>
 800534e:	21fe      	movs	r1, #254	; 0xfe
 8005350:	68b8      	ldr	r0, [r7, #8]
 8005352:	f7ff fdb5 	bl	8004ec0 <SD_TxDataBlock>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d033      	beq.n	80053c4 <SD_disk_write+0xe4>
      count = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	e030      	b.n	80053c4 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8005362:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <SD_disk_write+0x104>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800536e:	2100      	movs	r1, #0
 8005370:	2077      	movs	r0, #119	; 0x77
 8005372:	f7ff fdf9 	bl	8004f68 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	2057      	movs	r0, #87	; 0x57
 800537a:	f7ff fdf5 	bl	8004f68 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	2059      	movs	r0, #89	; 0x59
 8005382:	f7ff fdf1 	bl	8004f68 <SD_SendCmd>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d11b      	bne.n	80053c4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800538c:	21fc      	movs	r1, #252	; 0xfc
 800538e:	68b8      	ldr	r0, [r7, #8]
 8005390:	f7ff fd96 	bl	8004ec0 <SD_TxDataBlock>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80053a0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1ee      	bne.n	800538c <SD_disk_write+0xac>
 80053ae:	e000      	b.n	80053b2 <SD_disk_write+0xd2>
          break;
 80053b0:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80053b2:	21fd      	movs	r1, #253	; 0xfd
 80053b4:	2000      	movs	r0, #0
 80053b6:	f7ff fd83 	bl	8004ec0 <SD_TxDataBlock>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <SD_disk_write+0xe4>
      {
        count = 1;
 80053c0:	2301      	movs	r3, #1
 80053c2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80053c4:	f7ff fc74 	bl	8004cb0 <DESELECT>
  SPI_RxByte();
 80053c8:	f7ff fc98 	bl	8004cfc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bf14      	ite	ne
 80053d2:	2301      	movne	r3, #1
 80053d4:	2300      	moveq	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	200000e9 	.word	0x200000e9
 80053e4:	2000067a 	.word	0x2000067a

080053e8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b08b      	sub	sp, #44	; 0x2c
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	603a      	str	r2, [r7, #0]
 80053f2:	71fb      	strb	r3, [r7, #7]
 80053f4:	460b      	mov	r3, r1
 80053f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8005402:	2304      	movs	r3, #4
 8005404:	e11b      	b.n	800563e <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 800540c:	79bb      	ldrb	r3, [r7, #6]
 800540e:	2b05      	cmp	r3, #5
 8005410:	d129      	bne.n	8005466 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d017      	beq.n	800544a <SD_disk_ioctl+0x62>
 800541a:	2b02      	cmp	r3, #2
 800541c:	dc1f      	bgt.n	800545e <SD_disk_ioctl+0x76>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <SD_disk_ioctl+0x40>
 8005422:	2b01      	cmp	r3, #1
 8005424:	d00b      	beq.n	800543e <SD_disk_ioctl+0x56>
 8005426:	e01a      	b.n	800545e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8005428:	f7ff fd08 	bl	8004e3c <SD_CheckPower>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8005432:	f7ff fcf7 	bl	8004e24 <SD_PowerOff>
      res = RES_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800543c:	e0fd      	b.n	800563a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800543e:	f7ff fca5 	bl	8004d8c <SD_PowerOn>
      res = RES_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005448:	e0f7      	b.n	800563a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	1c5c      	adds	r4, r3, #1
 800544e:	f7ff fcf5 	bl	8004e3c <SD_CheckPower>
 8005452:	4603      	mov	r3, r0
 8005454:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8005456:	2300      	movs	r3, #0
 8005458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800545c:	e0ed      	b.n	800563a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800545e:	2304      	movs	r3, #4
 8005460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005464:	e0e9      	b.n	800563a <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8005466:	4b78      	ldr	r3, [pc, #480]	; (8005648 <SD_disk_ioctl+0x260>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8005474:	2303      	movs	r3, #3
 8005476:	e0e2      	b.n	800563e <SD_disk_ioctl+0x256>

    SELECT();
 8005478:	f7ff fc0e 	bl	8004c98 <SELECT>

    switch (ctrl)
 800547c:	79bb      	ldrb	r3, [r7, #6]
 800547e:	2b0d      	cmp	r3, #13
 8005480:	f200 80cc 	bhi.w	800561c <SD_disk_ioctl+0x234>
 8005484:	a201      	add	r2, pc, #4	; (adr r2, 800548c <SD_disk_ioctl+0xa4>)
 8005486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548a:	bf00      	nop
 800548c:	08005587 	.word	0x08005587
 8005490:	080054c5 	.word	0x080054c5
 8005494:	08005577 	.word	0x08005577
 8005498:	0800561d 	.word	0x0800561d
 800549c:	0800561d 	.word	0x0800561d
 80054a0:	0800561d 	.word	0x0800561d
 80054a4:	0800561d 	.word	0x0800561d
 80054a8:	0800561d 	.word	0x0800561d
 80054ac:	0800561d 	.word	0x0800561d
 80054b0:	0800561d 	.word	0x0800561d
 80054b4:	0800561d 	.word	0x0800561d
 80054b8:	08005599 	.word	0x08005599
 80054bc:	080055bd 	.word	0x080055bd
 80054c0:	080055e1 	.word	0x080055e1
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80054c4:	2100      	movs	r1, #0
 80054c6:	2049      	movs	r0, #73	; 0x49
 80054c8:	f7ff fd4e 	bl	8004f68 <SD_SendCmd>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f040 80a8 	bne.w	8005624 <SD_disk_ioctl+0x23c>
 80054d4:	f107 030c 	add.w	r3, r7, #12
 80054d8:	2110      	movs	r1, #16
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff fcba 	bl	8004e54 <SD_RxDataBlock>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 809e 	beq.w	8005624 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80054e8:	7b3b      	ldrb	r3, [r7, #12]
 80054ea:	099b      	lsrs	r3, r3, #6
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d10e      	bne.n	8005510 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80054f2:	7d7b      	ldrb	r3, [r7, #21]
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	7d3b      	ldrb	r3, [r7, #20]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	4413      	add	r3, r2
 8005500:	b29b      	uxth	r3, r3
 8005502:	3301      	adds	r3, #1
 8005504:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8005506:	8bfb      	ldrh	r3, [r7, #30]
 8005508:	029a      	lsls	r2, r3, #10
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e02e      	b.n	800556e <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005510:	7c7b      	ldrb	r3, [r7, #17]
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	b2da      	uxtb	r2, r3
 8005518:	7dbb      	ldrb	r3, [r7, #22]
 800551a:	09db      	lsrs	r3, r3, #7
 800551c:	b2db      	uxtb	r3, r3
 800551e:	4413      	add	r3, r2
 8005520:	b2da      	uxtb	r2, r3
 8005522:	7d7b      	ldrb	r3, [r7, #21]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f003 0306 	and.w	r3, r3, #6
 800552c:	b2db      	uxtb	r3, r3
 800552e:	4413      	add	r3, r2
 8005530:	b2db      	uxtb	r3, r3
 8005532:	3302      	adds	r3, #2
 8005534:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8005538:	7d3b      	ldrb	r3, [r7, #20]
 800553a:	099b      	lsrs	r3, r3, #6
 800553c:	b2db      	uxtb	r3, r3
 800553e:	b29a      	uxth	r2, r3
 8005540:	7cfb      	ldrb	r3, [r7, #19]
 8005542:	b29b      	uxth	r3, r3
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	b29b      	uxth	r3, r3
 8005548:	4413      	add	r3, r2
 800554a:	b29a      	uxth	r2, r3
 800554c:	7cbb      	ldrb	r3, [r7, #18]
 800554e:	029b      	lsls	r3, r3, #10
 8005550:	b29b      	uxth	r3, r3
 8005552:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005556:	b29b      	uxth	r3, r3
 8005558:	4413      	add	r3, r2
 800555a:	b29b      	uxth	r3, r3
 800555c:	3301      	adds	r3, #1
 800555e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8005560:	8bfa      	ldrh	r2, [r7, #30]
 8005562:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005566:	3b09      	subs	r3, #9
 8005568:	409a      	lsls	r2, r3
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8005574:	e056      	b.n	8005624 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800557c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005584:	e055      	b.n	8005632 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8005586:	f7ff fbe5 	bl	8004d54 <SD_ReadyWait>
 800558a:	4603      	mov	r3, r0
 800558c:	2bff      	cmp	r3, #255	; 0xff
 800558e:	d14b      	bne.n	8005628 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005596:	e047      	b.n	8005628 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8005598:	2100      	movs	r1, #0
 800559a:	2049      	movs	r0, #73	; 0x49
 800559c:	f7ff fce4 	bl	8004f68 <SD_SendCmd>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d142      	bne.n	800562c <SD_disk_ioctl+0x244>
 80055a6:	2110      	movs	r1, #16
 80055a8:	6a38      	ldr	r0, [r7, #32]
 80055aa:	f7ff fc53 	bl	8004e54 <SD_RxDataBlock>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d03b      	beq.n	800562c <SD_disk_ioctl+0x244>
        res = RES_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80055ba:	e037      	b.n	800562c <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80055bc:	2100      	movs	r1, #0
 80055be:	204a      	movs	r0, #74	; 0x4a
 80055c0:	f7ff fcd2 	bl	8004f68 <SD_SendCmd>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d132      	bne.n	8005630 <SD_disk_ioctl+0x248>
 80055ca:	2110      	movs	r1, #16
 80055cc:	6a38      	ldr	r0, [r7, #32]
 80055ce:	f7ff fc41 	bl	8004e54 <SD_RxDataBlock>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d02b      	beq.n	8005630 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80055de:	e027      	b.n	8005630 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80055e0:	2100      	movs	r1, #0
 80055e2:	207a      	movs	r0, #122	; 0x7a
 80055e4:	f7ff fcc0 	bl	8004f68 <SD_SendCmd>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d116      	bne.n	800561c <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80055f4:	e00b      	b.n	800560e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80055f6:	6a3c      	ldr	r4, [r7, #32]
 80055f8:	1c63      	adds	r3, r4, #1
 80055fa:	623b      	str	r3, [r7, #32]
 80055fc:	f7ff fb7e 	bl	8004cfc <SPI_RxByte>
 8005600:	4603      	mov	r3, r0
 8005602:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8005604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005608:	3301      	adds	r3, #1
 800560a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800560e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005612:	2b03      	cmp	r3, #3
 8005614:	d9ef      	bls.n	80055f6 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 800561c:	2304      	movs	r3, #4
 800561e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005622:	e006      	b.n	8005632 <SD_disk_ioctl+0x24a>
      break;
 8005624:	bf00      	nop
 8005626:	e004      	b.n	8005632 <SD_disk_ioctl+0x24a>
      break;
 8005628:	bf00      	nop
 800562a:	e002      	b.n	8005632 <SD_disk_ioctl+0x24a>
      break;
 800562c:	bf00      	nop
 800562e:	e000      	b.n	8005632 <SD_disk_ioctl+0x24a>
      break;
 8005630:	bf00      	nop
    }

    DESELECT();
 8005632:	f7ff fb3d 	bl	8004cb0 <DESELECT>
    SPI_RxByte();
 8005636:	f7ff fb61 	bl	8004cfc <SPI_RxByte>
  }

  return res;
 800563a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800563e:	4618      	mov	r0, r3
 8005640:	372c      	adds	r7, #44	; 0x2c
 8005642:	46bd      	mov	sp, r7
 8005644:	bd90      	pop	{r4, r7, pc}
 8005646:	bf00      	nop
 8005648:	200000e9 	.word	0x200000e9

0800564c <getTotalTime>:
void resetTimeInterval()
{
	timeInterval = 0;
}
unsigned int* getTotalTime()
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
	return &totalTimeArray;
 8005650:	4b02      	ldr	r3, [pc, #8]	; (800565c <getTotalTime+0x10>)
}
 8005652:	4618      	mov	r0, r3
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	2000081c 	.word	0x2000081c

08005660 <getTimeVoo>:

unsigned int* getTimeVoo()
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
	return &timeVoo;
 8005664:	4b02      	ldr	r3, [pc, #8]	; (8005670 <getTimeVoo+0x10>)
}
 8005666:	4618      	mov	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	20000844 	.word	0x20000844

08005674 <getTimeSolo>:

unsigned int* getTimeSolo()
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
	return &timeSolo;
 8005678:	4b02      	ldr	r3, [pc, #8]	; (8005684 <getTimeSolo+0x10>)
}
 800567a:	4618      	mov	r0, r3
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	2000086c 	.word	0x2000086c

08005688 <resetSamplesCount>:

unsigned char resetSamplesCount()
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
	return samples = 0;
 800568c:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <resetSamplesCount+0x18>)
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	20000813 	.word	0x20000813

080056a4 <getSamplesCount>:

unsigned char* getSamplesCount()
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
	return &samples;
 80056a8:	4b02      	ldr	r3, [pc, #8]	; (80056b4 <getSamplesCount+0x10>)
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	20000813 	.word	0x20000813

080056b8 <resetTimer3Variable>:
	return uartFlagRx;
}


void resetTimer3Variable()
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
	timer3Data = 0;
 80056bc:	4b03      	ldr	r3, [pc, #12]	; (80056cc <resetTimer3Variable+0x14>)
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
}
 80056c2:	bf00      	nop
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	20000814 	.word	0x20000814

080056d0 <getKeyPressed>:

unsigned char getKeyPressed()
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
	return key;
 80056d4:	4b03      	ldr	r3, [pc, #12]	; (80056e4 <getKeyPressed+0x14>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	b2db      	uxtb	r3, r3
}
 80056da:	4618      	mov	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	20000808 	.word	0x20000808

080056e8 <resetKeyPressed>:

void resetKeyPressed()
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
	key = IDDLE;
 80056ec:	4b03      	ldr	r3, [pc, #12]	; (80056fc <resetKeyPressed+0x14>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 80056f2:	20c8      	movs	r0, #200	; 0xc8
 80056f4:	f001 f840 	bl	8006778 <HAL_Delay>
}
 80056f8:	bf00      	nop
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000808 	.word	0x20000808

08005700 <getUARTInstance>:

unsigned long int* getUARTInstance()
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
	return &huart2;
 8005704:	4b02      	ldr	r3, [pc, #8]	; (8005710 <getUARTInstance+0x10>)
}
 8005706:	4618      	mov	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	20000764 	.word	0x20000764

08005714 <getTimer2Instance>:

TIM_HandleTypeDef* getTimer2Instance()
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
	return &htim2;
 8005718:	4b02      	ldr	r3, [pc, #8]	; (8005724 <getTimer2Instance+0x10>)
}
 800571a:	4618      	mov	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	200006d4 	.word	0x200006d4

08005728 <getTimer3Instance>:

TIM_HandleTypeDef* getTimer3Instance()
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
	return &htim3;
 800572c:	4b02      	ldr	r3, [pc, #8]	; (8005738 <getTimer3Instance+0x10>)
}
 800572e:	4618      	mov	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	2000071c 	.word	0x2000071c

0800573c <getSensorFlag>:
{
	return sensorFlag;
}

unsigned char* getSensorFlag()
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
	return &sensorFlag;
 8005740:	4b02      	ldr	r3, [pc, #8]	; (800574c <getSensorFlag+0x10>)
}
 8005742:	4618      	mov	r0, r3
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	200000ea 	.word	0x200000ea

08005750 <getTimer3Variable>:

unsigned int* getTimer3Variable()
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
	return &timer3Data;
 8005754:	4b02      	ldr	r3, [pc, #8]	; (8005760 <getTimer3Variable+0x10>)
}
 8005756:	4618      	mov	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000814 	.word	0x20000814

08005764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800576a:	f000 ff93 	bl	8006694 <HAL_Init>
  	  unsigned char menuSelect;
  	  unsigned char menuDisplay;
  	  unsigned char menuState;
    };

    struct Menu menuTesteMain = {IDDLE,IDDLE,IDDLE,IDDLE};
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
    struct Menu menuTesteSub = {IDDLE,IDDLE,IDDLE,IDDLE};
 8005772:	2300      	movs	r3, #0
 8005774:	60bb      	str	r3, [r7, #8]
    unsigned char displayUpdateStatus = IDDLE;
 8005776:	2300      	movs	r3, #0
 8005778:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800577a:	f000 f9cb 	bl	8005b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800577e:	f000 fb53 	bl	8005e28 <MX_GPIO_Init>
  MX_DMA_Init();
 8005782:	f000 fb31 	bl	8005de8 <MX_DMA_Init>
  MX_TIM2_Init();
 8005786:	f000 fa63 	bl	8005c50 <MX_TIM2_Init>
  MX_TIM3_Init();
 800578a:	f000 fab5 	bl	8005cf8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800578e:	f000 fb01 	bl	8005d94 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8005792:	f000 fa27 	bl	8005be4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8005796:	f004 ff53 	bl	800a640 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800579a:	2201      	movs	r2, #1
 800579c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057a0:	48c9      	ldr	r0, [pc, #804]	; (8005ac8 <main+0x364>)
 80057a2:	f001 fea5 	bl	80074f0 <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 80057a6:	2202      	movs	r2, #2
 80057a8:	49c8      	ldr	r1, [pc, #800]	; (8005acc <main+0x368>)
 80057aa:	48c9      	ldr	r0, [pc, #804]	; (8005ad0 <main+0x36c>)
 80057ac:	f003 fe61 	bl	8009472 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80057b0:	4bc8      	ldr	r3, [pc, #800]	; (8005ad4 <main+0x370>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4bc7      	ldr	r3, [pc, #796]	; (8005ad4 <main+0x370>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0208 	bic.w	r2, r2, #8
 80057be:	601a      	str	r2, [r3, #0]
  homeDataDisplay(appNameMsg,companyNameMsg,appVersionMsg);
 80057c0:	4bc5      	ldr	r3, [pc, #788]	; (8005ad8 <main+0x374>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4ac5      	ldr	r2, [pc, #788]	; (8005adc <main+0x378>)
 80057c6:	6811      	ldr	r1, [r2, #0]
 80057c8:	4ac5      	ldr	r2, [pc, #788]	; (8005ae0 <main+0x37c>)
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fe fa33 	bl	8003c38 <homeDataDisplay>
  }
#endif

//	startTM3();// teste1
//  HW_EXT_MEMORY_WRITE("adelson","teste.txt");
  HAL_Delay(100);
 80057d2:	2064      	movs	r0, #100	; 0x64
 80057d4:	f000 ffd0 	bl	8006778 <HAL_Delay>
#if _APPLICATION
  while (1)
  {
	  switch(menuTesteMain.menuState)
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	2b05      	cmp	r3, #5
 80057dc:	d8fc      	bhi.n	80057d8 <main+0x74>
 80057de:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <main+0x80>)
 80057e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e4:	080057fd 	.word	0x080057fd
 80057e8:	0800582b 	.word	0x0800582b
 80057ec:	080058ab 	.word	0x080058ab
 80057f0:	08005931 	.word	0x08005931
 80057f4:	080059b7 	.word	0x080059b7
 80057f8:	08005a3b 	.word	0x08005a3b
	  	  {
	  		  case IDDLE:
	  			  menuTesteMain.menuState = getNextMain(IDDLE);
 80057fc:	2000      	movs	r0, #0
 80057fe:	f000 fcb9 	bl	8006174 <getNextMain>
 8005802:	4603      	mov	r3, r0
 8005804:	73fb      	strb	r3, [r7, #15]
	  			  if(key == AVANCAR)
 8005806:	4bb7      	ldr	r3, [pc, #732]	; (8005ae4 <main+0x380>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b41      	cmp	r3, #65	; 0x41
 800580e:	f040 8156 	bne.w	8005abe <main+0x35a>
	  			  {
//	  				  stopTM3();// teste1
	  				  resetKeyPressed();
 8005812:	f7ff ff69 	bl	80056e8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005816:	1dfb      	adds	r3, r7, #7
 8005818:	4618      	mov	r0, r3
 800581a:	f7fd fb0e 	bl	8002e3a <readyUserInterface>
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
 800581e:	2001      	movs	r0, #1
 8005820:	f000 fca8 	bl	8006174 <getNextMain>
 8005824:	4603      	mov	r3, r0
 8005826:	73fb      	strb	r3, [r7, #15]
	  			  }
	  		  break;
 8005828:	e149      	b.n	8005abe <main+0x35a>

	  		  case START_TEST:
	  			  updateUserMsg(0,USERMSG1,startUserMsg,&displayUpdateStatus);
 800582a:	4baf      	ldr	r3, [pc, #700]	; (8005ae8 <main+0x384>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	1dfb      	adds	r3, r7, #7
 8005830:	2100      	movs	r1, #0
 8005832:	2000      	movs	r0, #0
 8005834:	f7fd fae6 	bl	8002e04 <updateUserMsg>
	  			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8005838:	4bac      	ldr	r3, [pc, #688]	; (8005aec <main+0x388>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	2102      	movs	r1, #2
 8005840:	2000      	movs	r0, #0
 8005842:	f7fe fa3b 	bl	8003cbc <HW_PRINT_DATA>
	  			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8005846:	4baa      	ldr	r3, [pc, #680]	; (8005af0 <main+0x38c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	2103      	movs	r1, #3
 800584e:	2000      	movs	r0, #0
 8005850:	f7fe fa34 	bl	8003cbc <HW_PRINT_DATA>
	  			  if(key == AVANCAR)
 8005854:	4ba3      	ldr	r3, [pc, #652]	; (8005ae4 <main+0x380>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b41      	cmp	r3, #65	; 0x41
 800585c:	d10b      	bne.n	8005876 <main+0x112>
	  			  {
	  				  resetKeyPressed();
 800585e:	f7ff ff43 	bl	80056e8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005862:	1dfb      	adds	r3, r7, #7
 8005864:	4618      	mov	r0, r3
 8005866:	f7fd fae8 	bl	8002e3a <readyUserInterface>
	  				  menuTesteMain.menuState = getNextMain(CONSULT_DATA);
 800586a:	2002      	movs	r0, #2
 800586c:	f000 fc82 	bl	8006174 <getNextMain>
 8005870:	4603      	mov	r3, r0
 8005872:	73fb      	strb	r3, [r7, #15]
	  				  initStateMachine(&menuTesteSub);
	  				  readyUserInterface(&displayUpdateStatus);

	  				  menuTesteSub.menuState = IDDLE;
	  			  }
	  		  break;
 8005874:	e125      	b.n	8005ac2 <main+0x35e>
	  			  else if(key == CONFIRMAR)
 8005876:	4b9b      	ldr	r3, [pc, #620]	; (8005ae4 <main+0x380>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b43      	cmp	r3, #67	; 0x43
 800587e:	f040 8120 	bne.w	8005ac2 <main+0x35e>
	  				  resetKeyPressed();
 8005882:	f7ff ff31 	bl	80056e8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005886:	1dfb      	adds	r3, r7, #7
 8005888:	4618      	mov	r0, r3
 800588a:	f7fd fad6 	bl	8002e3a <readyUserInterface>
	  				  menuTesteMain.menuSelect = menuTesteMain.menuState;
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	737b      	strb	r3, [r7, #13]
	  				  initStateMachine(&menuTesteSub);
 8005892:	f107 0308 	add.w	r3, r7, #8
 8005896:	4618      	mov	r0, r3
 8005898:	f7fd fc90 	bl	80031bc <initStateMachine>
	  				  readyUserInterface(&displayUpdateStatus);
 800589c:	1dfb      	adds	r3, r7, #7
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fd facb 	bl	8002e3a <readyUserInterface>
	  				  menuTesteSub.menuState = IDDLE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	72fb      	strb	r3, [r7, #11]
	  		  break;
 80058a8:	e10b      	b.n	8005ac2 <main+0x35e>

	  		  case CONSULT_DATA:
	  			  updateUserMsg(0,0,consultUserMsg,&displayUpdateStatus);
 80058aa:	4b92      	ldr	r3, [pc, #584]	; (8005af4 <main+0x390>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	1dfb      	adds	r3, r7, #7
 80058b0:	2100      	movs	r1, #0
 80058b2:	2000      	movs	r0, #0
 80058b4:	f7fd faa6 	bl	8002e04 <updateUserMsg>
	  			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80058b8:	4b8c      	ldr	r3, [pc, #560]	; (8005aec <main+0x388>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	2102      	movs	r1, #2
 80058c0:	2000      	movs	r0, #0
 80058c2:	f7fe f9fb 	bl	8003cbc <HW_PRINT_DATA>
	  			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80058c6:	4b8a      	ldr	r3, [pc, #552]	; (8005af0 <main+0x38c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	2103      	movs	r1, #3
 80058ce:	2000      	movs	r0, #0
 80058d0:	f7fe f9f4 	bl	8003cbc <HW_PRINT_DATA>
	  			  if(key == AVANCAR)
 80058d4:	4b83      	ldr	r3, [pc, #524]	; (8005ae4 <main+0x380>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b41      	cmp	r3, #65	; 0x41
 80058dc:	d10b      	bne.n	80058f6 <main+0x192>
	  			  {
	  				  resetKeyPressed();
 80058de:	f7ff ff03 	bl	80056e8 <resetKeyPressed>
	  				                      readyUserInterface(&displayUpdateStatus);
 80058e2:	1dfb      	adds	r3, r7, #7
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fd faa8 	bl	8002e3a <readyUserInterface>
	  				  menuTesteMain.menuState = getNextMain(CONFIG_SENSOR);
 80058ea:	2003      	movs	r0, #3
 80058ec:	f000 fc42 	bl	8006174 <getNextMain>
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]
	  				 consultStateMachine(&menuTesteSub);
	  				  readyUserInterface(&displayUpdateStatus);
	  				 menuTesteMain.menuState = getNextMain(START_TEST);
	  				 menuTesteSub.menuState = IDDLE;
	  			  }
	  		  break;
 80058f4:	e106      	b.n	8005b04 <main+0x3a0>
	  			  else if(key == CONFIRMAR)
 80058f6:	4b7b      	ldr	r3, [pc, #492]	; (8005ae4 <main+0x380>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b43      	cmp	r3, #67	; 0x43
 80058fe:	f040 8101 	bne.w	8005b04 <main+0x3a0>
	  				  resetKeyPressed();
 8005902:	f7ff fef1 	bl	80056e8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005906:	1dfb      	adds	r3, r7, #7
 8005908:	4618      	mov	r0, r3
 800590a:	f7fd fa96 	bl	8002e3a <readyUserInterface>
	  				 consultStateMachine(&menuTesteSub);
 800590e:	f107 0308 	add.w	r3, r7, #8
 8005912:	4618      	mov	r0, r3
 8005914:	f7fc f964 	bl	8001be0 <consultStateMachine>
	  				  readyUserInterface(&displayUpdateStatus);
 8005918:	1dfb      	adds	r3, r7, #7
 800591a:	4618      	mov	r0, r3
 800591c:	f7fd fa8d 	bl	8002e3a <readyUserInterface>
	  				 menuTesteMain.menuState = getNextMain(START_TEST);
 8005920:	2001      	movs	r0, #1
 8005922:	f000 fc27 	bl	8006174 <getNextMain>
 8005926:	4603      	mov	r3, r0
 8005928:	73fb      	strb	r3, [r7, #15]
	  				 menuTesteSub.menuState = IDDLE;
 800592a:	2300      	movs	r3, #0
 800592c:	72fb      	strb	r3, [r7, #11]
	  		  break;
 800592e:	e0e9      	b.n	8005b04 <main+0x3a0>

	  		  case CONFIG_SENSOR:
	  			  updateUserMsg(0,0,configUserMsg,&displayUpdateStatus);
 8005930:	4b71      	ldr	r3, [pc, #452]	; (8005af8 <main+0x394>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	1dfb      	adds	r3, r7, #7
 8005936:	2100      	movs	r1, #0
 8005938:	2000      	movs	r0, #0
 800593a:	f7fd fa63 	bl	8002e04 <updateUserMsg>
	  			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 800593e:	4b6b      	ldr	r3, [pc, #428]	; (8005aec <main+0x388>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	2102      	movs	r1, #2
 8005946:	2000      	movs	r0, #0
 8005948:	f7fe f9b8 	bl	8003cbc <HW_PRINT_DATA>
	  			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800594c:	4b68      	ldr	r3, [pc, #416]	; (8005af0 <main+0x38c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	2103      	movs	r1, #3
 8005954:	2000      	movs	r0, #0
 8005956:	f7fe f9b1 	bl	8003cbc <HW_PRINT_DATA>
	  			  if(key == AVANCAR)
 800595a:	4b62      	ldr	r3, [pc, #392]	; (8005ae4 <main+0x380>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b41      	cmp	r3, #65	; 0x41
 8005962:	d10b      	bne.n	800597c <main+0x218>
	  			  {
	  				  resetKeyPressed();
 8005964:	f7ff fec0 	bl	80056e8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005968:	1dfb      	adds	r3, r7, #7
 800596a:	4618      	mov	r0, r3
 800596c:	f7fd fa65 	bl	8002e3a <readyUserInterface>
	  				  menuTesteMain.menuState = getNextMain(EXPORT_DATA);
 8005970:	2004      	movs	r0, #4
 8005972:	f000 fbff 	bl	8006174 <getNextMain>
 8005976:	4603      	mov	r3, r0
 8005978:	73fb      	strb	r3, [r7, #15]
	  				  configStateMachine(&menuTesteSub);
	  				  readyUserInterface(&displayUpdateStatus);
	  				  menuTesteSub.menuState = IDDLE;
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
	  			  }
	  		  break;
 800597a:	e0c5      	b.n	8005b08 <main+0x3a4>
	  			  else if(key == CONFIRMAR)
 800597c:	4b59      	ldr	r3, [pc, #356]	; (8005ae4 <main+0x380>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b43      	cmp	r3, #67	; 0x43
 8005984:	f040 80c0 	bne.w	8005b08 <main+0x3a4>
	  				  resetKeyPressed();
 8005988:	f7ff feae 	bl	80056e8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 800598c:	1dfb      	adds	r3, r7, #7
 800598e:	4618      	mov	r0, r3
 8005990:	f7fd fa53 	bl	8002e3a <readyUserInterface>
	  				  configStateMachine(&menuTesteSub);
 8005994:	f107 0308 	add.w	r3, r7, #8
 8005998:	4618      	mov	r0, r3
 800599a:	f7fb fb45 	bl	8001028 <configStateMachine>
	  				  readyUserInterface(&displayUpdateStatus);
 800599e:	1dfb      	adds	r3, r7, #7
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fd fa4a 	bl	8002e3a <readyUserInterface>
	  				  menuTesteSub.menuState = IDDLE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	72fb      	strb	r3, [r7, #11]
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
 80059aa:	2001      	movs	r0, #1
 80059ac:	f000 fbe2 	bl	8006174 <getNextMain>
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]
	  		  break;
 80059b4:	e0a8      	b.n	8005b08 <main+0x3a4>

	  		  case EXPORT_DATA:
	  			  updateUserMsg(0,0,exportUserMsg,&displayUpdateStatus);
 80059b6:	4b51      	ldr	r3, [pc, #324]	; (8005afc <main+0x398>)
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	1dfb      	adds	r3, r7, #7
 80059bc:	2100      	movs	r1, #0
 80059be:	2000      	movs	r0, #0
 80059c0:	f7fd fa20 	bl	8002e04 <updateUserMsg>
	  			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80059c4:	4b49      	ldr	r3, [pc, #292]	; (8005aec <main+0x388>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	2102      	movs	r1, #2
 80059cc:	2000      	movs	r0, #0
 80059ce:	f7fe f975 	bl	8003cbc <HW_PRINT_DATA>
	  			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80059d2:	4b47      	ldr	r3, [pc, #284]	; (8005af0 <main+0x38c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	2103      	movs	r1, #3
 80059da:	2000      	movs	r0, #0
 80059dc:	f7fe f96e 	bl	8003cbc <HW_PRINT_DATA>
	  			  if(key == AVANCAR)
 80059e0:	4b40      	ldr	r3, [pc, #256]	; (8005ae4 <main+0x380>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b41      	cmp	r3, #65	; 0x41
 80059e8:	d10b      	bne.n	8005a02 <main+0x29e>
	  			  {
	  				  resetKeyPressed();
 80059ea:	f7ff fe7d 	bl	80056e8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 80059ee:	1dfb      	adds	r3, r7, #7
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fd fa22 	bl	8002e3a <readyUserInterface>
	  				  menuTesteMain.menuState = getNextMain(ERASE_DATA);
 80059f6:	2005      	movs	r0, #5
 80059f8:	f000 fbbc 	bl	8006174 <getNextMain>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
	  				  readyUserInterface(&displayUpdateStatus);

	  				  menuTesteSub.menuState = IDDLE;
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
	  			  }
	  		  break;
 8005a00:	e084      	b.n	8005b0c <main+0x3a8>
	  			  else if(key == CONFIRMAR)
 8005a02:	4b38      	ldr	r3, [pc, #224]	; (8005ae4 <main+0x380>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b43      	cmp	r3, #67	; 0x43
 8005a0a:	d17f      	bne.n	8005b0c <main+0x3a8>
	  				  resetKeyPressed();
 8005a0c:	f7ff fe6c 	bl	80056e8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005a10:	1dfb      	adds	r3, r7, #7
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fd fa11 	bl	8002e3a <readyUserInterface>
	  				  exportStateMachine(&menuTesteSub);
 8005a18:	f107 0308 	add.w	r3, r7, #8
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fd fa2b 	bl	8002e78 <exportStateMachine>
	  				  readyUserInterface(&displayUpdateStatus);
 8005a22:	1dfb      	adds	r3, r7, #7
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fd fa08 	bl	8002e3a <readyUserInterface>
	  				  menuTesteSub.menuState = IDDLE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	72fb      	strb	r3, [r7, #11]
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f000 fba0 	bl	8006174 <getNextMain>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]
	  		  break;
 8005a38:	e068      	b.n	8005b0c <main+0x3a8>

	  		  case ERASE_DATA:
	  			  updateUserMsg(0,0,eraseUserMsg,&displayUpdateStatus);
 8005a3a:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <main+0x39c>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	1dfb      	adds	r3, r7, #7
 8005a40:	2100      	movs	r1, #0
 8005a42:	2000      	movs	r0, #0
 8005a44:	f7fd f9de 	bl	8002e04 <updateUserMsg>
	  			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8005a48:	4b28      	ldr	r3, [pc, #160]	; (8005aec <main+0x388>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2102      	movs	r1, #2
 8005a50:	2000      	movs	r0, #0
 8005a52:	f7fe f933 	bl	8003cbc <HW_PRINT_DATA>
	  			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8005a56:	4b26      	ldr	r3, [pc, #152]	; (8005af0 <main+0x38c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2103      	movs	r1, #3
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f7fe f92c 	bl	8003cbc <HW_PRINT_DATA>
	  			  if(key == AVANCAR)
 8005a64:	4b1f      	ldr	r3, [pc, #124]	; (8005ae4 <main+0x380>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b41      	cmp	r3, #65	; 0x41
 8005a6c:	d10b      	bne.n	8005a86 <main+0x322>
	  			  {
	  				  resetKeyPressed();
 8005a6e:	f7ff fe3b 	bl	80056e8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005a72:	1dfb      	adds	r3, r7, #7
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fd f9e0 	bl	8002e3a <readyUserInterface>
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	f000 fb7a 	bl	8006174 <getNextMain>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]
	  				  readyUserInterface(&displayUpdateStatus);

	  				  menuTesteSub.menuState = IDDLE;
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
	  			  }
	  		  break;
 8005a84:	e044      	b.n	8005b10 <main+0x3ac>
	  			  else if(key == CONFIRMAR)
 8005a86:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <main+0x380>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b43      	cmp	r3, #67	; 0x43
 8005a8e:	d13f      	bne.n	8005b10 <main+0x3ac>
	  				  resetKeyPressed();
 8005a90:	f7ff fe2a 	bl	80056e8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005a94:	1dfb      	adds	r3, r7, #7
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fd f9cf 	bl	8002e3a <readyUserInterface>
	  				  eraseStateMachine(&menuTesteSub);
 8005a9c:	f107 0308 	add.w	r3, r7, #8
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fb fa13 	bl	8000ecc <eraseStateMachine>
	  				  readyUserInterface(&displayUpdateStatus);
 8005aa6:	1dfb      	adds	r3, r7, #7
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fd f9c6 	bl	8002e3a <readyUserInterface>
	  				  menuTesteSub.menuState = IDDLE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	72fb      	strb	r3, [r7, #11]
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005ab2:	2001      	movs	r0, #1
 8005ab4:	f000 fb5e 	bl	8006174 <getNextMain>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]
	  		  break;
 8005abc:	e028      	b.n	8005b10 <main+0x3ac>
	  		  break;
 8005abe:	bf00      	nop
 8005ac0:	e68a      	b.n	80057d8 <main+0x74>
	  		  break;
 8005ac2:	bf00      	nop
 8005ac4:	e688      	b.n	80057d8 <main+0x74>
 8005ac6:	bf00      	nop
 8005ac8:	40020800 	.word	0x40020800
 8005acc:	2000080c 	.word	0x2000080c
 8005ad0:	20000764 	.word	0x20000764
 8005ad4:	200007a8 	.word	0x200007a8
 8005ad8:	20000018 	.word	0x20000018
 8005adc:	2000001c 	.word	0x2000001c
 8005ae0:	20000020 	.word	0x20000020
 8005ae4:	20000808 	.word	0x20000808
 8005ae8:	20000024 	.word	0x20000024
 8005aec:	200000d0 	.word	0x200000d0
 8005af0:	200000dc 	.word	0x200000dc
 8005af4:	20000070 	.word	0x20000070
 8005af8:	20000080 	.word	0x20000080
 8005afc:	200000b4 	.word	0x200000b4
 8005b00:	200000c0 	.word	0x200000c0
	  		  break;
 8005b04:	bf00      	nop
 8005b06:	e667      	b.n	80057d8 <main+0x74>
	  		  break;
 8005b08:	bf00      	nop
 8005b0a:	e665      	b.n	80057d8 <main+0x74>
	  		  break;
 8005b0c:	bf00      	nop
 8005b0e:	e663      	b.n	80057d8 <main+0x74>
	  		  break;
 8005b10:	bf00      	nop
	  switch(menuTesteMain.menuState)
 8005b12:	e661      	b.n	80057d8 <main+0x74>

08005b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b094      	sub	sp, #80	; 0x50
 8005b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b1a:	f107 0320 	add.w	r3, r7, #32
 8005b1e:	2230      	movs	r2, #48	; 0x30
 8005b20:	2100      	movs	r1, #0
 8005b22:	4618      	mov	r0, r3
 8005b24:	f007 ff52 	bl	800d9cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b28:	f107 030c 	add.w	r3, r7, #12
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	609a      	str	r2, [r3, #8]
 8005b34:	60da      	str	r2, [r3, #12]
 8005b36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	4b27      	ldr	r3, [pc, #156]	; (8005bdc <SystemClock_Config+0xc8>)
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	4a26      	ldr	r2, [pc, #152]	; (8005bdc <SystemClock_Config+0xc8>)
 8005b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b46:	6413      	str	r3, [r2, #64]	; 0x40
 8005b48:	4b24      	ldr	r3, [pc, #144]	; (8005bdc <SystemClock_Config+0xc8>)
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b50:	60bb      	str	r3, [r7, #8]
 8005b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b54:	2300      	movs	r3, #0
 8005b56:	607b      	str	r3, [r7, #4]
 8005b58:	4b21      	ldr	r3, [pc, #132]	; (8005be0 <SystemClock_Config+0xcc>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a20      	ldr	r2, [pc, #128]	; (8005be0 <SystemClock_Config+0xcc>)
 8005b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	4b1e      	ldr	r3, [pc, #120]	; (8005be0 <SystemClock_Config+0xcc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b6c:	607b      	str	r3, [r7, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005b70:	2301      	movs	r3, #1
 8005b72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8005b84:	230c      	movs	r3, #12
 8005b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005b88:	2360      	movs	r3, #96	; 0x60
 8005b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005b90:	2304      	movs	r3, #4
 8005b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b94:	f107 0320 	add.w	r3, r7, #32
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 fcf5 	bl	8007588 <HAL_RCC_OscConfig>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005ba4:	f000 fae0 	bl	8006168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ba8:	230f      	movs	r3, #15
 8005baa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bac:	2302      	movs	r3, #2
 8005bae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005bbe:	f107 030c 	add.w	r3, r7, #12
 8005bc2:	2103      	movs	r1, #3
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f001 ff57 	bl	8007a78 <HAL_RCC_ClockConfig>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005bd0:	f000 faca 	bl	8006168 <Error_Handler>
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	3750      	adds	r7, #80	; 0x50
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40007000 	.word	0x40007000

08005be4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005be8:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005bea:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <MX_SPI1_Init+0x68>)
 8005bec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005bee:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005bf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005bf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005bfc:	4b12      	ldr	r3, [pc, #72]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c02:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005c08:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005c18:	2230      	movs	r2, #48	; 0x30
 8005c1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c28:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005c30:	220a      	movs	r2, #10
 8005c32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005c34:	4804      	ldr	r0, [pc, #16]	; (8005c48 <MX_SPI1_Init+0x64>)
 8005c36:	f002 f8ff 	bl	8007e38 <HAL_SPI_Init>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005c40:	f000 fa92 	bl	8006168 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	2000067c 	.word	0x2000067c
 8005c4c:	40013000 	.word	0x40013000

08005c50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08c      	sub	sp, #48	; 0x30
 8005c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005c56:	f107 030c 	add.w	r3, r7, #12
 8005c5a:	2224      	movs	r2, #36	; 0x24
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f007 feb4 	bl	800d9cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c64:	1d3b      	adds	r3, r7, #4
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005c6c:	4b21      	ldr	r3, [pc, #132]	; (8005cf4 <MX_TIM2_Init+0xa4>)
 8005c6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005c74:	4b1f      	ldr	r3, [pc, #124]	; (8005cf4 <MX_TIM2_Init+0xa4>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c7a:	4b1e      	ldr	r3, [pc, #120]	; (8005cf4 <MX_TIM2_Init+0xa4>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005c80:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <MX_TIM2_Init+0xa4>)
 8005c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c88:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <MX_TIM2_Init+0xa4>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c8e:	4b19      	ldr	r3, [pc, #100]	; (8005cf4 <MX_TIM2_Init+0xa4>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005c94:	2301      	movs	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005ca4:	230f      	movs	r3, #15
 8005ca6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005cac:	2301      	movs	r3, #1
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005cb4:	230f      	movs	r3, #15
 8005cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005cb8:	f107 030c 	add.w	r3, r7, #12
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	480d      	ldr	r0, [pc, #52]	; (8005cf4 <MX_TIM2_Init+0xa4>)
 8005cc0:	f002 fdd2 	bl	8008868 <HAL_TIM_Encoder_Init>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005cca:	f000 fa4d 	bl	8006168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005cd6:	1d3b      	adds	r3, r7, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4806      	ldr	r0, [pc, #24]	; (8005cf4 <MX_TIM2_Init+0xa4>)
 8005cdc:	f003 fafa 	bl	80092d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005ce6:	f000 fa3f 	bl	8006168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005cea:	bf00      	nop
 8005cec:	3730      	adds	r7, #48	; 0x30
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	200006d4 	.word	0x200006d4

08005cf8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cfe:	f107 0308 	add.w	r3, r7, #8
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	605a      	str	r2, [r3, #4]
 8005d08:	609a      	str	r2, [r3, #8]
 8005d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005d14:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <MX_TIM3_Init+0x94>)
 8005d16:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <MX_TIM3_Init+0x98>)
 8005d18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8005d1a:	4b1c      	ldr	r3, [pc, #112]	; (8005d8c <MX_TIM3_Init+0x94>)
 8005d1c:	2263      	movs	r2, #99	; 0x63
 8005d1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d20:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <MX_TIM3_Init+0x94>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8005d26:	4b19      	ldr	r3, [pc, #100]	; (8005d8c <MX_TIM3_Init+0x94>)
 8005d28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d2e:	4b17      	ldr	r3, [pc, #92]	; (8005d8c <MX_TIM3_Init+0x94>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d34:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <MX_TIM3_Init+0x94>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005d3a:	4814      	ldr	r0, [pc, #80]	; (8005d8c <MX_TIM3_Init+0x94>)
 8005d3c:	f002 fcbc 	bl	80086b8 <HAL_TIM_Base_Init>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8005d46:	f000 fa0f 	bl	8006168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005d50:	f107 0308 	add.w	r3, r7, #8
 8005d54:	4619      	mov	r1, r3
 8005d56:	480d      	ldr	r0, [pc, #52]	; (8005d8c <MX_TIM3_Init+0x94>)
 8005d58:	f003 f897 	bl	8008e8a <HAL_TIM_ConfigClockSource>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8005d62:	f000 fa01 	bl	8006168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d66:	2300      	movs	r3, #0
 8005d68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005d6e:	463b      	mov	r3, r7
 8005d70:	4619      	mov	r1, r3
 8005d72:	4806      	ldr	r0, [pc, #24]	; (8005d8c <MX_TIM3_Init+0x94>)
 8005d74:	f003 faae 	bl	80092d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8005d7e:	f000 f9f3 	bl	8006168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005d82:	bf00      	nop
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	2000071c 	.word	0x2000071c
 8005d90:	40000400 	.word	0x40000400

08005d94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005d98:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <MX_USART2_UART_Init+0x4c>)
 8005d9a:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <MX_USART2_UART_Init+0x50>)
 8005d9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <MX_USART2_UART_Init+0x4c>)
 8005da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005da4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005da6:	4b0e      	ldr	r3, [pc, #56]	; (8005de0 <MX_USART2_UART_Init+0x4c>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005dac:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <MX_USART2_UART_Init+0x4c>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <MX_USART2_UART_Init+0x4c>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005db8:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <MX_USART2_UART_Init+0x4c>)
 8005dba:	220c      	movs	r2, #12
 8005dbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005dbe:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <MX_USART2_UART_Init+0x4c>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <MX_USART2_UART_Init+0x4c>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005dca:	4805      	ldr	r0, [pc, #20]	; (8005de0 <MX_USART2_UART_Init+0x4c>)
 8005dcc:	f003 fb04 	bl	80093d8 <HAL_UART_Init>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005dd6:	f000 f9c7 	bl	8006168 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005dda:	bf00      	nop
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000764 	.word	0x20000764
 8005de4:	40004400 	.word	0x40004400

08005de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005dee:	2300      	movs	r3, #0
 8005df0:	607b      	str	r3, [r7, #4]
 8005df2:	4b0c      	ldr	r3, [pc, #48]	; (8005e24 <MX_DMA_Init+0x3c>)
 8005df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df6:	4a0b      	ldr	r2, [pc, #44]	; (8005e24 <MX_DMA_Init+0x3c>)
 8005df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8005dfe:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <MX_DMA_Init+0x3c>)
 8005e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	2010      	movs	r0, #16
 8005e10:	f000 fdb1 	bl	8006976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005e14:	2010      	movs	r0, #16
 8005e16:	f000 fdca 	bl	80069ae <HAL_NVIC_EnableIRQ>

}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40023800 	.word	0x40023800

08005e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e2e:	f107 0314 	add.w	r3, r7, #20
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	609a      	str	r2, [r3, #8]
 8005e3a:	60da      	str	r2, [r3, #12]
 8005e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e3e:	2300      	movs	r3, #0
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	4b59      	ldr	r3, [pc, #356]	; (8005fa8 <MX_GPIO_Init+0x180>)
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	4a58      	ldr	r2, [pc, #352]	; (8005fa8 <MX_GPIO_Init+0x180>)
 8005e48:	f043 0304 	orr.w	r3, r3, #4
 8005e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e4e:	4b56      	ldr	r3, [pc, #344]	; (8005fa8 <MX_GPIO_Init+0x180>)
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	4b52      	ldr	r3, [pc, #328]	; (8005fa8 <MX_GPIO_Init+0x180>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	4a51      	ldr	r2, [pc, #324]	; (8005fa8 <MX_GPIO_Init+0x180>)
 8005e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e68:	6313      	str	r3, [r2, #48]	; 0x30
 8005e6a:	4b4f      	ldr	r3, [pc, #316]	; (8005fa8 <MX_GPIO_Init+0x180>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	4b4b      	ldr	r3, [pc, #300]	; (8005fa8 <MX_GPIO_Init+0x180>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	4a4a      	ldr	r2, [pc, #296]	; (8005fa8 <MX_GPIO_Init+0x180>)
 8005e80:	f043 0301 	orr.w	r3, r3, #1
 8005e84:	6313      	str	r3, [r2, #48]	; 0x30
 8005e86:	4b48      	ldr	r3, [pc, #288]	; (8005fa8 <MX_GPIO_Init+0x180>)
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	60bb      	str	r3, [r7, #8]
 8005e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e92:	2300      	movs	r3, #0
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	4b44      	ldr	r3, [pc, #272]	; (8005fa8 <MX_GPIO_Init+0x180>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	4a43      	ldr	r2, [pc, #268]	; (8005fa8 <MX_GPIO_Init+0x180>)
 8005e9c:	f043 0302 	orr.w	r3, r3, #2
 8005ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ea2:	4b41      	ldr	r3, [pc, #260]	; (8005fa8 <MX_GPIO_Init+0x180>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	607b      	str	r3, [r7, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005eb4:	483d      	ldr	r0, [pc, #244]	; (8005fac <MX_GPIO_Init+0x184>)
 8005eb6:	f001 fb1b 	bl	80074f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f649 7110 	movw	r1, #40720	; 0x9f10
 8005ec0:	483b      	ldr	r0, [pc, #236]	; (8005fb0 <MX_GPIO_Init+0x188>)
 8005ec2:	f001 fb15 	bl	80074f0 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f24f 0108 	movw	r1, #61448	; 0xf008
 8005ecc:	4839      	ldr	r0, [pc, #228]	; (8005fb4 <MX_GPIO_Init+0x18c>)
 8005ece:	f001 fb0f 	bl	80074f0 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005ed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ee4:	f107 0314 	add.w	r3, r7, #20
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4830      	ldr	r0, [pc, #192]	; (8005fac <MX_GPIO_Init+0x184>)
 8005eec:	f001 f97c 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005efc:	2300      	movs	r3, #0
 8005efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8005f00:	f107 0314 	add.w	r3, r7, #20
 8005f04:	4619      	mov	r1, r3
 8005f06:	482a      	ldr	r0, [pc, #168]	; (8005fb0 <MX_GPIO_Init+0x188>)
 8005f08:	f001 f96e 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8005f0c:	f24f 0308 	movw	r3, #61448	; 0xf008
 8005f10:	617b      	str	r3, [r7, #20]
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f12:	2301      	movs	r3, #1
 8005f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f1e:	f107 0314 	add.w	r3, r7, #20
 8005f22:	4619      	mov	r1, r3
 8005f24:	4823      	ldr	r0, [pc, #140]	; (8005fb4 <MX_GPIO_Init+0x18c>)
 8005f26:	f001 f95f 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D3_Pin LCD_D2_Pin LCD_D1_Pin LCD_D0_Pin
                           LCD_EN_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin|LCD_D0_Pin
 8005f2a:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8005f2e:	617b      	str	r3, [r7, #20]
                          |LCD_EN_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f30:	2301      	movs	r3, #1
 8005f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f3c:	f107 0314 	add.w	r3, r7, #20
 8005f40:	4619      	mov	r1, r3
 8005f42:	481b      	ldr	r0, [pc, #108]	; (8005fb0 <MX_GPIO_Init+0x188>)
 8005f44:	f001 f950 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_MENU_Pin */
  GPIO_InitStruct.Pin = BT_MENU_Pin;
 8005f48:	2310      	movs	r3, #16
 8005f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005f4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f52:	2301      	movs	r3, #1
 8005f54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_MENU_GPIO_Port, &GPIO_InitStruct);
 8005f56:	f107 0314 	add.w	r3, r7, #20
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4815      	ldr	r0, [pc, #84]	; (8005fb4 <MX_GPIO_Init+0x18c>)
 8005f5e:	f001 f943 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_AVANCA_Pin BT_SELECT_Pin BT_STOP_Pin BT_INSERT_Pin */
  GPIO_InitStruct.Pin = BT_AVANCA_Pin|BT_SELECT_Pin|BT_STOP_Pin|BT_INSERT_Pin;
 8005f62:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005f68:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f72:	f107 0314 	add.w	r3, r7, #20
 8005f76:	4619      	mov	r1, r3
 8005f78:	480e      	ldr	r0, [pc, #56]	; (8005fb4 <MX_GPIO_Init+0x18c>)
 8005f7a:	f001 f935 	bl	80071e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2100      	movs	r1, #0
 8005f82:	200a      	movs	r0, #10
 8005f84:	f000 fcf7 	bl	8006976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005f88:	200a      	movs	r0, #10
 8005f8a:	f000 fd10 	bl	80069ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2100      	movs	r1, #0
 8005f92:	2017      	movs	r0, #23
 8005f94:	f000 fcef 	bl	8006976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005f98:	2017      	movs	r0, #23
 8005f9a:	f000 fd08 	bl	80069ae <HAL_NVIC_EnableIRQ>

}
 8005f9e:	bf00      	nop
 8005fa0:	3728      	adds	r7, #40	; 0x28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	40020800 	.word	0x40020800
 8005fb0:	40020000 	.word	0x40020000
 8005fb4:	40020400 	.word	0x40020400

08005fb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	if(htim == &htim3) //VERIFICAR O CLOCK PARA CALCULAR O NOVO TIMER
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a11      	ldr	r2, [pc, #68]	; (8006008 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d119      	bne.n	8005ffc <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		timer3Count+=1;  //1ms
 8005fc8:	4b10      	ldr	r3, [pc, #64]	; (800600c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	4a0f      	ldr	r2, [pc, #60]	; (800600c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005fd0:	6013      	str	r3, [r2, #0]
		if(timer3Count == 10)
 8005fd2:	4b0e      	ldr	r3, [pc, #56]	; (800600c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b0a      	cmp	r3, #10
 8005fd8:	d110      	bne.n	8005ffc <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			timer3Data += timer3Count;
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	4a0a      	ldr	r2, [pc, #40]	; (8006010 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005fe6:	6013      	str	r3, [r2, #0]
			timer3Count = 0;
 8005fe8:	4b08      	ldr	r3, [pc, #32]	; (800600c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]
			samples++;
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	4b06      	ldr	r3, [pc, #24]	; (8006014 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005ffa:	701a      	strb	r2, [r3, #0]
//			}
//		}

	}

}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	2000071c 	.word	0x2000071c
 800600c:	20000818 	.word	0x20000818
 8006010:	20000814 	.word	0x20000814
 8006014:	20000813 	.word	0x20000813

08006018 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	807b      	strh	r3, [r7, #2]

	uartFlagRx = TRUE;
 8006024:	4b1a      	ldr	r3, [pc, #104]	; (8006090 <HAL_UARTEx_RxEventCallback+0x78>)
 8006026:	2201      	movs	r2, #1
 8006028:	701a      	strb	r2, [r3, #0]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 800602a:	2202      	movs	r2, #2
 800602c:	4919      	ldr	r1, [pc, #100]	; (8006094 <HAL_UARTEx_RxEventCallback+0x7c>)
 800602e:	481a      	ldr	r0, [pc, #104]	; (8006098 <HAL_UARTEx_RxEventCallback+0x80>)
 8006030:	f003 fa1f 	bl	8009472 <HAL_UARTEx_ReceiveToIdle_DMA>
  for(unsigned char i=0;i<Size;i++)  rxMSG[i] = uartBuffer[i];
 8006034:	2300      	movs	r3, #0
 8006036:	73fb      	strb	r3, [r7, #15]
 8006038:	e009      	b.n	800604e <HAL_UARTEx_RxEventCallback+0x36>
 800603a:	7bfa      	ldrb	r2, [r7, #15]
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	4915      	ldr	r1, [pc, #84]	; (8006094 <HAL_UARTEx_RxEventCallback+0x7c>)
 8006040:	5c8a      	ldrb	r2, [r1, r2]
 8006042:	b2d1      	uxtb	r1, r2
 8006044:	4a15      	ldr	r2, [pc, #84]	; (800609c <HAL_UARTEx_RxEventCallback+0x84>)
 8006046:	54d1      	strb	r1, [r2, r3]
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	3301      	adds	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	b29b      	uxth	r3, r3
 8006052:	887a      	ldrh	r2, [r7, #2]
 8006054:	429a      	cmp	r2, r3
 8006056:	d8f0      	bhi.n	800603a <HAL_UARTEx_RxEventCallback+0x22>
  for(unsigned char i=0;i<Size;i++)  uartBuffer[i] = '0';
 8006058:	2300      	movs	r3, #0
 800605a:	73bb      	strb	r3, [r7, #14]
 800605c:	e006      	b.n	800606c <HAL_UARTEx_RxEventCallback+0x54>
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	4a0c      	ldr	r2, [pc, #48]	; (8006094 <HAL_UARTEx_RxEventCallback+0x7c>)
 8006062:	2130      	movs	r1, #48	; 0x30
 8006064:	54d1      	strb	r1, [r2, r3]
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	3301      	adds	r3, #1
 800606a:	73bb      	strb	r3, [r7, #14]
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	b29b      	uxth	r3, r3
 8006070:	887a      	ldrh	r2, [r7, #2]
 8006072:	429a      	cmp	r2, r3
 8006074:	d8f3      	bhi.n	800605e <HAL_UARTEx_RxEventCallback+0x46>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <HAL_UARTEx_RxEventCallback+0x88>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	4b08      	ldr	r3, [pc, #32]	; (80060a0 <HAL_UARTEx_RxEventCallback+0x88>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0208 	bic.w	r2, r2, #8
 8006084:	601a      	str	r2, [r3, #0]

}
 8006086:	bf00      	nop
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000812 	.word	0x20000812
 8006094:	2000080c 	.word	0x2000080c
 8006098:	20000764 	.word	0x20000764
 800609c:	20000810 	.word	0x20000810
 80060a0:	200007a8 	.word	0x200007a8

080060a4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a11      	ldr	r2, [pc, #68]	; (80060f4 <HAL_TIM_IC_CaptureCallback+0x50>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d11a      	bne.n	80060ea <HAL_TIM_IC_CaptureCallback+0x46>
	{
		if(htim->Channel == 2)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	7f1b      	ldrb	r3, [r3, #28]
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d109      	bne.n	80060d0 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80060bc:	2201      	movs	r2, #1
 80060be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060c2:	480d      	ldr	r0, [pc, #52]	; (80060f8 <HAL_TIM_IC_CaptureCallback+0x54>)
 80060c4:	f001 fa14 	bl	80074f0 <HAL_GPIO_WritePin>
			sensorFlag = 1;
 80060c8:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <HAL_TIM_IC_CaptureCallback+0x58>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
			sensorFlag = 0;
		}
	}

}
 80060ce:	e00c      	b.n	80060ea <HAL_TIM_IC_CaptureCallback+0x46>
		else if(htim->Channel == 1)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	7f1b      	ldrb	r3, [r3, #28]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d108      	bne.n	80060ea <HAL_TIM_IC_CaptureCallback+0x46>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80060d8:	2200      	movs	r2, #0
 80060da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060de:	4806      	ldr	r0, [pc, #24]	; (80060f8 <HAL_TIM_IC_CaptureCallback+0x54>)
 80060e0:	f001 fa06 	bl	80074f0 <HAL_GPIO_WritePin>
			sensorFlag = 0;
 80060e4:	4b05      	ldr	r3, [pc, #20]	; (80060fc <HAL_TIM_IC_CaptureCallback+0x58>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
}
 80060ea:	bf00      	nop
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	200006d4 	.word	0x200006d4
 80060f8:	40020800 	.word	0x40020800
 80060fc:	200000ea 	.word	0x200000ea

08006100 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	4603      	mov	r3, r0
 8006108:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006110:	d012      	beq.n	8006138 <HAL_GPIO_EXTI_Callback+0x38>
 8006112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006116:	dc1f      	bgt.n	8006158 <HAL_GPIO_EXTI_Callback+0x58>
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	d019      	beq.n	8006150 <HAL_GPIO_EXTI_Callback+0x50>
 800611c:	2b80      	cmp	r3, #128	; 0x80
 800611e:	dc1b      	bgt.n	8006158 <HAL_GPIO_EXTI_Callback+0x58>
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d011      	beq.n	8006148 <HAL_GPIO_EXTI_Callback+0x48>
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	dc17      	bgt.n	8006158 <HAL_GPIO_EXTI_Callback+0x58>
 8006128:	2b10      	cmp	r3, #16
 800612a:	d009      	beq.n	8006140 <HAL_GPIO_EXTI_Callback+0x40>
 800612c:	2b20      	cmp	r3, #32
 800612e:	d113      	bne.n	8006158 <HAL_GPIO_EXTI_Callback+0x58>
	{
		case BT_AVANCA_Pin:
			key = AVANCAR;
 8006130:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <HAL_GPIO_EXTI_Callback+0x64>)
 8006132:	2241      	movs	r2, #65	; 0x41
 8006134:	701a      	strb	r2, [r3, #0]
		break;
 8006136:	e00f      	b.n	8006158 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_INSERT_Pin:
			key = INSERIR;
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <HAL_GPIO_EXTI_Callback+0x64>)
 800613a:	2249      	movs	r2, #73	; 0x49
 800613c:	701a      	strb	r2, [r3, #0]
		break;
 800613e:	e00b      	b.n	8006158 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_MENU_Pin:
			key = MENU;
 8006140:	4b08      	ldr	r3, [pc, #32]	; (8006164 <HAL_GPIO_EXTI_Callback+0x64>)
 8006142:	224d      	movs	r2, #77	; 0x4d
 8006144:	701a      	strb	r2, [r3, #0]
		break;
 8006146:	e007      	b.n	8006158 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_SELECT_Pin:
			key = CONFIRMAR;
 8006148:	4b06      	ldr	r3, [pc, #24]	; (8006164 <HAL_GPIO_EXTI_Callback+0x64>)
 800614a:	2243      	movs	r2, #67	; 0x43
 800614c:	701a      	strb	r2, [r3, #0]
		break;
 800614e:	e003      	b.n	8006158 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_STOP_Pin:
			key = PARAR;
 8006150:	4b04      	ldr	r3, [pc, #16]	; (8006164 <HAL_GPIO_EXTI_Callback+0x64>)
 8006152:	2250      	movs	r2, #80	; 0x50
 8006154:	701a      	strb	r2, [r3, #0]
		break;
 8006156:	bf00      	nop
	}

}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	20000808 	.word	0x20000808

08006168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800616c:	b672      	cpsid	i
}
 800616e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006170:	e7fe      	b.n	8006170 <Error_Handler+0x8>
	...

08006174 <getNextMain>:

struct Menu menuMain ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextMain(unsigned char nextState)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	71fb      	strb	r3, [r7, #7]

    menuMain.menuNext = nextState;
 800617e:	4a05      	ldr	r2, [pc, #20]	; (8006194 <getNextMain+0x20>)
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	7013      	strb	r3, [r2, #0]
    return menuMain.menuNext;
 8006184:	4b03      	ldr	r3, [pc, #12]	; (8006194 <getNextMain+0x20>)
 8006186:	781b      	ldrb	r3, [r3, #0]
}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	20000894 	.word	0x20000894

08006198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800619e:	2300      	movs	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]
 80061a2:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <HAL_MspInit+0x4c>)
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	4a0f      	ldr	r2, [pc, #60]	; (80061e4 <HAL_MspInit+0x4c>)
 80061a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061ac:	6453      	str	r3, [r2, #68]	; 0x44
 80061ae:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <HAL_MspInit+0x4c>)
 80061b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061b6:	607b      	str	r3, [r7, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80061ba:	2300      	movs	r3, #0
 80061bc:	603b      	str	r3, [r7, #0]
 80061be:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <HAL_MspInit+0x4c>)
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <HAL_MspInit+0x4c>)
 80061c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c8:	6413      	str	r3, [r2, #64]	; 0x40
 80061ca:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <HAL_MspInit+0x4c>)
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d2:	603b      	str	r3, [r7, #0]
 80061d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40023800 	.word	0x40023800

080061e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f0:	f107 0314 	add.w	r3, r7, #20
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	605a      	str	r2, [r3, #4]
 80061fa:	609a      	str	r2, [r3, #8]
 80061fc:	60da      	str	r2, [r3, #12]
 80061fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a19      	ldr	r2, [pc, #100]	; (800626c <HAL_SPI_MspInit+0x84>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d12b      	bne.n	8006262 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	4b18      	ldr	r3, [pc, #96]	; (8006270 <HAL_SPI_MspInit+0x88>)
 8006210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006212:	4a17      	ldr	r2, [pc, #92]	; (8006270 <HAL_SPI_MspInit+0x88>)
 8006214:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006218:	6453      	str	r3, [r2, #68]	; 0x44
 800621a:	4b15      	ldr	r3, [pc, #84]	; (8006270 <HAL_SPI_MspInit+0x88>)
 800621c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	4b11      	ldr	r3, [pc, #68]	; (8006270 <HAL_SPI_MspInit+0x88>)
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	4a10      	ldr	r2, [pc, #64]	; (8006270 <HAL_SPI_MspInit+0x88>)
 8006230:	f043 0301 	orr.w	r3, r3, #1
 8006234:	6313      	str	r3, [r2, #48]	; 0x30
 8006236:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <HAL_SPI_MspInit+0x88>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006242:	23e0      	movs	r3, #224	; 0xe0
 8006244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006246:	2302      	movs	r3, #2
 8006248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800624a:	2301      	movs	r3, #1
 800624c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800624e:	2303      	movs	r3, #3
 8006250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006252:	2305      	movs	r3, #5
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006256:	f107 0314 	add.w	r3, r7, #20
 800625a:	4619      	mov	r1, r3
 800625c:	4805      	ldr	r0, [pc, #20]	; (8006274 <HAL_SPI_MspInit+0x8c>)
 800625e:	f000 ffc3 	bl	80071e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006262:	bf00      	nop
 8006264:	3728      	adds	r7, #40	; 0x28
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40013000 	.word	0x40013000
 8006270:	40023800 	.word	0x40023800
 8006274:	40020000 	.word	0x40020000

08006278 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	; 0x28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006280:	f107 0314 	add.w	r3, r7, #20
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	609a      	str	r2, [r3, #8]
 800628c:	60da      	str	r2, [r3, #12]
 800628e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006298:	d133      	bne.n	8006302 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800629a:	2300      	movs	r3, #0
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	4b1b      	ldr	r3, [pc, #108]	; (800630c <HAL_TIM_Encoder_MspInit+0x94>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	4a1a      	ldr	r2, [pc, #104]	; (800630c <HAL_TIM_Encoder_MspInit+0x94>)
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	6413      	str	r3, [r2, #64]	; 0x40
 80062aa:	4b18      	ldr	r3, [pc, #96]	; (800630c <HAL_TIM_Encoder_MspInit+0x94>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	613b      	str	r3, [r7, #16]
 80062b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	4b14      	ldr	r3, [pc, #80]	; (800630c <HAL_TIM_Encoder_MspInit+0x94>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	4a13      	ldr	r2, [pc, #76]	; (800630c <HAL_TIM_Encoder_MspInit+0x94>)
 80062c0:	f043 0301 	orr.w	r3, r3, #1
 80062c4:	6313      	str	r3, [r2, #48]	; 0x30
 80062c6:	4b11      	ldr	r3, [pc, #68]	; (800630c <HAL_TIM_Encoder_MspInit+0x94>)
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80062d2:	2303      	movs	r3, #3
 80062d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d6:	2302      	movs	r3, #2
 80062d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062de:	2300      	movs	r3, #0
 80062e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80062e2:	2301      	movs	r3, #1
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062e6:	f107 0314 	add.w	r3, r7, #20
 80062ea:	4619      	mov	r1, r3
 80062ec:	4808      	ldr	r0, [pc, #32]	; (8006310 <HAL_TIM_Encoder_MspInit+0x98>)
 80062ee:	f000 ff7b 	bl	80071e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80062f2:	2200      	movs	r2, #0
 80062f4:	2100      	movs	r1, #0
 80062f6:	201c      	movs	r0, #28
 80062f8:	f000 fb3d 	bl	8006976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80062fc:	201c      	movs	r0, #28
 80062fe:	f000 fb56 	bl	80069ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006302:	bf00      	nop
 8006304:	3728      	adds	r7, #40	; 0x28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40023800 	.word	0x40023800
 8006310:	40020000 	.word	0x40020000

08006314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a0e      	ldr	r2, [pc, #56]	; (800635c <HAL_TIM_Base_MspInit+0x48>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d115      	bne.n	8006352 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	4b0d      	ldr	r3, [pc, #52]	; (8006360 <HAL_TIM_Base_MspInit+0x4c>)
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	4a0c      	ldr	r2, [pc, #48]	; (8006360 <HAL_TIM_Base_MspInit+0x4c>)
 8006330:	f043 0302 	orr.w	r3, r3, #2
 8006334:	6413      	str	r3, [r2, #64]	; 0x40
 8006336:	4b0a      	ldr	r3, [pc, #40]	; (8006360 <HAL_TIM_Base_MspInit+0x4c>)
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006342:	2200      	movs	r2, #0
 8006344:	2100      	movs	r1, #0
 8006346:	201d      	movs	r0, #29
 8006348:	f000 fb15 	bl	8006976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800634c:	201d      	movs	r0, #29
 800634e:	f000 fb2e 	bl	80069ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	40000400 	.word	0x40000400
 8006360:	40023800 	.word	0x40023800

08006364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	; 0x28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800636c:	f107 0314 	add.w	r3, r7, #20
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	609a      	str	r2, [r3, #8]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a34      	ldr	r2, [pc, #208]	; (8006454 <HAL_UART_MspInit+0xf0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d161      	bne.n	800644a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	4b33      	ldr	r3, [pc, #204]	; (8006458 <HAL_UART_MspInit+0xf4>)
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	4a32      	ldr	r2, [pc, #200]	; (8006458 <HAL_UART_MspInit+0xf4>)
 8006390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006394:	6413      	str	r3, [r2, #64]	; 0x40
 8006396:	4b30      	ldr	r3, [pc, #192]	; (8006458 <HAL_UART_MspInit+0xf4>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	4b2c      	ldr	r3, [pc, #176]	; (8006458 <HAL_UART_MspInit+0xf4>)
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	4a2b      	ldr	r2, [pc, #172]	; (8006458 <HAL_UART_MspInit+0xf4>)
 80063ac:	f043 0301 	orr.w	r3, r3, #1
 80063b0:	6313      	str	r3, [r2, #48]	; 0x30
 80063b2:	4b29      	ldr	r3, [pc, #164]	; (8006458 <HAL_UART_MspInit+0xf4>)
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80063be:	230c      	movs	r3, #12
 80063c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063c2:	2302      	movs	r3, #2
 80063c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063ca:	2303      	movs	r3, #3
 80063cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063ce:	2307      	movs	r3, #7
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063d2:	f107 0314 	add.w	r3, r7, #20
 80063d6:	4619      	mov	r1, r3
 80063d8:	4820      	ldr	r0, [pc, #128]	; (800645c <HAL_UART_MspInit+0xf8>)
 80063da:	f000 ff05 	bl	80071e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80063de:	4b20      	ldr	r3, [pc, #128]	; (8006460 <HAL_UART_MspInit+0xfc>)
 80063e0:	4a20      	ldr	r2, [pc, #128]	; (8006464 <HAL_UART_MspInit+0x100>)
 80063e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80063e4:	4b1e      	ldr	r3, [pc, #120]	; (8006460 <HAL_UART_MspInit+0xfc>)
 80063e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063ec:	4b1c      	ldr	r3, [pc, #112]	; (8006460 <HAL_UART_MspInit+0xfc>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063f2:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <HAL_UART_MspInit+0xfc>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063f8:	4b19      	ldr	r3, [pc, #100]	; (8006460 <HAL_UART_MspInit+0xfc>)
 80063fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006400:	4b17      	ldr	r3, [pc, #92]	; (8006460 <HAL_UART_MspInit+0xfc>)
 8006402:	2200      	movs	r2, #0
 8006404:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006406:	4b16      	ldr	r3, [pc, #88]	; (8006460 <HAL_UART_MspInit+0xfc>)
 8006408:	2200      	movs	r2, #0
 800640a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800640c:	4b14      	ldr	r3, [pc, #80]	; (8006460 <HAL_UART_MspInit+0xfc>)
 800640e:	2200      	movs	r2, #0
 8006410:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006412:	4b13      	ldr	r3, [pc, #76]	; (8006460 <HAL_UART_MspInit+0xfc>)
 8006414:	2200      	movs	r2, #0
 8006416:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <HAL_UART_MspInit+0xfc>)
 800641a:	2200      	movs	r2, #0
 800641c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800641e:	4810      	ldr	r0, [pc, #64]	; (8006460 <HAL_UART_MspInit+0xfc>)
 8006420:	f000 fae0 	bl	80069e4 <HAL_DMA_Init>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800642a:	f7ff fe9d 	bl	8006168 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a0b      	ldr	r2, [pc, #44]	; (8006460 <HAL_UART_MspInit+0xfc>)
 8006432:	639a      	str	r2, [r3, #56]	; 0x38
 8006434:	4a0a      	ldr	r2, [pc, #40]	; (8006460 <HAL_UART_MspInit+0xfc>)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800643a:	2200      	movs	r2, #0
 800643c:	2100      	movs	r1, #0
 800643e:	2026      	movs	r0, #38	; 0x26
 8006440:	f000 fa99 	bl	8006976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006444:	2026      	movs	r0, #38	; 0x26
 8006446:	f000 fab2 	bl	80069ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800644a:	bf00      	nop
 800644c:	3728      	adds	r7, #40	; 0x28
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40004400 	.word	0x40004400
 8006458:	40023800 	.word	0x40023800
 800645c:	40020000 	.word	0x40020000
 8006460:	200007a8 	.word	0x200007a8
 8006464:	40026088 	.word	0x40026088

08006468 <SDTimerHandler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1,Timer2;

void SDTimerHandler(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
	if(Timer1>0)
 800646c:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <SDTimerHandler+0x40>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d006      	beq.n	8006484 <SDTimerHandler+0x1c>
		Timer1--;
 8006476:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <SDTimerHandler+0x40>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	b2db      	uxtb	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b2da      	uxtb	r2, r3
 8006480:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <SDTimerHandler+0x40>)
 8006482:	701a      	strb	r2, [r3, #0]

	if(Timer2>0)
 8006484:	4b09      	ldr	r3, [pc, #36]	; (80064ac <SDTimerHandler+0x44>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d006      	beq.n	800649c <SDTimerHandler+0x34>
		Timer2--;
 800648e:	4b07      	ldr	r3, [pc, #28]	; (80064ac <SDTimerHandler+0x44>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	3b01      	subs	r3, #1
 8006496:	b2da      	uxtb	r2, r3
 8006498:	4b04      	ldr	r3, [pc, #16]	; (80064ac <SDTimerHandler+0x44>)
 800649a:	701a      	strb	r2, [r3, #0]
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000899 	.word	0x20000899
 80064ac:	2000089a 	.word	0x2000089a

080064b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80064b4:	e7fe      	b.n	80064b4 <NMI_Handler+0x4>

080064b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064b6:	b480      	push	{r7}
 80064b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064ba:	e7fe      	b.n	80064ba <HardFault_Handler+0x4>

080064bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064c0:	e7fe      	b.n	80064c0 <MemManage_Handler+0x4>

080064c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064c2:	b480      	push	{r7}
 80064c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064c6:	e7fe      	b.n	80064c6 <BusFault_Handler+0x4>

080064c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064cc:	e7fe      	b.n	80064cc <UsageFault_Handler+0x4>

080064ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064ce:	b480      	push	{r7}
 80064d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064d2:	bf00      	nop
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064e0:	bf00      	nop
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064ea:	b480      	push	{r7}
 80064ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064ee:	bf00      	nop
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80064fc:	4b0a      	ldr	r3, [pc, #40]	; (8006528 <SysTick_Handler+0x30>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	3301      	adds	r3, #1
 8006504:	b2da      	uxtb	r2, r3
 8006506:	4b08      	ldr	r3, [pc, #32]	; (8006528 <SysTick_Handler+0x30>)
 8006508:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 800650a:	4b07      	ldr	r3, [pc, #28]	; (8006528 <SysTick_Handler+0x30>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b09      	cmp	r3, #9
 8006512:	d904      	bls.n	800651e <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8006514:	4b04      	ldr	r3, [pc, #16]	; (8006528 <SysTick_Handler+0x30>)
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
		SDTimerHandler();
 800651a:	f7ff ffa5 	bl	8006468 <SDTimerHandler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800651e:	f000 f90b 	bl	8006738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006522:	bf00      	nop
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20000898 	.word	0x20000898

0800652c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_MENU_Pin);
 8006530:	2010      	movs	r0, #16
 8006532:	f001 f811 	bl	8007558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006536:	bf00      	nop
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006540:	4802      	ldr	r0, [pc, #8]	; (800654c <DMA1_Stream5_IRQHandler+0x10>)
 8006542:	f000 fbe7 	bl	8006d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006546:	bf00      	nop
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	200007a8 	.word	0x200007a8

08006550 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_AVANCA_Pin);
 8006554:	2020      	movs	r0, #32
 8006556:	f000 ffff 	bl	8007558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_SELECT_Pin);
 800655a:	2040      	movs	r0, #64	; 0x40
 800655c:	f000 fffc 	bl	8007558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_STOP_Pin);
 8006560:	2080      	movs	r0, #128	; 0x80
 8006562:	f000 fff9 	bl	8007558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_INSERT_Pin);
 8006566:	f44f 7080 	mov.w	r0, #256	; 0x100
 800656a:	f000 fff5 	bl	8007558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006578:	4802      	ldr	r0, [pc, #8]	; (8006584 <TIM2_IRQHandler+0x10>)
 800657a:	f002 fb7e 	bl	8008c7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800657e:	bf00      	nop
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	200006d4 	.word	0x200006d4

08006588 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800658c:	4802      	ldr	r0, [pc, #8]	; (8006598 <TIM3_IRQHandler+0x10>)
 800658e:	f002 fb74 	bl	8008c7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006592:	bf00      	nop
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	2000071c 	.word	0x2000071c

0800659c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80065a0:	4802      	ldr	r0, [pc, #8]	; (80065ac <USART2_IRQHandler+0x10>)
 80065a2:	f002 ffcb 	bl	800953c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80065a6:	bf00      	nop
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000764 	.word	0x20000764

080065b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065b8:	4a14      	ldr	r2, [pc, #80]	; (800660c <_sbrk+0x5c>)
 80065ba:	4b15      	ldr	r3, [pc, #84]	; (8006610 <_sbrk+0x60>)
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065c4:	4b13      	ldr	r3, [pc, #76]	; (8006614 <_sbrk+0x64>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <_sbrk+0x64>)
 80065ce:	4a12      	ldr	r2, [pc, #72]	; (8006618 <_sbrk+0x68>)
 80065d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065d2:	4b10      	ldr	r3, [pc, #64]	; (8006614 <_sbrk+0x64>)
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4413      	add	r3, r2
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d207      	bcs.n	80065f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065e0:	f007 f9b8 	bl	800d954 <__errno>
 80065e4:	4603      	mov	r3, r0
 80065e6:	220c      	movs	r2, #12
 80065e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065ea:	f04f 33ff 	mov.w	r3, #4294967295
 80065ee:	e009      	b.n	8006604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065f0:	4b08      	ldr	r3, [pc, #32]	; (8006614 <_sbrk+0x64>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065f6:	4b07      	ldr	r3, [pc, #28]	; (8006614 <_sbrk+0x64>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4413      	add	r3, r2
 80065fe:	4a05      	ldr	r2, [pc, #20]	; (8006614 <_sbrk+0x64>)
 8006600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006602:	68fb      	ldr	r3, [r7, #12]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20020000 	.word	0x20020000
 8006610:	00000400 	.word	0x00000400
 8006614:	200008a0 	.word	0x200008a0
 8006618:	20000b48 	.word	0x20000b48

0800661c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <SystemInit+0x20>)
 8006622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006626:	4a05      	ldr	r2, [pc, #20]	; (800663c <SystemInit+0x20>)
 8006628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800662c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006630:	bf00      	nop
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	e000ed00 	.word	0xe000ed00

08006640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006678 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006644:	480d      	ldr	r0, [pc, #52]	; (800667c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006646:	490e      	ldr	r1, [pc, #56]	; (8006680 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006648:	4a0e      	ldr	r2, [pc, #56]	; (8006684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800664a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800664c:	e002      	b.n	8006654 <LoopCopyDataInit>

0800664e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800664e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006652:	3304      	adds	r3, #4

08006654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006658:	d3f9      	bcc.n	800664e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800665a:	4a0b      	ldr	r2, [pc, #44]	; (8006688 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800665c:	4c0b      	ldr	r4, [pc, #44]	; (800668c <LoopFillZerobss+0x26>)
  movs r3, #0
 800665e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006660:	e001      	b.n	8006666 <LoopFillZerobss>

08006662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006664:	3204      	adds	r2, #4

08006666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006668:	d3fb      	bcc.n	8006662 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800666a:	f7ff ffd7 	bl	800661c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800666e:	f007 f977 	bl	800d960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006672:	f7ff f877 	bl	8005764 <main>
  bx  lr    
 8006676:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800667c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006680:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006684:	08010b9c 	.word	0x08010b9c
  ldr r2, =_sbss
 8006688:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800668c:	20000b48 	.word	0x20000b48

08006690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006690:	e7fe      	b.n	8006690 <ADC_IRQHandler>
	...

08006694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006698:	4b0e      	ldr	r3, [pc, #56]	; (80066d4 <HAL_Init+0x40>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a0d      	ldr	r2, [pc, #52]	; (80066d4 <HAL_Init+0x40>)
 800669e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <HAL_Init+0x40>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a0a      	ldr	r2, [pc, #40]	; (80066d4 <HAL_Init+0x40>)
 80066aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066b0:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <HAL_Init+0x40>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a07      	ldr	r2, [pc, #28]	; (80066d4 <HAL_Init+0x40>)
 80066b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066bc:	2003      	movs	r0, #3
 80066be:	f000 f94f 	bl	8006960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80066c2:	200f      	movs	r0, #15
 80066c4:	f000 f808 	bl	80066d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80066c8:	f7ff fd66 	bl	8006198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	40023c00 	.word	0x40023c00

080066d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80066e0:	4b12      	ldr	r3, [pc, #72]	; (800672c <HAL_InitTick+0x54>)
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	4b12      	ldr	r3, [pc, #72]	; (8006730 <HAL_InitTick+0x58>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	4619      	mov	r1, r3
 80066ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80066f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 f967 	bl	80069ca <HAL_SYSTICK_Config>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e00e      	b.n	8006724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b0f      	cmp	r3, #15
 800670a:	d80a      	bhi.n	8006722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800670c:	2200      	movs	r2, #0
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	f000 f92f 	bl	8006976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006718:	4a06      	ldr	r2, [pc, #24]	; (8006734 <HAL_InitTick+0x5c>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	e000      	b.n	8006724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	200000f0 	.word	0x200000f0
 8006730:	200000f8 	.word	0x200000f8
 8006734:	200000f4 	.word	0x200000f4

08006738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <HAL_IncTick+0x20>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <HAL_IncTick+0x24>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4413      	add	r3, r2
 8006748:	4a04      	ldr	r2, [pc, #16]	; (800675c <HAL_IncTick+0x24>)
 800674a:	6013      	str	r3, [r2, #0]
}
 800674c:	bf00      	nop
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	200000f8 	.word	0x200000f8
 800675c:	200008a4 	.word	0x200008a4

08006760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return uwTick;
 8006764:	4b03      	ldr	r3, [pc, #12]	; (8006774 <HAL_GetTick+0x14>)
 8006766:	681b      	ldr	r3, [r3, #0]
}
 8006768:	4618      	mov	r0, r3
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	200008a4 	.word	0x200008a4

08006778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006780:	f7ff ffee 	bl	8006760 <HAL_GetTick>
 8006784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006790:	d005      	beq.n	800679e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006792:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <HAL_Delay+0x44>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800679e:	bf00      	nop
 80067a0:	f7ff ffde 	bl	8006760 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d8f7      	bhi.n	80067a0 <HAL_Delay+0x28>
  {
  }
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	200000f8 	.word	0x200000f8

080067c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067d0:	4b0c      	ldr	r3, [pc, #48]	; (8006804 <__NVIC_SetPriorityGrouping+0x44>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067dc:	4013      	ands	r3, r2
 80067de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80067ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067f2:	4a04      	ldr	r2, [pc, #16]	; (8006804 <__NVIC_SetPriorityGrouping+0x44>)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	60d3      	str	r3, [r2, #12]
}
 80067f8:	bf00      	nop
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	e000ed00 	.word	0xe000ed00

08006808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800680c:	4b04      	ldr	r3, [pc, #16]	; (8006820 <__NVIC_GetPriorityGrouping+0x18>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	0a1b      	lsrs	r3, r3, #8
 8006812:	f003 0307 	and.w	r3, r3, #7
}
 8006816:	4618      	mov	r0, r3
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	e000ed00 	.word	0xe000ed00

08006824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	4603      	mov	r3, r0
 800682c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800682e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006832:	2b00      	cmp	r3, #0
 8006834:	db0b      	blt.n	800684e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	f003 021f 	and.w	r2, r3, #31
 800683c:	4907      	ldr	r1, [pc, #28]	; (800685c <__NVIC_EnableIRQ+0x38>)
 800683e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006842:	095b      	lsrs	r3, r3, #5
 8006844:	2001      	movs	r0, #1
 8006846:	fa00 f202 	lsl.w	r2, r0, r2
 800684a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	e000e100 	.word	0xe000e100

08006860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	6039      	str	r1, [r7, #0]
 800686a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800686c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006870:	2b00      	cmp	r3, #0
 8006872:	db0a      	blt.n	800688a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	b2da      	uxtb	r2, r3
 8006878:	490c      	ldr	r1, [pc, #48]	; (80068ac <__NVIC_SetPriority+0x4c>)
 800687a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800687e:	0112      	lsls	r2, r2, #4
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	440b      	add	r3, r1
 8006884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006888:	e00a      	b.n	80068a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	b2da      	uxtb	r2, r3
 800688e:	4908      	ldr	r1, [pc, #32]	; (80068b0 <__NVIC_SetPriority+0x50>)
 8006890:	79fb      	ldrb	r3, [r7, #7]
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	3b04      	subs	r3, #4
 8006898:	0112      	lsls	r2, r2, #4
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	440b      	add	r3, r1
 800689e:	761a      	strb	r2, [r3, #24]
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	e000e100 	.word	0xe000e100
 80068b0:	e000ed00 	.word	0xe000ed00

080068b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b089      	sub	sp, #36	; 0x24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f003 0307 	and.w	r3, r3, #7
 80068c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	f1c3 0307 	rsb	r3, r3, #7
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	bf28      	it	cs
 80068d2:	2304      	movcs	r3, #4
 80068d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	3304      	adds	r3, #4
 80068da:	2b06      	cmp	r3, #6
 80068dc:	d902      	bls.n	80068e4 <NVIC_EncodePriority+0x30>
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	3b03      	subs	r3, #3
 80068e2:	e000      	b.n	80068e6 <NVIC_EncodePriority+0x32>
 80068e4:	2300      	movs	r3, #0
 80068e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068e8:	f04f 32ff 	mov.w	r2, #4294967295
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	43da      	mvns	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	401a      	ands	r2, r3
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068fc:	f04f 31ff 	mov.w	r1, #4294967295
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	fa01 f303 	lsl.w	r3, r1, r3
 8006906:	43d9      	mvns	r1, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800690c:	4313      	orrs	r3, r2
         );
}
 800690e:	4618      	mov	r0, r3
 8006910:	3724      	adds	r7, #36	; 0x24
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
	...

0800691c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3b01      	subs	r3, #1
 8006928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800692c:	d301      	bcc.n	8006932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800692e:	2301      	movs	r3, #1
 8006930:	e00f      	b.n	8006952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006932:	4a0a      	ldr	r2, [pc, #40]	; (800695c <SysTick_Config+0x40>)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3b01      	subs	r3, #1
 8006938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800693a:	210f      	movs	r1, #15
 800693c:	f04f 30ff 	mov.w	r0, #4294967295
 8006940:	f7ff ff8e 	bl	8006860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006944:	4b05      	ldr	r3, [pc, #20]	; (800695c <SysTick_Config+0x40>)
 8006946:	2200      	movs	r2, #0
 8006948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800694a:	4b04      	ldr	r3, [pc, #16]	; (800695c <SysTick_Config+0x40>)
 800694c:	2207      	movs	r2, #7
 800694e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	e000e010 	.word	0xe000e010

08006960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff ff29 	bl	80067c0 <__NVIC_SetPriorityGrouping>
}
 800696e:	bf00      	nop
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006976:	b580      	push	{r7, lr}
 8006978:	b086      	sub	sp, #24
 800697a:	af00      	add	r7, sp, #0
 800697c:	4603      	mov	r3, r0
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	607a      	str	r2, [r7, #4]
 8006982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006988:	f7ff ff3e 	bl	8006808 <__NVIC_GetPriorityGrouping>
 800698c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	6978      	ldr	r0, [r7, #20]
 8006994:	f7ff ff8e 	bl	80068b4 <NVIC_EncodePriority>
 8006998:	4602      	mov	r2, r0
 800699a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800699e:	4611      	mov	r1, r2
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff ff5d 	bl	8006860 <__NVIC_SetPriority>
}
 80069a6:	bf00      	nop
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	4603      	mov	r3, r0
 80069b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff ff31 	bl	8006824 <__NVIC_EnableIRQ>
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff ffa2 	bl	800691c <SysTick_Config>
 80069d8:	4603      	mov	r3, r0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80069f0:	f7ff feb6 	bl	8006760 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e099      	b.n	8006b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0201 	bic.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a20:	e00f      	b.n	8006a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a22:	f7ff fe9d 	bl	8006760 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	d908      	bls.n	8006a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2220      	movs	r2, #32
 8006a34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2203      	movs	r2, #3
 8006a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e078      	b.n	8006b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e8      	bne.n	8006a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4b38      	ldr	r3, [pc, #224]	; (8006b3c <HAL_DMA_Init+0x158>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	d107      	bne.n	8006aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f023 0307 	bic.w	r3, r3, #7
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d117      	bne.n	8006b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00e      	beq.n	8006b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fb01 	bl	80070f0 <DMA_CheckFifoParam>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d008      	beq.n	8006b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2240      	movs	r2, #64	; 0x40
 8006af8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b02:	2301      	movs	r3, #1
 8006b04:	e016      	b.n	8006b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fab8 	bl	8007084 <DMA_CalcBaseAndBitshift>
 8006b14:	4603      	mov	r3, r0
 8006b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b1c:	223f      	movs	r2, #63	; 0x3f
 8006b1e:	409a      	lsls	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	f010803f 	.word	0xf010803f

08006b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <HAL_DMA_Start_IT+0x26>
 8006b62:	2302      	movs	r3, #2
 8006b64:	e040      	b.n	8006be8 <HAL_DMA_Start_IT+0xa8>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d12f      	bne.n	8006bda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fa4a 	bl	8007028 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b98:	223f      	movs	r2, #63	; 0x3f
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0216 	orr.w	r2, r2, #22
 8006bae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0208 	orr.w	r2, r2, #8
 8006bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0201 	orr.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	e005      	b.n	8006be6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
 8006be4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006bfe:	f7ff fdaf 	bl	8006760 <HAL_GetTick>
 8006c02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d008      	beq.n	8006c22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2280      	movs	r2, #128	; 0x80
 8006c14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e052      	b.n	8006cc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0216 	bic.w	r2, r2, #22
 8006c30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695a      	ldr	r2, [r3, #20]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d103      	bne.n	8006c52 <HAL_DMA_Abort+0x62>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0208 	bic.w	r2, r2, #8
 8006c60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c72:	e013      	b.n	8006c9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c74:	f7ff fd74 	bl	8006760 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b05      	cmp	r3, #5
 8006c80:	d90c      	bls.n	8006c9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2203      	movs	r2, #3
 8006c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e015      	b.n	8006cc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e4      	bne.n	8006c74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cae:	223f      	movs	r2, #63	; 0x3f
 8006cb0:	409a      	lsls	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d004      	beq.n	8006cee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2280      	movs	r2, #128	; 0x80
 8006ce8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e00c      	b.n	8006d08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2205      	movs	r2, #5
 8006cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d20:	4b8e      	ldr	r3, [pc, #568]	; (8006f5c <HAL_DMA_IRQHandler+0x248>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a8e      	ldr	r2, [pc, #568]	; (8006f60 <HAL_DMA_IRQHandler+0x24c>)
 8006d26:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2a:	0a9b      	lsrs	r3, r3, #10
 8006d2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3e:	2208      	movs	r2, #8
 8006d40:	409a      	lsls	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01a      	beq.n	8006d80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d013      	beq.n	8006d80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0204 	bic.w	r2, r2, #4
 8006d66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	409a      	lsls	r2, r3
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	f043 0201 	orr.w	r2, r3, #1
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d84:	2201      	movs	r2, #1
 8006d86:	409a      	lsls	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d012      	beq.n	8006db6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da2:	2201      	movs	r2, #1
 8006da4:	409a      	lsls	r2, r3
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dae:	f043 0202 	orr.w	r2, r3, #2
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dba:	2204      	movs	r2, #4
 8006dbc:	409a      	lsls	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d012      	beq.n	8006dec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd8:	2204      	movs	r2, #4
 8006dda:	409a      	lsls	r2, r3
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de4:	f043 0204 	orr.w	r2, r3, #4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df0:	2210      	movs	r2, #16
 8006df2:	409a      	lsls	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4013      	ands	r3, r2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d043      	beq.n	8006e84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d03c      	beq.n	8006e84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0e:	2210      	movs	r2, #16
 8006e10:	409a      	lsls	r2, r3
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d018      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d108      	bne.n	8006e44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d024      	beq.n	8006e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
 8006e42:	e01f      	b.n	8006e84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01b      	beq.n	8006e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
 8006e54:	e016      	b.n	8006e84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d107      	bne.n	8006e74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0208 	bic.w	r2, r2, #8
 8006e72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e88:	2220      	movs	r2, #32
 8006e8a:	409a      	lsls	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 808f 	beq.w	8006fb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8087 	beq.w	8006fb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eaa:	2220      	movs	r2, #32
 8006eac:	409a      	lsls	r2, r3
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	d136      	bne.n	8006f2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0216 	bic.w	r2, r2, #22
 8006ecc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	695a      	ldr	r2, [r3, #20]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006edc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d103      	bne.n	8006eee <HAL_DMA_IRQHandler+0x1da>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0208 	bic.w	r2, r2, #8
 8006efc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f02:	223f      	movs	r2, #63	; 0x3f
 8006f04:	409a      	lsls	r2, r3
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d07e      	beq.n	8007020 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
        }
        return;
 8006f2a:	e079      	b.n	8007020 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d01d      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10d      	bne.n	8006f64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d031      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	4798      	blx	r3
 8006f58:	e02c      	b.n	8006fb4 <HAL_DMA_IRQHandler+0x2a0>
 8006f5a:	bf00      	nop
 8006f5c:	200000f0 	.word	0x200000f0
 8006f60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d023      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
 8006f74:	e01e      	b.n	8006fb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10f      	bne.n	8006fa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0210 	bic.w	r2, r2, #16
 8006f92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d032      	beq.n	8007022 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d022      	beq.n	800700e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2205      	movs	r2, #5
 8006fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0201 	bic.w	r2, r2, #1
 8006fde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d307      	bcc.n	8006ffc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1f2      	bne.n	8006fe0 <HAL_DMA_IRQHandler+0x2cc>
 8006ffa:	e000      	b.n	8006ffe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006ffc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
 800701e:	e000      	b.n	8007022 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007020:	bf00      	nop
    }
  }
}
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007044:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d108      	bne.n	8007068 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007066:	e007      	b.n	8007078 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	60da      	str	r2, [r3, #12]
}
 8007078:	bf00      	nop
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	3b10      	subs	r3, #16
 8007094:	4a14      	ldr	r2, [pc, #80]	; (80070e8 <DMA_CalcBaseAndBitshift+0x64>)
 8007096:	fba2 2303 	umull	r2, r3, r2, r3
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800709e:	4a13      	ldr	r2, [pc, #76]	; (80070ec <DMA_CalcBaseAndBitshift+0x68>)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d909      	bls.n	80070c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80070ba:	f023 0303 	bic.w	r3, r3, #3
 80070be:	1d1a      	adds	r2, r3, #4
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	659a      	str	r2, [r3, #88]	; 0x58
 80070c4:	e007      	b.n	80070d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80070ce:	f023 0303 	bic.w	r3, r3, #3
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	aaaaaaab 	.word	0xaaaaaaab
 80070ec:	08010278 	.word	0x08010278

080070f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007100:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d11f      	bne.n	800714a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b03      	cmp	r3, #3
 800710e:	d856      	bhi.n	80071be <DMA_CheckFifoParam+0xce>
 8007110:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <DMA_CheckFifoParam+0x28>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	08007129 	.word	0x08007129
 800711c:	0800713b 	.word	0x0800713b
 8007120:	08007129 	.word	0x08007129
 8007124:	080071bf 	.word	0x080071bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d046      	beq.n	80071c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007138:	e043      	b.n	80071c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007142:	d140      	bne.n	80071c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007148:	e03d      	b.n	80071c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007152:	d121      	bne.n	8007198 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b03      	cmp	r3, #3
 8007158:	d837      	bhi.n	80071ca <DMA_CheckFifoParam+0xda>
 800715a:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <DMA_CheckFifoParam+0x70>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	08007171 	.word	0x08007171
 8007164:	08007177 	.word	0x08007177
 8007168:	08007171 	.word	0x08007171
 800716c:	08007189 	.word	0x08007189
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	73fb      	strb	r3, [r7, #15]
      break;
 8007174:	e030      	b.n	80071d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d025      	beq.n	80071ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007186:	e022      	b.n	80071ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007190:	d11f      	bne.n	80071d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007196:	e01c      	b.n	80071d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d903      	bls.n	80071a6 <DMA_CheckFifoParam+0xb6>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d003      	beq.n	80071ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80071a4:	e018      	b.n	80071d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	73fb      	strb	r3, [r7, #15]
      break;
 80071aa:	e015      	b.n	80071d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00e      	beq.n	80071d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
      break;
 80071bc:	e00b      	b.n	80071d6 <DMA_CheckFifoParam+0xe6>
      break;
 80071be:	bf00      	nop
 80071c0:	e00a      	b.n	80071d8 <DMA_CheckFifoParam+0xe8>
      break;
 80071c2:	bf00      	nop
 80071c4:	e008      	b.n	80071d8 <DMA_CheckFifoParam+0xe8>
      break;
 80071c6:	bf00      	nop
 80071c8:	e006      	b.n	80071d8 <DMA_CheckFifoParam+0xe8>
      break;
 80071ca:	bf00      	nop
 80071cc:	e004      	b.n	80071d8 <DMA_CheckFifoParam+0xe8>
      break;
 80071ce:	bf00      	nop
 80071d0:	e002      	b.n	80071d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80071d2:	bf00      	nop
 80071d4:	e000      	b.n	80071d8 <DMA_CheckFifoParam+0xe8>
      break;
 80071d6:	bf00      	nop
    }
  } 
  
  return status; 
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop

080071e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b089      	sub	sp, #36	; 0x24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071fe:	2300      	movs	r3, #0
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	e159      	b.n	80074b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007204:	2201      	movs	r2, #1
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	fa02 f303 	lsl.w	r3, r2, r3
 800720c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4013      	ands	r3, r2
 8007216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	429a      	cmp	r2, r3
 800721e:	f040 8148 	bne.w	80074b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	2b01      	cmp	r3, #1
 800722c:	d005      	beq.n	800723a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007236:	2b02      	cmp	r3, #2
 8007238:	d130      	bne.n	800729c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	2203      	movs	r2, #3
 8007246:	fa02 f303 	lsl.w	r3, r2, r3
 800724a:	43db      	mvns	r3, r3
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	4013      	ands	r3, r2
 8007250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	fa02 f303 	lsl.w	r3, r2, r3
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	4313      	orrs	r3, r2
 8007262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007270:	2201      	movs	r2, #1
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	fa02 f303 	lsl.w	r3, r2, r3
 8007278:	43db      	mvns	r3, r3
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	4013      	ands	r3, r2
 800727e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	091b      	lsrs	r3, r3, #4
 8007286:	f003 0201 	and.w	r2, r3, #1
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	fa02 f303 	lsl.w	r3, r2, r3
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	4313      	orrs	r3, r2
 8007294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f003 0303 	and.w	r3, r3, #3
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d017      	beq.n	80072d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	2203      	movs	r2, #3
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	43db      	mvns	r3, r3
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	4013      	ands	r3, r2
 80072be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	fa02 f303 	lsl.w	r3, r2, r3
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d123      	bne.n	800732c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	08da      	lsrs	r2, r3, #3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3208      	adds	r2, #8
 80072ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	220f      	movs	r2, #15
 80072fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007300:	43db      	mvns	r3, r3
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	4013      	ands	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	fa02 f303 	lsl.w	r3, r2, r3
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	4313      	orrs	r3, r2
 800731c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	08da      	lsrs	r2, r3, #3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3208      	adds	r2, #8
 8007326:	69b9      	ldr	r1, [r7, #24]
 8007328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	2203      	movs	r2, #3
 8007338:	fa02 f303 	lsl.w	r3, r2, r3
 800733c:	43db      	mvns	r3, r3
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	4013      	ands	r3, r2
 8007342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f003 0203 	and.w	r2, r3, #3
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4313      	orrs	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 80a2 	beq.w	80074b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	4b57      	ldr	r3, [pc, #348]	; (80074d0 <HAL_GPIO_Init+0x2e8>)
 8007374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007376:	4a56      	ldr	r2, [pc, #344]	; (80074d0 <HAL_GPIO_Init+0x2e8>)
 8007378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800737c:	6453      	str	r3, [r2, #68]	; 0x44
 800737e:	4b54      	ldr	r3, [pc, #336]	; (80074d0 <HAL_GPIO_Init+0x2e8>)
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800738a:	4a52      	ldr	r2, [pc, #328]	; (80074d4 <HAL_GPIO_Init+0x2ec>)
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	089b      	lsrs	r3, r3, #2
 8007390:	3302      	adds	r3, #2
 8007392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f003 0303 	and.w	r3, r3, #3
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	220f      	movs	r2, #15
 80073a2:	fa02 f303 	lsl.w	r3, r2, r3
 80073a6:	43db      	mvns	r3, r3
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	4013      	ands	r3, r2
 80073ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a49      	ldr	r2, [pc, #292]	; (80074d8 <HAL_GPIO_Init+0x2f0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d019      	beq.n	80073ea <HAL_GPIO_Init+0x202>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a48      	ldr	r2, [pc, #288]	; (80074dc <HAL_GPIO_Init+0x2f4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d013      	beq.n	80073e6 <HAL_GPIO_Init+0x1fe>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a47      	ldr	r2, [pc, #284]	; (80074e0 <HAL_GPIO_Init+0x2f8>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00d      	beq.n	80073e2 <HAL_GPIO_Init+0x1fa>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a46      	ldr	r2, [pc, #280]	; (80074e4 <HAL_GPIO_Init+0x2fc>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d007      	beq.n	80073de <HAL_GPIO_Init+0x1f6>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a45      	ldr	r2, [pc, #276]	; (80074e8 <HAL_GPIO_Init+0x300>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d101      	bne.n	80073da <HAL_GPIO_Init+0x1f2>
 80073d6:	2304      	movs	r3, #4
 80073d8:	e008      	b.n	80073ec <HAL_GPIO_Init+0x204>
 80073da:	2307      	movs	r3, #7
 80073dc:	e006      	b.n	80073ec <HAL_GPIO_Init+0x204>
 80073de:	2303      	movs	r3, #3
 80073e0:	e004      	b.n	80073ec <HAL_GPIO_Init+0x204>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e002      	b.n	80073ec <HAL_GPIO_Init+0x204>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e000      	b.n	80073ec <HAL_GPIO_Init+0x204>
 80073ea:	2300      	movs	r3, #0
 80073ec:	69fa      	ldr	r2, [r7, #28]
 80073ee:	f002 0203 	and.w	r2, r2, #3
 80073f2:	0092      	lsls	r2, r2, #2
 80073f4:	4093      	lsls	r3, r2
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073fc:	4935      	ldr	r1, [pc, #212]	; (80074d4 <HAL_GPIO_Init+0x2ec>)
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	089b      	lsrs	r3, r3, #2
 8007402:	3302      	adds	r3, #2
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800740a:	4b38      	ldr	r3, [pc, #224]	; (80074ec <HAL_GPIO_Init+0x304>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	43db      	mvns	r3, r3
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	4013      	ands	r3, r2
 8007418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	4313      	orrs	r3, r2
 800742c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800742e:	4a2f      	ldr	r2, [pc, #188]	; (80074ec <HAL_GPIO_Init+0x304>)
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007434:	4b2d      	ldr	r3, [pc, #180]	; (80074ec <HAL_GPIO_Init+0x304>)
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	43db      	mvns	r3, r3
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	4013      	ands	r3, r2
 8007442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	4313      	orrs	r3, r2
 8007456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007458:	4a24      	ldr	r2, [pc, #144]	; (80074ec <HAL_GPIO_Init+0x304>)
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800745e:	4b23      	ldr	r3, [pc, #140]	; (80074ec <HAL_GPIO_Init+0x304>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	43db      	mvns	r3, r3
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	4013      	ands	r3, r2
 800746c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007482:	4a1a      	ldr	r2, [pc, #104]	; (80074ec <HAL_GPIO_Init+0x304>)
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007488:	4b18      	ldr	r3, [pc, #96]	; (80074ec <HAL_GPIO_Init+0x304>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	43db      	mvns	r3, r3
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	4013      	ands	r3, r2
 8007496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80074ac:	4a0f      	ldr	r2, [pc, #60]	; (80074ec <HAL_GPIO_Init+0x304>)
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	3301      	adds	r3, #1
 80074b6:	61fb      	str	r3, [r7, #28]
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	2b0f      	cmp	r3, #15
 80074bc:	f67f aea2 	bls.w	8007204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	3724      	adds	r7, #36	; 0x24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	40023800 	.word	0x40023800
 80074d4:	40013800 	.word	0x40013800
 80074d8:	40020000 	.word	0x40020000
 80074dc:	40020400 	.word	0x40020400
 80074e0:	40020800 	.word	0x40020800
 80074e4:	40020c00 	.word	0x40020c00
 80074e8:	40021000 	.word	0x40021000
 80074ec:	40013c00 	.word	0x40013c00

080074f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	807b      	strh	r3, [r7, #2]
 80074fc:	4613      	mov	r3, r2
 80074fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007500:	787b      	ldrb	r3, [r7, #1]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007506:	887a      	ldrh	r2, [r7, #2]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800750c:	e003      	b.n	8007516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800750e:	887b      	ldrh	r3, [r7, #2]
 8007510:	041a      	lsls	r2, r3, #16
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	619a      	str	r2, [r3, #24]
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007522:	b480      	push	{r7}
 8007524:	b085      	sub	sp, #20
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007534:	887a      	ldrh	r2, [r7, #2]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4013      	ands	r3, r2
 800753a:	041a      	lsls	r2, r3, #16
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	43d9      	mvns	r1, r3
 8007540:	887b      	ldrh	r3, [r7, #2]
 8007542:	400b      	ands	r3, r1
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	619a      	str	r2, [r3, #24]
}
 800754a:	bf00      	nop
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
	...

08007558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007562:	4b08      	ldr	r3, [pc, #32]	; (8007584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007564:	695a      	ldr	r2, [r3, #20]
 8007566:	88fb      	ldrh	r3, [r7, #6]
 8007568:	4013      	ands	r3, r2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d006      	beq.n	800757c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800756e:	4a05      	ldr	r2, [pc, #20]	; (8007584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fdc2 	bl	8006100 <HAL_GPIO_EXTI_Callback>
  }
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	40013c00 	.word	0x40013c00

08007588 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e267      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d075      	beq.n	8007692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075a6:	4b88      	ldr	r3, [pc, #544]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 030c 	and.w	r3, r3, #12
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d00c      	beq.n	80075cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075b2:	4b85      	ldr	r3, [pc, #532]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	d112      	bne.n	80075e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075be:	4b82      	ldr	r3, [pc, #520]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075ca:	d10b      	bne.n	80075e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075cc:	4b7e      	ldr	r3, [pc, #504]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d05b      	beq.n	8007690 <HAL_RCC_OscConfig+0x108>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d157      	bne.n	8007690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e242      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ec:	d106      	bne.n	80075fc <HAL_RCC_OscConfig+0x74>
 80075ee:	4b76      	ldr	r3, [pc, #472]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a75      	ldr	r2, [pc, #468]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 80075f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	e01d      	b.n	8007638 <HAL_RCC_OscConfig+0xb0>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007604:	d10c      	bne.n	8007620 <HAL_RCC_OscConfig+0x98>
 8007606:	4b70      	ldr	r3, [pc, #448]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a6f      	ldr	r2, [pc, #444]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 800760c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	4b6d      	ldr	r3, [pc, #436]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a6c      	ldr	r2, [pc, #432]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 8007618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	e00b      	b.n	8007638 <HAL_RCC_OscConfig+0xb0>
 8007620:	4b69      	ldr	r3, [pc, #420]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a68      	ldr	r2, [pc, #416]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 8007626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	4b66      	ldr	r3, [pc, #408]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a65      	ldr	r2, [pc, #404]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 8007632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d013      	beq.n	8007668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007640:	f7ff f88e 	bl	8006760 <HAL_GetTick>
 8007644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007646:	e008      	b.n	800765a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007648:	f7ff f88a 	bl	8006760 <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	2b64      	cmp	r3, #100	; 0x64
 8007654:	d901      	bls.n	800765a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e207      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800765a:	4b5b      	ldr	r3, [pc, #364]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d0f0      	beq.n	8007648 <HAL_RCC_OscConfig+0xc0>
 8007666:	e014      	b.n	8007692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007668:	f7ff f87a 	bl	8006760 <HAL_GetTick>
 800766c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800766e:	e008      	b.n	8007682 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007670:	f7ff f876 	bl	8006760 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	2b64      	cmp	r3, #100	; 0x64
 800767c:	d901      	bls.n	8007682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e1f3      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007682:	4b51      	ldr	r3, [pc, #324]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1f0      	bne.n	8007670 <HAL_RCC_OscConfig+0xe8>
 800768e:	e000      	b.n	8007692 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d063      	beq.n	8007766 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800769e:	4b4a      	ldr	r3, [pc, #296]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f003 030c 	and.w	r3, r3, #12
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00b      	beq.n	80076c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076aa:	4b47      	ldr	r3, [pc, #284]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076b2:	2b08      	cmp	r3, #8
 80076b4:	d11c      	bne.n	80076f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076b6:	4b44      	ldr	r3, [pc, #272]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d116      	bne.n	80076f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076c2:	4b41      	ldr	r3, [pc, #260]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0302 	and.w	r3, r3, #2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d005      	beq.n	80076da <HAL_RCC_OscConfig+0x152>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d001      	beq.n	80076da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e1c7      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076da:	4b3b      	ldr	r3, [pc, #236]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	00db      	lsls	r3, r3, #3
 80076e8:	4937      	ldr	r1, [pc, #220]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ee:	e03a      	b.n	8007766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d020      	beq.n	800773a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076f8:	4b34      	ldr	r3, [pc, #208]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076fe:	f7ff f82f 	bl	8006760 <HAL_GetTick>
 8007702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007704:	e008      	b.n	8007718 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007706:	f7ff f82b 	bl	8006760 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d901      	bls.n	8007718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e1a8      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007718:	4b2b      	ldr	r3, [pc, #172]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0f0      	beq.n	8007706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007724:	4b28      	ldr	r3, [pc, #160]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	4925      	ldr	r1, [pc, #148]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 8007734:	4313      	orrs	r3, r2
 8007736:	600b      	str	r3, [r1, #0]
 8007738:	e015      	b.n	8007766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800773a:	4b24      	ldr	r3, [pc, #144]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007740:	f7ff f80e 	bl	8006760 <HAL_GetTick>
 8007744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007746:	e008      	b.n	800775a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007748:	f7ff f80a 	bl	8006760 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e187      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800775a:	4b1b      	ldr	r3, [pc, #108]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1f0      	bne.n	8007748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d036      	beq.n	80077e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d016      	beq.n	80077a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800777a:	4b15      	ldr	r3, [pc, #84]	; (80077d0 <HAL_RCC_OscConfig+0x248>)
 800777c:	2201      	movs	r2, #1
 800777e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007780:	f7fe ffee 	bl	8006760 <HAL_GetTick>
 8007784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007786:	e008      	b.n	800779a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007788:	f7fe ffea 	bl	8006760 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	2b02      	cmp	r3, #2
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e167      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800779a:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <HAL_RCC_OscConfig+0x240>)
 800779c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0f0      	beq.n	8007788 <HAL_RCC_OscConfig+0x200>
 80077a6:	e01b      	b.n	80077e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077a8:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <HAL_RCC_OscConfig+0x248>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077ae:	f7fe ffd7 	bl	8006760 <HAL_GetTick>
 80077b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b4:	e00e      	b.n	80077d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077b6:	f7fe ffd3 	bl	8006760 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d907      	bls.n	80077d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e150      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
 80077c8:	40023800 	.word	0x40023800
 80077cc:	42470000 	.word	0x42470000
 80077d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077d4:	4b88      	ldr	r3, [pc, #544]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 80077d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1ea      	bne.n	80077b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 8097 	beq.w	800791c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077ee:	2300      	movs	r3, #0
 80077f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077f2:	4b81      	ldr	r3, [pc, #516]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10f      	bne.n	800781e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077fe:	2300      	movs	r3, #0
 8007800:	60bb      	str	r3, [r7, #8]
 8007802:	4b7d      	ldr	r3, [pc, #500]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	4a7c      	ldr	r2, [pc, #496]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 8007808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800780c:	6413      	str	r3, [r2, #64]	; 0x40
 800780e:	4b7a      	ldr	r3, [pc, #488]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007816:	60bb      	str	r3, [r7, #8]
 8007818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800781a:	2301      	movs	r3, #1
 800781c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800781e:	4b77      	ldr	r3, [pc, #476]	; (80079fc <HAL_RCC_OscConfig+0x474>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007826:	2b00      	cmp	r3, #0
 8007828:	d118      	bne.n	800785c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800782a:	4b74      	ldr	r3, [pc, #464]	; (80079fc <HAL_RCC_OscConfig+0x474>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a73      	ldr	r2, [pc, #460]	; (80079fc <HAL_RCC_OscConfig+0x474>)
 8007830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007836:	f7fe ff93 	bl	8006760 <HAL_GetTick>
 800783a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800783c:	e008      	b.n	8007850 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800783e:	f7fe ff8f 	bl	8006760 <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	2b02      	cmp	r3, #2
 800784a:	d901      	bls.n	8007850 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e10c      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007850:	4b6a      	ldr	r3, [pc, #424]	; (80079fc <HAL_RCC_OscConfig+0x474>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0f0      	beq.n	800783e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d106      	bne.n	8007872 <HAL_RCC_OscConfig+0x2ea>
 8007864:	4b64      	ldr	r3, [pc, #400]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 8007866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007868:	4a63      	ldr	r2, [pc, #396]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 800786a:	f043 0301 	orr.w	r3, r3, #1
 800786e:	6713      	str	r3, [r2, #112]	; 0x70
 8007870:	e01c      	b.n	80078ac <HAL_RCC_OscConfig+0x324>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	2b05      	cmp	r3, #5
 8007878:	d10c      	bne.n	8007894 <HAL_RCC_OscConfig+0x30c>
 800787a:	4b5f      	ldr	r3, [pc, #380]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 800787c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787e:	4a5e      	ldr	r2, [pc, #376]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 8007880:	f043 0304 	orr.w	r3, r3, #4
 8007884:	6713      	str	r3, [r2, #112]	; 0x70
 8007886:	4b5c      	ldr	r3, [pc, #368]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 8007888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788a:	4a5b      	ldr	r2, [pc, #364]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 800788c:	f043 0301 	orr.w	r3, r3, #1
 8007890:	6713      	str	r3, [r2, #112]	; 0x70
 8007892:	e00b      	b.n	80078ac <HAL_RCC_OscConfig+0x324>
 8007894:	4b58      	ldr	r3, [pc, #352]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 8007896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007898:	4a57      	ldr	r2, [pc, #348]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 800789a:	f023 0301 	bic.w	r3, r3, #1
 800789e:	6713      	str	r3, [r2, #112]	; 0x70
 80078a0:	4b55      	ldr	r3, [pc, #340]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 80078a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a4:	4a54      	ldr	r2, [pc, #336]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 80078a6:	f023 0304 	bic.w	r3, r3, #4
 80078aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d015      	beq.n	80078e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b4:	f7fe ff54 	bl	8006760 <HAL_GetTick>
 80078b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ba:	e00a      	b.n	80078d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078bc:	f7fe ff50 	bl	8006760 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e0cb      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078d2:	4b49      	ldr	r3, [pc, #292]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 80078d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0ee      	beq.n	80078bc <HAL_RCC_OscConfig+0x334>
 80078de:	e014      	b.n	800790a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078e0:	f7fe ff3e 	bl	8006760 <HAL_GetTick>
 80078e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e6:	e00a      	b.n	80078fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078e8:	f7fe ff3a 	bl	8006760 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e0b5      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078fe:	4b3e      	ldr	r3, [pc, #248]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 8007900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1ee      	bne.n	80078e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d105      	bne.n	800791c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007910:	4b39      	ldr	r3, [pc, #228]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 8007912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007914:	4a38      	ldr	r2, [pc, #224]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 8007916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800791a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 80a1 	beq.w	8007a68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007926:	4b34      	ldr	r3, [pc, #208]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 030c 	and.w	r3, r3, #12
 800792e:	2b08      	cmp	r3, #8
 8007930:	d05c      	beq.n	80079ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d141      	bne.n	80079be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800793a:	4b31      	ldr	r3, [pc, #196]	; (8007a00 <HAL_RCC_OscConfig+0x478>)
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007940:	f7fe ff0e 	bl	8006760 <HAL_GetTick>
 8007944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007946:	e008      	b.n	800795a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007948:	f7fe ff0a 	bl	8006760 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b02      	cmp	r3, #2
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e087      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800795a:	4b27      	ldr	r3, [pc, #156]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1f0      	bne.n	8007948 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	69da      	ldr	r2, [r3, #28]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	019b      	lsls	r3, r3, #6
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	085b      	lsrs	r3, r3, #1
 800797e:	3b01      	subs	r3, #1
 8007980:	041b      	lsls	r3, r3, #16
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	061b      	lsls	r3, r3, #24
 800798a:	491b      	ldr	r1, [pc, #108]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 800798c:	4313      	orrs	r3, r2
 800798e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007990:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <HAL_RCC_OscConfig+0x478>)
 8007992:	2201      	movs	r2, #1
 8007994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007996:	f7fe fee3 	bl	8006760 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800799e:	f7fe fedf 	bl	8006760 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e05c      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079b0:	4b11      	ldr	r3, [pc, #68]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f0      	beq.n	800799e <HAL_RCC_OscConfig+0x416>
 80079bc:	e054      	b.n	8007a68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079be:	4b10      	ldr	r3, [pc, #64]	; (8007a00 <HAL_RCC_OscConfig+0x478>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079c4:	f7fe fecc 	bl	8006760 <HAL_GetTick>
 80079c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079cc:	f7fe fec8 	bl	8006760 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e045      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079de:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <HAL_RCC_OscConfig+0x470>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1f0      	bne.n	80079cc <HAL_RCC_OscConfig+0x444>
 80079ea:	e03d      	b.n	8007a68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d107      	bne.n	8007a04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e038      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
 80079f8:	40023800 	.word	0x40023800
 80079fc:	40007000 	.word	0x40007000
 8007a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a04:	4b1b      	ldr	r3, [pc, #108]	; (8007a74 <HAL_RCC_OscConfig+0x4ec>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d028      	beq.n	8007a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d121      	bne.n	8007a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d11a      	bne.n	8007a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a34:	4013      	ands	r3, r2
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d111      	bne.n	8007a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d107      	bne.n	8007a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d001      	beq.n	8007a68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	40023800 	.word	0x40023800

08007a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e0cc      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a8c:	4b68      	ldr	r3, [pc, #416]	; (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d90c      	bls.n	8007ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a9a:	4b65      	ldr	r3, [pc, #404]	; (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aa2:	4b63      	ldr	r3, [pc, #396]	; (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d001      	beq.n	8007ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e0b8      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d020      	beq.n	8007b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007acc:	4b59      	ldr	r3, [pc, #356]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4a58      	ldr	r2, [pc, #352]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ae4:	4b53      	ldr	r3, [pc, #332]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	4a52      	ldr	r2, [pc, #328]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007af0:	4b50      	ldr	r3, [pc, #320]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	494d      	ldr	r1, [pc, #308]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d044      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d107      	bne.n	8007b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b16:	4b47      	ldr	r3, [pc, #284]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d119      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e07f      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d003      	beq.n	8007b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d107      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b36:	4b3f      	ldr	r3, [pc, #252]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e06f      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b46:	4b3b      	ldr	r3, [pc, #236]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e067      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b56:	4b37      	ldr	r3, [pc, #220]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f023 0203 	bic.w	r2, r3, #3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	4934      	ldr	r1, [pc, #208]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b68:	f7fe fdfa 	bl	8006760 <HAL_GetTick>
 8007b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b6e:	e00a      	b.n	8007b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b70:	f7fe fdf6 	bl	8006760 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e04f      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b86:	4b2b      	ldr	r3, [pc, #172]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 020c 	and.w	r2, r3, #12
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d1eb      	bne.n	8007b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b98:	4b25      	ldr	r3, [pc, #148]	; (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d20c      	bcs.n	8007bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ba6:	4b22      	ldr	r3, [pc, #136]	; (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bae:	4b20      	ldr	r3, [pc, #128]	; (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d001      	beq.n	8007bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e032      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d008      	beq.n	8007bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bcc:	4b19      	ldr	r3, [pc, #100]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	4916      	ldr	r1, [pc, #88]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bea:	4b12      	ldr	r3, [pc, #72]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	490e      	ldr	r1, [pc, #56]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bfe:	f000 f821 	bl	8007c44 <HAL_RCC_GetSysClockFreq>
 8007c02:	4602      	mov	r2, r0
 8007c04:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	091b      	lsrs	r3, r3, #4
 8007c0a:	f003 030f 	and.w	r3, r3, #15
 8007c0e:	490a      	ldr	r1, [pc, #40]	; (8007c38 <HAL_RCC_ClockConfig+0x1c0>)
 8007c10:	5ccb      	ldrb	r3, [r1, r3]
 8007c12:	fa22 f303 	lsr.w	r3, r2, r3
 8007c16:	4a09      	ldr	r2, [pc, #36]	; (8007c3c <HAL_RCC_ClockConfig+0x1c4>)
 8007c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c1a:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <HAL_RCC_ClockConfig+0x1c8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fd5a 	bl	80066d8 <HAL_InitTick>

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40023c00 	.word	0x40023c00
 8007c34:	40023800 	.word	0x40023800
 8007c38:	08010260 	.word	0x08010260
 8007c3c:	200000f0 	.word	0x200000f0
 8007c40:	200000f4 	.word	0x200000f4

08007c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c48:	b090      	sub	sp, #64	; 0x40
 8007c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c50:	2300      	movs	r3, #0
 8007c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c54:	2300      	movs	r3, #0
 8007c56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c5c:	4b59      	ldr	r3, [pc, #356]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 030c 	and.w	r3, r3, #12
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d00d      	beq.n	8007c84 <HAL_RCC_GetSysClockFreq+0x40>
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	f200 80a1 	bhi.w	8007db0 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d002      	beq.n	8007c78 <HAL_RCC_GetSysClockFreq+0x34>
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d003      	beq.n	8007c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8007c76:	e09b      	b.n	8007db0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c78:	4b53      	ldr	r3, [pc, #332]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007c7c:	e09b      	b.n	8007db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c7e:	4b53      	ldr	r3, [pc, #332]	; (8007dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8007c80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c82:	e098      	b.n	8007db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c84:	4b4f      	ldr	r3, [pc, #316]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c8e:	4b4d      	ldr	r3, [pc, #308]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d028      	beq.n	8007cec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c9a:	4b4a      	ldr	r3, [pc, #296]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	099b      	lsrs	r3, r3, #6
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	623b      	str	r3, [r7, #32]
 8007ca4:	627a      	str	r2, [r7, #36]	; 0x24
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007cac:	2100      	movs	r1, #0
 8007cae:	4b47      	ldr	r3, [pc, #284]	; (8007dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8007cb0:	fb03 f201 	mul.w	r2, r3, r1
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	fb00 f303 	mul.w	r3, r0, r3
 8007cba:	4413      	add	r3, r2
 8007cbc:	4a43      	ldr	r2, [pc, #268]	; (8007dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8007cbe:	fba0 1202 	umull	r1, r2, r0, r2
 8007cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cc4:	460a      	mov	r2, r1
 8007cc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8007cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cca:	4413      	add	r3, r2
 8007ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	61bb      	str	r3, [r7, #24]
 8007cd4:	61fa      	str	r2, [r7, #28]
 8007cd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007cde:	f7f8 ff73 	bl	8000bc8 <__aeabi_uldivmod>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cea:	e053      	b.n	8007d94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cec:	4b35      	ldr	r3, [pc, #212]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	099b      	lsrs	r3, r3, #6
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	613b      	str	r3, [r7, #16]
 8007cf6:	617a      	str	r2, [r7, #20]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007cfe:	f04f 0b00 	mov.w	fp, #0
 8007d02:	4652      	mov	r2, sl
 8007d04:	465b      	mov	r3, fp
 8007d06:	f04f 0000 	mov.w	r0, #0
 8007d0a:	f04f 0100 	mov.w	r1, #0
 8007d0e:	0159      	lsls	r1, r3, #5
 8007d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d14:	0150      	lsls	r0, r2, #5
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	ebb2 080a 	subs.w	r8, r2, sl
 8007d1e:	eb63 090b 	sbc.w	r9, r3, fp
 8007d22:	f04f 0200 	mov.w	r2, #0
 8007d26:	f04f 0300 	mov.w	r3, #0
 8007d2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d36:	ebb2 0408 	subs.w	r4, r2, r8
 8007d3a:	eb63 0509 	sbc.w	r5, r3, r9
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	00eb      	lsls	r3, r5, #3
 8007d48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d4c:	00e2      	lsls	r2, r4, #3
 8007d4e:	4614      	mov	r4, r2
 8007d50:	461d      	mov	r5, r3
 8007d52:	eb14 030a 	adds.w	r3, r4, sl
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	eb45 030b 	adc.w	r3, r5, fp
 8007d5c:	607b      	str	r3, [r7, #4]
 8007d5e:	f04f 0200 	mov.w	r2, #0
 8007d62:	f04f 0300 	mov.w	r3, #0
 8007d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	028b      	lsls	r3, r1, #10
 8007d6e:	4621      	mov	r1, r4
 8007d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d74:	4621      	mov	r1, r4
 8007d76:	028a      	lsls	r2, r1, #10
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7e:	2200      	movs	r2, #0
 8007d80:	60bb      	str	r3, [r7, #8]
 8007d82:	60fa      	str	r2, [r7, #12]
 8007d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d88:	f7f8 ff1e 	bl	8000bc8 <__aeabi_uldivmod>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4613      	mov	r3, r2
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d94:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	0c1b      	lsrs	r3, r3, #16
 8007d9a:	f003 0303 	and.w	r3, r3, #3
 8007d9e:	3301      	adds	r3, #1
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007dae:	e002      	b.n	8007db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007db0:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007db2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3740      	adds	r7, #64	; 0x40
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dc2:	bf00      	nop
 8007dc4:	40023800 	.word	0x40023800
 8007dc8:	00f42400 	.word	0x00f42400
 8007dcc:	017d7840 	.word	0x017d7840

08007dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dd4:	4b03      	ldr	r3, [pc, #12]	; (8007de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	200000f0 	.word	0x200000f0

08007de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007dec:	f7ff fff0 	bl	8007dd0 <HAL_RCC_GetHCLKFreq>
 8007df0:	4602      	mov	r2, r0
 8007df2:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	0a9b      	lsrs	r3, r3, #10
 8007df8:	f003 0307 	and.w	r3, r3, #7
 8007dfc:	4903      	ldr	r1, [pc, #12]	; (8007e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dfe:	5ccb      	ldrb	r3, [r1, r3]
 8007e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	08010270 	.word	0x08010270

08007e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e14:	f7ff ffdc 	bl	8007dd0 <HAL_RCC_GetHCLKFreq>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	0b5b      	lsrs	r3, r3, #13
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	4903      	ldr	r1, [pc, #12]	; (8007e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e26:	5ccb      	ldrb	r3, [r1, r3]
 8007e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	40023800 	.word	0x40023800
 8007e34:	08010270 	.word	0x08010270

08007e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e07b      	b.n	8007f42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d108      	bne.n	8007e64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e5a:	d009      	beq.n	8007e70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	61da      	str	r2, [r3, #28]
 8007e62:	e005      	b.n	8007e70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fe f9ac 	bl	80061e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ea6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eea:	431a      	orrs	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef4:	ea42 0103 	orr.w	r1, r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	0c1b      	lsrs	r3, r3, #16
 8007f0e:	f003 0104 	and.w	r1, r3, #4
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	f003 0210 	and.w	r2, r3, #16
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69da      	ldr	r2, [r3, #28]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b088      	sub	sp, #32
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	603b      	str	r3, [r7, #0]
 8007f56:	4613      	mov	r3, r2
 8007f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_SPI_Transmit+0x22>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e126      	b.n	80081ba <HAL_SPI_Transmit+0x270>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f74:	f7fe fbf4 	bl	8006760 <HAL_GetTick>
 8007f78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f7a:	88fb      	ldrh	r3, [r7, #6]
 8007f7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d002      	beq.n	8007f90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f8e:	e10b      	b.n	80081a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <HAL_SPI_Transmit+0x52>
 8007f96:	88fb      	ldrh	r3, [r7, #6]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fa0:	e102      	b.n	80081a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	88fa      	ldrh	r2, [r7, #6]
 8007fc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fe8:	d10f      	bne.n	800800a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ff8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008008:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d007      	beq.n	8008028 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008026:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008030:	d14b      	bne.n	80080ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_SPI_Transmit+0xf6>
 800803a:	8afb      	ldrh	r3, [r7, #22]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d13e      	bne.n	80080be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008044:	881a      	ldrh	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008050:	1c9a      	adds	r2, r3, #2
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800805a:	b29b      	uxth	r3, r3
 800805c:	3b01      	subs	r3, #1
 800805e:	b29a      	uxth	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008064:	e02b      	b.n	80080be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 0302 	and.w	r3, r3, #2
 8008070:	2b02      	cmp	r3, #2
 8008072:	d112      	bne.n	800809a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008078:	881a      	ldrh	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008084:	1c9a      	adds	r2, r3, #2
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800808e:	b29b      	uxth	r3, r3
 8008090:	3b01      	subs	r3, #1
 8008092:	b29a      	uxth	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	86da      	strh	r2, [r3, #54]	; 0x36
 8008098:	e011      	b.n	80080be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800809a:	f7fe fb61 	bl	8006760 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d803      	bhi.n	80080b2 <HAL_SPI_Transmit+0x168>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b0:	d102      	bne.n	80080b8 <HAL_SPI_Transmit+0x16e>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d102      	bne.n	80080be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080bc:	e074      	b.n	80081a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1ce      	bne.n	8008066 <HAL_SPI_Transmit+0x11c>
 80080c8:	e04c      	b.n	8008164 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <HAL_SPI_Transmit+0x18e>
 80080d2:	8afb      	ldrh	r3, [r7, #22]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d140      	bne.n	800815a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	330c      	adds	r3, #12
 80080e2:	7812      	ldrb	r2, [r2, #0]
 80080e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080fe:	e02c      	b.n	800815a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b02      	cmp	r3, #2
 800810c:	d113      	bne.n	8008136 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	330c      	adds	r3, #12
 8008118:	7812      	ldrb	r2, [r2, #0]
 800811a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b01      	subs	r3, #1
 800812e:	b29a      	uxth	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	86da      	strh	r2, [r3, #54]	; 0x36
 8008134:	e011      	b.n	800815a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008136:	f7fe fb13 	bl	8006760 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d803      	bhi.n	800814e <HAL_SPI_Transmit+0x204>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814c:	d102      	bne.n	8008154 <HAL_SPI_Transmit+0x20a>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008158:	e026      	b.n	80081a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800815e:	b29b      	uxth	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1cd      	bne.n	8008100 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fa63 	bl	8008634 <SPI_EndRxTxTransaction>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2220      	movs	r2, #32
 8008178:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10a      	bne.n	8008198 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008182:	2300      	movs	r3, #0
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	613b      	str	r3, [r7, #16]
 8008196:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	77fb      	strb	r3, [r7, #31]
 80081a4:	e000      	b.n	80081a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80081a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3720      	adds	r7, #32
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b08c      	sub	sp, #48	; 0x30
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	60f8      	str	r0, [r7, #12]
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	607a      	str	r2, [r7, #4]
 80081ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081d0:	2301      	movs	r3, #1
 80081d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d101      	bne.n	80081e8 <HAL_SPI_TransmitReceive+0x26>
 80081e4:	2302      	movs	r3, #2
 80081e6:	e18a      	b.n	80084fe <HAL_SPI_TransmitReceive+0x33c>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081f0:	f7fe fab6 	bl	8006760 <HAL_GetTick>
 80081f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008206:	887b      	ldrh	r3, [r7, #2]
 8008208:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800820a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800820e:	2b01      	cmp	r3, #1
 8008210:	d00f      	beq.n	8008232 <HAL_SPI_TransmitReceive+0x70>
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008218:	d107      	bne.n	800822a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d103      	bne.n	800822a <HAL_SPI_TransmitReceive+0x68>
 8008222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008226:	2b04      	cmp	r3, #4
 8008228:	d003      	beq.n	8008232 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800822a:	2302      	movs	r3, #2
 800822c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008230:	e15b      	b.n	80084ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <HAL_SPI_TransmitReceive+0x82>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <HAL_SPI_TransmitReceive+0x82>
 800823e:	887b      	ldrh	r3, [r7, #2]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d103      	bne.n	800824c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800824a:	e14e      	b.n	80084ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b04      	cmp	r3, #4
 8008256:	d003      	beq.n	8008260 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2205      	movs	r2, #5
 800825c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	887a      	ldrh	r2, [r7, #2]
 8008270:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	887a      	ldrh	r2, [r7, #2]
 8008276:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	887a      	ldrh	r2, [r7, #2]
 8008282:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	887a      	ldrh	r2, [r7, #2]
 8008288:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a0:	2b40      	cmp	r3, #64	; 0x40
 80082a2:	d007      	beq.n	80082b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082bc:	d178      	bne.n	80083b0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d002      	beq.n	80082cc <HAL_SPI_TransmitReceive+0x10a>
 80082c6:	8b7b      	ldrh	r3, [r7, #26]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d166      	bne.n	800839a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d0:	881a      	ldrh	r2, [r3, #0]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082dc:	1c9a      	adds	r2, r3, #2
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082f0:	e053      	b.n	800839a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d11b      	bne.n	8008338 <HAL_SPI_TransmitReceive+0x176>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008304:	b29b      	uxth	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d016      	beq.n	8008338 <HAL_SPI_TransmitReceive+0x176>
 800830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830c:	2b01      	cmp	r3, #1
 800830e:	d113      	bne.n	8008338 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008314:	881a      	ldrh	r2, [r3, #0]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008320:	1c9a      	adds	r2, r3, #2
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800832a:	b29b      	uxth	r3, r3
 800832c:	3b01      	subs	r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b01      	cmp	r3, #1
 8008344:	d119      	bne.n	800837a <HAL_SPI_TransmitReceive+0x1b8>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800834a:	b29b      	uxth	r3, r3
 800834c:	2b00      	cmp	r3, #0
 800834e:	d014      	beq.n	800837a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68da      	ldr	r2, [r3, #12]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	b292      	uxth	r2, r2
 800835c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008362:	1c9a      	adds	r2, r3, #2
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800836c:	b29b      	uxth	r3, r3
 800836e:	3b01      	subs	r3, #1
 8008370:	b29a      	uxth	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008376:	2301      	movs	r3, #1
 8008378:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800837a:	f7fe f9f1 	bl	8006760 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008386:	429a      	cmp	r2, r3
 8008388:	d807      	bhi.n	800839a <HAL_SPI_TransmitReceive+0x1d8>
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008390:	d003      	beq.n	800839a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008398:	e0a7      	b.n	80084ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800839e:	b29b      	uxth	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1a6      	bne.n	80082f2 <HAL_SPI_TransmitReceive+0x130>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1a1      	bne.n	80082f2 <HAL_SPI_TransmitReceive+0x130>
 80083ae:	e07c      	b.n	80084aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <HAL_SPI_TransmitReceive+0x1fc>
 80083b8:	8b7b      	ldrh	r3, [r7, #26]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d16b      	bne.n	8008496 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	330c      	adds	r3, #12
 80083c8:	7812      	ldrb	r2, [r2, #0]
 80083ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083da:	b29b      	uxth	r3, r3
 80083dc:	3b01      	subs	r3, #1
 80083de:	b29a      	uxth	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083e4:	e057      	b.n	8008496 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f003 0302 	and.w	r3, r3, #2
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d11c      	bne.n	800842e <HAL_SPI_TransmitReceive+0x26c>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d017      	beq.n	800842e <HAL_SPI_TransmitReceive+0x26c>
 80083fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008400:	2b01      	cmp	r3, #1
 8008402:	d114      	bne.n	800842e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	330c      	adds	r3, #12
 800840e:	7812      	ldrb	r2, [r2, #0]
 8008410:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008420:	b29b      	uxth	r3, r3
 8008422:	3b01      	subs	r3, #1
 8008424:	b29a      	uxth	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b01      	cmp	r3, #1
 800843a:	d119      	bne.n	8008470 <HAL_SPI_TransmitReceive+0x2ae>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008440:	b29b      	uxth	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d014      	beq.n	8008470 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008462:	b29b      	uxth	r3, r3
 8008464:	3b01      	subs	r3, #1
 8008466:	b29a      	uxth	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800846c:	2301      	movs	r3, #1
 800846e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008470:	f7fe f976 	bl	8006760 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800847c:	429a      	cmp	r2, r3
 800847e:	d803      	bhi.n	8008488 <HAL_SPI_TransmitReceive+0x2c6>
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008486:	d102      	bne.n	800848e <HAL_SPI_TransmitReceive+0x2cc>
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	2b00      	cmp	r3, #0
 800848c:	d103      	bne.n	8008496 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008494:	e029      	b.n	80084ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800849a:	b29b      	uxth	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1a2      	bne.n	80083e6 <HAL_SPI_TransmitReceive+0x224>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d19d      	bne.n	80083e6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 f8c0 	bl	8008634 <SPI_EndRxTxTransaction>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d006      	beq.n	80084c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2220      	movs	r2, #32
 80084c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80084c6:	e010      	b.n	80084ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10b      	bne.n	80084e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084d0:	2300      	movs	r3, #0
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	e000      	b.n	80084ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80084e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3730      	adds	r7, #48	; 0x30
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008514:	b2db      	uxtb	r3, r3
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
	...

08008524 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	4613      	mov	r3, r2
 8008532:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008534:	f7fe f914 	bl	8006760 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	1a9b      	subs	r3, r3, r2
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	4413      	add	r3, r2
 8008542:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008544:	f7fe f90c 	bl	8006760 <HAL_GetTick>
 8008548:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800854a:	4b39      	ldr	r3, [pc, #228]	; (8008630 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	015b      	lsls	r3, r3, #5
 8008550:	0d1b      	lsrs	r3, r3, #20
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	fb02 f303 	mul.w	r3, r2, r3
 8008558:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800855a:	e054      	b.n	8008606 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008562:	d050      	beq.n	8008606 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008564:	f7fe f8fc 	bl	8006760 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	429a      	cmp	r2, r3
 8008572:	d902      	bls.n	800857a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d13d      	bne.n	80085f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008588:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008592:	d111      	bne.n	80085b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800859c:	d004      	beq.n	80085a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085a6:	d107      	bne.n	80085b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085c0:	d10f      	bne.n	80085e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e017      	b.n	8008626 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	3b01      	subs	r3, #1
 8008604:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	4013      	ands	r3, r2
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	429a      	cmp	r2, r3
 8008614:	bf0c      	ite	eq
 8008616:	2301      	moveq	r3, #1
 8008618:	2300      	movne	r3, #0
 800861a:	b2db      	uxtb	r3, r3
 800861c:	461a      	mov	r2, r3
 800861e:	79fb      	ldrb	r3, [r7, #7]
 8008620:	429a      	cmp	r2, r3
 8008622:	d19b      	bne.n	800855c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3720      	adds	r7, #32
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	200000f0 	.word	0x200000f0

08008634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af02      	add	r7, sp, #8
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008640:	4b1b      	ldr	r3, [pc, #108]	; (80086b0 <SPI_EndRxTxTransaction+0x7c>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a1b      	ldr	r2, [pc, #108]	; (80086b4 <SPI_EndRxTxTransaction+0x80>)
 8008646:	fba2 2303 	umull	r2, r3, r2, r3
 800864a:	0d5b      	lsrs	r3, r3, #21
 800864c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008650:	fb02 f303 	mul.w	r3, r2, r3
 8008654:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800865e:	d112      	bne.n	8008686 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2200      	movs	r2, #0
 8008668:	2180      	movs	r1, #128	; 0x80
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f7ff ff5a 	bl	8008524 <SPI_WaitFlagStateUntilTimeout>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d016      	beq.n	80086a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867a:	f043 0220 	orr.w	r2, r3, #32
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e00f      	b.n	80086a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00a      	beq.n	80086a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	3b01      	subs	r3, #1
 8008690:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869c:	2b80      	cmp	r3, #128	; 0x80
 800869e:	d0f2      	beq.n	8008686 <SPI_EndRxTxTransaction+0x52>
 80086a0:	e000      	b.n	80086a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80086a2:	bf00      	nop
  }

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	200000f0 	.word	0x200000f0
 80086b4:	165e9f81 	.word	0x165e9f81

080086b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e041      	b.n	800874e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d106      	bne.n	80086e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7fd fe18 	bl	8006314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	f000 fcac 	bl	8009054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6a1a      	ldr	r2, [r3, #32]
 8008764:	f241 1311 	movw	r3, #4369	; 0x1111
 8008768:	4013      	ands	r3, r2
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10f      	bne.n	800878e <HAL_TIM_Base_Stop+0x38>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6a1a      	ldr	r2, [r3, #32]
 8008774:	f240 4344 	movw	r3, #1092	; 0x444
 8008778:	4013      	ands	r3, r2
 800877a:	2b00      	cmp	r3, #0
 800877c:	d107      	bne.n	800878e <HAL_TIM_Base_Stop+0x38>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 0201 	bic.w	r2, r2, #1
 800878c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d001      	beq.n	80087bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e044      	b.n	8008846 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0201 	orr.w	r2, r2, #1
 80087d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a1e      	ldr	r2, [pc, #120]	; (8008854 <HAL_TIM_Base_Start_IT+0xb0>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d018      	beq.n	8008810 <HAL_TIM_Base_Start_IT+0x6c>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e6:	d013      	beq.n	8008810 <HAL_TIM_Base_Start_IT+0x6c>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a1a      	ldr	r2, [pc, #104]	; (8008858 <HAL_TIM_Base_Start_IT+0xb4>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d00e      	beq.n	8008810 <HAL_TIM_Base_Start_IT+0x6c>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a19      	ldr	r2, [pc, #100]	; (800885c <HAL_TIM_Base_Start_IT+0xb8>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d009      	beq.n	8008810 <HAL_TIM_Base_Start_IT+0x6c>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a17      	ldr	r2, [pc, #92]	; (8008860 <HAL_TIM_Base_Start_IT+0xbc>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d004      	beq.n	8008810 <HAL_TIM_Base_Start_IT+0x6c>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a16      	ldr	r2, [pc, #88]	; (8008864 <HAL_TIM_Base_Start_IT+0xc0>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d111      	bne.n	8008834 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2b06      	cmp	r3, #6
 8008820:	d010      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f042 0201 	orr.w	r2, r2, #1
 8008830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008832:	e007      	b.n	8008844 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0201 	orr.w	r2, r2, #1
 8008842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40010000 	.word	0x40010000
 8008858:	40000400 	.word	0x40000400
 800885c:	40000800 	.word	0x40000800
 8008860:	40000c00 	.word	0x40000c00
 8008864:	40014000 	.word	0x40014000

08008868 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d101      	bne.n	800887c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e097      	b.n	80089ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008882:	b2db      	uxtb	r3, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	d106      	bne.n	8008896 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7fd fcf1 	bl	8006278 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2202      	movs	r2, #2
 800889a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	6812      	ldr	r2, [r2, #0]
 80088a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088ac:	f023 0307 	bic.w	r3, r3, #7
 80088b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3304      	adds	r3, #4
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f000 fbc9 	bl	8009054 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6a1b      	ldr	r3, [r3, #32]
 80088d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ea:	f023 0303 	bic.w	r3, r3, #3
 80088ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	021b      	lsls	r3, r3, #8
 80088fa:	4313      	orrs	r3, r2
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	4313      	orrs	r3, r2
 8008900:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008908:	f023 030c 	bic.w	r3, r3, #12
 800890c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008914:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008918:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	68da      	ldr	r2, [r3, #12]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	021b      	lsls	r3, r3, #8
 8008924:	4313      	orrs	r3, r2
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	4313      	orrs	r3, r2
 800892a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	011a      	lsls	r2, r3, #4
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	031b      	lsls	r3, r3, #12
 8008938:	4313      	orrs	r3, r2
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	4313      	orrs	r3, r2
 800893e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008946:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800894e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	4313      	orrs	r3, r2
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d110      	bne.n	8008a06 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d102      	bne.n	80089f0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80089ea:	7b7b      	ldrb	r3, [r7, #13]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d001      	beq.n	80089f4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e089      	b.n	8008b08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a04:	e031      	b.n	8008a6a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d110      	bne.n	8008a2e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d102      	bne.n	8008a18 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a12:	7b3b      	ldrb	r3, [r7, #12]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d001      	beq.n	8008a1c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e075      	b.n	8008b08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a2c:	e01d      	b.n	8008a6a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d108      	bne.n	8008a46 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d105      	bne.n	8008a46 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a3a:	7b7b      	ldrb	r3, [r7, #13]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d102      	bne.n	8008a46 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a40:	7b3b      	ldrb	r3, [r7, #12]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d001      	beq.n	8008a4a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e05e      	b.n	8008b08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2202      	movs	r2, #2
 8008a56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2202      	movs	r2, #2
 8008a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2202      	movs	r2, #2
 8008a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <HAL_TIM_Encoder_Start_IT+0xc4>
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d010      	beq.n	8008a98 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008a76:	e01f      	b.n	8008ab8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	2100      	movs	r1, #0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fc01 	bl	8009288 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68da      	ldr	r2, [r3, #12]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f042 0202 	orr.w	r2, r2, #2
 8008a94:	60da      	str	r2, [r3, #12]
      break;
 8008a96:	e02e      	b.n	8008af6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	2104      	movs	r1, #4
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fbf1 	bl	8009288 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68da      	ldr	r2, [r3, #12]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f042 0204 	orr.w	r2, r2, #4
 8008ab4:	60da      	str	r2, [r3, #12]
      break;
 8008ab6:	e01e      	b.n	8008af6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2201      	movs	r2, #1
 8008abe:	2100      	movs	r1, #0
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fbe1 	bl	8009288 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2201      	movs	r2, #1
 8008acc:	2104      	movs	r1, #4
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fbda 	bl	8009288 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68da      	ldr	r2, [r3, #12]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f042 0202 	orr.w	r2, r2, #2
 8008ae2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68da      	ldr	r2, [r3, #12]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f042 0204 	orr.w	r2, r2, #4
 8008af2:	60da      	str	r2, [r3, #12]
      break;
 8008af4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f042 0201 	orr.w	r2, r2, #1
 8008b04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10f      	bne.n	8008b40 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2200      	movs	r2, #0
 8008b26:	2100      	movs	r1, #0
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fbad 	bl	8009288 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0202 	bic.w	r2, r2, #2
 8008b3c:	60da      	str	r2, [r3, #12]
 8008b3e:	e030      	b.n	8008ba2 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d10f      	bne.n	8008b66 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2104      	movs	r1, #4
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fb9a 	bl	8009288 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 0204 	bic.w	r2, r2, #4
 8008b62:	60da      	str	r2, [r3, #12]
 8008b64:	e01d      	b.n	8008ba2 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 fb8a 	bl	8009288 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2104      	movs	r1, #4
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 fb83 	bl	8009288 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f022 0202 	bic.w	r2, r2, #2
 8008b90:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0204 	bic.w	r2, r2, #4
 8008ba0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6a1a      	ldr	r2, [r3, #32]
 8008ba8:	f241 1311 	movw	r3, #4369	; 0x1111
 8008bac:	4013      	ands	r3, r2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10f      	bne.n	8008bd2 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6a1a      	ldr	r2, [r3, #32]
 8008bb8:	f240 4344 	movw	r3, #1092	; 0x444
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d107      	bne.n	8008bd2 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0201 	bic.w	r2, r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <HAL_TIM_Encoder_Stop_IT+0xce>
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	d138      	bne.n	8008c50 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d104      	bne.n	8008bee <HAL_TIM_Encoder_Stop_IT+0xde>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bec:	e013      	b.n	8008c16 <HAL_TIM_Encoder_Stop_IT+0x106>
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	d104      	bne.n	8008bfe <HAL_TIM_Encoder_Stop_IT+0xee>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bfc:	e00b      	b.n	8008c16 <HAL_TIM_Encoder_Stop_IT+0x106>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d104      	bne.n	8008c0e <HAL_TIM_Encoder_Stop_IT+0xfe>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c0c:	e003      	b.n	8008c16 <HAL_TIM_Encoder_Stop_IT+0x106>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <HAL_TIM_Encoder_Stop_IT+0x116>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c24:	e024      	b.n	8008c70 <HAL_TIM_Encoder_Stop_IT+0x160>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	d104      	bne.n	8008c36 <HAL_TIM_Encoder_Stop_IT+0x126>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c34:	e01c      	b.n	8008c70 <HAL_TIM_Encoder_Stop_IT+0x160>
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d104      	bne.n	8008c46 <HAL_TIM_Encoder_Stop_IT+0x136>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c44:	e014      	b.n	8008c70 <HAL_TIM_Encoder_Stop_IT+0x160>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c4e:	e00f      	b.n	8008c70 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	f003 0302 	and.w	r3, r3, #2
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d122      	bne.n	8008cd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d11b      	bne.n	8008cd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f06f 0202 	mvn.w	r2, #2
 8008ca6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	699b      	ldr	r3, [r3, #24]
 8008cb4:	f003 0303 	and.w	r3, r3, #3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7fd f9f1 	bl	80060a4 <HAL_TIM_IC_CaptureCallback>
 8008cc2:	e005      	b.n	8008cd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f9a7 	bl	8009018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f9ae 	bl	800902c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d122      	bne.n	8008d2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	f003 0304 	and.w	r3, r3, #4
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	d11b      	bne.n	8008d2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f06f 0204 	mvn.w	r2, #4
 8008cfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d003      	beq.n	8008d18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7fd f9c7 	bl	80060a4 <HAL_TIM_IC_CaptureCallback>
 8008d16:	e005      	b.n	8008d24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f97d 	bl	8009018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f984 	bl	800902c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	f003 0308 	and.w	r3, r3, #8
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	d122      	bne.n	8008d7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f003 0308 	and.w	r3, r3, #8
 8008d42:	2b08      	cmp	r3, #8
 8008d44:	d11b      	bne.n	8008d7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f06f 0208 	mvn.w	r2, #8
 8008d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2204      	movs	r2, #4
 8008d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d003      	beq.n	8008d6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7fd f99d 	bl	80060a4 <HAL_TIM_IC_CaptureCallback>
 8008d6a:	e005      	b.n	8008d78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f953 	bl	8009018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f95a 	bl	800902c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	f003 0310 	and.w	r3, r3, #16
 8008d88:	2b10      	cmp	r3, #16
 8008d8a:	d122      	bne.n	8008dd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	f003 0310 	and.w	r3, r3, #16
 8008d96:	2b10      	cmp	r3, #16
 8008d98:	d11b      	bne.n	8008dd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f06f 0210 	mvn.w	r2, #16
 8008da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2208      	movs	r2, #8
 8008da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d003      	beq.n	8008dc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7fd f973 	bl	80060a4 <HAL_TIM_IC_CaptureCallback>
 8008dbe:	e005      	b.n	8008dcc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f929 	bl	8009018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f930 	bl	800902c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d10e      	bne.n	8008dfe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d107      	bne.n	8008dfe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f06f 0201 	mvn.w	r2, #1
 8008df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7fd f8dd 	bl	8005fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e08:	2b80      	cmp	r3, #128	; 0x80
 8008e0a:	d10e      	bne.n	8008e2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e16:	2b80      	cmp	r3, #128	; 0x80
 8008e18:	d107      	bne.n	8008e2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 facd 	bl	80093c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e34:	2b40      	cmp	r3, #64	; 0x40
 8008e36:	d10e      	bne.n	8008e56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e42:	2b40      	cmp	r3, #64	; 0x40
 8008e44:	d107      	bne.n	8008e56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f8f5 	bl	8009040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	f003 0320 	and.w	r3, r3, #32
 8008e60:	2b20      	cmp	r3, #32
 8008e62:	d10e      	bne.n	8008e82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	f003 0320 	and.w	r3, r3, #32
 8008e6e:	2b20      	cmp	r3, #32
 8008e70:	d107      	bne.n	8008e82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f06f 0220 	mvn.w	r2, #32
 8008e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fa97 	bl	80093b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e82:	bf00      	nop
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d101      	bne.n	8008ea6 <HAL_TIM_ConfigClockSource+0x1c>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e0b4      	b.n	8009010 <HAL_TIM_ConfigClockSource+0x186>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ec4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ecc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ede:	d03e      	beq.n	8008f5e <HAL_TIM_ConfigClockSource+0xd4>
 8008ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ee4:	f200 8087 	bhi.w	8008ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8008ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eec:	f000 8086 	beq.w	8008ffc <HAL_TIM_ConfigClockSource+0x172>
 8008ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ef4:	d87f      	bhi.n	8008ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8008ef6:	2b70      	cmp	r3, #112	; 0x70
 8008ef8:	d01a      	beq.n	8008f30 <HAL_TIM_ConfigClockSource+0xa6>
 8008efa:	2b70      	cmp	r3, #112	; 0x70
 8008efc:	d87b      	bhi.n	8008ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8008efe:	2b60      	cmp	r3, #96	; 0x60
 8008f00:	d050      	beq.n	8008fa4 <HAL_TIM_ConfigClockSource+0x11a>
 8008f02:	2b60      	cmp	r3, #96	; 0x60
 8008f04:	d877      	bhi.n	8008ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8008f06:	2b50      	cmp	r3, #80	; 0x50
 8008f08:	d03c      	beq.n	8008f84 <HAL_TIM_ConfigClockSource+0xfa>
 8008f0a:	2b50      	cmp	r3, #80	; 0x50
 8008f0c:	d873      	bhi.n	8008ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8008f0e:	2b40      	cmp	r3, #64	; 0x40
 8008f10:	d058      	beq.n	8008fc4 <HAL_TIM_ConfigClockSource+0x13a>
 8008f12:	2b40      	cmp	r3, #64	; 0x40
 8008f14:	d86f      	bhi.n	8008ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8008f16:	2b30      	cmp	r3, #48	; 0x30
 8008f18:	d064      	beq.n	8008fe4 <HAL_TIM_ConfigClockSource+0x15a>
 8008f1a:	2b30      	cmp	r3, #48	; 0x30
 8008f1c:	d86b      	bhi.n	8008ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8008f1e:	2b20      	cmp	r3, #32
 8008f20:	d060      	beq.n	8008fe4 <HAL_TIM_ConfigClockSource+0x15a>
 8008f22:	2b20      	cmp	r3, #32
 8008f24:	d867      	bhi.n	8008ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d05c      	beq.n	8008fe4 <HAL_TIM_ConfigClockSource+0x15a>
 8008f2a:	2b10      	cmp	r3, #16
 8008f2c:	d05a      	beq.n	8008fe4 <HAL_TIM_ConfigClockSource+0x15a>
 8008f2e:	e062      	b.n	8008ff6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6818      	ldr	r0, [r3, #0]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	6899      	ldr	r1, [r3, #8]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f000 f982 	bl	8009248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f52:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	609a      	str	r2, [r3, #8]
      break;
 8008f5c:	e04f      	b.n	8008ffe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6818      	ldr	r0, [r3, #0]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	6899      	ldr	r1, [r3, #8]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	f000 f96b 	bl	8009248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f80:	609a      	str	r2, [r3, #8]
      break;
 8008f82:	e03c      	b.n	8008ffe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	6859      	ldr	r1, [r3, #4]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	461a      	mov	r2, r3
 8008f92:	f000 f8df 	bl	8009154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2150      	movs	r1, #80	; 0x50
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 f938 	bl	8009212 <TIM_ITRx_SetConfig>
      break;
 8008fa2:	e02c      	b.n	8008ffe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6818      	ldr	r0, [r3, #0]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	6859      	ldr	r1, [r3, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	f000 f8fe 	bl	80091b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2160      	movs	r1, #96	; 0x60
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 f928 	bl	8009212 <TIM_ITRx_SetConfig>
      break;
 8008fc2:	e01c      	b.n	8008ffe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6818      	ldr	r0, [r3, #0]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	6859      	ldr	r1, [r3, #4]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	f000 f8bf 	bl	8009154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2140      	movs	r1, #64	; 0x40
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 f918 	bl	8009212 <TIM_ITRx_SetConfig>
      break;
 8008fe2:	e00c      	b.n	8008ffe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4619      	mov	r1, r3
 8008fee:	4610      	mov	r0, r2
 8008ff0:	f000 f90f 	bl	8009212 <TIM_ITRx_SetConfig>
      break;
 8008ff4:	e003      	b.n	8008ffe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8008ffa:	e000      	b.n	8008ffe <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ffc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800900e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a34      	ldr	r2, [pc, #208]	; (8009138 <TIM_Base_SetConfig+0xe4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d00f      	beq.n	800908c <TIM_Base_SetConfig+0x38>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009072:	d00b      	beq.n	800908c <TIM_Base_SetConfig+0x38>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a31      	ldr	r2, [pc, #196]	; (800913c <TIM_Base_SetConfig+0xe8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d007      	beq.n	800908c <TIM_Base_SetConfig+0x38>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a30      	ldr	r2, [pc, #192]	; (8009140 <TIM_Base_SetConfig+0xec>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d003      	beq.n	800908c <TIM_Base_SetConfig+0x38>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a2f      	ldr	r2, [pc, #188]	; (8009144 <TIM_Base_SetConfig+0xf0>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d108      	bne.n	800909e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a25      	ldr	r2, [pc, #148]	; (8009138 <TIM_Base_SetConfig+0xe4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d01b      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ac:	d017      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a22      	ldr	r2, [pc, #136]	; (800913c <TIM_Base_SetConfig+0xe8>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d013      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a21      	ldr	r2, [pc, #132]	; (8009140 <TIM_Base_SetConfig+0xec>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00f      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a20      	ldr	r2, [pc, #128]	; (8009144 <TIM_Base_SetConfig+0xf0>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d00b      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a1f      	ldr	r2, [pc, #124]	; (8009148 <TIM_Base_SetConfig+0xf4>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d007      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a1e      	ldr	r2, [pc, #120]	; (800914c <TIM_Base_SetConfig+0xf8>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d003      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a1d      	ldr	r2, [pc, #116]	; (8009150 <TIM_Base_SetConfig+0xfc>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d108      	bne.n	80090f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a08      	ldr	r2, [pc, #32]	; (8009138 <TIM_Base_SetConfig+0xe4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d103      	bne.n	8009124 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	691a      	ldr	r2, [r3, #16]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	615a      	str	r2, [r3, #20]
}
 800912a:	bf00      	nop
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	40010000 	.word	0x40010000
 800913c:	40000400 	.word	0x40000400
 8009140:	40000800 	.word	0x40000800
 8009144:	40000c00 	.word	0x40000c00
 8009148:	40014000 	.word	0x40014000
 800914c:	40014400 	.word	0x40014400
 8009150:	40014800 	.word	0x40014800

08009154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	f023 0201 	bic.w	r2, r3, #1
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800917e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4313      	orrs	r3, r2
 8009188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f023 030a 	bic.w	r3, r3, #10
 8009190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	4313      	orrs	r3, r2
 8009198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	621a      	str	r2, [r3, #32]
}
 80091a6:	bf00      	nop
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b087      	sub	sp, #28
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	f023 0210 	bic.w	r2, r3, #16
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	031b      	lsls	r3, r3, #12
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	621a      	str	r2, [r3, #32]
}
 8009206:	bf00      	nop
 8009208:	371c      	adds	r7, #28
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009212:	b480      	push	{r7}
 8009214:	b085      	sub	sp, #20
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4313      	orrs	r3, r2
 8009230:	f043 0307 	orr.w	r3, r3, #7
 8009234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	609a      	str	r2, [r3, #8]
}
 800923c:	bf00      	nop
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	021a      	lsls	r2, r3, #8
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	431a      	orrs	r2, r3
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	4313      	orrs	r3, r2
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	4313      	orrs	r3, r2
 8009274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	609a      	str	r2, [r3, #8]
}
 800927c:	bf00      	nop
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f003 031f 	and.w	r3, r3, #31
 800929a:	2201      	movs	r2, #1
 800929c:	fa02 f303 	lsl.w	r3, r2, r3
 80092a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6a1a      	ldr	r2, [r3, #32]
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	43db      	mvns	r3, r3
 80092aa:	401a      	ands	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6a1a      	ldr	r2, [r3, #32]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f003 031f 	and.w	r3, r3, #31
 80092ba:	6879      	ldr	r1, [r7, #4]
 80092bc:	fa01 f303 	lsl.w	r3, r1, r3
 80092c0:	431a      	orrs	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	621a      	str	r2, [r3, #32]
}
 80092c6:	bf00      	nop
 80092c8:	371c      	adds	r7, #28
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
	...

080092d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d101      	bne.n	80092ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092e8:	2302      	movs	r3, #2
 80092ea:	e050      	b.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2202      	movs	r2, #2
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	4313      	orrs	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a1c      	ldr	r2, [pc, #112]	; (800939c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d018      	beq.n	8009362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009338:	d013      	beq.n	8009362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a18      	ldr	r2, [pc, #96]	; (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d00e      	beq.n	8009362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a16      	ldr	r2, [pc, #88]	; (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d009      	beq.n	8009362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a15      	ldr	r2, [pc, #84]	; (80093a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d004      	beq.n	8009362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a13      	ldr	r2, [pc, #76]	; (80093ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d10c      	bne.n	800937c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	4313      	orrs	r3, r2
 8009372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	40010000 	.word	0x40010000
 80093a0:	40000400 	.word	0x40000400
 80093a4:	40000800 	.word	0x40000800
 80093a8:	40000c00 	.word	0x40000c00
 80093ac:	40014000 	.word	0x40014000

080093b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e03f      	b.n	800946a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7fc ffb0 	bl	8006364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2224      	movs	r2, #36	; 0x24
 8009408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68da      	ldr	r2, [r3, #12]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800941a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fe9b 	bl	800a158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	695a      	ldr	r2, [r3, #20]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68da      	ldr	r2, [r3, #12]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2220      	movs	r2, #32
 800945c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2220      	movs	r2, #32
 8009464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b08c      	sub	sp, #48	; 0x30
 8009476:	af00      	add	r7, sp, #0
 8009478:	60f8      	str	r0, [r7, #12]
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	4613      	mov	r3, r2
 800947e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b20      	cmp	r3, #32
 800948a:	d152      	bne.n	8009532 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009492:	88fb      	ldrh	r3, [r7, #6]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e04b      	b.n	8009534 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d101      	bne.n	80094aa <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80094a6:	2302      	movs	r3, #2
 80094a8:	e044      	b.n	8009534 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2201      	movs	r2, #1
 80094b6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80094b8:	88fb      	ldrh	r3, [r7, #6]
 80094ba:	461a      	mov	r2, r3
 80094bc:	68b9      	ldr	r1, [r7, #8]
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 fbea 	bl	8009c98 <UART_Start_Receive_DMA>
 80094c4:	4603      	mov	r3, r0
 80094c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80094ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d12c      	bne.n	800952c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d125      	bne.n	8009526 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094da:	2300      	movs	r3, #0
 80094dc:	613b      	str	r3, [r7, #16]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	613b      	str	r3, [r7, #16]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	613b      	str	r3, [r7, #16]
 80094ee:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	330c      	adds	r3, #12
 80094f6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	f043 0310 	orr.w	r3, r3, #16
 8009506:	62bb      	str	r3, [r7, #40]	; 0x28
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	330c      	adds	r3, #12
 800950e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009510:	627a      	str	r2, [r7, #36]	; 0x24
 8009512:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	6a39      	ldr	r1, [r7, #32]
 8009516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	61fb      	str	r3, [r7, #28]
   return(result);
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e5      	bne.n	80094f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009524:	e002      	b.n	800952c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800952c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009530:	e000      	b.n	8009534 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009532:	2302      	movs	r3, #2
  }
}
 8009534:	4618      	mov	r0, r3
 8009536:	3730      	adds	r7, #48	; 0x30
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b0ba      	sub	sp, #232	; 0xe8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009562:	2300      	movs	r3, #0
 8009564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009568:	2300      	movs	r3, #0
 800956a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800956e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800957a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10f      	bne.n	80095a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009586:	f003 0320 	and.w	r3, r3, #32
 800958a:	2b00      	cmp	r3, #0
 800958c:	d009      	beq.n	80095a2 <HAL_UART_IRQHandler+0x66>
 800958e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009592:	f003 0320 	and.w	r3, r3, #32
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fd21 	bl	8009fe2 <UART_Receive_IT>
      return;
 80095a0:	e256      	b.n	8009a50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80095a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 80de 	beq.w	8009768 <HAL_UART_IRQHandler+0x22c>
 80095ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d106      	bne.n	80095c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80095b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 80d1 	beq.w	8009768 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80095c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00b      	beq.n	80095ea <HAL_UART_IRQHandler+0xae>
 80095d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e2:	f043 0201 	orr.w	r2, r3, #1
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ee:	f003 0304 	and.w	r3, r3, #4
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00b      	beq.n	800960e <HAL_UART_IRQHandler+0xd2>
 80095f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d005      	beq.n	800960e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	f043 0202 	orr.w	r2, r3, #2
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800960e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00b      	beq.n	8009632 <HAL_UART_IRQHandler+0xf6>
 800961a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	d005      	beq.n	8009632 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962a:	f043 0204 	orr.w	r2, r3, #4
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009636:	f003 0308 	and.w	r3, r3, #8
 800963a:	2b00      	cmp	r3, #0
 800963c:	d011      	beq.n	8009662 <HAL_UART_IRQHandler+0x126>
 800963e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009642:	f003 0320 	and.w	r3, r3, #32
 8009646:	2b00      	cmp	r3, #0
 8009648:	d105      	bne.n	8009656 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800964a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d005      	beq.n	8009662 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965a:	f043 0208 	orr.w	r2, r3, #8
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 81ed 	beq.w	8009a46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800966c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009670:	f003 0320 	and.w	r3, r3, #32
 8009674:	2b00      	cmp	r3, #0
 8009676:	d008      	beq.n	800968a <HAL_UART_IRQHandler+0x14e>
 8009678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800967c:	f003 0320 	and.w	r3, r3, #32
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fcac 	bl	8009fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009694:	2b40      	cmp	r3, #64	; 0x40
 8009696:	bf0c      	ite	eq
 8009698:	2301      	moveq	r3, #1
 800969a:	2300      	movne	r3, #0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a6:	f003 0308 	and.w	r3, r3, #8
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d103      	bne.n	80096b6 <HAL_UART_IRQHandler+0x17a>
 80096ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d04f      	beq.n	8009756 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fbb4 	bl	8009e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c6:	2b40      	cmp	r3, #64	; 0x40
 80096c8:	d141      	bne.n	800974e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3314      	adds	r3, #20
 80096d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3314      	adds	r3, #20
 80096f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009706:	e841 2300 	strex	r3, r2, [r1]
 800970a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800970e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1d9      	bne.n	80096ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	2b00      	cmp	r3, #0
 800971c:	d013      	beq.n	8009746 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009722:	4a7d      	ldr	r2, [pc, #500]	; (8009918 <HAL_UART_IRQHandler+0x3dc>)
 8009724:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	4618      	mov	r0, r3
 800972c:	f7fd fad0 	bl	8006cd0 <HAL_DMA_Abort_IT>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d016      	beq.n	8009764 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009744:	e00e      	b.n	8009764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f9a4 	bl	8009a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800974c:	e00a      	b.n	8009764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f9a0 	bl	8009a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009754:	e006      	b.n	8009764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f99c 	bl	8009a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009762:	e170      	b.n	8009a46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009764:	bf00      	nop
    return;
 8009766:	e16e      	b.n	8009a46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976c:	2b01      	cmp	r3, #1
 800976e:	f040 814a 	bne.w	8009a06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009776:	f003 0310 	and.w	r3, r3, #16
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 8143 	beq.w	8009a06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009784:	f003 0310 	and.w	r3, r3, #16
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 813c 	beq.w	8009a06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800978e:	2300      	movs	r3, #0
 8009790:	60bb      	str	r3, [r7, #8]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	60bb      	str	r3, [r7, #8]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	60bb      	str	r3, [r7, #8]
 80097a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ae:	2b40      	cmp	r3, #64	; 0x40
 80097b0:	f040 80b4 	bne.w	800991c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 8140 	beq.w	8009a4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097d2:	429a      	cmp	r2, r3
 80097d4:	f080 8139 	bcs.w	8009a4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ea:	f000 8088 	beq.w	80098fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	330c      	adds	r3, #12
 80097f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800980c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	330c      	adds	r3, #12
 8009816:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800981a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800981e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1d9      	bne.n	80097ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3314      	adds	r3, #20
 8009840:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800984a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800984c:	f023 0301 	bic.w	r3, r3, #1
 8009850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	3314      	adds	r3, #20
 800985a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800985e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009862:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009864:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009866:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800986a:	e841 2300 	strex	r3, r2, [r1]
 800986e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1e1      	bne.n	800983a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3314      	adds	r3, #20
 800987c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009880:	e853 3f00 	ldrex	r3, [r3]
 8009884:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800988c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	3314      	adds	r3, #20
 8009896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800989a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800989c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80098a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e3      	bne.n	8009876 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	330c      	adds	r3, #12
 80098c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ce:	f023 0310 	bic.w	r3, r3, #16
 80098d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	330c      	adds	r3, #12
 80098dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80098e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80098e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098e8:	e841 2300 	strex	r3, r2, [r1]
 80098ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1e3      	bne.n	80098bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fd f979 	bl	8006bf0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009906:	b29b      	uxth	r3, r3
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	b29b      	uxth	r3, r3
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7fc fb82 	bl	8006018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009914:	e099      	b.n	8009a4a <HAL_UART_IRQHandler+0x50e>
 8009916:	bf00      	nop
 8009918:	08009eeb 	.word	0x08009eeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009924:	b29b      	uxth	r3, r3
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009930:	b29b      	uxth	r3, r3
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 808b 	beq.w	8009a4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 8086 	beq.w	8009a4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	330c      	adds	r3, #12
 8009948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	330c      	adds	r3, #12
 8009962:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009966:	647a      	str	r2, [r7, #68]	; 0x44
 8009968:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800996c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800996e:	e841 2300 	strex	r3, r2, [r1]
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e3      	bne.n	8009942 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3314      	adds	r3, #20
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	623b      	str	r3, [r7, #32]
   return(result);
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	f023 0301 	bic.w	r3, r3, #1
 8009990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3314      	adds	r3, #20
 800999a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800999e:	633a      	str	r2, [r7, #48]	; 0x30
 80099a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1e3      	bne.n	800997a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2220      	movs	r2, #32
 80099b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	330c      	adds	r3, #12
 80099c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	e853 3f00 	ldrex	r3, [r3]
 80099ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f023 0310 	bic.w	r3, r3, #16
 80099d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	330c      	adds	r3, #12
 80099e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80099e4:	61fa      	str	r2, [r7, #28]
 80099e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e8:	69b9      	ldr	r1, [r7, #24]
 80099ea:	69fa      	ldr	r2, [r7, #28]
 80099ec:	e841 2300 	strex	r3, r2, [r1]
 80099f0:	617b      	str	r3, [r7, #20]
   return(result);
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e3      	bne.n	80099c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7fc fb0a 	bl	8006018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a04:	e023      	b.n	8009a4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d009      	beq.n	8009a26 <HAL_UART_IRQHandler+0x4ea>
 8009a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fa77 	bl	8009f12 <UART_Transmit_IT>
    return;
 8009a24:	e014      	b.n	8009a50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00e      	beq.n	8009a50 <HAL_UART_IRQHandler+0x514>
 8009a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d008      	beq.n	8009a50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fab7 	bl	8009fb2 <UART_EndTransmit_IT>
    return;
 8009a44:	e004      	b.n	8009a50 <HAL_UART_IRQHandler+0x514>
    return;
 8009a46:	bf00      	nop
 8009a48:	e002      	b.n	8009a50 <HAL_UART_IRQHandler+0x514>
      return;
 8009a4a:	bf00      	nop
 8009a4c:	e000      	b.n	8009a50 <HAL_UART_IRQHandler+0x514>
      return;
 8009a4e:	bf00      	nop
  }
}
 8009a50:	37e8      	adds	r7, #232	; 0xe8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop

08009a58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b09c      	sub	sp, #112	; 0x70
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d172      	bne.n	8009baa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	330c      	adds	r3, #12
 8009ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad4:	e853 3f00 	ldrex	r3, [r3]
 8009ad8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ae0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	330c      	adds	r3, #12
 8009ae8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009aea:	65ba      	str	r2, [r7, #88]	; 0x58
 8009aec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009af0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009af2:	e841 2300 	strex	r3, r2, [r1]
 8009af6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1e5      	bne.n	8009aca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3314      	adds	r3, #20
 8009b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	e853 3f00 	ldrex	r3, [r3]
 8009b0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b10:	f023 0301 	bic.w	r3, r3, #1
 8009b14:	667b      	str	r3, [r7, #100]	; 0x64
 8009b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3314      	adds	r3, #20
 8009b1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b1e:	647a      	str	r2, [r7, #68]	; 0x44
 8009b20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b26:	e841 2300 	strex	r3, r2, [r1]
 8009b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1e5      	bne.n	8009afe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	3314      	adds	r3, #20
 8009b38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	e853 3f00 	ldrex	r3, [r3]
 8009b40:	623b      	str	r3, [r7, #32]
   return(result);
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b48:	663b      	str	r3, [r7, #96]	; 0x60
 8009b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3314      	adds	r3, #20
 8009b50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b52:	633a      	str	r2, [r7, #48]	; 0x30
 8009b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b5a:	e841 2300 	strex	r3, r2, [r1]
 8009b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1e5      	bne.n	8009b32 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b68:	2220      	movs	r2, #32
 8009b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d119      	bne.n	8009baa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	330c      	adds	r3, #12
 8009b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f023 0310 	bic.w	r3, r3, #16
 8009b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	330c      	adds	r3, #12
 8009b94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b96:	61fa      	str	r2, [r7, #28]
 8009b98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	69b9      	ldr	r1, [r7, #24]
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e5      	bne.n	8009b76 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d106      	bne.n	8009bc0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009bba:	f7fc fa2d 	bl	8006018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009bbe:	e002      	b.n	8009bc6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009bc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009bc2:	f7ff ff53 	bl	8009a6c <HAL_UART_RxCpltCallback>
}
 8009bc6:	bf00      	nop
 8009bc8:	3770      	adds	r7, #112	; 0x70
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bda:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d108      	bne.n	8009bf6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009be8:	085b      	lsrs	r3, r3, #1
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	4619      	mov	r1, r3
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f7fc fa12 	bl	8006018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009bf4:	e002      	b.n	8009bfc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f7ff ff42 	bl	8009a80 <HAL_UART_RxHalfCpltCallback>
}
 8009bfc:	bf00      	nop
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c14:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c20:	2b80      	cmp	r3, #128	; 0x80
 8009c22:	bf0c      	ite	eq
 8009c24:	2301      	moveq	r3, #1
 8009c26:	2300      	movne	r3, #0
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b21      	cmp	r3, #33	; 0x21
 8009c36:	d108      	bne.n	8009c4a <UART_DMAError+0x46>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d005      	beq.n	8009c4a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2200      	movs	r2, #0
 8009c42:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009c44:	68b8      	ldr	r0, [r7, #8]
 8009c46:	f000 f8c5 	bl	8009dd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c54:	2b40      	cmp	r3, #64	; 0x40
 8009c56:	bf0c      	ite	eq
 8009c58:	2301      	moveq	r3, #1
 8009c5a:	2300      	movne	r3, #0
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b22      	cmp	r3, #34	; 0x22
 8009c6a:	d108      	bne.n	8009c7e <UART_DMAError+0x7a>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d005      	beq.n	8009c7e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2200      	movs	r2, #0
 8009c76:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009c78:	68b8      	ldr	r0, [r7, #8]
 8009c7a:	f000 f8d3 	bl	8009e24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c82:	f043 0210 	orr.w	r2, r3, #16
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c8a:	68b8      	ldr	r0, [r7, #8]
 8009c8c:	f7ff ff02 	bl	8009a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c90:	bf00      	nop
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b098      	sub	sp, #96	; 0x60
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	88fa      	ldrh	r2, [r7, #6]
 8009cb0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2222      	movs	r2, #34	; 0x22
 8009cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc4:	4a40      	ldr	r2, [pc, #256]	; (8009dc8 <UART_Start_Receive_DMA+0x130>)
 8009cc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ccc:	4a3f      	ldr	r2, [pc, #252]	; (8009dcc <UART_Start_Receive_DMA+0x134>)
 8009cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd4:	4a3e      	ldr	r2, [pc, #248]	; (8009dd0 <UART_Start_Receive_DMA+0x138>)
 8009cd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cdc:	2200      	movs	r2, #0
 8009cde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009ce0:	f107 0308 	add.w	r3, r7, #8
 8009ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	88fb      	ldrh	r3, [r7, #6]
 8009cf8:	f7fc ff22 	bl	8006b40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	613b      	str	r3, [r7, #16]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	613b      	str	r3, [r7, #16]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	613b      	str	r3, [r7, #16]
 8009d10:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d019      	beq.n	8009d56 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	330c      	adds	r3, #12
 8009d28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d2c:	e853 3f00 	ldrex	r3, [r3]
 8009d30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d38:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	330c      	adds	r3, #12
 8009d40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d42:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009d44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009d48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d4a:	e841 2300 	strex	r3, r2, [r1]
 8009d4e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1e5      	bne.n	8009d22 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3314      	adds	r3, #20
 8009d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d60:	e853 3f00 	ldrex	r3, [r3]
 8009d64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d68:	f043 0301 	orr.w	r3, r3, #1
 8009d6c:	657b      	str	r3, [r7, #84]	; 0x54
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3314      	adds	r3, #20
 8009d74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d76:	63ba      	str	r2, [r7, #56]	; 0x38
 8009d78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d7e:	e841 2300 	strex	r3, r2, [r1]
 8009d82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1e5      	bne.n	8009d56 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3314      	adds	r3, #20
 8009d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	e853 3f00 	ldrex	r3, [r3]
 8009d98:	617b      	str	r3, [r7, #20]
   return(result);
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da0:	653b      	str	r3, [r7, #80]	; 0x50
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	3314      	adds	r3, #20
 8009da8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009daa:	627a      	str	r2, [r7, #36]	; 0x24
 8009dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dae:	6a39      	ldr	r1, [r7, #32]
 8009db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db2:	e841 2300 	strex	r3, r2, [r1]
 8009db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1e5      	bne.n	8009d8a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3760      	adds	r7, #96	; 0x60
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	08009aa9 	.word	0x08009aa9
 8009dcc:	08009bcf 	.word	0x08009bcf
 8009dd0:	08009c05 	.word	0x08009c05

08009dd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b089      	sub	sp, #36	; 0x24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	330c      	adds	r3, #12
 8009de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	e853 3f00 	ldrex	r3, [r3]
 8009dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009df2:	61fb      	str	r3, [r7, #28]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	330c      	adds	r3, #12
 8009dfa:	69fa      	ldr	r2, [r7, #28]
 8009dfc:	61ba      	str	r2, [r7, #24]
 8009dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e00:	6979      	ldr	r1, [r7, #20]
 8009e02:	69ba      	ldr	r2, [r7, #24]
 8009e04:	e841 2300 	strex	r3, r2, [r1]
 8009e08:	613b      	str	r3, [r7, #16]
   return(result);
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1e5      	bne.n	8009ddc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2220      	movs	r2, #32
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009e18:	bf00      	nop
 8009e1a:	3724      	adds	r7, #36	; 0x24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b095      	sub	sp, #84	; 0x54
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	330c      	adds	r3, #12
 8009e32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e36:	e853 3f00 	ldrex	r3, [r3]
 8009e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	330c      	adds	r3, #12
 8009e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e4c:	643a      	str	r2, [r7, #64]	; 0x40
 8009e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e54:	e841 2300 	strex	r3, r2, [r1]
 8009e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1e5      	bne.n	8009e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	3314      	adds	r3, #20
 8009e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	e853 3f00 	ldrex	r3, [r3]
 8009e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	f023 0301 	bic.w	r3, r3, #1
 8009e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3314      	adds	r3, #20
 8009e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e88:	e841 2300 	strex	r3, r2, [r1]
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1e5      	bne.n	8009e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d119      	bne.n	8009ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	330c      	adds	r3, #12
 8009ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	e853 3f00 	ldrex	r3, [r3]
 8009eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	f023 0310 	bic.w	r3, r3, #16
 8009eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	330c      	adds	r3, #12
 8009eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ebc:	61ba      	str	r2, [r7, #24]
 8009ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec0:	6979      	ldr	r1, [r7, #20]
 8009ec2:	69ba      	ldr	r2, [r7, #24]
 8009ec4:	e841 2300 	strex	r3, r2, [r1]
 8009ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1e5      	bne.n	8009e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009ede:	bf00      	nop
 8009ee0:	3754      	adds	r7, #84	; 0x54
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f7ff fdc5 	bl	8009a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f0a:	bf00      	nop
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b085      	sub	sp, #20
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b21      	cmp	r3, #33	; 0x21
 8009f24:	d13e      	bne.n	8009fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f2e:	d114      	bne.n	8009f5a <UART_Transmit_IT+0x48>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d110      	bne.n	8009f5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	461a      	mov	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	1c9a      	adds	r2, r3, #2
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	621a      	str	r2, [r3, #32]
 8009f58:	e008      	b.n	8009f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	1c59      	adds	r1, r3, #1
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	6211      	str	r1, [r2, #32]
 8009f64:	781a      	ldrb	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	3b01      	subs	r3, #1
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10f      	bne.n	8009fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68da      	ldr	r2, [r3, #12]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	e000      	b.n	8009fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009fa4:	2302      	movs	r3, #2
  }
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b082      	sub	sp, #8
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68da      	ldr	r2, [r3, #12]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7ff fd40 	bl	8009a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b08c      	sub	sp, #48	; 0x30
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b22      	cmp	r3, #34	; 0x22
 8009ff4:	f040 80ab 	bne.w	800a14e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a000:	d117      	bne.n	800a032 <UART_Receive_IT+0x50>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d113      	bne.n	800a032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a012:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a020:	b29a      	uxth	r2, r3
 800a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02a:	1c9a      	adds	r2, r3, #2
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	629a      	str	r2, [r3, #40]	; 0x28
 800a030:	e026      	b.n	800a080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a036:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a044:	d007      	beq.n	800a056 <UART_Receive_IT+0x74>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10a      	bne.n	800a064 <UART_Receive_IT+0x82>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d106      	bne.n	800a064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a060:	701a      	strb	r2, [r3, #0]
 800a062:	e008      	b.n	800a076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a070:	b2da      	uxtb	r2, r3
 800a072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07a:	1c5a      	adds	r2, r3, #1
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a084:	b29b      	uxth	r3, r3
 800a086:	3b01      	subs	r3, #1
 800a088:	b29b      	uxth	r3, r3
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	4619      	mov	r1, r3
 800a08e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a090:	2b00      	cmp	r3, #0
 800a092:	d15a      	bne.n	800a14a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68da      	ldr	r2, [r3, #12]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f022 0220 	bic.w	r2, r2, #32
 800a0a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68da      	ldr	r2, [r3, #12]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a0b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	695a      	ldr	r2, [r3, #20]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f022 0201 	bic.w	r2, r2, #1
 800a0c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d135      	bne.n	800a140 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	330c      	adds	r3, #12
 800a0e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	f023 0310 	bic.w	r3, r3, #16
 800a0f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	330c      	adds	r3, #12
 800a0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fa:	623a      	str	r2, [r7, #32]
 800a0fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fe:	69f9      	ldr	r1, [r7, #28]
 800a100:	6a3a      	ldr	r2, [r7, #32]
 800a102:	e841 2300 	strex	r3, r2, [r1]
 800a106:	61bb      	str	r3, [r7, #24]
   return(result);
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1e5      	bne.n	800a0da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0310 	and.w	r3, r3, #16
 800a118:	2b10      	cmp	r3, #16
 800a11a:	d10a      	bne.n	800a132 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7fb ff6d 	bl	8006018 <HAL_UARTEx_RxEventCallback>
 800a13e:	e002      	b.n	800a146 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7ff fc93 	bl	8009a6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a146:	2300      	movs	r3, #0
 800a148:	e002      	b.n	800a150 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	e000      	b.n	800a150 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a14e:	2302      	movs	r3, #2
  }
}
 800a150:	4618      	mov	r0, r3
 800a152:	3730      	adds	r7, #48	; 0x30
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a15c:	b0c0      	sub	sp, #256	; 0x100
 800a15e:	af00      	add	r7, sp, #0
 800a160:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a174:	68d9      	ldr	r1, [r3, #12]
 800a176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	ea40 0301 	orr.w	r3, r0, r1
 800a180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a186:	689a      	ldr	r2, [r3, #8]
 800a188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	431a      	orrs	r2, r3
 800a190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	431a      	orrs	r2, r3
 800a198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a1b0:	f021 010c 	bic.w	r1, r1, #12
 800a1b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a1be:	430b      	orrs	r3, r1
 800a1c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a1ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1d2:	6999      	ldr	r1, [r3, #24]
 800a1d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	ea40 0301 	orr.w	r3, r0, r1
 800a1de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a1e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	4b8f      	ldr	r3, [pc, #572]	; (800a424 <UART_SetConfig+0x2cc>)
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d005      	beq.n	800a1f8 <UART_SetConfig+0xa0>
 800a1ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	4b8d      	ldr	r3, [pc, #564]	; (800a428 <UART_SetConfig+0x2d0>)
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d104      	bne.n	800a202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a1f8:	f7fd fe0a 	bl	8007e10 <HAL_RCC_GetPCLK2Freq>
 800a1fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a200:	e003      	b.n	800a20a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a202:	f7fd fdf1 	bl	8007de8 <HAL_RCC_GetPCLK1Freq>
 800a206:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a20a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a20e:	69db      	ldr	r3, [r3, #28]
 800a210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a214:	f040 810c 	bne.w	800a430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a21c:	2200      	movs	r2, #0
 800a21e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a222:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a22a:	4622      	mov	r2, r4
 800a22c:	462b      	mov	r3, r5
 800a22e:	1891      	adds	r1, r2, r2
 800a230:	65b9      	str	r1, [r7, #88]	; 0x58
 800a232:	415b      	adcs	r3, r3
 800a234:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a23a:	4621      	mov	r1, r4
 800a23c:	eb12 0801 	adds.w	r8, r2, r1
 800a240:	4629      	mov	r1, r5
 800a242:	eb43 0901 	adc.w	r9, r3, r1
 800a246:	f04f 0200 	mov.w	r2, #0
 800a24a:	f04f 0300 	mov.w	r3, #0
 800a24e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a25a:	4690      	mov	r8, r2
 800a25c:	4699      	mov	r9, r3
 800a25e:	4623      	mov	r3, r4
 800a260:	eb18 0303 	adds.w	r3, r8, r3
 800a264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a268:	462b      	mov	r3, r5
 800a26a:	eb49 0303 	adc.w	r3, r9, r3
 800a26e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a27e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a286:	460b      	mov	r3, r1
 800a288:	18db      	adds	r3, r3, r3
 800a28a:	653b      	str	r3, [r7, #80]	; 0x50
 800a28c:	4613      	mov	r3, r2
 800a28e:	eb42 0303 	adc.w	r3, r2, r3
 800a292:	657b      	str	r3, [r7, #84]	; 0x54
 800a294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a29c:	f7f6 fc94 	bl	8000bc8 <__aeabi_uldivmod>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4b61      	ldr	r3, [pc, #388]	; (800a42c <UART_SetConfig+0x2d4>)
 800a2a6:	fba3 2302 	umull	r2, r3, r3, r2
 800a2aa:	095b      	lsrs	r3, r3, #5
 800a2ac:	011c      	lsls	r4, r3, #4
 800a2ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a2bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a2c0:	4642      	mov	r2, r8
 800a2c2:	464b      	mov	r3, r9
 800a2c4:	1891      	adds	r1, r2, r2
 800a2c6:	64b9      	str	r1, [r7, #72]	; 0x48
 800a2c8:	415b      	adcs	r3, r3
 800a2ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a2d0:	4641      	mov	r1, r8
 800a2d2:	eb12 0a01 	adds.w	sl, r2, r1
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	eb43 0b01 	adc.w	fp, r3, r1
 800a2dc:	f04f 0200 	mov.w	r2, #0
 800a2e0:	f04f 0300 	mov.w	r3, #0
 800a2e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a2e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a2ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a2f0:	4692      	mov	sl, r2
 800a2f2:	469b      	mov	fp, r3
 800a2f4:	4643      	mov	r3, r8
 800a2f6:	eb1a 0303 	adds.w	r3, sl, r3
 800a2fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a2fe:	464b      	mov	r3, r9
 800a300:	eb4b 0303 	adc.w	r3, fp, r3
 800a304:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a314:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a31c:	460b      	mov	r3, r1
 800a31e:	18db      	adds	r3, r3, r3
 800a320:	643b      	str	r3, [r7, #64]	; 0x40
 800a322:	4613      	mov	r3, r2
 800a324:	eb42 0303 	adc.w	r3, r2, r3
 800a328:	647b      	str	r3, [r7, #68]	; 0x44
 800a32a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a32e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a332:	f7f6 fc49 	bl	8000bc8 <__aeabi_uldivmod>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4611      	mov	r1, r2
 800a33c:	4b3b      	ldr	r3, [pc, #236]	; (800a42c <UART_SetConfig+0x2d4>)
 800a33e:	fba3 2301 	umull	r2, r3, r3, r1
 800a342:	095b      	lsrs	r3, r3, #5
 800a344:	2264      	movs	r2, #100	; 0x64
 800a346:	fb02 f303 	mul.w	r3, r2, r3
 800a34a:	1acb      	subs	r3, r1, r3
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a352:	4b36      	ldr	r3, [pc, #216]	; (800a42c <UART_SetConfig+0x2d4>)
 800a354:	fba3 2302 	umull	r2, r3, r3, r2
 800a358:	095b      	lsrs	r3, r3, #5
 800a35a:	005b      	lsls	r3, r3, #1
 800a35c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a360:	441c      	add	r4, r3
 800a362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a366:	2200      	movs	r2, #0
 800a368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a36c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a374:	4642      	mov	r2, r8
 800a376:	464b      	mov	r3, r9
 800a378:	1891      	adds	r1, r2, r2
 800a37a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a37c:	415b      	adcs	r3, r3
 800a37e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a384:	4641      	mov	r1, r8
 800a386:	1851      	adds	r1, r2, r1
 800a388:	6339      	str	r1, [r7, #48]	; 0x30
 800a38a:	4649      	mov	r1, r9
 800a38c:	414b      	adcs	r3, r1
 800a38e:	637b      	str	r3, [r7, #52]	; 0x34
 800a390:	f04f 0200 	mov.w	r2, #0
 800a394:	f04f 0300 	mov.w	r3, #0
 800a398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a39c:	4659      	mov	r1, fp
 800a39e:	00cb      	lsls	r3, r1, #3
 800a3a0:	4651      	mov	r1, sl
 800a3a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3a6:	4651      	mov	r1, sl
 800a3a8:	00ca      	lsls	r2, r1, #3
 800a3aa:	4610      	mov	r0, r2
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	4642      	mov	r2, r8
 800a3b2:	189b      	adds	r3, r3, r2
 800a3b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3b8:	464b      	mov	r3, r9
 800a3ba:	460a      	mov	r2, r1
 800a3bc:	eb42 0303 	adc.w	r3, r2, r3
 800a3c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a3c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a3d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a3d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a3d8:	460b      	mov	r3, r1
 800a3da:	18db      	adds	r3, r3, r3
 800a3dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3de:	4613      	mov	r3, r2
 800a3e0:	eb42 0303 	adc.w	r3, r2, r3
 800a3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a3ee:	f7f6 fbeb 	bl	8000bc8 <__aeabi_uldivmod>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4b0d      	ldr	r3, [pc, #52]	; (800a42c <UART_SetConfig+0x2d4>)
 800a3f8:	fba3 1302 	umull	r1, r3, r3, r2
 800a3fc:	095b      	lsrs	r3, r3, #5
 800a3fe:	2164      	movs	r1, #100	; 0x64
 800a400:	fb01 f303 	mul.w	r3, r1, r3
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	00db      	lsls	r3, r3, #3
 800a408:	3332      	adds	r3, #50	; 0x32
 800a40a:	4a08      	ldr	r2, [pc, #32]	; (800a42c <UART_SetConfig+0x2d4>)
 800a40c:	fba2 2303 	umull	r2, r3, r2, r3
 800a410:	095b      	lsrs	r3, r3, #5
 800a412:	f003 0207 	and.w	r2, r3, #7
 800a416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4422      	add	r2, r4
 800a41e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a420:	e105      	b.n	800a62e <UART_SetConfig+0x4d6>
 800a422:	bf00      	nop
 800a424:	40011000 	.word	0x40011000
 800a428:	40011400 	.word	0x40011400
 800a42c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a434:	2200      	movs	r2, #0
 800a436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a43a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a43e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a442:	4642      	mov	r2, r8
 800a444:	464b      	mov	r3, r9
 800a446:	1891      	adds	r1, r2, r2
 800a448:	6239      	str	r1, [r7, #32]
 800a44a:	415b      	adcs	r3, r3
 800a44c:	627b      	str	r3, [r7, #36]	; 0x24
 800a44e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a452:	4641      	mov	r1, r8
 800a454:	1854      	adds	r4, r2, r1
 800a456:	4649      	mov	r1, r9
 800a458:	eb43 0501 	adc.w	r5, r3, r1
 800a45c:	f04f 0200 	mov.w	r2, #0
 800a460:	f04f 0300 	mov.w	r3, #0
 800a464:	00eb      	lsls	r3, r5, #3
 800a466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a46a:	00e2      	lsls	r2, r4, #3
 800a46c:	4614      	mov	r4, r2
 800a46e:	461d      	mov	r5, r3
 800a470:	4643      	mov	r3, r8
 800a472:	18e3      	adds	r3, r4, r3
 800a474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a478:	464b      	mov	r3, r9
 800a47a:	eb45 0303 	adc.w	r3, r5, r3
 800a47e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a48e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a492:	f04f 0200 	mov.w	r2, #0
 800a496:	f04f 0300 	mov.w	r3, #0
 800a49a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a49e:	4629      	mov	r1, r5
 800a4a0:	008b      	lsls	r3, r1, #2
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	008a      	lsls	r2, r1, #2
 800a4ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a4b0:	f7f6 fb8a 	bl	8000bc8 <__aeabi_uldivmod>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4b60      	ldr	r3, [pc, #384]	; (800a63c <UART_SetConfig+0x4e4>)
 800a4ba:	fba3 2302 	umull	r2, r3, r3, r2
 800a4be:	095b      	lsrs	r3, r3, #5
 800a4c0:	011c      	lsls	r4, r3, #4
 800a4c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a4cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a4d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a4d4:	4642      	mov	r2, r8
 800a4d6:	464b      	mov	r3, r9
 800a4d8:	1891      	adds	r1, r2, r2
 800a4da:	61b9      	str	r1, [r7, #24]
 800a4dc:	415b      	adcs	r3, r3
 800a4de:	61fb      	str	r3, [r7, #28]
 800a4e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a4e4:	4641      	mov	r1, r8
 800a4e6:	1851      	adds	r1, r2, r1
 800a4e8:	6139      	str	r1, [r7, #16]
 800a4ea:	4649      	mov	r1, r9
 800a4ec:	414b      	adcs	r3, r1
 800a4ee:	617b      	str	r3, [r7, #20]
 800a4f0:	f04f 0200 	mov.w	r2, #0
 800a4f4:	f04f 0300 	mov.w	r3, #0
 800a4f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a4fc:	4659      	mov	r1, fp
 800a4fe:	00cb      	lsls	r3, r1, #3
 800a500:	4651      	mov	r1, sl
 800a502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a506:	4651      	mov	r1, sl
 800a508:	00ca      	lsls	r2, r1, #3
 800a50a:	4610      	mov	r0, r2
 800a50c:	4619      	mov	r1, r3
 800a50e:	4603      	mov	r3, r0
 800a510:	4642      	mov	r2, r8
 800a512:	189b      	adds	r3, r3, r2
 800a514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a518:	464b      	mov	r3, r9
 800a51a:	460a      	mov	r2, r1
 800a51c:	eb42 0303 	adc.w	r3, r2, r3
 800a520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a52e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a530:	f04f 0200 	mov.w	r2, #0
 800a534:	f04f 0300 	mov.w	r3, #0
 800a538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a53c:	4649      	mov	r1, r9
 800a53e:	008b      	lsls	r3, r1, #2
 800a540:	4641      	mov	r1, r8
 800a542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a546:	4641      	mov	r1, r8
 800a548:	008a      	lsls	r2, r1, #2
 800a54a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a54e:	f7f6 fb3b 	bl	8000bc8 <__aeabi_uldivmod>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	4b39      	ldr	r3, [pc, #228]	; (800a63c <UART_SetConfig+0x4e4>)
 800a558:	fba3 1302 	umull	r1, r3, r3, r2
 800a55c:	095b      	lsrs	r3, r3, #5
 800a55e:	2164      	movs	r1, #100	; 0x64
 800a560:	fb01 f303 	mul.w	r3, r1, r3
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	3332      	adds	r3, #50	; 0x32
 800a56a:	4a34      	ldr	r2, [pc, #208]	; (800a63c <UART_SetConfig+0x4e4>)
 800a56c:	fba2 2303 	umull	r2, r3, r2, r3
 800a570:	095b      	lsrs	r3, r3, #5
 800a572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a576:	441c      	add	r4, r3
 800a578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a57c:	2200      	movs	r2, #0
 800a57e:	673b      	str	r3, [r7, #112]	; 0x70
 800a580:	677a      	str	r2, [r7, #116]	; 0x74
 800a582:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a586:	4642      	mov	r2, r8
 800a588:	464b      	mov	r3, r9
 800a58a:	1891      	adds	r1, r2, r2
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	415b      	adcs	r3, r3
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a596:	4641      	mov	r1, r8
 800a598:	1851      	adds	r1, r2, r1
 800a59a:	6039      	str	r1, [r7, #0]
 800a59c:	4649      	mov	r1, r9
 800a59e:	414b      	adcs	r3, r1
 800a5a0:	607b      	str	r3, [r7, #4]
 800a5a2:	f04f 0200 	mov.w	r2, #0
 800a5a6:	f04f 0300 	mov.w	r3, #0
 800a5aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a5ae:	4659      	mov	r1, fp
 800a5b0:	00cb      	lsls	r3, r1, #3
 800a5b2:	4651      	mov	r1, sl
 800a5b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5b8:	4651      	mov	r1, sl
 800a5ba:	00ca      	lsls	r2, r1, #3
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	4642      	mov	r2, r8
 800a5c4:	189b      	adds	r3, r3, r2
 800a5c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5c8:	464b      	mov	r3, r9
 800a5ca:	460a      	mov	r2, r1
 800a5cc:	eb42 0303 	adc.w	r3, r2, r3
 800a5d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a5d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	663b      	str	r3, [r7, #96]	; 0x60
 800a5dc:	667a      	str	r2, [r7, #100]	; 0x64
 800a5de:	f04f 0200 	mov.w	r2, #0
 800a5e2:	f04f 0300 	mov.w	r3, #0
 800a5e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	008b      	lsls	r3, r1, #2
 800a5ee:	4641      	mov	r1, r8
 800a5f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5f4:	4641      	mov	r1, r8
 800a5f6:	008a      	lsls	r2, r1, #2
 800a5f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a5fc:	f7f6 fae4 	bl	8000bc8 <__aeabi_uldivmod>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <UART_SetConfig+0x4e4>)
 800a606:	fba3 1302 	umull	r1, r3, r3, r2
 800a60a:	095b      	lsrs	r3, r3, #5
 800a60c:	2164      	movs	r1, #100	; 0x64
 800a60e:	fb01 f303 	mul.w	r3, r1, r3
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	011b      	lsls	r3, r3, #4
 800a616:	3332      	adds	r3, #50	; 0x32
 800a618:	4a08      	ldr	r2, [pc, #32]	; (800a63c <UART_SetConfig+0x4e4>)
 800a61a:	fba2 2303 	umull	r2, r3, r2, r3
 800a61e:	095b      	lsrs	r3, r3, #5
 800a620:	f003 020f 	and.w	r2, r3, #15
 800a624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4422      	add	r2, r4
 800a62c:	609a      	str	r2, [r3, #8]
}
 800a62e:	bf00      	nop
 800a630:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a634:	46bd      	mov	sp, r7
 800a636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a63a:	bf00      	nop
 800a63c:	51eb851f 	.word	0x51eb851f

0800a640 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a644:	4904      	ldr	r1, [pc, #16]	; (800a658 <MX_FATFS_Init+0x18>)
 800a646:	4805      	ldr	r0, [pc, #20]	; (800a65c <MX_FATFS_Init+0x1c>)
 800a648:	f003 f8ae 	bl	800d7a8 <FATFS_LinkDriver>
 800a64c:	4603      	mov	r3, r0
 800a64e:	461a      	mov	r2, r3
 800a650:	4b03      	ldr	r3, [pc, #12]	; (800a660 <MX_FATFS_Init+0x20>)
 800a652:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a654:	bf00      	nop
 800a656:	bd80      	pop	{r7, pc}
 800a658:	200008ac 	.word	0x200008ac
 800a65c:	200000fc 	.word	0x200000fc
 800a660:	200008a8 	.word	0x200008a8

0800a664 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a664:	b480      	push	{r7}
 800a666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a668:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 800a67e:	79fb      	ldrb	r3, [r7, #7]
 800a680:	4618      	mov	r0, r3
 800a682:	f7fa fcc3 	bl	800500c <SD_disk_initialize>
 800a686:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 800a69a:	79fb      	ldrb	r3, [r7, #7]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fa fd9f 	bl	80051e0 <SD_disk_status>
 800a6a2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60b9      	str	r1, [r7, #8]
 800a6b4:	607a      	str	r2, [r7, #4]
 800a6b6:	603b      	str	r3, [r7, #0]
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 800a6bc:	7bf8      	ldrb	r0, [r7, #15]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	68b9      	ldr	r1, [r7, #8]
 800a6c4:	f7fa fda2 	bl	800520c <SD_disk_read>
 800a6c8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b084      	sub	sp, #16
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
 800a6dc:	603b      	str	r3, [r7, #0]
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800a6e2:	7bf8      	ldrb	r0, [r7, #15]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	68b9      	ldr	r1, [r7, #8]
 800a6ea:	f7fa fdf9 	bl	80052e0 <SD_disk_write>
 800a6ee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	603a      	str	r2, [r7, #0]
 800a702:	71fb      	strb	r3, [r7, #7]
 800a704:	460b      	mov	r3, r1
 800a706:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a708:	79b9      	ldrb	r1, [r7, #6]
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fa fe6a 	bl	80053e8 <SD_disk_ioctl>
 800a714:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a72a:	79fb      	ldrb	r3, [r7, #7]
 800a72c:	4a08      	ldr	r2, [pc, #32]	; (800a750 <disk_status+0x30>)
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	79fa      	ldrb	r2, [r7, #7]
 800a738:	4905      	ldr	r1, [pc, #20]	; (800a750 <disk_status+0x30>)
 800a73a:	440a      	add	r2, r1
 800a73c:	7a12      	ldrb	r2, [r2, #8]
 800a73e:	4610      	mov	r0, r2
 800a740:	4798      	blx	r3
 800a742:	4603      	mov	r3, r0
 800a744:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a746:	7bfb      	ldrb	r3, [r7, #15]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	20000b08 	.word	0x20000b08

0800a754 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a762:	79fb      	ldrb	r3, [r7, #7]
 800a764:	4a0d      	ldr	r2, [pc, #52]	; (800a79c <disk_initialize+0x48>)
 800a766:	5cd3      	ldrb	r3, [r2, r3]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d111      	bne.n	800a790 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a76c:	79fb      	ldrb	r3, [r7, #7]
 800a76e:	4a0b      	ldr	r2, [pc, #44]	; (800a79c <disk_initialize+0x48>)
 800a770:	2101      	movs	r1, #1
 800a772:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	4a09      	ldr	r2, [pc, #36]	; (800a79c <disk_initialize+0x48>)
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	79fa      	ldrb	r2, [r7, #7]
 800a782:	4906      	ldr	r1, [pc, #24]	; (800a79c <disk_initialize+0x48>)
 800a784:	440a      	add	r2, r1
 800a786:	7a12      	ldrb	r2, [r2, #8]
 800a788:	4610      	mov	r0, r2
 800a78a:	4798      	blx	r3
 800a78c:	4603      	mov	r3, r0
 800a78e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a790:	7bfb      	ldrb	r3, [r7, #15]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20000b08 	.word	0x20000b08

0800a7a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a7a0:	b590      	push	{r4, r7, lr}
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60b9      	str	r1, [r7, #8]
 800a7a8:	607a      	str	r2, [r7, #4]
 800a7aa:	603b      	str	r3, [r7, #0]
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	4a0a      	ldr	r2, [pc, #40]	; (800a7dc <disk_read+0x3c>)
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	689c      	ldr	r4, [r3, #8]
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	4a07      	ldr	r2, [pc, #28]	; (800a7dc <disk_read+0x3c>)
 800a7c0:	4413      	add	r3, r2
 800a7c2:	7a18      	ldrb	r0, [r3, #8]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	47a0      	blx	r4
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	371c      	adds	r7, #28
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd90      	pop	{r4, r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20000b08 	.word	0x20000b08

0800a7e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a7e0:	b590      	push	{r4, r7, lr}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60b9      	str	r1, [r7, #8]
 800a7e8:	607a      	str	r2, [r7, #4]
 800a7ea:	603b      	str	r3, [r7, #0]
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
 800a7f2:	4a0a      	ldr	r2, [pc, #40]	; (800a81c <disk_write+0x3c>)
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	68dc      	ldr	r4, [r3, #12]
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	4a07      	ldr	r2, [pc, #28]	; (800a81c <disk_write+0x3c>)
 800a800:	4413      	add	r3, r2
 800a802:	7a18      	ldrb	r0, [r3, #8]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	68b9      	ldr	r1, [r7, #8]
 800a80a:	47a0      	blx	r4
 800a80c:	4603      	mov	r3, r0
 800a80e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a810:	7dfb      	ldrb	r3, [r7, #23]
}
 800a812:	4618      	mov	r0, r3
 800a814:	371c      	adds	r7, #28
 800a816:	46bd      	mov	sp, r7
 800a818:	bd90      	pop	{r4, r7, pc}
 800a81a:	bf00      	nop
 800a81c:	20000b08 	.word	0x20000b08

0800a820 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	603a      	str	r2, [r7, #0]
 800a82a:	71fb      	strb	r3, [r7, #7]
 800a82c:	460b      	mov	r3, r1
 800a82e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a830:	79fb      	ldrb	r3, [r7, #7]
 800a832:	4a09      	ldr	r2, [pc, #36]	; (800a858 <disk_ioctl+0x38>)
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	79fa      	ldrb	r2, [r7, #7]
 800a83e:	4906      	ldr	r1, [pc, #24]	; (800a858 <disk_ioctl+0x38>)
 800a840:	440a      	add	r2, r1
 800a842:	7a10      	ldrb	r0, [r2, #8]
 800a844:	79b9      	ldrb	r1, [r7, #6]
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	4798      	blx	r3
 800a84a:	4603      	mov	r3, r0
 800a84c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20000b08 	.word	0x20000b08

0800a85c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3301      	adds	r3, #1
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a86c:	89fb      	ldrh	r3, [r7, #14]
 800a86e:	021b      	lsls	r3, r3, #8
 800a870:	b21a      	sxth	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	b21b      	sxth	r3, r3
 800a878:	4313      	orrs	r3, r2
 800a87a:	b21b      	sxth	r3, r3
 800a87c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a87e:	89fb      	ldrh	r3, [r7, #14]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	3303      	adds	r3, #3
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	021b      	lsls	r3, r3, #8
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	3202      	adds	r2, #2
 800a8a4:	7812      	ldrb	r2, [r2, #0]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	3201      	adds	r2, #1
 800a8b2:	7812      	ldrb	r2, [r2, #0]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	021b      	lsls	r3, r3, #8
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	7812      	ldrb	r2, [r2, #0]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	1c5a      	adds	r2, r3, #1
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	887a      	ldrh	r2, [r7, #2]
 800a8e6:	b2d2      	uxtb	r2, r2
 800a8e8:	701a      	strb	r2, [r3, #0]
 800a8ea:	887b      	ldrh	r3, [r7, #2]
 800a8ec:	0a1b      	lsrs	r3, r3, #8
 800a8ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	1c5a      	adds	r2, r3, #1
 800a8f4:	607a      	str	r2, [r7, #4]
 800a8f6:	887a      	ldrh	r2, [r7, #2]
 800a8f8:	b2d2      	uxtb	r2, r2
 800a8fa:	701a      	strb	r2, [r3, #0]
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	b2d2      	uxtb	r2, r2
 800a91c:	701a      	strb	r2, [r3, #0]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	0a1b      	lsrs	r3, r3, #8
 800a922:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	607a      	str	r2, [r7, #4]
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	b2d2      	uxtb	r2, r2
 800a92e:	701a      	strb	r2, [r3, #0]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	0a1b      	lsrs	r3, r3, #8
 800a934:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	b2d2      	uxtb	r2, r2
 800a940:	701a      	strb	r2, [r3, #0]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	0a1b      	lsrs	r3, r3, #8
 800a946:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	1c5a      	adds	r2, r3, #1
 800a94c:	607a      	str	r2, [r7, #4]
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	b2d2      	uxtb	r2, r2
 800a952:	701a      	strb	r2, [r3, #0]
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a960:	b480      	push	{r7}
 800a962:	b087      	sub	sp, #28
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00d      	beq.n	800a996 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	1c53      	adds	r3, r2, #1
 800a97e:	613b      	str	r3, [r7, #16]
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	1c59      	adds	r1, r3, #1
 800a984:	6179      	str	r1, [r7, #20]
 800a986:	7812      	ldrb	r2, [r2, #0]
 800a988:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3b01      	subs	r3, #1
 800a98e:	607b      	str	r3, [r7, #4]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1f1      	bne.n	800a97a <mem_cpy+0x1a>
	}
}
 800a996:	bf00      	nop
 800a998:	371c      	adds	r7, #28
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a9a2:	b480      	push	{r7}
 800a9a4:	b087      	sub	sp, #28
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	60b9      	str	r1, [r7, #8]
 800a9ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	1c5a      	adds	r2, r3, #1
 800a9b6:	617a      	str	r2, [r7, #20]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	b2d2      	uxtb	r2, r2
 800a9bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	607b      	str	r3, [r7, #4]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1f3      	bne.n	800a9b2 <mem_set+0x10>
}
 800a9ca:	bf00      	nop
 800a9cc:	bf00      	nop
 800a9ce:	371c      	adds	r7, #28
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a9d8:	b480      	push	{r7}
 800a9da:	b089      	sub	sp, #36	; 0x24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	61fb      	str	r3, [r7, #28]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	61fa      	str	r2, [r7, #28]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	61ba      	str	r2, [r7, #24]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	1acb      	subs	r3, r1, r3
 800aa04:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	607b      	str	r3, [r7, #4]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <mem_cmp+0x40>
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d0eb      	beq.n	800a9f0 <mem_cmp+0x18>

	return r;
 800aa18:	697b      	ldr	r3, [r7, #20]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3724      	adds	r7, #36	; 0x24
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aa30:	e002      	b.n	800aa38 <chk_chr+0x12>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3301      	adds	r3, #1
 800aa36:	607b      	str	r3, [r7, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d005      	beq.n	800aa4c <chk_chr+0x26>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	461a      	mov	r2, r3
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d1f2      	bne.n	800aa32 <chk_chr+0xc>
	return *str;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aa66:	2300      	movs	r3, #0
 800aa68:	60bb      	str	r3, [r7, #8]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	e029      	b.n	800aac4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aa70:	4a27      	ldr	r2, [pc, #156]	; (800ab10 <chk_lock+0xb4>)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	011b      	lsls	r3, r3, #4
 800aa76:	4413      	add	r3, r2
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d01d      	beq.n	800aaba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aa7e:	4a24      	ldr	r2, [pc, #144]	; (800ab10 <chk_lock+0xb4>)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	011b      	lsls	r3, r3, #4
 800aa84:	4413      	add	r3, r2
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d116      	bne.n	800aabe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aa90:	4a1f      	ldr	r2, [pc, #124]	; (800ab10 <chk_lock+0xb4>)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	011b      	lsls	r3, r3, #4
 800aa96:	4413      	add	r3, r2
 800aa98:	3304      	adds	r3, #4
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d10c      	bne.n	800aabe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aaa4:	4a1a      	ldr	r2, [pc, #104]	; (800ab10 <chk_lock+0xb4>)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	011b      	lsls	r3, r3, #4
 800aaaa:	4413      	add	r3, r2
 800aaac:	3308      	adds	r3, #8
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d102      	bne.n	800aabe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aab8:	e007      	b.n	800aaca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aaba:	2301      	movs	r3, #1
 800aabc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	3301      	adds	r3, #1
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b04      	cmp	r3, #4
 800aac8:	d9d2      	bls.n	800aa70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2b05      	cmp	r3, #5
 800aace:	d109      	bne.n	800aae4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d102      	bne.n	800aadc <chk_lock+0x80>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d101      	bne.n	800aae0 <chk_lock+0x84>
 800aadc:	2300      	movs	r3, #0
 800aade:	e010      	b.n	800ab02 <chk_lock+0xa6>
 800aae0:	2312      	movs	r3, #18
 800aae2:	e00e      	b.n	800ab02 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d108      	bne.n	800aafc <chk_lock+0xa0>
 800aaea:	4a09      	ldr	r2, [pc, #36]	; (800ab10 <chk_lock+0xb4>)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	011b      	lsls	r3, r3, #4
 800aaf0:	4413      	add	r3, r2
 800aaf2:	330c      	adds	r3, #12
 800aaf4:	881b      	ldrh	r3, [r3, #0]
 800aaf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aafa:	d101      	bne.n	800ab00 <chk_lock+0xa4>
 800aafc:	2310      	movs	r3, #16
 800aafe:	e000      	b.n	800ab02 <chk_lock+0xa6>
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	200008b8 	.word	0x200008b8

0800ab14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	607b      	str	r3, [r7, #4]
 800ab1e:	e002      	b.n	800ab26 <enq_lock+0x12>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3301      	adds	r3, #1
 800ab24:	607b      	str	r3, [r7, #4]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b04      	cmp	r3, #4
 800ab2a:	d806      	bhi.n	800ab3a <enq_lock+0x26>
 800ab2c:	4a09      	ldr	r2, [pc, #36]	; (800ab54 <enq_lock+0x40>)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	011b      	lsls	r3, r3, #4
 800ab32:	4413      	add	r3, r2
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d1f2      	bne.n	800ab20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b05      	cmp	r3, #5
 800ab3e:	bf14      	ite	ne
 800ab40:	2301      	movne	r3, #1
 800ab42:	2300      	moveq	r3, #0
 800ab44:	b2db      	uxtb	r3, r3
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	200008b8 	.word	0x200008b8

0800ab58 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ab62:	2300      	movs	r3, #0
 800ab64:	60fb      	str	r3, [r7, #12]
 800ab66:	e01f      	b.n	800aba8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ab68:	4a41      	ldr	r2, [pc, #260]	; (800ac70 <inc_lock+0x118>)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	011b      	lsls	r3, r3, #4
 800ab6e:	4413      	add	r3, r2
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d113      	bne.n	800aba2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ab7a:	4a3d      	ldr	r2, [pc, #244]	; (800ac70 <inc_lock+0x118>)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	011b      	lsls	r3, r3, #4
 800ab80:	4413      	add	r3, r2
 800ab82:	3304      	adds	r3, #4
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d109      	bne.n	800aba2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ab8e:	4a38      	ldr	r2, [pc, #224]	; (800ac70 <inc_lock+0x118>)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	011b      	lsls	r3, r3, #4
 800ab94:	4413      	add	r3, r2
 800ab96:	3308      	adds	r3, #8
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d006      	beq.n	800abb0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3301      	adds	r3, #1
 800aba6:	60fb      	str	r3, [r7, #12]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2b04      	cmp	r3, #4
 800abac:	d9dc      	bls.n	800ab68 <inc_lock+0x10>
 800abae:	e000      	b.n	800abb2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800abb0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2b05      	cmp	r3, #5
 800abb6:	d132      	bne.n	800ac1e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800abb8:	2300      	movs	r3, #0
 800abba:	60fb      	str	r3, [r7, #12]
 800abbc:	e002      	b.n	800abc4 <inc_lock+0x6c>
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	3301      	adds	r3, #1
 800abc2:	60fb      	str	r3, [r7, #12]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2b04      	cmp	r3, #4
 800abc8:	d806      	bhi.n	800abd8 <inc_lock+0x80>
 800abca:	4a29      	ldr	r2, [pc, #164]	; (800ac70 <inc_lock+0x118>)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	011b      	lsls	r3, r3, #4
 800abd0:	4413      	add	r3, r2
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1f2      	bne.n	800abbe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2b05      	cmp	r3, #5
 800abdc:	d101      	bne.n	800abe2 <inc_lock+0x8a>
 800abde:	2300      	movs	r3, #0
 800abe0:	e040      	b.n	800ac64 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	4922      	ldr	r1, [pc, #136]	; (800ac70 <inc_lock+0x118>)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	011b      	lsls	r3, r3, #4
 800abec:	440b      	add	r3, r1
 800abee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	689a      	ldr	r2, [r3, #8]
 800abf4:	491e      	ldr	r1, [pc, #120]	; (800ac70 <inc_lock+0x118>)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	011b      	lsls	r3, r3, #4
 800abfa:	440b      	add	r3, r1
 800abfc:	3304      	adds	r3, #4
 800abfe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	695a      	ldr	r2, [r3, #20]
 800ac04:	491a      	ldr	r1, [pc, #104]	; (800ac70 <inc_lock+0x118>)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	011b      	lsls	r3, r3, #4
 800ac0a:	440b      	add	r3, r1
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ac10:	4a17      	ldr	r2, [pc, #92]	; (800ac70 <inc_lock+0x118>)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	011b      	lsls	r3, r3, #4
 800ac16:	4413      	add	r3, r2
 800ac18:	330c      	adds	r3, #12
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d009      	beq.n	800ac38 <inc_lock+0xe0>
 800ac24:	4a12      	ldr	r2, [pc, #72]	; (800ac70 <inc_lock+0x118>)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	011b      	lsls	r3, r3, #4
 800ac2a:	4413      	add	r3, r2
 800ac2c:	330c      	adds	r3, #12
 800ac2e:	881b      	ldrh	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <inc_lock+0xe0>
 800ac34:	2300      	movs	r3, #0
 800ac36:	e015      	b.n	800ac64 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d108      	bne.n	800ac50 <inc_lock+0xf8>
 800ac3e:	4a0c      	ldr	r2, [pc, #48]	; (800ac70 <inc_lock+0x118>)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	011b      	lsls	r3, r3, #4
 800ac44:	4413      	add	r3, r2
 800ac46:	330c      	adds	r3, #12
 800ac48:	881b      	ldrh	r3, [r3, #0]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	e001      	b.n	800ac54 <inc_lock+0xfc>
 800ac50:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac54:	4906      	ldr	r1, [pc, #24]	; (800ac70 <inc_lock+0x118>)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	011b      	lsls	r3, r3, #4
 800ac5a:	440b      	add	r3, r1
 800ac5c:	330c      	adds	r3, #12
 800ac5e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3301      	adds	r3, #1
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	200008b8 	.word	0x200008b8

0800ac74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	607b      	str	r3, [r7, #4]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b04      	cmp	r3, #4
 800ac86:	d825      	bhi.n	800acd4 <dec_lock+0x60>
		n = Files[i].ctr;
 800ac88:	4a17      	ldr	r2, [pc, #92]	; (800ace8 <dec_lock+0x74>)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	011b      	lsls	r3, r3, #4
 800ac8e:	4413      	add	r3, r2
 800ac90:	330c      	adds	r3, #12
 800ac92:	881b      	ldrh	r3, [r3, #0]
 800ac94:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ac96:	89fb      	ldrh	r3, [r7, #14]
 800ac98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac9c:	d101      	bne.n	800aca2 <dec_lock+0x2e>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aca2:	89fb      	ldrh	r3, [r7, #14]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <dec_lock+0x3a>
 800aca8:	89fb      	ldrh	r3, [r7, #14]
 800acaa:	3b01      	subs	r3, #1
 800acac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800acae:	4a0e      	ldr	r2, [pc, #56]	; (800ace8 <dec_lock+0x74>)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	4413      	add	r3, r2
 800acb6:	330c      	adds	r3, #12
 800acb8:	89fa      	ldrh	r2, [r7, #14]
 800acba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800acbc:	89fb      	ldrh	r3, [r7, #14]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d105      	bne.n	800acce <dec_lock+0x5a>
 800acc2:	4a09      	ldr	r2, [pc, #36]	; (800ace8 <dec_lock+0x74>)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	011b      	lsls	r3, r3, #4
 800acc8:	4413      	add	r3, r2
 800acca:	2200      	movs	r2, #0
 800accc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	737b      	strb	r3, [r7, #13]
 800acd2:	e001      	b.n	800acd8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800acd4:	2302      	movs	r3, #2
 800acd6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800acd8:	7b7b      	ldrb	r3, [r7, #13]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	200008b8 	.word	0x200008b8

0800acec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800acf4:	2300      	movs	r3, #0
 800acf6:	60fb      	str	r3, [r7, #12]
 800acf8:	e010      	b.n	800ad1c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800acfa:	4a0d      	ldr	r2, [pc, #52]	; (800ad30 <clear_lock+0x44>)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	011b      	lsls	r3, r3, #4
 800ad00:	4413      	add	r3, r2
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d105      	bne.n	800ad16 <clear_lock+0x2a>
 800ad0a:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <clear_lock+0x44>)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	011b      	lsls	r3, r3, #4
 800ad10:	4413      	add	r3, r2
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	d9eb      	bls.n	800acfa <clear_lock+0xe>
	}
}
 800ad22:	bf00      	nop
 800ad24:	bf00      	nop
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	200008b8 	.word	0x200008b8

0800ad34 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	78db      	ldrb	r3, [r3, #3]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d034      	beq.n	800adb2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	7858      	ldrb	r0, [r3, #1]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ad58:	2301      	movs	r3, #1
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	f7ff fd40 	bl	800a7e0 <disk_write>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d002      	beq.n	800ad6c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	73fb      	strb	r3, [r7, #15]
 800ad6a:	e022      	b.n	800adb2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	1ad2      	subs	r2, r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d217      	bcs.n	800adb2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	789b      	ldrb	r3, [r3, #2]
 800ad86:	613b      	str	r3, [r7, #16]
 800ad88:	e010      	b.n	800adac <sync_window+0x78>
					wsect += fs->fsize;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	69db      	ldr	r3, [r3, #28]
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	4413      	add	r3, r2
 800ad92:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	7858      	ldrb	r0, [r3, #1]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ad9e:	2301      	movs	r3, #1
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	f7ff fd1d 	bl	800a7e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	613b      	str	r3, [r7, #16]
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d8eb      	bhi.n	800ad8a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3718      	adds	r7, #24
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	429a      	cmp	r2, r3
 800add2:	d01b      	beq.n	800ae0c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7ff ffad 	bl	800ad34 <sync_window>
 800adda:	4603      	mov	r3, r0
 800addc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800adde:	7bfb      	ldrb	r3, [r7, #15]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d113      	bne.n	800ae0c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	7858      	ldrb	r0, [r3, #1]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800adee:	2301      	movs	r3, #1
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	f7ff fcd5 	bl	800a7a0 <disk_read>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d004      	beq.n	800ae06 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800adfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ae00:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f7ff ff87 	bl	800ad34 <sync_window>
 800ae26:	4603      	mov	r3, r0
 800ae28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ae2a:	7bfb      	ldrb	r3, [r7, #15]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d158      	bne.n	800aee2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	2b03      	cmp	r3, #3
 800ae36:	d148      	bne.n	800aeca <sync_fs+0xb2>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	791b      	ldrb	r3, [r3, #4]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d144      	bne.n	800aeca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3334      	adds	r3, #52	; 0x34
 800ae44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae48:	2100      	movs	r1, #0
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7ff fda9 	bl	800a9a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	3334      	adds	r3, #52	; 0x34
 800ae54:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae58:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7ff fd38 	bl	800a8d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	3334      	adds	r3, #52	; 0x34
 800ae66:	4921      	ldr	r1, [pc, #132]	; (800aeec <sync_fs+0xd4>)
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff fd4d 	bl	800a908 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3334      	adds	r3, #52	; 0x34
 800ae72:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ae76:	491e      	ldr	r1, [pc, #120]	; (800aef0 <sync_fs+0xd8>)
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff fd45 	bl	800a908 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	3334      	adds	r3, #52	; 0x34
 800ae82:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	f7ff fd3b 	bl	800a908 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	3334      	adds	r3, #52	; 0x34
 800ae96:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	4619      	mov	r1, r3
 800aea0:	4610      	mov	r0, r2
 800aea2:	f7ff fd31 	bl	800a908 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	1c5a      	adds	r2, r3, #1
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	7858      	ldrb	r0, [r3, #1]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aebe:	2301      	movs	r3, #1
 800aec0:	f7ff fc8e 	bl	800a7e0 <disk_write>
			fs->fsi_flag = 0;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	785b      	ldrb	r3, [r3, #1]
 800aece:	2200      	movs	r2, #0
 800aed0:	2100      	movs	r1, #0
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7ff fca4 	bl	800a820 <disk_ioctl>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d001      	beq.n	800aee2 <sync_fs+0xca>
 800aede:	2301      	movs	r3, #1
 800aee0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800aee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	41615252 	.word	0x41615252
 800aef0:	61417272 	.word	0x61417272

0800aef4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	3b02      	subs	r3, #2
 800af02:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	3b02      	subs	r3, #2
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d301      	bcc.n	800af14 <clust2sect+0x20>
 800af10:	2300      	movs	r3, #0
 800af12:	e008      	b.n	800af26 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	895b      	ldrh	r3, [r3, #10]
 800af18:	461a      	mov	r2, r3
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	fb03 f202 	mul.w	r2, r3, r2
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af24:	4413      	add	r3, r2
}
 800af26:	4618      	mov	r0, r3
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b086      	sub	sp, #24
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d904      	bls.n	800af52 <get_fat+0x20>
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d302      	bcc.n	800af58 <get_fat+0x26>
		val = 1;	/* Internal error */
 800af52:	2301      	movs	r3, #1
 800af54:	617b      	str	r3, [r7, #20]
 800af56:	e08f      	b.n	800b078 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800af58:	f04f 33ff 	mov.w	r3, #4294967295
 800af5c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	2b03      	cmp	r3, #3
 800af64:	d062      	beq.n	800b02c <get_fat+0xfa>
 800af66:	2b03      	cmp	r3, #3
 800af68:	dc7c      	bgt.n	800b064 <get_fat+0x132>
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d002      	beq.n	800af74 <get_fat+0x42>
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d042      	beq.n	800aff8 <get_fat+0xc6>
 800af72:	e077      	b.n	800b064 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	60fb      	str	r3, [r7, #12]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	085b      	lsrs	r3, r3, #1
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	4413      	add	r3, r2
 800af80:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	0a5b      	lsrs	r3, r3, #9
 800af8a:	4413      	add	r3, r2
 800af8c:	4619      	mov	r1, r3
 800af8e:	6938      	ldr	r0, [r7, #16]
 800af90:	f7ff ff14 	bl	800adbc <move_window>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d167      	bne.n	800b06a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	1c5a      	adds	r2, r3, #1
 800af9e:	60fa      	str	r2, [r7, #12]
 800afa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	4413      	add	r3, r2
 800afa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	0a5b      	lsrs	r3, r3, #9
 800afb6:	4413      	add	r3, r2
 800afb8:	4619      	mov	r1, r3
 800afba:	6938      	ldr	r0, [r7, #16]
 800afbc:	f7ff fefe 	bl	800adbc <move_window>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d153      	bne.n	800b06e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	4413      	add	r3, r2
 800afd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afd4:	021b      	lsls	r3, r3, #8
 800afd6:	461a      	mov	r2, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	4313      	orrs	r3, r2
 800afdc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d002      	beq.n	800afee <get_fat+0xbc>
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	091b      	lsrs	r3, r3, #4
 800afec:	e002      	b.n	800aff4 <get_fat+0xc2>
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aff4:	617b      	str	r3, [r7, #20]
			break;
 800aff6:	e03f      	b.n	800b078 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	0a1b      	lsrs	r3, r3, #8
 800b000:	4413      	add	r3, r2
 800b002:	4619      	mov	r1, r3
 800b004:	6938      	ldr	r0, [r7, #16]
 800b006:	f7ff fed9 	bl	800adbc <move_window>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d130      	bne.n	800b072 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b01e:	4413      	add	r3, r2
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff fc1b 	bl	800a85c <ld_word>
 800b026:	4603      	mov	r3, r0
 800b028:	617b      	str	r3, [r7, #20]
			break;
 800b02a:	e025      	b.n	800b078 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	09db      	lsrs	r3, r3, #7
 800b034:	4413      	add	r3, r2
 800b036:	4619      	mov	r1, r3
 800b038:	6938      	ldr	r0, [r7, #16]
 800b03a:	f7ff febf 	bl	800adbc <move_window>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d118      	bne.n	800b076 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b052:	4413      	add	r3, r2
 800b054:	4618      	mov	r0, r3
 800b056:	f7ff fc19 	bl	800a88c <ld_dword>
 800b05a:	4603      	mov	r3, r0
 800b05c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b060:	617b      	str	r3, [r7, #20]
			break;
 800b062:	e009      	b.n	800b078 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b064:	2301      	movs	r3, #1
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e006      	b.n	800b078 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b06a:	bf00      	nop
 800b06c:	e004      	b.n	800b078 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b06e:	bf00      	nop
 800b070:	e002      	b.n	800b078 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b072:	bf00      	nop
 800b074:	e000      	b.n	800b078 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b076:	bf00      	nop
		}
	}

	return val;
 800b078:	697b      	ldr	r3, [r7, #20]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b082:	b590      	push	{r4, r7, lr}
 800b084:	b089      	sub	sp, #36	; 0x24
 800b086:	af00      	add	r7, sp, #0
 800b088:	60f8      	str	r0, [r7, #12]
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b08e:	2302      	movs	r3, #2
 800b090:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2b01      	cmp	r3, #1
 800b096:	f240 80d2 	bls.w	800b23e <put_fat+0x1bc>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	f080 80cc 	bcs.w	800b23e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	f000 8096 	beq.w	800b1dc <put_fat+0x15a>
 800b0b0:	2b03      	cmp	r3, #3
 800b0b2:	f300 80cd 	bgt.w	800b250 <put_fat+0x1ce>
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d002      	beq.n	800b0c0 <put_fat+0x3e>
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d06e      	beq.n	800b19c <put_fat+0x11a>
 800b0be:	e0c7      	b.n	800b250 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	61bb      	str	r3, [r7, #24]
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	085b      	lsrs	r3, r3, #1
 800b0c8:	69ba      	ldr	r2, [r7, #24]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	0a5b      	lsrs	r3, r3, #9
 800b0d6:	4413      	add	r3, r2
 800b0d8:	4619      	mov	r1, r3
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f7ff fe6e 	bl	800adbc <move_window>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b0e4:	7ffb      	ldrb	r3, [r7, #31]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f040 80ab 	bne.w	800b242 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	1c59      	adds	r1, r3, #1
 800b0f6:	61b9      	str	r1, [r7, #24]
 800b0f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fc:	4413      	add	r3, r2
 800b0fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00d      	beq.n	800b126 <put_fat+0xa4>
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	b25b      	sxtb	r3, r3
 800b110:	f003 030f 	and.w	r3, r3, #15
 800b114:	b25a      	sxtb	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	011b      	lsls	r3, r3, #4
 800b11c:	b25b      	sxtb	r3, r3
 800b11e:	4313      	orrs	r3, r2
 800b120:	b25b      	sxtb	r3, r3
 800b122:	b2db      	uxtb	r3, r3
 800b124:	e001      	b.n	800b12a <put_fat+0xa8>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2201      	movs	r2, #1
 800b132:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	0a5b      	lsrs	r3, r3, #9
 800b13c:	4413      	add	r3, r2
 800b13e:	4619      	mov	r1, r3
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f7ff fe3b 	bl	800adbc <move_window>
 800b146:	4603      	mov	r3, r0
 800b148:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b14a:	7ffb      	ldrb	r3, [r7, #31]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d17a      	bne.n	800b246 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b15c:	4413      	add	r3, r2
 800b15e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <put_fat+0xf0>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	091b      	lsrs	r3, r3, #4
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	e00e      	b.n	800b190 <put_fat+0x10e>
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	b25b      	sxtb	r3, r3
 800b178:	f023 030f 	bic.w	r3, r3, #15
 800b17c:	b25a      	sxtb	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	0a1b      	lsrs	r3, r3, #8
 800b182:	b25b      	sxtb	r3, r3
 800b184:	f003 030f 	and.w	r3, r3, #15
 800b188:	b25b      	sxtb	r3, r3
 800b18a:	4313      	orrs	r3, r2
 800b18c:	b25b      	sxtb	r3, r3
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2201      	movs	r2, #1
 800b198:	70da      	strb	r2, [r3, #3]
			break;
 800b19a:	e059      	b.n	800b250 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	0a1b      	lsrs	r3, r3, #8
 800b1a4:	4413      	add	r3, r2
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f7ff fe07 	bl	800adbc <move_window>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1b2:	7ffb      	ldrb	r3, [r7, #31]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d148      	bne.n	800b24a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	005b      	lsls	r3, r3, #1
 800b1c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b1c6:	4413      	add	r3, r2
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	b292      	uxth	r2, r2
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff fb7f 	bl	800a8d2 <st_word>
			fs->wflag = 1;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	70da      	strb	r2, [r3, #3]
			break;
 800b1da:	e039      	b.n	800b250 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	09db      	lsrs	r3, r3, #7
 800b1e4:	4413      	add	r3, r2
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f7ff fde7 	bl	800adbc <move_window>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1f2:	7ffb      	ldrb	r3, [r7, #31]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d12a      	bne.n	800b24e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b20c:	4413      	add	r3, r2
 800b20e:	4618      	mov	r0, r3
 800b210:	f7ff fb3c 	bl	800a88c <ld_dword>
 800b214:	4603      	mov	r3, r0
 800b216:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b21a:	4323      	orrs	r3, r4
 800b21c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b22c:	4413      	add	r3, r2
 800b22e:	6879      	ldr	r1, [r7, #4]
 800b230:	4618      	mov	r0, r3
 800b232:	f7ff fb69 	bl	800a908 <st_dword>
			fs->wflag = 1;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2201      	movs	r2, #1
 800b23a:	70da      	strb	r2, [r3, #3]
			break;
 800b23c:	e008      	b.n	800b250 <put_fat+0x1ce>
		}
	}
 800b23e:	bf00      	nop
 800b240:	e006      	b.n	800b250 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b242:	bf00      	nop
 800b244:	e004      	b.n	800b250 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b246:	bf00      	nop
 800b248:	e002      	b.n	800b250 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b24a:	bf00      	nop
 800b24c:	e000      	b.n	800b250 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b24e:	bf00      	nop
	return res;
 800b250:	7ffb      	ldrb	r3, [r7, #31]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3724      	adds	r7, #36	; 0x24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd90      	pop	{r4, r7, pc}

0800b25a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b088      	sub	sp, #32
 800b25e:	af00      	add	r7, sp, #0
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	60b9      	str	r1, [r7, #8]
 800b264:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	2b01      	cmp	r3, #1
 800b274:	d904      	bls.n	800b280 <remove_chain+0x26>
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d301      	bcc.n	800b284 <remove_chain+0x2a>
 800b280:	2302      	movs	r3, #2
 800b282:	e04b      	b.n	800b31c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00c      	beq.n	800b2a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b28a:	f04f 32ff 	mov.w	r2, #4294967295
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	69b8      	ldr	r0, [r7, #24]
 800b292:	f7ff fef6 	bl	800b082 <put_fat>
 800b296:	4603      	mov	r3, r0
 800b298:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b29a:	7ffb      	ldrb	r3, [r7, #31]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <remove_chain+0x4a>
 800b2a0:	7ffb      	ldrb	r3, [r7, #31]
 800b2a2:	e03b      	b.n	800b31c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b2a4:	68b9      	ldr	r1, [r7, #8]
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f7ff fe43 	bl	800af32 <get_fat>
 800b2ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d031      	beq.n	800b318 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d101      	bne.n	800b2be <remove_chain+0x64>
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	e02e      	b.n	800b31c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c4:	d101      	bne.n	800b2ca <remove_chain+0x70>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e028      	b.n	800b31c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	68b9      	ldr	r1, [r7, #8]
 800b2ce:	69b8      	ldr	r0, [r7, #24]
 800b2d0:	f7ff fed7 	bl	800b082 <put_fat>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b2d8:	7ffb      	ldrb	r3, [r7, #31]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <remove_chain+0x88>
 800b2de:	7ffb      	ldrb	r3, [r7, #31]
 800b2e0:	e01c      	b.n	800b31c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	695a      	ldr	r2, [r3, #20]
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	3b02      	subs	r3, #2
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d20b      	bcs.n	800b308 <remove_chain+0xae>
			fs->free_clst++;
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	695b      	ldr	r3, [r3, #20]
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	791b      	ldrb	r3, [r3, #4]
 800b2fe:	f043 0301 	orr.w	r3, r3, #1
 800b302:	b2da      	uxtb	r2, r3
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	429a      	cmp	r2, r3
 800b314:	d3c6      	bcc.n	800b2a4 <remove_chain+0x4a>
 800b316:	e000      	b.n	800b31a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b318:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3720      	adds	r7, #32
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b088      	sub	sp, #32
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10d      	bne.n	800b356 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d004      	beq.n	800b350 <create_chain+0x2c>
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	69ba      	ldr	r2, [r7, #24]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d31b      	bcc.n	800b388 <create_chain+0x64>
 800b350:	2301      	movs	r3, #1
 800b352:	61bb      	str	r3, [r7, #24]
 800b354:	e018      	b.n	800b388 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff fdea 	bl	800af32 <get_fat>
 800b35e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d801      	bhi.n	800b36a <create_chain+0x46>
 800b366:	2301      	movs	r3, #1
 800b368:	e070      	b.n	800b44c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b370:	d101      	bne.n	800b376 <create_chain+0x52>
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	e06a      	b.n	800b44c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d201      	bcs.n	800b384 <create_chain+0x60>
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	e063      	b.n	800b44c <create_chain+0x128>
		scl = clst;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	3301      	adds	r3, #1
 800b390:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	69fa      	ldr	r2, [r7, #28]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d307      	bcc.n	800b3ac <create_chain+0x88>
				ncl = 2;
 800b39c:	2302      	movs	r3, #2
 800b39e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b3a0:	69fa      	ldr	r2, [r7, #28]
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d901      	bls.n	800b3ac <create_chain+0x88>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	e04f      	b.n	800b44c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b3ac:	69f9      	ldr	r1, [r7, #28]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7ff fdbf 	bl	800af32 <get_fat>
 800b3b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00e      	beq.n	800b3da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d003      	beq.n	800b3ca <create_chain+0xa6>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c8:	d101      	bne.n	800b3ce <create_chain+0xaa>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	e03e      	b.n	800b44c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b3ce:	69fa      	ldr	r2, [r7, #28]
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d1da      	bne.n	800b38c <create_chain+0x68>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e038      	b.n	800b44c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b3da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e0:	69f9      	ldr	r1, [r7, #28]
 800b3e2:	6938      	ldr	r0, [r7, #16]
 800b3e4:	f7ff fe4d 	bl	800b082 <put_fat>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b3ec:	7dfb      	ldrb	r3, [r7, #23]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d109      	bne.n	800b406 <create_chain+0xe2>
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d006      	beq.n	800b406 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b3f8:	69fa      	ldr	r2, [r7, #28]
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	6938      	ldr	r0, [r7, #16]
 800b3fe:	f7ff fe40 	bl	800b082 <put_fat>
 800b402:	4603      	mov	r3, r0
 800b404:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b406:	7dfb      	ldrb	r3, [r7, #23]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d116      	bne.n	800b43a <create_chain+0x116>
		fs->last_clst = ncl;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	69fa      	ldr	r2, [r7, #28]
 800b410:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	695a      	ldr	r2, [r3, #20]
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	3b02      	subs	r3, #2
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d804      	bhi.n	800b42a <create_chain+0x106>
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	1e5a      	subs	r2, r3, #1
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	791b      	ldrb	r3, [r3, #4]
 800b42e:	f043 0301 	orr.w	r3, r3, #1
 800b432:	b2da      	uxtb	r2, r3
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	711a      	strb	r2, [r3, #4]
 800b438:	e007      	b.n	800b44a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b43a:	7dfb      	ldrb	r3, [r7, #23]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d102      	bne.n	800b446 <create_chain+0x122>
 800b440:	f04f 33ff 	mov.w	r3, #4294967295
 800b444:	e000      	b.n	800b448 <create_chain+0x124>
 800b446:	2301      	movs	r3, #1
 800b448:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b44a:	69fb      	ldr	r3, [r7, #28]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3720      	adds	r7, #32
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b468:	3304      	adds	r3, #4
 800b46a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	0a5b      	lsrs	r3, r3, #9
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	8952      	ldrh	r2, [r2, #10]
 800b474:	fbb3 f3f2 	udiv	r3, r3, r2
 800b478:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	1d1a      	adds	r2, r3, #4
 800b47e:	613a      	str	r2, [r7, #16]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d101      	bne.n	800b48e <clmt_clust+0x3a>
 800b48a:	2300      	movs	r3, #0
 800b48c:	e010      	b.n	800b4b0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b48e:	697a      	ldr	r2, [r7, #20]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	429a      	cmp	r2, r3
 800b494:	d307      	bcc.n	800b4a6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	617b      	str	r3, [r7, #20]
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b4a4:	e7e9      	b.n	800b47a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b4a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	4413      	add	r3, r2
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	371c      	adds	r7, #28
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b086      	sub	sp, #24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4d2:	d204      	bcs.n	800b4de <dir_sdi+0x22>
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	f003 031f 	and.w	r3, r3, #31
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b4de:	2302      	movs	r3, #2
 800b4e0:	e063      	b.n	800b5aa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d106      	bne.n	800b502 <dir_sdi+0x46>
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d902      	bls.n	800b502 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b500:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10c      	bne.n	800b522 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	095b      	lsrs	r3, r3, #5
 800b50c:	693a      	ldr	r2, [r7, #16]
 800b50e:	8912      	ldrh	r2, [r2, #8]
 800b510:	4293      	cmp	r3, r2
 800b512:	d301      	bcc.n	800b518 <dir_sdi+0x5c>
 800b514:	2302      	movs	r3, #2
 800b516:	e048      	b.n	800b5aa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	61da      	str	r2, [r3, #28]
 800b520:	e029      	b.n	800b576 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	895b      	ldrh	r3, [r3, #10]
 800b526:	025b      	lsls	r3, r3, #9
 800b528:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b52a:	e019      	b.n	800b560 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6979      	ldr	r1, [r7, #20]
 800b530:	4618      	mov	r0, r3
 800b532:	f7ff fcfe 	bl	800af32 <get_fat>
 800b536:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53e:	d101      	bne.n	800b544 <dir_sdi+0x88>
 800b540:	2301      	movs	r3, #1
 800b542:	e032      	b.n	800b5aa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d904      	bls.n	800b554 <dir_sdi+0x98>
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	697a      	ldr	r2, [r7, #20]
 800b550:	429a      	cmp	r2, r3
 800b552:	d301      	bcc.n	800b558 <dir_sdi+0x9c>
 800b554:	2302      	movs	r3, #2
 800b556:	e028      	b.n	800b5aa <dir_sdi+0xee>
			ofs -= csz;
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	1ad3      	subs	r3, r2, r3
 800b55e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	429a      	cmp	r2, r3
 800b566:	d2e1      	bcs.n	800b52c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b568:	6979      	ldr	r1, [r7, #20]
 800b56a:	6938      	ldr	r0, [r7, #16]
 800b56c:	f7ff fcc2 	bl	800aef4 <clust2sect>
 800b570:	4602      	mov	r2, r0
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	69db      	ldr	r3, [r3, #28]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <dir_sdi+0xcc>
 800b584:	2302      	movs	r3, #2
 800b586:	e010      	b.n	800b5aa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	69da      	ldr	r2, [r3, #28]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	0a5b      	lsrs	r3, r3, #9
 800b590:	441a      	add	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5a2:	441a      	add	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3718      	adds	r7, #24
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b086      	sub	sp, #24
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	695b      	ldr	r3, [r3, #20]
 800b5c6:	3320      	adds	r3, #32
 800b5c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	69db      	ldr	r3, [r3, #28]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d003      	beq.n	800b5da <dir_next+0x28>
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5d8:	d301      	bcc.n	800b5de <dir_next+0x2c>
 800b5da:	2304      	movs	r3, #4
 800b5dc:	e0aa      	b.n	800b734 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f040 8098 	bne.w	800b71a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	69db      	ldr	r3, [r3, #28]
 800b5ee:	1c5a      	adds	r2, r3, #1
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10b      	bne.n	800b614 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	095b      	lsrs	r3, r3, #5
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	8912      	ldrh	r2, [r2, #8]
 800b604:	4293      	cmp	r3, r2
 800b606:	f0c0 8088 	bcc.w	800b71a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	61da      	str	r2, [r3, #28]
 800b610:	2304      	movs	r3, #4
 800b612:	e08f      	b.n	800b734 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	0a5b      	lsrs	r3, r3, #9
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	8952      	ldrh	r2, [r2, #10]
 800b61c:	3a01      	subs	r2, #1
 800b61e:	4013      	ands	r3, r2
 800b620:	2b00      	cmp	r3, #0
 800b622:	d17a      	bne.n	800b71a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	4619      	mov	r1, r3
 800b62c:	4610      	mov	r0, r2
 800b62e:	f7ff fc80 	bl	800af32 <get_fat>
 800b632:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d801      	bhi.n	800b63e <dir_next+0x8c>
 800b63a:	2302      	movs	r3, #2
 800b63c:	e07a      	b.n	800b734 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b644:	d101      	bne.n	800b64a <dir_next+0x98>
 800b646:	2301      	movs	r3, #1
 800b648:	e074      	b.n	800b734 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	699b      	ldr	r3, [r3, #24]
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	429a      	cmp	r2, r3
 800b652:	d358      	bcc.n	800b706 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d104      	bne.n	800b664 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	61da      	str	r2, [r3, #28]
 800b660:	2304      	movs	r3, #4
 800b662:	e067      	b.n	800b734 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	4619      	mov	r1, r3
 800b66c:	4610      	mov	r0, r2
 800b66e:	f7ff fe59 	bl	800b324 <create_chain>
 800b672:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <dir_next+0xcc>
 800b67a:	2307      	movs	r3, #7
 800b67c:	e05a      	b.n	800b734 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d101      	bne.n	800b688 <dir_next+0xd6>
 800b684:	2302      	movs	r3, #2
 800b686:	e055      	b.n	800b734 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68e:	d101      	bne.n	800b694 <dir_next+0xe2>
 800b690:	2301      	movs	r3, #1
 800b692:	e04f      	b.n	800b734 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7ff fb4d 	bl	800ad34 <sync_window>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <dir_next+0xf2>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e047      	b.n	800b734 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	3334      	adds	r3, #52	; 0x34
 800b6a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff f977 	bl	800a9a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	613b      	str	r3, [r7, #16]
 800b6b8:	6979      	ldr	r1, [r7, #20]
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f7ff fc1a 	bl	800aef4 <clust2sect>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	631a      	str	r2, [r3, #48]	; 0x30
 800b6c6:	e012      	b.n	800b6ee <dir_next+0x13c>
						fs->wflag = 1;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f7ff fb30 	bl	800ad34 <sync_window>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <dir_next+0x12c>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e02a      	b.n	800b734 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	613b      	str	r3, [r7, #16]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	631a      	str	r2, [r3, #48]	; 0x30
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	895b      	ldrh	r3, [r3, #10]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d3e6      	bcc.n	800b6c8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	1ad2      	subs	r2, r2, r3
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b70c:	6979      	ldr	r1, [r7, #20]
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7ff fbf0 	bl	800aef4 <clust2sect>
 800b714:	4602      	mov	r2, r0
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b72c:	441a      	add	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3718      	adds	r7, #24
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b74c:	2100      	movs	r1, #0
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7ff feb4 	bl	800b4bc <dir_sdi>
 800b754:	4603      	mov	r3, r0
 800b756:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b758:	7dfb      	ldrb	r3, [r7, #23]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d12b      	bne.n	800b7b6 <dir_alloc+0x7a>
		n = 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	69db      	ldr	r3, [r3, #28]
 800b766:	4619      	mov	r1, r3
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f7ff fb27 	bl	800adbc <move_window>
 800b76e:	4603      	mov	r3, r0
 800b770:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b772:	7dfb      	ldrb	r3, [r7, #23]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d11d      	bne.n	800b7b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a1b      	ldr	r3, [r3, #32]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	2be5      	cmp	r3, #229	; 0xe5
 800b780:	d004      	beq.n	800b78c <dir_alloc+0x50>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d107      	bne.n	800b79c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	3301      	adds	r3, #1
 800b790:	613b      	str	r3, [r7, #16]
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	429a      	cmp	r2, r3
 800b798:	d102      	bne.n	800b7a0 <dir_alloc+0x64>
 800b79a:	e00c      	b.n	800b7b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b79c:	2300      	movs	r3, #0
 800b79e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b7a0:	2101      	movs	r1, #1
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7ff ff05 	bl	800b5b2 <dir_next>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d0d7      	beq.n	800b762 <dir_alloc+0x26>
 800b7b2:	e000      	b.n	800b7b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b7b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
 800b7b8:	2b04      	cmp	r3, #4
 800b7ba:	d101      	bne.n	800b7c0 <dir_alloc+0x84>
 800b7bc:	2307      	movs	r3, #7
 800b7be:	75fb      	strb	r3, [r7, #23]
	return res;
 800b7c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3718      	adds	r7, #24
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b084      	sub	sp, #16
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	331a      	adds	r3, #26
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7ff f83f 	bl	800a85c <ld_word>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	2b03      	cmp	r3, #3
 800b7e8:	d109      	bne.n	800b7fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	3314      	adds	r3, #20
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7ff f834 	bl	800a85c <ld_word>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	041b      	lsls	r3, r3, #16
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	331a      	adds	r3, #26
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	b292      	uxth	r2, r2
 800b81c:	4611      	mov	r1, r2
 800b81e:	4618      	mov	r0, r3
 800b820:	f7ff f857 	bl	800a8d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	2b03      	cmp	r3, #3
 800b82a:	d109      	bne.n	800b840 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	f103 0214 	add.w	r2, r3, #20
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	0c1b      	lsrs	r3, r3, #16
 800b836:	b29b      	uxth	r3, r3
 800b838:	4619      	mov	r1, r3
 800b83a:	4610      	mov	r0, r2
 800b83c:	f7ff f849 	bl	800a8d2 <st_word>
	}
}
 800b840:	bf00      	nop
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b848:	b590      	push	{r4, r7, lr}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	331a      	adds	r3, #26
 800b856:	4618      	mov	r0, r3
 800b858:	f7ff f800 	bl	800a85c <ld_word>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <cmp_lfn+0x1e>
 800b862:	2300      	movs	r3, #0
 800b864:	e059      	b.n	800b91a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b86e:	1e5a      	subs	r2, r3, #1
 800b870:	4613      	mov	r3, r2
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	4413      	add	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b87c:	2301      	movs	r3, #1
 800b87e:	81fb      	strh	r3, [r7, #14]
 800b880:	2300      	movs	r3, #0
 800b882:	613b      	str	r3, [r7, #16]
 800b884:	e033      	b.n	800b8ee <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b886:	4a27      	ldr	r2, [pc, #156]	; (800b924 <cmp_lfn+0xdc>)
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	4413      	add	r3, r2
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	461a      	mov	r2, r3
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	4413      	add	r3, r2
 800b894:	4618      	mov	r0, r3
 800b896:	f7fe ffe1 	bl	800a85c <ld_word>
 800b89a:	4603      	mov	r3, r0
 800b89c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b89e:	89fb      	ldrh	r3, [r7, #14]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d01a      	beq.n	800b8da <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	2bfe      	cmp	r3, #254	; 0xfe
 800b8a8:	d812      	bhi.n	800b8d0 <cmp_lfn+0x88>
 800b8aa:	89bb      	ldrh	r3, [r7, #12]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f001 ffc7 	bl	800d840 <ff_wtoupper>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	461c      	mov	r4, r3
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	1c5a      	adds	r2, r3, #1
 800b8ba:	617a      	str	r2, [r7, #20]
 800b8bc:	005b      	lsls	r3, r3, #1
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	881b      	ldrh	r3, [r3, #0]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f001 ffbb 	bl	800d840 <ff_wtoupper>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	429c      	cmp	r4, r3
 800b8ce:	d001      	beq.n	800b8d4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	e022      	b.n	800b91a <cmp_lfn+0xd2>
			}
			wc = uc;
 800b8d4:	89bb      	ldrh	r3, [r7, #12]
 800b8d6:	81fb      	strh	r3, [r7, #14]
 800b8d8:	e006      	b.n	800b8e8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b8da:	89bb      	ldrh	r3, [r7, #12]
 800b8dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d001      	beq.n	800b8e8 <cmp_lfn+0xa0>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	e018      	b.n	800b91a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	613b      	str	r3, [r7, #16]
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	2b0c      	cmp	r3, #12
 800b8f2:	d9c8      	bls.n	800b886 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00b      	beq.n	800b918 <cmp_lfn+0xd0>
 800b900:	89fb      	ldrh	r3, [r7, #14]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d008      	beq.n	800b918 <cmp_lfn+0xd0>
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	005b      	lsls	r3, r3, #1
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	4413      	add	r3, r2
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <cmp_lfn+0xd0>
 800b914:	2300      	movs	r3, #0
 800b916:	e000      	b.n	800b91a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b918:	2301      	movs	r3, #1
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	371c      	adds	r7, #28
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd90      	pop	{r4, r7, pc}
 800b922:	bf00      	nop
 800b924:	08010300 	.word	0x08010300

0800b928 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b088      	sub	sp, #32
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	4611      	mov	r1, r2
 800b934:	461a      	mov	r2, r3
 800b936:	460b      	mov	r3, r1
 800b938:	71fb      	strb	r3, [r7, #7]
 800b93a:	4613      	mov	r3, r2
 800b93c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	330d      	adds	r3, #13
 800b942:	79ba      	ldrb	r2, [r7, #6]
 800b944:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	330b      	adds	r3, #11
 800b94a:	220f      	movs	r2, #15
 800b94c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	330c      	adds	r3, #12
 800b952:	2200      	movs	r2, #0
 800b954:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	331a      	adds	r3, #26
 800b95a:	2100      	movs	r1, #0
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fe ffb8 	bl	800a8d2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b962:	79fb      	ldrb	r3, [r7, #7]
 800b964:	1e5a      	subs	r2, r3, #1
 800b966:	4613      	mov	r3, r2
 800b968:	005b      	lsls	r3, r3, #1
 800b96a:	4413      	add	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4413      	add	r3, r2
 800b970:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b972:	2300      	movs	r3, #0
 800b974:	82fb      	strh	r3, [r7, #22]
 800b976:	2300      	movs	r3, #0
 800b978:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b97a:	8afb      	ldrh	r3, [r7, #22]
 800b97c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b980:	4293      	cmp	r3, r2
 800b982:	d007      	beq.n	800b994 <put_lfn+0x6c>
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	1c5a      	adds	r2, r3, #1
 800b988:	61fa      	str	r2, [r7, #28]
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	4413      	add	r3, r2
 800b990:	881b      	ldrh	r3, [r3, #0]
 800b992:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b994:	4a17      	ldr	r2, [pc, #92]	; (800b9f4 <put_lfn+0xcc>)
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	4413      	add	r3, r2
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	461a      	mov	r2, r3
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	8afa      	ldrh	r2, [r7, #22]
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7fe ff93 	bl	800a8d2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b9ac:	8afb      	ldrh	r3, [r7, #22]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d102      	bne.n	800b9b8 <put_lfn+0x90>
 800b9b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9b6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	61bb      	str	r3, [r7, #24]
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	2b0c      	cmp	r3, #12
 800b9c2:	d9da      	bls.n	800b97a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b9c4:	8afb      	ldrh	r3, [r7, #22]
 800b9c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d006      	beq.n	800b9dc <put_lfn+0xb4>
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	005b      	lsls	r3, r3, #1
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d103      	bne.n	800b9e4 <put_lfn+0xbc>
 800b9dc:	79fb      	ldrb	r3, [r7, #7]
 800b9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9e2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	79fa      	ldrb	r2, [r7, #7]
 800b9e8:	701a      	strb	r2, [r3, #0]
}
 800b9ea:	bf00      	nop
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	08010300 	.word	0x08010300

0800b9f8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08c      	sub	sp, #48	; 0x30
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ba06:	220b      	movs	r2, #11
 800ba08:	68b9      	ldr	r1, [r7, #8]
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f7fe ffa8 	bl	800a960 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	2b05      	cmp	r3, #5
 800ba14:	d92b      	bls.n	800ba6e <gen_numname+0x76>
		sr = seq;
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ba1a:	e022      	b.n	800ba62 <gen_numname+0x6a>
			wc = *lfn++;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	1c9a      	adds	r2, r3, #2
 800ba20:	607a      	str	r2, [r7, #4]
 800ba22:	881b      	ldrh	r3, [r3, #0]
 800ba24:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ba26:	2300      	movs	r3, #0
 800ba28:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba2a:	e017      	b.n	800ba5c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	005a      	lsls	r2, r3, #1
 800ba30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba32:	f003 0301 	and.w	r3, r3, #1
 800ba36:	4413      	add	r3, r2
 800ba38:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ba3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba3c:	085b      	lsrs	r3, r3, #1
 800ba3e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d005      	beq.n	800ba56 <gen_numname+0x5e>
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ba50:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ba54:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ba56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba58:	3301      	adds	r3, #1
 800ba5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5e:	2b0f      	cmp	r3, #15
 800ba60:	d9e4      	bls.n	800ba2c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	881b      	ldrh	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1d8      	bne.n	800ba1c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ba6e:	2307      	movs	r3, #7
 800ba70:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	f003 030f 	and.w	r3, r3, #15
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	3330      	adds	r3, #48	; 0x30
 800ba7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ba82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba86:	2b39      	cmp	r3, #57	; 0x39
 800ba88:	d904      	bls.n	800ba94 <gen_numname+0x9c>
 800ba8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba8e:	3307      	adds	r3, #7
 800ba90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ba94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba96:	1e5a      	subs	r2, r3, #1
 800ba98:	62ba      	str	r2, [r7, #40]	; 0x28
 800ba9a:	3330      	adds	r3, #48	; 0x30
 800ba9c:	443b      	add	r3, r7
 800ba9e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800baa2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	091b      	lsrs	r3, r3, #4
 800baaa:	603b      	str	r3, [r7, #0]
	} while (seq);
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d1df      	bne.n	800ba72 <gen_numname+0x7a>
	ns[i] = '~';
 800bab2:	f107 0214 	add.w	r2, r7, #20
 800bab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab8:	4413      	add	r3, r2
 800baba:	227e      	movs	r2, #126	; 0x7e
 800babc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800babe:	2300      	movs	r3, #0
 800bac0:	627b      	str	r3, [r7, #36]	; 0x24
 800bac2:	e002      	b.n	800baca <gen_numname+0xd2>
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac6:	3301      	adds	r3, #1
 800bac8:	627b      	str	r3, [r7, #36]	; 0x24
 800baca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	429a      	cmp	r2, r3
 800bad0:	d205      	bcs.n	800bade <gen_numname+0xe6>
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad6:	4413      	add	r3, r2
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	2b20      	cmp	r3, #32
 800badc:	d1f2      	bne.n	800bac4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	2b07      	cmp	r3, #7
 800bae2:	d807      	bhi.n	800baf4 <gen_numname+0xfc>
 800bae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae6:	1c5a      	adds	r2, r3, #1
 800bae8:	62ba      	str	r2, [r7, #40]	; 0x28
 800baea:	3330      	adds	r3, #48	; 0x30
 800baec:	443b      	add	r3, r7
 800baee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800baf2:	e000      	b.n	800baf6 <gen_numname+0xfe>
 800baf4:	2120      	movs	r1, #32
 800baf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	627a      	str	r2, [r7, #36]	; 0x24
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	4413      	add	r3, r2
 800bb00:	460a      	mov	r2, r1
 800bb02:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	2b07      	cmp	r3, #7
 800bb08:	d9e9      	bls.n	800bade <gen_numname+0xe6>
}
 800bb0a:	bf00      	nop
 800bb0c:	bf00      	nop
 800bb0e:	3730      	adds	r7, #48	; 0x30
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bb20:	230b      	movs	r3, #11
 800bb22:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	b2da      	uxtb	r2, r3
 800bb28:	0852      	lsrs	r2, r2, #1
 800bb2a:	01db      	lsls	r3, r3, #7
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	1c59      	adds	r1, r3, #1
 800bb34:	6079      	str	r1, [r7, #4]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	4413      	add	r3, r2
 800bb3a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	60bb      	str	r3, [r7, #8]
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d1ed      	bne.n	800bb24 <sum_sfn+0x10>
	return sum;
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3714      	adds	r7, #20
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b086      	sub	sp, #24
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bb64:	2100      	movs	r1, #0
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff fca8 	bl	800b4bc <dir_sdi>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d001      	beq.n	800bb7a <dir_find+0x24>
 800bb76:	7dfb      	ldrb	r3, [r7, #23]
 800bb78:	e0a9      	b.n	800bcce <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bb7a:	23ff      	movs	r3, #255	; 0xff
 800bb7c:	753b      	strb	r3, [r7, #20]
 800bb7e:	7d3b      	ldrb	r3, [r7, #20]
 800bb80:	757b      	strb	r3, [r7, #21]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f04f 32ff 	mov.w	r2, #4294967295
 800bb88:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6938      	ldr	r0, [r7, #16]
 800bb92:	f7ff f913 	bl	800adbc <move_window>
 800bb96:	4603      	mov	r3, r0
 800bb98:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bb9a:	7dfb      	ldrb	r3, [r7, #23]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f040 8090 	bne.w	800bcc2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a1b      	ldr	r3, [r3, #32]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bbaa:	7dbb      	ldrb	r3, [r7, #22]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d102      	bne.n	800bbb6 <dir_find+0x60>
 800bbb0:	2304      	movs	r3, #4
 800bbb2:	75fb      	strb	r3, [r7, #23]
 800bbb4:	e08a      	b.n	800bccc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	330b      	adds	r3, #11
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbc2:	73fb      	strb	r3, [r7, #15]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	7bfa      	ldrb	r2, [r7, #15]
 800bbc8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bbca:	7dbb      	ldrb	r3, [r7, #22]
 800bbcc:	2be5      	cmp	r3, #229	; 0xe5
 800bbce:	d007      	beq.n	800bbe0 <dir_find+0x8a>
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
 800bbd2:	f003 0308 	and.w	r3, r3, #8
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d009      	beq.n	800bbee <dir_find+0x98>
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	2b0f      	cmp	r3, #15
 800bbde:	d006      	beq.n	800bbee <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bbe0:	23ff      	movs	r3, #255	; 0xff
 800bbe2:	757b      	strb	r3, [r7, #21]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbea:	631a      	str	r2, [r3, #48]	; 0x30
 800bbec:	e05e      	b.n	800bcac <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
 800bbf0:	2b0f      	cmp	r3, #15
 800bbf2:	d136      	bne.n	800bc62 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bbfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d154      	bne.n	800bcac <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bc02:	7dbb      	ldrb	r3, [r7, #22]
 800bc04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00d      	beq.n	800bc28 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6a1b      	ldr	r3, [r3, #32]
 800bc10:	7b5b      	ldrb	r3, [r3, #13]
 800bc12:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bc14:	7dbb      	ldrb	r3, [r7, #22]
 800bc16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc1a:	75bb      	strb	r3, [r7, #22]
 800bc1c:	7dbb      	ldrb	r3, [r7, #22]
 800bc1e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	695a      	ldr	r2, [r3, #20]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bc28:	7dba      	ldrb	r2, [r7, #22]
 800bc2a:	7d7b      	ldrb	r3, [r7, #21]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d115      	bne.n	800bc5c <dir_find+0x106>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a1b      	ldr	r3, [r3, #32]
 800bc34:	330d      	adds	r3, #13
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	7d3a      	ldrb	r2, [r7, #20]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d10e      	bne.n	800bc5c <dir_find+0x106>
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	68da      	ldr	r2, [r3, #12]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a1b      	ldr	r3, [r3, #32]
 800bc46:	4619      	mov	r1, r3
 800bc48:	4610      	mov	r0, r2
 800bc4a:	f7ff fdfd 	bl	800b848 <cmp_lfn>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d003      	beq.n	800bc5c <dir_find+0x106>
 800bc54:	7d7b      	ldrb	r3, [r7, #21]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	e000      	b.n	800bc5e <dir_find+0x108>
 800bc5c:	23ff      	movs	r3, #255	; 0xff
 800bc5e:	757b      	strb	r3, [r7, #21]
 800bc60:	e024      	b.n	800bcac <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bc62:	7d7b      	ldrb	r3, [r7, #21]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d109      	bne.n	800bc7c <dir_find+0x126>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a1b      	ldr	r3, [r3, #32]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7ff ff51 	bl	800bb14 <sum_sfn>
 800bc72:	4603      	mov	r3, r0
 800bc74:	461a      	mov	r2, r3
 800bc76:	7d3b      	ldrb	r3, [r7, #20]
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d024      	beq.n	800bcc6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bc82:	f003 0301 	and.w	r3, r3, #1
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d10a      	bne.n	800bca0 <dir_find+0x14a>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6a18      	ldr	r0, [r3, #32]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	3324      	adds	r3, #36	; 0x24
 800bc92:	220b      	movs	r2, #11
 800bc94:	4619      	mov	r1, r3
 800bc96:	f7fe fe9f 	bl	800a9d8 <mem_cmp>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d014      	beq.n	800bcca <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bca0:	23ff      	movs	r3, #255	; 0xff
 800bca2:	757b      	strb	r3, [r7, #21]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcaa:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bcac:	2100      	movs	r1, #0
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f7ff fc7f 	bl	800b5b2 <dir_next>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f43f af65 	beq.w	800bb8a <dir_find+0x34>
 800bcc0:	e004      	b.n	800bccc <dir_find+0x176>
		if (res != FR_OK) break;
 800bcc2:	bf00      	nop
 800bcc4:	e002      	b.n	800bccc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bcc6:	bf00      	nop
 800bcc8:	e000      	b.n	800bccc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bcca:	bf00      	nop

	return res;
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3718      	adds	r7, #24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
	...

0800bcd8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08c      	sub	sp, #48	; 0x30
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bcec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d001      	beq.n	800bcf8 <dir_register+0x20>
 800bcf4:	2306      	movs	r3, #6
 800bcf6:	e0e0      	b.n	800beba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	627b      	str	r3, [r7, #36]	; 0x24
 800bcfc:	e002      	b.n	800bd04 <dir_register+0x2c>
 800bcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd00:	3301      	adds	r3, #1
 800bd02:	627b      	str	r3, [r7, #36]	; 0x24
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	68da      	ldr	r2, [r3, #12]
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	4413      	add	r3, r2
 800bd0e:	881b      	ldrh	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1f4      	bne.n	800bcfe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bd1a:	f107 030c 	add.w	r3, r7, #12
 800bd1e:	220c      	movs	r2, #12
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7fe fe1d 	bl	800a960 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
 800bd28:	f003 0301 	and.w	r3, r3, #1
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d032      	beq.n	800bd96 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2240      	movs	r2, #64	; 0x40
 800bd34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800bd38:	2301      	movs	r3, #1
 800bd3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd3c:	e016      	b.n	800bd6c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	68da      	ldr	r2, [r3, #12]
 800bd48:	f107 010c 	add.w	r1, r7, #12
 800bd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4e:	f7ff fe53 	bl	800b9f8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7ff feff 	bl	800bb56 <dir_find>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800bd5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d106      	bne.n	800bd74 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd68:	3301      	adds	r3, #1
 800bd6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	2b63      	cmp	r3, #99	; 0x63
 800bd70:	d9e5      	bls.n	800bd3e <dir_register+0x66>
 800bd72:	e000      	b.n	800bd76 <dir_register+0x9e>
			if (res != FR_OK) break;
 800bd74:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	2b64      	cmp	r3, #100	; 0x64
 800bd7a:	d101      	bne.n	800bd80 <dir_register+0xa8>
 800bd7c:	2307      	movs	r3, #7
 800bd7e:	e09c      	b.n	800beba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bd80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d002      	beq.n	800bd8e <dir_register+0xb6>
 800bd88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd8c:	e095      	b.n	800beba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bd8e:	7dfa      	ldrb	r2, [r7, #23]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	f003 0302 	and.w	r3, r3, #2
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d007      	beq.n	800bdb0 <dir_register+0xd8>
 800bda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda2:	330c      	adds	r3, #12
 800bda4:	4a47      	ldr	r2, [pc, #284]	; (800bec4 <dir_register+0x1ec>)
 800bda6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdaa:	089b      	lsrs	r3, r3, #2
 800bdac:	3301      	adds	r3, #1
 800bdae:	e000      	b.n	800bdb2 <dir_register+0xda>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bdb4:	6a39      	ldr	r1, [r7, #32]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7ff fcc0 	bl	800b73c <dir_alloc>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bdc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d148      	bne.n	800be5c <dir_register+0x184>
 800bdca:	6a3b      	ldr	r3, [r7, #32]
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	623b      	str	r3, [r7, #32]
 800bdd0:	6a3b      	ldr	r3, [r7, #32]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d042      	beq.n	800be5c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	695a      	ldr	r2, [r3, #20]
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	015b      	lsls	r3, r3, #5
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	4619      	mov	r1, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7ff fb6a 	bl	800b4bc <dir_sdi>
 800bde8:	4603      	mov	r3, r0
 800bdea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bdee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d132      	bne.n	800be5c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	3324      	adds	r3, #36	; 0x24
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff fe8a 	bl	800bb14 <sum_sfn>
 800be00:	4603      	mov	r3, r0
 800be02:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	69db      	ldr	r3, [r3, #28]
 800be08:	4619      	mov	r1, r3
 800be0a:	69f8      	ldr	r0, [r7, #28]
 800be0c:	f7fe ffd6 	bl	800adbc <move_window>
 800be10:	4603      	mov	r3, r0
 800be12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800be16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d11d      	bne.n	800be5a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	68d8      	ldr	r0, [r3, #12]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a19      	ldr	r1, [r3, #32]
 800be26:	6a3b      	ldr	r3, [r7, #32]
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	7efb      	ldrb	r3, [r7, #27]
 800be2c:	f7ff fd7c 	bl	800b928 <put_lfn>
				fs->wflag = 1;
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	2201      	movs	r2, #1
 800be34:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800be36:	2100      	movs	r1, #0
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff fbba 	bl	800b5b2 <dir_next>
 800be3e:	4603      	mov	r3, r0
 800be40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800be44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d107      	bne.n	800be5c <dir_register+0x184>
 800be4c:	6a3b      	ldr	r3, [r7, #32]
 800be4e:	3b01      	subs	r3, #1
 800be50:	623b      	str	r3, [r7, #32]
 800be52:	6a3b      	ldr	r3, [r7, #32]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1d5      	bne.n	800be04 <dir_register+0x12c>
 800be58:	e000      	b.n	800be5c <dir_register+0x184>
				if (res != FR_OK) break;
 800be5a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800be5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be60:	2b00      	cmp	r3, #0
 800be62:	d128      	bne.n	800beb6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	69db      	ldr	r3, [r3, #28]
 800be68:	4619      	mov	r1, r3
 800be6a:	69f8      	ldr	r0, [r7, #28]
 800be6c:	f7fe ffa6 	bl	800adbc <move_window>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800be76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d11b      	bne.n	800beb6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a1b      	ldr	r3, [r3, #32]
 800be82:	2220      	movs	r2, #32
 800be84:	2100      	movs	r1, #0
 800be86:	4618      	mov	r0, r3
 800be88:	f7fe fd8b 	bl	800a9a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a18      	ldr	r0, [r3, #32]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	3324      	adds	r3, #36	; 0x24
 800be94:	220b      	movs	r2, #11
 800be96:	4619      	mov	r1, r3
 800be98:	f7fe fd62 	bl	800a960 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a1b      	ldr	r3, [r3, #32]
 800bea6:	330c      	adds	r3, #12
 800bea8:	f002 0218 	and.w	r2, r2, #24
 800beac:	b2d2      	uxtb	r2, r2
 800beae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	2201      	movs	r2, #1
 800beb4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800beb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3730      	adds	r7, #48	; 0x30
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	4ec4ec4f 	.word	0x4ec4ec4f

0800bec8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b08a      	sub	sp, #40	; 0x28
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	613b      	str	r3, [r7, #16]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	60fb      	str	r3, [r7, #12]
 800bee0:	2300      	movs	r3, #0
 800bee2:	617b      	str	r3, [r7, #20]
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	1c5a      	adds	r2, r3, #1
 800beec:	61ba      	str	r2, [r7, #24]
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	4413      	add	r3, r2
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800bef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bef8:	2b1f      	cmp	r3, #31
 800befa:	d940      	bls.n	800bf7e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800befc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800befe:	2b2f      	cmp	r3, #47	; 0x2f
 800bf00:	d006      	beq.n	800bf10 <create_name+0x48>
 800bf02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf04:	2b5c      	cmp	r3, #92	; 0x5c
 800bf06:	d110      	bne.n	800bf2a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bf08:	e002      	b.n	800bf10 <create_name+0x48>
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	61bb      	str	r3, [r7, #24]
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	4413      	add	r3, r2
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	2b2f      	cmp	r3, #47	; 0x2f
 800bf1a:	d0f6      	beq.n	800bf0a <create_name+0x42>
 800bf1c:	693a      	ldr	r2, [r7, #16]
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	4413      	add	r3, r2
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	2b5c      	cmp	r3, #92	; 0x5c
 800bf26:	d0f0      	beq.n	800bf0a <create_name+0x42>
			break;
 800bf28:	e02a      	b.n	800bf80 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	2bfe      	cmp	r3, #254	; 0xfe
 800bf2e:	d901      	bls.n	800bf34 <create_name+0x6c>
 800bf30:	2306      	movs	r3, #6
 800bf32:	e17d      	b.n	800c230 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bf34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bf3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf3c:	2101      	movs	r1, #1
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f001 fc42 	bl	800d7c8 <ff_convert>
 800bf44:	4603      	mov	r3, r0
 800bf46:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bf48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <create_name+0x8a>
 800bf4e:	2306      	movs	r3, #6
 800bf50:	e16e      	b.n	800c230 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bf52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf54:	2b7f      	cmp	r3, #127	; 0x7f
 800bf56:	d809      	bhi.n	800bf6c <create_name+0xa4>
 800bf58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	488d      	ldr	r0, [pc, #564]	; (800c194 <create_name+0x2cc>)
 800bf5e:	f7fe fd62 	bl	800aa26 <chk_chr>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <create_name+0xa4>
 800bf68:	2306      	movs	r3, #6
 800bf6a:	e161      	b.n	800c230 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	617a      	str	r2, [r7, #20]
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	4413      	add	r3, r2
 800bf78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bf7a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bf7c:	e7b4      	b.n	800bee8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800bf7e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bf80:	693a      	ldr	r2, [r7, #16]
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	441a      	add	r2, r3
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bf8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf8c:	2b1f      	cmp	r3, #31
 800bf8e:	d801      	bhi.n	800bf94 <create_name+0xcc>
 800bf90:	2304      	movs	r3, #4
 800bf92:	e000      	b.n	800bf96 <create_name+0xce>
 800bf94:	2300      	movs	r3, #0
 800bf96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bf9a:	e011      	b.n	800bfc0 <create_name+0xf8>
		w = lfn[di - 1];
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800bfae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfb0:	2b20      	cmp	r3, #32
 800bfb2:	d002      	beq.n	800bfba <create_name+0xf2>
 800bfb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfb6:	2b2e      	cmp	r3, #46	; 0x2e
 800bfb8:	d106      	bne.n	800bfc8 <create_name+0x100>
		di--;
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1ea      	bne.n	800bf9c <create_name+0xd4>
 800bfc6:	e000      	b.n	800bfca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800bfc8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	005b      	lsls	r3, r3, #1
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d101      	bne.n	800bfe0 <create_name+0x118>
 800bfdc:	2306      	movs	r3, #6
 800bfde:	e127      	b.n	800c230 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3324      	adds	r3, #36	; 0x24
 800bfe4:	220b      	movs	r2, #11
 800bfe6:	2120      	movs	r1, #32
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe fcda 	bl	800a9a2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bfee:	2300      	movs	r3, #0
 800bff0:	61bb      	str	r3, [r7, #24]
 800bff2:	e002      	b.n	800bffa <create_name+0x132>
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	3301      	adds	r3, #1
 800bff8:	61bb      	str	r3, [r7, #24]
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	005b      	lsls	r3, r3, #1
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	4413      	add	r3, r2
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	2b20      	cmp	r3, #32
 800c006:	d0f5      	beq.n	800bff4 <create_name+0x12c>
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	005b      	lsls	r3, r3, #1
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	4413      	add	r3, r2
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	2b2e      	cmp	r3, #46	; 0x2e
 800c014:	d0ee      	beq.n	800bff4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d009      	beq.n	800c030 <create_name+0x168>
 800c01c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c020:	f043 0303 	orr.w	r3, r3, #3
 800c024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c028:	e002      	b.n	800c030 <create_name+0x168>
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	617b      	str	r3, [r7, #20]
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d009      	beq.n	800c04a <create_name+0x182>
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c03c:	3b01      	subs	r3, #1
 800c03e:	005b      	lsls	r3, r3, #1
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	4413      	add	r3, r2
 800c044:	881b      	ldrh	r3, [r3, #0]
 800c046:	2b2e      	cmp	r3, #46	; 0x2e
 800c048:	d1ef      	bne.n	800c02a <create_name+0x162>

	i = b = 0; ni = 8;
 800c04a:	2300      	movs	r3, #0
 800c04c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c050:	2300      	movs	r3, #0
 800c052:	623b      	str	r3, [r7, #32]
 800c054:	2308      	movs	r3, #8
 800c056:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	61ba      	str	r2, [r7, #24]
 800c05e:	005b      	lsls	r3, r3, #1
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	4413      	add	r3, r2
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 8090 	beq.w	800c190 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c072:	2b20      	cmp	r3, #32
 800c074:	d006      	beq.n	800c084 <create_name+0x1bc>
 800c076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c078:	2b2e      	cmp	r3, #46	; 0x2e
 800c07a:	d10a      	bne.n	800c092 <create_name+0x1ca>
 800c07c:	69ba      	ldr	r2, [r7, #24]
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	429a      	cmp	r2, r3
 800c082:	d006      	beq.n	800c092 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c088:	f043 0303 	orr.w	r3, r3, #3
 800c08c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c090:	e07d      	b.n	800c18e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c092:	6a3a      	ldr	r2, [r7, #32]
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	429a      	cmp	r2, r3
 800c098:	d203      	bcs.n	800c0a2 <create_name+0x1da>
 800c09a:	69ba      	ldr	r2, [r7, #24]
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d123      	bne.n	800c0ea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	2b0b      	cmp	r3, #11
 800c0a6:	d106      	bne.n	800c0b6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0ac:	f043 0303 	orr.w	r3, r3, #3
 800c0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c0b4:	e075      	b.n	800c1a2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c0b6:	69ba      	ldr	r2, [r7, #24]
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d005      	beq.n	800c0ca <create_name+0x202>
 800c0be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0c2:	f043 0303 	orr.w	r3, r3, #3
 800c0c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c0ca:	69ba      	ldr	r2, [r7, #24]
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d866      	bhi.n	800c1a0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	61bb      	str	r3, [r7, #24]
 800c0d6:	2308      	movs	r3, #8
 800c0d8:	623b      	str	r3, [r7, #32]
 800c0da:	230b      	movs	r3, #11
 800c0dc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c0de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c0e8:	e051      	b.n	800c18e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c0ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0ec:	2b7f      	cmp	r3, #127	; 0x7f
 800c0ee:	d914      	bls.n	800c11a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c0f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f001 fb67 	bl	800d7c8 <ff_convert>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c0fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c100:	2b00      	cmp	r3, #0
 800c102:	d004      	beq.n	800c10e <create_name+0x246>
 800c104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c106:	3b80      	subs	r3, #128	; 0x80
 800c108:	4a23      	ldr	r2, [pc, #140]	; (800c198 <create_name+0x2d0>)
 800c10a:	5cd3      	ldrb	r3, [r2, r3]
 800c10c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c10e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c112:	f043 0302 	orr.w	r3, r3, #2
 800c116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c11a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d007      	beq.n	800c130 <create_name+0x268>
 800c120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c122:	4619      	mov	r1, r3
 800c124:	481d      	ldr	r0, [pc, #116]	; (800c19c <create_name+0x2d4>)
 800c126:	f7fe fc7e 	bl	800aa26 <chk_chr>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d008      	beq.n	800c142 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c130:	235f      	movs	r3, #95	; 0x5f
 800c132:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c138:	f043 0303 	orr.w	r3, r3, #3
 800c13c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c140:	e01b      	b.n	800c17a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c144:	2b40      	cmp	r3, #64	; 0x40
 800c146:	d909      	bls.n	800c15c <create_name+0x294>
 800c148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c14a:	2b5a      	cmp	r3, #90	; 0x5a
 800c14c:	d806      	bhi.n	800c15c <create_name+0x294>
					b |= 2;
 800c14e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c152:	f043 0302 	orr.w	r3, r3, #2
 800c156:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c15a:	e00e      	b.n	800c17a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c15c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c15e:	2b60      	cmp	r3, #96	; 0x60
 800c160:	d90b      	bls.n	800c17a <create_name+0x2b2>
 800c162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c164:	2b7a      	cmp	r3, #122	; 0x7a
 800c166:	d808      	bhi.n	800c17a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c16c:	f043 0301 	orr.w	r3, r3, #1
 800c170:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c176:	3b20      	subs	r3, #32
 800c178:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c17a:	6a3b      	ldr	r3, [r7, #32]
 800c17c:	1c5a      	adds	r2, r3, #1
 800c17e:	623a      	str	r2, [r7, #32]
 800c180:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c182:	b2d1      	uxtb	r1, r2
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	4413      	add	r3, r2
 800c188:	460a      	mov	r2, r1
 800c18a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c18e:	e763      	b.n	800c058 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c190:	bf00      	nop
 800c192:	e006      	b.n	800c1a2 <create_name+0x2da>
 800c194:	0801020c 	.word	0x0801020c
 800c198:	08010280 	.word	0x08010280
 800c19c:	08010218 	.word	0x08010218
			if (si > di) break;			/* No extension */
 800c1a0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c1a8:	2be5      	cmp	r3, #229	; 0xe5
 800c1aa:	d103      	bne.n	800c1b4 <create_name+0x2ec>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2205      	movs	r2, #5
 800c1b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	2b08      	cmp	r3, #8
 800c1b8:	d104      	bne.n	800c1c4 <create_name+0x2fc>
 800c1ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c1c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1c8:	f003 030c 	and.w	r3, r3, #12
 800c1cc:	2b0c      	cmp	r3, #12
 800c1ce:	d005      	beq.n	800c1dc <create_name+0x314>
 800c1d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1d4:	f003 0303 	and.w	r3, r3, #3
 800c1d8:	2b03      	cmp	r3, #3
 800c1da:	d105      	bne.n	800c1e8 <create_name+0x320>
 800c1dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1e0:	f043 0302 	orr.w	r3, r3, #2
 800c1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1ec:	f003 0302 	and.w	r3, r3, #2
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d117      	bne.n	800c224 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c1f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1f8:	f003 0303 	and.w	r3, r3, #3
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d105      	bne.n	800c20c <create_name+0x344>
 800c200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c204:	f043 0310 	orr.w	r3, r3, #16
 800c208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c20c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c210:	f003 030c 	and.w	r3, r3, #12
 800c214:	2b04      	cmp	r3, #4
 800c216:	d105      	bne.n	800c224 <create_name+0x35c>
 800c218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c21c:	f043 0308 	orr.w	r3, r3, #8
 800c220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c22a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c22e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c230:	4618      	mov	r0, r3
 800c232:	3728      	adds	r7, #40	; 0x28
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c24c:	e002      	b.n	800c254 <follow_path+0x1c>
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	3301      	adds	r3, #1
 800c252:	603b      	str	r3, [r7, #0]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	2b2f      	cmp	r3, #47	; 0x2f
 800c25a:	d0f8      	beq.n	800c24e <follow_path+0x16>
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	2b5c      	cmp	r3, #92	; 0x5c
 800c262:	d0f4      	beq.n	800c24e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	2200      	movs	r2, #0
 800c268:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	2b1f      	cmp	r3, #31
 800c270:	d80a      	bhi.n	800c288 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2280      	movs	r2, #128	; 0x80
 800c276:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c27a:	2100      	movs	r1, #0
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7ff f91d 	bl	800b4bc <dir_sdi>
 800c282:	4603      	mov	r3, r0
 800c284:	75fb      	strb	r3, [r7, #23]
 800c286:	e043      	b.n	800c310 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c288:	463b      	mov	r3, r7
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7ff fe1b 	bl	800bec8 <create_name>
 800c292:	4603      	mov	r3, r0
 800c294:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c296:	7dfb      	ldrb	r3, [r7, #23]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d134      	bne.n	800c306 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7ff fc5a 	bl	800bb56 <dir_find>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c2ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c2ae:	7dfb      	ldrb	r3, [r7, #23]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00a      	beq.n	800c2ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c2b4:	7dfb      	ldrb	r3, [r7, #23]
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	d127      	bne.n	800c30a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c2ba:	7afb      	ldrb	r3, [r7, #11]
 800c2bc:	f003 0304 	and.w	r3, r3, #4
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d122      	bne.n	800c30a <follow_path+0xd2>
 800c2c4:	2305      	movs	r3, #5
 800c2c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c2c8:	e01f      	b.n	800c30a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c2ca:	7afb      	ldrb	r3, [r7, #11]
 800c2cc:	f003 0304 	and.w	r3, r3, #4
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d11c      	bne.n	800c30e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	799b      	ldrb	r3, [r3, #6]
 800c2d8:	f003 0310 	and.w	r3, r3, #16
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d102      	bne.n	800c2e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c2e0:	2305      	movs	r3, #5
 800c2e2:	75fb      	strb	r3, [r7, #23]
 800c2e4:	e014      	b.n	800c310 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	695b      	ldr	r3, [r3, #20]
 800c2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f4:	4413      	add	r3, r2
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f7ff fa66 	bl	800b7ca <ld_clust>
 800c2fe:	4602      	mov	r2, r0
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c304:	e7c0      	b.n	800c288 <follow_path+0x50>
			if (res != FR_OK) break;
 800c306:	bf00      	nop
 800c308:	e002      	b.n	800c310 <follow_path+0xd8>
				break;
 800c30a:	bf00      	nop
 800c30c:	e000      	b.n	800c310 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c30e:	bf00      	nop
			}
		}
	}

	return res;
 800c310:	7dfb      	ldrb	r3, [r7, #23]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c31a:	b480      	push	{r7}
 800c31c:	b087      	sub	sp, #28
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c322:	f04f 33ff 	mov.w	r3, #4294967295
 800c326:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d031      	beq.n	800c394 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	617b      	str	r3, [r7, #20]
 800c336:	e002      	b.n	800c33e <get_ldnumber+0x24>
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	3301      	adds	r3, #1
 800c33c:	617b      	str	r3, [r7, #20]
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	2b1f      	cmp	r3, #31
 800c344:	d903      	bls.n	800c34e <get_ldnumber+0x34>
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	2b3a      	cmp	r3, #58	; 0x3a
 800c34c:	d1f4      	bne.n	800c338 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	2b3a      	cmp	r3, #58	; 0x3a
 800c354:	d11c      	bne.n	800c390 <get_ldnumber+0x76>
			tp = *path;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	1c5a      	adds	r2, r3, #1
 800c360:	60fa      	str	r2, [r7, #12]
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	3b30      	subs	r3, #48	; 0x30
 800c366:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	2b09      	cmp	r3, #9
 800c36c:	d80e      	bhi.n	800c38c <get_ldnumber+0x72>
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	429a      	cmp	r2, r3
 800c374:	d10a      	bne.n	800c38c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d107      	bne.n	800c38c <get_ldnumber+0x72>
					vol = (int)i;
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	3301      	adds	r3, #1
 800c384:	617b      	str	r3, [r7, #20]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	697a      	ldr	r2, [r7, #20]
 800c38a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	e002      	b.n	800c396 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c390:	2300      	movs	r3, #0
 800c392:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c394:	693b      	ldr	r3, [r7, #16]
}
 800c396:	4618      	mov	r0, r3
 800c398:	371c      	adds	r7, #28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
	...

0800c3a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	70da      	strb	r2, [r3, #3]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ba:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7fe fcfc 	bl	800adbc <move_window>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <check_fs+0x2a>
 800c3ca:	2304      	movs	r3, #4
 800c3cc:	e038      	b.n	800c440 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	3334      	adds	r3, #52	; 0x34
 800c3d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7fe fa40 	bl	800a85c <ld_word>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d001      	beq.n	800c3ec <check_fs+0x48>
 800c3e8:	2303      	movs	r3, #3
 800c3ea:	e029      	b.n	800c440 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3f2:	2be9      	cmp	r3, #233	; 0xe9
 800c3f4:	d009      	beq.n	800c40a <check_fs+0x66>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3fc:	2beb      	cmp	r3, #235	; 0xeb
 800c3fe:	d11e      	bne.n	800c43e <check_fs+0x9a>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c406:	2b90      	cmp	r3, #144	; 0x90
 800c408:	d119      	bne.n	800c43e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	3334      	adds	r3, #52	; 0x34
 800c40e:	3336      	adds	r3, #54	; 0x36
 800c410:	4618      	mov	r0, r3
 800c412:	f7fe fa3b 	bl	800a88c <ld_dword>
 800c416:	4603      	mov	r3, r0
 800c418:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c41c:	4a0a      	ldr	r2, [pc, #40]	; (800c448 <check_fs+0xa4>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d101      	bne.n	800c426 <check_fs+0x82>
 800c422:	2300      	movs	r3, #0
 800c424:	e00c      	b.n	800c440 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	3334      	adds	r3, #52	; 0x34
 800c42a:	3352      	adds	r3, #82	; 0x52
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fe fa2d 	bl	800a88c <ld_dword>
 800c432:	4603      	mov	r3, r0
 800c434:	4a05      	ldr	r2, [pc, #20]	; (800c44c <check_fs+0xa8>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d101      	bne.n	800c43e <check_fs+0x9a>
 800c43a:	2300      	movs	r3, #0
 800c43c:	e000      	b.n	800c440 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c43e:	2302      	movs	r3, #2
}
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	00544146 	.word	0x00544146
 800c44c:	33544146 	.word	0x33544146

0800c450 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b096      	sub	sp, #88	; 0x58
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	4613      	mov	r3, r2
 800c45c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	2200      	movs	r2, #0
 800c462:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff ff58 	bl	800c31a <get_ldnumber>
 800c46a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	da01      	bge.n	800c476 <find_volume+0x26>
 800c472:	230b      	movs	r3, #11
 800c474:	e230      	b.n	800c8d8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c476:	4aa1      	ldr	r2, [pc, #644]	; (800c6fc <find_volume+0x2ac>)
 800c478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c47a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c47e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <find_volume+0x3a>
 800c486:	230c      	movs	r3, #12
 800c488:	e226      	b.n	800c8d8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c48e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c490:	79fb      	ldrb	r3, [r7, #7]
 800c492:	f023 0301 	bic.w	r3, r3, #1
 800c496:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d01a      	beq.n	800c4d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a2:	785b      	ldrb	r3, [r3, #1]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7fe f93b 	bl	800a720 <disk_status>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c4b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c4b4:	f003 0301 	and.w	r3, r3, #1
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d10c      	bne.n	800c4d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c4bc:	79fb      	ldrb	r3, [r7, #7]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d007      	beq.n	800c4d2 <find_volume+0x82>
 800c4c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c4c6:	f003 0304 	and.w	r3, r3, #4
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c4ce:	230a      	movs	r3, #10
 800c4d0:	e202      	b.n	800c8d8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	e200      	b.n	800c8d8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d8:	2200      	movs	r2, #0
 800c4da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4de:	b2da      	uxtb	r2, r3
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e6:	785b      	ldrb	r3, [r3, #1]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fe f933 	bl	800a754 <disk_initialize>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c4f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c4f8:	f003 0301 	and.w	r3, r3, #1
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d001      	beq.n	800c504 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c500:	2303      	movs	r3, #3
 800c502:	e1e9      	b.n	800c8d8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c504:	79fb      	ldrb	r3, [r7, #7]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d007      	beq.n	800c51a <find_volume+0xca>
 800c50a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c50e:	f003 0304 	and.w	r3, r3, #4
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c516:	230a      	movs	r3, #10
 800c518:	e1de      	b.n	800c8d8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c51e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c522:	f7ff ff3f 	bl	800c3a4 <check_fs>
 800c526:	4603      	mov	r3, r0
 800c528:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c52c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c530:	2b02      	cmp	r3, #2
 800c532:	d149      	bne.n	800c5c8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c534:	2300      	movs	r3, #0
 800c536:	643b      	str	r3, [r7, #64]	; 0x40
 800c538:	e01e      	b.n	800c578 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c542:	011b      	lsls	r3, r3, #4
 800c544:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c548:	4413      	add	r3, r2
 800c54a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54e:	3304      	adds	r3, #4
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d006      	beq.n	800c564 <find_volume+0x114>
 800c556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c558:	3308      	adds	r3, #8
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fe f996 	bl	800a88c <ld_dword>
 800c560:	4602      	mov	r2, r0
 800c562:	e000      	b.n	800c566 <find_volume+0x116>
 800c564:	2200      	movs	r2, #0
 800c566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	3358      	adds	r3, #88	; 0x58
 800c56c:	443b      	add	r3, r7
 800c56e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c574:	3301      	adds	r3, #1
 800c576:	643b      	str	r3, [r7, #64]	; 0x40
 800c578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c57a:	2b03      	cmp	r3, #3
 800c57c:	d9dd      	bls.n	800c53a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c57e:	2300      	movs	r3, #0
 800c580:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <find_volume+0x13e>
 800c588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c58a:	3b01      	subs	r3, #1
 800c58c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	3358      	adds	r3, #88	; 0x58
 800c594:	443b      	add	r3, r7
 800c596:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c59a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c59c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d005      	beq.n	800c5ae <find_volume+0x15e>
 800c5a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c5a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5a6:	f7ff fefd 	bl	800c3a4 <check_fs>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	e000      	b.n	800c5b0 <find_volume+0x160>
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c5b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d905      	bls.n	800c5c8 <find_volume+0x178>
 800c5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5be:	3301      	adds	r3, #1
 800c5c0:	643b      	str	r3, [r7, #64]	; 0x40
 800c5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5c4:	2b03      	cmp	r3, #3
 800c5c6:	d9e2      	bls.n	800c58e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c5c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5cc:	2b04      	cmp	r3, #4
 800c5ce:	d101      	bne.n	800c5d4 <find_volume+0x184>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e181      	b.n	800c8d8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c5d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d901      	bls.n	800c5e0 <find_volume+0x190>
 800c5dc:	230d      	movs	r3, #13
 800c5de:	e17b      	b.n	800c8d8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e2:	3334      	adds	r3, #52	; 0x34
 800c5e4:	330b      	adds	r3, #11
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fe f938 	bl	800a85c <ld_word>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5f2:	d001      	beq.n	800c5f8 <find_volume+0x1a8>
 800c5f4:	230d      	movs	r3, #13
 800c5f6:	e16f      	b.n	800c8d8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fa:	3334      	adds	r3, #52	; 0x34
 800c5fc:	3316      	adds	r3, #22
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7fe f92c 	bl	800a85c <ld_word>
 800c604:	4603      	mov	r3, r0
 800c606:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d106      	bne.n	800c61c <find_volume+0x1cc>
 800c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c610:	3334      	adds	r3, #52	; 0x34
 800c612:	3324      	adds	r3, #36	; 0x24
 800c614:	4618      	mov	r0, r3
 800c616:	f7fe f939 	bl	800a88c <ld_dword>
 800c61a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c620:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c624:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62e:	789b      	ldrb	r3, [r3, #2]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d005      	beq.n	800c640 <find_volume+0x1f0>
 800c634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c636:	789b      	ldrb	r3, [r3, #2]
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d001      	beq.n	800c640 <find_volume+0x1f0>
 800c63c:	230d      	movs	r3, #13
 800c63e:	e14b      	b.n	800c8d8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	789b      	ldrb	r3, [r3, #2]
 800c644:	461a      	mov	r2, r3
 800c646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c648:	fb02 f303 	mul.w	r3, r2, r3
 800c64c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c654:	b29a      	uxth	r2, r3
 800c656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c658:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65c:	895b      	ldrh	r3, [r3, #10]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d008      	beq.n	800c674 <find_volume+0x224>
 800c662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c664:	895b      	ldrh	r3, [r3, #10]
 800c666:	461a      	mov	r2, r3
 800c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66a:	895b      	ldrh	r3, [r3, #10]
 800c66c:	3b01      	subs	r3, #1
 800c66e:	4013      	ands	r3, r2
 800c670:	2b00      	cmp	r3, #0
 800c672:	d001      	beq.n	800c678 <find_volume+0x228>
 800c674:	230d      	movs	r3, #13
 800c676:	e12f      	b.n	800c8d8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67a:	3334      	adds	r3, #52	; 0x34
 800c67c:	3311      	adds	r3, #17
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fe f8ec 	bl	800a85c <ld_word>
 800c684:	4603      	mov	r3, r0
 800c686:	461a      	mov	r2, r3
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68e:	891b      	ldrh	r3, [r3, #8]
 800c690:	f003 030f 	and.w	r3, r3, #15
 800c694:	b29b      	uxth	r3, r3
 800c696:	2b00      	cmp	r3, #0
 800c698:	d001      	beq.n	800c69e <find_volume+0x24e>
 800c69a:	230d      	movs	r3, #13
 800c69c:	e11c      	b.n	800c8d8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a0:	3334      	adds	r3, #52	; 0x34
 800c6a2:	3313      	adds	r3, #19
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fe f8d9 	bl	800a85c <ld_word>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c6ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d106      	bne.n	800c6c2 <find_volume+0x272>
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b6:	3334      	adds	r3, #52	; 0x34
 800c6b8:	3320      	adds	r3, #32
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fe f8e6 	bl	800a88c <ld_dword>
 800c6c0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c4:	3334      	adds	r3, #52	; 0x34
 800c6c6:	330e      	adds	r3, #14
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fe f8c7 	bl	800a85c <ld_word>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c6d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d101      	bne.n	800c6dc <find_volume+0x28c>
 800c6d8:	230d      	movs	r3, #13
 800c6da:	e0fd      	b.n	800c8d8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c6dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c6de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6e0:	4413      	add	r3, r2
 800c6e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6e4:	8912      	ldrh	r2, [r2, #8]
 800c6e6:	0912      	lsrs	r2, r2, #4
 800c6e8:	b292      	uxth	r2, r2
 800c6ea:	4413      	add	r3, r2
 800c6ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c6ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d204      	bcs.n	800c700 <find_volume+0x2b0>
 800c6f6:	230d      	movs	r3, #13
 800c6f8:	e0ee      	b.n	800c8d8 <find_volume+0x488>
 800c6fa:	bf00      	nop
 800c6fc:	200008b0 	.word	0x200008b0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c708:	8952      	ldrh	r2, [r2, #10]
 800c70a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c70e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	2b00      	cmp	r3, #0
 800c714:	d101      	bne.n	800c71a <find_volume+0x2ca>
 800c716:	230d      	movs	r3, #13
 800c718:	e0de      	b.n	800c8d8 <find_volume+0x488>
		fmt = FS_FAT32;
 800c71a:	2303      	movs	r3, #3
 800c71c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c726:	4293      	cmp	r3, r2
 800c728:	d802      	bhi.n	800c730 <find_volume+0x2e0>
 800c72a:	2302      	movs	r3, #2
 800c72c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c736:	4293      	cmp	r3, r2
 800c738:	d802      	bhi.n	800c740 <find_volume+0x2f0>
 800c73a:	2301      	movs	r3, #1
 800c73c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c742:	1c9a      	adds	r2, r3, #2
 800c744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c746:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c74c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c74e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c752:	441a      	add	r2, r3
 800c754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c756:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c758:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	441a      	add	r2, r3
 800c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c760:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c762:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c766:	2b03      	cmp	r3, #3
 800c768:	d11e      	bne.n	800c7a8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76c:	3334      	adds	r3, #52	; 0x34
 800c76e:	332a      	adds	r3, #42	; 0x2a
 800c770:	4618      	mov	r0, r3
 800c772:	f7fe f873 	bl	800a85c <ld_word>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d001      	beq.n	800c780 <find_volume+0x330>
 800c77c:	230d      	movs	r3, #13
 800c77e:	e0ab      	b.n	800c8d8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c782:	891b      	ldrh	r3, [r3, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d001      	beq.n	800c78c <find_volume+0x33c>
 800c788:	230d      	movs	r3, #13
 800c78a:	e0a5      	b.n	800c8d8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78e:	3334      	adds	r3, #52	; 0x34
 800c790:	332c      	adds	r3, #44	; 0x2c
 800c792:	4618      	mov	r0, r3
 800c794:	f7fe f87a 	bl	800a88c <ld_dword>
 800c798:	4602      	mov	r2, r0
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	699b      	ldr	r3, [r3, #24]
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	647b      	str	r3, [r7, #68]	; 0x44
 800c7a6:	e01f      	b.n	800c7e8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7aa:	891b      	ldrh	r3, [r3, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d101      	bne.n	800c7b4 <find_volume+0x364>
 800c7b0:	230d      	movs	r3, #13
 800c7b2:	e091      	b.n	800c8d8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ba:	441a      	add	r2, r3
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c7c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d103      	bne.n	800c7d0 <find_volume+0x380>
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	699b      	ldr	r3, [r3, #24]
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	e00a      	b.n	800c7e6 <find_volume+0x396>
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	699a      	ldr	r2, [r3, #24]
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	005b      	lsls	r3, r3, #1
 800c7d8:	4413      	add	r3, r2
 800c7da:	085a      	lsrs	r2, r3, #1
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	699b      	ldr	r3, [r3, #24]
 800c7e0:	f003 0301 	and.w	r3, r3, #1
 800c7e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c7e6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	69da      	ldr	r2, [r3, #28]
 800c7ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c7f2:	0a5b      	lsrs	r3, r3, #9
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d201      	bcs.n	800c7fc <find_volume+0x3ac>
 800c7f8:	230d      	movs	r3, #13
 800c7fa:	e06d      	b.n	800c8d8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c802:	615a      	str	r2, [r3, #20]
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	695a      	ldr	r2, [r3, #20]
 800c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80e:	2280      	movs	r2, #128	; 0x80
 800c810:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c812:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c816:	2b03      	cmp	r3, #3
 800c818:	d149      	bne.n	800c8ae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	3334      	adds	r3, #52	; 0x34
 800c81e:	3330      	adds	r3, #48	; 0x30
 800c820:	4618      	mov	r0, r3
 800c822:	f7fe f81b 	bl	800a85c <ld_word>
 800c826:	4603      	mov	r3, r0
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d140      	bne.n	800c8ae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c82c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c82e:	3301      	adds	r3, #1
 800c830:	4619      	mov	r1, r3
 800c832:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c834:	f7fe fac2 	bl	800adbc <move_window>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d137      	bne.n	800c8ae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c840:	2200      	movs	r2, #0
 800c842:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c846:	3334      	adds	r3, #52	; 0x34
 800c848:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fe f805 	bl	800a85c <ld_word>
 800c852:	4603      	mov	r3, r0
 800c854:	461a      	mov	r2, r3
 800c856:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d127      	bne.n	800c8ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c860:	3334      	adds	r3, #52	; 0x34
 800c862:	4618      	mov	r0, r3
 800c864:	f7fe f812 	bl	800a88c <ld_dword>
 800c868:	4603      	mov	r3, r0
 800c86a:	4a1d      	ldr	r2, [pc, #116]	; (800c8e0 <find_volume+0x490>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d11e      	bne.n	800c8ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c872:	3334      	adds	r3, #52	; 0x34
 800c874:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fe f807 	bl	800a88c <ld_dword>
 800c87e:	4603      	mov	r3, r0
 800c880:	4a18      	ldr	r2, [pc, #96]	; (800c8e4 <find_volume+0x494>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d113      	bne.n	800c8ae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c888:	3334      	adds	r3, #52	; 0x34
 800c88a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fd fffc 	bl	800a88c <ld_dword>
 800c894:	4602      	mov	r2, r0
 800c896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c898:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89c:	3334      	adds	r3, #52	; 0x34
 800c89e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fd fff2 	bl	800a88c <ld_dword>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ac:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c8b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c8b6:	4b0c      	ldr	r3, [pc, #48]	; (800c8e8 <find_volume+0x498>)
 800c8b8:	881b      	ldrh	r3, [r3, #0]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	4b0a      	ldr	r3, [pc, #40]	; (800c8e8 <find_volume+0x498>)
 800c8c0:	801a      	strh	r2, [r3, #0]
 800c8c2:	4b09      	ldr	r3, [pc, #36]	; (800c8e8 <find_volume+0x498>)
 800c8c4:	881a      	ldrh	r2, [r3, #0]
 800c8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8cc:	4a07      	ldr	r2, [pc, #28]	; (800c8ec <find_volume+0x49c>)
 800c8ce:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c8d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8d2:	f7fe fa0b 	bl	800acec <clear_lock>
#endif
	return FR_OK;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3758      	adds	r7, #88	; 0x58
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	41615252 	.word	0x41615252
 800c8e4:	61417272 	.word	0x61417272
 800c8e8:	200008b4 	.word	0x200008b4
 800c8ec:	20000908 	.word	0x20000908

0800c8f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c8fa:	2309      	movs	r3, #9
 800c8fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d01c      	beq.n	800c93e <validate+0x4e>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d018      	beq.n	800c93e <validate+0x4e>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d013      	beq.n	800c93e <validate+0x4e>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	889a      	ldrh	r2, [r3, #4]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	88db      	ldrh	r3, [r3, #6]
 800c920:	429a      	cmp	r2, r3
 800c922:	d10c      	bne.n	800c93e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	785b      	ldrb	r3, [r3, #1]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fd fef8 	bl	800a720 <disk_status>
 800c930:	4603      	mov	r3, r0
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	2b00      	cmp	r3, #0
 800c938:	d101      	bne.n	800c93e <validate+0x4e>
			res = FR_OK;
 800c93a:	2300      	movs	r3, #0
 800c93c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c93e:	7bfb      	ldrb	r3, [r7, #15]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d102      	bne.n	800c94a <validate+0x5a>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	e000      	b.n	800c94c <validate+0x5c>
 800c94a:	2300      	movs	r3, #0
 800c94c:	683a      	ldr	r2, [r7, #0]
 800c94e:	6013      	str	r3, [r2, #0]
	return res;
 800c950:	7bfb      	ldrb	r3, [r7, #15]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
	...

0800c95c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b088      	sub	sp, #32
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	4613      	mov	r3, r2
 800c968:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c96e:	f107 0310 	add.w	r3, r7, #16
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff fcd1 	bl	800c31a <get_ldnumber>
 800c978:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	da01      	bge.n	800c984 <f_mount+0x28>
 800c980:	230b      	movs	r3, #11
 800c982:	e02b      	b.n	800c9dc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c984:	4a17      	ldr	r2, [pc, #92]	; (800c9e4 <f_mount+0x88>)
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c98c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d005      	beq.n	800c9a0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c994:	69b8      	ldr	r0, [r7, #24]
 800c996:	f7fe f9a9 	bl	800acec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	2200      	movs	r2, #0
 800c99e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d002      	beq.n	800c9ac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	490d      	ldr	r1, [pc, #52]	; (800c9e4 <f_mount+0x88>)
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d002      	beq.n	800c9c2 <f_mount+0x66>
 800c9bc:	79fb      	ldrb	r3, [r7, #7]
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d001      	beq.n	800c9c6 <f_mount+0x6a>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	e00a      	b.n	800c9dc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c9c6:	f107 010c 	add.w	r1, r7, #12
 800c9ca:	f107 0308 	add.w	r3, r7, #8
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7ff fd3d 	bl	800c450 <find_volume>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3720      	adds	r7, #32
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	200008b0 	.word	0x200008b0

0800c9e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b09a      	sub	sp, #104	; 0x68
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <f_open+0x18>
 800c9fc:	2309      	movs	r3, #9
 800c9fe:	e1ad      	b.n	800cd5c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ca00:	79fb      	ldrb	r3, [r7, #7]
 800ca02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ca08:	79fa      	ldrb	r2, [r7, #7]
 800ca0a:	f107 0114 	add.w	r1, r7, #20
 800ca0e:	f107 0308 	add.w	r3, r7, #8
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7ff fd1c 	bl	800c450 <find_volume>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ca1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f040 8191 	bne.w	800cd4a <f_open+0x362>
		dj.obj.fs = fs;
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	f107 0318 	add.w	r3, r7, #24
 800ca32:	4611      	mov	r1, r2
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7ff fbff 	bl	800c238 <follow_path>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ca40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d11a      	bne.n	800ca7e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ca48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ca4c:	b25b      	sxtb	r3, r3
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	da03      	bge.n	800ca5a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ca52:	2306      	movs	r3, #6
 800ca54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ca58:	e011      	b.n	800ca7e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ca5a:	79fb      	ldrb	r3, [r7, #7]
 800ca5c:	f023 0301 	bic.w	r3, r3, #1
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	bf14      	ite	ne
 800ca64:	2301      	movne	r3, #1
 800ca66:	2300      	moveq	r3, #0
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	f107 0318 	add.w	r3, r7, #24
 800ca70:	4611      	mov	r1, r2
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fd fff2 	bl	800aa5c <chk_lock>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ca7e:	79fb      	ldrb	r3, [r7, #7]
 800ca80:	f003 031c 	and.w	r3, r3, #28
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d07f      	beq.n	800cb88 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ca88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d017      	beq.n	800cac0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ca90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca94:	2b04      	cmp	r3, #4
 800ca96:	d10e      	bne.n	800cab6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ca98:	f7fe f83c 	bl	800ab14 <enq_lock>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d006      	beq.n	800cab0 <f_open+0xc8>
 800caa2:	f107 0318 	add.w	r3, r7, #24
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7ff f916 	bl	800bcd8 <dir_register>
 800caac:	4603      	mov	r3, r0
 800caae:	e000      	b.n	800cab2 <f_open+0xca>
 800cab0:	2312      	movs	r3, #18
 800cab2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cab6:	79fb      	ldrb	r3, [r7, #7]
 800cab8:	f043 0308 	orr.w	r3, r3, #8
 800cabc:	71fb      	strb	r3, [r7, #7]
 800cabe:	e010      	b.n	800cae2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cac0:	7fbb      	ldrb	r3, [r7, #30]
 800cac2:	f003 0311 	and.w	r3, r3, #17
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d003      	beq.n	800cad2 <f_open+0xea>
					res = FR_DENIED;
 800caca:	2307      	movs	r3, #7
 800cacc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cad0:	e007      	b.n	800cae2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cad2:	79fb      	ldrb	r3, [r7, #7]
 800cad4:	f003 0304 	and.w	r3, r3, #4
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d002      	beq.n	800cae2 <f_open+0xfa>
 800cadc:	2308      	movs	r3, #8
 800cade:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cae2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d168      	bne.n	800cbbc <f_open+0x1d4>
 800caea:	79fb      	ldrb	r3, [r7, #7]
 800caec:	f003 0308 	and.w	r3, r3, #8
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d063      	beq.n	800cbbc <f_open+0x1d4>
				dw = GET_FATTIME();
 800caf4:	f7fd fdb6 	bl	800a664 <get_fattime>
 800caf8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	330e      	adds	r3, #14
 800cafe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fd ff01 	bl	800a908 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb08:	3316      	adds	r3, #22
 800cb0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7fd fefb 	bl	800a908 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	330b      	adds	r3, #11
 800cb16:	2220      	movs	r2, #32
 800cb18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb1e:	4611      	mov	r1, r2
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fe fe52 	bl	800b7ca <ld_clust>
 800cb26:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fe fe6a 	bl	800b808 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb36:	331c      	adds	r3, #28
 800cb38:	2100      	movs	r1, #0
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7fd fee4 	bl	800a908 <st_dword>
					fs->wflag = 1;
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	2201      	movs	r2, #1
 800cb44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cb46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d037      	beq.n	800cbbc <f_open+0x1d4>
						dw = fs->winsect;
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb50:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800cb52:	f107 0318 	add.w	r3, r7, #24
 800cb56:	2200      	movs	r2, #0
 800cb58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe fb7d 	bl	800b25a <remove_chain>
 800cb60:	4603      	mov	r3, r0
 800cb62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800cb66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d126      	bne.n	800cbbc <f_open+0x1d4>
							res = move_window(fs, dw);
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fe f922 	bl	800adbc <move_window>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb82:	3a01      	subs	r2, #1
 800cb84:	611a      	str	r2, [r3, #16]
 800cb86:	e019      	b.n	800cbbc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cb88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d115      	bne.n	800cbbc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cb90:	7fbb      	ldrb	r3, [r7, #30]
 800cb92:	f003 0310 	and.w	r3, r3, #16
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d003      	beq.n	800cba2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cb9a:	2304      	movs	r3, #4
 800cb9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cba0:	e00c      	b.n	800cbbc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cba2:	79fb      	ldrb	r3, [r7, #7]
 800cba4:	f003 0302 	and.w	r3, r3, #2
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d007      	beq.n	800cbbc <f_open+0x1d4>
 800cbac:	7fbb      	ldrb	r3, [r7, #30]
 800cbae:	f003 0301 	and.w	r3, r3, #1
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <f_open+0x1d4>
						res = FR_DENIED;
 800cbb6:	2307      	movs	r3, #7
 800cbb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cbbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d128      	bne.n	800cc16 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cbc4:	79fb      	ldrb	r3, [r7, #7]
 800cbc6:	f003 0308 	and.w	r3, r3, #8
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d003      	beq.n	800cbd6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cbce:	79fb      	ldrb	r3, [r7, #7]
 800cbd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbd4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cbde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	f023 0301 	bic.w	r3, r3, #1
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	bf14      	ite	ne
 800cbee:	2301      	movne	r3, #1
 800cbf0:	2300      	moveq	r3, #0
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	f107 0318 	add.w	r3, r7, #24
 800cbfa:	4611      	mov	r1, r2
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7fd ffab 	bl	800ab58 <inc_lock>
 800cc02:	4602      	mov	r2, r0
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	691b      	ldr	r3, [r3, #16]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d102      	bne.n	800cc16 <f_open+0x22e>
 800cc10:	2302      	movs	r3, #2
 800cc12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cc16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f040 8095 	bne.w	800cd4a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc24:	4611      	mov	r1, r2
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7fe fdcf 	bl	800b7ca <ld_clust>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	331c      	adds	r3, #28
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fd fe28 	bl	800a88c <ld_dword>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2200      	movs	r2, #0
 800cc46:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	88da      	ldrh	r2, [r3, #6]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	79fa      	ldrb	r2, [r7, #7]
 800cc5a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	3330      	adds	r3, #48	; 0x30
 800cc72:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc76:	2100      	movs	r1, #0
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fd fe92 	bl	800a9a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cc7e:	79fb      	ldrb	r3, [r7, #7]
 800cc80:	f003 0320 	and.w	r3, r3, #32
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d060      	beq.n	800cd4a <f_open+0x362>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d05c      	beq.n	800cd4a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	68da      	ldr	r2, [r3, #12]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	895b      	ldrh	r3, [r3, #10]
 800cc9c:	025b      	lsls	r3, r3, #9
 800cc9e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccac:	e016      	b.n	800ccdc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fe f93d 	bl	800af32 <get_fat>
 800ccb8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ccba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d802      	bhi.n	800ccc6 <f_open+0x2de>
 800ccc0:	2302      	movs	r3, #2
 800ccc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ccc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cccc:	d102      	bne.n	800ccd4 <f_open+0x2ec>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ccd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccd8:	1ad3      	subs	r3, r2, r3
 800ccda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d103      	bne.n	800ccec <f_open+0x304>
 800cce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d8e0      	bhi.n	800ccae <f_open+0x2c6>
				}
				fp->clust = clst;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ccf0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ccf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d127      	bne.n	800cd4a <f_open+0x362>
 800ccfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d022      	beq.n	800cd4a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fe f8f3 	bl	800aef4 <clust2sect>
 800cd0e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cd10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d103      	bne.n	800cd1e <f_open+0x336>
						res = FR_INT_ERR;
 800cd16:	2302      	movs	r3, #2
 800cd18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cd1c:	e015      	b.n	800cd4a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cd1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd20:	0a5a      	lsrs	r2, r3, #9
 800cd22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd24:	441a      	add	r2, r3
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	7858      	ldrb	r0, [r3, #1]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	6a1a      	ldr	r2, [r3, #32]
 800cd38:	2301      	movs	r3, #1
 800cd3a:	f7fd fd31 	bl	800a7a0 <disk_read>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d002      	beq.n	800cd4a <f_open+0x362>
 800cd44:	2301      	movs	r3, #1
 800cd46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cd4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d002      	beq.n	800cd58 <f_open+0x370>
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2200      	movs	r2, #0
 800cd56:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cd58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3768      	adds	r7, #104	; 0x68
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b08c      	sub	sp, #48	; 0x30
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
 800cd70:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f107 0210 	add.w	r2, r7, #16
 800cd82:	4611      	mov	r1, r2
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7ff fdb3 	bl	800c8f0 <validate>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d107      	bne.n	800cda8 <f_write+0x44>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	7d5b      	ldrb	r3, [r3, #21]
 800cd9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cda0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <f_write+0x4a>
 800cda8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdac:	e14b      	b.n	800d046 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	7d1b      	ldrb	r3, [r3, #20]
 800cdb2:	f003 0302 	and.w	r3, r3, #2
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d101      	bne.n	800cdbe <f_write+0x5a>
 800cdba:	2307      	movs	r3, #7
 800cdbc:	e143      	b.n	800d046 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	699a      	ldr	r2, [r3, #24]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	441a      	add	r2, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	699b      	ldr	r3, [r3, #24]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	f080 812d 	bcs.w	800d02a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	699b      	ldr	r3, [r3, #24]
 800cdd4:	43db      	mvns	r3, r3
 800cdd6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cdd8:	e127      	b.n	800d02a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	699b      	ldr	r3, [r3, #24]
 800cdde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f040 80e3 	bne.w	800cfae <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	699b      	ldr	r3, [r3, #24]
 800cdec:	0a5b      	lsrs	r3, r3, #9
 800cdee:	693a      	ldr	r2, [r7, #16]
 800cdf0:	8952      	ldrh	r2, [r2, #10]
 800cdf2:	3a01      	subs	r2, #1
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d143      	bne.n	800ce86 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d10c      	bne.n	800ce20 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d11a      	bne.n	800ce48 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2100      	movs	r1, #0
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe fa84 	bl	800b324 <create_chain>
 800ce1c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ce1e:	e013      	b.n	800ce48 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d007      	beq.n	800ce38 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	699b      	ldr	r3, [r3, #24]
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f7fe fb10 	bl	800b454 <clmt_clust>
 800ce34:	62b8      	str	r0, [r7, #40]	; 0x28
 800ce36:	e007      	b.n	800ce48 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	69db      	ldr	r3, [r3, #28]
 800ce3e:	4619      	mov	r1, r3
 800ce40:	4610      	mov	r0, r2
 800ce42:	f7fe fa6f 	bl	800b324 <create_chain>
 800ce46:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f000 80f2 	beq.w	800d034 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ce50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d104      	bne.n	800ce60 <f_write+0xfc>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2202      	movs	r2, #2
 800ce5a:	755a      	strb	r2, [r3, #21]
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	e0f2      	b.n	800d046 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce66:	d104      	bne.n	800ce72 <f_write+0x10e>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	755a      	strb	r2, [r3, #21]
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e0e9      	b.n	800d046 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce76:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d102      	bne.n	800ce86 <f_write+0x122>
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce84:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	7d1b      	ldrb	r3, [r3, #20]
 800ce8a:	b25b      	sxtb	r3, r3
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	da18      	bge.n	800cec2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	7858      	ldrb	r0, [r3, #1]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6a1a      	ldr	r2, [r3, #32]
 800ce9e:	2301      	movs	r3, #1
 800cea0:	f7fd fc9e 	bl	800a7e0 <disk_write>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d004      	beq.n	800ceb4 <f_write+0x150>
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2201      	movs	r2, #1
 800ceae:	755a      	strb	r2, [r3, #21]
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e0c8      	b.n	800d046 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	7d1b      	ldrb	r3, [r3, #20]
 800ceb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cebc:	b2da      	uxtb	r2, r3
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	69db      	ldr	r3, [r3, #28]
 800cec8:	4619      	mov	r1, r3
 800ceca:	4610      	mov	r0, r2
 800cecc:	f7fe f812 	bl	800aef4 <clust2sect>
 800ced0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d104      	bne.n	800cee2 <f_write+0x17e>
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2202      	movs	r2, #2
 800cedc:	755a      	strb	r2, [r3, #21]
 800cede:	2302      	movs	r3, #2
 800cee0:	e0b1      	b.n	800d046 <f_write+0x2e2>
			sect += csect;
 800cee2:	697a      	ldr	r2, [r7, #20]
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	4413      	add	r3, r2
 800cee8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	0a5b      	lsrs	r3, r3, #9
 800ceee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cef0:	6a3b      	ldr	r3, [r7, #32]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d03c      	beq.n	800cf70 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cef6:	69ba      	ldr	r2, [r7, #24]
 800cef8:	6a3b      	ldr	r3, [r7, #32]
 800cefa:	4413      	add	r3, r2
 800cefc:	693a      	ldr	r2, [r7, #16]
 800cefe:	8952      	ldrh	r2, [r2, #10]
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d905      	bls.n	800cf10 <f_write+0x1ac>
					cc = fs->csize - csect;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	895b      	ldrh	r3, [r3, #10]
 800cf08:	461a      	mov	r2, r3
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	7858      	ldrb	r0, [r3, #1]
 800cf14:	6a3b      	ldr	r3, [r7, #32]
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	69f9      	ldr	r1, [r7, #28]
 800cf1a:	f7fd fc61 	bl	800a7e0 <disk_write>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d004      	beq.n	800cf2e <f_write+0x1ca>
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2201      	movs	r2, #1
 800cf28:	755a      	strb	r2, [r3, #21]
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e08b      	b.n	800d046 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6a1a      	ldr	r2, [r3, #32]
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	6a3a      	ldr	r2, [r7, #32]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d915      	bls.n	800cf68 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6a1a      	ldr	r2, [r3, #32]
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	025b      	lsls	r3, r3, #9
 800cf4c:	69fa      	ldr	r2, [r7, #28]
 800cf4e:	4413      	add	r3, r2
 800cf50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf54:	4619      	mov	r1, r3
 800cf56:	f7fd fd03 	bl	800a960 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	7d1b      	ldrb	r3, [r3, #20]
 800cf5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf62:	b2da      	uxtb	r2, r3
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cf68:	6a3b      	ldr	r3, [r7, #32]
 800cf6a:	025b      	lsls	r3, r3, #9
 800cf6c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cf6e:	e03f      	b.n	800cff0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6a1b      	ldr	r3, [r3, #32]
 800cf74:	697a      	ldr	r2, [r7, #20]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d016      	beq.n	800cfa8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	699a      	ldr	r2, [r3, #24]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d210      	bcs.n	800cfa8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	7858      	ldrb	r0, [r3, #1]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf90:	2301      	movs	r3, #1
 800cf92:	697a      	ldr	r2, [r7, #20]
 800cf94:	f7fd fc04 	bl	800a7a0 <disk_read>
 800cf98:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d004      	beq.n	800cfa8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	755a      	strb	r2, [r3, #21]
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e04e      	b.n	800d046 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	697a      	ldr	r2, [r7, #20]
 800cfac:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cfba:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cfbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d901      	bls.n	800cfc8 <f_write+0x264>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	699b      	ldr	r3, [r3, #24]
 800cfd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfd6:	4413      	add	r3, r2
 800cfd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfda:	69f9      	ldr	r1, [r7, #28]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fd fcbf 	bl	800a960 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	7d1b      	ldrb	r3, [r3, #20]
 800cfe6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cfea:	b2da      	uxtb	r2, r3
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cff0:	69fa      	ldr	r2, [r7, #28]
 800cff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff4:	4413      	add	r3, r2
 800cff6:	61fb      	str	r3, [r7, #28]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	699a      	ldr	r2, [r3, #24]
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	441a      	add	r2, r3
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	619a      	str	r2, [r3, #24]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	68da      	ldr	r2, [r3, #12]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	699b      	ldr	r3, [r3, #24]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	bf38      	it	cc
 800d010:	461a      	movcc	r2, r3
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	60da      	str	r2, [r3, #12]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	441a      	add	r2, r3
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	f47f aed4 	bne.w	800cdda <f_write+0x76>
 800d032:	e000      	b.n	800d036 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d034:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	7d1b      	ldrb	r3, [r3, #20]
 800d03a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d03e:	b2da      	uxtb	r2, r3
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d044:	2300      	movs	r3, #0
}
 800d046:	4618      	mov	r0, r3
 800d048:	3730      	adds	r7, #48	; 0x30
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b086      	sub	sp, #24
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f107 0208 	add.w	r2, r7, #8
 800d05c:	4611      	mov	r1, r2
 800d05e:	4618      	mov	r0, r3
 800d060:	f7ff fc46 	bl	800c8f0 <validate>
 800d064:	4603      	mov	r3, r0
 800d066:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d068:	7dfb      	ldrb	r3, [r7, #23]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d168      	bne.n	800d140 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	7d1b      	ldrb	r3, [r3, #20]
 800d072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d076:	2b00      	cmp	r3, #0
 800d078:	d062      	beq.n	800d140 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	7d1b      	ldrb	r3, [r3, #20]
 800d07e:	b25b      	sxtb	r3, r3
 800d080:	2b00      	cmp	r3, #0
 800d082:	da15      	bge.n	800d0b0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	7858      	ldrb	r0, [r3, #1]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a1a      	ldr	r2, [r3, #32]
 800d092:	2301      	movs	r3, #1
 800d094:	f7fd fba4 	bl	800a7e0 <disk_write>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d001      	beq.n	800d0a2 <f_sync+0x54>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e04f      	b.n	800d142 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	7d1b      	ldrb	r3, [r3, #20]
 800d0a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d0b0:	f7fd fad8 	bl	800a664 <get_fattime>
 800d0b4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d0b6:	68ba      	ldr	r2, [r7, #8]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0bc:	4619      	mov	r1, r3
 800d0be:	4610      	mov	r0, r2
 800d0c0:	f7fd fe7c 	bl	800adbc <move_window>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d0c8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d138      	bne.n	800d140 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	330b      	adds	r3, #11
 800d0d8:	781a      	ldrb	r2, [r3, #0]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	330b      	adds	r3, #11
 800d0de:	f042 0220 	orr.w	r2, r2, #32
 800d0e2:	b2d2      	uxtb	r2, r2
 800d0e4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6818      	ldr	r0, [r3, #0]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	68f9      	ldr	r1, [r7, #12]
 800d0f2:	f7fe fb89 	bl	800b808 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f103 021c 	add.w	r2, r3, #28
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	4619      	mov	r1, r3
 800d102:	4610      	mov	r0, r2
 800d104:	f7fd fc00 	bl	800a908 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	3316      	adds	r3, #22
 800d10c:	6939      	ldr	r1, [r7, #16]
 800d10e:	4618      	mov	r0, r3
 800d110:	f7fd fbfa 	bl	800a908 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	3312      	adds	r3, #18
 800d118:	2100      	movs	r1, #0
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fd fbd9 	bl	800a8d2 <st_word>
					fs->wflag = 1;
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	2201      	movs	r2, #1
 800d124:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	4618      	mov	r0, r3
 800d12a:	f7fd fe75 	bl	800ae18 <sync_fs>
 800d12e:	4603      	mov	r3, r0
 800d130:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	7d1b      	ldrb	r3, [r3, #20]
 800d136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d13a:	b2da      	uxtb	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d140:	7dfb      	ldrb	r3, [r7, #23]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3718      	adds	r7, #24
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b084      	sub	sp, #16
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7ff ff7b 	bl	800d04e <f_sync>
 800d158:	4603      	mov	r3, r0
 800d15a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d15c:	7bfb      	ldrb	r3, [r7, #15]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d118      	bne.n	800d194 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f107 0208 	add.w	r2, r7, #8
 800d168:	4611      	mov	r1, r2
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7ff fbc0 	bl	800c8f0 <validate>
 800d170:	4603      	mov	r3, r0
 800d172:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d174:	7bfb      	ldrb	r3, [r7, #15]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d10c      	bne.n	800d194 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	691b      	ldr	r3, [r3, #16]
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fd fd78 	bl	800ac74 <dec_lock>
 800d184:	4603      	mov	r3, r0
 800d186:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d188:	7bfb      	ldrb	r3, [r7, #15]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d102      	bne.n	800d194 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d194:	7bfb      	ldrb	r3, [r7, #15]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b084      	sub	sp, #16
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800d1aa:	78fb      	ldrb	r3, [r7, #3]
 800d1ac:	2b0a      	cmp	r3, #10
 800d1ae:	d103      	bne.n	800d1b8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d1b0:	210d      	movs	r1, #13
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7ff fff3 	bl	800d19e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	db25      	blt.n	800d210 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	1c5a      	adds	r2, r3, #1
 800d1c8:	60fa      	str	r2, [r7, #12]
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	78fa      	ldrb	r2, [r7, #3]
 800d1d0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2b3c      	cmp	r3, #60	; 0x3c
 800d1d6:	dd12      	ble.n	800d1fe <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6818      	ldr	r0, [r3, #0]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f103 010c 	add.w	r1, r3, #12
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	f107 0308 	add.w	r3, r7, #8
 800d1e8:	f7ff fdbc 	bl	800cd64 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d1ec:	68ba      	ldr	r2, [r7, #8]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d101      	bne.n	800d1f8 <putc_bfd+0x5a>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	e001      	b.n	800d1fc <putc_bfd+0x5e>
 800d1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1fc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	1c5a      	adds	r2, r3, #1
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	609a      	str	r2, [r3, #8]
 800d20e:	e000      	b.n	800d212 <putc_bfd+0x74>
	if (i < 0) return;
 800d210:	bf00      	nop
}
 800d212:	3710      	adds	r7, #16
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	db16      	blt.n	800d256 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6818      	ldr	r0, [r3, #0]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f103 010c 	add.w	r1, r3, #12
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	461a      	mov	r2, r3
 800d238:	f107 030c 	add.w	r3, r7, #12
 800d23c:	f7ff fd92 	bl	800cd64 <f_write>
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d107      	bne.n	800d256 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	68fa      	ldr	r2, [r7, #12]
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d102      	bne.n	800d256 <putc_flush+0x3e>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	e001      	b.n	800d25a <putc_flush+0x42>
	return EOF;
 800d256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}

0800d262 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d262:	b480      	push	{r7}
 800d264:	b083      	sub	sp, #12
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	683a      	ldr	r2, [r7, #0]
 800d270:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	605a      	str	r2, [r3, #4]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	609a      	str	r2, [r3, #8]
}
 800d280:	bf00      	nop
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b096      	sub	sp, #88	; 0x58
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800d296:	f107 030c 	add.w	r3, r7, #12
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7ff ffe0 	bl	800d262 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800d2a2:	e009      	b.n	800d2b8 <f_puts+0x2c>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	1c5a      	adds	r2, r3, #1
 800d2a8:	607a      	str	r2, [r7, #4]
 800d2aa:	781a      	ldrb	r2, [r3, #0]
 800d2ac:	f107 030c 	add.w	r3, r7, #12
 800d2b0:	4611      	mov	r1, r2
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7ff ff73 	bl	800d19e <putc_bfd>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1f1      	bne.n	800d2a4 <f_puts+0x18>
	return putc_flush(&pb);
 800d2c0:	f107 030c 	add.w	r3, r7, #12
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7ff ffa7 	bl	800d218 <putc_flush>
 800d2ca:	4603      	mov	r3, r0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3758      	adds	r7, #88	; 0x58
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800d2d4:	b40e      	push	{r1, r2, r3}
 800d2d6:	b580      	push	{r7, lr}
 800d2d8:	b0a7      	sub	sp, #156	; 0x9c
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800d2de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d2e2:	6879      	ldr	r1, [r7, #4]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7ff ffbc 	bl	800d262 <putc_init>

	va_start(arp, fmt);
 800d2ea:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d2ee:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800d2f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d2f4:	1c5a      	adds	r2, r3, #1
 800d2f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800d300:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d304:	2b00      	cmp	r3, #0
 800d306:	f000 81f2 	beq.w	800d6ee <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800d30a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d30e:	2b25      	cmp	r3, #37	; 0x25
 800d310:	d008      	beq.n	800d324 <f_printf+0x50>
			putc_bfd(&pb, c);
 800d312:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800d316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d31a:	4611      	mov	r1, r2
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7ff ff3e 	bl	800d19e <putc_bfd>
			continue;
 800d322:	e1e3      	b.n	800d6ec <f_printf+0x418>
		}
		w = f = 0;
 800d324:	2300      	movs	r3, #0
 800d326:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d32a:	2300      	movs	r3, #0
 800d32c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800d330:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d334:	1c5a      	adds	r2, r3, #1
 800d336:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800d340:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d344:	2b30      	cmp	r3, #48	; 0x30
 800d346:	d10b      	bne.n	800d360 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800d348:	2301      	movs	r3, #1
 800d34a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d34e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800d35e:	e024      	b.n	800d3aa <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800d360:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d364:	2b2d      	cmp	r3, #45	; 0x2d
 800d366:	d120      	bne.n	800d3aa <f_printf+0xd6>
				f = 2; c = *fmt++;
 800d368:	2302      	movs	r3, #2
 800d36a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d36e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d372:	1c5a      	adds	r2, r3, #1
 800d374:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800d37e:	e014      	b.n	800d3aa <f_printf+0xd6>
			w = w * 10 + c - '0';
 800d380:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d384:	4613      	mov	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	005b      	lsls	r3, r3, #1
 800d38c:	461a      	mov	r2, r3
 800d38e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d392:	4413      	add	r3, r2
 800d394:	3b30      	subs	r3, #48	; 0x30
 800d396:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800d39a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d39e:	1c5a      	adds	r2, r3, #1
 800d3a0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800d3aa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d3ae:	2b2f      	cmp	r3, #47	; 0x2f
 800d3b0:	d903      	bls.n	800d3ba <f_printf+0xe6>
 800d3b2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d3b6:	2b39      	cmp	r3, #57	; 0x39
 800d3b8:	d9e2      	bls.n	800d380 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800d3ba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d3be:	2b6c      	cmp	r3, #108	; 0x6c
 800d3c0:	d003      	beq.n	800d3ca <f_printf+0xf6>
 800d3c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d3c6:	2b4c      	cmp	r3, #76	; 0x4c
 800d3c8:	d10d      	bne.n	800d3e6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800d3ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d3ce:	f043 0304 	orr.w	r3, r3, #4
 800d3d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d3d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d3da:	1c5a      	adds	r2, r3, #1
 800d3dc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800d3e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f000 8181 	beq.w	800d6f2 <f_printf+0x41e>
		d = c;
 800d3f0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d3f4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800d3f8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d3fc:	2b60      	cmp	r3, #96	; 0x60
 800d3fe:	d908      	bls.n	800d412 <f_printf+0x13e>
 800d400:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d404:	2b7a      	cmp	r3, #122	; 0x7a
 800d406:	d804      	bhi.n	800d412 <f_printf+0x13e>
 800d408:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d40c:	3b20      	subs	r3, #32
 800d40e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800d412:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d416:	3b42      	subs	r3, #66	; 0x42
 800d418:	2b16      	cmp	r3, #22
 800d41a:	f200 8098 	bhi.w	800d54e <f_printf+0x27a>
 800d41e:	a201      	add	r2, pc, #4	; (adr r2, 800d424 <f_printf+0x150>)
 800d420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d424:	0800d52f 	.word	0x0800d52f
 800d428:	0800d517 	.word	0x0800d517
 800d42c:	0800d53f 	.word	0x0800d53f
 800d430:	0800d54f 	.word	0x0800d54f
 800d434:	0800d54f 	.word	0x0800d54f
 800d438:	0800d54f 	.word	0x0800d54f
 800d43c:	0800d54f 	.word	0x0800d54f
 800d440:	0800d54f 	.word	0x0800d54f
 800d444:	0800d54f 	.word	0x0800d54f
 800d448:	0800d54f 	.word	0x0800d54f
 800d44c:	0800d54f 	.word	0x0800d54f
 800d450:	0800d54f 	.word	0x0800d54f
 800d454:	0800d54f 	.word	0x0800d54f
 800d458:	0800d537 	.word	0x0800d537
 800d45c:	0800d54f 	.word	0x0800d54f
 800d460:	0800d54f 	.word	0x0800d54f
 800d464:	0800d54f 	.word	0x0800d54f
 800d468:	0800d481 	.word	0x0800d481
 800d46c:	0800d54f 	.word	0x0800d54f
 800d470:	0800d53f 	.word	0x0800d53f
 800d474:	0800d54f 	.word	0x0800d54f
 800d478:	0800d54f 	.word	0x0800d54f
 800d47c:	0800d547 	.word	0x0800d547
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800d480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d482:	1d1a      	adds	r2, r3, #4
 800d484:	67ba      	str	r2, [r7, #120]	; 0x78
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800d48a:	2300      	movs	r3, #0
 800d48c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d490:	e004      	b.n	800d49c <f_printf+0x1c8>
 800d492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d496:	3301      	adds	r3, #1
 800d498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d49c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d49e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4a2:	4413      	add	r3, r2
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1f3      	bne.n	800d492 <f_printf+0x1be>
			if (!(f & 2)) {
 800d4aa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d4ae:	f003 0302 	and.w	r3, r3, #2
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d11a      	bne.n	800d4ec <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800d4b6:	e005      	b.n	800d4c4 <f_printf+0x1f0>
 800d4b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4bc:	2120      	movs	r1, #32
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7ff fe6d 	bl	800d19e <putc_bfd>
 800d4c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4c8:	1c5a      	adds	r2, r3, #1
 800d4ca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d4ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d8f0      	bhi.n	800d4b8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800d4d6:	e009      	b.n	800d4ec <f_printf+0x218>
 800d4d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d4de:	781a      	ldrb	r2, [r3, #0]
 800d4e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4e4:	4611      	mov	r1, r2
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7ff fe59 	bl	800d19e <putc_bfd>
 800d4ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d1f1      	bne.n	800d4d8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800d4f4:	e005      	b.n	800d502 <f_printf+0x22e>
 800d4f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4fa:	2120      	movs	r1, #32
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7ff fe4e 	bl	800d19e <putc_bfd>
 800d502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d506:	1c5a      	adds	r2, r3, #1
 800d508:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d50c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d510:	429a      	cmp	r2, r3
 800d512:	d8f0      	bhi.n	800d4f6 <f_printf+0x222>
			continue;
 800d514:	e0ea      	b.n	800d6ec <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800d516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d518:	1d1a      	adds	r2, r3, #4
 800d51a:	67ba      	str	r2, [r7, #120]	; 0x78
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d524:	4611      	mov	r1, r2
 800d526:	4618      	mov	r0, r3
 800d528:	f7ff fe39 	bl	800d19e <putc_bfd>
 800d52c:	e0de      	b.n	800d6ec <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800d52e:	2302      	movs	r3, #2
 800d530:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d534:	e014      	b.n	800d560 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800d536:	2308      	movs	r3, #8
 800d538:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d53c:	e010      	b.n	800d560 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800d53e:	230a      	movs	r3, #10
 800d540:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d544:	e00c      	b.n	800d560 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800d546:	2310      	movs	r3, #16
 800d548:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d54c:	e008      	b.n	800d560 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800d54e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800d552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d556:	4611      	mov	r1, r2
 800d558:	4618      	mov	r0, r3
 800d55a:	f7ff fe20 	bl	800d19e <putc_bfd>
 800d55e:	e0c5      	b.n	800d6ec <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800d560:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d564:	f003 0304 	and.w	r3, r3, #4
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d004      	beq.n	800d576 <f_printf+0x2a2>
 800d56c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d56e:	1d1a      	adds	r2, r3, #4
 800d570:	67ba      	str	r2, [r7, #120]	; 0x78
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	e00c      	b.n	800d590 <f_printf+0x2bc>
 800d576:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d57a:	2b44      	cmp	r3, #68	; 0x44
 800d57c:	d104      	bne.n	800d588 <f_printf+0x2b4>
 800d57e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d580:	1d1a      	adds	r2, r3, #4
 800d582:	67ba      	str	r2, [r7, #120]	; 0x78
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	e003      	b.n	800d590 <f_printf+0x2bc>
 800d588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d58a:	1d1a      	adds	r2, r3, #4
 800d58c:	67ba      	str	r2, [r7, #120]	; 0x78
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800d594:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d598:	2b44      	cmp	r3, #68	; 0x44
 800d59a:	d10e      	bne.n	800d5ba <f_printf+0x2e6>
 800d59c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	da0a      	bge.n	800d5ba <f_printf+0x2e6>
			v = 0 - v;
 800d5a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5a8:	425b      	negs	r3, r3
 800d5aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800d5ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d5b2:	f043 0308 	orr.w	r3, r3, #8
 800d5b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800d5c0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800d5c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5cc:	fb01 f202 	mul.w	r2, r1, r2
 800d5d0:	1a9b      	subs	r3, r3, r2
 800d5d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800d5d6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d5da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d5de:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800d5e6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d5ea:	2b09      	cmp	r3, #9
 800d5ec:	d90b      	bls.n	800d606 <f_printf+0x332>
 800d5ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d5f2:	2b78      	cmp	r3, #120	; 0x78
 800d5f4:	d101      	bne.n	800d5fa <f_printf+0x326>
 800d5f6:	2227      	movs	r2, #39	; 0x27
 800d5f8:	e000      	b.n	800d5fc <f_printf+0x328>
 800d5fa:	2207      	movs	r2, #7
 800d5fc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d600:	4413      	add	r3, r2
 800d602:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800d606:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d60a:	1c5a      	adds	r2, r3, #1
 800d60c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d610:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d614:	3230      	adds	r2, #48	; 0x30
 800d616:	b2d2      	uxtb	r2, r2
 800d618:	3398      	adds	r3, #152	; 0x98
 800d61a:	443b      	add	r3, r7
 800d61c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800d620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d624:	2b00      	cmp	r3, #0
 800d626:	d003      	beq.n	800d630 <f_printf+0x35c>
 800d628:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d62c:	2b1f      	cmp	r3, #31
 800d62e:	d9c7      	bls.n	800d5c0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800d630:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d634:	f003 0308 	and.w	r3, r3, #8
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d009      	beq.n	800d650 <f_printf+0x37c>
 800d63c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d640:	1c5a      	adds	r2, r3, #1
 800d642:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d646:	3398      	adds	r3, #152	; 0x98
 800d648:	443b      	add	r3, r7
 800d64a:	222d      	movs	r2, #45	; 0x2d
 800d64c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800d650:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d654:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d658:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d65c:	f003 0301 	and.w	r3, r3, #1
 800d660:	2b00      	cmp	r3, #0
 800d662:	d001      	beq.n	800d668 <f_printf+0x394>
 800d664:	2330      	movs	r3, #48	; 0x30
 800d666:	e000      	b.n	800d66a <f_printf+0x396>
 800d668:	2320      	movs	r3, #32
 800d66a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800d66e:	e007      	b.n	800d680 <f_printf+0x3ac>
 800d670:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d678:	4611      	mov	r1, r2
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7ff fd8f 	bl	800d19e <putc_bfd>
 800d680:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d684:	f003 0302 	and.w	r3, r3, #2
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d108      	bne.n	800d69e <f_printf+0x3ca>
 800d68c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d690:	1c5a      	adds	r2, r3, #1
 800d692:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d696:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d8e8      	bhi.n	800d670 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800d69e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d6a8:	f107 020c 	add.w	r2, r7, #12
 800d6ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6b0:	4413      	add	r3, r2
 800d6b2:	781a      	ldrb	r2, [r3, #0]
 800d6b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7ff fd6f 	bl	800d19e <putc_bfd>
		} while (i);
 800d6c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1ea      	bne.n	800d69e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800d6c8:	e007      	b.n	800d6da <f_printf+0x406>
 800d6ca:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d6ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7ff fd62 	bl	800d19e <putc_bfd>
 800d6da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d6e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d8ee      	bhi.n	800d6ca <f_printf+0x3f6>
		c = *fmt++;
 800d6ec:	e600      	b.n	800d2f0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800d6ee:	bf00      	nop
 800d6f0:	e000      	b.n	800d6f4 <f_printf+0x420>
		if (!c) break;
 800d6f2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800d6f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff fd8d 	bl	800d218 <putc_flush>
 800d6fe:	4603      	mov	r3, r0
}
 800d700:	4618      	mov	r0, r3
 800d702:	379c      	adds	r7, #156	; 0x9c
 800d704:	46bd      	mov	sp, r7
 800d706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d70a:	b003      	add	sp, #12
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop

0800d710 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d710:	b480      	push	{r7}
 800d712:	b087      	sub	sp, #28
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	4613      	mov	r3, r2
 800d71c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d71e:	2301      	movs	r3, #1
 800d720:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d722:	2300      	movs	r3, #0
 800d724:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d726:	4b1f      	ldr	r3, [pc, #124]	; (800d7a4 <FATFS_LinkDriverEx+0x94>)
 800d728:	7a5b      	ldrb	r3, [r3, #9]
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d131      	bne.n	800d794 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d730:	4b1c      	ldr	r3, [pc, #112]	; (800d7a4 <FATFS_LinkDriverEx+0x94>)
 800d732:	7a5b      	ldrb	r3, [r3, #9]
 800d734:	b2db      	uxtb	r3, r3
 800d736:	461a      	mov	r2, r3
 800d738:	4b1a      	ldr	r3, [pc, #104]	; (800d7a4 <FATFS_LinkDriverEx+0x94>)
 800d73a:	2100      	movs	r1, #0
 800d73c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d73e:	4b19      	ldr	r3, [pc, #100]	; (800d7a4 <FATFS_LinkDriverEx+0x94>)
 800d740:	7a5b      	ldrb	r3, [r3, #9]
 800d742:	b2db      	uxtb	r3, r3
 800d744:	4a17      	ldr	r2, [pc, #92]	; (800d7a4 <FATFS_LinkDriverEx+0x94>)
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	4413      	add	r3, r2
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d74e:	4b15      	ldr	r3, [pc, #84]	; (800d7a4 <FATFS_LinkDriverEx+0x94>)
 800d750:	7a5b      	ldrb	r3, [r3, #9]
 800d752:	b2db      	uxtb	r3, r3
 800d754:	461a      	mov	r2, r3
 800d756:	4b13      	ldr	r3, [pc, #76]	; (800d7a4 <FATFS_LinkDriverEx+0x94>)
 800d758:	4413      	add	r3, r2
 800d75a:	79fa      	ldrb	r2, [r7, #7]
 800d75c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d75e:	4b11      	ldr	r3, [pc, #68]	; (800d7a4 <FATFS_LinkDriverEx+0x94>)
 800d760:	7a5b      	ldrb	r3, [r3, #9]
 800d762:	b2db      	uxtb	r3, r3
 800d764:	1c5a      	adds	r2, r3, #1
 800d766:	b2d1      	uxtb	r1, r2
 800d768:	4a0e      	ldr	r2, [pc, #56]	; (800d7a4 <FATFS_LinkDriverEx+0x94>)
 800d76a:	7251      	strb	r1, [r2, #9]
 800d76c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d76e:	7dbb      	ldrb	r3, [r7, #22]
 800d770:	3330      	adds	r3, #48	; 0x30
 800d772:	b2da      	uxtb	r2, r3
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	3301      	adds	r3, #1
 800d77c:	223a      	movs	r2, #58	; 0x3a
 800d77e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	3302      	adds	r3, #2
 800d784:	222f      	movs	r2, #47	; 0x2f
 800d786:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	3303      	adds	r3, #3
 800d78c:	2200      	movs	r2, #0
 800d78e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d790:	2300      	movs	r3, #0
 800d792:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d794:	7dfb      	ldrb	r3, [r7, #23]
}
 800d796:	4618      	mov	r0, r3
 800d798:	371c      	adds	r7, #28
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	20000b08 	.word	0x20000b08

0800d7a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7ff ffaa 	bl	800d710 <FATFS_LinkDriverEx>
 800d7bc:	4603      	mov	r3, r0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
	...

0800d7c8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	6039      	str	r1, [r7, #0]
 800d7d2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d7d4:	88fb      	ldrh	r3, [r7, #6]
 800d7d6:	2b7f      	cmp	r3, #127	; 0x7f
 800d7d8:	d802      	bhi.n	800d7e0 <ff_convert+0x18>
		c = chr;
 800d7da:	88fb      	ldrh	r3, [r7, #6]
 800d7dc:	81fb      	strh	r3, [r7, #14]
 800d7de:	e025      	b.n	800d82c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00b      	beq.n	800d7fe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d7e6:	88fb      	ldrh	r3, [r7, #6]
 800d7e8:	2bff      	cmp	r3, #255	; 0xff
 800d7ea:	d805      	bhi.n	800d7f8 <ff_convert+0x30>
 800d7ec:	88fb      	ldrh	r3, [r7, #6]
 800d7ee:	3b80      	subs	r3, #128	; 0x80
 800d7f0:	4a12      	ldr	r2, [pc, #72]	; (800d83c <ff_convert+0x74>)
 800d7f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7f6:	e000      	b.n	800d7fa <ff_convert+0x32>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	81fb      	strh	r3, [r7, #14]
 800d7fc:	e016      	b.n	800d82c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d7fe:	2300      	movs	r3, #0
 800d800:	81fb      	strh	r3, [r7, #14]
 800d802:	e009      	b.n	800d818 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d804:	89fb      	ldrh	r3, [r7, #14]
 800d806:	4a0d      	ldr	r2, [pc, #52]	; (800d83c <ff_convert+0x74>)
 800d808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d80c:	88fa      	ldrh	r2, [r7, #6]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d006      	beq.n	800d820 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d812:	89fb      	ldrh	r3, [r7, #14]
 800d814:	3301      	adds	r3, #1
 800d816:	81fb      	strh	r3, [r7, #14]
 800d818:	89fb      	ldrh	r3, [r7, #14]
 800d81a:	2b7f      	cmp	r3, #127	; 0x7f
 800d81c:	d9f2      	bls.n	800d804 <ff_convert+0x3c>
 800d81e:	e000      	b.n	800d822 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d820:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d822:	89fb      	ldrh	r3, [r7, #14]
 800d824:	3380      	adds	r3, #128	; 0x80
 800d826:	b29b      	uxth	r3, r3
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d82c:	89fb      	ldrh	r3, [r7, #14]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3714      	adds	r7, #20
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	08010310 	.word	0x08010310

0800d840 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d840:	b480      	push	{r7}
 800d842:	b087      	sub	sp, #28
 800d844:	af00      	add	r7, sp, #0
 800d846:	4603      	mov	r3, r0
 800d848:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d84a:	88fb      	ldrh	r3, [r7, #6]
 800d84c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d850:	d201      	bcs.n	800d856 <ff_wtoupper+0x16>
 800d852:	4b3e      	ldr	r3, [pc, #248]	; (800d94c <ff_wtoupper+0x10c>)
 800d854:	e000      	b.n	800d858 <ff_wtoupper+0x18>
 800d856:	4b3e      	ldr	r3, [pc, #248]	; (800d950 <ff_wtoupper+0x110>)
 800d858:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	1c9a      	adds	r2, r3, #2
 800d85e:	617a      	str	r2, [r7, #20]
 800d860:	881b      	ldrh	r3, [r3, #0]
 800d862:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d864:	8a7b      	ldrh	r3, [r7, #18]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d068      	beq.n	800d93c <ff_wtoupper+0xfc>
 800d86a:	88fa      	ldrh	r2, [r7, #6]
 800d86c:	8a7b      	ldrh	r3, [r7, #18]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d364      	bcc.n	800d93c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	1c9a      	adds	r2, r3, #2
 800d876:	617a      	str	r2, [r7, #20]
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	823b      	strh	r3, [r7, #16]
 800d87c:	8a3b      	ldrh	r3, [r7, #16]
 800d87e:	0a1b      	lsrs	r3, r3, #8
 800d880:	81fb      	strh	r3, [r7, #14]
 800d882:	8a3b      	ldrh	r3, [r7, #16]
 800d884:	b2db      	uxtb	r3, r3
 800d886:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d888:	88fa      	ldrh	r2, [r7, #6]
 800d88a:	8a79      	ldrh	r1, [r7, #18]
 800d88c:	8a3b      	ldrh	r3, [r7, #16]
 800d88e:	440b      	add	r3, r1
 800d890:	429a      	cmp	r2, r3
 800d892:	da49      	bge.n	800d928 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d894:	89fb      	ldrh	r3, [r7, #14]
 800d896:	2b08      	cmp	r3, #8
 800d898:	d84f      	bhi.n	800d93a <ff_wtoupper+0xfa>
 800d89a:	a201      	add	r2, pc, #4	; (adr r2, 800d8a0 <ff_wtoupper+0x60>)
 800d89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a0:	0800d8c5 	.word	0x0800d8c5
 800d8a4:	0800d8d7 	.word	0x0800d8d7
 800d8a8:	0800d8ed 	.word	0x0800d8ed
 800d8ac:	0800d8f5 	.word	0x0800d8f5
 800d8b0:	0800d8fd 	.word	0x0800d8fd
 800d8b4:	0800d905 	.word	0x0800d905
 800d8b8:	0800d90d 	.word	0x0800d90d
 800d8bc:	0800d915 	.word	0x0800d915
 800d8c0:	0800d91d 	.word	0x0800d91d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d8c4:	88fa      	ldrh	r2, [r7, #6]
 800d8c6:	8a7b      	ldrh	r3, [r7, #18]
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	005b      	lsls	r3, r3, #1
 800d8cc:	697a      	ldr	r2, [r7, #20]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	80fb      	strh	r3, [r7, #6]
 800d8d4:	e027      	b.n	800d926 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d8d6:	88fa      	ldrh	r2, [r7, #6]
 800d8d8:	8a7b      	ldrh	r3, [r7, #18]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	f003 0301 	and.w	r3, r3, #1
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	88fa      	ldrh	r2, [r7, #6]
 800d8e6:	1ad3      	subs	r3, r2, r3
 800d8e8:	80fb      	strh	r3, [r7, #6]
 800d8ea:	e01c      	b.n	800d926 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d8ec:	88fb      	ldrh	r3, [r7, #6]
 800d8ee:	3b10      	subs	r3, #16
 800d8f0:	80fb      	strh	r3, [r7, #6]
 800d8f2:	e018      	b.n	800d926 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d8f4:	88fb      	ldrh	r3, [r7, #6]
 800d8f6:	3b20      	subs	r3, #32
 800d8f8:	80fb      	strh	r3, [r7, #6]
 800d8fa:	e014      	b.n	800d926 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d8fc:	88fb      	ldrh	r3, [r7, #6]
 800d8fe:	3b30      	subs	r3, #48	; 0x30
 800d900:	80fb      	strh	r3, [r7, #6]
 800d902:	e010      	b.n	800d926 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d904:	88fb      	ldrh	r3, [r7, #6]
 800d906:	3b1a      	subs	r3, #26
 800d908:	80fb      	strh	r3, [r7, #6]
 800d90a:	e00c      	b.n	800d926 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d90c:	88fb      	ldrh	r3, [r7, #6]
 800d90e:	3308      	adds	r3, #8
 800d910:	80fb      	strh	r3, [r7, #6]
 800d912:	e008      	b.n	800d926 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d914:	88fb      	ldrh	r3, [r7, #6]
 800d916:	3b50      	subs	r3, #80	; 0x50
 800d918:	80fb      	strh	r3, [r7, #6]
 800d91a:	e004      	b.n	800d926 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d91c:	88fb      	ldrh	r3, [r7, #6]
 800d91e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d922:	80fb      	strh	r3, [r7, #6]
 800d924:	bf00      	nop
			}
			break;
 800d926:	e008      	b.n	800d93a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d928:	89fb      	ldrh	r3, [r7, #14]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d195      	bne.n	800d85a <ff_wtoupper+0x1a>
 800d92e:	8a3b      	ldrh	r3, [r7, #16]
 800d930:	005b      	lsls	r3, r3, #1
 800d932:	697a      	ldr	r2, [r7, #20]
 800d934:	4413      	add	r3, r2
 800d936:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d938:	e78f      	b.n	800d85a <ff_wtoupper+0x1a>
			break;
 800d93a:	bf00      	nop
	}

	return chr;
 800d93c:	88fb      	ldrh	r3, [r7, #6]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	371c      	adds	r7, #28
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr
 800d94a:	bf00      	nop
 800d94c:	08010410 	.word	0x08010410
 800d950:	08010604 	.word	0x08010604

0800d954 <__errno>:
 800d954:	4b01      	ldr	r3, [pc, #4]	; (800d95c <__errno+0x8>)
 800d956:	6818      	ldr	r0, [r3, #0]
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop
 800d95c:	20000110 	.word	0x20000110

0800d960 <__libc_init_array>:
 800d960:	b570      	push	{r4, r5, r6, lr}
 800d962:	4d0d      	ldr	r5, [pc, #52]	; (800d998 <__libc_init_array+0x38>)
 800d964:	4c0d      	ldr	r4, [pc, #52]	; (800d99c <__libc_init_array+0x3c>)
 800d966:	1b64      	subs	r4, r4, r5
 800d968:	10a4      	asrs	r4, r4, #2
 800d96a:	2600      	movs	r6, #0
 800d96c:	42a6      	cmp	r6, r4
 800d96e:	d109      	bne.n	800d984 <__libc_init_array+0x24>
 800d970:	4d0b      	ldr	r5, [pc, #44]	; (800d9a0 <__libc_init_array+0x40>)
 800d972:	4c0c      	ldr	r4, [pc, #48]	; (800d9a4 <__libc_init_array+0x44>)
 800d974:	f002 fa68 	bl	800fe48 <_init>
 800d978:	1b64      	subs	r4, r4, r5
 800d97a:	10a4      	asrs	r4, r4, #2
 800d97c:	2600      	movs	r6, #0
 800d97e:	42a6      	cmp	r6, r4
 800d980:	d105      	bne.n	800d98e <__libc_init_array+0x2e>
 800d982:	bd70      	pop	{r4, r5, r6, pc}
 800d984:	f855 3b04 	ldr.w	r3, [r5], #4
 800d988:	4798      	blx	r3
 800d98a:	3601      	adds	r6, #1
 800d98c:	e7ee      	b.n	800d96c <__libc_init_array+0xc>
 800d98e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d992:	4798      	blx	r3
 800d994:	3601      	adds	r6, #1
 800d996:	e7f2      	b.n	800d97e <__libc_init_array+0x1e>
 800d998:	08010b94 	.word	0x08010b94
 800d99c:	08010b94 	.word	0x08010b94
 800d9a0:	08010b94 	.word	0x08010b94
 800d9a4:	08010b98 	.word	0x08010b98

0800d9a8 <__retarget_lock_acquire>:
 800d9a8:	4770      	bx	lr

0800d9aa <__retarget_lock_acquire_recursive>:
 800d9aa:	4770      	bx	lr

0800d9ac <__retarget_lock_release>:
 800d9ac:	4770      	bx	lr

0800d9ae <__retarget_lock_release_recursive>:
 800d9ae:	4770      	bx	lr

0800d9b0 <memcpy>:
 800d9b0:	440a      	add	r2, r1
 800d9b2:	4291      	cmp	r1, r2
 800d9b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9b8:	d100      	bne.n	800d9bc <memcpy+0xc>
 800d9ba:	4770      	bx	lr
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9c6:	4291      	cmp	r1, r2
 800d9c8:	d1f9      	bne.n	800d9be <memcpy+0xe>
 800d9ca:	bd10      	pop	{r4, pc}

0800d9cc <memset>:
 800d9cc:	4402      	add	r2, r0
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d100      	bne.n	800d9d6 <memset+0xa>
 800d9d4:	4770      	bx	lr
 800d9d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d9da:	e7f9      	b.n	800d9d0 <memset+0x4>

0800d9dc <_free_r>:
 800d9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9de:	2900      	cmp	r1, #0
 800d9e0:	d044      	beq.n	800da6c <_free_r+0x90>
 800d9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9e6:	9001      	str	r0, [sp, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f1a1 0404 	sub.w	r4, r1, #4
 800d9ee:	bfb8      	it	lt
 800d9f0:	18e4      	addlt	r4, r4, r3
 800d9f2:	f001 f935 	bl	800ec60 <__malloc_lock>
 800d9f6:	4a1e      	ldr	r2, [pc, #120]	; (800da70 <_free_r+0x94>)
 800d9f8:	9801      	ldr	r0, [sp, #4]
 800d9fa:	6813      	ldr	r3, [r2, #0]
 800d9fc:	b933      	cbnz	r3, 800da0c <_free_r+0x30>
 800d9fe:	6063      	str	r3, [r4, #4]
 800da00:	6014      	str	r4, [r2, #0]
 800da02:	b003      	add	sp, #12
 800da04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da08:	f001 b930 	b.w	800ec6c <__malloc_unlock>
 800da0c:	42a3      	cmp	r3, r4
 800da0e:	d908      	bls.n	800da22 <_free_r+0x46>
 800da10:	6825      	ldr	r5, [r4, #0]
 800da12:	1961      	adds	r1, r4, r5
 800da14:	428b      	cmp	r3, r1
 800da16:	bf01      	itttt	eq
 800da18:	6819      	ldreq	r1, [r3, #0]
 800da1a:	685b      	ldreq	r3, [r3, #4]
 800da1c:	1949      	addeq	r1, r1, r5
 800da1e:	6021      	streq	r1, [r4, #0]
 800da20:	e7ed      	b.n	800d9fe <_free_r+0x22>
 800da22:	461a      	mov	r2, r3
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	b10b      	cbz	r3, 800da2c <_free_r+0x50>
 800da28:	42a3      	cmp	r3, r4
 800da2a:	d9fa      	bls.n	800da22 <_free_r+0x46>
 800da2c:	6811      	ldr	r1, [r2, #0]
 800da2e:	1855      	adds	r5, r2, r1
 800da30:	42a5      	cmp	r5, r4
 800da32:	d10b      	bne.n	800da4c <_free_r+0x70>
 800da34:	6824      	ldr	r4, [r4, #0]
 800da36:	4421      	add	r1, r4
 800da38:	1854      	adds	r4, r2, r1
 800da3a:	42a3      	cmp	r3, r4
 800da3c:	6011      	str	r1, [r2, #0]
 800da3e:	d1e0      	bne.n	800da02 <_free_r+0x26>
 800da40:	681c      	ldr	r4, [r3, #0]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	6053      	str	r3, [r2, #4]
 800da46:	4421      	add	r1, r4
 800da48:	6011      	str	r1, [r2, #0]
 800da4a:	e7da      	b.n	800da02 <_free_r+0x26>
 800da4c:	d902      	bls.n	800da54 <_free_r+0x78>
 800da4e:	230c      	movs	r3, #12
 800da50:	6003      	str	r3, [r0, #0]
 800da52:	e7d6      	b.n	800da02 <_free_r+0x26>
 800da54:	6825      	ldr	r5, [r4, #0]
 800da56:	1961      	adds	r1, r4, r5
 800da58:	428b      	cmp	r3, r1
 800da5a:	bf04      	itt	eq
 800da5c:	6819      	ldreq	r1, [r3, #0]
 800da5e:	685b      	ldreq	r3, [r3, #4]
 800da60:	6063      	str	r3, [r4, #4]
 800da62:	bf04      	itt	eq
 800da64:	1949      	addeq	r1, r1, r5
 800da66:	6021      	streq	r1, [r4, #0]
 800da68:	6054      	str	r4, [r2, #4]
 800da6a:	e7ca      	b.n	800da02 <_free_r+0x26>
 800da6c:	b003      	add	sp, #12
 800da6e:	bd30      	pop	{r4, r5, pc}
 800da70:	20000b18 	.word	0x20000b18

0800da74 <sbrk_aligned>:
 800da74:	b570      	push	{r4, r5, r6, lr}
 800da76:	4e0e      	ldr	r6, [pc, #56]	; (800dab0 <sbrk_aligned+0x3c>)
 800da78:	460c      	mov	r4, r1
 800da7a:	6831      	ldr	r1, [r6, #0]
 800da7c:	4605      	mov	r5, r0
 800da7e:	b911      	cbnz	r1, 800da86 <sbrk_aligned+0x12>
 800da80:	f000 f88c 	bl	800db9c <_sbrk_r>
 800da84:	6030      	str	r0, [r6, #0]
 800da86:	4621      	mov	r1, r4
 800da88:	4628      	mov	r0, r5
 800da8a:	f000 f887 	bl	800db9c <_sbrk_r>
 800da8e:	1c43      	adds	r3, r0, #1
 800da90:	d00a      	beq.n	800daa8 <sbrk_aligned+0x34>
 800da92:	1cc4      	adds	r4, r0, #3
 800da94:	f024 0403 	bic.w	r4, r4, #3
 800da98:	42a0      	cmp	r0, r4
 800da9a:	d007      	beq.n	800daac <sbrk_aligned+0x38>
 800da9c:	1a21      	subs	r1, r4, r0
 800da9e:	4628      	mov	r0, r5
 800daa0:	f000 f87c 	bl	800db9c <_sbrk_r>
 800daa4:	3001      	adds	r0, #1
 800daa6:	d101      	bne.n	800daac <sbrk_aligned+0x38>
 800daa8:	f04f 34ff 	mov.w	r4, #4294967295
 800daac:	4620      	mov	r0, r4
 800daae:	bd70      	pop	{r4, r5, r6, pc}
 800dab0:	20000b1c 	.word	0x20000b1c

0800dab4 <_malloc_r>:
 800dab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab8:	1ccd      	adds	r5, r1, #3
 800daba:	f025 0503 	bic.w	r5, r5, #3
 800dabe:	3508      	adds	r5, #8
 800dac0:	2d0c      	cmp	r5, #12
 800dac2:	bf38      	it	cc
 800dac4:	250c      	movcc	r5, #12
 800dac6:	2d00      	cmp	r5, #0
 800dac8:	4607      	mov	r7, r0
 800daca:	db01      	blt.n	800dad0 <_malloc_r+0x1c>
 800dacc:	42a9      	cmp	r1, r5
 800dace:	d905      	bls.n	800dadc <_malloc_r+0x28>
 800dad0:	230c      	movs	r3, #12
 800dad2:	603b      	str	r3, [r7, #0]
 800dad4:	2600      	movs	r6, #0
 800dad6:	4630      	mov	r0, r6
 800dad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dadc:	4e2e      	ldr	r6, [pc, #184]	; (800db98 <_malloc_r+0xe4>)
 800dade:	f001 f8bf 	bl	800ec60 <__malloc_lock>
 800dae2:	6833      	ldr	r3, [r6, #0]
 800dae4:	461c      	mov	r4, r3
 800dae6:	bb34      	cbnz	r4, 800db36 <_malloc_r+0x82>
 800dae8:	4629      	mov	r1, r5
 800daea:	4638      	mov	r0, r7
 800daec:	f7ff ffc2 	bl	800da74 <sbrk_aligned>
 800daf0:	1c43      	adds	r3, r0, #1
 800daf2:	4604      	mov	r4, r0
 800daf4:	d14d      	bne.n	800db92 <_malloc_r+0xde>
 800daf6:	6834      	ldr	r4, [r6, #0]
 800daf8:	4626      	mov	r6, r4
 800dafa:	2e00      	cmp	r6, #0
 800dafc:	d140      	bne.n	800db80 <_malloc_r+0xcc>
 800dafe:	6823      	ldr	r3, [r4, #0]
 800db00:	4631      	mov	r1, r6
 800db02:	4638      	mov	r0, r7
 800db04:	eb04 0803 	add.w	r8, r4, r3
 800db08:	f000 f848 	bl	800db9c <_sbrk_r>
 800db0c:	4580      	cmp	r8, r0
 800db0e:	d13a      	bne.n	800db86 <_malloc_r+0xd2>
 800db10:	6821      	ldr	r1, [r4, #0]
 800db12:	3503      	adds	r5, #3
 800db14:	1a6d      	subs	r5, r5, r1
 800db16:	f025 0503 	bic.w	r5, r5, #3
 800db1a:	3508      	adds	r5, #8
 800db1c:	2d0c      	cmp	r5, #12
 800db1e:	bf38      	it	cc
 800db20:	250c      	movcc	r5, #12
 800db22:	4629      	mov	r1, r5
 800db24:	4638      	mov	r0, r7
 800db26:	f7ff ffa5 	bl	800da74 <sbrk_aligned>
 800db2a:	3001      	adds	r0, #1
 800db2c:	d02b      	beq.n	800db86 <_malloc_r+0xd2>
 800db2e:	6823      	ldr	r3, [r4, #0]
 800db30:	442b      	add	r3, r5
 800db32:	6023      	str	r3, [r4, #0]
 800db34:	e00e      	b.n	800db54 <_malloc_r+0xa0>
 800db36:	6822      	ldr	r2, [r4, #0]
 800db38:	1b52      	subs	r2, r2, r5
 800db3a:	d41e      	bmi.n	800db7a <_malloc_r+0xc6>
 800db3c:	2a0b      	cmp	r2, #11
 800db3e:	d916      	bls.n	800db6e <_malloc_r+0xba>
 800db40:	1961      	adds	r1, r4, r5
 800db42:	42a3      	cmp	r3, r4
 800db44:	6025      	str	r5, [r4, #0]
 800db46:	bf18      	it	ne
 800db48:	6059      	strne	r1, [r3, #4]
 800db4a:	6863      	ldr	r3, [r4, #4]
 800db4c:	bf08      	it	eq
 800db4e:	6031      	streq	r1, [r6, #0]
 800db50:	5162      	str	r2, [r4, r5]
 800db52:	604b      	str	r3, [r1, #4]
 800db54:	4638      	mov	r0, r7
 800db56:	f104 060b 	add.w	r6, r4, #11
 800db5a:	f001 f887 	bl	800ec6c <__malloc_unlock>
 800db5e:	f026 0607 	bic.w	r6, r6, #7
 800db62:	1d23      	adds	r3, r4, #4
 800db64:	1af2      	subs	r2, r6, r3
 800db66:	d0b6      	beq.n	800dad6 <_malloc_r+0x22>
 800db68:	1b9b      	subs	r3, r3, r6
 800db6a:	50a3      	str	r3, [r4, r2]
 800db6c:	e7b3      	b.n	800dad6 <_malloc_r+0x22>
 800db6e:	6862      	ldr	r2, [r4, #4]
 800db70:	42a3      	cmp	r3, r4
 800db72:	bf0c      	ite	eq
 800db74:	6032      	streq	r2, [r6, #0]
 800db76:	605a      	strne	r2, [r3, #4]
 800db78:	e7ec      	b.n	800db54 <_malloc_r+0xa0>
 800db7a:	4623      	mov	r3, r4
 800db7c:	6864      	ldr	r4, [r4, #4]
 800db7e:	e7b2      	b.n	800dae6 <_malloc_r+0x32>
 800db80:	4634      	mov	r4, r6
 800db82:	6876      	ldr	r6, [r6, #4]
 800db84:	e7b9      	b.n	800dafa <_malloc_r+0x46>
 800db86:	230c      	movs	r3, #12
 800db88:	603b      	str	r3, [r7, #0]
 800db8a:	4638      	mov	r0, r7
 800db8c:	f001 f86e 	bl	800ec6c <__malloc_unlock>
 800db90:	e7a1      	b.n	800dad6 <_malloc_r+0x22>
 800db92:	6025      	str	r5, [r4, #0]
 800db94:	e7de      	b.n	800db54 <_malloc_r+0xa0>
 800db96:	bf00      	nop
 800db98:	20000b18 	.word	0x20000b18

0800db9c <_sbrk_r>:
 800db9c:	b538      	push	{r3, r4, r5, lr}
 800db9e:	4d06      	ldr	r5, [pc, #24]	; (800dbb8 <_sbrk_r+0x1c>)
 800dba0:	2300      	movs	r3, #0
 800dba2:	4604      	mov	r4, r0
 800dba4:	4608      	mov	r0, r1
 800dba6:	602b      	str	r3, [r5, #0]
 800dba8:	f7f8 fd02 	bl	80065b0 <_sbrk>
 800dbac:	1c43      	adds	r3, r0, #1
 800dbae:	d102      	bne.n	800dbb6 <_sbrk_r+0x1a>
 800dbb0:	682b      	ldr	r3, [r5, #0]
 800dbb2:	b103      	cbz	r3, 800dbb6 <_sbrk_r+0x1a>
 800dbb4:	6023      	str	r3, [r4, #0]
 800dbb6:	bd38      	pop	{r3, r4, r5, pc}
 800dbb8:	20000b20 	.word	0x20000b20

0800dbbc <siprintf>:
 800dbbc:	b40e      	push	{r1, r2, r3}
 800dbbe:	b500      	push	{lr}
 800dbc0:	b09c      	sub	sp, #112	; 0x70
 800dbc2:	ab1d      	add	r3, sp, #116	; 0x74
 800dbc4:	9002      	str	r0, [sp, #8]
 800dbc6:	9006      	str	r0, [sp, #24]
 800dbc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dbcc:	4809      	ldr	r0, [pc, #36]	; (800dbf4 <siprintf+0x38>)
 800dbce:	9107      	str	r1, [sp, #28]
 800dbd0:	9104      	str	r1, [sp, #16]
 800dbd2:	4909      	ldr	r1, [pc, #36]	; (800dbf8 <siprintf+0x3c>)
 800dbd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbd8:	9105      	str	r1, [sp, #20]
 800dbda:	6800      	ldr	r0, [r0, #0]
 800dbdc:	9301      	str	r3, [sp, #4]
 800dbde:	a902      	add	r1, sp, #8
 800dbe0:	f001 f8a6 	bl	800ed30 <_svfiprintf_r>
 800dbe4:	9b02      	ldr	r3, [sp, #8]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	701a      	strb	r2, [r3, #0]
 800dbea:	b01c      	add	sp, #112	; 0x70
 800dbec:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbf0:	b003      	add	sp, #12
 800dbf2:	4770      	bx	lr
 800dbf4:	20000110 	.word	0x20000110
 800dbf8:	ffff0208 	.word	0xffff0208

0800dbfc <__seofread>:
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	4770      	bx	lr

0800dc00 <iso_year_adjust>:
 800dc00:	6942      	ldr	r2, [r0, #20]
 800dc02:	2a00      	cmp	r2, #0
 800dc04:	f240 736c 	movw	r3, #1900	; 0x76c
 800dc08:	bfa8      	it	ge
 800dc0a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800dc0e:	4413      	add	r3, r2
 800dc10:	0792      	lsls	r2, r2, #30
 800dc12:	d105      	bne.n	800dc20 <iso_year_adjust+0x20>
 800dc14:	2164      	movs	r1, #100	; 0x64
 800dc16:	fb93 f2f1 	sdiv	r2, r3, r1
 800dc1a:	fb01 3212 	mls	r2, r1, r2, r3
 800dc1e:	b9da      	cbnz	r2, 800dc58 <iso_year_adjust+0x58>
 800dc20:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800dc24:	fb93 f1f2 	sdiv	r1, r3, r2
 800dc28:	fb02 3311 	mls	r3, r2, r1, r3
 800dc2c:	fab3 f383 	clz	r3, r3
 800dc30:	095b      	lsrs	r3, r3, #5
 800dc32:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800dc36:	0040      	lsls	r0, r0, #1
 800dc38:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800dc3c:	4418      	add	r0, r3
 800dc3e:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800dc42:	4298      	cmp	r0, r3
 800dc44:	d03a      	beq.n	800dcbc <iso_year_adjust+0xbc>
 800dc46:	dc21      	bgt.n	800dc8c <iso_year_adjust+0x8c>
 800dc48:	2801      	cmp	r0, #1
 800dc4a:	dc1a      	bgt.n	800dc82 <iso_year_adjust+0x82>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	bfb4      	ite	lt
 800dc50:	2000      	movlt	r0, #0
 800dc52:	f04f 30ff 	movge.w	r0, #4294967295
 800dc56:	4770      	bx	lr
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e7ea      	b.n	800dc32 <iso_year_adjust+0x32>
 800dc5c:	2817      	cmp	r0, #23
 800dc5e:	d813      	bhi.n	800dc88 <iso_year_adjust+0x88>
 800dc60:	e8df f000 	tbb	[pc, r0]
 800dc64:	0c0c0c0c 	.word	0x0c0c0c0c
 800dc68:	0c0c1212 	.word	0x0c0c1212
 800dc6c:	12121212 	.word	0x12121212
 800dc70:	12121212 	.word	0x12121212
 800dc74:	0c0c1212 	.word	0x0c0c1212
 800dc78:	0c0c1212 	.word	0x0c0c1212
 800dc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc80:	4770      	bx	lr
 800dc82:	380a      	subs	r0, #10
 800dc84:	2817      	cmp	r0, #23
 800dc86:	d9e9      	bls.n	800dc5c <iso_year_adjust+0x5c>
 800dc88:	2000      	movs	r0, #0
 800dc8a:	4770      	bx	lr
 800dc8c:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800dc90:	4298      	cmp	r0, r3
 800dc92:	dc06      	bgt.n	800dca2 <iso_year_adjust+0xa2>
 800dc94:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800dc98:	4298      	cmp	r0, r3
 800dc9a:	bfd4      	ite	le
 800dc9c:	2000      	movle	r0, #0
 800dc9e:	2001      	movgt	r0, #1
 800dca0:	4770      	bx	lr
 800dca2:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800dca6:	3802      	subs	r0, #2
 800dca8:	2815      	cmp	r0, #21
 800dcaa:	d8ed      	bhi.n	800dc88 <iso_year_adjust+0x88>
 800dcac:	2301      	movs	r3, #1
 800dcae:	4083      	lsls	r3, r0
 800dcb0:	4803      	ldr	r0, [pc, #12]	; (800dcc0 <iso_year_adjust+0xc0>)
 800dcb2:	4018      	ands	r0, r3
 800dcb4:	3800      	subs	r0, #0
 800dcb6:	bf18      	it	ne
 800dcb8:	2001      	movne	r0, #1
 800dcba:	4770      	bx	lr
 800dcbc:	2001      	movs	r0, #1
 800dcbe:	4770      	bx	lr
 800dcc0:	002a001f 	.word	0x002a001f

0800dcc4 <__strftime.isra.0>:
 800dcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc8:	b08f      	sub	sp, #60	; 0x3c
 800dcca:	461e      	mov	r6, r3
 800dccc:	2300      	movs	r3, #0
 800dcce:	4607      	mov	r7, r0
 800dcd0:	460d      	mov	r5, r1
 800dcd2:	9302      	str	r3, [sp, #8]
 800dcd4:	461c      	mov	r4, r3
 800dcd6:	7813      	ldrb	r3, [r2, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	f000 84ba 	beq.w	800e652 <__strftime.isra.0+0x98e>
 800dcde:	2b25      	cmp	r3, #37	; 0x25
 800dce0:	d11f      	bne.n	800dd22 <__strftime.isra.0+0x5e>
 800dce2:	f892 b001 	ldrb.w	fp, [r2, #1]
 800dce6:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800dcea:	d024      	beq.n	800dd36 <__strftime.isra.0+0x72>
 800dcec:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800dcf0:	d021      	beq.n	800dd36 <__strftime.isra.0+0x72>
 800dcf2:	f102 0801 	add.w	r8, r2, #1
 800dcf6:	f04f 0b00 	mov.w	fp, #0
 800dcfa:	f898 2000 	ldrb.w	r2, [r8]
 800dcfe:	3a31      	subs	r2, #49	; 0x31
 800dd00:	2a08      	cmp	r2, #8
 800dd02:	d81b      	bhi.n	800dd3c <__strftime.isra.0+0x78>
 800dd04:	4640      	mov	r0, r8
 800dd06:	220a      	movs	r2, #10
 800dd08:	a906      	add	r1, sp, #24
 800dd0a:	f000 fdb5 	bl	800e878 <strtoul>
 800dd0e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800dd12:	4681      	mov	r9, r0
 800dd14:	f898 2000 	ldrb.w	r2, [r8]
 800dd18:	2a45      	cmp	r2, #69	; 0x45
 800dd1a:	d112      	bne.n	800dd42 <__strftime.isra.0+0x7e>
 800dd1c:	f108 0801 	add.w	r8, r8, #1
 800dd20:	e011      	b.n	800dd46 <__strftime.isra.0+0x82>
 800dd22:	1e69      	subs	r1, r5, #1
 800dd24:	42a1      	cmp	r1, r4
 800dd26:	d802      	bhi.n	800dd2e <__strftime.isra.0+0x6a>
 800dd28:	2400      	movs	r4, #0
 800dd2a:	f000 bc95 	b.w	800e658 <__strftime.isra.0+0x994>
 800dd2e:	553b      	strb	r3, [r7, r4]
 800dd30:	3201      	adds	r2, #1
 800dd32:	3401      	adds	r4, #1
 800dd34:	e7cf      	b.n	800dcd6 <__strftime.isra.0+0x12>
 800dd36:	f102 0802 	add.w	r8, r2, #2
 800dd3a:	e7de      	b.n	800dcfa <__strftime.isra.0+0x36>
 800dd3c:	f04f 0900 	mov.w	r9, #0
 800dd40:	e7e8      	b.n	800dd14 <__strftime.isra.0+0x50>
 800dd42:	2a4f      	cmp	r2, #79	; 0x4f
 800dd44:	d0ea      	beq.n	800dd1c <__strftime.isra.0+0x58>
 800dd46:	f898 0000 	ldrb.w	r0, [r8]
 800dd4a:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800dd4e:	2a55      	cmp	r2, #85	; 0x55
 800dd50:	d8ea      	bhi.n	800dd28 <__strftime.isra.0+0x64>
 800dd52:	a301      	add	r3, pc, #4	; (adr r3, 800dd58 <__strftime.isra.0+0x94>)
 800dd54:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800dd58:	0800e647 	.word	0x0800e647
 800dd5c:	0800dd29 	.word	0x0800dd29
 800dd60:	0800dd29 	.word	0x0800dd29
 800dd64:	0800dd29 	.word	0x0800dd29
 800dd68:	0800dd29 	.word	0x0800dd29
 800dd6c:	0800dd29 	.word	0x0800dd29
 800dd70:	0800dd29 	.word	0x0800dd29
 800dd74:	0800dd29 	.word	0x0800dd29
 800dd78:	0800dd29 	.word	0x0800dd29
 800dd7c:	0800dd29 	.word	0x0800dd29
 800dd80:	0800dd29 	.word	0x0800dd29
 800dd84:	0800dd29 	.word	0x0800dd29
 800dd88:	0800dd29 	.word	0x0800dd29
 800dd8c:	0800dd29 	.word	0x0800dd29
 800dd90:	0800dd29 	.word	0x0800dd29
 800dd94:	0800dd29 	.word	0x0800dd29
 800dd98:	0800dd29 	.word	0x0800dd29
 800dd9c:	0800dd29 	.word	0x0800dd29
 800dda0:	0800dd29 	.word	0x0800dd29
 800dda4:	0800dd29 	.word	0x0800dd29
 800dda8:	0800dd29 	.word	0x0800dd29
 800ddac:	0800dd29 	.word	0x0800dd29
 800ddb0:	0800dd29 	.word	0x0800dd29
 800ddb4:	0800dd29 	.word	0x0800dd29
 800ddb8:	0800dd29 	.word	0x0800dd29
 800ddbc:	0800dd29 	.word	0x0800dd29
 800ddc0:	0800dd29 	.word	0x0800dd29
 800ddc4:	0800dd29 	.word	0x0800dd29
 800ddc8:	0800deed 	.word	0x0800deed
 800ddcc:	0800df45 	.word	0x0800df45
 800ddd0:	0800dfb3 	.word	0x0800dfb3
 800ddd4:	0800e051 	.word	0x0800e051
 800ddd8:	0800dd29 	.word	0x0800dd29
 800dddc:	0800e09d 	.word	0x0800e09d
 800dde0:	0800e189 	.word	0x0800e189
 800dde4:	0800e263 	.word	0x0800e263
 800dde8:	0800e271 	.word	0x0800e271
 800ddec:	0800dd29 	.word	0x0800dd29
 800ddf0:	0800dd29 	.word	0x0800dd29
 800ddf4:	0800dd29 	.word	0x0800dd29
 800ddf8:	0800e2a1 	.word	0x0800e2a1
 800ddfc:	0800dd29 	.word	0x0800dd29
 800de00:	0800dd29 	.word	0x0800dd29
 800de04:	0800e2b5 	.word	0x0800e2b5
 800de08:	0800dd29 	.word	0x0800dd29
 800de0c:	0800e307 	.word	0x0800e307
 800de10:	0800e41b 	.word	0x0800e41b
 800de14:	0800e42b 	.word	0x0800e42b
 800de18:	0800e453 	.word	0x0800e453
 800de1c:	0800e48d 	.word	0x0800e48d
 800de20:	0800e501 	.word	0x0800e501
 800de24:	0800dfab 	.word	0x0800dfab
 800de28:	0800e52d 	.word	0x0800e52d
 800de2c:	0800e5f5 	.word	0x0800e5f5
 800de30:	0800dd29 	.word	0x0800dd29
 800de34:	0800dd29 	.word	0x0800dd29
 800de38:	0800dd29 	.word	0x0800dd29
 800de3c:	0800dd29 	.word	0x0800dd29
 800de40:	0800dd29 	.word	0x0800dd29
 800de44:	0800dd29 	.word	0x0800dd29
 800de48:	0800deb1 	.word	0x0800deb1
 800de4c:	0800df1b 	.word	0x0800df1b
 800de50:	0800df71 	.word	0x0800df71
 800de54:	0800e02d 	.word	0x0800e02d
 800de58:	0800e02d 	.word	0x0800e02d
 800de5c:	0800dd29 	.word	0x0800dd29
 800de60:	0800e0ef 	.word	0x0800e0ef
 800de64:	0800df1b 	.word	0x0800df1b
 800de68:	0800dd29 	.word	0x0800dd29
 800de6c:	0800e293 	.word	0x0800e293
 800de70:	0800e263 	.word	0x0800e263
 800de74:	0800e271 	.word	0x0800e271
 800de78:	0800e29b 	.word	0x0800e29b
 800de7c:	0800e2a5 	.word	0x0800e2a5
 800de80:	0800dd29 	.word	0x0800dd29
 800de84:	0800e2b5 	.word	0x0800e2b5
 800de88:	0800dd29 	.word	0x0800dd29
 800de8c:	0800df9b 	.word	0x0800df9b
 800de90:	0800e319 	.word	0x0800e319
 800de94:	0800e41f 	.word	0x0800e41f
 800de98:	0800e439 	.word	0x0800e439
 800de9c:	0800dd29 	.word	0x0800dd29
 800dea0:	0800e4f3 	.word	0x0800e4f3
 800dea4:	0800dfa3 	.word	0x0800dfa3
 800dea8:	0800e511 	.word	0x0800e511
 800deac:	0800e57f 	.word	0x0800e57f
 800deb0:	69b3      	ldr	r3, [r6, #24]
 800deb2:	4aa9      	ldr	r2, [pc, #676]	; (800e158 <__strftime.isra.0+0x494>)
 800deb4:	3318      	adds	r3, #24
 800deb6:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800deba:	4648      	mov	r0, r9
 800debc:	f7f2 f990 	bl	80001e0 <strlen>
 800dec0:	f109 39ff 	add.w	r9, r9, #4294967295
 800dec4:	4420      	add	r0, r4
 800dec6:	1e6b      	subs	r3, r5, #1
 800dec8:	42a0      	cmp	r0, r4
 800deca:	d107      	bne.n	800dedc <__strftime.isra.0+0x218>
 800decc:	f898 3000 	ldrb.w	r3, [r8]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f000 83be 	beq.w	800e652 <__strftime.isra.0+0x98e>
 800ded6:	f108 0201 	add.w	r2, r8, #1
 800deda:	e6fc      	b.n	800dcd6 <__strftime.isra.0+0x12>
 800dedc:	42a3      	cmp	r3, r4
 800dede:	f67f af23 	bls.w	800dd28 <__strftime.isra.0+0x64>
 800dee2:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800dee6:	553a      	strb	r2, [r7, r4]
 800dee8:	3401      	adds	r4, #1
 800deea:	e7ed      	b.n	800dec8 <__strftime.isra.0+0x204>
 800deec:	69b2      	ldr	r2, [r6, #24]
 800deee:	4b9a      	ldr	r3, [pc, #616]	; (800e158 <__strftime.isra.0+0x494>)
 800def0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800def4:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800def8:	4648      	mov	r0, r9
 800defa:	f7f2 f971 	bl	80001e0 <strlen>
 800defe:	f109 39ff 	add.w	r9, r9, #4294967295
 800df02:	4420      	add	r0, r4
 800df04:	1e6b      	subs	r3, r5, #1
 800df06:	42a0      	cmp	r0, r4
 800df08:	d0e0      	beq.n	800decc <__strftime.isra.0+0x208>
 800df0a:	42a3      	cmp	r3, r4
 800df0c:	f67f af0c 	bls.w	800dd28 <__strftime.isra.0+0x64>
 800df10:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800df14:	553a      	strb	r2, [r7, r4]
 800df16:	3401      	adds	r4, #1
 800df18:	e7f5      	b.n	800df06 <__strftime.isra.0+0x242>
 800df1a:	4b8f      	ldr	r3, [pc, #572]	; (800e158 <__strftime.isra.0+0x494>)
 800df1c:	6932      	ldr	r2, [r6, #16]
 800df1e:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800df22:	4648      	mov	r0, r9
 800df24:	f7f2 f95c 	bl	80001e0 <strlen>
 800df28:	f109 39ff 	add.w	r9, r9, #4294967295
 800df2c:	4420      	add	r0, r4
 800df2e:	1e6b      	subs	r3, r5, #1
 800df30:	42a0      	cmp	r0, r4
 800df32:	d0cb      	beq.n	800decc <__strftime.isra.0+0x208>
 800df34:	42a3      	cmp	r3, r4
 800df36:	f67f aef7 	bls.w	800dd28 <__strftime.isra.0+0x64>
 800df3a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800df3e:	553a      	strb	r2, [r7, r4]
 800df40:	3401      	adds	r4, #1
 800df42:	e7f5      	b.n	800df30 <__strftime.isra.0+0x26c>
 800df44:	6933      	ldr	r3, [r6, #16]
 800df46:	4a84      	ldr	r2, [pc, #528]	; (800e158 <__strftime.isra.0+0x494>)
 800df48:	330c      	adds	r3, #12
 800df4a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800df4e:	4648      	mov	r0, r9
 800df50:	f7f2 f946 	bl	80001e0 <strlen>
 800df54:	f109 39ff 	add.w	r9, r9, #4294967295
 800df58:	4420      	add	r0, r4
 800df5a:	1e6b      	subs	r3, r5, #1
 800df5c:	42a0      	cmp	r0, r4
 800df5e:	d0b5      	beq.n	800decc <__strftime.isra.0+0x208>
 800df60:	42a3      	cmp	r3, r4
 800df62:	f67f aee1 	bls.w	800dd28 <__strftime.isra.0+0x64>
 800df66:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800df6a:	553a      	strb	r2, [r7, r4]
 800df6c:	3401      	adds	r4, #1
 800df6e:	e7f5      	b.n	800df5c <__strftime.isra.0+0x298>
 800df70:	4b79      	ldr	r3, [pc, #484]	; (800e158 <__strftime.isra.0+0x494>)
 800df72:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800df76:	4648      	mov	r0, r9
 800df78:	f7f2 f932 	bl	80001e0 <strlen>
 800df7c:	f899 3000 	ldrb.w	r3, [r9]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d0a3      	beq.n	800decc <__strftime.isra.0+0x208>
 800df84:	4633      	mov	r3, r6
 800df86:	464a      	mov	r2, r9
 800df88:	1b29      	subs	r1, r5, r4
 800df8a:	1938      	adds	r0, r7, r4
 800df8c:	f7ff fe9a 	bl	800dcc4 <__strftime.isra.0>
 800df90:	2800      	cmp	r0, #0
 800df92:	f77f aec9 	ble.w	800dd28 <__strftime.isra.0+0x64>
 800df96:	4404      	add	r4, r0
 800df98:	e798      	b.n	800decc <__strftime.isra.0+0x208>
 800df9a:	4b6f      	ldr	r3, [pc, #444]	; (800e158 <__strftime.isra.0+0x494>)
 800df9c:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 800dfa0:	e7e9      	b.n	800df76 <__strftime.isra.0+0x2b2>
 800dfa2:	4b6d      	ldr	r3, [pc, #436]	; (800e158 <__strftime.isra.0+0x494>)
 800dfa4:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800dfa8:	e7e5      	b.n	800df76 <__strftime.isra.0+0x2b2>
 800dfaa:	4b6b      	ldr	r3, [pc, #428]	; (800e158 <__strftime.isra.0+0x494>)
 800dfac:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800dfb0:	e7e1      	b.n	800df76 <__strftime.isra.0+0x2b2>
 800dfb2:	496a      	ldr	r1, [pc, #424]	; (800e15c <__strftime.isra.0+0x498>)
 800dfb4:	f8d6 a014 	ldr.w	sl, [r6, #20]
 800dfb8:	458a      	cmp	sl, r1
 800dfba:	bfac      	ite	ge
 800dfbc:	2100      	movge	r1, #0
 800dfbe:	2101      	movlt	r1, #1
 800dfc0:	f1ba 0f00 	cmp.w	sl, #0
 800dfc4:	db11      	blt.n	800dfea <__strftime.isra.0+0x326>
 800dfc6:	2064      	movs	r0, #100	; 0x64
 800dfc8:	fb9a f0f0 	sdiv	r0, sl, r0
 800dfcc:	3013      	adds	r0, #19
 800dfce:	f1bb 0f00 	cmp.w	fp, #0
 800dfd2:	d014      	beq.n	800dffe <__strftime.isra.0+0x33a>
 800dfd4:	2863      	cmp	r0, #99	; 0x63
 800dfd6:	dd27      	ble.n	800e028 <__strftime.isra.0+0x364>
 800dfd8:	4b61      	ldr	r3, [pc, #388]	; (800e160 <__strftime.isra.0+0x49c>)
 800dfda:	4a62      	ldr	r2, [pc, #392]	; (800e164 <__strftime.isra.0+0x4a0>)
 800dfdc:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800dfe0:	bf18      	it	ne
 800dfe2:	461a      	movne	r2, r3
 800dfe4:	f8df c198 	ldr.w	ip, [pc, #408]	; 800e180 <__strftime.isra.0+0x4bc>
 800dfe8:	e00c      	b.n	800e004 <__strftime.isra.0+0x340>
 800dfea:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800dfee:	9103      	str	r1, [sp, #12]
 800dff0:	f000 fdde 	bl	800ebb0 <abs>
 800dff4:	2264      	movs	r2, #100	; 0x64
 800dff6:	9903      	ldr	r1, [sp, #12]
 800dff8:	fb90 f0f2 	sdiv	r0, r0, r2
 800dffc:	e7e7      	b.n	800dfce <__strftime.isra.0+0x30a>
 800dffe:	4a58      	ldr	r2, [pc, #352]	; (800e160 <__strftime.isra.0+0x49c>)
 800e000:	f8df c180 	ldr.w	ip, [pc, #384]	; 800e184 <__strftime.isra.0+0x4c0>
 800e004:	4b58      	ldr	r3, [pc, #352]	; (800e168 <__strftime.isra.0+0x4a4>)
 800e006:	9001      	str	r0, [sp, #4]
 800e008:	f1b9 0f02 	cmp.w	r9, #2
 800e00c:	bf2c      	ite	cs
 800e00e:	ebc1 0109 	rsbcs	r1, r1, r9
 800e012:	f1c1 0102 	rsbcc	r1, r1, #2
 800e016:	9100      	str	r1, [sp, #0]
 800e018:	4950      	ldr	r1, [pc, #320]	; (800e15c <__strftime.isra.0+0x498>)
 800e01a:	458a      	cmp	sl, r1
 800e01c:	bfa8      	it	ge
 800e01e:	4613      	movge	r3, r2
 800e020:	4662      	mov	r2, ip
 800e022:	1b29      	subs	r1, r5, r4
 800e024:	1938      	adds	r0, r7, r4
 800e026:	e028      	b.n	800e07a <__strftime.isra.0+0x3b6>
 800e028:	4a4d      	ldr	r2, [pc, #308]	; (800e160 <__strftime.isra.0+0x49c>)
 800e02a:	e7db      	b.n	800dfe4 <__strftime.isra.0+0x320>
 800e02c:	494f      	ldr	r1, [pc, #316]	; (800e16c <__strftime.isra.0+0x4a8>)
 800e02e:	4a50      	ldr	r2, [pc, #320]	; (800e170 <__strftime.isra.0+0x4ac>)
 800e030:	68f3      	ldr	r3, [r6, #12]
 800e032:	2864      	cmp	r0, #100	; 0x64
 800e034:	bf08      	it	eq
 800e036:	460a      	moveq	r2, r1
 800e038:	1b29      	subs	r1, r5, r4
 800e03a:	1938      	adds	r0, r7, r4
 800e03c:	f001 f90c 	bl	800f258 <sniprintf>
 800e040:	2800      	cmp	r0, #0
 800e042:	f6ff ae71 	blt.w	800dd28 <__strftime.isra.0+0x64>
 800e046:	4404      	add	r4, r0
 800e048:	42a5      	cmp	r5, r4
 800e04a:	f63f af3f 	bhi.w	800decc <__strftime.isra.0+0x208>
 800e04e:	e66b      	b.n	800dd28 <__strftime.isra.0+0x64>
 800e050:	6970      	ldr	r0, [r6, #20]
 800e052:	6933      	ldr	r3, [r6, #16]
 800e054:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800e058:	2800      	cmp	r0, #0
 800e05a:	eb07 0904 	add.w	r9, r7, r4
 800e05e:	eba5 0104 	sub.w	r1, r5, r4
 800e062:	f103 0301 	add.w	r3, r3, #1
 800e066:	db0b      	blt.n	800e080 <__strftime.isra.0+0x3bc>
 800e068:	2264      	movs	r2, #100	; 0x64
 800e06a:	fb90 fcf2 	sdiv	ip, r0, r2
 800e06e:	fb02 001c 	mls	r0, r2, ip, r0
 800e072:	4a40      	ldr	r2, [pc, #256]	; (800e174 <__strftime.isra.0+0x4b0>)
 800e074:	e9cd a000 	strd	sl, r0, [sp]
 800e078:	4648      	mov	r0, r9
 800e07a:	f001 f8ed 	bl	800f258 <sniprintf>
 800e07e:	e7df      	b.n	800e040 <__strftime.isra.0+0x37c>
 800e080:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800e084:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800e088:	f000 fd92 	bl	800ebb0 <abs>
 800e08c:	2264      	movs	r2, #100	; 0x64
 800e08e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 800e092:	fb90 fcf2 	sdiv	ip, r0, r2
 800e096:	fb0c 0012 	mls	r0, ip, r2, r0
 800e09a:	e7ea      	b.n	800e072 <__strftime.isra.0+0x3ae>
 800e09c:	2225      	movs	r2, #37	; 0x25
 800e09e:	f88d 2018 	strb.w	r2, [sp, #24]
 800e0a2:	f1bb 0f00 	cmp.w	fp, #0
 800e0a6:	d011      	beq.n	800e0cc <__strftime.isra.0+0x408>
 800e0a8:	f1b9 0f06 	cmp.w	r9, #6
 800e0ac:	bf38      	it	cc
 800e0ae:	f04f 0906 	movcc.w	r9, #6
 800e0b2:	f1b9 0306 	subs.w	r3, r9, #6
 800e0b6:	f88d b019 	strb.w	fp, [sp, #25]
 800e0ba:	d10c      	bne.n	800e0d6 <__strftime.isra.0+0x412>
 800e0bc:	f10d 001a 	add.w	r0, sp, #26
 800e0c0:	492d      	ldr	r1, [pc, #180]	; (800e178 <__strftime.isra.0+0x4b4>)
 800e0c2:	f001 f929 	bl	800f318 <strcpy>
 800e0c6:	4633      	mov	r3, r6
 800e0c8:	aa06      	add	r2, sp, #24
 800e0ca:	e75d      	b.n	800df88 <__strftime.isra.0+0x2c4>
 800e0cc:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 800e0d0:	f04f 090a 	mov.w	r9, #10
 800e0d4:	e7ed      	b.n	800e0b2 <__strftime.isra.0+0x3ee>
 800e0d6:	4a29      	ldr	r2, [pc, #164]	; (800e17c <__strftime.isra.0+0x4b8>)
 800e0d8:	211e      	movs	r1, #30
 800e0da:	f10d 001a 	add.w	r0, sp, #26
 800e0de:	f001 f8bb 	bl	800f258 <sniprintf>
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	ddea      	ble.n	800e0bc <__strftime.isra.0+0x3f8>
 800e0e6:	f10d 031a 	add.w	r3, sp, #26
 800e0ea:	4418      	add	r0, r3
 800e0ec:	e7e8      	b.n	800e0c0 <__strftime.isra.0+0x3fc>
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	f7ff fd86 	bl	800dc00 <iso_year_adjust>
 800e0f4:	4681      	mov	r9, r0
 800e0f6:	6970      	ldr	r0, [r6, #20]
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	db11      	blt.n	800e120 <__strftime.isra.0+0x45c>
 800e0fc:	2364      	movs	r3, #100	; 0x64
 800e0fe:	fb90 f2f3 	sdiv	r2, r0, r3
 800e102:	fb03 0012 	mls	r0, r3, r2, r0
 800e106:	2264      	movs	r2, #100	; 0x64
 800e108:	4481      	add	r9, r0
 800e10a:	fb99 f3f2 	sdiv	r3, r9, r2
 800e10e:	fb02 9913 	mls	r9, r2, r3, r9
 800e112:	4491      	add	r9, r2
 800e114:	fbb9 f3f2 	udiv	r3, r9, r2
 800e118:	fb02 9313 	mls	r3, r2, r3, r9
 800e11c:	4a13      	ldr	r2, [pc, #76]	; (800e16c <__strftime.isra.0+0x4a8>)
 800e11e:	e78b      	b.n	800e038 <__strftime.isra.0+0x374>
 800e120:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800e124:	f000 fd44 	bl	800ebb0 <abs>
 800e128:	2364      	movs	r3, #100	; 0x64
 800e12a:	f1b9 0f00 	cmp.w	r9, #0
 800e12e:	fb90 f2f3 	sdiv	r2, r0, r3
 800e132:	fb02 0013 	mls	r0, r2, r3, r0
 800e136:	da07      	bge.n	800e148 <__strftime.isra.0+0x484>
 800e138:	6972      	ldr	r2, [r6, #20]
 800e13a:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800e13e:	429a      	cmp	r2, r3
 800e140:	bfb8      	it	lt
 800e142:	f04f 0901 	movlt.w	r9, #1
 800e146:	e7de      	b.n	800e106 <__strftime.isra.0+0x442>
 800e148:	d0dd      	beq.n	800e106 <__strftime.isra.0+0x442>
 800e14a:	6972      	ldr	r2, [r6, #20]
 800e14c:	4b03      	ldr	r3, [pc, #12]	; (800e15c <__strftime.isra.0+0x498>)
 800e14e:	429a      	cmp	r2, r3
 800e150:	bfb8      	it	lt
 800e152:	f04f 39ff 	movlt.w	r9, #4294967295
 800e156:	e7d6      	b.n	800e106 <__strftime.isra.0+0x442>
 800e158:	080108a4 	.word	0x080108a4
 800e15c:	fffff894 	.word	0xfffff894
 800e160:	08010ae2 	.word	0x08010ae2
 800e164:	0801072f 	.word	0x0801072f
 800e168:	08010b71 	.word	0x08010b71
 800e16c:	0801073f 	.word	0x0801073f
 800e170:	08010731 	.word	0x08010731
 800e174:	08010735 	.word	0x08010735
 800e178:	08010748 	.word	0x08010748
 800e17c:	08010744 	.word	0x08010744
 800e180:	08010727 	.word	0x08010727
 800e184:	08010720 	.word	0x08010720
 800e188:	6971      	ldr	r1, [r6, #20]
 800e18a:	4ab6      	ldr	r2, [pc, #728]	; (800e464 <__strftime.isra.0+0x7a0>)
 800e18c:	4291      	cmp	r1, r2
 800e18e:	bfac      	ite	ge
 800e190:	2300      	movge	r3, #0
 800e192:	2301      	movlt	r3, #1
 800e194:	4630      	mov	r0, r6
 800e196:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800e19a:	f7ff fd31 	bl	800dc00 <iso_year_adjust>
 800e19e:	9904      	ldr	r1, [sp, #16]
 800e1a0:	2900      	cmp	r1, #0
 800e1a2:	4682      	mov	sl, r0
 800e1a4:	db2c      	blt.n	800e200 <__strftime.isra.0+0x53c>
 800e1a6:	2264      	movs	r2, #100	; 0x64
 800e1a8:	fb91 f2f2 	sdiv	r2, r1, r2
 800e1ac:	3213      	adds	r2, #19
 800e1ae:	6970      	ldr	r0, [r6, #20]
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	db30      	blt.n	800e216 <__strftime.isra.0+0x552>
 800e1b4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800e1b8:	fb90 fefc 	sdiv	lr, r0, ip
 800e1bc:	fb0c 001e 	mls	r0, ip, lr, r0
 800e1c0:	f1ba 0f00 	cmp.w	sl, #0
 800e1c4:	da36      	bge.n	800e234 <__strftime.isra.0+0x570>
 800e1c6:	6971      	ldr	r1, [r6, #20]
 800e1c8:	4ba7      	ldr	r3, [pc, #668]	; (800e468 <__strftime.isra.0+0x7a4>)
 800e1ca:	4299      	cmp	r1, r3
 800e1cc:	db3d      	blt.n	800e24a <__strftime.isra.0+0x586>
 800e1ce:	4482      	add	sl, r0
 800e1d0:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e1d4:	d13e      	bne.n	800e254 <__strftime.isra.0+0x590>
 800e1d6:	3a01      	subs	r2, #1
 800e1d8:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800e1dc:	9b03      	ldr	r3, [sp, #12]
 800e1de:	2064      	movs	r0, #100	; 0x64
 800e1e0:	fb00 aa02 	mla	sl, r0, r2, sl
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f000 81ad 	beq.w	800e544 <__strftime.isra.0+0x880>
 800e1ea:	222d      	movs	r2, #45	; 0x2d
 800e1ec:	f88d 2018 	strb.w	r2, [sp, #24]
 800e1f0:	f1b9 0f00 	cmp.w	r9, #0
 800e1f4:	d001      	beq.n	800e1fa <__strftime.isra.0+0x536>
 800e1f6:	f109 39ff 	add.w	r9, r9, #4294967295
 800e1fa:	f10d 0219 	add.w	r2, sp, #25
 800e1fe:	e1ac      	b.n	800e55a <__strftime.isra.0+0x896>
 800e200:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800e204:	9104      	str	r1, [sp, #16]
 800e206:	f000 fcd3 	bl	800ebb0 <abs>
 800e20a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800e20e:	9904      	ldr	r1, [sp, #16]
 800e210:	fb90 f2fc 	sdiv	r2, r0, ip
 800e214:	e7cb      	b.n	800e1ae <__strftime.isra.0+0x4ea>
 800e216:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800e21a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e21e:	f000 fcc7 	bl	800ebb0 <abs>
 800e222:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800e226:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800e22a:	fb90 fefc 	sdiv	lr, r0, ip
 800e22e:	fb0e 001c 	mls	r0, lr, ip, r0
 800e232:	e7c5      	b.n	800e1c0 <__strftime.isra.0+0x4fc>
 800e234:	d0cb      	beq.n	800e1ce <__strftime.isra.0+0x50a>
 800e236:	4b8b      	ldr	r3, [pc, #556]	; (800e464 <__strftime.isra.0+0x7a0>)
 800e238:	4299      	cmp	r1, r3
 800e23a:	bfb4      	ite	lt
 800e23c:	2301      	movlt	r3, #1
 800e23e:	2300      	movge	r3, #0
 800e240:	9303      	str	r3, [sp, #12]
 800e242:	bfb8      	it	lt
 800e244:	f04f 3aff 	movlt.w	sl, #4294967295
 800e248:	e7c1      	b.n	800e1ce <__strftime.isra.0+0x50a>
 800e24a:	f04f 0a01 	mov.w	sl, #1
 800e24e:	f8cd a00c 	str.w	sl, [sp, #12]
 800e252:	e7bc      	b.n	800e1ce <__strftime.isra.0+0x50a>
 800e254:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800e258:	bf04      	itt	eq
 800e25a:	3201      	addeq	r2, #1
 800e25c:	f04f 0a00 	moveq.w	sl, #0
 800e260:	e7bc      	b.n	800e1dc <__strftime.isra.0+0x518>
 800e262:	4982      	ldr	r1, [pc, #520]	; (800e46c <__strftime.isra.0+0x7a8>)
 800e264:	4a82      	ldr	r2, [pc, #520]	; (800e470 <__strftime.isra.0+0x7ac>)
 800e266:	68b3      	ldr	r3, [r6, #8]
 800e268:	286b      	cmp	r0, #107	; 0x6b
 800e26a:	bf08      	it	eq
 800e26c:	460a      	moveq	r2, r1
 800e26e:	e6e3      	b.n	800e038 <__strftime.isra.0+0x374>
 800e270:	68b3      	ldr	r3, [r6, #8]
 800e272:	b163      	cbz	r3, 800e28e <__strftime.isra.0+0x5ca>
 800e274:	2b0c      	cmp	r3, #12
 800e276:	d004      	beq.n	800e282 <__strftime.isra.0+0x5be>
 800e278:	210c      	movs	r1, #12
 800e27a:	fb93 f2f1 	sdiv	r2, r3, r1
 800e27e:	fb01 3312 	mls	r3, r1, r2, r3
 800e282:	497b      	ldr	r1, [pc, #492]	; (800e470 <__strftime.isra.0+0x7ac>)
 800e284:	4a79      	ldr	r2, [pc, #484]	; (800e46c <__strftime.isra.0+0x7a8>)
 800e286:	2849      	cmp	r0, #73	; 0x49
 800e288:	bf08      	it	eq
 800e28a:	460a      	moveq	r2, r1
 800e28c:	e6d4      	b.n	800e038 <__strftime.isra.0+0x374>
 800e28e:	230c      	movs	r3, #12
 800e290:	e7f7      	b.n	800e282 <__strftime.isra.0+0x5be>
 800e292:	69f3      	ldr	r3, [r6, #28]
 800e294:	4a77      	ldr	r2, [pc, #476]	; (800e474 <__strftime.isra.0+0x7b0>)
 800e296:	3301      	adds	r3, #1
 800e298:	e6ce      	b.n	800e038 <__strftime.isra.0+0x374>
 800e29a:	6933      	ldr	r3, [r6, #16]
 800e29c:	3301      	adds	r3, #1
 800e29e:	e73d      	b.n	800e11c <__strftime.isra.0+0x458>
 800e2a0:	6873      	ldr	r3, [r6, #4]
 800e2a2:	e73b      	b.n	800e11c <__strftime.isra.0+0x458>
 800e2a4:	1e6b      	subs	r3, r5, #1
 800e2a6:	429c      	cmp	r4, r3
 800e2a8:	f4bf ad3e 	bcs.w	800dd28 <__strftime.isra.0+0x64>
 800e2ac:	230a      	movs	r3, #10
 800e2ae:	553b      	strb	r3, [r7, r4]
 800e2b0:	3401      	adds	r4, #1
 800e2b2:	e60b      	b.n	800decc <__strftime.isra.0+0x208>
 800e2b4:	68b3      	ldr	r3, [r6, #8]
 800e2b6:	2b0b      	cmp	r3, #11
 800e2b8:	4b6f      	ldr	r3, [pc, #444]	; (800e478 <__strftime.isra.0+0x7b4>)
 800e2ba:	bfd4      	ite	le
 800e2bc:	2200      	movle	r2, #0
 800e2be:	2201      	movgt	r2, #1
 800e2c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e2c4:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 800e2c8:	4648      	mov	r0, r9
 800e2ca:	f7f1 ff89 	bl	80001e0 <strlen>
 800e2ce:	f109 32ff 	add.w	r2, r9, #4294967295
 800e2d2:	4420      	add	r0, r4
 800e2d4:	f105 3cff 	add.w	ip, r5, #4294967295
 800e2d8:	42a0      	cmp	r0, r4
 800e2da:	f43f adf7 	beq.w	800decc <__strftime.isra.0+0x208>
 800e2de:	45a4      	cmp	ip, r4
 800e2e0:	f67f ad22 	bls.w	800dd28 <__strftime.isra.0+0x64>
 800e2e4:	f898 1000 	ldrb.w	r1, [r8]
 800e2e8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e2ec:	2950      	cmp	r1, #80	; 0x50
 800e2ee:	d107      	bne.n	800e300 <__strftime.isra.0+0x63c>
 800e2f0:	4962      	ldr	r1, [pc, #392]	; (800e47c <__strftime.isra.0+0x7b8>)
 800e2f2:	5cc9      	ldrb	r1, [r1, r3]
 800e2f4:	f001 0103 	and.w	r1, r1, #3
 800e2f8:	2901      	cmp	r1, #1
 800e2fa:	bf08      	it	eq
 800e2fc:	3320      	addeq	r3, #32
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	553b      	strb	r3, [r7, r4]
 800e302:	3401      	adds	r4, #1
 800e304:	e7e8      	b.n	800e2d8 <__strftime.isra.0+0x614>
 800e306:	6873      	ldr	r3, [r6, #4]
 800e308:	9300      	str	r3, [sp, #0]
 800e30a:	4a5d      	ldr	r2, [pc, #372]	; (800e480 <__strftime.isra.0+0x7bc>)
 800e30c:	68b3      	ldr	r3, [r6, #8]
 800e30e:	1b29      	subs	r1, r5, r4
 800e310:	1938      	adds	r0, r7, r4
 800e312:	f000 ffa1 	bl	800f258 <sniprintf>
 800e316:	e693      	b.n	800e040 <__strftime.isra.0+0x37c>
 800e318:	6a33      	ldr	r3, [r6, #32]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	db7a      	blt.n	800e414 <__strftime.isra.0+0x750>
 800e31e:	f000 fab5 	bl	800e88c <__tz_lock>
 800e322:	9b02      	ldr	r3, [sp, #8]
 800e324:	b90b      	cbnz	r3, 800e32a <__strftime.isra.0+0x666>
 800e326:	f000 fabd 	bl	800e8a4 <_tzset_unlocked>
 800e32a:	f000 fc89 	bl	800ec40 <__gettzinfo>
 800e32e:	6a33      	ldr	r3, [r6, #32]
 800e330:	2b00      	cmp	r3, #0
 800e332:	bfd4      	ite	le
 800e334:	2200      	movle	r2, #0
 800e336:	2201      	movgt	r2, #1
 800e338:	2328      	movs	r3, #40	; 0x28
 800e33a:	fb02 3303 	mla	r3, r2, r3, r3
 800e33e:	58c3      	ldr	r3, [r0, r3]
 800e340:	f1c3 0900 	rsb	r9, r3, #0
 800e344:	f000 faa8 	bl	800e898 <__tz_unlock>
 800e348:	2301      	movs	r3, #1
 800e34a:	9302      	str	r3, [sp, #8]
 800e34c:	6972      	ldr	r2, [r6, #20]
 800e34e:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800e352:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800e356:	f16c 0c00 	sbc.w	ip, ip, #0
 800e35a:	f1bc 0f00 	cmp.w	ip, #0
 800e35e:	eba5 0104 	sub.w	r1, r5, r4
 800e362:	eb07 0004 	add.w	r0, r7, r4
 800e366:	da02      	bge.n	800e36e <__strftime.isra.0+0x6aa>
 800e368:	3303      	adds	r3, #3
 800e36a:	f14c 0c00 	adc.w	ip, ip, #0
 800e36e:	089b      	lsrs	r3, r3, #2
 800e370:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800e374:	f102 3aff 	add.w	sl, r2, #4294967295
 800e378:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800e37c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800e380:	fb9a fefe 	sdiv	lr, sl, lr
 800e384:	ebb3 030e 	subs.w	r3, r3, lr
 800e388:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800e38c:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800e390:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800e394:	fb9a fefe 	sdiv	lr, sl, lr
 800e398:	eb13 030e 	adds.w	r3, r3, lr
 800e39c:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800e3a0:	3a46      	subs	r2, #70	; 0x46
 800e3a2:	f240 1c6d 	movw	ip, #365	; 0x16d
 800e3a6:	fb0c f202 	mul.w	r2, ip, r2
 800e3aa:	189b      	adds	r3, r3, r2
 800e3ac:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800e3b0:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800e3b4:	f04f 0c18 	mov.w	ip, #24
 800e3b8:	eb13 030e 	adds.w	r3, r3, lr
 800e3bc:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800e3c0:	fba3 3e0c 	umull	r3, lr, r3, ip
 800e3c4:	fb0c e202 	mla	r2, ip, r2, lr
 800e3c8:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800e3cc:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800e3d0:	eb13 030e 	adds.w	r3, r3, lr
 800e3d4:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800e3d8:	fba3 320c 	umull	r3, r2, r3, ip
 800e3dc:	fb0c 220e 	mla	r2, ip, lr, r2
 800e3e0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800e3e4:	eb13 030e 	adds.w	r3, r3, lr
 800e3e8:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800e3ec:	fba3 3e0c 	umull	r3, lr, r3, ip
 800e3f0:	fb0c e202 	mla	r2, ip, r2, lr
 800e3f4:	f8d6 e000 	ldr.w	lr, [r6]
 800e3f8:	eb13 030e 	adds.w	r3, r3, lr
 800e3fc:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800e400:	ebb3 0309 	subs.w	r3, r3, r9
 800e404:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800e408:	e9cd 3200 	strd	r3, r2, [sp]
 800e40c:	4a1d      	ldr	r2, [pc, #116]	; (800e484 <__strftime.isra.0+0x7c0>)
 800e40e:	f000 ff23 	bl	800f258 <sniprintf>
 800e412:	e615      	b.n	800e040 <__strftime.isra.0+0x37c>
 800e414:	f04f 0900 	mov.w	r9, #0
 800e418:	e798      	b.n	800e34c <__strftime.isra.0+0x688>
 800e41a:	6833      	ldr	r3, [r6, #0]
 800e41c:	e67e      	b.n	800e11c <__strftime.isra.0+0x458>
 800e41e:	1e6b      	subs	r3, r5, #1
 800e420:	429c      	cmp	r4, r3
 800e422:	f4bf ac81 	bcs.w	800dd28 <__strftime.isra.0+0x64>
 800e426:	2309      	movs	r3, #9
 800e428:	e741      	b.n	800e2ae <__strftime.isra.0+0x5ea>
 800e42a:	6833      	ldr	r3, [r6, #0]
 800e42c:	9301      	str	r3, [sp, #4]
 800e42e:	6873      	ldr	r3, [r6, #4]
 800e430:	9300      	str	r3, [sp, #0]
 800e432:	4a15      	ldr	r2, [pc, #84]	; (800e488 <__strftime.isra.0+0x7c4>)
 800e434:	68b3      	ldr	r3, [r6, #8]
 800e436:	e5f4      	b.n	800e022 <__strftime.isra.0+0x35e>
 800e438:	1e6b      	subs	r3, r5, #1
 800e43a:	429c      	cmp	r4, r3
 800e43c:	f4bf ac74 	bcs.w	800dd28 <__strftime.isra.0+0x64>
 800e440:	69b3      	ldr	r3, [r6, #24]
 800e442:	1c62      	adds	r2, r4, #1
 800e444:	b91b      	cbnz	r3, 800e44e <__strftime.isra.0+0x78a>
 800e446:	2337      	movs	r3, #55	; 0x37
 800e448:	553b      	strb	r3, [r7, r4]
 800e44a:	4614      	mov	r4, r2
 800e44c:	e53e      	b.n	800decc <__strftime.isra.0+0x208>
 800e44e:	3330      	adds	r3, #48	; 0x30
 800e450:	e7fa      	b.n	800e448 <__strftime.isra.0+0x784>
 800e452:	69f3      	ldr	r3, [r6, #28]
 800e454:	69b2      	ldr	r2, [r6, #24]
 800e456:	3307      	adds	r3, #7
 800e458:	1a9b      	subs	r3, r3, r2
 800e45a:	2207      	movs	r2, #7
 800e45c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e460:	e65c      	b.n	800e11c <__strftime.isra.0+0x458>
 800e462:	bf00      	nop
 800e464:	fffff894 	.word	0xfffff894
 800e468:	fffff895 	.word	0xfffff895
 800e46c:	08010731 	.word	0x08010731
 800e470:	0801073f 	.word	0x0801073f
 800e474:	08010754 	.word	0x08010754
 800e478:	080108a4 	.word	0x080108a4
 800e47c:	080109dd 	.word	0x080109dd
 800e480:	08010763 	.word	0x08010763
 800e484:	08010759 	.word	0x08010759
 800e488:	0801075e 	.word	0x0801075e
 800e48c:	4630      	mov	r0, r6
 800e48e:	f7ff fbb7 	bl	800dc00 <iso_year_adjust>
 800e492:	69b2      	ldr	r2, [r6, #24]
 800e494:	b132      	cbz	r2, 800e4a4 <__strftime.isra.0+0x7e0>
 800e496:	3a01      	subs	r2, #1
 800e498:	2800      	cmp	r0, #0
 800e49a:	dc28      	bgt.n	800e4ee <__strftime.isra.0+0x82a>
 800e49c:	69f3      	ldr	r3, [r6, #28]
 800e49e:	d103      	bne.n	800e4a8 <__strftime.isra.0+0x7e4>
 800e4a0:	330a      	adds	r3, #10
 800e4a2:	e7d9      	b.n	800e458 <__strftime.isra.0+0x794>
 800e4a4:	2206      	movs	r2, #6
 800e4a6:	e7f7      	b.n	800e498 <__strftime.isra.0+0x7d4>
 800e4a8:	6971      	ldr	r1, [r6, #20]
 800e4aa:	2900      	cmp	r1, #0
 800e4ac:	eba2 0203 	sub.w	r2, r2, r3
 800e4b0:	f240 736b 	movw	r3, #1899	; 0x76b
 800e4b4:	bfa8      	it	ge
 800e4b6:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800e4ba:	440b      	add	r3, r1
 800e4bc:	0799      	lsls	r1, r3, #30
 800e4be:	d105      	bne.n	800e4cc <__strftime.isra.0+0x808>
 800e4c0:	2064      	movs	r0, #100	; 0x64
 800e4c2:	fb93 f1f0 	sdiv	r1, r3, r0
 800e4c6:	fb00 3111 	mls	r1, r0, r1, r3
 800e4ca:	b971      	cbnz	r1, 800e4ea <__strftime.isra.0+0x826>
 800e4cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800e4d0:	fb93 f0f1 	sdiv	r0, r3, r1
 800e4d4:	fb01 3310 	mls	r3, r1, r0, r3
 800e4d8:	fab3 f383 	clz	r3, r3
 800e4dc:	095b      	lsrs	r3, r3, #5
 800e4de:	1ad3      	subs	r3, r2, r3
 800e4e0:	2b05      	cmp	r3, #5
 800e4e2:	bfb4      	ite	lt
 800e4e4:	2335      	movlt	r3, #53	; 0x35
 800e4e6:	2334      	movge	r3, #52	; 0x34
 800e4e8:	e618      	b.n	800e11c <__strftime.isra.0+0x458>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e7f7      	b.n	800e4de <__strftime.isra.0+0x81a>
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e614      	b.n	800e11c <__strftime.isra.0+0x458>
 800e4f2:	1e6b      	subs	r3, r5, #1
 800e4f4:	429c      	cmp	r4, r3
 800e4f6:	f4bf ac17 	bcs.w	800dd28 <__strftime.isra.0+0x64>
 800e4fa:	69b3      	ldr	r3, [r6, #24]
 800e4fc:	3330      	adds	r3, #48	; 0x30
 800e4fe:	e6d6      	b.n	800e2ae <__strftime.isra.0+0x5ea>
 800e500:	69b2      	ldr	r2, [r6, #24]
 800e502:	b11a      	cbz	r2, 800e50c <__strftime.isra.0+0x848>
 800e504:	3a01      	subs	r2, #1
 800e506:	69f3      	ldr	r3, [r6, #28]
 800e508:	3307      	adds	r3, #7
 800e50a:	e7a5      	b.n	800e458 <__strftime.isra.0+0x794>
 800e50c:	2206      	movs	r2, #6
 800e50e:	e7fa      	b.n	800e506 <__strftime.isra.0+0x842>
 800e510:	6970      	ldr	r0, [r6, #20]
 800e512:	2800      	cmp	r0, #0
 800e514:	db05      	blt.n	800e522 <__strftime.isra.0+0x85e>
 800e516:	2364      	movs	r3, #100	; 0x64
 800e518:	fb90 f2f3 	sdiv	r2, r0, r3
 800e51c:	fb02 0313 	mls	r3, r2, r3, r0
 800e520:	e5fc      	b.n	800e11c <__strftime.isra.0+0x458>
 800e522:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800e526:	f000 fb43 	bl	800ebb0 <abs>
 800e52a:	e7f4      	b.n	800e516 <__strftime.isra.0+0x852>
 800e52c:	6972      	ldr	r2, [r6, #20]
 800e52e:	494c      	ldr	r1, [pc, #304]	; (800e660 <__strftime.isra.0+0x99c>)
 800e530:	428a      	cmp	r2, r1
 800e532:	da05      	bge.n	800e540 <__strftime.isra.0+0x87c>
 800e534:	202d      	movs	r0, #45	; 0x2d
 800e536:	f88d 0018 	strb.w	r0, [sp, #24]
 800e53a:	eba1 0a02 	sub.w	sl, r1, r2
 800e53e:	e657      	b.n	800e1f0 <__strftime.isra.0+0x52c>
 800e540:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800e544:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800e548:	d106      	bne.n	800e558 <__strftime.isra.0+0x894>
 800e54a:	f242 720f 	movw	r2, #9999	; 0x270f
 800e54e:	4592      	cmp	sl, r2
 800e550:	d902      	bls.n	800e558 <__strftime.isra.0+0x894>
 800e552:	f88d b018 	strb.w	fp, [sp, #24]
 800e556:	e64b      	b.n	800e1f0 <__strftime.isra.0+0x52c>
 800e558:	aa06      	add	r2, sp, #24
 800e55a:	2125      	movs	r1, #37	; 0x25
 800e55c:	7011      	strb	r1, [r2, #0]
 800e55e:	f1bb 0f00 	cmp.w	fp, #0
 800e562:	d108      	bne.n	800e576 <__strftime.isra.0+0x8b2>
 800e564:	1c50      	adds	r0, r2, #1
 800e566:	493f      	ldr	r1, [pc, #252]	; (800e664 <__strftime.isra.0+0x9a0>)
 800e568:	f000 fed6 	bl	800f318 <strcpy>
 800e56c:	f8cd a000 	str.w	sl, [sp]
 800e570:	464b      	mov	r3, r9
 800e572:	aa06      	add	r2, sp, #24
 800e574:	e6cb      	b.n	800e30e <__strftime.isra.0+0x64a>
 800e576:	2330      	movs	r3, #48	; 0x30
 800e578:	1c90      	adds	r0, r2, #2
 800e57a:	7053      	strb	r3, [r2, #1]
 800e57c:	e7f3      	b.n	800e566 <__strftime.isra.0+0x8a2>
 800e57e:	6a33      	ldr	r3, [r6, #32]
 800e580:	2b00      	cmp	r3, #0
 800e582:	f6ff aca3 	blt.w	800decc <__strftime.isra.0+0x208>
 800e586:	f000 f981 	bl	800e88c <__tz_lock>
 800e58a:	9b02      	ldr	r3, [sp, #8]
 800e58c:	b90b      	cbnz	r3, 800e592 <__strftime.isra.0+0x8ce>
 800e58e:	f000 f989 	bl	800e8a4 <_tzset_unlocked>
 800e592:	f000 fb55 	bl	800ec40 <__gettzinfo>
 800e596:	6a33      	ldr	r3, [r6, #32]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	bfd4      	ite	le
 800e59c:	2200      	movle	r2, #0
 800e59e:	2201      	movgt	r2, #1
 800e5a0:	2328      	movs	r3, #40	; 0x28
 800e5a2:	fb02 3303 	mla	r3, r2, r3, r3
 800e5a6:	eb07 0a04 	add.w	sl, r7, r4
 800e5aa:	58c3      	ldr	r3, [r0, r3]
 800e5ac:	f1c3 0900 	rsb	r9, r3, #0
 800e5b0:	f000 f972 	bl	800e898 <__tz_unlock>
 800e5b4:	233c      	movs	r3, #60	; 0x3c
 800e5b6:	fb99 f0f3 	sdiv	r0, r9, r3
 800e5ba:	f000 fb45 	bl	800ec48 <labs>
 800e5be:	233c      	movs	r3, #60	; 0x3c
 800e5c0:	eba5 0b04 	sub.w	fp, r5, r4
 800e5c4:	fb90 f2f3 	sdiv	r2, r0, r3
 800e5c8:	fb02 0013 	mls	r0, r2, r3, r0
 800e5cc:	9000      	str	r0, [sp, #0]
 800e5ce:	4a26      	ldr	r2, [pc, #152]	; (800e668 <__strftime.isra.0+0x9a4>)
 800e5d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e5d4:	4659      	mov	r1, fp
 800e5d6:	4650      	mov	r0, sl
 800e5d8:	fb99 f3f3 	sdiv	r3, r9, r3
 800e5dc:	f000 fe3c 	bl	800f258 <sniprintf>
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	f6ff aba1 	blt.w	800dd28 <__strftime.isra.0+0x64>
 800e5e6:	4404      	add	r4, r0
 800e5e8:	42a5      	cmp	r5, r4
 800e5ea:	f67f ab9d 	bls.w	800dd28 <__strftime.isra.0+0x64>
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	9302      	str	r3, [sp, #8]
 800e5f2:	e46b      	b.n	800decc <__strftime.isra.0+0x208>
 800e5f4:	6a33      	ldr	r3, [r6, #32]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f6ff ac68 	blt.w	800decc <__strftime.isra.0+0x208>
 800e5fc:	f000 f946 	bl	800e88c <__tz_lock>
 800e600:	9b02      	ldr	r3, [sp, #8]
 800e602:	b90b      	cbnz	r3, 800e608 <__strftime.isra.0+0x944>
 800e604:	f000 f94e 	bl	800e8a4 <_tzset_unlocked>
 800e608:	6a33      	ldr	r3, [r6, #32]
 800e60a:	4a18      	ldr	r2, [pc, #96]	; (800e66c <__strftime.isra.0+0x9a8>)
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	bfd4      	ite	le
 800e610:	2300      	movle	r3, #0
 800e612:	2301      	movgt	r3, #1
 800e614:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800e618:	4648      	mov	r0, r9
 800e61a:	f7f1 fde1 	bl	80001e0 <strlen>
 800e61e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e622:	4420      	add	r0, r4
 800e624:	1e6b      	subs	r3, r5, #1
 800e626:	42a0      	cmp	r0, r4
 800e628:	d102      	bne.n	800e630 <__strftime.isra.0+0x96c>
 800e62a:	f000 f935 	bl	800e898 <__tz_unlock>
 800e62e:	e7de      	b.n	800e5ee <__strftime.isra.0+0x92a>
 800e630:	42a3      	cmp	r3, r4
 800e632:	d904      	bls.n	800e63e <__strftime.isra.0+0x97a>
 800e634:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800e638:	553a      	strb	r2, [r7, r4]
 800e63a:	3401      	adds	r4, #1
 800e63c:	e7f3      	b.n	800e626 <__strftime.isra.0+0x962>
 800e63e:	f000 f92b 	bl	800e898 <__tz_unlock>
 800e642:	f7ff bb71 	b.w	800dd28 <__strftime.isra.0+0x64>
 800e646:	1e6b      	subs	r3, r5, #1
 800e648:	429c      	cmp	r4, r3
 800e64a:	f4bf ab6d 	bcs.w	800dd28 <__strftime.isra.0+0x64>
 800e64e:	2325      	movs	r3, #37	; 0x25
 800e650:	e62d      	b.n	800e2ae <__strftime.isra.0+0x5ea>
 800e652:	b10d      	cbz	r5, 800e658 <__strftime.isra.0+0x994>
 800e654:	2300      	movs	r3, #0
 800e656:	553b      	strb	r3, [r7, r4]
 800e658:	4620      	mov	r0, r4
 800e65a:	b00f      	add	sp, #60	; 0x3c
 800e65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e660:	fffff894 	.word	0xfffff894
 800e664:	08010750 	.word	0x08010750
 800e668:	0801076d 	.word	0x0801076d
 800e66c:	20000174 	.word	0x20000174

0800e670 <strftime>:
 800e670:	f7ff bb28 	b.w	800dcc4 <__strftime.isra.0>

0800e674 <_strtol_l.constprop.0>:
 800e674:	2b01      	cmp	r3, #1
 800e676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e67a:	d001      	beq.n	800e680 <_strtol_l.constprop.0+0xc>
 800e67c:	2b24      	cmp	r3, #36	; 0x24
 800e67e:	d906      	bls.n	800e68e <_strtol_l.constprop.0+0x1a>
 800e680:	f7ff f968 	bl	800d954 <__errno>
 800e684:	2316      	movs	r3, #22
 800e686:	6003      	str	r3, [r0, #0]
 800e688:	2000      	movs	r0, #0
 800e68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e68e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e774 <_strtol_l.constprop.0+0x100>
 800e692:	460d      	mov	r5, r1
 800e694:	462e      	mov	r6, r5
 800e696:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e69a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e69e:	f017 0708 	ands.w	r7, r7, #8
 800e6a2:	d1f7      	bne.n	800e694 <_strtol_l.constprop.0+0x20>
 800e6a4:	2c2d      	cmp	r4, #45	; 0x2d
 800e6a6:	d132      	bne.n	800e70e <_strtol_l.constprop.0+0x9a>
 800e6a8:	782c      	ldrb	r4, [r5, #0]
 800e6aa:	2701      	movs	r7, #1
 800e6ac:	1cb5      	adds	r5, r6, #2
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d05b      	beq.n	800e76a <_strtol_l.constprop.0+0xf6>
 800e6b2:	2b10      	cmp	r3, #16
 800e6b4:	d109      	bne.n	800e6ca <_strtol_l.constprop.0+0x56>
 800e6b6:	2c30      	cmp	r4, #48	; 0x30
 800e6b8:	d107      	bne.n	800e6ca <_strtol_l.constprop.0+0x56>
 800e6ba:	782c      	ldrb	r4, [r5, #0]
 800e6bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e6c0:	2c58      	cmp	r4, #88	; 0x58
 800e6c2:	d14d      	bne.n	800e760 <_strtol_l.constprop.0+0xec>
 800e6c4:	786c      	ldrb	r4, [r5, #1]
 800e6c6:	2310      	movs	r3, #16
 800e6c8:	3502      	adds	r5, #2
 800e6ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e6ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800e6d2:	f04f 0c00 	mov.w	ip, #0
 800e6d6:	fbb8 f9f3 	udiv	r9, r8, r3
 800e6da:	4666      	mov	r6, ip
 800e6dc:	fb03 8a19 	mls	sl, r3, r9, r8
 800e6e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e6e4:	f1be 0f09 	cmp.w	lr, #9
 800e6e8:	d816      	bhi.n	800e718 <_strtol_l.constprop.0+0xa4>
 800e6ea:	4674      	mov	r4, lr
 800e6ec:	42a3      	cmp	r3, r4
 800e6ee:	dd24      	ble.n	800e73a <_strtol_l.constprop.0+0xc6>
 800e6f0:	f1bc 0f00 	cmp.w	ip, #0
 800e6f4:	db1e      	blt.n	800e734 <_strtol_l.constprop.0+0xc0>
 800e6f6:	45b1      	cmp	r9, r6
 800e6f8:	d31c      	bcc.n	800e734 <_strtol_l.constprop.0+0xc0>
 800e6fa:	d101      	bne.n	800e700 <_strtol_l.constprop.0+0x8c>
 800e6fc:	45a2      	cmp	sl, r4
 800e6fe:	db19      	blt.n	800e734 <_strtol_l.constprop.0+0xc0>
 800e700:	fb06 4603 	mla	r6, r6, r3, r4
 800e704:	f04f 0c01 	mov.w	ip, #1
 800e708:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e70c:	e7e8      	b.n	800e6e0 <_strtol_l.constprop.0+0x6c>
 800e70e:	2c2b      	cmp	r4, #43	; 0x2b
 800e710:	bf04      	itt	eq
 800e712:	782c      	ldrbeq	r4, [r5, #0]
 800e714:	1cb5      	addeq	r5, r6, #2
 800e716:	e7ca      	b.n	800e6ae <_strtol_l.constprop.0+0x3a>
 800e718:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e71c:	f1be 0f19 	cmp.w	lr, #25
 800e720:	d801      	bhi.n	800e726 <_strtol_l.constprop.0+0xb2>
 800e722:	3c37      	subs	r4, #55	; 0x37
 800e724:	e7e2      	b.n	800e6ec <_strtol_l.constprop.0+0x78>
 800e726:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e72a:	f1be 0f19 	cmp.w	lr, #25
 800e72e:	d804      	bhi.n	800e73a <_strtol_l.constprop.0+0xc6>
 800e730:	3c57      	subs	r4, #87	; 0x57
 800e732:	e7db      	b.n	800e6ec <_strtol_l.constprop.0+0x78>
 800e734:	f04f 3cff 	mov.w	ip, #4294967295
 800e738:	e7e6      	b.n	800e708 <_strtol_l.constprop.0+0x94>
 800e73a:	f1bc 0f00 	cmp.w	ip, #0
 800e73e:	da05      	bge.n	800e74c <_strtol_l.constprop.0+0xd8>
 800e740:	2322      	movs	r3, #34	; 0x22
 800e742:	6003      	str	r3, [r0, #0]
 800e744:	4646      	mov	r6, r8
 800e746:	b942      	cbnz	r2, 800e75a <_strtol_l.constprop.0+0xe6>
 800e748:	4630      	mov	r0, r6
 800e74a:	e79e      	b.n	800e68a <_strtol_l.constprop.0+0x16>
 800e74c:	b107      	cbz	r7, 800e750 <_strtol_l.constprop.0+0xdc>
 800e74e:	4276      	negs	r6, r6
 800e750:	2a00      	cmp	r2, #0
 800e752:	d0f9      	beq.n	800e748 <_strtol_l.constprop.0+0xd4>
 800e754:	f1bc 0f00 	cmp.w	ip, #0
 800e758:	d000      	beq.n	800e75c <_strtol_l.constprop.0+0xe8>
 800e75a:	1e69      	subs	r1, r5, #1
 800e75c:	6011      	str	r1, [r2, #0]
 800e75e:	e7f3      	b.n	800e748 <_strtol_l.constprop.0+0xd4>
 800e760:	2430      	movs	r4, #48	; 0x30
 800e762:	2b00      	cmp	r3, #0
 800e764:	d1b1      	bne.n	800e6ca <_strtol_l.constprop.0+0x56>
 800e766:	2308      	movs	r3, #8
 800e768:	e7af      	b.n	800e6ca <_strtol_l.constprop.0+0x56>
 800e76a:	2c30      	cmp	r4, #48	; 0x30
 800e76c:	d0a5      	beq.n	800e6ba <_strtol_l.constprop.0+0x46>
 800e76e:	230a      	movs	r3, #10
 800e770:	e7ab      	b.n	800e6ca <_strtol_l.constprop.0+0x56>
 800e772:	bf00      	nop
 800e774:	080109dd 	.word	0x080109dd

0800e778 <_strtol_r>:
 800e778:	f7ff bf7c 	b.w	800e674 <_strtol_l.constprop.0>

0800e77c <strtol>:
 800e77c:	4613      	mov	r3, r2
 800e77e:	460a      	mov	r2, r1
 800e780:	4601      	mov	r1, r0
 800e782:	4802      	ldr	r0, [pc, #8]	; (800e78c <strtol+0x10>)
 800e784:	6800      	ldr	r0, [r0, #0]
 800e786:	f7ff bf75 	b.w	800e674 <_strtol_l.constprop.0>
 800e78a:	bf00      	nop
 800e78c:	20000110 	.word	0x20000110

0800e790 <_strtoul_l.constprop.0>:
 800e790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e794:	4f36      	ldr	r7, [pc, #216]	; (800e870 <_strtoul_l.constprop.0+0xe0>)
 800e796:	4686      	mov	lr, r0
 800e798:	460d      	mov	r5, r1
 800e79a:	4628      	mov	r0, r5
 800e79c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7a0:	5de6      	ldrb	r6, [r4, r7]
 800e7a2:	f016 0608 	ands.w	r6, r6, #8
 800e7a6:	d1f8      	bne.n	800e79a <_strtoul_l.constprop.0+0xa>
 800e7a8:	2c2d      	cmp	r4, #45	; 0x2d
 800e7aa:	d12f      	bne.n	800e80c <_strtoul_l.constprop.0+0x7c>
 800e7ac:	782c      	ldrb	r4, [r5, #0]
 800e7ae:	2601      	movs	r6, #1
 800e7b0:	1c85      	adds	r5, r0, #2
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d057      	beq.n	800e866 <_strtoul_l.constprop.0+0xd6>
 800e7b6:	2b10      	cmp	r3, #16
 800e7b8:	d109      	bne.n	800e7ce <_strtoul_l.constprop.0+0x3e>
 800e7ba:	2c30      	cmp	r4, #48	; 0x30
 800e7bc:	d107      	bne.n	800e7ce <_strtoul_l.constprop.0+0x3e>
 800e7be:	7828      	ldrb	r0, [r5, #0]
 800e7c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e7c4:	2858      	cmp	r0, #88	; 0x58
 800e7c6:	d149      	bne.n	800e85c <_strtoul_l.constprop.0+0xcc>
 800e7c8:	786c      	ldrb	r4, [r5, #1]
 800e7ca:	2310      	movs	r3, #16
 800e7cc:	3502      	adds	r5, #2
 800e7ce:	f04f 38ff 	mov.w	r8, #4294967295
 800e7d2:	2700      	movs	r7, #0
 800e7d4:	fbb8 f8f3 	udiv	r8, r8, r3
 800e7d8:	fb03 f908 	mul.w	r9, r3, r8
 800e7dc:	ea6f 0909 	mvn.w	r9, r9
 800e7e0:	4638      	mov	r0, r7
 800e7e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e7e6:	f1bc 0f09 	cmp.w	ip, #9
 800e7ea:	d814      	bhi.n	800e816 <_strtoul_l.constprop.0+0x86>
 800e7ec:	4664      	mov	r4, ip
 800e7ee:	42a3      	cmp	r3, r4
 800e7f0:	dd22      	ble.n	800e838 <_strtoul_l.constprop.0+0xa8>
 800e7f2:	2f00      	cmp	r7, #0
 800e7f4:	db1d      	blt.n	800e832 <_strtoul_l.constprop.0+0xa2>
 800e7f6:	4580      	cmp	r8, r0
 800e7f8:	d31b      	bcc.n	800e832 <_strtoul_l.constprop.0+0xa2>
 800e7fa:	d101      	bne.n	800e800 <_strtoul_l.constprop.0+0x70>
 800e7fc:	45a1      	cmp	r9, r4
 800e7fe:	db18      	blt.n	800e832 <_strtoul_l.constprop.0+0xa2>
 800e800:	fb00 4003 	mla	r0, r0, r3, r4
 800e804:	2701      	movs	r7, #1
 800e806:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e80a:	e7ea      	b.n	800e7e2 <_strtoul_l.constprop.0+0x52>
 800e80c:	2c2b      	cmp	r4, #43	; 0x2b
 800e80e:	bf04      	itt	eq
 800e810:	782c      	ldrbeq	r4, [r5, #0]
 800e812:	1c85      	addeq	r5, r0, #2
 800e814:	e7cd      	b.n	800e7b2 <_strtoul_l.constprop.0+0x22>
 800e816:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e81a:	f1bc 0f19 	cmp.w	ip, #25
 800e81e:	d801      	bhi.n	800e824 <_strtoul_l.constprop.0+0x94>
 800e820:	3c37      	subs	r4, #55	; 0x37
 800e822:	e7e4      	b.n	800e7ee <_strtoul_l.constprop.0+0x5e>
 800e824:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e828:	f1bc 0f19 	cmp.w	ip, #25
 800e82c:	d804      	bhi.n	800e838 <_strtoul_l.constprop.0+0xa8>
 800e82e:	3c57      	subs	r4, #87	; 0x57
 800e830:	e7dd      	b.n	800e7ee <_strtoul_l.constprop.0+0x5e>
 800e832:	f04f 37ff 	mov.w	r7, #4294967295
 800e836:	e7e6      	b.n	800e806 <_strtoul_l.constprop.0+0x76>
 800e838:	2f00      	cmp	r7, #0
 800e83a:	da07      	bge.n	800e84c <_strtoul_l.constprop.0+0xbc>
 800e83c:	2322      	movs	r3, #34	; 0x22
 800e83e:	f8ce 3000 	str.w	r3, [lr]
 800e842:	f04f 30ff 	mov.w	r0, #4294967295
 800e846:	b932      	cbnz	r2, 800e856 <_strtoul_l.constprop.0+0xc6>
 800e848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e84c:	b106      	cbz	r6, 800e850 <_strtoul_l.constprop.0+0xc0>
 800e84e:	4240      	negs	r0, r0
 800e850:	2a00      	cmp	r2, #0
 800e852:	d0f9      	beq.n	800e848 <_strtoul_l.constprop.0+0xb8>
 800e854:	b107      	cbz	r7, 800e858 <_strtoul_l.constprop.0+0xc8>
 800e856:	1e69      	subs	r1, r5, #1
 800e858:	6011      	str	r1, [r2, #0]
 800e85a:	e7f5      	b.n	800e848 <_strtoul_l.constprop.0+0xb8>
 800e85c:	2430      	movs	r4, #48	; 0x30
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d1b5      	bne.n	800e7ce <_strtoul_l.constprop.0+0x3e>
 800e862:	2308      	movs	r3, #8
 800e864:	e7b3      	b.n	800e7ce <_strtoul_l.constprop.0+0x3e>
 800e866:	2c30      	cmp	r4, #48	; 0x30
 800e868:	d0a9      	beq.n	800e7be <_strtoul_l.constprop.0+0x2e>
 800e86a:	230a      	movs	r3, #10
 800e86c:	e7af      	b.n	800e7ce <_strtoul_l.constprop.0+0x3e>
 800e86e:	bf00      	nop
 800e870:	080109dd 	.word	0x080109dd

0800e874 <_strtoul_r>:
 800e874:	f7ff bf8c 	b.w	800e790 <_strtoul_l.constprop.0>

0800e878 <strtoul>:
 800e878:	4613      	mov	r3, r2
 800e87a:	460a      	mov	r2, r1
 800e87c:	4601      	mov	r1, r0
 800e87e:	4802      	ldr	r0, [pc, #8]	; (800e888 <strtoul+0x10>)
 800e880:	6800      	ldr	r0, [r0, #0]
 800e882:	f7ff bf85 	b.w	800e790 <_strtoul_l.constprop.0>
 800e886:	bf00      	nop
 800e888:	20000110 	.word	0x20000110

0800e88c <__tz_lock>:
 800e88c:	4801      	ldr	r0, [pc, #4]	; (800e894 <__tz_lock+0x8>)
 800e88e:	f7ff b88b 	b.w	800d9a8 <__retarget_lock_acquire>
 800e892:	bf00      	nop
 800e894:	20000b16 	.word	0x20000b16

0800e898 <__tz_unlock>:
 800e898:	4801      	ldr	r0, [pc, #4]	; (800e8a0 <__tz_unlock+0x8>)
 800e89a:	f7ff b887 	b.w	800d9ac <__retarget_lock_release>
 800e89e:	bf00      	nop
 800e8a0:	20000b16 	.word	0x20000b16

0800e8a4 <_tzset_unlocked>:
 800e8a4:	4b01      	ldr	r3, [pc, #4]	; (800e8ac <_tzset_unlocked+0x8>)
 800e8a6:	6818      	ldr	r0, [r3, #0]
 800e8a8:	f000 b802 	b.w	800e8b0 <_tzset_unlocked_r>
 800e8ac:	20000110 	.word	0x20000110

0800e8b0 <_tzset_unlocked_r>:
 800e8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b4:	b08d      	sub	sp, #52	; 0x34
 800e8b6:	4607      	mov	r7, r0
 800e8b8:	f000 f9c2 	bl	800ec40 <__gettzinfo>
 800e8bc:	49b0      	ldr	r1, [pc, #704]	; (800eb80 <_tzset_unlocked_r+0x2d0>)
 800e8be:	4eb1      	ldr	r6, [pc, #708]	; (800eb84 <_tzset_unlocked_r+0x2d4>)
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	4638      	mov	r0, r7
 800e8c4:	f000 f9b4 	bl	800ec30 <_getenv_r>
 800e8c8:	4604      	mov	r4, r0
 800e8ca:	b970      	cbnz	r0, 800e8ea <_tzset_unlocked_r+0x3a>
 800e8cc:	4bae      	ldr	r3, [pc, #696]	; (800eb88 <_tzset_unlocked_r+0x2d8>)
 800e8ce:	4aaf      	ldr	r2, [pc, #700]	; (800eb8c <_tzset_unlocked_r+0x2dc>)
 800e8d0:	6018      	str	r0, [r3, #0]
 800e8d2:	4baf      	ldr	r3, [pc, #700]	; (800eb90 <_tzset_unlocked_r+0x2e0>)
 800e8d4:	6018      	str	r0, [r3, #0]
 800e8d6:	4baf      	ldr	r3, [pc, #700]	; (800eb94 <_tzset_unlocked_r+0x2e4>)
 800e8d8:	6830      	ldr	r0, [r6, #0]
 800e8da:	e9c3 2200 	strd	r2, r2, [r3]
 800e8de:	f000 f9b7 	bl	800ec50 <free>
 800e8e2:	6034      	str	r4, [r6, #0]
 800e8e4:	b00d      	add	sp, #52	; 0x34
 800e8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ea:	6831      	ldr	r1, [r6, #0]
 800e8ec:	2900      	cmp	r1, #0
 800e8ee:	d162      	bne.n	800e9b6 <_tzset_unlocked_r+0x106>
 800e8f0:	6830      	ldr	r0, [r6, #0]
 800e8f2:	f000 f9ad 	bl	800ec50 <free>
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	f7f1 fc72 	bl	80001e0 <strlen>
 800e8fc:	1c41      	adds	r1, r0, #1
 800e8fe:	4638      	mov	r0, r7
 800e900:	f7ff f8d8 	bl	800dab4 <_malloc_r>
 800e904:	6030      	str	r0, [r6, #0]
 800e906:	2800      	cmp	r0, #0
 800e908:	d15a      	bne.n	800e9c0 <_tzset_unlocked_r+0x110>
 800e90a:	7823      	ldrb	r3, [r4, #0]
 800e90c:	4aa2      	ldr	r2, [pc, #648]	; (800eb98 <_tzset_unlocked_r+0x2e8>)
 800e90e:	49a3      	ldr	r1, [pc, #652]	; (800eb9c <_tzset_unlocked_r+0x2ec>)
 800e910:	2b3a      	cmp	r3, #58	; 0x3a
 800e912:	bf08      	it	eq
 800e914:	3401      	addeq	r4, #1
 800e916:	ae0a      	add	r6, sp, #40	; 0x28
 800e918:	4633      	mov	r3, r6
 800e91a:	4620      	mov	r0, r4
 800e91c:	f000 fcd0 	bl	800f2c0 <siscanf>
 800e920:	2800      	cmp	r0, #0
 800e922:	dddf      	ble.n	800e8e4 <_tzset_unlocked_r+0x34>
 800e924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e926:	18e7      	adds	r7, r4, r3
 800e928:	5ce3      	ldrb	r3, [r4, r3]
 800e92a:	2b2d      	cmp	r3, #45	; 0x2d
 800e92c:	d14c      	bne.n	800e9c8 <_tzset_unlocked_r+0x118>
 800e92e:	3701      	adds	r7, #1
 800e930:	f04f 38ff 	mov.w	r8, #4294967295
 800e934:	f10d 0a20 	add.w	sl, sp, #32
 800e938:	f10d 0b1e 	add.w	fp, sp, #30
 800e93c:	2400      	movs	r4, #0
 800e93e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800e942:	4997      	ldr	r1, [pc, #604]	; (800eba0 <_tzset_unlocked_r+0x2f0>)
 800e944:	9603      	str	r6, [sp, #12]
 800e946:	f8cd b000 	str.w	fp, [sp]
 800e94a:	4633      	mov	r3, r6
 800e94c:	aa07      	add	r2, sp, #28
 800e94e:	4638      	mov	r0, r7
 800e950:	f8ad 401e 	strh.w	r4, [sp, #30]
 800e954:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e958:	f000 fcb2 	bl	800f2c0 <siscanf>
 800e95c:	42a0      	cmp	r0, r4
 800e95e:	ddc1      	ble.n	800e8e4 <_tzset_unlocked_r+0x34>
 800e960:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e964:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e968:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800ebac <_tzset_unlocked_r+0x2fc>
 800e96c:	213c      	movs	r1, #60	; 0x3c
 800e96e:	fb01 3302 	mla	r3, r1, r2, r3
 800e972:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e976:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e97a:	fb01 3302 	mla	r3, r1, r2, r3
 800e97e:	fb08 f303 	mul.w	r3, r8, r3
 800e982:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800eb94 <_tzset_unlocked_r+0x2e4>
 800e986:	62ab      	str	r3, [r5, #40]	; 0x28
 800e988:	4b83      	ldr	r3, [pc, #524]	; (800eb98 <_tzset_unlocked_r+0x2e8>)
 800e98a:	f8c8 3000 	str.w	r3, [r8]
 800e98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e990:	4982      	ldr	r1, [pc, #520]	; (800eb9c <_tzset_unlocked_r+0x2ec>)
 800e992:	441f      	add	r7, r3
 800e994:	464a      	mov	r2, r9
 800e996:	4633      	mov	r3, r6
 800e998:	4638      	mov	r0, r7
 800e99a:	f000 fc91 	bl	800f2c0 <siscanf>
 800e99e:	42a0      	cmp	r0, r4
 800e9a0:	dc18      	bgt.n	800e9d4 <_tzset_unlocked_r+0x124>
 800e9a2:	f8d8 3000 	ldr.w	r3, [r8]
 800e9a6:	f8c8 3004 	str.w	r3, [r8, #4]
 800e9aa:	4b77      	ldr	r3, [pc, #476]	; (800eb88 <_tzset_unlocked_r+0x2d8>)
 800e9ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e9ae:	601a      	str	r2, [r3, #0]
 800e9b0:	4b77      	ldr	r3, [pc, #476]	; (800eb90 <_tzset_unlocked_r+0x2e0>)
 800e9b2:	601c      	str	r4, [r3, #0]
 800e9b4:	e796      	b.n	800e8e4 <_tzset_unlocked_r+0x34>
 800e9b6:	f7f1 fc1b 	bl	80001f0 <strcmp>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	d198      	bne.n	800e8f0 <_tzset_unlocked_r+0x40>
 800e9be:	e791      	b.n	800e8e4 <_tzset_unlocked_r+0x34>
 800e9c0:	4621      	mov	r1, r4
 800e9c2:	f000 fca9 	bl	800f318 <strcpy>
 800e9c6:	e7a0      	b.n	800e90a <_tzset_unlocked_r+0x5a>
 800e9c8:	2b2b      	cmp	r3, #43	; 0x2b
 800e9ca:	bf08      	it	eq
 800e9cc:	3701      	addeq	r7, #1
 800e9ce:	f04f 0801 	mov.w	r8, #1
 800e9d2:	e7af      	b.n	800e934 <_tzset_unlocked_r+0x84>
 800e9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9d6:	f8c8 9004 	str.w	r9, [r8, #4]
 800e9da:	18fc      	adds	r4, r7, r3
 800e9dc:	5cfb      	ldrb	r3, [r7, r3]
 800e9de:	2b2d      	cmp	r3, #45	; 0x2d
 800e9e0:	f040 808b 	bne.w	800eafa <_tzset_unlocked_r+0x24a>
 800e9e4:	3401      	adds	r4, #1
 800e9e6:	f04f 37ff 	mov.w	r7, #4294967295
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e9f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e9f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e9f8:	930a      	str	r3, [sp, #40]	; 0x28
 800e9fa:	e9cd a602 	strd	sl, r6, [sp, #8]
 800e9fe:	e9cd b600 	strd	fp, r6, [sp]
 800ea02:	4967      	ldr	r1, [pc, #412]	; (800eba0 <_tzset_unlocked_r+0x2f0>)
 800ea04:	4633      	mov	r3, r6
 800ea06:	aa07      	add	r2, sp, #28
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f000 fc59 	bl	800f2c0 <siscanf>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	dc78      	bgt.n	800eb04 <_tzset_unlocked_r+0x254>
 800ea12:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ea14:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800ea18:	652b      	str	r3, [r5, #80]	; 0x50
 800ea1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea1c:	462f      	mov	r7, r5
 800ea1e:	441c      	add	r4, r3
 800ea20:	f04f 0900 	mov.w	r9, #0
 800ea24:	7823      	ldrb	r3, [r4, #0]
 800ea26:	2b2c      	cmp	r3, #44	; 0x2c
 800ea28:	bf08      	it	eq
 800ea2a:	3401      	addeq	r4, #1
 800ea2c:	f894 8000 	ldrb.w	r8, [r4]
 800ea30:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800ea34:	d178      	bne.n	800eb28 <_tzset_unlocked_r+0x278>
 800ea36:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800ea3a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800ea3e:	ab09      	add	r3, sp, #36	; 0x24
 800ea40:	9300      	str	r3, [sp, #0]
 800ea42:	4958      	ldr	r1, [pc, #352]	; (800eba4 <_tzset_unlocked_r+0x2f4>)
 800ea44:	9603      	str	r6, [sp, #12]
 800ea46:	4633      	mov	r3, r6
 800ea48:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	f000 fc37 	bl	800f2c0 <siscanf>
 800ea52:	2803      	cmp	r0, #3
 800ea54:	f47f af46 	bne.w	800e8e4 <_tzset_unlocked_r+0x34>
 800ea58:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ea5c:	1e4b      	subs	r3, r1, #1
 800ea5e:	2b0b      	cmp	r3, #11
 800ea60:	f63f af40 	bhi.w	800e8e4 <_tzset_unlocked_r+0x34>
 800ea64:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ea68:	1e53      	subs	r3, r2, #1
 800ea6a:	2b04      	cmp	r3, #4
 800ea6c:	f63f af3a 	bhi.w	800e8e4 <_tzset_unlocked_r+0x34>
 800ea70:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ea74:	2b06      	cmp	r3, #6
 800ea76:	f63f af35 	bhi.w	800e8e4 <_tzset_unlocked_r+0x34>
 800ea7a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ea7e:	f887 8008 	strb.w	r8, [r7, #8]
 800ea82:	617b      	str	r3, [r7, #20]
 800ea84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea86:	eb04 0803 	add.w	r8, r4, r3
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ea90:	2300      	movs	r3, #0
 800ea92:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ea96:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ea9a:	930a      	str	r3, [sp, #40]	; 0x28
 800ea9c:	f898 3000 	ldrb.w	r3, [r8]
 800eaa0:	2b2f      	cmp	r3, #47	; 0x2f
 800eaa2:	d109      	bne.n	800eab8 <_tzset_unlocked_r+0x208>
 800eaa4:	e9cd a602 	strd	sl, r6, [sp, #8]
 800eaa8:	e9cd b600 	strd	fp, r6, [sp]
 800eaac:	493e      	ldr	r1, [pc, #248]	; (800eba8 <_tzset_unlocked_r+0x2f8>)
 800eaae:	4633      	mov	r3, r6
 800eab0:	aa07      	add	r2, sp, #28
 800eab2:	4640      	mov	r0, r8
 800eab4:	f000 fc04 	bl	800f2c0 <siscanf>
 800eab8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800eabc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800eac0:	213c      	movs	r1, #60	; 0x3c
 800eac2:	fb01 3302 	mla	r3, r1, r2, r3
 800eac6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800eaca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800eace:	fb01 3302 	mla	r3, r1, r2, r3
 800ead2:	61bb      	str	r3, [r7, #24]
 800ead4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ead6:	3728      	adds	r7, #40	; 0x28
 800ead8:	4444      	add	r4, r8
 800eada:	f1b9 0f00 	cmp.w	r9, #0
 800eade:	d020      	beq.n	800eb22 <_tzset_unlocked_r+0x272>
 800eae0:	6868      	ldr	r0, [r5, #4]
 800eae2:	f000 fc35 	bl	800f350 <__tzcalc_limits>
 800eae6:	4b28      	ldr	r3, [pc, #160]	; (800eb88 <_tzset_unlocked_r+0x2d8>)
 800eae8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800eaea:	601a      	str	r2, [r3, #0]
 800eaec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800eaee:	1a9b      	subs	r3, r3, r2
 800eaf0:	4a27      	ldr	r2, [pc, #156]	; (800eb90 <_tzset_unlocked_r+0x2e0>)
 800eaf2:	bf18      	it	ne
 800eaf4:	2301      	movne	r3, #1
 800eaf6:	6013      	str	r3, [r2, #0]
 800eaf8:	e6f4      	b.n	800e8e4 <_tzset_unlocked_r+0x34>
 800eafa:	2b2b      	cmp	r3, #43	; 0x2b
 800eafc:	bf08      	it	eq
 800eafe:	3401      	addeq	r4, #1
 800eb00:	2701      	movs	r7, #1
 800eb02:	e772      	b.n	800e9ea <_tzset_unlocked_r+0x13a>
 800eb04:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800eb08:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800eb0c:	213c      	movs	r1, #60	; 0x3c
 800eb0e:	fb01 3302 	mla	r3, r1, r2, r3
 800eb12:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800eb16:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800eb1a:	fb01 3302 	mla	r3, r1, r2, r3
 800eb1e:	437b      	muls	r3, r7
 800eb20:	e77a      	b.n	800ea18 <_tzset_unlocked_r+0x168>
 800eb22:	f04f 0901 	mov.w	r9, #1
 800eb26:	e77d      	b.n	800ea24 <_tzset_unlocked_r+0x174>
 800eb28:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800eb2c:	bf06      	itte	eq
 800eb2e:	3401      	addeq	r4, #1
 800eb30:	4643      	moveq	r3, r8
 800eb32:	2344      	movne	r3, #68	; 0x44
 800eb34:	220a      	movs	r2, #10
 800eb36:	a90b      	add	r1, sp, #44	; 0x2c
 800eb38:	4620      	mov	r0, r4
 800eb3a:	9305      	str	r3, [sp, #20]
 800eb3c:	f7ff fe9c 	bl	800e878 <strtoul>
 800eb40:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800eb44:	9b05      	ldr	r3, [sp, #20]
 800eb46:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800eb4a:	45a0      	cmp	r8, r4
 800eb4c:	d114      	bne.n	800eb78 <_tzset_unlocked_r+0x2c8>
 800eb4e:	234d      	movs	r3, #77	; 0x4d
 800eb50:	f1b9 0f00 	cmp.w	r9, #0
 800eb54:	d107      	bne.n	800eb66 <_tzset_unlocked_r+0x2b6>
 800eb56:	722b      	strb	r3, [r5, #8]
 800eb58:	2103      	movs	r1, #3
 800eb5a:	2302      	movs	r3, #2
 800eb5c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800eb60:	f8c5 9014 	str.w	r9, [r5, #20]
 800eb64:	e791      	b.n	800ea8a <_tzset_unlocked_r+0x1da>
 800eb66:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800eb6a:	220b      	movs	r2, #11
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800eb72:	2300      	movs	r3, #0
 800eb74:	63eb      	str	r3, [r5, #60]	; 0x3c
 800eb76:	e788      	b.n	800ea8a <_tzset_unlocked_r+0x1da>
 800eb78:	b280      	uxth	r0, r0
 800eb7a:	723b      	strb	r3, [r7, #8]
 800eb7c:	6178      	str	r0, [r7, #20]
 800eb7e:	e784      	b.n	800ea8a <_tzset_unlocked_r+0x1da>
 800eb80:	080109a0 	.word	0x080109a0
 800eb84:	20000b3c 	.word	0x20000b3c
 800eb88:	20000b44 	.word	0x20000b44
 800eb8c:	080109a3 	.word	0x080109a3
 800eb90:	20000b40 	.word	0x20000b40
 800eb94:	20000174 	.word	0x20000174
 800eb98:	20000b2f 	.word	0x20000b2f
 800eb9c:	080109a7 	.word	0x080109a7
 800eba0:	080109ca 	.word	0x080109ca
 800eba4:	080109b6 	.word	0x080109b6
 800eba8:	080109c9 	.word	0x080109c9
 800ebac:	20000b24 	.word	0x20000b24

0800ebb0 <abs>:
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	bfb8      	it	lt
 800ebb4:	4240      	neglt	r0, r0
 800ebb6:	4770      	bx	lr

0800ebb8 <_findenv_r>:
 800ebb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebbc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800ec2c <_findenv_r+0x74>
 800ebc0:	4607      	mov	r7, r0
 800ebc2:	4689      	mov	r9, r1
 800ebc4:	4616      	mov	r6, r2
 800ebc6:	f000 fc6d 	bl	800f4a4 <__env_lock>
 800ebca:	f8da 4000 	ldr.w	r4, [sl]
 800ebce:	b134      	cbz	r4, 800ebde <_findenv_r+0x26>
 800ebd0:	464b      	mov	r3, r9
 800ebd2:	4698      	mov	r8, r3
 800ebd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebd8:	b13a      	cbz	r2, 800ebea <_findenv_r+0x32>
 800ebda:	2a3d      	cmp	r2, #61	; 0x3d
 800ebdc:	d1f9      	bne.n	800ebd2 <_findenv_r+0x1a>
 800ebde:	4638      	mov	r0, r7
 800ebe0:	f000 fc66 	bl	800f4b0 <__env_unlock>
 800ebe4:	2000      	movs	r0, #0
 800ebe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebea:	eba8 0809 	sub.w	r8, r8, r9
 800ebee:	46a3      	mov	fp, r4
 800ebf0:	f854 0b04 	ldr.w	r0, [r4], #4
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	d0f2      	beq.n	800ebde <_findenv_r+0x26>
 800ebf8:	4642      	mov	r2, r8
 800ebfa:	4649      	mov	r1, r9
 800ebfc:	f000 fb94 	bl	800f328 <strncmp>
 800ec00:	2800      	cmp	r0, #0
 800ec02:	d1f4      	bne.n	800ebee <_findenv_r+0x36>
 800ec04:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ec08:	eb03 0508 	add.w	r5, r3, r8
 800ec0c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800ec10:	2b3d      	cmp	r3, #61	; 0x3d
 800ec12:	d1ec      	bne.n	800ebee <_findenv_r+0x36>
 800ec14:	f8da 3000 	ldr.w	r3, [sl]
 800ec18:	ebab 0303 	sub.w	r3, fp, r3
 800ec1c:	109b      	asrs	r3, r3, #2
 800ec1e:	4638      	mov	r0, r7
 800ec20:	6033      	str	r3, [r6, #0]
 800ec22:	f000 fc45 	bl	800f4b0 <__env_unlock>
 800ec26:	1c68      	adds	r0, r5, #1
 800ec28:	e7dd      	b.n	800ebe6 <_findenv_r+0x2e>
 800ec2a:	bf00      	nop
 800ec2c:	200000ec 	.word	0x200000ec

0800ec30 <_getenv_r>:
 800ec30:	b507      	push	{r0, r1, r2, lr}
 800ec32:	aa01      	add	r2, sp, #4
 800ec34:	f7ff ffc0 	bl	800ebb8 <_findenv_r>
 800ec38:	b003      	add	sp, #12
 800ec3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ec40 <__gettzinfo>:
 800ec40:	4800      	ldr	r0, [pc, #0]	; (800ec44 <__gettzinfo+0x4>)
 800ec42:	4770      	bx	lr
 800ec44:	20000180 	.word	0x20000180

0800ec48 <labs>:
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	bfb8      	it	lt
 800ec4c:	4240      	neglt	r0, r0
 800ec4e:	4770      	bx	lr

0800ec50 <free>:
 800ec50:	4b02      	ldr	r3, [pc, #8]	; (800ec5c <free+0xc>)
 800ec52:	4601      	mov	r1, r0
 800ec54:	6818      	ldr	r0, [r3, #0]
 800ec56:	f7fe bec1 	b.w	800d9dc <_free_r>
 800ec5a:	bf00      	nop
 800ec5c:	20000110 	.word	0x20000110

0800ec60 <__malloc_lock>:
 800ec60:	4801      	ldr	r0, [pc, #4]	; (800ec68 <__malloc_lock+0x8>)
 800ec62:	f7fe bea2 	b.w	800d9aa <__retarget_lock_acquire_recursive>
 800ec66:	bf00      	nop
 800ec68:	20000b15 	.word	0x20000b15

0800ec6c <__malloc_unlock>:
 800ec6c:	4801      	ldr	r0, [pc, #4]	; (800ec74 <__malloc_unlock+0x8>)
 800ec6e:	f7fe be9e 	b.w	800d9ae <__retarget_lock_release_recursive>
 800ec72:	bf00      	nop
 800ec74:	20000b15 	.word	0x20000b15

0800ec78 <__ssputs_r>:
 800ec78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec7c:	688e      	ldr	r6, [r1, #8]
 800ec7e:	429e      	cmp	r6, r3
 800ec80:	4682      	mov	sl, r0
 800ec82:	460c      	mov	r4, r1
 800ec84:	4690      	mov	r8, r2
 800ec86:	461f      	mov	r7, r3
 800ec88:	d838      	bhi.n	800ecfc <__ssputs_r+0x84>
 800ec8a:	898a      	ldrh	r2, [r1, #12]
 800ec8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec90:	d032      	beq.n	800ecf8 <__ssputs_r+0x80>
 800ec92:	6825      	ldr	r5, [r4, #0]
 800ec94:	6909      	ldr	r1, [r1, #16]
 800ec96:	eba5 0901 	sub.w	r9, r5, r1
 800ec9a:	6965      	ldr	r5, [r4, #20]
 800ec9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eca4:	3301      	adds	r3, #1
 800eca6:	444b      	add	r3, r9
 800eca8:	106d      	asrs	r5, r5, #1
 800ecaa:	429d      	cmp	r5, r3
 800ecac:	bf38      	it	cc
 800ecae:	461d      	movcc	r5, r3
 800ecb0:	0553      	lsls	r3, r2, #21
 800ecb2:	d531      	bpl.n	800ed18 <__ssputs_r+0xa0>
 800ecb4:	4629      	mov	r1, r5
 800ecb6:	f7fe fefd 	bl	800dab4 <_malloc_r>
 800ecba:	4606      	mov	r6, r0
 800ecbc:	b950      	cbnz	r0, 800ecd4 <__ssputs_r+0x5c>
 800ecbe:	230c      	movs	r3, #12
 800ecc0:	f8ca 3000 	str.w	r3, [sl]
 800ecc4:	89a3      	ldrh	r3, [r4, #12]
 800ecc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecca:	81a3      	strh	r3, [r4, #12]
 800eccc:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecd4:	6921      	ldr	r1, [r4, #16]
 800ecd6:	464a      	mov	r2, r9
 800ecd8:	f7fe fe6a 	bl	800d9b0 <memcpy>
 800ecdc:	89a3      	ldrh	r3, [r4, #12]
 800ecde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ece2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ece6:	81a3      	strh	r3, [r4, #12]
 800ece8:	6126      	str	r6, [r4, #16]
 800ecea:	6165      	str	r5, [r4, #20]
 800ecec:	444e      	add	r6, r9
 800ecee:	eba5 0509 	sub.w	r5, r5, r9
 800ecf2:	6026      	str	r6, [r4, #0]
 800ecf4:	60a5      	str	r5, [r4, #8]
 800ecf6:	463e      	mov	r6, r7
 800ecf8:	42be      	cmp	r6, r7
 800ecfa:	d900      	bls.n	800ecfe <__ssputs_r+0x86>
 800ecfc:	463e      	mov	r6, r7
 800ecfe:	6820      	ldr	r0, [r4, #0]
 800ed00:	4632      	mov	r2, r6
 800ed02:	4641      	mov	r1, r8
 800ed04:	f000 fbda 	bl	800f4bc <memmove>
 800ed08:	68a3      	ldr	r3, [r4, #8]
 800ed0a:	1b9b      	subs	r3, r3, r6
 800ed0c:	60a3      	str	r3, [r4, #8]
 800ed0e:	6823      	ldr	r3, [r4, #0]
 800ed10:	4433      	add	r3, r6
 800ed12:	6023      	str	r3, [r4, #0]
 800ed14:	2000      	movs	r0, #0
 800ed16:	e7db      	b.n	800ecd0 <__ssputs_r+0x58>
 800ed18:	462a      	mov	r2, r5
 800ed1a:	f000 fbe9 	bl	800f4f0 <_realloc_r>
 800ed1e:	4606      	mov	r6, r0
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d1e1      	bne.n	800ece8 <__ssputs_r+0x70>
 800ed24:	6921      	ldr	r1, [r4, #16]
 800ed26:	4650      	mov	r0, sl
 800ed28:	f7fe fe58 	bl	800d9dc <_free_r>
 800ed2c:	e7c7      	b.n	800ecbe <__ssputs_r+0x46>
	...

0800ed30 <_svfiprintf_r>:
 800ed30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed34:	4698      	mov	r8, r3
 800ed36:	898b      	ldrh	r3, [r1, #12]
 800ed38:	061b      	lsls	r3, r3, #24
 800ed3a:	b09d      	sub	sp, #116	; 0x74
 800ed3c:	4607      	mov	r7, r0
 800ed3e:	460d      	mov	r5, r1
 800ed40:	4614      	mov	r4, r2
 800ed42:	d50e      	bpl.n	800ed62 <_svfiprintf_r+0x32>
 800ed44:	690b      	ldr	r3, [r1, #16]
 800ed46:	b963      	cbnz	r3, 800ed62 <_svfiprintf_r+0x32>
 800ed48:	2140      	movs	r1, #64	; 0x40
 800ed4a:	f7fe feb3 	bl	800dab4 <_malloc_r>
 800ed4e:	6028      	str	r0, [r5, #0]
 800ed50:	6128      	str	r0, [r5, #16]
 800ed52:	b920      	cbnz	r0, 800ed5e <_svfiprintf_r+0x2e>
 800ed54:	230c      	movs	r3, #12
 800ed56:	603b      	str	r3, [r7, #0]
 800ed58:	f04f 30ff 	mov.w	r0, #4294967295
 800ed5c:	e0d1      	b.n	800ef02 <_svfiprintf_r+0x1d2>
 800ed5e:	2340      	movs	r3, #64	; 0x40
 800ed60:	616b      	str	r3, [r5, #20]
 800ed62:	2300      	movs	r3, #0
 800ed64:	9309      	str	r3, [sp, #36]	; 0x24
 800ed66:	2320      	movs	r3, #32
 800ed68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed70:	2330      	movs	r3, #48	; 0x30
 800ed72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ef1c <_svfiprintf_r+0x1ec>
 800ed76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed7a:	f04f 0901 	mov.w	r9, #1
 800ed7e:	4623      	mov	r3, r4
 800ed80:	469a      	mov	sl, r3
 800ed82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed86:	b10a      	cbz	r2, 800ed8c <_svfiprintf_r+0x5c>
 800ed88:	2a25      	cmp	r2, #37	; 0x25
 800ed8a:	d1f9      	bne.n	800ed80 <_svfiprintf_r+0x50>
 800ed8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ed90:	d00b      	beq.n	800edaa <_svfiprintf_r+0x7a>
 800ed92:	465b      	mov	r3, fp
 800ed94:	4622      	mov	r2, r4
 800ed96:	4629      	mov	r1, r5
 800ed98:	4638      	mov	r0, r7
 800ed9a:	f7ff ff6d 	bl	800ec78 <__ssputs_r>
 800ed9e:	3001      	adds	r0, #1
 800eda0:	f000 80aa 	beq.w	800eef8 <_svfiprintf_r+0x1c8>
 800eda4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eda6:	445a      	add	r2, fp
 800eda8:	9209      	str	r2, [sp, #36]	; 0x24
 800edaa:	f89a 3000 	ldrb.w	r3, [sl]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	f000 80a2 	beq.w	800eef8 <_svfiprintf_r+0x1c8>
 800edb4:	2300      	movs	r3, #0
 800edb6:	f04f 32ff 	mov.w	r2, #4294967295
 800edba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edbe:	f10a 0a01 	add.w	sl, sl, #1
 800edc2:	9304      	str	r3, [sp, #16]
 800edc4:	9307      	str	r3, [sp, #28]
 800edc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800edca:	931a      	str	r3, [sp, #104]	; 0x68
 800edcc:	4654      	mov	r4, sl
 800edce:	2205      	movs	r2, #5
 800edd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edd4:	4851      	ldr	r0, [pc, #324]	; (800ef1c <_svfiprintf_r+0x1ec>)
 800edd6:	f7f1 fa1b 	bl	8000210 <memchr>
 800edda:	9a04      	ldr	r2, [sp, #16]
 800eddc:	b9d8      	cbnz	r0, 800ee16 <_svfiprintf_r+0xe6>
 800edde:	06d0      	lsls	r0, r2, #27
 800ede0:	bf44      	itt	mi
 800ede2:	2320      	movmi	r3, #32
 800ede4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ede8:	0711      	lsls	r1, r2, #28
 800edea:	bf44      	itt	mi
 800edec:	232b      	movmi	r3, #43	; 0x2b
 800edee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edf2:	f89a 3000 	ldrb.w	r3, [sl]
 800edf6:	2b2a      	cmp	r3, #42	; 0x2a
 800edf8:	d015      	beq.n	800ee26 <_svfiprintf_r+0xf6>
 800edfa:	9a07      	ldr	r2, [sp, #28]
 800edfc:	4654      	mov	r4, sl
 800edfe:	2000      	movs	r0, #0
 800ee00:	f04f 0c0a 	mov.w	ip, #10
 800ee04:	4621      	mov	r1, r4
 800ee06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee0a:	3b30      	subs	r3, #48	; 0x30
 800ee0c:	2b09      	cmp	r3, #9
 800ee0e:	d94e      	bls.n	800eeae <_svfiprintf_r+0x17e>
 800ee10:	b1b0      	cbz	r0, 800ee40 <_svfiprintf_r+0x110>
 800ee12:	9207      	str	r2, [sp, #28]
 800ee14:	e014      	b.n	800ee40 <_svfiprintf_r+0x110>
 800ee16:	eba0 0308 	sub.w	r3, r0, r8
 800ee1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	9304      	str	r3, [sp, #16]
 800ee22:	46a2      	mov	sl, r4
 800ee24:	e7d2      	b.n	800edcc <_svfiprintf_r+0x9c>
 800ee26:	9b03      	ldr	r3, [sp, #12]
 800ee28:	1d19      	adds	r1, r3, #4
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	9103      	str	r1, [sp, #12]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	bfbb      	ittet	lt
 800ee32:	425b      	neglt	r3, r3
 800ee34:	f042 0202 	orrlt.w	r2, r2, #2
 800ee38:	9307      	strge	r3, [sp, #28]
 800ee3a:	9307      	strlt	r3, [sp, #28]
 800ee3c:	bfb8      	it	lt
 800ee3e:	9204      	strlt	r2, [sp, #16]
 800ee40:	7823      	ldrb	r3, [r4, #0]
 800ee42:	2b2e      	cmp	r3, #46	; 0x2e
 800ee44:	d10c      	bne.n	800ee60 <_svfiprintf_r+0x130>
 800ee46:	7863      	ldrb	r3, [r4, #1]
 800ee48:	2b2a      	cmp	r3, #42	; 0x2a
 800ee4a:	d135      	bne.n	800eeb8 <_svfiprintf_r+0x188>
 800ee4c:	9b03      	ldr	r3, [sp, #12]
 800ee4e:	1d1a      	adds	r2, r3, #4
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	9203      	str	r2, [sp, #12]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	bfb8      	it	lt
 800ee58:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee5c:	3402      	adds	r4, #2
 800ee5e:	9305      	str	r3, [sp, #20]
 800ee60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ef2c <_svfiprintf_r+0x1fc>
 800ee64:	7821      	ldrb	r1, [r4, #0]
 800ee66:	2203      	movs	r2, #3
 800ee68:	4650      	mov	r0, sl
 800ee6a:	f7f1 f9d1 	bl	8000210 <memchr>
 800ee6e:	b140      	cbz	r0, 800ee82 <_svfiprintf_r+0x152>
 800ee70:	2340      	movs	r3, #64	; 0x40
 800ee72:	eba0 000a 	sub.w	r0, r0, sl
 800ee76:	fa03 f000 	lsl.w	r0, r3, r0
 800ee7a:	9b04      	ldr	r3, [sp, #16]
 800ee7c:	4303      	orrs	r3, r0
 800ee7e:	3401      	adds	r4, #1
 800ee80:	9304      	str	r3, [sp, #16]
 800ee82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee86:	4826      	ldr	r0, [pc, #152]	; (800ef20 <_svfiprintf_r+0x1f0>)
 800ee88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee8c:	2206      	movs	r2, #6
 800ee8e:	f7f1 f9bf 	bl	8000210 <memchr>
 800ee92:	2800      	cmp	r0, #0
 800ee94:	d038      	beq.n	800ef08 <_svfiprintf_r+0x1d8>
 800ee96:	4b23      	ldr	r3, [pc, #140]	; (800ef24 <_svfiprintf_r+0x1f4>)
 800ee98:	bb1b      	cbnz	r3, 800eee2 <_svfiprintf_r+0x1b2>
 800ee9a:	9b03      	ldr	r3, [sp, #12]
 800ee9c:	3307      	adds	r3, #7
 800ee9e:	f023 0307 	bic.w	r3, r3, #7
 800eea2:	3308      	adds	r3, #8
 800eea4:	9303      	str	r3, [sp, #12]
 800eea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eea8:	4433      	add	r3, r6
 800eeaa:	9309      	str	r3, [sp, #36]	; 0x24
 800eeac:	e767      	b.n	800ed7e <_svfiprintf_r+0x4e>
 800eeae:	fb0c 3202 	mla	r2, ip, r2, r3
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	2001      	movs	r0, #1
 800eeb6:	e7a5      	b.n	800ee04 <_svfiprintf_r+0xd4>
 800eeb8:	2300      	movs	r3, #0
 800eeba:	3401      	adds	r4, #1
 800eebc:	9305      	str	r3, [sp, #20]
 800eebe:	4619      	mov	r1, r3
 800eec0:	f04f 0c0a 	mov.w	ip, #10
 800eec4:	4620      	mov	r0, r4
 800eec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeca:	3a30      	subs	r2, #48	; 0x30
 800eecc:	2a09      	cmp	r2, #9
 800eece:	d903      	bls.n	800eed8 <_svfiprintf_r+0x1a8>
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d0c5      	beq.n	800ee60 <_svfiprintf_r+0x130>
 800eed4:	9105      	str	r1, [sp, #20]
 800eed6:	e7c3      	b.n	800ee60 <_svfiprintf_r+0x130>
 800eed8:	fb0c 2101 	mla	r1, ip, r1, r2
 800eedc:	4604      	mov	r4, r0
 800eede:	2301      	movs	r3, #1
 800eee0:	e7f0      	b.n	800eec4 <_svfiprintf_r+0x194>
 800eee2:	ab03      	add	r3, sp, #12
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	462a      	mov	r2, r5
 800eee8:	4b0f      	ldr	r3, [pc, #60]	; (800ef28 <_svfiprintf_r+0x1f8>)
 800eeea:	a904      	add	r1, sp, #16
 800eeec:	4638      	mov	r0, r7
 800eeee:	f3af 8000 	nop.w
 800eef2:	1c42      	adds	r2, r0, #1
 800eef4:	4606      	mov	r6, r0
 800eef6:	d1d6      	bne.n	800eea6 <_svfiprintf_r+0x176>
 800eef8:	89ab      	ldrh	r3, [r5, #12]
 800eefa:	065b      	lsls	r3, r3, #25
 800eefc:	f53f af2c 	bmi.w	800ed58 <_svfiprintf_r+0x28>
 800ef00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef02:	b01d      	add	sp, #116	; 0x74
 800ef04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef08:	ab03      	add	r3, sp, #12
 800ef0a:	9300      	str	r3, [sp, #0]
 800ef0c:	462a      	mov	r2, r5
 800ef0e:	4b06      	ldr	r3, [pc, #24]	; (800ef28 <_svfiprintf_r+0x1f8>)
 800ef10:	a904      	add	r1, sp, #16
 800ef12:	4638      	mov	r0, r7
 800ef14:	f000 f87a 	bl	800f00c <_printf_i>
 800ef18:	e7eb      	b.n	800eef2 <_svfiprintf_r+0x1c2>
 800ef1a:	bf00      	nop
 800ef1c:	08010add 	.word	0x08010add
 800ef20:	08010ae7 	.word	0x08010ae7
 800ef24:	00000000 	.word	0x00000000
 800ef28:	0800ec79 	.word	0x0800ec79
 800ef2c:	08010ae3 	.word	0x08010ae3

0800ef30 <_printf_common>:
 800ef30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef34:	4616      	mov	r6, r2
 800ef36:	4699      	mov	r9, r3
 800ef38:	688a      	ldr	r2, [r1, #8]
 800ef3a:	690b      	ldr	r3, [r1, #16]
 800ef3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef40:	4293      	cmp	r3, r2
 800ef42:	bfb8      	it	lt
 800ef44:	4613      	movlt	r3, r2
 800ef46:	6033      	str	r3, [r6, #0]
 800ef48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef4c:	4607      	mov	r7, r0
 800ef4e:	460c      	mov	r4, r1
 800ef50:	b10a      	cbz	r2, 800ef56 <_printf_common+0x26>
 800ef52:	3301      	adds	r3, #1
 800ef54:	6033      	str	r3, [r6, #0]
 800ef56:	6823      	ldr	r3, [r4, #0]
 800ef58:	0699      	lsls	r1, r3, #26
 800ef5a:	bf42      	ittt	mi
 800ef5c:	6833      	ldrmi	r3, [r6, #0]
 800ef5e:	3302      	addmi	r3, #2
 800ef60:	6033      	strmi	r3, [r6, #0]
 800ef62:	6825      	ldr	r5, [r4, #0]
 800ef64:	f015 0506 	ands.w	r5, r5, #6
 800ef68:	d106      	bne.n	800ef78 <_printf_common+0x48>
 800ef6a:	f104 0a19 	add.w	sl, r4, #25
 800ef6e:	68e3      	ldr	r3, [r4, #12]
 800ef70:	6832      	ldr	r2, [r6, #0]
 800ef72:	1a9b      	subs	r3, r3, r2
 800ef74:	42ab      	cmp	r3, r5
 800ef76:	dc26      	bgt.n	800efc6 <_printf_common+0x96>
 800ef78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef7c:	1e13      	subs	r3, r2, #0
 800ef7e:	6822      	ldr	r2, [r4, #0]
 800ef80:	bf18      	it	ne
 800ef82:	2301      	movne	r3, #1
 800ef84:	0692      	lsls	r2, r2, #26
 800ef86:	d42b      	bmi.n	800efe0 <_printf_common+0xb0>
 800ef88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef8c:	4649      	mov	r1, r9
 800ef8e:	4638      	mov	r0, r7
 800ef90:	47c0      	blx	r8
 800ef92:	3001      	adds	r0, #1
 800ef94:	d01e      	beq.n	800efd4 <_printf_common+0xa4>
 800ef96:	6823      	ldr	r3, [r4, #0]
 800ef98:	68e5      	ldr	r5, [r4, #12]
 800ef9a:	6832      	ldr	r2, [r6, #0]
 800ef9c:	f003 0306 	and.w	r3, r3, #6
 800efa0:	2b04      	cmp	r3, #4
 800efa2:	bf08      	it	eq
 800efa4:	1aad      	subeq	r5, r5, r2
 800efa6:	68a3      	ldr	r3, [r4, #8]
 800efa8:	6922      	ldr	r2, [r4, #16]
 800efaa:	bf0c      	ite	eq
 800efac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efb0:	2500      	movne	r5, #0
 800efb2:	4293      	cmp	r3, r2
 800efb4:	bfc4      	itt	gt
 800efb6:	1a9b      	subgt	r3, r3, r2
 800efb8:	18ed      	addgt	r5, r5, r3
 800efba:	2600      	movs	r6, #0
 800efbc:	341a      	adds	r4, #26
 800efbe:	42b5      	cmp	r5, r6
 800efc0:	d11a      	bne.n	800eff8 <_printf_common+0xc8>
 800efc2:	2000      	movs	r0, #0
 800efc4:	e008      	b.n	800efd8 <_printf_common+0xa8>
 800efc6:	2301      	movs	r3, #1
 800efc8:	4652      	mov	r2, sl
 800efca:	4649      	mov	r1, r9
 800efcc:	4638      	mov	r0, r7
 800efce:	47c0      	blx	r8
 800efd0:	3001      	adds	r0, #1
 800efd2:	d103      	bne.n	800efdc <_printf_common+0xac>
 800efd4:	f04f 30ff 	mov.w	r0, #4294967295
 800efd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efdc:	3501      	adds	r5, #1
 800efde:	e7c6      	b.n	800ef6e <_printf_common+0x3e>
 800efe0:	18e1      	adds	r1, r4, r3
 800efe2:	1c5a      	adds	r2, r3, #1
 800efe4:	2030      	movs	r0, #48	; 0x30
 800efe6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efea:	4422      	add	r2, r4
 800efec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eff0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eff4:	3302      	adds	r3, #2
 800eff6:	e7c7      	b.n	800ef88 <_printf_common+0x58>
 800eff8:	2301      	movs	r3, #1
 800effa:	4622      	mov	r2, r4
 800effc:	4649      	mov	r1, r9
 800effe:	4638      	mov	r0, r7
 800f000:	47c0      	blx	r8
 800f002:	3001      	adds	r0, #1
 800f004:	d0e6      	beq.n	800efd4 <_printf_common+0xa4>
 800f006:	3601      	adds	r6, #1
 800f008:	e7d9      	b.n	800efbe <_printf_common+0x8e>
	...

0800f00c <_printf_i>:
 800f00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f010:	7e0f      	ldrb	r7, [r1, #24]
 800f012:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f014:	2f78      	cmp	r7, #120	; 0x78
 800f016:	4691      	mov	r9, r2
 800f018:	4680      	mov	r8, r0
 800f01a:	460c      	mov	r4, r1
 800f01c:	469a      	mov	sl, r3
 800f01e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f022:	d807      	bhi.n	800f034 <_printf_i+0x28>
 800f024:	2f62      	cmp	r7, #98	; 0x62
 800f026:	d80a      	bhi.n	800f03e <_printf_i+0x32>
 800f028:	2f00      	cmp	r7, #0
 800f02a:	f000 80d8 	beq.w	800f1de <_printf_i+0x1d2>
 800f02e:	2f58      	cmp	r7, #88	; 0x58
 800f030:	f000 80a3 	beq.w	800f17a <_printf_i+0x16e>
 800f034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f038:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f03c:	e03a      	b.n	800f0b4 <_printf_i+0xa8>
 800f03e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f042:	2b15      	cmp	r3, #21
 800f044:	d8f6      	bhi.n	800f034 <_printf_i+0x28>
 800f046:	a101      	add	r1, pc, #4	; (adr r1, 800f04c <_printf_i+0x40>)
 800f048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f04c:	0800f0a5 	.word	0x0800f0a5
 800f050:	0800f0b9 	.word	0x0800f0b9
 800f054:	0800f035 	.word	0x0800f035
 800f058:	0800f035 	.word	0x0800f035
 800f05c:	0800f035 	.word	0x0800f035
 800f060:	0800f035 	.word	0x0800f035
 800f064:	0800f0b9 	.word	0x0800f0b9
 800f068:	0800f035 	.word	0x0800f035
 800f06c:	0800f035 	.word	0x0800f035
 800f070:	0800f035 	.word	0x0800f035
 800f074:	0800f035 	.word	0x0800f035
 800f078:	0800f1c5 	.word	0x0800f1c5
 800f07c:	0800f0e9 	.word	0x0800f0e9
 800f080:	0800f1a7 	.word	0x0800f1a7
 800f084:	0800f035 	.word	0x0800f035
 800f088:	0800f035 	.word	0x0800f035
 800f08c:	0800f1e7 	.word	0x0800f1e7
 800f090:	0800f035 	.word	0x0800f035
 800f094:	0800f0e9 	.word	0x0800f0e9
 800f098:	0800f035 	.word	0x0800f035
 800f09c:	0800f035 	.word	0x0800f035
 800f0a0:	0800f1af 	.word	0x0800f1af
 800f0a4:	682b      	ldr	r3, [r5, #0]
 800f0a6:	1d1a      	adds	r2, r3, #4
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	602a      	str	r2, [r5, #0]
 800f0ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	e0a3      	b.n	800f200 <_printf_i+0x1f4>
 800f0b8:	6820      	ldr	r0, [r4, #0]
 800f0ba:	6829      	ldr	r1, [r5, #0]
 800f0bc:	0606      	lsls	r6, r0, #24
 800f0be:	f101 0304 	add.w	r3, r1, #4
 800f0c2:	d50a      	bpl.n	800f0da <_printf_i+0xce>
 800f0c4:	680e      	ldr	r6, [r1, #0]
 800f0c6:	602b      	str	r3, [r5, #0]
 800f0c8:	2e00      	cmp	r6, #0
 800f0ca:	da03      	bge.n	800f0d4 <_printf_i+0xc8>
 800f0cc:	232d      	movs	r3, #45	; 0x2d
 800f0ce:	4276      	negs	r6, r6
 800f0d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0d4:	485e      	ldr	r0, [pc, #376]	; (800f250 <_printf_i+0x244>)
 800f0d6:	230a      	movs	r3, #10
 800f0d8:	e019      	b.n	800f10e <_printf_i+0x102>
 800f0da:	680e      	ldr	r6, [r1, #0]
 800f0dc:	602b      	str	r3, [r5, #0]
 800f0de:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f0e2:	bf18      	it	ne
 800f0e4:	b236      	sxthne	r6, r6
 800f0e6:	e7ef      	b.n	800f0c8 <_printf_i+0xbc>
 800f0e8:	682b      	ldr	r3, [r5, #0]
 800f0ea:	6820      	ldr	r0, [r4, #0]
 800f0ec:	1d19      	adds	r1, r3, #4
 800f0ee:	6029      	str	r1, [r5, #0]
 800f0f0:	0601      	lsls	r1, r0, #24
 800f0f2:	d501      	bpl.n	800f0f8 <_printf_i+0xec>
 800f0f4:	681e      	ldr	r6, [r3, #0]
 800f0f6:	e002      	b.n	800f0fe <_printf_i+0xf2>
 800f0f8:	0646      	lsls	r6, r0, #25
 800f0fa:	d5fb      	bpl.n	800f0f4 <_printf_i+0xe8>
 800f0fc:	881e      	ldrh	r6, [r3, #0]
 800f0fe:	4854      	ldr	r0, [pc, #336]	; (800f250 <_printf_i+0x244>)
 800f100:	2f6f      	cmp	r7, #111	; 0x6f
 800f102:	bf0c      	ite	eq
 800f104:	2308      	moveq	r3, #8
 800f106:	230a      	movne	r3, #10
 800f108:	2100      	movs	r1, #0
 800f10a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f10e:	6865      	ldr	r5, [r4, #4]
 800f110:	60a5      	str	r5, [r4, #8]
 800f112:	2d00      	cmp	r5, #0
 800f114:	bfa2      	ittt	ge
 800f116:	6821      	ldrge	r1, [r4, #0]
 800f118:	f021 0104 	bicge.w	r1, r1, #4
 800f11c:	6021      	strge	r1, [r4, #0]
 800f11e:	b90e      	cbnz	r6, 800f124 <_printf_i+0x118>
 800f120:	2d00      	cmp	r5, #0
 800f122:	d04d      	beq.n	800f1c0 <_printf_i+0x1b4>
 800f124:	4615      	mov	r5, r2
 800f126:	fbb6 f1f3 	udiv	r1, r6, r3
 800f12a:	fb03 6711 	mls	r7, r3, r1, r6
 800f12e:	5dc7      	ldrb	r7, [r0, r7]
 800f130:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f134:	4637      	mov	r7, r6
 800f136:	42bb      	cmp	r3, r7
 800f138:	460e      	mov	r6, r1
 800f13a:	d9f4      	bls.n	800f126 <_printf_i+0x11a>
 800f13c:	2b08      	cmp	r3, #8
 800f13e:	d10b      	bne.n	800f158 <_printf_i+0x14c>
 800f140:	6823      	ldr	r3, [r4, #0]
 800f142:	07de      	lsls	r6, r3, #31
 800f144:	d508      	bpl.n	800f158 <_printf_i+0x14c>
 800f146:	6923      	ldr	r3, [r4, #16]
 800f148:	6861      	ldr	r1, [r4, #4]
 800f14a:	4299      	cmp	r1, r3
 800f14c:	bfde      	ittt	le
 800f14e:	2330      	movle	r3, #48	; 0x30
 800f150:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f154:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f158:	1b52      	subs	r2, r2, r5
 800f15a:	6122      	str	r2, [r4, #16]
 800f15c:	f8cd a000 	str.w	sl, [sp]
 800f160:	464b      	mov	r3, r9
 800f162:	aa03      	add	r2, sp, #12
 800f164:	4621      	mov	r1, r4
 800f166:	4640      	mov	r0, r8
 800f168:	f7ff fee2 	bl	800ef30 <_printf_common>
 800f16c:	3001      	adds	r0, #1
 800f16e:	d14c      	bne.n	800f20a <_printf_i+0x1fe>
 800f170:	f04f 30ff 	mov.w	r0, #4294967295
 800f174:	b004      	add	sp, #16
 800f176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f17a:	4835      	ldr	r0, [pc, #212]	; (800f250 <_printf_i+0x244>)
 800f17c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f180:	6829      	ldr	r1, [r5, #0]
 800f182:	6823      	ldr	r3, [r4, #0]
 800f184:	f851 6b04 	ldr.w	r6, [r1], #4
 800f188:	6029      	str	r1, [r5, #0]
 800f18a:	061d      	lsls	r5, r3, #24
 800f18c:	d514      	bpl.n	800f1b8 <_printf_i+0x1ac>
 800f18e:	07df      	lsls	r7, r3, #31
 800f190:	bf44      	itt	mi
 800f192:	f043 0320 	orrmi.w	r3, r3, #32
 800f196:	6023      	strmi	r3, [r4, #0]
 800f198:	b91e      	cbnz	r6, 800f1a2 <_printf_i+0x196>
 800f19a:	6823      	ldr	r3, [r4, #0]
 800f19c:	f023 0320 	bic.w	r3, r3, #32
 800f1a0:	6023      	str	r3, [r4, #0]
 800f1a2:	2310      	movs	r3, #16
 800f1a4:	e7b0      	b.n	800f108 <_printf_i+0xfc>
 800f1a6:	6823      	ldr	r3, [r4, #0]
 800f1a8:	f043 0320 	orr.w	r3, r3, #32
 800f1ac:	6023      	str	r3, [r4, #0]
 800f1ae:	2378      	movs	r3, #120	; 0x78
 800f1b0:	4828      	ldr	r0, [pc, #160]	; (800f254 <_printf_i+0x248>)
 800f1b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f1b6:	e7e3      	b.n	800f180 <_printf_i+0x174>
 800f1b8:	0659      	lsls	r1, r3, #25
 800f1ba:	bf48      	it	mi
 800f1bc:	b2b6      	uxthmi	r6, r6
 800f1be:	e7e6      	b.n	800f18e <_printf_i+0x182>
 800f1c0:	4615      	mov	r5, r2
 800f1c2:	e7bb      	b.n	800f13c <_printf_i+0x130>
 800f1c4:	682b      	ldr	r3, [r5, #0]
 800f1c6:	6826      	ldr	r6, [r4, #0]
 800f1c8:	6961      	ldr	r1, [r4, #20]
 800f1ca:	1d18      	adds	r0, r3, #4
 800f1cc:	6028      	str	r0, [r5, #0]
 800f1ce:	0635      	lsls	r5, r6, #24
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	d501      	bpl.n	800f1d8 <_printf_i+0x1cc>
 800f1d4:	6019      	str	r1, [r3, #0]
 800f1d6:	e002      	b.n	800f1de <_printf_i+0x1d2>
 800f1d8:	0670      	lsls	r0, r6, #25
 800f1da:	d5fb      	bpl.n	800f1d4 <_printf_i+0x1c8>
 800f1dc:	8019      	strh	r1, [r3, #0]
 800f1de:	2300      	movs	r3, #0
 800f1e0:	6123      	str	r3, [r4, #16]
 800f1e2:	4615      	mov	r5, r2
 800f1e4:	e7ba      	b.n	800f15c <_printf_i+0x150>
 800f1e6:	682b      	ldr	r3, [r5, #0]
 800f1e8:	1d1a      	adds	r2, r3, #4
 800f1ea:	602a      	str	r2, [r5, #0]
 800f1ec:	681d      	ldr	r5, [r3, #0]
 800f1ee:	6862      	ldr	r2, [r4, #4]
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	f7f1 f80c 	bl	8000210 <memchr>
 800f1f8:	b108      	cbz	r0, 800f1fe <_printf_i+0x1f2>
 800f1fa:	1b40      	subs	r0, r0, r5
 800f1fc:	6060      	str	r0, [r4, #4]
 800f1fe:	6863      	ldr	r3, [r4, #4]
 800f200:	6123      	str	r3, [r4, #16]
 800f202:	2300      	movs	r3, #0
 800f204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f208:	e7a8      	b.n	800f15c <_printf_i+0x150>
 800f20a:	6923      	ldr	r3, [r4, #16]
 800f20c:	462a      	mov	r2, r5
 800f20e:	4649      	mov	r1, r9
 800f210:	4640      	mov	r0, r8
 800f212:	47d0      	blx	sl
 800f214:	3001      	adds	r0, #1
 800f216:	d0ab      	beq.n	800f170 <_printf_i+0x164>
 800f218:	6823      	ldr	r3, [r4, #0]
 800f21a:	079b      	lsls	r3, r3, #30
 800f21c:	d413      	bmi.n	800f246 <_printf_i+0x23a>
 800f21e:	68e0      	ldr	r0, [r4, #12]
 800f220:	9b03      	ldr	r3, [sp, #12]
 800f222:	4298      	cmp	r0, r3
 800f224:	bfb8      	it	lt
 800f226:	4618      	movlt	r0, r3
 800f228:	e7a4      	b.n	800f174 <_printf_i+0x168>
 800f22a:	2301      	movs	r3, #1
 800f22c:	4632      	mov	r2, r6
 800f22e:	4649      	mov	r1, r9
 800f230:	4640      	mov	r0, r8
 800f232:	47d0      	blx	sl
 800f234:	3001      	adds	r0, #1
 800f236:	d09b      	beq.n	800f170 <_printf_i+0x164>
 800f238:	3501      	adds	r5, #1
 800f23a:	68e3      	ldr	r3, [r4, #12]
 800f23c:	9903      	ldr	r1, [sp, #12]
 800f23e:	1a5b      	subs	r3, r3, r1
 800f240:	42ab      	cmp	r3, r5
 800f242:	dcf2      	bgt.n	800f22a <_printf_i+0x21e>
 800f244:	e7eb      	b.n	800f21e <_printf_i+0x212>
 800f246:	2500      	movs	r5, #0
 800f248:	f104 0619 	add.w	r6, r4, #25
 800f24c:	e7f5      	b.n	800f23a <_printf_i+0x22e>
 800f24e:	bf00      	nop
 800f250:	08010aee 	.word	0x08010aee
 800f254:	08010aff 	.word	0x08010aff

0800f258 <sniprintf>:
 800f258:	b40c      	push	{r2, r3}
 800f25a:	b530      	push	{r4, r5, lr}
 800f25c:	4b17      	ldr	r3, [pc, #92]	; (800f2bc <sniprintf+0x64>)
 800f25e:	1e0c      	subs	r4, r1, #0
 800f260:	681d      	ldr	r5, [r3, #0]
 800f262:	b09d      	sub	sp, #116	; 0x74
 800f264:	da08      	bge.n	800f278 <sniprintf+0x20>
 800f266:	238b      	movs	r3, #139	; 0x8b
 800f268:	602b      	str	r3, [r5, #0]
 800f26a:	f04f 30ff 	mov.w	r0, #4294967295
 800f26e:	b01d      	add	sp, #116	; 0x74
 800f270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f274:	b002      	add	sp, #8
 800f276:	4770      	bx	lr
 800f278:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f27c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f280:	bf14      	ite	ne
 800f282:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f286:	4623      	moveq	r3, r4
 800f288:	9304      	str	r3, [sp, #16]
 800f28a:	9307      	str	r3, [sp, #28]
 800f28c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f290:	9002      	str	r0, [sp, #8]
 800f292:	9006      	str	r0, [sp, #24]
 800f294:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f298:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f29a:	ab21      	add	r3, sp, #132	; 0x84
 800f29c:	a902      	add	r1, sp, #8
 800f29e:	4628      	mov	r0, r5
 800f2a0:	9301      	str	r3, [sp, #4]
 800f2a2:	f7ff fd45 	bl	800ed30 <_svfiprintf_r>
 800f2a6:	1c43      	adds	r3, r0, #1
 800f2a8:	bfbc      	itt	lt
 800f2aa:	238b      	movlt	r3, #139	; 0x8b
 800f2ac:	602b      	strlt	r3, [r5, #0]
 800f2ae:	2c00      	cmp	r4, #0
 800f2b0:	d0dd      	beq.n	800f26e <sniprintf+0x16>
 800f2b2:	9b02      	ldr	r3, [sp, #8]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	701a      	strb	r2, [r3, #0]
 800f2b8:	e7d9      	b.n	800f26e <sniprintf+0x16>
 800f2ba:	bf00      	nop
 800f2bc:	20000110 	.word	0x20000110

0800f2c0 <siscanf>:
 800f2c0:	b40e      	push	{r1, r2, r3}
 800f2c2:	b510      	push	{r4, lr}
 800f2c4:	b09f      	sub	sp, #124	; 0x7c
 800f2c6:	ac21      	add	r4, sp, #132	; 0x84
 800f2c8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f2cc:	f854 2b04 	ldr.w	r2, [r4], #4
 800f2d0:	9201      	str	r2, [sp, #4]
 800f2d2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f2d6:	9004      	str	r0, [sp, #16]
 800f2d8:	9008      	str	r0, [sp, #32]
 800f2da:	f7f0 ff81 	bl	80001e0 <strlen>
 800f2de:	4b0c      	ldr	r3, [pc, #48]	; (800f310 <siscanf+0x50>)
 800f2e0:	9005      	str	r0, [sp, #20]
 800f2e2:	9009      	str	r0, [sp, #36]	; 0x24
 800f2e4:	930d      	str	r3, [sp, #52]	; 0x34
 800f2e6:	480b      	ldr	r0, [pc, #44]	; (800f314 <siscanf+0x54>)
 800f2e8:	9a01      	ldr	r2, [sp, #4]
 800f2ea:	6800      	ldr	r0, [r0, #0]
 800f2ec:	9403      	str	r4, [sp, #12]
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	9311      	str	r3, [sp, #68]	; 0x44
 800f2f2:	9316      	str	r3, [sp, #88]	; 0x58
 800f2f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f2f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f2fc:	a904      	add	r1, sp, #16
 800f2fe:	4623      	mov	r3, r4
 800f300:	f000 f980 	bl	800f604 <__ssvfiscanf_r>
 800f304:	b01f      	add	sp, #124	; 0x7c
 800f306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f30a:	b003      	add	sp, #12
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	0800dbfd 	.word	0x0800dbfd
 800f314:	20000110 	.word	0x20000110

0800f318 <strcpy>:
 800f318:	4603      	mov	r3, r0
 800f31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f31e:	f803 2b01 	strb.w	r2, [r3], #1
 800f322:	2a00      	cmp	r2, #0
 800f324:	d1f9      	bne.n	800f31a <strcpy+0x2>
 800f326:	4770      	bx	lr

0800f328 <strncmp>:
 800f328:	b510      	push	{r4, lr}
 800f32a:	b17a      	cbz	r2, 800f34c <strncmp+0x24>
 800f32c:	4603      	mov	r3, r0
 800f32e:	3901      	subs	r1, #1
 800f330:	1884      	adds	r4, r0, r2
 800f332:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f336:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f33a:	4290      	cmp	r0, r2
 800f33c:	d101      	bne.n	800f342 <strncmp+0x1a>
 800f33e:	42a3      	cmp	r3, r4
 800f340:	d101      	bne.n	800f346 <strncmp+0x1e>
 800f342:	1a80      	subs	r0, r0, r2
 800f344:	bd10      	pop	{r4, pc}
 800f346:	2800      	cmp	r0, #0
 800f348:	d1f3      	bne.n	800f332 <strncmp+0xa>
 800f34a:	e7fa      	b.n	800f342 <strncmp+0x1a>
 800f34c:	4610      	mov	r0, r2
 800f34e:	e7f9      	b.n	800f344 <strncmp+0x1c>

0800f350 <__tzcalc_limits>:
 800f350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f354:	4605      	mov	r5, r0
 800f356:	f7ff fc73 	bl	800ec40 <__gettzinfo>
 800f35a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800f35e:	429d      	cmp	r5, r3
 800f360:	f340 8099 	ble.w	800f496 <__tzcalc_limits+0x146>
 800f364:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800f368:	18ac      	adds	r4, r5, r2
 800f36a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800f36e:	f240 126d 	movw	r2, #365	; 0x16d
 800f372:	10a4      	asrs	r4, r4, #2
 800f374:	fb02 4403 	mla	r4, r2, r3, r4
 800f378:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800f37c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800f380:	fb93 f3f2 	sdiv	r3, r3, r2
 800f384:	441c      	add	r4, r3
 800f386:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f38a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800f38e:	fb95 fcf3 	sdiv	ip, r5, r3
 800f392:	fb03 5c1c 	mls	ip, r3, ip, r5
 800f396:	186a      	adds	r2, r5, r1
 800f398:	fabc f68c 	clz	r6, ip
 800f39c:	fbb2 f2f3 	udiv	r2, r2, r3
 800f3a0:	f005 0303 	and.w	r3, r5, #3
 800f3a4:	4414      	add	r4, r2
 800f3a6:	2264      	movs	r2, #100	; 0x64
 800f3a8:	6045      	str	r5, [r0, #4]
 800f3aa:	fb95 f7f2 	sdiv	r7, r5, r2
 800f3ae:	0976      	lsrs	r6, r6, #5
 800f3b0:	fb02 5717 	mls	r7, r2, r7, r5
 800f3b4:	4601      	mov	r1, r0
 800f3b6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800f3ba:	9300      	str	r3, [sp, #0]
 800f3bc:	f04f 0a07 	mov.w	sl, #7
 800f3c0:	7a0d      	ldrb	r5, [r1, #8]
 800f3c2:	694b      	ldr	r3, [r1, #20]
 800f3c4:	2d4a      	cmp	r5, #74	; 0x4a
 800f3c6:	d12d      	bne.n	800f424 <__tzcalc_limits+0xd4>
 800f3c8:	9a00      	ldr	r2, [sp, #0]
 800f3ca:	eb04 0e03 	add.w	lr, r4, r3
 800f3ce:	b902      	cbnz	r2, 800f3d2 <__tzcalc_limits+0x82>
 800f3d0:	b917      	cbnz	r7, 800f3d8 <__tzcalc_limits+0x88>
 800f3d2:	f1bc 0f00 	cmp.w	ip, #0
 800f3d6:	d123      	bne.n	800f420 <__tzcalc_limits+0xd0>
 800f3d8:	2b3b      	cmp	r3, #59	; 0x3b
 800f3da:	bfd4      	ite	le
 800f3dc:	2300      	movle	r3, #0
 800f3de:	2301      	movgt	r3, #1
 800f3e0:	4473      	add	r3, lr
 800f3e2:	3b01      	subs	r3, #1
 800f3e4:	698d      	ldr	r5, [r1, #24]
 800f3e6:	4a2d      	ldr	r2, [pc, #180]	; (800f49c <__tzcalc_limits+0x14c>)
 800f3e8:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800f3ec:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800f3f0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800f3f2:	18ed      	adds	r5, r5, r3
 800f3f4:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800f3f8:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800f3fc:	3128      	adds	r1, #40	; 0x28
 800f3fe:	458b      	cmp	fp, r1
 800f400:	d1de      	bne.n	800f3c0 <__tzcalc_limits+0x70>
 800f402:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800f406:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800f40a:	428c      	cmp	r4, r1
 800f40c:	eb72 0303 	sbcs.w	r3, r2, r3
 800f410:	bfb4      	ite	lt
 800f412:	2301      	movlt	r3, #1
 800f414:	2300      	movge	r3, #0
 800f416:	6003      	str	r3, [r0, #0]
 800f418:	2001      	movs	r0, #1
 800f41a:	b003      	add	sp, #12
 800f41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f420:	2300      	movs	r3, #0
 800f422:	e7dd      	b.n	800f3e0 <__tzcalc_limits+0x90>
 800f424:	2d44      	cmp	r5, #68	; 0x44
 800f426:	d101      	bne.n	800f42c <__tzcalc_limits+0xdc>
 800f428:	4423      	add	r3, r4
 800f42a:	e7db      	b.n	800f3e4 <__tzcalc_limits+0x94>
 800f42c:	9a00      	ldr	r2, [sp, #0]
 800f42e:	bb62      	cbnz	r2, 800f48a <__tzcalc_limits+0x13a>
 800f430:	2f00      	cmp	r7, #0
 800f432:	bf0c      	ite	eq
 800f434:	4635      	moveq	r5, r6
 800f436:	2501      	movne	r5, #1
 800f438:	68ca      	ldr	r2, [r1, #12]
 800f43a:	9201      	str	r2, [sp, #4]
 800f43c:	4a18      	ldr	r2, [pc, #96]	; (800f4a0 <__tzcalc_limits+0x150>)
 800f43e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800f442:	fb09 2505 	mla	r5, r9, r5, r2
 800f446:	46a6      	mov	lr, r4
 800f448:	f04f 0800 	mov.w	r8, #0
 800f44c:	3d04      	subs	r5, #4
 800f44e:	9a01      	ldr	r2, [sp, #4]
 800f450:	f108 0801 	add.w	r8, r8, #1
 800f454:	4542      	cmp	r2, r8
 800f456:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800f45a:	dc18      	bgt.n	800f48e <__tzcalc_limits+0x13e>
 800f45c:	f10e 0504 	add.w	r5, lr, #4
 800f460:	fb95 f8fa 	sdiv	r8, r5, sl
 800f464:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800f468:	eba5 0808 	sub.w	r8, r5, r8
 800f46c:	ebb3 0808 	subs.w	r8, r3, r8
 800f470:	690b      	ldr	r3, [r1, #16]
 800f472:	f103 33ff 	add.w	r3, r3, #4294967295
 800f476:	bf48      	it	mi
 800f478:	f108 0807 	addmi.w	r8, r8, #7
 800f47c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f480:	4443      	add	r3, r8
 800f482:	454b      	cmp	r3, r9
 800f484:	da05      	bge.n	800f492 <__tzcalc_limits+0x142>
 800f486:	4473      	add	r3, lr
 800f488:	e7ac      	b.n	800f3e4 <__tzcalc_limits+0x94>
 800f48a:	4635      	mov	r5, r6
 800f48c:	e7d4      	b.n	800f438 <__tzcalc_limits+0xe8>
 800f48e:	44ce      	add	lr, r9
 800f490:	e7dd      	b.n	800f44e <__tzcalc_limits+0xfe>
 800f492:	3b07      	subs	r3, #7
 800f494:	e7f5      	b.n	800f482 <__tzcalc_limits+0x132>
 800f496:	2000      	movs	r0, #0
 800f498:	e7bf      	b.n	800f41a <__tzcalc_limits+0xca>
 800f49a:	bf00      	nop
 800f49c:	00015180 	.word	0x00015180
 800f4a0:	08010b10 	.word	0x08010b10

0800f4a4 <__env_lock>:
 800f4a4:	4801      	ldr	r0, [pc, #4]	; (800f4ac <__env_lock+0x8>)
 800f4a6:	f7fe ba80 	b.w	800d9aa <__retarget_lock_acquire_recursive>
 800f4aa:	bf00      	nop
 800f4ac:	20000b14 	.word	0x20000b14

0800f4b0 <__env_unlock>:
 800f4b0:	4801      	ldr	r0, [pc, #4]	; (800f4b8 <__env_unlock+0x8>)
 800f4b2:	f7fe ba7c 	b.w	800d9ae <__retarget_lock_release_recursive>
 800f4b6:	bf00      	nop
 800f4b8:	20000b14 	.word	0x20000b14

0800f4bc <memmove>:
 800f4bc:	4288      	cmp	r0, r1
 800f4be:	b510      	push	{r4, lr}
 800f4c0:	eb01 0402 	add.w	r4, r1, r2
 800f4c4:	d902      	bls.n	800f4cc <memmove+0x10>
 800f4c6:	4284      	cmp	r4, r0
 800f4c8:	4623      	mov	r3, r4
 800f4ca:	d807      	bhi.n	800f4dc <memmove+0x20>
 800f4cc:	1e43      	subs	r3, r0, #1
 800f4ce:	42a1      	cmp	r1, r4
 800f4d0:	d008      	beq.n	800f4e4 <memmove+0x28>
 800f4d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4da:	e7f8      	b.n	800f4ce <memmove+0x12>
 800f4dc:	4402      	add	r2, r0
 800f4de:	4601      	mov	r1, r0
 800f4e0:	428a      	cmp	r2, r1
 800f4e2:	d100      	bne.n	800f4e6 <memmove+0x2a>
 800f4e4:	bd10      	pop	{r4, pc}
 800f4e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4ee:	e7f7      	b.n	800f4e0 <memmove+0x24>

0800f4f0 <_realloc_r>:
 800f4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4f4:	4680      	mov	r8, r0
 800f4f6:	4614      	mov	r4, r2
 800f4f8:	460e      	mov	r6, r1
 800f4fa:	b921      	cbnz	r1, 800f506 <_realloc_r+0x16>
 800f4fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f500:	4611      	mov	r1, r2
 800f502:	f7fe bad7 	b.w	800dab4 <_malloc_r>
 800f506:	b92a      	cbnz	r2, 800f514 <_realloc_r+0x24>
 800f508:	f7fe fa68 	bl	800d9dc <_free_r>
 800f50c:	4625      	mov	r5, r4
 800f50e:	4628      	mov	r0, r5
 800f510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f514:	f000 fbb2 	bl	800fc7c <_malloc_usable_size_r>
 800f518:	4284      	cmp	r4, r0
 800f51a:	4607      	mov	r7, r0
 800f51c:	d802      	bhi.n	800f524 <_realloc_r+0x34>
 800f51e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f522:	d812      	bhi.n	800f54a <_realloc_r+0x5a>
 800f524:	4621      	mov	r1, r4
 800f526:	4640      	mov	r0, r8
 800f528:	f7fe fac4 	bl	800dab4 <_malloc_r>
 800f52c:	4605      	mov	r5, r0
 800f52e:	2800      	cmp	r0, #0
 800f530:	d0ed      	beq.n	800f50e <_realloc_r+0x1e>
 800f532:	42bc      	cmp	r4, r7
 800f534:	4622      	mov	r2, r4
 800f536:	4631      	mov	r1, r6
 800f538:	bf28      	it	cs
 800f53a:	463a      	movcs	r2, r7
 800f53c:	f7fe fa38 	bl	800d9b0 <memcpy>
 800f540:	4631      	mov	r1, r6
 800f542:	4640      	mov	r0, r8
 800f544:	f7fe fa4a 	bl	800d9dc <_free_r>
 800f548:	e7e1      	b.n	800f50e <_realloc_r+0x1e>
 800f54a:	4635      	mov	r5, r6
 800f54c:	e7df      	b.n	800f50e <_realloc_r+0x1e>

0800f54e <_sungetc_r>:
 800f54e:	b538      	push	{r3, r4, r5, lr}
 800f550:	1c4b      	adds	r3, r1, #1
 800f552:	4614      	mov	r4, r2
 800f554:	d103      	bne.n	800f55e <_sungetc_r+0x10>
 800f556:	f04f 35ff 	mov.w	r5, #4294967295
 800f55a:	4628      	mov	r0, r5
 800f55c:	bd38      	pop	{r3, r4, r5, pc}
 800f55e:	8993      	ldrh	r3, [r2, #12]
 800f560:	f023 0320 	bic.w	r3, r3, #32
 800f564:	8193      	strh	r3, [r2, #12]
 800f566:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f568:	6852      	ldr	r2, [r2, #4]
 800f56a:	b2cd      	uxtb	r5, r1
 800f56c:	b18b      	cbz	r3, 800f592 <_sungetc_r+0x44>
 800f56e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f570:	4293      	cmp	r3, r2
 800f572:	dd08      	ble.n	800f586 <_sungetc_r+0x38>
 800f574:	6823      	ldr	r3, [r4, #0]
 800f576:	1e5a      	subs	r2, r3, #1
 800f578:	6022      	str	r2, [r4, #0]
 800f57a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f57e:	6863      	ldr	r3, [r4, #4]
 800f580:	3301      	adds	r3, #1
 800f582:	6063      	str	r3, [r4, #4]
 800f584:	e7e9      	b.n	800f55a <_sungetc_r+0xc>
 800f586:	4621      	mov	r1, r4
 800f588:	f000 fb3e 	bl	800fc08 <__submore>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d0f1      	beq.n	800f574 <_sungetc_r+0x26>
 800f590:	e7e1      	b.n	800f556 <_sungetc_r+0x8>
 800f592:	6921      	ldr	r1, [r4, #16]
 800f594:	6823      	ldr	r3, [r4, #0]
 800f596:	b151      	cbz	r1, 800f5ae <_sungetc_r+0x60>
 800f598:	4299      	cmp	r1, r3
 800f59a:	d208      	bcs.n	800f5ae <_sungetc_r+0x60>
 800f59c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f5a0:	42a9      	cmp	r1, r5
 800f5a2:	d104      	bne.n	800f5ae <_sungetc_r+0x60>
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	3201      	adds	r2, #1
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	6062      	str	r2, [r4, #4]
 800f5ac:	e7d5      	b.n	800f55a <_sungetc_r+0xc>
 800f5ae:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f5b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5b6:	6363      	str	r3, [r4, #52]	; 0x34
 800f5b8:	2303      	movs	r3, #3
 800f5ba:	63a3      	str	r3, [r4, #56]	; 0x38
 800f5bc:	4623      	mov	r3, r4
 800f5be:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f5c2:	6023      	str	r3, [r4, #0]
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	e7dc      	b.n	800f582 <_sungetc_r+0x34>

0800f5c8 <__ssrefill_r>:
 800f5c8:	b510      	push	{r4, lr}
 800f5ca:	460c      	mov	r4, r1
 800f5cc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f5ce:	b169      	cbz	r1, 800f5ec <__ssrefill_r+0x24>
 800f5d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5d4:	4299      	cmp	r1, r3
 800f5d6:	d001      	beq.n	800f5dc <__ssrefill_r+0x14>
 800f5d8:	f7fe fa00 	bl	800d9dc <_free_r>
 800f5dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f5de:	6063      	str	r3, [r4, #4]
 800f5e0:	2000      	movs	r0, #0
 800f5e2:	6360      	str	r0, [r4, #52]	; 0x34
 800f5e4:	b113      	cbz	r3, 800f5ec <__ssrefill_r+0x24>
 800f5e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f5e8:	6023      	str	r3, [r4, #0]
 800f5ea:	bd10      	pop	{r4, pc}
 800f5ec:	6923      	ldr	r3, [r4, #16]
 800f5ee:	6023      	str	r3, [r4, #0]
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	6063      	str	r3, [r4, #4]
 800f5f4:	89a3      	ldrh	r3, [r4, #12]
 800f5f6:	f043 0320 	orr.w	r3, r3, #32
 800f5fa:	81a3      	strh	r3, [r4, #12]
 800f5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f600:	e7f3      	b.n	800f5ea <__ssrefill_r+0x22>
	...

0800f604 <__ssvfiscanf_r>:
 800f604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f608:	460c      	mov	r4, r1
 800f60a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f60e:	2100      	movs	r1, #0
 800f610:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f614:	49a6      	ldr	r1, [pc, #664]	; (800f8b0 <__ssvfiscanf_r+0x2ac>)
 800f616:	91a0      	str	r1, [sp, #640]	; 0x280
 800f618:	f10d 0804 	add.w	r8, sp, #4
 800f61c:	49a5      	ldr	r1, [pc, #660]	; (800f8b4 <__ssvfiscanf_r+0x2b0>)
 800f61e:	4fa6      	ldr	r7, [pc, #664]	; (800f8b8 <__ssvfiscanf_r+0x2b4>)
 800f620:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f8bc <__ssvfiscanf_r+0x2b8>
 800f624:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f628:	4606      	mov	r6, r0
 800f62a:	91a1      	str	r1, [sp, #644]	; 0x284
 800f62c:	9300      	str	r3, [sp, #0]
 800f62e:	7813      	ldrb	r3, [r2, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	f000 815a 	beq.w	800f8ea <__ssvfiscanf_r+0x2e6>
 800f636:	5dd9      	ldrb	r1, [r3, r7]
 800f638:	f011 0108 	ands.w	r1, r1, #8
 800f63c:	f102 0501 	add.w	r5, r2, #1
 800f640:	d019      	beq.n	800f676 <__ssvfiscanf_r+0x72>
 800f642:	6863      	ldr	r3, [r4, #4]
 800f644:	2b00      	cmp	r3, #0
 800f646:	dd0f      	ble.n	800f668 <__ssvfiscanf_r+0x64>
 800f648:	6823      	ldr	r3, [r4, #0]
 800f64a:	781a      	ldrb	r2, [r3, #0]
 800f64c:	5cba      	ldrb	r2, [r7, r2]
 800f64e:	0712      	lsls	r2, r2, #28
 800f650:	d401      	bmi.n	800f656 <__ssvfiscanf_r+0x52>
 800f652:	462a      	mov	r2, r5
 800f654:	e7eb      	b.n	800f62e <__ssvfiscanf_r+0x2a>
 800f656:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f658:	3201      	adds	r2, #1
 800f65a:	9245      	str	r2, [sp, #276]	; 0x114
 800f65c:	6862      	ldr	r2, [r4, #4]
 800f65e:	3301      	adds	r3, #1
 800f660:	3a01      	subs	r2, #1
 800f662:	6062      	str	r2, [r4, #4]
 800f664:	6023      	str	r3, [r4, #0]
 800f666:	e7ec      	b.n	800f642 <__ssvfiscanf_r+0x3e>
 800f668:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f66a:	4621      	mov	r1, r4
 800f66c:	4630      	mov	r0, r6
 800f66e:	4798      	blx	r3
 800f670:	2800      	cmp	r0, #0
 800f672:	d0e9      	beq.n	800f648 <__ssvfiscanf_r+0x44>
 800f674:	e7ed      	b.n	800f652 <__ssvfiscanf_r+0x4e>
 800f676:	2b25      	cmp	r3, #37	; 0x25
 800f678:	d012      	beq.n	800f6a0 <__ssvfiscanf_r+0x9c>
 800f67a:	469a      	mov	sl, r3
 800f67c:	6863      	ldr	r3, [r4, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f340 8091 	ble.w	800f7a6 <__ssvfiscanf_r+0x1a2>
 800f684:	6822      	ldr	r2, [r4, #0]
 800f686:	7813      	ldrb	r3, [r2, #0]
 800f688:	4553      	cmp	r3, sl
 800f68a:	f040 812e 	bne.w	800f8ea <__ssvfiscanf_r+0x2e6>
 800f68e:	6863      	ldr	r3, [r4, #4]
 800f690:	3b01      	subs	r3, #1
 800f692:	6063      	str	r3, [r4, #4]
 800f694:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f696:	3201      	adds	r2, #1
 800f698:	3301      	adds	r3, #1
 800f69a:	6022      	str	r2, [r4, #0]
 800f69c:	9345      	str	r3, [sp, #276]	; 0x114
 800f69e:	e7d8      	b.n	800f652 <__ssvfiscanf_r+0x4e>
 800f6a0:	9141      	str	r1, [sp, #260]	; 0x104
 800f6a2:	9143      	str	r1, [sp, #268]	; 0x10c
 800f6a4:	7853      	ldrb	r3, [r2, #1]
 800f6a6:	2b2a      	cmp	r3, #42	; 0x2a
 800f6a8:	bf02      	ittt	eq
 800f6aa:	2310      	moveq	r3, #16
 800f6ac:	1c95      	addeq	r5, r2, #2
 800f6ae:	9341      	streq	r3, [sp, #260]	; 0x104
 800f6b0:	220a      	movs	r2, #10
 800f6b2:	46aa      	mov	sl, r5
 800f6b4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f6b8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f6bc:	2b09      	cmp	r3, #9
 800f6be:	d91d      	bls.n	800f6fc <__ssvfiscanf_r+0xf8>
 800f6c0:	487e      	ldr	r0, [pc, #504]	; (800f8bc <__ssvfiscanf_r+0x2b8>)
 800f6c2:	2203      	movs	r2, #3
 800f6c4:	f7f0 fda4 	bl	8000210 <memchr>
 800f6c8:	b140      	cbz	r0, 800f6dc <__ssvfiscanf_r+0xd8>
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	eba0 0009 	sub.w	r0, r0, r9
 800f6d0:	fa03 f000 	lsl.w	r0, r3, r0
 800f6d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f6d6:	4318      	orrs	r0, r3
 800f6d8:	9041      	str	r0, [sp, #260]	; 0x104
 800f6da:	4655      	mov	r5, sl
 800f6dc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f6e0:	2b78      	cmp	r3, #120	; 0x78
 800f6e2:	d806      	bhi.n	800f6f2 <__ssvfiscanf_r+0xee>
 800f6e4:	2b57      	cmp	r3, #87	; 0x57
 800f6e6:	d810      	bhi.n	800f70a <__ssvfiscanf_r+0x106>
 800f6e8:	2b25      	cmp	r3, #37	; 0x25
 800f6ea:	d0c6      	beq.n	800f67a <__ssvfiscanf_r+0x76>
 800f6ec:	d856      	bhi.n	800f79c <__ssvfiscanf_r+0x198>
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d064      	beq.n	800f7bc <__ssvfiscanf_r+0x1b8>
 800f6f2:	2303      	movs	r3, #3
 800f6f4:	9347      	str	r3, [sp, #284]	; 0x11c
 800f6f6:	230a      	movs	r3, #10
 800f6f8:	9342      	str	r3, [sp, #264]	; 0x108
 800f6fa:	e071      	b.n	800f7e0 <__ssvfiscanf_r+0x1dc>
 800f6fc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f6fe:	fb02 1103 	mla	r1, r2, r3, r1
 800f702:	3930      	subs	r1, #48	; 0x30
 800f704:	9143      	str	r1, [sp, #268]	; 0x10c
 800f706:	4655      	mov	r5, sl
 800f708:	e7d3      	b.n	800f6b2 <__ssvfiscanf_r+0xae>
 800f70a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f70e:	2a20      	cmp	r2, #32
 800f710:	d8ef      	bhi.n	800f6f2 <__ssvfiscanf_r+0xee>
 800f712:	a101      	add	r1, pc, #4	; (adr r1, 800f718 <__ssvfiscanf_r+0x114>)
 800f714:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f718:	0800f7cb 	.word	0x0800f7cb
 800f71c:	0800f6f3 	.word	0x0800f6f3
 800f720:	0800f6f3 	.word	0x0800f6f3
 800f724:	0800f829 	.word	0x0800f829
 800f728:	0800f6f3 	.word	0x0800f6f3
 800f72c:	0800f6f3 	.word	0x0800f6f3
 800f730:	0800f6f3 	.word	0x0800f6f3
 800f734:	0800f6f3 	.word	0x0800f6f3
 800f738:	0800f6f3 	.word	0x0800f6f3
 800f73c:	0800f6f3 	.word	0x0800f6f3
 800f740:	0800f6f3 	.word	0x0800f6f3
 800f744:	0800f83f 	.word	0x0800f83f
 800f748:	0800f815 	.word	0x0800f815
 800f74c:	0800f7a3 	.word	0x0800f7a3
 800f750:	0800f7a3 	.word	0x0800f7a3
 800f754:	0800f7a3 	.word	0x0800f7a3
 800f758:	0800f6f3 	.word	0x0800f6f3
 800f75c:	0800f819 	.word	0x0800f819
 800f760:	0800f6f3 	.word	0x0800f6f3
 800f764:	0800f6f3 	.word	0x0800f6f3
 800f768:	0800f6f3 	.word	0x0800f6f3
 800f76c:	0800f6f3 	.word	0x0800f6f3
 800f770:	0800f84f 	.word	0x0800f84f
 800f774:	0800f821 	.word	0x0800f821
 800f778:	0800f7c3 	.word	0x0800f7c3
 800f77c:	0800f6f3 	.word	0x0800f6f3
 800f780:	0800f6f3 	.word	0x0800f6f3
 800f784:	0800f84b 	.word	0x0800f84b
 800f788:	0800f6f3 	.word	0x0800f6f3
 800f78c:	0800f815 	.word	0x0800f815
 800f790:	0800f6f3 	.word	0x0800f6f3
 800f794:	0800f6f3 	.word	0x0800f6f3
 800f798:	0800f7cb 	.word	0x0800f7cb
 800f79c:	3b45      	subs	r3, #69	; 0x45
 800f79e:	2b02      	cmp	r3, #2
 800f7a0:	d8a7      	bhi.n	800f6f2 <__ssvfiscanf_r+0xee>
 800f7a2:	2305      	movs	r3, #5
 800f7a4:	e01b      	b.n	800f7de <__ssvfiscanf_r+0x1da>
 800f7a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f7a8:	4621      	mov	r1, r4
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	4798      	blx	r3
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	f43f af68 	beq.w	800f684 <__ssvfiscanf_r+0x80>
 800f7b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	f040 808d 	bne.w	800f8d6 <__ssvfiscanf_r+0x2d2>
 800f7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c0:	e08f      	b.n	800f8e2 <__ssvfiscanf_r+0x2de>
 800f7c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f7c4:	f042 0220 	orr.w	r2, r2, #32
 800f7c8:	9241      	str	r2, [sp, #260]	; 0x104
 800f7ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f7cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f7d0:	9241      	str	r2, [sp, #260]	; 0x104
 800f7d2:	2210      	movs	r2, #16
 800f7d4:	2b6f      	cmp	r3, #111	; 0x6f
 800f7d6:	9242      	str	r2, [sp, #264]	; 0x108
 800f7d8:	bf34      	ite	cc
 800f7da:	2303      	movcc	r3, #3
 800f7dc:	2304      	movcs	r3, #4
 800f7de:	9347      	str	r3, [sp, #284]	; 0x11c
 800f7e0:	6863      	ldr	r3, [r4, #4]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	dd42      	ble.n	800f86c <__ssvfiscanf_r+0x268>
 800f7e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f7e8:	0659      	lsls	r1, r3, #25
 800f7ea:	d404      	bmi.n	800f7f6 <__ssvfiscanf_r+0x1f2>
 800f7ec:	6823      	ldr	r3, [r4, #0]
 800f7ee:	781a      	ldrb	r2, [r3, #0]
 800f7f0:	5cba      	ldrb	r2, [r7, r2]
 800f7f2:	0712      	lsls	r2, r2, #28
 800f7f4:	d441      	bmi.n	800f87a <__ssvfiscanf_r+0x276>
 800f7f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f7f8:	2b02      	cmp	r3, #2
 800f7fa:	dc50      	bgt.n	800f89e <__ssvfiscanf_r+0x29a>
 800f7fc:	466b      	mov	r3, sp
 800f7fe:	4622      	mov	r2, r4
 800f800:	a941      	add	r1, sp, #260	; 0x104
 800f802:	4630      	mov	r0, r6
 800f804:	f000 f876 	bl	800f8f4 <_scanf_chars>
 800f808:	2801      	cmp	r0, #1
 800f80a:	d06e      	beq.n	800f8ea <__ssvfiscanf_r+0x2e6>
 800f80c:	2802      	cmp	r0, #2
 800f80e:	f47f af20 	bne.w	800f652 <__ssvfiscanf_r+0x4e>
 800f812:	e7cf      	b.n	800f7b4 <__ssvfiscanf_r+0x1b0>
 800f814:	220a      	movs	r2, #10
 800f816:	e7dd      	b.n	800f7d4 <__ssvfiscanf_r+0x1d0>
 800f818:	2300      	movs	r3, #0
 800f81a:	9342      	str	r3, [sp, #264]	; 0x108
 800f81c:	2303      	movs	r3, #3
 800f81e:	e7de      	b.n	800f7de <__ssvfiscanf_r+0x1da>
 800f820:	2308      	movs	r3, #8
 800f822:	9342      	str	r3, [sp, #264]	; 0x108
 800f824:	2304      	movs	r3, #4
 800f826:	e7da      	b.n	800f7de <__ssvfiscanf_r+0x1da>
 800f828:	4629      	mov	r1, r5
 800f82a:	4640      	mov	r0, r8
 800f82c:	f000 f9b4 	bl	800fb98 <__sccl>
 800f830:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f836:	9341      	str	r3, [sp, #260]	; 0x104
 800f838:	4605      	mov	r5, r0
 800f83a:	2301      	movs	r3, #1
 800f83c:	e7cf      	b.n	800f7de <__ssvfiscanf_r+0x1da>
 800f83e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f844:	9341      	str	r3, [sp, #260]	; 0x104
 800f846:	2300      	movs	r3, #0
 800f848:	e7c9      	b.n	800f7de <__ssvfiscanf_r+0x1da>
 800f84a:	2302      	movs	r3, #2
 800f84c:	e7c7      	b.n	800f7de <__ssvfiscanf_r+0x1da>
 800f84e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f850:	06c3      	lsls	r3, r0, #27
 800f852:	f53f aefe 	bmi.w	800f652 <__ssvfiscanf_r+0x4e>
 800f856:	9b00      	ldr	r3, [sp, #0]
 800f858:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f85a:	1d19      	adds	r1, r3, #4
 800f85c:	9100      	str	r1, [sp, #0]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f010 0f01 	tst.w	r0, #1
 800f864:	bf14      	ite	ne
 800f866:	801a      	strhne	r2, [r3, #0]
 800f868:	601a      	streq	r2, [r3, #0]
 800f86a:	e6f2      	b.n	800f652 <__ssvfiscanf_r+0x4e>
 800f86c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f86e:	4621      	mov	r1, r4
 800f870:	4630      	mov	r0, r6
 800f872:	4798      	blx	r3
 800f874:	2800      	cmp	r0, #0
 800f876:	d0b6      	beq.n	800f7e6 <__ssvfiscanf_r+0x1e2>
 800f878:	e79c      	b.n	800f7b4 <__ssvfiscanf_r+0x1b0>
 800f87a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f87c:	3201      	adds	r2, #1
 800f87e:	9245      	str	r2, [sp, #276]	; 0x114
 800f880:	6862      	ldr	r2, [r4, #4]
 800f882:	3a01      	subs	r2, #1
 800f884:	2a00      	cmp	r2, #0
 800f886:	6062      	str	r2, [r4, #4]
 800f888:	dd02      	ble.n	800f890 <__ssvfiscanf_r+0x28c>
 800f88a:	3301      	adds	r3, #1
 800f88c:	6023      	str	r3, [r4, #0]
 800f88e:	e7ad      	b.n	800f7ec <__ssvfiscanf_r+0x1e8>
 800f890:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f892:	4621      	mov	r1, r4
 800f894:	4630      	mov	r0, r6
 800f896:	4798      	blx	r3
 800f898:	2800      	cmp	r0, #0
 800f89a:	d0a7      	beq.n	800f7ec <__ssvfiscanf_r+0x1e8>
 800f89c:	e78a      	b.n	800f7b4 <__ssvfiscanf_r+0x1b0>
 800f89e:	2b04      	cmp	r3, #4
 800f8a0:	dc0e      	bgt.n	800f8c0 <__ssvfiscanf_r+0x2bc>
 800f8a2:	466b      	mov	r3, sp
 800f8a4:	4622      	mov	r2, r4
 800f8a6:	a941      	add	r1, sp, #260	; 0x104
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	f000 f87d 	bl	800f9a8 <_scanf_i>
 800f8ae:	e7ab      	b.n	800f808 <__ssvfiscanf_r+0x204>
 800f8b0:	0800f54f 	.word	0x0800f54f
 800f8b4:	0800f5c9 	.word	0x0800f5c9
 800f8b8:	080109dd 	.word	0x080109dd
 800f8bc:	08010ae3 	.word	0x08010ae3
 800f8c0:	4b0b      	ldr	r3, [pc, #44]	; (800f8f0 <__ssvfiscanf_r+0x2ec>)
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	f43f aec5 	beq.w	800f652 <__ssvfiscanf_r+0x4e>
 800f8c8:	466b      	mov	r3, sp
 800f8ca:	4622      	mov	r2, r4
 800f8cc:	a941      	add	r1, sp, #260	; 0x104
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	f3af 8000 	nop.w
 800f8d4:	e798      	b.n	800f808 <__ssvfiscanf_r+0x204>
 800f8d6:	89a3      	ldrh	r3, [r4, #12]
 800f8d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f8dc:	bf18      	it	ne
 800f8de:	f04f 30ff 	movne.w	r0, #4294967295
 800f8e2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ea:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f8ec:	e7f9      	b.n	800f8e2 <__ssvfiscanf_r+0x2de>
 800f8ee:	bf00      	nop
 800f8f0:	00000000 	.word	0x00000000

0800f8f4 <_scanf_chars>:
 800f8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8f8:	4615      	mov	r5, r2
 800f8fa:	688a      	ldr	r2, [r1, #8]
 800f8fc:	4680      	mov	r8, r0
 800f8fe:	460c      	mov	r4, r1
 800f900:	b932      	cbnz	r2, 800f910 <_scanf_chars+0x1c>
 800f902:	698a      	ldr	r2, [r1, #24]
 800f904:	2a00      	cmp	r2, #0
 800f906:	bf0c      	ite	eq
 800f908:	2201      	moveq	r2, #1
 800f90a:	f04f 32ff 	movne.w	r2, #4294967295
 800f90e:	608a      	str	r2, [r1, #8]
 800f910:	6822      	ldr	r2, [r4, #0]
 800f912:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f9a4 <_scanf_chars+0xb0>
 800f916:	06d1      	lsls	r1, r2, #27
 800f918:	bf5f      	itttt	pl
 800f91a:	681a      	ldrpl	r2, [r3, #0]
 800f91c:	1d11      	addpl	r1, r2, #4
 800f91e:	6019      	strpl	r1, [r3, #0]
 800f920:	6816      	ldrpl	r6, [r2, #0]
 800f922:	2700      	movs	r7, #0
 800f924:	69a0      	ldr	r0, [r4, #24]
 800f926:	b188      	cbz	r0, 800f94c <_scanf_chars+0x58>
 800f928:	2801      	cmp	r0, #1
 800f92a:	d107      	bne.n	800f93c <_scanf_chars+0x48>
 800f92c:	682a      	ldr	r2, [r5, #0]
 800f92e:	7811      	ldrb	r1, [r2, #0]
 800f930:	6962      	ldr	r2, [r4, #20]
 800f932:	5c52      	ldrb	r2, [r2, r1]
 800f934:	b952      	cbnz	r2, 800f94c <_scanf_chars+0x58>
 800f936:	2f00      	cmp	r7, #0
 800f938:	d031      	beq.n	800f99e <_scanf_chars+0xaa>
 800f93a:	e022      	b.n	800f982 <_scanf_chars+0x8e>
 800f93c:	2802      	cmp	r0, #2
 800f93e:	d120      	bne.n	800f982 <_scanf_chars+0x8e>
 800f940:	682b      	ldr	r3, [r5, #0]
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f948:	071b      	lsls	r3, r3, #28
 800f94a:	d41a      	bmi.n	800f982 <_scanf_chars+0x8e>
 800f94c:	6823      	ldr	r3, [r4, #0]
 800f94e:	06da      	lsls	r2, r3, #27
 800f950:	bf5e      	ittt	pl
 800f952:	682b      	ldrpl	r3, [r5, #0]
 800f954:	781b      	ldrbpl	r3, [r3, #0]
 800f956:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f95a:	682a      	ldr	r2, [r5, #0]
 800f95c:	686b      	ldr	r3, [r5, #4]
 800f95e:	3201      	adds	r2, #1
 800f960:	602a      	str	r2, [r5, #0]
 800f962:	68a2      	ldr	r2, [r4, #8]
 800f964:	3b01      	subs	r3, #1
 800f966:	3a01      	subs	r2, #1
 800f968:	606b      	str	r3, [r5, #4]
 800f96a:	3701      	adds	r7, #1
 800f96c:	60a2      	str	r2, [r4, #8]
 800f96e:	b142      	cbz	r2, 800f982 <_scanf_chars+0x8e>
 800f970:	2b00      	cmp	r3, #0
 800f972:	dcd7      	bgt.n	800f924 <_scanf_chars+0x30>
 800f974:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f978:	4629      	mov	r1, r5
 800f97a:	4640      	mov	r0, r8
 800f97c:	4798      	blx	r3
 800f97e:	2800      	cmp	r0, #0
 800f980:	d0d0      	beq.n	800f924 <_scanf_chars+0x30>
 800f982:	6823      	ldr	r3, [r4, #0]
 800f984:	f013 0310 	ands.w	r3, r3, #16
 800f988:	d105      	bne.n	800f996 <_scanf_chars+0xa2>
 800f98a:	68e2      	ldr	r2, [r4, #12]
 800f98c:	3201      	adds	r2, #1
 800f98e:	60e2      	str	r2, [r4, #12]
 800f990:	69a2      	ldr	r2, [r4, #24]
 800f992:	b102      	cbz	r2, 800f996 <_scanf_chars+0xa2>
 800f994:	7033      	strb	r3, [r6, #0]
 800f996:	6923      	ldr	r3, [r4, #16]
 800f998:	443b      	add	r3, r7
 800f99a:	6123      	str	r3, [r4, #16]
 800f99c:	2000      	movs	r0, #0
 800f99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9a2:	bf00      	nop
 800f9a4:	080109dd 	.word	0x080109dd

0800f9a8 <_scanf_i>:
 800f9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ac:	4698      	mov	r8, r3
 800f9ae:	4b76      	ldr	r3, [pc, #472]	; (800fb88 <_scanf_i+0x1e0>)
 800f9b0:	460c      	mov	r4, r1
 800f9b2:	4682      	mov	sl, r0
 800f9b4:	4616      	mov	r6, r2
 800f9b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f9ba:	b087      	sub	sp, #28
 800f9bc:	ab03      	add	r3, sp, #12
 800f9be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f9c2:	4b72      	ldr	r3, [pc, #456]	; (800fb8c <_scanf_i+0x1e4>)
 800f9c4:	69a1      	ldr	r1, [r4, #24]
 800f9c6:	4a72      	ldr	r2, [pc, #456]	; (800fb90 <_scanf_i+0x1e8>)
 800f9c8:	2903      	cmp	r1, #3
 800f9ca:	bf18      	it	ne
 800f9cc:	461a      	movne	r2, r3
 800f9ce:	68a3      	ldr	r3, [r4, #8]
 800f9d0:	9201      	str	r2, [sp, #4]
 800f9d2:	1e5a      	subs	r2, r3, #1
 800f9d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f9d8:	bf88      	it	hi
 800f9da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f9de:	4627      	mov	r7, r4
 800f9e0:	bf82      	ittt	hi
 800f9e2:	eb03 0905 	addhi.w	r9, r3, r5
 800f9e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f9ea:	60a3      	strhi	r3, [r4, #8]
 800f9ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f9f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f9f4:	bf98      	it	ls
 800f9f6:	f04f 0900 	movls.w	r9, #0
 800f9fa:	6023      	str	r3, [r4, #0]
 800f9fc:	463d      	mov	r5, r7
 800f9fe:	f04f 0b00 	mov.w	fp, #0
 800fa02:	6831      	ldr	r1, [r6, #0]
 800fa04:	ab03      	add	r3, sp, #12
 800fa06:	7809      	ldrb	r1, [r1, #0]
 800fa08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fa0c:	2202      	movs	r2, #2
 800fa0e:	f7f0 fbff 	bl	8000210 <memchr>
 800fa12:	b328      	cbz	r0, 800fa60 <_scanf_i+0xb8>
 800fa14:	f1bb 0f01 	cmp.w	fp, #1
 800fa18:	d159      	bne.n	800face <_scanf_i+0x126>
 800fa1a:	6862      	ldr	r2, [r4, #4]
 800fa1c:	b92a      	cbnz	r2, 800fa2a <_scanf_i+0x82>
 800fa1e:	6822      	ldr	r2, [r4, #0]
 800fa20:	2308      	movs	r3, #8
 800fa22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa26:	6063      	str	r3, [r4, #4]
 800fa28:	6022      	str	r2, [r4, #0]
 800fa2a:	6822      	ldr	r2, [r4, #0]
 800fa2c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fa30:	6022      	str	r2, [r4, #0]
 800fa32:	68a2      	ldr	r2, [r4, #8]
 800fa34:	1e51      	subs	r1, r2, #1
 800fa36:	60a1      	str	r1, [r4, #8]
 800fa38:	b192      	cbz	r2, 800fa60 <_scanf_i+0xb8>
 800fa3a:	6832      	ldr	r2, [r6, #0]
 800fa3c:	1c51      	adds	r1, r2, #1
 800fa3e:	6031      	str	r1, [r6, #0]
 800fa40:	7812      	ldrb	r2, [r2, #0]
 800fa42:	f805 2b01 	strb.w	r2, [r5], #1
 800fa46:	6872      	ldr	r2, [r6, #4]
 800fa48:	3a01      	subs	r2, #1
 800fa4a:	2a00      	cmp	r2, #0
 800fa4c:	6072      	str	r2, [r6, #4]
 800fa4e:	dc07      	bgt.n	800fa60 <_scanf_i+0xb8>
 800fa50:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fa54:	4631      	mov	r1, r6
 800fa56:	4650      	mov	r0, sl
 800fa58:	4790      	blx	r2
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	f040 8085 	bne.w	800fb6a <_scanf_i+0x1c2>
 800fa60:	f10b 0b01 	add.w	fp, fp, #1
 800fa64:	f1bb 0f03 	cmp.w	fp, #3
 800fa68:	d1cb      	bne.n	800fa02 <_scanf_i+0x5a>
 800fa6a:	6863      	ldr	r3, [r4, #4]
 800fa6c:	b90b      	cbnz	r3, 800fa72 <_scanf_i+0xca>
 800fa6e:	230a      	movs	r3, #10
 800fa70:	6063      	str	r3, [r4, #4]
 800fa72:	6863      	ldr	r3, [r4, #4]
 800fa74:	4947      	ldr	r1, [pc, #284]	; (800fb94 <_scanf_i+0x1ec>)
 800fa76:	6960      	ldr	r0, [r4, #20]
 800fa78:	1ac9      	subs	r1, r1, r3
 800fa7a:	f000 f88d 	bl	800fb98 <__sccl>
 800fa7e:	f04f 0b00 	mov.w	fp, #0
 800fa82:	68a3      	ldr	r3, [r4, #8]
 800fa84:	6822      	ldr	r2, [r4, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d03d      	beq.n	800fb06 <_scanf_i+0x15e>
 800fa8a:	6831      	ldr	r1, [r6, #0]
 800fa8c:	6960      	ldr	r0, [r4, #20]
 800fa8e:	f891 c000 	ldrb.w	ip, [r1]
 800fa92:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d035      	beq.n	800fb06 <_scanf_i+0x15e>
 800fa9a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fa9e:	d124      	bne.n	800faea <_scanf_i+0x142>
 800faa0:	0510      	lsls	r0, r2, #20
 800faa2:	d522      	bpl.n	800faea <_scanf_i+0x142>
 800faa4:	f10b 0b01 	add.w	fp, fp, #1
 800faa8:	f1b9 0f00 	cmp.w	r9, #0
 800faac:	d003      	beq.n	800fab6 <_scanf_i+0x10e>
 800faae:	3301      	adds	r3, #1
 800fab0:	f109 39ff 	add.w	r9, r9, #4294967295
 800fab4:	60a3      	str	r3, [r4, #8]
 800fab6:	6873      	ldr	r3, [r6, #4]
 800fab8:	3b01      	subs	r3, #1
 800faba:	2b00      	cmp	r3, #0
 800fabc:	6073      	str	r3, [r6, #4]
 800fabe:	dd1b      	ble.n	800faf8 <_scanf_i+0x150>
 800fac0:	6833      	ldr	r3, [r6, #0]
 800fac2:	3301      	adds	r3, #1
 800fac4:	6033      	str	r3, [r6, #0]
 800fac6:	68a3      	ldr	r3, [r4, #8]
 800fac8:	3b01      	subs	r3, #1
 800faca:	60a3      	str	r3, [r4, #8]
 800facc:	e7d9      	b.n	800fa82 <_scanf_i+0xda>
 800face:	f1bb 0f02 	cmp.w	fp, #2
 800fad2:	d1ae      	bne.n	800fa32 <_scanf_i+0x8a>
 800fad4:	6822      	ldr	r2, [r4, #0]
 800fad6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fada:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fade:	d1bf      	bne.n	800fa60 <_scanf_i+0xb8>
 800fae0:	2310      	movs	r3, #16
 800fae2:	6063      	str	r3, [r4, #4]
 800fae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fae8:	e7a2      	b.n	800fa30 <_scanf_i+0x88>
 800faea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800faee:	6022      	str	r2, [r4, #0]
 800faf0:	780b      	ldrb	r3, [r1, #0]
 800faf2:	f805 3b01 	strb.w	r3, [r5], #1
 800faf6:	e7de      	b.n	800fab6 <_scanf_i+0x10e>
 800faf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fafc:	4631      	mov	r1, r6
 800fafe:	4650      	mov	r0, sl
 800fb00:	4798      	blx	r3
 800fb02:	2800      	cmp	r0, #0
 800fb04:	d0df      	beq.n	800fac6 <_scanf_i+0x11e>
 800fb06:	6823      	ldr	r3, [r4, #0]
 800fb08:	05db      	lsls	r3, r3, #23
 800fb0a:	d50d      	bpl.n	800fb28 <_scanf_i+0x180>
 800fb0c:	42bd      	cmp	r5, r7
 800fb0e:	d909      	bls.n	800fb24 <_scanf_i+0x17c>
 800fb10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fb14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb18:	4632      	mov	r2, r6
 800fb1a:	4650      	mov	r0, sl
 800fb1c:	4798      	blx	r3
 800fb1e:	f105 39ff 	add.w	r9, r5, #4294967295
 800fb22:	464d      	mov	r5, r9
 800fb24:	42bd      	cmp	r5, r7
 800fb26:	d02d      	beq.n	800fb84 <_scanf_i+0x1dc>
 800fb28:	6822      	ldr	r2, [r4, #0]
 800fb2a:	f012 0210 	ands.w	r2, r2, #16
 800fb2e:	d113      	bne.n	800fb58 <_scanf_i+0x1b0>
 800fb30:	702a      	strb	r2, [r5, #0]
 800fb32:	6863      	ldr	r3, [r4, #4]
 800fb34:	9e01      	ldr	r6, [sp, #4]
 800fb36:	4639      	mov	r1, r7
 800fb38:	4650      	mov	r0, sl
 800fb3a:	47b0      	blx	r6
 800fb3c:	6821      	ldr	r1, [r4, #0]
 800fb3e:	f8d8 3000 	ldr.w	r3, [r8]
 800fb42:	f011 0f20 	tst.w	r1, #32
 800fb46:	d013      	beq.n	800fb70 <_scanf_i+0x1c8>
 800fb48:	1d1a      	adds	r2, r3, #4
 800fb4a:	f8c8 2000 	str.w	r2, [r8]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	6018      	str	r0, [r3, #0]
 800fb52:	68e3      	ldr	r3, [r4, #12]
 800fb54:	3301      	adds	r3, #1
 800fb56:	60e3      	str	r3, [r4, #12]
 800fb58:	1bed      	subs	r5, r5, r7
 800fb5a:	44ab      	add	fp, r5
 800fb5c:	6925      	ldr	r5, [r4, #16]
 800fb5e:	445d      	add	r5, fp
 800fb60:	6125      	str	r5, [r4, #16]
 800fb62:	2000      	movs	r0, #0
 800fb64:	b007      	add	sp, #28
 800fb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb6a:	f04f 0b00 	mov.w	fp, #0
 800fb6e:	e7ca      	b.n	800fb06 <_scanf_i+0x15e>
 800fb70:	1d1a      	adds	r2, r3, #4
 800fb72:	f8c8 2000 	str.w	r2, [r8]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f011 0f01 	tst.w	r1, #1
 800fb7c:	bf14      	ite	ne
 800fb7e:	8018      	strhne	r0, [r3, #0]
 800fb80:	6018      	streq	r0, [r3, #0]
 800fb82:	e7e6      	b.n	800fb52 <_scanf_i+0x1aa>
 800fb84:	2001      	movs	r0, #1
 800fb86:	e7ed      	b.n	800fb64 <_scanf_i+0x1bc>
 800fb88:	08010254 	.word	0x08010254
 800fb8c:	0800e875 	.word	0x0800e875
 800fb90:	0800e779 	.word	0x0800e779
 800fb94:	08010b89 	.word	0x08010b89

0800fb98 <__sccl>:
 800fb98:	b570      	push	{r4, r5, r6, lr}
 800fb9a:	780b      	ldrb	r3, [r1, #0]
 800fb9c:	4604      	mov	r4, r0
 800fb9e:	2b5e      	cmp	r3, #94	; 0x5e
 800fba0:	bf0b      	itete	eq
 800fba2:	784b      	ldrbeq	r3, [r1, #1]
 800fba4:	1c48      	addne	r0, r1, #1
 800fba6:	1c88      	addeq	r0, r1, #2
 800fba8:	2200      	movne	r2, #0
 800fbaa:	bf08      	it	eq
 800fbac:	2201      	moveq	r2, #1
 800fbae:	1e61      	subs	r1, r4, #1
 800fbb0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fbb4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800fbb8:	42a9      	cmp	r1, r5
 800fbba:	d1fb      	bne.n	800fbb4 <__sccl+0x1c>
 800fbbc:	b90b      	cbnz	r3, 800fbc2 <__sccl+0x2a>
 800fbbe:	3801      	subs	r0, #1
 800fbc0:	bd70      	pop	{r4, r5, r6, pc}
 800fbc2:	f082 0201 	eor.w	r2, r2, #1
 800fbc6:	54e2      	strb	r2, [r4, r3]
 800fbc8:	4605      	mov	r5, r0
 800fbca:	4628      	mov	r0, r5
 800fbcc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fbd0:	292d      	cmp	r1, #45	; 0x2d
 800fbd2:	d006      	beq.n	800fbe2 <__sccl+0x4a>
 800fbd4:	295d      	cmp	r1, #93	; 0x5d
 800fbd6:	d0f3      	beq.n	800fbc0 <__sccl+0x28>
 800fbd8:	b909      	cbnz	r1, 800fbde <__sccl+0x46>
 800fbda:	4628      	mov	r0, r5
 800fbdc:	e7f0      	b.n	800fbc0 <__sccl+0x28>
 800fbde:	460b      	mov	r3, r1
 800fbe0:	e7f1      	b.n	800fbc6 <__sccl+0x2e>
 800fbe2:	786e      	ldrb	r6, [r5, #1]
 800fbe4:	2e5d      	cmp	r6, #93	; 0x5d
 800fbe6:	d0fa      	beq.n	800fbde <__sccl+0x46>
 800fbe8:	42b3      	cmp	r3, r6
 800fbea:	dcf8      	bgt.n	800fbde <__sccl+0x46>
 800fbec:	3502      	adds	r5, #2
 800fbee:	4619      	mov	r1, r3
 800fbf0:	3101      	adds	r1, #1
 800fbf2:	428e      	cmp	r6, r1
 800fbf4:	5462      	strb	r2, [r4, r1]
 800fbf6:	dcfb      	bgt.n	800fbf0 <__sccl+0x58>
 800fbf8:	1af1      	subs	r1, r6, r3
 800fbfa:	3901      	subs	r1, #1
 800fbfc:	1c58      	adds	r0, r3, #1
 800fbfe:	42b3      	cmp	r3, r6
 800fc00:	bfa8      	it	ge
 800fc02:	2100      	movge	r1, #0
 800fc04:	1843      	adds	r3, r0, r1
 800fc06:	e7e0      	b.n	800fbca <__sccl+0x32>

0800fc08 <__submore>:
 800fc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0c:	460c      	mov	r4, r1
 800fc0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fc10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc14:	4299      	cmp	r1, r3
 800fc16:	d11d      	bne.n	800fc54 <__submore+0x4c>
 800fc18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fc1c:	f7fd ff4a 	bl	800dab4 <_malloc_r>
 800fc20:	b918      	cbnz	r0, 800fc2a <__submore+0x22>
 800fc22:	f04f 30ff 	mov.w	r0, #4294967295
 800fc26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc2e:	63a3      	str	r3, [r4, #56]	; 0x38
 800fc30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fc34:	6360      	str	r0, [r4, #52]	; 0x34
 800fc36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fc3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fc3e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fc42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fc46:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fc4a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fc4e:	6020      	str	r0, [r4, #0]
 800fc50:	2000      	movs	r0, #0
 800fc52:	e7e8      	b.n	800fc26 <__submore+0x1e>
 800fc54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fc56:	0077      	lsls	r7, r6, #1
 800fc58:	463a      	mov	r2, r7
 800fc5a:	f7ff fc49 	bl	800f4f0 <_realloc_r>
 800fc5e:	4605      	mov	r5, r0
 800fc60:	2800      	cmp	r0, #0
 800fc62:	d0de      	beq.n	800fc22 <__submore+0x1a>
 800fc64:	eb00 0806 	add.w	r8, r0, r6
 800fc68:	4601      	mov	r1, r0
 800fc6a:	4632      	mov	r2, r6
 800fc6c:	4640      	mov	r0, r8
 800fc6e:	f7fd fe9f 	bl	800d9b0 <memcpy>
 800fc72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fc76:	f8c4 8000 	str.w	r8, [r4]
 800fc7a:	e7e9      	b.n	800fc50 <__submore+0x48>

0800fc7c <_malloc_usable_size_r>:
 800fc7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc80:	1f18      	subs	r0, r3, #4
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	bfbc      	itt	lt
 800fc86:	580b      	ldrlt	r3, [r1, r0]
 800fc88:	18c0      	addlt	r0, r0, r3
 800fc8a:	4770      	bx	lr

0800fc8c <sqrt>:
 800fc8c:	b538      	push	{r3, r4, r5, lr}
 800fc8e:	ed2d 8b02 	vpush	{d8}
 800fc92:	ec55 4b10 	vmov	r4, r5, d0
 800fc96:	f000 f825 	bl	800fce4 <__ieee754_sqrt>
 800fc9a:	4622      	mov	r2, r4
 800fc9c:	462b      	mov	r3, r5
 800fc9e:	4620      	mov	r0, r4
 800fca0:	4629      	mov	r1, r5
 800fca2:	eeb0 8a40 	vmov.f32	s16, s0
 800fca6:	eef0 8a60 	vmov.f32	s17, s1
 800fcaa:	f7f0 ff57 	bl	8000b5c <__aeabi_dcmpun>
 800fcae:	b990      	cbnz	r0, 800fcd6 <sqrt+0x4a>
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	4629      	mov	r1, r5
 800fcb8:	f7f0 ff28 	bl	8000b0c <__aeabi_dcmplt>
 800fcbc:	b158      	cbz	r0, 800fcd6 <sqrt+0x4a>
 800fcbe:	f7fd fe49 	bl	800d954 <__errno>
 800fcc2:	2321      	movs	r3, #33	; 0x21
 800fcc4:	6003      	str	r3, [r0, #0]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	2300      	movs	r3, #0
 800fcca:	4610      	mov	r0, r2
 800fccc:	4619      	mov	r1, r3
 800fcce:	f7f0 fdd5 	bl	800087c <__aeabi_ddiv>
 800fcd2:	ec41 0b18 	vmov	d8, r0, r1
 800fcd6:	eeb0 0a48 	vmov.f32	s0, s16
 800fcda:	eef0 0a68 	vmov.f32	s1, s17
 800fcde:	ecbd 8b02 	vpop	{d8}
 800fce2:	bd38      	pop	{r3, r4, r5, pc}

0800fce4 <__ieee754_sqrt>:
 800fce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fce8:	ec55 4b10 	vmov	r4, r5, d0
 800fcec:	4e55      	ldr	r6, [pc, #340]	; (800fe44 <__ieee754_sqrt+0x160>)
 800fcee:	43ae      	bics	r6, r5
 800fcf0:	ee10 0a10 	vmov	r0, s0
 800fcf4:	ee10 3a10 	vmov	r3, s0
 800fcf8:	462a      	mov	r2, r5
 800fcfa:	4629      	mov	r1, r5
 800fcfc:	d110      	bne.n	800fd20 <__ieee754_sqrt+0x3c>
 800fcfe:	ee10 2a10 	vmov	r2, s0
 800fd02:	462b      	mov	r3, r5
 800fd04:	f7f0 fc90 	bl	8000628 <__aeabi_dmul>
 800fd08:	4602      	mov	r2, r0
 800fd0a:	460b      	mov	r3, r1
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	4629      	mov	r1, r5
 800fd10:	f7f0 fad4 	bl	80002bc <__adddf3>
 800fd14:	4604      	mov	r4, r0
 800fd16:	460d      	mov	r5, r1
 800fd18:	ec45 4b10 	vmov	d0, r4, r5
 800fd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd20:	2d00      	cmp	r5, #0
 800fd22:	dc10      	bgt.n	800fd46 <__ieee754_sqrt+0x62>
 800fd24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fd28:	4330      	orrs	r0, r6
 800fd2a:	d0f5      	beq.n	800fd18 <__ieee754_sqrt+0x34>
 800fd2c:	b15d      	cbz	r5, 800fd46 <__ieee754_sqrt+0x62>
 800fd2e:	ee10 2a10 	vmov	r2, s0
 800fd32:	462b      	mov	r3, r5
 800fd34:	ee10 0a10 	vmov	r0, s0
 800fd38:	f7f0 fabe 	bl	80002b8 <__aeabi_dsub>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	460b      	mov	r3, r1
 800fd40:	f7f0 fd9c 	bl	800087c <__aeabi_ddiv>
 800fd44:	e7e6      	b.n	800fd14 <__ieee754_sqrt+0x30>
 800fd46:	1512      	asrs	r2, r2, #20
 800fd48:	d074      	beq.n	800fe34 <__ieee754_sqrt+0x150>
 800fd4a:	07d4      	lsls	r4, r2, #31
 800fd4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fd50:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fd54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fd58:	bf5e      	ittt	pl
 800fd5a:	0fda      	lsrpl	r2, r3, #31
 800fd5c:	005b      	lslpl	r3, r3, #1
 800fd5e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fd62:	2400      	movs	r4, #0
 800fd64:	0fda      	lsrs	r2, r3, #31
 800fd66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fd6a:	107f      	asrs	r7, r7, #1
 800fd6c:	005b      	lsls	r3, r3, #1
 800fd6e:	2516      	movs	r5, #22
 800fd70:	4620      	mov	r0, r4
 800fd72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fd76:	1886      	adds	r6, r0, r2
 800fd78:	428e      	cmp	r6, r1
 800fd7a:	bfde      	ittt	le
 800fd7c:	1b89      	suble	r1, r1, r6
 800fd7e:	18b0      	addle	r0, r6, r2
 800fd80:	18a4      	addle	r4, r4, r2
 800fd82:	0049      	lsls	r1, r1, #1
 800fd84:	3d01      	subs	r5, #1
 800fd86:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fd8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fd8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fd92:	d1f0      	bne.n	800fd76 <__ieee754_sqrt+0x92>
 800fd94:	462a      	mov	r2, r5
 800fd96:	f04f 0e20 	mov.w	lr, #32
 800fd9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fd9e:	4281      	cmp	r1, r0
 800fda0:	eb06 0c05 	add.w	ip, r6, r5
 800fda4:	dc02      	bgt.n	800fdac <__ieee754_sqrt+0xc8>
 800fda6:	d113      	bne.n	800fdd0 <__ieee754_sqrt+0xec>
 800fda8:	459c      	cmp	ip, r3
 800fdaa:	d811      	bhi.n	800fdd0 <__ieee754_sqrt+0xec>
 800fdac:	f1bc 0f00 	cmp.w	ip, #0
 800fdb0:	eb0c 0506 	add.w	r5, ip, r6
 800fdb4:	da43      	bge.n	800fe3e <__ieee754_sqrt+0x15a>
 800fdb6:	2d00      	cmp	r5, #0
 800fdb8:	db41      	blt.n	800fe3e <__ieee754_sqrt+0x15a>
 800fdba:	f100 0801 	add.w	r8, r0, #1
 800fdbe:	1a09      	subs	r1, r1, r0
 800fdc0:	459c      	cmp	ip, r3
 800fdc2:	bf88      	it	hi
 800fdc4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800fdc8:	eba3 030c 	sub.w	r3, r3, ip
 800fdcc:	4432      	add	r2, r6
 800fdce:	4640      	mov	r0, r8
 800fdd0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fdd4:	f1be 0e01 	subs.w	lr, lr, #1
 800fdd8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800fddc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fde0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fde4:	d1db      	bne.n	800fd9e <__ieee754_sqrt+0xba>
 800fde6:	430b      	orrs	r3, r1
 800fde8:	d006      	beq.n	800fdf8 <__ieee754_sqrt+0x114>
 800fdea:	1c50      	adds	r0, r2, #1
 800fdec:	bf13      	iteet	ne
 800fdee:	3201      	addne	r2, #1
 800fdf0:	3401      	addeq	r4, #1
 800fdf2:	4672      	moveq	r2, lr
 800fdf4:	f022 0201 	bicne.w	r2, r2, #1
 800fdf8:	1063      	asrs	r3, r4, #1
 800fdfa:	0852      	lsrs	r2, r2, #1
 800fdfc:	07e1      	lsls	r1, r4, #31
 800fdfe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fe02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fe06:	bf48      	it	mi
 800fe08:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fe0c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fe10:	4614      	mov	r4, r2
 800fe12:	e781      	b.n	800fd18 <__ieee754_sqrt+0x34>
 800fe14:	0ad9      	lsrs	r1, r3, #11
 800fe16:	3815      	subs	r0, #21
 800fe18:	055b      	lsls	r3, r3, #21
 800fe1a:	2900      	cmp	r1, #0
 800fe1c:	d0fa      	beq.n	800fe14 <__ieee754_sqrt+0x130>
 800fe1e:	02cd      	lsls	r5, r1, #11
 800fe20:	d50a      	bpl.n	800fe38 <__ieee754_sqrt+0x154>
 800fe22:	f1c2 0420 	rsb	r4, r2, #32
 800fe26:	fa23 f404 	lsr.w	r4, r3, r4
 800fe2a:	1e55      	subs	r5, r2, #1
 800fe2c:	4093      	lsls	r3, r2
 800fe2e:	4321      	orrs	r1, r4
 800fe30:	1b42      	subs	r2, r0, r5
 800fe32:	e78a      	b.n	800fd4a <__ieee754_sqrt+0x66>
 800fe34:	4610      	mov	r0, r2
 800fe36:	e7f0      	b.n	800fe1a <__ieee754_sqrt+0x136>
 800fe38:	0049      	lsls	r1, r1, #1
 800fe3a:	3201      	adds	r2, #1
 800fe3c:	e7ef      	b.n	800fe1e <__ieee754_sqrt+0x13a>
 800fe3e:	4680      	mov	r8, r0
 800fe40:	e7bd      	b.n	800fdbe <__ieee754_sqrt+0xda>
 800fe42:	bf00      	nop
 800fe44:	7ff00000 	.word	0x7ff00000

0800fe48 <_init>:
 800fe48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe4a:	bf00      	nop
 800fe4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe4e:	bc08      	pop	{r3}
 800fe50:	469e      	mov	lr, r3
 800fe52:	4770      	bx	lr

0800fe54 <_fini>:
 800fe54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe56:	bf00      	nop
 800fe58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe5a:	bc08      	pop	{r3}
 800fe5c:	469e      	mov	lr, r3
 800fe5e:	4770      	bx	lr
